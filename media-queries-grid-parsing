Update to new parsing rules for grid media query per http://lists.w3.org/Archives/Public/www-style/2008Aug/0191.html .  (Bug 453759)  r+sr=bzbarsky

diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -1683,18 +1683,24 @@ PRBool CSSParserImpl::ParseMediaQueryExp
 
   PRBool rv;
   switch (feature->mValueType) {
     case nsMediaFeature::eLength:
       rv = ParsePositiveVariant(aErrorCode, expr->mValue,
                                 VARIANT_LENGTH, nsnull);
       break;
     case nsMediaFeature::eInteger:
+    case nsMediaFeature::eBoolInteger:
       rv = ParsePositiveVariant(aErrorCode, expr->mValue,
                                 VARIANT_INTEGER, nsnull);
+      // Enforce extra restrictions for eBoolInteger
+      if (rv &&
+          feature->mValueType == nsMediaFeature::eBoolInteger &&
+          expr->mValue.GetIntValue() > 1)
+        rv = PR_FALSE;
       break;
     case nsMediaFeature::eIntRatio:
       {
         // Two integers separated by '/', with optional whitespace on
         // either side of the '/'.
         nsRefPtr<nsCSSValue::Array> a = nsCSSValue::Array::Create(2);
         if (!a) {
           aErrorCode = NS_ERROR_OUT_OF_MEMORY;
diff --git a/layout/style/nsCSSStyleSheet.cpp b/layout/style/nsCSSStyleSheet.cpp
--- a/layout/style/nsCSSStyleSheet.cpp
+++ b/layout/style/nsCSSStyleSheet.cpp
@@ -207,21 +207,28 @@ nsMediaExpression::Matches(nsPresContext
         nscoord actualCoord = nsRuleNode::CalcLengthWithInitialFont(
                                 aPresContext, actual);
         nscoord requiredCoord = nsRuleNode::CalcLengthWithInitialFont(
                                   aPresContext, required);
         cmp = DoCompare(actualCoord, requiredCoord);
       }
       break;
     case nsMediaFeature::eInteger:
+    case nsMediaFeature::eBoolInteger:
       {
         NS_ASSERTION(actual.GetUnit() == eCSSUnit_Integer,
                      "bad actual value");
         NS_ASSERTION(required.GetUnit() == eCSSUnit_Integer,
                      "bad required value");
+        NS_ASSERTION(mFeature->mValueType != nsMediaFeature::eBoolInteger ||
+                     actual.GetIntValue() == 0 || actual.GetIntValue() == 1,
+                     "bad actual bool integer value");
+        NS_ASSERTION(mFeature->mValueType != nsMediaFeature::eBoolInteger ||
+                     required.GetIntValue() == 0 || required.GetIntValue() == 1,
+                     "bad required bool integer value");
         cmp = DoCompare(actual.GetIntValue(), required.GetIntValue());
       }
       break;
     case nsMediaFeature::eIntRatio:
       {
         NS_ASSERTION(actual.GetUnit() == eCSSUnit_Array &&
                      actual.GetArrayValue()->Count() == 2 &&
                      actual.GetArrayValue()->Item(0).GetUnit() ==
@@ -387,16 +394,17 @@ nsMediaQuery::AppendToString(nsAString& 
         case nsMediaFeature::eLength:
           NS_ASSERTION(expr.mValue.IsLengthUnit(), "bad unit");
           // Use 'width' as a property that takes length values
           // written in the normal way.
           nsCSSDeclaration::AppendCSSValueToString(eCSSProperty_width,
                                                    expr.mValue, aString);
           break;
         case nsMediaFeature::eInteger:
+        case nsMediaFeature::eBoolInteger:
           NS_ASSERTION(expr.mValue.GetUnit() == eCSSUnit_Integer,
                        "bad unit");
           // Use 'z-index' as a property that takes integer values
           // written without anything extra.
           nsCSSDeclaration::AppendCSSValueToString(eCSSProperty_z_index,
                                                    expr.mValue, aString);
           break;
         case nsMediaFeature::eIntRatio:
diff --git a/layout/style/nsMediaFeatures.cpp b/layout/style/nsMediaFeatures.cpp
--- a/layout/style/nsMediaFeatures.cpp
+++ b/layout/style/nsMediaFeatures.cpp
@@ -331,17 +331,17 @@ nsMediaFeatures::features[] = {
         nsMediaFeature::eMinMaxNotAllowed,
         nsMediaFeature::eEnumerated,
         kScanKeywords,
         GetScan
     },
     {
         &nsGkAtoms::grid,
         nsMediaFeature::eMinMaxNotAllowed,
-        nsMediaFeature::eInteger,
+        nsMediaFeature::eBoolInteger,
         nsnull,
         GetGrid
     },
     // Null-mName terminator:
     {
         nsnull,
         nsMediaFeature::eMinMaxAllowed,
         nsMediaFeature::eInteger,
diff --git a/layout/style/nsMediaFeatures.h b/layout/style/nsMediaFeatures.h
--- a/layout/style/nsMediaFeatures.h
+++ b/layout/style/nsMediaFeatures.h
@@ -56,16 +56,17 @@ struct nsMediaFeature {
     enum RangeType { eMinMaxAllowed, eMinMaxNotAllowed };
     RangeType mRangeType;
 
     enum ValueType {
         // All value types allow eCSSUnit_Null to indicate that no value
         // was given (in addition to the types listed below).
         eLength,     // values are such that nsCSSValue::IsLengthUnit() is true
         eInteger,    // values are eCSSUnit_Integer
+        eBoolInteger,// values are eCSSUnit_Integer (0, -0, or 1 only)
         eIntRatio,   // values are eCSSUnit_Array of two eCSSUnit_Integer
         eResolution, // values are in eCSSUnit_Inch (for dpi) or
                      //   eCSSUnit_Centimeter (for dpcm)
         eEnumerated  // values are eCSSUnit_Enumerated (uses keyword table)
 
         // Note that a number of pieces of code (both for parsing and
         // for matching of valueless expressions) assume that all numeric
         // value types cannot be negative.  The parsing code also does
diff --git a/layout/style/test/test_media_queries.html b/layout/style/test/test_media_queries.html
--- a/layout/style/test/test_media_queries.html
+++ b/layout/style/test/test_media_queries.html
@@ -415,20 +415,18 @@ function run() {
   should_apply("not all and (scan: interlace)");
 
   expression_should_be_parseable("grid");
   expression_should_be_parseable("grid: 0");
   expression_should_be_parseable("grid: 1");
   expression_should_be_parseable("grid: 1");
   expression_should_not_be_parseable("min-grid");
   expression_should_not_be_parseable("max-grid: 1");
-  // FIXME: Mark these as todo since the spec isn't clear:
-  // http://lists.w3.org/Archives/Public/www-style/2008Jun/0214.html
-  todo_expression_should_not_be_parseable("grid: 2");
-  todo_expression_should_be_parseable("grid: -1");
+  expression_should_not_be_parseable("grid: 2");
+  expression_should_not_be_parseable("grid: -1");
 
   // Assume we don't support grid devices
   should_not_apply("(grid)");
   should_apply("(grid: 0)");
   should_not_apply("(grid: 1)");
   should_not_apply("(grid: 2)");
   should_not_apply("(grid: -1)");
 
