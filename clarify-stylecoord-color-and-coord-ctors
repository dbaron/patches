From: L. David Baron <dbaron@dbaron.org>

Better disambiguate nsStyleCoord constructors taking nscoord and nscolor.

diff --git a/content/smil/nsSMILCSSValueType.cpp b/content/smil/nsSMILCSSValueType.cpp
--- a/content/smil/nsSMILCSSValueType.cpp
+++ b/content/smil/nsSMILCSSValueType.cpp
@@ -58,19 +58,20 @@ struct ValueWrapper {
 
   nsStyleCoord   mCSSValue;
   nsCSSProperty  mPropID;
   nsPresContext* mPresContext;
 };
 
 // Helper "zero" values of various types
 // -------------------------------------
-static const nsStyleCoord sZeroCoord(0);
+static const nsStyleCoord sZeroCoord(0, nsStyleCoord::CoordConstructor);
 static const nsStyleCoord sZeroPercent(0.0f, eStyleUnit_Percent);
-static const nsStyleCoord sZeroColor(NS_RGB(0,0,0));
+static const nsStyleCoord sZeroColor(NS_RGB(0,0,0),
+                                     nsStyleCoord::ColorConstructor);
 
 // Helper Methods
 // --------------
 static const nsStyleCoord*
 GetZeroValueForUnit(nsStyleUnit aUnit)
 {
   NS_ABORT_IF_FALSE(aUnit != eStyleUnit_Null,
                     "Need non-null unit for a zero value.");
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -773,17 +773,17 @@ nsComputedDOMStyle::GetColumnGap(nsIDOMC
 
 nsresult
 nsComputedDOMStyle::GetColumnRuleWidth(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   if (!val)
     return NS_ERROR_OUT_OF_MEMORY;
 
-  SetValueToCoord(val, GetStyleColumn()->GetComputedColumnRuleWidth());
+  val->SetAppUnits(GetStyleColumn()->GetComputedColumnRuleWidth());
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetColumnRuleStyle(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   if (!val)
diff --git a/layout/style/nsStyleCoord.cpp b/layout/style/nsStyleCoord.cpp
--- a/layout/style/nsStyleCoord.cpp
+++ b/layout/style/nsStyleCoord.cpp
@@ -47,22 +47,16 @@ nsStyleCoord::nsStyleCoord(nsStyleUnit a
 {
   NS_ASSERTION(aUnit < eStyleUnit_Percent, "not a valueless unit");
   if (aUnit >= eStyleUnit_Percent) {
     mUnit = eStyleUnit_Null;
   }
   mValue.mInt = 0;
 }
 
-nsStyleCoord::nsStyleCoord(nscoord aValue)
-  : mUnit(eStyleUnit_Coord)
-{
-  mValue.mInt = aValue;
-}
-
 nsStyleCoord::nsStyleCoord(PRInt32 aValue, nsStyleUnit aUnit)
   : mUnit(aUnit)
 {
   //if you want to pass in eStyleUnit_Coord, don't. instead, use the
   //constructor just above this one... MMP
   NS_ASSERTION((aUnit == eStyleUnit_Enumerated) ||
                (aUnit == eStyleUnit_Integer), "not an int value");
   if ((aUnit == eStyleUnit_Enumerated) ||
@@ -85,22 +79,16 @@ nsStyleCoord::nsStyleCoord(float aValue,
     mValue.mFloat = aValue;
   }
   else {
     mUnit = eStyleUnit_Null;
     mValue.mInt = 0;
   }
 }
 
-nsStyleCoord::nsStyleCoord(nscolor aValue)
-  : mUnit(eStyleUnit_Color)
-{
-  mValue.mColor = aValue;
-}
-
 nsStyleCoord& nsStyleCoord::operator=(const nsStyleCoord& aCopy)
 {
   mUnit = aCopy.mUnit;
   if ((eStyleUnit_Percent <= mUnit) && (mUnit < eStyleUnit_Coord)) {
     mValue.mFloat = aCopy.mValue.mFloat;
   }
   else {
     mValue.mInt = aCopy.mValue.mInt;
diff --git a/layout/style/nsStyleCoord.h b/layout/style/nsStyleCoord.h
--- a/layout/style/nsStyleCoord.h
+++ b/layout/style/nsStyleCoord.h
@@ -72,20 +72,22 @@ typedef union {
  * and a unit.  The number is an integer, a floating point value, an
  * nscoord, or undefined, and the unit is an nsStyleUnit.  Checking
  * the unit is a must before asking for the value in any particular
  * form.
  */
 class nsStyleCoord {
 public:
   nsStyleCoord(nsStyleUnit aUnit = eStyleUnit_Null);
-  nsStyleCoord(nscoord aValue);
+  enum CoordConstructorType { CoordConstructor };
+  inline nsStyleCoord(nscoord aValue, CoordConstructorType);
   nsStyleCoord(PRInt32 aValue, nsStyleUnit aUnit);
   nsStyleCoord(float aValue, nsStyleUnit aUnit);
-  nsStyleCoord(nscolor aValue);
+  enum ColorConstructorType { ColorConstructor };
+  inline nsStyleCoord(nscolor aValue, ColorConstructorType);
   inline nsStyleCoord(const nsStyleCoord& aCopy);
   inline nsStyleCoord(const nsStyleUnion& aValue, nsStyleUnit aUnit);
 
   nsStyleCoord&  operator=(const nsStyleCoord& aCopy);
   PRBool         operator==(const nsStyleCoord& aOther) const;
   PRBool         operator!=(const nsStyleCoord& aOther) const;
 
   nsStyleUnit GetUnit(void) const {
@@ -189,16 +191,28 @@ protected:
   PRUint8       mUnits[8];
   nsStyleUnion  mValues[8];
 };
 
 
 // -------------------------
 // nsStyleCoord inlines
 //
+inline nsStyleCoord::nsStyleCoord(nscoord aValue, CoordConstructorType)
+  : mUnit(eStyleUnit_Coord)
+{
+  mValue.mInt = aValue;
+}
+
+inline nsStyleCoord::nsStyleCoord(nscolor aValue, ColorConstructorType)
+  : mUnit(eStyleUnit_Color)
+{
+  mValue.mColor = aValue;
+}
+
 inline nsStyleCoord::nsStyleCoord(const nsStyleCoord& aCopy)
   : mUnit(aCopy.mUnit)
 {
   if ((eStyleUnit_Percent <= mUnit) && (mUnit < eStyleUnit_Coord)) {
     mValue.mFloat = aCopy.mValue.mFloat;
   }
   else {
     mValue.mInt = aCopy.mValue.mInt;
