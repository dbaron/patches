From: L. David Baron <dbaron@dbaron.org>

Better disambiguate nsStyleCoord constructors taking nscoord and nscolor.  (Bug 521352)  r=bzbarsky

diff --git a/content/smil/nsSMILCSSValueType.cpp b/content/smil/nsSMILCSSValueType.cpp
--- a/content/smil/nsSMILCSSValueType.cpp
+++ b/content/smil/nsSMILCSSValueType.cpp
@@ -58,20 +58,21 @@ struct ValueWrapper {
 
   nsStyleCoord   mCSSValue;
   nsCSSProperty  mPropID;
   nsPresContext* mPresContext;
 };
 
 // Helper "zero" values of various types
 // -------------------------------------
-static const nsStyleCoord sZeroCoord(0);
+static const nsStyleCoord sZeroCoord(0, nsStyleCoord::CoordConstructor);
 static const nsStyleCoord sZeroPercent(0.0f, eStyleUnit_Percent);
 static const nsStyleCoord sZeroFactor(0.0f,  eStyleUnit_Factor);
-static const nsStyleCoord sZeroColor(NS_RGB(0,0,0));
+static const nsStyleCoord sZeroColor(NS_RGB(0,0,0),
+                                     nsStyleCoord::ColorConstructor);
 
 // Helper Methods
 // --------------
 static const nsStyleCoord*
 GetZeroValueForUnit(nsStyleUnit aUnit)
 {
   NS_ABORT_IF_FALSE(aUnit != eStyleUnit_Null,
                     "Need non-null unit for a zero value.");
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -773,17 +773,17 @@ nsComputedDOMStyle::GetColumnGap(nsIDOMC
 
 nsresult
 nsComputedDOMStyle::GetColumnRuleWidth(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   if (!val)
     return NS_ERROR_OUT_OF_MEMORY;
 
-  SetValueToCoord(val, GetStyleColumn()->GetComputedColumnRuleWidth());
+  val->SetAppUnits(GetStyleColumn()->GetComputedColumnRuleWidth());
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetColumnRuleStyle(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   if (!val)
diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -3311,17 +3311,18 @@ nsRuleNode::ComputeTextData(void* aStart
   SetDiscrete(textData.mWhiteSpace, text->mWhiteSpace, canStoreInRuleTree,
               SETDSC_ENUMERATED | SETDSC_NORMAL, parentText->mWhiteSpace,
               NS_STYLE_WHITESPACE_NORMAL, 0, 0,
               NS_STYLE_WHITESPACE_NORMAL, 0);
  
   // word-spacing: normal, length, inherit
   nsStyleCoord tempCoord;
   if (SetCoord(textData.mWordSpacing, tempCoord,
-               nsStyleCoord(parentText->mWordSpacing),
+               nsStyleCoord(parentText->mWordSpacing,
+                            nsStyleCoord::CoordConstructor),
                SETCOORD_LH | SETCOORD_NORMAL | SETCOORD_INITIAL_NORMAL,
                aContext, mPresContext, canStoreInRuleTree)) {
     if (tempCoord.GetUnit() == eStyleUnit_Coord) {
       text->mWordSpacing = tempCoord.GetCoordValue();
     } else if (tempCoord.GetUnit() == eStyleUnit_Normal) {
       text->mWordSpacing = 0;
     } else {
       NS_NOTREACHED("unexpected unit");
@@ -5019,17 +5020,18 @@ nsRuleNode::ComputeOutlineData(void* aSt
     SetCoord(marginData.mOutlineWidth, outline->mOutlineWidth,
              parentOutline->mOutlineWidth, SETCOORD_LEH, aContext,
              mPresContext, canStoreInRuleTree);
   }
 
   // outline-offset: length, inherit
   nsStyleCoord tempCoord;
   if (SetCoord(marginData.mOutlineOffset, tempCoord,
-               parentOutline->mOutlineOffset,
+               nsStyleCoord(parentOutline->mOutlineOffset,
+                            nsStyleCoord::CoordConstructor),
                SETCOORD_LH | SETCOORD_INITIAL_ZERO, aContext, mPresContext,
                canStoreInRuleTree)) {
     outline->mOutlineOffset = tempCoord.GetCoordValue();
   } else {
     NS_ASSERTION(marginData.mOutlineOffset.GetUnit() == eCSSUnit_Null,
                  "unexpected unit");
   }
 
@@ -5288,28 +5290,30 @@ nsRuleNode::ComputeTableBorderData(void*
   SetDiscrete(tableData.mBorderCollapse, table->mBorderCollapse,
               canStoreInRuleTree,
               SETDSC_ENUMERATED, parentTable->mBorderCollapse,
               NS_STYLE_BORDER_SEPARATE, 0, 0, 0, 0);
 
   // border-spacing-x: length, inherit
   nsStyleCoord tempCoord;
   if (SetCoord(tableData.mBorderSpacing.mXValue, tempCoord,
-               parentTable->mBorderSpacingX,
+               nsStyleCoord(parentTable->mBorderSpacingX,
+                            nsStyleCoord::CoordConstructor),
                SETCOORD_LH | SETCOORD_INITIAL_ZERO,
                aContext, mPresContext, canStoreInRuleTree)) {
     table->mBorderSpacingX = tempCoord.GetCoordValue();
   } else {
     NS_ASSERTION(tableData.mBorderSpacing.mXValue.GetUnit() == eCSSUnit_Null,
                  "unexpected unit");
   }
 
   // border-spacing-y: length, inherit
   if (SetCoord(tableData.mBorderSpacing.mYValue, tempCoord,
-               parentTable->mBorderSpacingY,
+               nsStyleCoord(parentTable->mBorderSpacingY,
+                            nsStyleCoord::CoordConstructor),
                SETCOORD_LH | SETCOORD_INITIAL_ZERO,
                aContext, mPresContext, canStoreInRuleTree)) {
     table->mBorderSpacingY = tempCoord.GetCoordValue();
   } else {
     NS_ASSERTION(tableData.mBorderSpacing.mYValue.GetUnit() == eCSSUnit_Null,
                  "unexpected unit");
   }
 
@@ -5879,17 +5883,17 @@ nsRuleNode::ComputeSVGData(void* aStartS
         
         svg->mStrokeDasharray = new nsStyleCoord[svg->mStrokeDasharrayLength];
 
         if (svg->mStrokeDasharray) {
           value = SVGData.mStrokeDasharray;
           PRUint32 i = 0;
           while (nsnull != value) {
             SetCoord(value->mValue,
-                     svg->mStrokeDasharray[i++], nsnull,
+                     svg->mStrokeDasharray[i++], nsStyleCoord(),
                      SETCOORD_LP | SETCOORD_FACTOR,
                      aContext, mPresContext, canStoreInRuleTree);
             value = value->mNext;
           }
         } else
           svg->mStrokeDasharrayLength = 0;
       }
     }
diff --git a/layout/style/nsStyleCoord.cpp b/layout/style/nsStyleCoord.cpp
--- a/layout/style/nsStyleCoord.cpp
+++ b/layout/style/nsStyleCoord.cpp
@@ -47,22 +47,16 @@ nsStyleCoord::nsStyleCoord(nsStyleUnit a
 {
   NS_ASSERTION(aUnit < eStyleUnit_Percent, "not a valueless unit");
   if (aUnit >= eStyleUnit_Percent) {
     mUnit = eStyleUnit_Null;
   }
   mValue.mInt = 0;
 }
 
-nsStyleCoord::nsStyleCoord(nscoord aValue)
-  : mUnit(eStyleUnit_Coord)
-{
-  mValue.mInt = aValue;
-}
-
 nsStyleCoord::nsStyleCoord(PRInt32 aValue, nsStyleUnit aUnit)
   : mUnit(aUnit)
 {
   //if you want to pass in eStyleUnit_Coord, don't. instead, use the
   //constructor just above this one... MMP
   NS_ASSERTION((aUnit == eStyleUnit_Enumerated) ||
                (aUnit == eStyleUnit_Integer), "not an int value");
   if ((aUnit == eStyleUnit_Enumerated) ||
@@ -85,22 +79,16 @@ nsStyleCoord::nsStyleCoord(float aValue,
     mValue.mFloat = aValue;
   }
   else {
     mUnit = eStyleUnit_Null;
     mValue.mInt = 0;
   }
 }
 
-nsStyleCoord::nsStyleCoord(nscolor aValue)
-  : mUnit(eStyleUnit_Color)
-{
-  mValue.mColor = aValue;
-}
-
 nsStyleCoord& nsStyleCoord::operator=(const nsStyleCoord& aCopy)
 {
   mUnit = aCopy.mUnit;
   if ((eStyleUnit_Percent <= mUnit) && (mUnit < eStyleUnit_Coord)) {
     mValue.mFloat = aCopy.mValue.mFloat;
   }
   else {
     mValue.mInt = aCopy.mValue.mInt;
diff --git a/layout/style/nsStyleCoord.h b/layout/style/nsStyleCoord.h
--- a/layout/style/nsStyleCoord.h
+++ b/layout/style/nsStyleCoord.h
@@ -72,20 +72,22 @@ typedef union {
  * and a unit.  The number is an integer, a floating point value, an
  * nscoord, or undefined, and the unit is an nsStyleUnit.  Checking
  * the unit is a must before asking for the value in any particular
  * form.
  */
 class nsStyleCoord {
 public:
   nsStyleCoord(nsStyleUnit aUnit = eStyleUnit_Null);
-  nsStyleCoord(nscoord aValue);
+  enum CoordConstructorType { CoordConstructor };
+  inline nsStyleCoord(nscoord aValue, CoordConstructorType);
   nsStyleCoord(PRInt32 aValue, nsStyleUnit aUnit);
   nsStyleCoord(float aValue, nsStyleUnit aUnit);
-  nsStyleCoord(nscolor aValue);
+  enum ColorConstructorType { ColorConstructor };
+  inline nsStyleCoord(nscolor aValue, ColorConstructorType);
   inline nsStyleCoord(const nsStyleCoord& aCopy);
   inline nsStyleCoord(const nsStyleUnion& aValue, nsStyleUnit aUnit);
 
   nsStyleCoord&  operator=(const nsStyleCoord& aCopy);
   PRBool         operator==(const nsStyleCoord& aOther) const;
   PRBool         operator!=(const nsStyleCoord& aOther) const;
 
   nsStyleUnit GetUnit(void) const {
@@ -189,16 +191,28 @@ protected:
   PRUint8       mUnits[8];
   nsStyleUnion  mValues[8];
 };
 
 
 // -------------------------
 // nsStyleCoord inlines
 //
+inline nsStyleCoord::nsStyleCoord(nscoord aValue, CoordConstructorType)
+  : mUnit(eStyleUnit_Coord)
+{
+  mValue.mInt = aValue;
+}
+
+inline nsStyleCoord::nsStyleCoord(nscolor aValue, ColorConstructorType)
+  : mUnit(eStyleUnit_Color)
+{
+  mValue.mColor = aValue;
+}
+
 inline nsStyleCoord::nsStyleCoord(const nsStyleCoord& aCopy)
   : mUnit(aCopy.mUnit)
 {
   if ((eStyleUnit_Percent <= mUnit) && (mUnit < eStyleUnit_Coord)) {
     mValue.mFloat = aCopy.mValue.mFloat;
   }
   else {
     mValue.mInt = aCopy.mValue.mInt;
diff --git a/layout/style/nsStyleStruct.cpp b/layout/style/nsStyleStruct.cpp
--- a/layout/style/nsStyleStruct.cpp
+++ b/layout/style/nsStyleStruct.cpp
@@ -248,17 +248,17 @@ static nscoord CalcCoord(const nsStyleCo
       NS_ERROR("bad unit type");
       break;
   }
   return 0;
 }
 
 nsStyleMargin::nsStyleMargin() {
   MOZ_COUNT_CTOR(nsStyleMargin);
-  nsStyleCoord zero(0);
+  nsStyleCoord zero(0, nsStyleCoord::CoordConstructor);
   NS_FOR_CSS_SIDES(side) {
     mMargin.Set(side, zero);
   }
   mHasCachedMargin = PR_FALSE;
 }
 
 nsStyleMargin::nsStyleMargin(const nsStyleMargin& aSrc) {
   MOZ_COUNT_CTOR(nsStyleMargin);
@@ -312,17 +312,17 @@ nsChangeHint nsStyleMargin::MaxDifferenc
   return NS_SubtractHint(NS_STYLE_HINT_REFLOW,
                          NS_CombineHint(nsChangeHint_ClearDescendantIntrinsics,
                                         nsChangeHint_NeedDirtyReflow));
 }
 #endif
 
 nsStylePadding::nsStylePadding() {
   MOZ_COUNT_CTOR(nsStylePadding);
-  nsStyleCoord zero(0);
+  nsStyleCoord zero(0, nsStyleCoord::CoordConstructor);
   NS_FOR_CSS_SIDES(side) {
     mPadding.Set(side, zero);
   }
   mHasCachedPadding = PR_FALSE;
 }
 
 nsStylePadding::nsStylePadding(const nsStylePadding& aSrc) {
   MOZ_COUNT_CTOR(nsStylePadding);
@@ -387,17 +387,17 @@ nsStyleBorder::nsStyleBorder(nsPresConte
   nscoord medium =
     (aPresContext->GetBorderWidthTable())[NS_STYLE_BORDER_WIDTH_MEDIUM];
   NS_FOR_CSS_SIDES(side) {
     mBorder.side(side) = medium;
     mBorderStyle[side] = NS_STYLE_BORDER_STYLE_NONE | BORDER_COLOR_FOREGROUND;
     mBorderColor[side] = NS_RGB(0, 0, 0);
   }
   NS_FOR_CSS_HALF_CORNERS(corner) {
-    mBorderRadius.Set(corner, nsStyleCoord(0));
+    mBorderRadius.Set(corner, nsStyleCoord(0, nsStyleCoord::CoordConstructor));
   }
 
   mBorderColors = nsnull;
   mBoxShadow = nsnull;
 
   mFloatEdge = NS_STYLE_FLOAT_EDGE_CONTENT;
 
   mTwipsPerPixel = aPresContext->DevPixelsToAppUnits(1);
@@ -557,17 +557,17 @@ nsStyleBorder::GetActualBorder() const
   else
     return mComputedBorder;
 }
 
 nsStyleOutline::nsStyleOutline(nsPresContext* aPresContext)
 {
   MOZ_COUNT_CTOR(nsStyleOutline);
   // spacing values not inherited
-  nsStyleCoord zero(0);
+  nsStyleCoord zero(0, nsStyleCoord::CoordConstructor);
   NS_FOR_CSS_HALF_CORNERS(corner) {
     mOutlineRadius.Set(corner, zero);
   }
 
   mOutlineOffset = 0;
 
   mOutlineWidth = nsStyleCoord(NS_STYLE_BORDER_WIDTH_MEDIUM, eStyleUnit_Enumerated);
   mOutlineStyle = NS_STYLE_BORDER_STYLE_NONE;
