From: L. David Baron <dbaron@dbaron.org>

Bug 978833 patch 5 - Rename ImportantRule to ImportantStyleData.

(This is part of a longer term plan to rename nsIStyleRule to StyleData
and nsIStyleRuleProcessor to StyleDataSource.  I'm not doing all of that
here, though.)

diff --git a/layout/style/StyleRule.cpp b/layout/style/StyleRule.cpp
--- a/layout/style/StyleRule.cpp
+++ b/layout/style/StyleRule.cpp
@@ -1033,41 +1033,41 @@ nsCSSSelectorList::SizeOfIncludingThis(m
   while (s) {
     n += aMallocSizeOf(s);
     n += s->mSelectors ? s->mSelectors->SizeOfIncludingThis(aMallocSizeOf) : 0;
     s = s->mNext;
   }
   return n;
 }
 
-// -- ImportantRule ----------------------------------
+// -- ImportantStyleData ----------------------------------
 
 namespace mozilla {
 namespace css {
 
-ImportantRule::ImportantRule(Declaration* aDeclaration)
+ImportantStyleData::ImportantStyleData(Declaration* aDeclaration)
   : mDeclaration(aDeclaration)
 {
 }
 
-ImportantRule::~ImportantRule()
+ImportantStyleData::~ImportantStyleData()
 {
 }
 
-NS_IMPL_ISUPPORTS(ImportantRule, nsIStyleRule)
+NS_IMPL_ISUPPORTS(ImportantStyleData, nsIStyleRule)
 
 /* virtual */ void
-ImportantRule::MapRuleInfoInto(nsRuleData* aRuleData)
+ImportantStyleData::MapRuleInfoInto(nsRuleData* aRuleData)
 {
   mDeclaration->MapImportantRuleInfoInto(aRuleData);
 }
 
 #ifdef DEBUG
 /* virtual */ void
-ImportantRule::List(FILE* out, int32_t aIndent) const
+ImportantStyleData::List(FILE* out, int32_t aIndent) const
 {
   // Indent
   nsAutoCString str;
   for (int32_t index = aIndent; --index >= 0; ) {
     str.AppendLiteral("  ");
   }
 
   str.AppendLiteral("! important rule\n");
@@ -1492,17 +1492,17 @@ void
 StyleRule::RuleMatched()
 {
   if (!mWasMatched) {
     MOZ_ASSERT(!mImportantRule, "should not have important rule yet");
 
     mWasMatched = true;
     mDeclaration->SetImmutable();
     if (mDeclaration->HasImportantData()) {
-      mImportantRule = new ImportantRule(mDeclaration);
+      mImportantRule = new ImportantStyleData(mDeclaration);
     }
   }
 }
 
 /* virtual */ int32_t
 StyleRule::GetType() const
 {
   return Rule::STYLE_RULE;
diff --git a/layout/style/StyleRule.h b/layout/style/StyleRule.h
--- a/layout/style/StyleRule.h
+++ b/layout/style/StyleRule.h
@@ -289,30 +289,30 @@ private:
 namespace mozilla {
 namespace css {
 
 class Declaration;
 class DOMCSSStyleRule;
 
 class StyleRule;
 
-class ImportantRule final : public nsIStyleRule {
+class ImportantStyleData final : public nsIStyleRule {
 public:
-  explicit ImportantRule(Declaration *aDeclaration);
+  explicit ImportantStyleData(Declaration *aDeclaration);
 
   NS_DECL_ISUPPORTS
 
   // nsIStyleRule interface
   virtual void MapRuleInfoInto(nsRuleData* aRuleData) override;
 #ifdef DEBUG
   virtual void List(FILE* out = stdout, int32_t aIndent = 0) const override;
 #endif
 
 protected:
-  virtual ~ImportantRule();
+  virtual ~ImportantStyleData();
 
   RefPtr<Declaration> mDeclaration;
 
   friend class StyleRule;
 };
 
 class StyleRule final : public Rule
 {
@@ -380,17 +380,17 @@ public:
   virtual size_t SizeOfIncludingThis(mozilla::MallocSizeOf aMallocSizeOf) const override;
 
 private:
   ~StyleRule();
 
 private:
   nsCSSSelectorList*      mSelector; // null for style attribute
   RefPtr<Declaration>     mDeclaration;
-  RefPtr<ImportantRule> mImportantRule; // initialized by RuleMatched
+  RefPtr<ImportantStyleData> mImportantRule; // initialized by RuleMatched
   RefPtr<DOMCSSStyleRule> mDOMRule;
 
 private:
   StyleRule& operator=(const StyleRule& aCopy) = delete;
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(StyleRule, NS_CSS_STYLE_RULE_IMPL_CID)
 
diff --git a/layout/style/nsCSSRules.cpp b/layout/style/nsCSSRules.cpp
--- a/layout/style/nsCSSRules.cpp
+++ b/layout/style/nsCSSRules.cpp
@@ -2707,24 +2707,24 @@ nsCSSPageRule::GetParentRule(nsIDOMCSSRu
 }
 
 css::Rule*
 nsCSSPageRule::GetCSSRule()
 {
   return Rule::GetCSSRule();
 }
 
-css::ImportantRule*
+css::ImportantStyleData*
 nsCSSPageRule::GetImportantRule()
 {
   if (!mDeclaration->HasImportantData()) {
     return nullptr;
   }
   if (!mImportantRule) {
-    mImportantRule = new css::ImportantRule(mDeclaration);
+    mImportantRule = new css::ImportantStyleData(mDeclaration);
   }
   return mImportantRule;
 }
 
 /* virtual */ void
 nsCSSPageRule::MapRuleInfoInto(nsRuleData* aRuleData)
 {
   mDeclaration->MapRuleInfoInto(aRuleData);
diff --git a/layout/style/nsCSSRules.h b/layout/style/nsCSSRules.h
--- a/layout/style/nsCSSRules.h
+++ b/layout/style/nsCSSRules.h
@@ -552,24 +552,24 @@ public:
 
   // nsIDOMCSSPageRule interface
   NS_DECL_NSIDOMCSSPAGERULE
 
   mozilla::css::Declaration* Declaration()   { return mDeclaration; }
 
   void ChangeDeclaration(mozilla::css::Declaration* aDeclaration);
 
-  mozilla::css::ImportantRule* GetImportantRule();
+  mozilla::css::ImportantStyleData* GetImportantRule();
 
   virtual size_t SizeOfIncludingThis(mozilla::MallocSizeOf aMallocSizeOf) const override;
 private:
   RefPtr<mozilla::css::Declaration>     mDeclaration;
   // lazily created when needed:
   RefPtr<nsCSSPageStyleDeclaration>     mDOMDeclaration;
-  RefPtr<mozilla::css::ImportantRule>   mImportantRule;
+  RefPtr<mozilla::css::ImportantStyleData> mImportantRule;
 };
 
 namespace mozilla {
 
 class CSSSupportsRule : public css::GroupRule,
                         public nsIDOMCSSSupportsRule
 {
 public:
diff --git a/layout/style/nsStyleSet.cpp b/layout/style/nsStyleSet.cpp
--- a/layout/style/nsStyleSet.cpp
+++ b/layout/style/nsStyleSet.cpp
@@ -1955,21 +1955,21 @@ nsStyleSet::ResolveAnonymousBoxStyle(nsI
   nsRuleWalker ruleWalker(mRuleTree, mAuthorStyleDisabled);
   AnonBoxRuleProcessorData data(PresContext(), aPseudoTag, &ruleWalker);
   FileRules(EnumRulesMatching<AnonBoxRuleProcessorData>, &data, nullptr,
             &ruleWalker);
 
   if (aPseudoTag == nsCSSAnonBoxes::pageContent) {
     // Add any @page rules that are specified.
     nsTArray<nsCSSPageRule*> rules;
-    nsTArray<css::ImportantRule*> importantRules;
+    nsTArray<css::ImportantStyleData*> importantRules;
     PresContext()->StyleSet()->AppendPageRules(rules);
     for (uint32_t i = 0, i_end = rules.Length(); i != i_end; ++i) {
       ruleWalker.Forward(rules[i]);
-      css::ImportantRule* importantRule = rules[i]->GetImportantRule();
+      css::ImportantStyleData* importantRule = rules[i]->GetImportantRule();
       if (importantRule) {
         importantRules.AppendElement(importantRule);
       }
     }
     for (uint32_t i = 0, i_end = importantRules.Length(); i != i_end; ++i) {
       ruleWalker.Forward(importantRules[i]);
     }
   }
