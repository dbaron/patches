From: L. David Baron <dbaron@dbaron.org>

Add assertions that we don't execute script, fire events, or mutate the document during frame construction, reflow, or painting.  (Bug 335053, Bug 335054)

TODO: NEED TO REPLACE CHUNK THAT WAS IN nsJSContext::ScriptEvaluated

diff --git a/dom/base/nsContentUtils.cpp b/dom/base/nsContentUtils.cpp
--- a/dom/base/nsContentUtils.cpp
+++ b/dom/base/nsContentUtils.cpp
@@ -160,16 +160,17 @@
 #include "nsIObjectLoadingContent.h"
 #include "nsIObserver.h"
 #include "nsIObserverService.h"
 #include "nsIOfflineCacheUpdate.h"
 #include "nsIParser.h"
 #include "nsIParserUtils.h"
 #include "nsIPermissionManager.h"
 #include "nsIPluginHost.h"
+#include "nsIPresShell.h"
 #include "nsIRemoteBrowser.h"
 #include "nsIRequest.h"
 #include "nsIRunnable.h"
 #include "nsIScriptContext.h"
 #include "nsIScriptError.h"
 #include "nsIScriptGlobalObject.h"
 #include "nsIScriptObjectPrincipal.h"
 #include "nsIScriptSecurityManager.h"
@@ -245,16 +246,19 @@ using namespace mozilla::dom;
 using namespace mozilla::ipc;
 using namespace mozilla::gfx;
 using namespace mozilla::layers;
 using namespace mozilla::widget;
 using namespace mozilla;
 
 const char kLoadAsData[] = "loadAsData";
 
+#ifdef DEBUG
+bool nsContentUtils::sIsPaintingTree = false;
+#endif
 nsIXPConnect *nsContentUtils::sXPConnect;
 nsIScriptSecurityManager *nsContentUtils::sSecurityManager;
 nsIPrincipal *nsContentUtils::sSystemPrincipal;
 nsIPrincipal *nsContentUtils::sNullSubjectPrincipal;
 nsNameSpaceManager *nsContentUtils::sNameSpaceManager;
 nsIIOService *nsContentUtils::sIOService;
 nsIUUIDGenerator *nsContentUtils::sUUIDGenerator;
 nsIConsoleService *nsContentUtils::sConsoleService;
@@ -5539,16 +5543,36 @@ nsContentUtils::GetLinkLocation(Element*
   if (hrefURI) {
     nsAutoCString specUTF8;
     nsresult rv = hrefURI->GetSpec(specUTF8);
     if (NS_SUCCEEDED(rv))
       CopyUTF8toUTF16(specUTF8, aLocationString);
   }
 }
 
+#ifdef DEBUG
+/* static */
+void
+nsContentUtils::AssertLayoutSafeForScript(nsIDocument *aDocument)
+{
+  nsCOMPtr<nsIPresShell> shell = aDocument->GetPrimaryShell();
+  if (shell) {
+    nsPresContext *presContext = shell->GetPresContext();
+    if (!sIsPaintingTree) {
+      NS_ASSERTION(presContext->LayoutPhaseCount(eLayoutPhase_Paint) == 0,
+                   "should not execute script during paint");
+    }
+    NS_ASSERTION(presContext->LayoutPhaseCount(eLayoutPhase_Reflow) == 0,
+                 "should not execute script during reflow");
+    NS_ASSERTION(presContext->LayoutPhaseCount(eLayoutPhase_FrameC) == 0,
+                 "should not execute script during frame construction");
+  }
+}
+#endif
+
 /* static */
 nsIWidget*
 nsContentUtils::GetTopLevelWidget(nsIWidget* aWidget)
 {
   if (!aWidget)
     return nullptr;
 
   return aWidget->GetTopLevelWidget();
diff --git a/dom/base/nsContentUtils.h b/dom/base/nsContentUtils.h
--- a/dom/base/nsContentUtils.h
+++ b/dom/base/nsContentUtils.h
@@ -2139,16 +2139,27 @@ public:
   /**
    * Populates aResultString with the contents of the string-buffer aBuf, up
    * to aBuf's null-terminator.  aBuf must not be null. Ownership of the string
    * is not transferred.
    */
   static void PopulateStringFromStringBuffer(nsStringBuffer* aBuf,
                                              nsAString& aResultString);
 
+  /**
+   * Assert that no presentation of the given document is currently in
+   * layout operation during which it is not safe to execute script.
+   */
+#ifdef DEBUG
+  static void AssertLayoutSafeForScript(nsIDocument *aDocument);
+  static bool sIsPaintingTree;
+#else
+  static inline void AssertLayoutSafeForScript(nsIDocument *aDocument) {}
+#endif
+
   static bool IsHandlingKeyBoardEvent()
   {
     return sIsHandlingKeyBoardEvent;
   }
 
   static void SetIsHandlingKeyBoardEvent(bool aHandling)
   {
     sIsHandlingKeyBoardEvent = aHandling;
diff --git a/dom/base/nsDocument.h b/dom/base/nsDocument.h
--- a/dom/base/nsDocument.h
+++ b/dom/base/nsDocument.h
@@ -252,16 +252,17 @@ protected:
                          int32_t& aCharsetSource,
                          NotNull<const Encoding*>& aEncoding,
                          nsHtml5TreeOpExecutor* aExecutor);
 
   nsIContent* GetFirstBaseNodeWithHref();
   nsresult SetFirstBaseNodeWithHref(nsIContent *node);
 
 #define NS_DOCUMENT_NOTIFY_OBSERVERS(func_, params_) do {                     \
+    nsContentUtils::AssertLayoutSafeForScript(this);                          \
     NS_OBSERVER_ARRAY_NOTIFY_XPCOM_OBSERVERS(mObservers, nsIDocumentObserver, \
                                              func_, params_);                 \
     /* FIXME(emilio): Apparently we can keep observing from the BFCache? That \
        looks bogus. */                                                        \
     if (nsIPresShell* shell = GetObservingShell()) {                          \
       shell->func_ params_;                                                   \
     }                                                                         \
   } while(0)
diff --git a/dom/base/nsNodeUtils.cpp b/dom/base/nsNodeUtils.cpp
--- a/dom/base/nsNodeUtils.cpp
+++ b/dom/base/nsNodeUtils.cpp
@@ -61,16 +61,17 @@ enum class IsRemoveNotification
   PR_BEGIN_MACRO                                                            \
   bool needsEnterLeave = doc->MayHaveDOMMutationObservers();                \
   if (needsEnterLeave) {                                                    \
     nsDOMMutationObserver::EnterMutationHandling();                         \
   }                                                                         \
   nsINode* node = content_;                                                 \
   COMPOSED_DOC_DECL                                                         \
   NS_ASSERTION(node->OwnerDoc() == doc, "Bogus document");                  \
+  nsContentUtils::AssertLayoutSafeForScript(doc);                           \
   if (remove_ == IsRemoveNotification::Yes && node->GetComposedDoc()) {     \
     if (nsIPresShell* shell = doc->GetObservingShell()) {                   \
       shell->func_ params_;                                                 \
     }                                                                       \
   }                                                                         \
   doc->BindingManager()->func_ params_;                                     \
   nsINode* last;                                                            \
   do {                                                                      \
diff --git a/dom/events/EventDispatcher.cpp b/dom/events/EventDispatcher.cpp
--- a/dom/events/EventDispatcher.cpp
+++ b/dom/events/EventDispatcher.cpp
@@ -807,16 +807,18 @@ EventDispatcher::Dispatch(nsISupports* a
                           Event* aDOMEvent,
                           nsEventStatus* aEventStatus,
                           EventDispatchingCallback* aCallback,
                           nsTArray<EventTarget*>* aTargets)
 {
   AUTO_PROFILER_LABEL("EventDispatcher::Dispatch", OTHER);
 
   NS_ASSERTION(aEvent, "Trying to dispatch without WidgetEvent!");
+  if (aPresContext) // XXX And otherwise?
+    nsContentUtils::AssertLayoutSafeForScript(aPresContext->Document());
   NS_ENSURE_TRUE(!aEvent->mFlags.mIsBeingDispatched,
                  NS_ERROR_DOM_INVALID_STATE_ERR);
   NS_ASSERTION(!aTargets || !aEvent->mMessage, "Wrong parameters!");
 
   // If we're dispatching an already created DOMEvent object, make
   // sure it is initialized!
   // If aTargets is non-null, the event isn't going to be dispatched.
   NS_ENSURE_TRUE(aEvent->mMessage || !aDOMEvent || aTargets,
diff --git a/layout/xul/tree/nsTreeBodyFrame.cpp b/layout/xul/tree/nsTreeBodyFrame.cpp
--- a/layout/xul/tree/nsTreeBodyFrame.cpp
+++ b/layout/xul/tree/nsTreeBodyFrame.cpp
@@ -59,16 +59,17 @@
 #include "nsDisplayList.h"
 #include "mozilla/dom/CustomEvent.h"
 #include "mozilla/dom/Event.h"
 #include "mozilla/dom/ScriptSettings.h"
 #include "mozilla/dom/ToJSValue.h"
 #include "mozilla/dom/TreeBoxObject.h"
 #include "mozilla/dom/TreeColumnBinding.h"
 #include "nsIScriptableRegion.h"
+#include "mozilla/AutoRestore.h"
 #include <algorithm>
 #include "ScrollbarActivity.h"
 
 #ifdef ACCESSIBILITY
 #include "nsAccessibilityService.h"
 #include "nsIWritablePropertyBag2.h"
 #endif
 #include "nsBidiUtils.h"
@@ -2846,16 +2847,21 @@ nsTreeBodyFrame::BuildDisplayList(nsDisp
 #endif
 }
 
 ImgDrawResult
 nsTreeBodyFrame::PaintTreeBody(gfxContext& aRenderingContext,
                                const nsRect& aDirtyRect, nsPoint aPt,
                                nsDisplayListBuilder* aBuilder)
 {
+#ifdef DEBUG
+  AutoRestore<bool> savePainting(nsContentUtils::sIsPaintingTree);
+  nsContentUtils::sIsPaintingTree = true;
+#endif
+
   // Update our available height and our page count.
   CalcInnerBox();
 
   DrawTarget* drawTarget = aRenderingContext.GetDrawTarget();
 
   aRenderingContext.Save();
   aRenderingContext.Clip(
     NSRectToSnappedRect(mInnerBox + aPt, PresContext()->AppUnitsPerDevPixel(),
