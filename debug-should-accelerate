From: L. David Baron <dbaron@dbaron.org>

Add debugging output from nsBaseWidget::GetShouldAccelerate.

diff --git a/widget/src/xpwidgets/nsBaseWidget.cpp b/widget/src/xpwidgets/nsBaseWidget.cpp
--- a/widget/src/xpwidgets/nsBaseWidget.cpp
+++ b/widget/src/xpwidgets/nsBaseWidget.cpp
@@ -829,37 +829,50 @@ nsBaseWidget::GetShouldAccelerate()
   accelerateByDefault = accelerateByDefault || 
                         (acceleratedEnv && (*acceleratedEnv != '0'));
 
   nsCOMPtr<nsIXULRuntime> xr = do_GetService("@mozilla.org/xre/runtime;1");
   PRBool safeMode = PR_FALSE;
   if (xr)
     xr->GetInSafeMode(&safeMode);
 
-  if (disableAcceleration || safeMode)
+  if (disableAcceleration || safeMode) {
+    printf("nsBaseWidget[%p]::GetShouldAccelerate: FALSE because disabled\n",
+           this);
     return PR_FALSE;
+  }
 
-  if (forceAcceleration)
+  if (forceAcceleration) {
+    printf("nsBaseWidget[%p]::GetShouldAccelerate: TRUE because forced\n",
+           this);
     return PR_TRUE;
+  }
 
   nsCOMPtr<nsIGfxInfo> gfxInfo = do_GetService("@mozilla.org/gfx/info;1");
   if (gfxInfo) {
     PRInt32 status;
     if (NS_SUCCEEDED(gfxInfo->GetFeatureStatus(nsIGfxInfo::FEATURE_OPENGL_LAYERS, &status))) {
       if (status != nsIGfxInfo::FEATURE_NO_INFO) {
         NS_WARNING("OpenGL-accelerated layers are not supported on this system.");
+        printf("nsBaseWidget[%p]::GetShouldAccelerate: FALSE because unsupported\n",
+               this);
         return PR_FALSE;
       }
     }
   }
 
-  if (accelerateByDefault)
+  if (accelerateByDefault) {
+    printf("nsBaseWidget[%p]::GetShouldAccelerate: TRUE because default\n",
+           this);
     return PR_TRUE;
+  }
 
   /* use the window acceleration flag */
+  printf("nsBaseWidget[%p]::GetShouldAccelerate: %d (window flags)\n",
+         this, int(mUseAcceleratedRendering));
   return mUseAcceleratedRendering;
 }
 
 LayerManager* nsBaseWidget::GetLayerManager(LayerManagerPersistence,
                                             bool* aAllowRetaining)
 {
   if (!mLayerManager) {
 
