From: L. David Baron <dbaron@dbaron.org>

Bug 1110277 patch 1 - Move a little code from ProcessOneRestyle into RestyleElement so that it will be covered by patch 2.

diff --git a/layout/base/RestyleManager.cpp b/layout/base/RestyleManager.cpp
--- a/layout/base/RestyleManager.cpp
+++ b/layout/base/RestyleManager.cpp
@@ -958,20 +958,28 @@ RestyleManager::RestyleElement(Element* 
         aPrimaryFrame = aElement->GetPrimaryFrame();
       }
     }
   }
 
   if (aMinHint & nsChangeHint_ReconstructFrame) {
     FrameConstructor()->RecreateFramesForContent(aElement, false,
       nsCSSFrameConstructor::REMOVE_FOR_RECONSTRUCTION, nullptr);
+  } else if (!(aRestyleHint & ~eRestyle_LaterSiblings)) {
+    if (aMinHint &&
+        (aPrimaryFrame || (aMinHint & nsChangeHint_ReconstructFrame))) {
+      // Don't need to recompute style; just apply the hint
+      nsStyleChangeList changeList;
+      changeList.AppendChange(aPrimaryFrame, aElement, aMinHint);
+      ProcessRestyledFrames(changeList);
+    }
   } else if (aPrimaryFrame) {
     ComputeAndProcessStyleChange(aPrimaryFrame, aMinHint, aRestyleTracker,
                                  aRestyleHint);
-  } else if (aRestyleHint & ~eRestyle_LaterSiblings) {
+  } else {
     // We're restyling an element with no frame, so we should try to
     // make one if its new style says it should have one.  But in order
     // to try to honor the restyle hint (which we'd like to do so that,
     // for example, an animation-only style flush doesn't flush other
     // buffered style changes), we only do this if the restyle hint says
     // we have *some* restyling for this frame.  This means we'll
     // potentially get ahead of ourselves in that case, but not as much
     // as we would if we didn't check the restyle hint.
diff --git a/layout/base/RestyleTracker.cpp b/layout/base/RestyleTracker.cpp
--- a/layout/base/RestyleTracker.cpp
+++ b/layout/base/RestyleTracker.cpp
@@ -162,35 +162,31 @@ RestyleTracker::ProcessOneRestyle(Elemen
                   "Element has unexpected document");
 
   LOG_RESTYLE("aRestyleHint = %s, aChangeHint = %s",
               RestyleManager::RestyleHintToString(aRestyleHint).get(),
               RestyleManager::ChangeHintToString(aChangeHint).get());
 
   nsIFrame* primaryFrame = aElement->GetPrimaryFrame();
 
-  if (aRestyleHint & ~eRestyle_LaterSiblings) {
+  if ((aRestyleHint & ~eRestyle_LaterSiblings) ||
+      (aChangeHint &&
+       (primaryFrame ||
+        (aChangeHint & nsChangeHint_ReconstructFrame)))) {
 #ifdef RESTYLE_LOGGING
     if (ShouldLogRestyle() && primaryFrame &&
         RestyleManager::StructsToLog() != 0) {
       LOG_RESTYLE("style context tree before restyle:");
       LOG_RESTYLE_INDENT();
       primaryFrame->StyleContext()->LogStyleContextTree(
           LoggingDepth(), RestyleManager::StructsToLog());
     }
 #endif
     mRestyleManager->RestyleElement(aElement, primaryFrame, aChangeHint,
                                     *this, aRestyleHint);
-  } else if (aChangeHint &&
-             (primaryFrame ||
-              (aChangeHint & nsChangeHint_ReconstructFrame))) {
-    // Don't need to recompute style; just apply the hint
-    nsStyleChangeList changeList;
-    changeList.AppendChange(primaryFrame, aElement, aChangeHint);
-    mRestyleManager->ProcessRestyledFrames(changeList);
   }
 }
 
 void
 RestyleTracker::DoProcessRestyles()
 {
   PROFILER_LABEL("RestyleTracker", "ProcessRestyles",
     js::ProfileEntry::Category::CSS);
