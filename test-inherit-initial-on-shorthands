Test for inherit and initial on shorthand properties as well.  b=258080

diff --git a/layout/style/test/test_inherit_storage.html b/layout/style/test/test_inherit_storage.html
--- a/layout/style/test/test_inherit_storage.html
+++ b/layout/style/test/test_inherit_storage.html
@@ -7,7 +7,7 @@ https://bugzilla.mozilla.org/show_bug.cg
   <title>Test for parsing, storage, and serialization of CSS 'inherit'</title>
   <script type="text/javascript" src="/MochiKit/MochiKit.js"></script>
   <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
-  <script type="text/javascript" src="css_properties.js"></script>
+  <script type="text/javascript" src="property_database.js"></script>
   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
 </head>
 <body>
@@ -30,36 +30,36 @@ function test_property(property)
   var pass = true;
   var match = true;
 
-  var val = gDeclaration.getPropertyValue(property.name);
+  var info = gCSSProperties[property];
+
+  var val = gDeclaration.getPropertyValue(property);
   pass = pass && val == "";
-  if (property.prop)
-    match = match && gDeclaration[property.prop] == val;
+  if (info.domProp)
+    match = match && gDeclaration[info.domProp] == val;
 
-  gDeclaration.setProperty(property.name, "inherit", "");
+  gDeclaration.setProperty(property, "inherit", "");
 
-  val = gDeclaration.getPropertyValue(property.name);
+  val = gDeclaration.getPropertyValue(property);
   pass = pass && val == "inherit";
-  if (property.prop)
-    match = match && gDeclaration[property.prop] == val;
+  if (info.domProp)
+    match = match && gDeclaration[info.domProp] == val;
 
-  gDeclaration.removeProperty(property.name);
+  gDeclaration.removeProperty(property);
 
-  val = gDeclaration.getPropertyValue(property.name);
+  val = gDeclaration.getPropertyValue(property);
   pass = pass && val == "";
-  if (property.prop)
-    match = match && gDeclaration[property.prop] == val;
+  if (info.domProp)
+    match = match && gDeclaration[info.domProp] == val;
 
-  ok(pass && match, "inherit parsed, stored, and serialized for CSS '" + property.name + "'");
+  ok(pass && match, "inherit parsed, stored, and serialized for CSS '" + property + "'");
   if (!match) {
     /* already included in above ok, but exceptional in itself */
-    ok(match, "getPropertyValue matches nsICSSProperties for CSS '" + property.name + "'");
+    ok(match, "getPropertyValue matches nsICSSProperties for CSS '" + property + "'");
   }
 }
 
-for (var idx in gLonghandProperties)
-  test_property(gLonghandProperties[idx]);
-for (var idx in gShorthandPropertiesLikeLonghand)
-  test_property(gShorthandPropertiesLikeLonghand[idx]);
+for (var prop in gCSSProperties)
+  test_property(prop);
 
 </script>
 </pre>
diff --git a/layout/style/test/test_property_database.html b/layout/style/test/test_property_database.html
--- a/layout/style/test/test_property_database.html
+++ b/layout/style/test/test_property_database.html
@@ -55,6 +55,38 @@ for (var idx in gShorthandPropertiesLike
      "'" + prop.name + "' listed in gCSSProperties as CSS_TYPE_SHORTHAND_AND_LONGHAND with correct DOM property name");
 }
 
+/*
+ * Test that all shorthand properties have a subproperty list and all
+ * longhand properties do not.
+ */
+for (var prop in gCSSProperties) {
+  var info = gCSSProperties[prop];
+  if (info.type == CSS_TYPE_LONGHAND) {
+    ok(!("subproperties" in info),
+       "longhand property '" + prop + "' must not have subproperty list");
+  } else if (info.type == CSS_TYPE_TRUE_SHORTHAND) {
+    ok("subproperties" in info,
+       "shorthand property '" + prop + "' must have subproperty list");
+  }
+  /* optional for CSS_TYPE_SHORTHAND_AND_LONGHAND */
+
+  if ("subproperties" in info) {
+    var good = true;
+    if (info.subproperties.length < 1) {
+      info("subproperty list for '" + prop + "' is empty");
+      good = false;
+    }
+    for (var idx in info.subproperties) {
+      var subprop = info.subproperties[idx];
+      if (!(subprop in gCSSProperties)) {
+        info("subproperty list for '" + prop + "' lists nonexistent subproperty '" + subprop + "'");
+        good = false;
+      }
+    }
+    ok(good, "property '" + prop + "' has a good subproperty list");
+  }
+}
+
 </script>
 </pre>
 </body>
