From: L. David Baron <dbaron@dbaron.org>

Don't accept an empty value for font-variant-alternates.

This is needed to prevent a test failure with the next patch (which
removes the ExpectEndProperty check from the CSS_PROPERTY_PARSE_VALUE
case in CSSParserImpl::ParseProperty(nsCSSProperty) since its callers
handle checking for appropriate endings), since the way this function
returns success for empty values leads var() functions alone inside
font-variant-alternates to be rejected, since
CSSParserImpl::ParseProperty(nsCSSProperty) won't try reparsing with
variables.

diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -11129,16 +11129,21 @@ CSSParserImpl::ParseFontVariantAlternate
       } else {
         list->mNext = new nsCSSValueList;
         list = list->mNext;
       }
       list->mValue = value;
     }
   }
 
+  if (featureFlags == 0) {
+    // ParseSingleAlternate failed the first time through the loop.
+    return false;
+  }
+
   nsCSSValue featureValue;
   featureValue.SetIntValue(featureFlags, eCSSUnit_Enumerated);
   aValue.SetPairValue(featureValue, listValue);
 
   return true;
 }
 
 // aMasks - array of masks for mutually-exclusive property values,
diff --git a/layout/style/test/test_property_syntax_errors.html b/layout/style/test/test_property_syntax_errors.html
--- a/layout/style/test/test_property_syntax_errors.html
+++ b/layout/style/test/test_property_syntax_errors.html
@@ -60,24 +60,43 @@ function check_value_unbalanced(decl, pr
   decl.cssText = goodProp + ": green; " + property + ": " + badval + "; " +
                  goodProp + ": red";
   is(decl.getPropertyValue(goodProp), "green",
      "invalid value '" + property + ": " + badval +
      "' is unbalanced and absorbs what follows it");
   decl.cssText = "";
 }
 
+function check_empty_value_rejected(decl, emptyval, property)
+{
+  var goodProp =
+    (property == "background-color") ? "color" : "background-color";
+  decl.cssText = goodProp + ": red; " + property + ":" + emptyval + "; " +
+                 goodProp + ": green";
+  is(decl.length, 1,
+     "empty value '" + property + ":" + emptyval +
+     "' is not accepted");
+  is(decl.getPropertyValue(goodProp), "green",
+     "empty value '" + property + ":" + emptyval +
+     "' is balanced and does not lead to parsing errors afterwards");
+  decl.cssText = "";
+}
+
 function run()
 {
   var gDeclaration = document.getElementById("testnode").style;
   var gQuirksDeclaration = document.getElementById("quirks").contentDocument
                              .getElementById("testnode").style;
 
   for (var property in gCSSProperties) {
     var info = gCSSProperties[property];
+
+    check_empty_value_rejected(gDeclaration, "", property);
+    check_empty_value_rejected(gDeclaration, " ", property);
+
     for (var idx in info.invalid_values) {
       check_not_accepted(gDeclaration, property, info,
                          info.invalid_values[idx]);
       check_not_accepted(gQuirksDeclaration, property, info,
                          info.invalid_values[idx]);
       check_value_balanced(gDeclaration, property,
                            info.invalid_values[idx]);
     }
