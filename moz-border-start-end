Implement -moz-border-start and -moz-border-end.  Patch by Simon Montagu <smontagu@smontagu.org>.  b=74880

diff --git a/dom/public/idl/css/nsIDOMCSS2Properties.idl b/dom/public/idl/css/nsIDOMCSS2Properties.idl
--- a/dom/public/idl/css/nsIDOMCSS2Properties.idl
+++ b/dom/public/idl/css/nsIDOMCSS2Properties.idl
@@ -406,7 +406,7 @@ interface nsIDOMCSS2Properties : nsISupp
                                         // raises(DOMException) on setting
 };
 
-[scriptable, uuid(8c2e3658-1fe4-452a-92be-b0afaf76f897)]
+[scriptable, uuid(c9339b8c-9bdd-4d2a-a61a-55ca609b92bd)]
 interface nsIDOMNSCSS2Properties : nsIDOMCSS2Properties
 {
            /* Non-DOM 2 extensions */
@@ -567,4 +567,28 @@ interface nsIDOMNSCSS2Properties : nsIDO
            attribute DOMString        imeMode;
                                         // raises(DOMException) on setting
 
+           attribute DOMString        MozBorderEnd;
+                                        // raises(DOMException) on setting
+
+           attribute DOMString        MozBorderEndColor;
+                                        // raises(DOMException) on setting
+
+           attribute DOMString        MozBorderEndStyle;
+                                        // raises(DOMException) on setting
+
+           attribute DOMString        MozBorderEndWidth;
+                                        // raises(DOMException) on setting
+
+           attribute DOMString        MozBorderStart;
+                                        // raises(DOMException) on setting
+
+           attribute DOMString        MozBorderStartColor;
+                                        // raises(DOMException) on setting
+
+           attribute DOMString        MozBorderStartStyle;
+                                        // raises(DOMException) on setting
+
+           attribute DOMString        MozBorderStartWidth;
+                                        // raises(DOMException) on setting
+
 };
diff --git a/layout/base/nsStyleConsts.h b/layout/base/nsStyleConsts.h
--- a/layout/base/nsStyleConsts.h
+++ b/layout/base/nsStyleConsts.h
@@ -57,7 +57,7 @@
 
 #define NS_FOR_CSS_SIDES(var_) for (PRInt32 var_ = 0; var_ < 4; ++var_)
 
-// {margin,padding}-{left,right}-{ltr,rtl}-source
+// {margin,border-{width,style,color},padding}-{left,right}-{ltr,rtl}-source
 #define NS_BOXPROP_SOURCE_PHYSICAL 0
 #define NS_BOXPROP_SOURCE_LOGICAL  1
 
diff --git a/layout/style/html.css b/layout/style/html.css
--- a/layout/style/html.css
+++ b/layout/style/html.css
@@ -90,8 +90,8 @@ blockquote[type=cite] {
 blockquote[type=cite] {
   display: block;
   margin: 1em 0px;
-  padding-left: 1em;
-  border-left: solid;
+  -moz-padding-start: 1em;
+  -moz-border-start: solid;
   border-color: blue;
   border-width: thin;
 }
diff --git a/layout/style/nsCSSDeclaration.cpp b/layout/style/nsCSSDeclaration.cpp
--- a/layout/style/nsCSSDeclaration.cpp
+++ b/layout/style/nsCSSDeclaration.cpp
@@ -349,6 +349,8 @@ nsCSSDeclaration::AppendCSSValueToString
       case eCSSProperty_border_bottom_color:
       case eCSSProperty_border_left_color:
       case eCSSProperty_border_right_color:
+      case eCSSProperty_border_start_color:
+      case eCSSProperty_border_end_color:
       case eCSSProperty_outline_color: {
         // we can lookup the property in the ColorTable and then
         // get a string mapping the name
@@ -580,6 +582,8 @@ nsCSSDeclaration::GetValue(nsCSSProperty
     case eCSSProperty_border_right:
     case eCSSProperty_border_bottom:
     case eCSSProperty_border_left:
+    case eCSSProperty_border_start:
+    case eCSSProperty_border_end:
     case eCSSProperty_outline: {
       const nsCSSProperty* subprops =
         nsCSSProps::SubpropertyEntryFor(aProperty);
@@ -603,7 +607,19 @@ nsCSSDeclaration::GetValue(nsCSSProperty
     case eCSSProperty_padding_left:
     case eCSSProperty_padding_right:
     case eCSSProperty_padding_start:
-    case eCSSProperty_padding_end: {
+    case eCSSProperty_padding_end:
+    case eCSSProperty_border_left_color:
+    case eCSSProperty_border_left_style:
+    case eCSSProperty_border_left_width:
+    case eCSSProperty_border_right_color:
+    case eCSSProperty_border_right_style:
+    case eCSSProperty_border_right_width:
+    case eCSSProperty_border_start_color:
+    case eCSSProperty_border_start_style:
+    case eCSSProperty_border_start_width:
+    case eCSSProperty_border_end_color:
+    case eCSSProperty_border_end_style:
+    case eCSSProperty_border_end_width: {
       const nsCSSProperty* subprops =
         nsCSSProps::SubpropertyEntryFor(aProperty);
       NS_ASSERTION(subprops[3] == eCSSProperty_UNKNOWN,
@@ -1117,10 +1133,10 @@ nsCSSDeclaration::ToString(nsAString& aS
       case eCSSProperty_border_bottom_width:
         PropertyIsSet(borderBottomWidth, index, borderPropertiesSet, B_BORDER_BOTTOM_WIDTH);
         break;
-      case eCSSProperty_border_left_width:
+      case eCSSProperty_border_left_width_value:
         PropertyIsSet(borderLeftWidth, index, borderPropertiesSet, B_BORDER_LEFT_WIDTH);
         break;
-      case eCSSProperty_border_right_width:
+      case eCSSProperty_border_right_width_value:
         PropertyIsSet(borderRightWidth, index, borderPropertiesSet, B_BORDER_RIGHT_WIDTH);
         break;
 
@@ -1130,10 +1146,10 @@ nsCSSDeclaration::ToString(nsAString& aS
       case eCSSProperty_border_bottom_style:
         PropertyIsSet(borderBottomStyle, index, borderPropertiesSet, B_BORDER_BOTTOM_STYLE);
         break;
-      case eCSSProperty_border_left_style:
+      case eCSSProperty_border_left_style_value:
         PropertyIsSet(borderLeftStyle, index, borderPropertiesSet, B_BORDER_LEFT_STYLE);
         break;
-      case eCSSProperty_border_right_style:
+      case eCSSProperty_border_right_style_value:
         PropertyIsSet(borderRightStyle, index, borderPropertiesSet, B_BORDER_RIGHT_STYLE);
         break;
 
@@ -1143,10 +1159,10 @@ nsCSSDeclaration::ToString(nsAString& aS
       case eCSSProperty_border_bottom_color:
         PropertyIsSet(borderBottomColor, index, borderPropertiesSet, B_BORDER_BOTTOM_COLOR);
         break;
-      case eCSSProperty_border_left_color:
+      case eCSSProperty_border_left_color_value:
         PropertyIsSet(borderLeftColor, index, borderPropertiesSet, B_BORDER_LEFT_COLOR);
         break;
-      case eCSSProperty_border_right_color:
+      case eCSSProperty_border_right_color_value:
         PropertyIsSet(borderRightColor, index, borderPropertiesSet, B_BORDER_RIGHT_COLOR);
         break;
 
@@ -1293,6 +1309,25 @@ nsCSSDeclaration::ToString(nsAString& aS
       NS_CASE_OUTPUT_PROPERTY_VALUE_AS(eCSSProperty_padding_right_value,
                                        eCSSProperty_padding_right, paddingRight)
 
+      NS_CASE_OUTPUT_PROPERTY_VALUE_AS(eCSSProperty_border_left_color_value,
+                                       eCSSProperty_border_left_color,
+                                       borderLeftColor)
+      NS_CASE_OUTPUT_PROPERTY_VALUE_AS(eCSSProperty_border_left_width_value,
+                                       eCSSProperty_border_left_width,
+                                       borderLeftWidth)
+      NS_CASE_OUTPUT_PROPERTY_VALUE_AS(eCSSProperty_border_left_style_value,
+                                       eCSSProperty_border_left_style,
+                                       borderLeftStyle)
+      NS_CASE_OUTPUT_PROPERTY_VALUE_AS(eCSSProperty_border_right_color_value,
+                                       eCSSProperty_border_right_color,
+                                       borderRightColor)
+      NS_CASE_OUTPUT_PROPERTY_VALUE_AS(eCSSProperty_border_right_width_value,
+                                       eCSSProperty_border_right_width,
+                                       borderRightWidth)
+      NS_CASE_OUTPUT_PROPERTY_VALUE_AS(eCSSProperty_border_right_style_value,
+                                       eCSSProperty_border_right_style,
+                                       borderRightStyle)
+
       NS_CASE_OUTPUT_PROPERTY_VALUE(eCSSProperty_background_color, bgColor)
       NS_CASE_OUTPUT_PROPERTY_VALUE(eCSSProperty_background_image, bgImage)
       NS_CASE_OUTPUT_PROPERTY_VALUE(eCSSProperty_background_repeat, bgRepeat)
@@ -1316,8 +1351,50 @@ nsCSSDeclaration::ToString(nsAString& aS
       case eCSSProperty_padding_left_rtl_source:
       case eCSSProperty_padding_right_ltr_source:
       case eCSSProperty_padding_right_rtl_source:
-        break;
-
+      case eCSSProperty_border_left_color_ltr_source:
+      case eCSSProperty_border_left_color_rtl_source:
+      case eCSSProperty_border_left_style_ltr_source:
+      case eCSSProperty_border_left_style_rtl_source:
+      case eCSSProperty_border_left_width_ltr_source:
+      case eCSSProperty_border_left_width_rtl_source:
+      case eCSSProperty_border_right_color_ltr_source:
+      case eCSSProperty_border_right_color_rtl_source:
+      case eCSSProperty_border_right_style_ltr_source:
+      case eCSSProperty_border_right_style_rtl_source:
+      case eCSSProperty_border_right_width_ltr_source:
+      case eCSSProperty_border_right_width_rtl_source:
+        break;
+
+      case eCSSProperty_border_start_color_value:
+        AppendPropertyAndValueToString(property,
+                                       eCSSProperty_border_start_color,
+                                       aString);
+        break;
+      case eCSSProperty_border_end_color_value:
+        AppendPropertyAndValueToString(property,
+                                       eCSSProperty_border_end_color,
+                                       aString);
+        break;
+      case eCSSProperty_border_start_style_value:
+        AppendPropertyAndValueToString(property,
+                                       eCSSProperty_border_start_style,
+                                       aString);
+        break;
+      case eCSSProperty_border_end_style_value:
+        AppendPropertyAndValueToString(property,
+                                       eCSSProperty_border_end_style,
+                                       aString);
+        break;
+      case eCSSProperty_border_start_width_value:
+        AppendPropertyAndValueToString(property,
+                                       eCSSProperty_border_start_width,
+                                       aString);
+        break;
+      case eCSSProperty_border_end_width_value:
+        AppendPropertyAndValueToString(property,
+                                       eCSSProperty_border_end_width,
+                                       aString);
+        break;
       case eCSSProperty_margin_start_value:
         AppendPropertyAndValueToString(property, eCSSProperty_margin_start,
                                        aString);
diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -333,6 +333,9 @@ protected:
   PRBool ParseBorderSide(nsresult& aErrorCode,
                          const nsCSSProperty aPropIDs[],
                          PRBool aSetAllSides);
+  PRBool ParseDirectionalBorderSide(nsresult& aErrorCode,
+                                    const nsCSSProperty aPropIDs[],
+                                    PRInt32 aSourceType);
   PRBool ParseBorderStyle(nsresult& aErrorCode);
   PRBool ParseBorderWidth(nsresult& aErrorCode);
   PRBool ParseBorderRadius(nsresult& aErrorCode);
@@ -3591,6 +3594,9 @@ static const nsCSSProperty kBorderTopIDs
   eCSSProperty_border_top_color
 };
 static const nsCSSProperty kBorderRightIDs[] = {
+  eCSSProperty_border_right_width_value,
+  eCSSProperty_border_right_style_value,
+  eCSSProperty_border_right_color_value,
   eCSSProperty_border_right_width,
   eCSSProperty_border_right_style,
   eCSSProperty_border_right_color
@@ -3601,9 +3607,28 @@ static const nsCSSProperty kBorderBottom
   eCSSProperty_border_bottom_color
 };
 static const nsCSSProperty kBorderLeftIDs[] = {
+  eCSSProperty_border_left_width_value,
+  eCSSProperty_border_left_style_value,
+  eCSSProperty_border_left_color_value,
   eCSSProperty_border_left_width,
   eCSSProperty_border_left_style,
   eCSSProperty_border_left_color
+};
+static const nsCSSProperty kBorderStartIDs[] = {
+  eCSSProperty_border_start_width_value,
+  eCSSProperty_border_start_style_value,
+  eCSSProperty_border_start_color_value,
+  eCSSProperty_border_start_width,
+  eCSSProperty_border_start_style,
+  eCSSProperty_border_start_color
+};
+static const nsCSSProperty kBorderEndIDs[] = {
+  eCSSProperty_border_end_width_value,
+  eCSSProperty_border_end_style_value,
+  eCSSProperty_border_end_color_value,
+  eCSSProperty_border_end_width,
+  eCSSProperty_border_end_style,
+  eCSSProperty_border_end_color
 };
 
 PRBool CSSParserImpl::ParseEnum(nsresult& aErrorCode, nsCSSValue& aValue,
@@ -4259,10 +4284,18 @@ PRBool CSSParserImpl::ParseProperty(nsre
     return ParseBorderStyle(aErrorCode);
   case eCSSProperty_border_bottom:
     return ParseBorderSide(aErrorCode, kBorderBottomIDs, PR_FALSE);
+  case eCSSProperty_border_end:
+    return ParseDirectionalBorderSide(aErrorCode, kBorderEndIDs,
+                                      NS_BOXPROP_SOURCE_LOGICAL);
   case eCSSProperty_border_left:
-    return ParseBorderSide(aErrorCode, kBorderLeftIDs, PR_FALSE);
+    return ParseDirectionalBorderSide(aErrorCode, kBorderLeftIDs,
+                                      NS_BOXPROP_SOURCE_PHYSICAL);
   case eCSSProperty_border_right:
-    return ParseBorderSide(aErrorCode, kBorderRightIDs, PR_FALSE);
+    return ParseDirectionalBorderSide(aErrorCode, kBorderRightIDs,
+                                      NS_BOXPROP_SOURCE_PHYSICAL);
+  case eCSSProperty_border_start:
+    return ParseDirectionalBorderSide(aErrorCode, kBorderStartIDs,
+                                      NS_BOXPROP_SOURCE_LOGICAL);
   case eCSSProperty_border_top:
     return ParseBorderSide(aErrorCode, kBorderTopIDs, PR_FALSE);
   case eCSSProperty_border_bottom_colors:
@@ -4283,6 +4316,54 @@ PRBool CSSParserImpl::ParseProperty(nsre
                              aPropID);
   case eCSSProperty_border_width:
     return ParseBorderWidth(aErrorCode);
+  case eCSSProperty_border_end_color:
+    return ParseDirectionalBoxProperty(aErrorCode, 
+                                       eCSSProperty_border_end_color,
+                                       NS_BOXPROP_SOURCE_LOGICAL);
+  case eCSSProperty_border_left_color:
+    return ParseDirectionalBoxProperty(aErrorCode, 
+                                       eCSSProperty_border_left_color,
+                                       NS_BOXPROP_SOURCE_PHYSICAL);
+  case eCSSProperty_border_right_color:
+    return ParseDirectionalBoxProperty(aErrorCode, 
+                                       eCSSProperty_border_right_color,
+                                       NS_BOXPROP_SOURCE_PHYSICAL);
+  case eCSSProperty_border_start_color:
+    return ParseDirectionalBoxProperty(aErrorCode, 
+                                       eCSSProperty_border_start_color,
+                                       NS_BOXPROP_SOURCE_LOGICAL);
+  case eCSSProperty_border_end_width:
+    return ParseDirectionalBoxProperty(aErrorCode, 
+                                       eCSSProperty_border_end_width,
+                                       NS_BOXPROP_SOURCE_LOGICAL);
+  case eCSSProperty_border_left_width:
+    return ParseDirectionalBoxProperty(aErrorCode, 
+                                       eCSSProperty_border_left_width,
+                                       NS_BOXPROP_SOURCE_LOGICAL);
+  case eCSSProperty_border_right_width:
+    return ParseDirectionalBoxProperty(aErrorCode, 
+                                       eCSSProperty_border_right_width,
+                                       NS_BOXPROP_SOURCE_PHYSICAL);
+  case eCSSProperty_border_start_width:
+    return ParseDirectionalBoxProperty(aErrorCode, 
+                                       eCSSProperty_border_start_width,
+                                       NS_BOXPROP_SOURCE_LOGICAL);
+  case eCSSProperty_border_end_style:
+    return ParseDirectionalBoxProperty(aErrorCode, 
+                                       eCSSProperty_border_end_style,
+                                       NS_BOXPROP_SOURCE_LOGICAL);
+  case eCSSProperty_border_left_style:
+    return ParseDirectionalBoxProperty(aErrorCode, 
+                                       eCSSProperty_border_left_style,
+                                       NS_BOXPROP_SOURCE_PHYSICAL);
+  case eCSSProperty_border_right_style:
+    return ParseDirectionalBoxProperty(aErrorCode, 
+                                       eCSSProperty_border_right_style,
+                                       NS_BOXPROP_SOURCE_PHYSICAL);
+  case eCSSProperty_border_start_style:
+    return ParseDirectionalBoxProperty(aErrorCode, 
+                                       eCSSProperty_border_start_style,
+                                       NS_BOXPROP_SOURCE_LOGICAL);
   case eCSSProperty__moz_border_radius:
     return ParseBorderRadius(aErrorCode);
   case eCSSProperty__moz_outline_radius:
@@ -4379,6 +4460,30 @@ PRBool CSSParserImpl::ParseProperty(nsre
   case eCSSProperty_padding_left_rtl_source:
   case eCSSProperty_padding_right_ltr_source:
   case eCSSProperty_padding_right_rtl_source:
+  case eCSSProperty_border_end_color_value:
+  case eCSSProperty_border_left_color_value:
+  case eCSSProperty_border_right_color_value:
+  case eCSSProperty_border_start_color_value:
+  case eCSSProperty_border_left_color_ltr_source:
+  case eCSSProperty_border_left_color_rtl_source:
+  case eCSSProperty_border_right_color_ltr_source:
+  case eCSSProperty_border_right_color_rtl_source:
+  case eCSSProperty_border_end_style_value:
+  case eCSSProperty_border_left_style_value:
+  case eCSSProperty_border_right_style_value:
+  case eCSSProperty_border_start_style_value:
+  case eCSSProperty_border_left_style_ltr_source:
+  case eCSSProperty_border_left_style_rtl_source:
+  case eCSSProperty_border_right_style_ltr_source:
+  case eCSSProperty_border_right_style_rtl_source:
+  case eCSSProperty_border_end_width_value:
+  case eCSSProperty_border_left_width_value:
+  case eCSSProperty_border_right_width_value:
+  case eCSSProperty_border_start_width_value:
+  case eCSSProperty_border_left_width_ltr_source:
+  case eCSSProperty_border_left_width_rtl_source:
+  case eCSSProperty_border_right_width_ltr_source:
+  case eCSSProperty_border_right_width_rtl_source:
     // The user can't use these
     REPORT_UNEXPECTED(PEInaccessibleProperty2);
     return PR_FALSE;
@@ -4422,12 +4527,26 @@ PRBool CSSParserImpl::ParseSingleValuePr
   case eCSSProperty_border_bottom_colors:
   case eCSSProperty_border_left_colors:
   case eCSSProperty_border_right_colors:
+  case eCSSProperty_border_end_color:
+  case eCSSProperty_border_left_color:
+  case eCSSProperty_border_right_color:
+  case eCSSProperty_border_start_color:
+  case eCSSProperty_border_end_style:
+  case eCSSProperty_border_left_style:
+  case eCSSProperty_border_right_style:
+  case eCSSProperty_border_start_style:
+  case eCSSProperty_border_end_width:
+  case eCSSProperty_border_left_width:
+  case eCSSProperty_border_right_width:
+  case eCSSProperty_border_start_width:
   case eCSSProperty_border_top_colors:
   case eCSSProperty_border_spacing:
   case eCSSProperty_border_style:
   case eCSSProperty_border_bottom:
+  case eCSSProperty_border_end:
   case eCSSProperty_border_left:
   case eCSSProperty_border_right:
+  case eCSSProperty_border_start:
   case eCSSProperty_border_top:
   case eCSSProperty_border_width:
   case eCSSProperty__moz_border_radius:
@@ -4476,6 +4595,18 @@ PRBool CSSParserImpl::ParseSingleValuePr
   case eCSSProperty_padding_left_rtl_source:
   case eCSSProperty_padding_right_ltr_source:
   case eCSSProperty_padding_right_rtl_source:
+  case eCSSProperty_border_left_color_ltr_source:
+  case eCSSProperty_border_left_color_rtl_source:
+  case eCSSProperty_border_right_color_ltr_source:
+  case eCSSProperty_border_right_color_rtl_source:
+  case eCSSProperty_border_left_style_ltr_source:
+  case eCSSProperty_border_left_style_rtl_source:
+  case eCSSProperty_border_right_style_ltr_source:
+  case eCSSProperty_border_right_style_rtl_source:
+  case eCSSProperty_border_left_width_ltr_source:
+  case eCSSProperty_border_left_width_rtl_source:
+  case eCSSProperty_border_right_width_ltr_source:
+  case eCSSProperty_border_right_width_rtl_source:
     NS_ERROR("not currently parsed here");
     return PR_FALSE;
 
@@ -4510,20 +4641,26 @@ PRBool CSSParserImpl::ParseSingleValuePr
     return ParseVariant(aErrorCode, aValue, VARIANT_HK,
                         nsCSSProps::kBorderCollapseKTable);
   case eCSSProperty_border_bottom_color:
-  case eCSSProperty_border_left_color:
-  case eCSSProperty_border_right_color:
+  case eCSSProperty_border_end_color_value: // for internal use
+  case eCSSProperty_border_left_color_value: // for internal use
+  case eCSSProperty_border_right_color_value: // for internal use
+  case eCSSProperty_border_start_color_value: // for internal use
   case eCSSProperty_border_top_color:
     return ParseVariant(aErrorCode, aValue, VARIANT_HCK, 
                         nsCSSProps::kBorderColorKTable);
   case eCSSProperty_border_bottom_style:
-  case eCSSProperty_border_left_style:
-  case eCSSProperty_border_right_style:
+  case eCSSProperty_border_end_style_value: // for internal use
+  case eCSSProperty_border_left_style_value: // for internal use
+  case eCSSProperty_border_right_style_value: // for internal use
+  case eCSSProperty_border_start_style_value: // for internal use
   case eCSSProperty_border_top_style:
     return ParseVariant(aErrorCode, aValue, VARIANT_HOK,
                         nsCSSProps::kBorderStyleKTable);
   case eCSSProperty_border_bottom_width:
-  case eCSSProperty_border_left_width:
-  case eCSSProperty_border_right_width:
+  case eCSSProperty_border_end_width_value: // for internal use
+  case eCSSProperty_border_left_width_value: // for internal use
+  case eCSSProperty_border_right_width_value: // for internal use
+  case eCSSProperty_border_start_width_value: // for internal use
   case eCSSProperty_border_top_width:
     return ParsePositiveVariant(aErrorCode, aValue, VARIANT_HKL,
                                 nsCSSProps::kBorderWidthKTable);
@@ -5150,21 +5287,21 @@ PRBool CSSParserImpl::ParseBackgroundPos
 // These must be in CSS order (top,right,bottom,left) for indexing to work
 static const nsCSSProperty kBorderStyleIDs[] = {
   eCSSProperty_border_top_style,
-  eCSSProperty_border_right_style,
+  eCSSProperty_border_right_style_value,
   eCSSProperty_border_bottom_style,
-  eCSSProperty_border_left_style
+  eCSSProperty_border_left_style_value
 };
 static const nsCSSProperty kBorderWidthIDs[] = {
   eCSSProperty_border_top_width,
-  eCSSProperty_border_right_width,
+  eCSSProperty_border_right_width_value,
   eCSSProperty_border_bottom_width,
-  eCSSProperty_border_left_width
+  eCSSProperty_border_left_width_value
 };
 static const nsCSSProperty kBorderColorIDs[] = {
   eCSSProperty_border_top_color,
-  eCSSProperty_border_right_color,
+  eCSSProperty_border_right_color_value,
   eCSSProperty_border_bottom_color,
-  eCSSProperty_border_left_color
+  eCSSProperty_border_left_color_value
 };
 static const nsCSSProperty kBorderRadiusIDs[] = {
   eCSSProperty__moz_border_radius_topLeft,
@@ -5181,6 +5318,15 @@ static const nsCSSProperty kOutlineRadiu
 
 PRBool CSSParserImpl::ParseBorderColor(nsresult& aErrorCode)
 {
+  // do this now, in case 4 values weren't specified
+  mTempData.SetPropertyBit(eCSSProperty_border_left_color_ltr_source);
+  mTempData.SetPropertyBit(eCSSProperty_border_left_color_rtl_source);
+  mTempData.SetPropertyBit(eCSSProperty_border_right_color_ltr_source);
+  mTempData.SetPropertyBit(eCSSProperty_border_right_color_rtl_source);
+  mTempData.mMargin.mBorderLeftColorLTRSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+  mTempData.mMargin.mBorderLeftColorRTLSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+  mTempData.mMargin.mBorderRightColorLTRSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+  mTempData.mMargin.mBorderRightColorRTLSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
   return ParseBoxProperties(aErrorCode, mTempData.mMargin.mBorderColor,
                             kBorderColorIDs);
 }
@@ -5238,6 +5384,31 @@ PRBool CSSParserImpl::ParseBorderSide(ns
   }
 
   if (aSetAllSides) {
+    mTempData.SetPropertyBit(eCSSProperty_border_left_color_ltr_source);
+    mTempData.SetPropertyBit(eCSSProperty_border_left_color_rtl_source);
+    mTempData.SetPropertyBit(eCSSProperty_border_right_color_ltr_source);
+    mTempData.SetPropertyBit(eCSSProperty_border_right_color_rtl_source);
+    mTempData.mMargin.mBorderLeftColorLTRSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+    mTempData.mMargin.mBorderLeftColorRTLSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+    mTempData.mMargin.mBorderRightColorLTRSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+    mTempData.mMargin.mBorderRightColorRTLSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+    mTempData.SetPropertyBit(eCSSProperty_border_left_style_ltr_source);
+    mTempData.SetPropertyBit(eCSSProperty_border_left_style_rtl_source);
+    mTempData.SetPropertyBit(eCSSProperty_border_right_style_ltr_source);
+    mTempData.SetPropertyBit(eCSSProperty_border_right_style_rtl_source);
+    mTempData.mMargin.mBorderLeftStyleLTRSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+    mTempData.mMargin.mBorderLeftStyleRTLSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+    mTempData.mMargin.mBorderRightStyleLTRSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+    mTempData.mMargin.mBorderRightStyleRTLSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+    mTempData.SetPropertyBit(eCSSProperty_border_left_width_ltr_source);
+    mTempData.SetPropertyBit(eCSSProperty_border_left_width_rtl_source);
+    mTempData.SetPropertyBit(eCSSProperty_border_right_width_ltr_source);
+    mTempData.SetPropertyBit(eCSSProperty_border_right_width_rtl_source);
+    mTempData.mMargin.mBorderLeftWidthLTRSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+    mTempData.mMargin.mBorderLeftWidthRTLSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+    mTempData.mMargin.mBorderRightWidthLTRSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+    mTempData.mMargin.mBorderRightWidthRTLSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+
     // Parsing "border" shorthand; set all four sides to the same thing
     for (PRInt32 index = 0; index < 4; index++) {
       NS_ASSERTION(numProps == 3, "This code needs updating");
@@ -5255,14 +5426,66 @@ PRBool CSSParserImpl::ParseBorderSide(ns
   return PR_TRUE;
 }
 
+PRBool CSSParserImpl::ParseDirectionalBorderSide(nsresult& aErrorCode,
+                         const nsCSSProperty aPropIDs[],
+                         PRInt32 aSourceType)
+{
+  const PRInt32 numProps = 3;
+  nsCSSValue  values[numProps];
+
+  PRInt32 found = ParseChoice(aErrorCode, values, aPropIDs, numProps);
+  if ((found < 1) || (PR_FALSE == ExpectEndProperty(aErrorCode, PR_TRUE))) {
+    return PR_FALSE;
+  }
+
+  if ((found & 1) == 0) { // Provide default border-width
+    values[0].SetIntValue(NS_STYLE_BORDER_WIDTH_MEDIUM, eCSSUnit_Enumerated);
+  }
+  if ((found & 2) == 0) { // Provide default border-style
+    values[1].SetNoneValue();
+  }
+  if ((found & 4) == 0) { // text color will be used
+    values[2].SetIntValue(NS_STYLE_COLOR_MOZ_USE_TEXT_COLOR, eCSSUnit_Enumerated);
+  }
+  for (PRInt32 index = 0; index < numProps; index++) {
+    const nsCSSProperty* subprops =
+      nsCSSProps::SubpropertyEntryFor(aPropIDs[index + numProps]);
+    NS_ASSERTION(subprops[3] == eCSSProperty_UNKNOWN,
+                 "not box property with physical vs. logical cascading");
+    AppendValue(subprops[0], values[index]);
+    nsCSSValue typeVal(aSourceType, eCSSUnit_Enumerated);
+    AppendValue(subprops[1], typeVal);
+    AppendValue(subprops[2], typeVal);
+  }
+  return PR_TRUE;
+}
+
 PRBool CSSParserImpl::ParseBorderStyle(nsresult& aErrorCode)
 {
+  // do this now, in case 4 values weren't specified
+  mTempData.SetPropertyBit(eCSSProperty_border_left_style_ltr_source);
+  mTempData.SetPropertyBit(eCSSProperty_border_left_style_rtl_source);
+  mTempData.SetPropertyBit(eCSSProperty_border_right_style_ltr_source);
+  mTempData.SetPropertyBit(eCSSProperty_border_right_style_rtl_source);
+  mTempData.mMargin.mBorderLeftStyleLTRSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+  mTempData.mMargin.mBorderLeftStyleRTLSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+  mTempData.mMargin.mBorderRightStyleLTRSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+  mTempData.mMargin.mBorderRightStyleRTLSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
   return ParseBoxProperties(aErrorCode, mTempData.mMargin.mBorderStyle,
                             kBorderStyleIDs);
 }
 
 PRBool CSSParserImpl::ParseBorderWidth(nsresult& aErrorCode)
 {
+  // do this now, in case 4 values weren't specified
+  mTempData.SetPropertyBit(eCSSProperty_border_left_width_ltr_source);
+  mTempData.SetPropertyBit(eCSSProperty_border_left_width_rtl_source);
+  mTempData.SetPropertyBit(eCSSProperty_border_right_width_ltr_source);
+  mTempData.SetPropertyBit(eCSSProperty_border_right_width_rtl_source);
+  mTempData.mMargin.mBorderLeftWidthLTRSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+  mTempData.mMargin.mBorderLeftWidthRTLSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+  mTempData.mMargin.mBorderRightWidthLTRSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
+  mTempData.mMargin.mBorderRightWidthRTLSource.SetIntValue(NS_BOXPROP_SOURCE_PHYSICAL, eCSSUnit_Enumerated);
   return ParseBoxProperties(aErrorCode, mTempData.mMargin.mBorderWidth,
                             kBorderWidthIDs);
 }
diff --git a/layout/style/nsCSSPropList.h b/layout/style/nsCSSPropList.h
--- a/layout/style/nsCSSPropList.h
+++ b/layout/style/nsCSSPropList.h
@@ -291,17 +291,73 @@ CSS_PROP_BORDER(border-bottom-width, bor
 CSS_PROP_BORDER(border-bottom-width, border_bottom_width, BorderBottomWidth, Margin, mBorderWidth.mBottom, eCSSType_Value, kBorderWidthKTable)
 CSS_PROP_TABLEBORDER(border-collapse, border_collapse, BorderCollapse, Table, mBorderCollapse, eCSSType_Value, kBorderCollapseKTable)
 CSS_PROP_SHORTHAND(border-color, border_color, BorderColor)
+CSS_PROP_SHORTHAND(-moz-border-end, border_end, MozBorderEnd)
+CSS_PROP_SHORTHAND(-moz-border-end-color, border_end_color, MozBorderEndColor)
+#ifndef CSS_PROP_LIST_EXCLUDE_INTERNAL
+CSS_PROP_BORDER(border-end-color-value, border_end_color_value, X, Margin, mBorderEndColor, eCSSType_Value, kBorderColorKTable)
+#endif
+CSS_PROP_SHORTHAND(-moz-border-end-style, border_end_style, MozBorderEndStyle)
+#ifndef CSS_PROP_LIST_EXCLUDE_INTERNAL
+CSS_PROP_BORDER(border-end-style-value, border_end_style_value, X, Margin, mBorderEndStyle, eCSSType_Value, kBorderStyleKTable)
+#endif
+CSS_PROP_SHORTHAND(-moz-border-end-width, border_end_width, MozBorderEndWidth)
+#ifndef CSS_PROP_LIST_EXCLUDE_INTERNAL
+CSS_PROP_BORDER(border-end-width-value, border_end_width_value, X, Margin, mBorderEndWidth, eCSSType_Value, kBorderWidthKTable)
+#endif
 CSS_PROP_SHORTHAND(border-left, border_left, BorderLeft)
-CSS_PROP_BORDER(border-left-color, border_left_color, BorderLeftColor, Margin, mBorderColor.mLeft, eCSSType_Value, kBorderColorKTable)
+CSS_PROP_SHORTHAND(border-left-color, border_left_color, BorderLeftColor)
+#ifndef CSS_PROP_LIST_EXCLUDE_INTERNAL
+CSS_PROP_BORDER(border-left-color-value, border_left_color_value, X, Margin, mBorderColor.mLeft, eCSSType_Value, kBorderColorKTable)
+CSS_PROP_BORDER(border-left-color-ltr-source, border_left_color_ltr_source, X, Margin, mBorderLeftColorLTRSource, eCSSType_Value, kBoxPropSourceKTable)
+CSS_PROP_BORDER(border-left-color-rtl-source, border_left_color_rtl_source, X, Margin, mBorderLeftColorRTLSource, eCSSType_Value, kBoxPropSourceKTable)
+#endif
 CSS_PROP_BORDER(-moz-border-left-colors, border_left_colors, MozBorderLeftColors, Margin, mBorderColors.mLeft, eCSSType_ValueList, nsnull)
-CSS_PROP_BORDER(border-left-style, border_left_style, BorderLeftStyle, Margin, mBorderStyle.mLeft, eCSSType_Value, kBorderStyleKTable)  // on/off will need reflow
-CSS_PROP_BORDER(border-left-width, border_left_width, BorderLeftWidth, Margin, mBorderWidth.mLeft, eCSSType_Value, kBorderWidthKTable)
+CSS_PROP_SHORTHAND(border-left-style, border_left_style, BorderLeftStyle) // on/off will need reflow
+#ifndef CSS_PROP_LIST_EXCLUDE_INTERNAL
+CSS_PROP_BORDER(border-left-style-value, border_left_style_value, X, Margin, mBorderStyle.mLeft, eCSSType_Value, kBorderStyleKTable)
+CSS_PROP_BORDER(border-left-style-ltr-source, border_left_style_ltr_source, X, Margin, mBorderLeftStyleLTRSource, eCSSType_Value, kBoxPropSourceKTable)
+CSS_PROP_BORDER(border-left-style-rtl-source, border_left_style_rtl_source, X, Margin, mBorderLeftStyleRTLSource, eCSSType_Value, kBoxPropSourceKTable)
+#endif
+CSS_PROP_SHORTHAND(border-left-width, border_left_width, BorderLeftWidth)
+#ifndef CSS_PROP_LIST_EXCLUDE_INTERNAL
+CSS_PROP_BORDER(border-left-width-value, border_left_width_value, X, Margin, mBorderWidth.mLeft, eCSSType_Value, kBorderWidthKTable)
+CSS_PROP_BORDER(border-left-width-ltr-source, border_left_width_ltr_source, X, Margin, mBorderLeftWidthLTRSource, eCSSType_Value, kBoxPropSourceKTable)
+CSS_PROP_BORDER(border-left-width-rtl-source, border_left_width_rtl_source, X, Margin, mBorderLeftWidthRTLSource, eCSSType_Value, kBoxPropSourceKTable)
+#endif
 CSS_PROP_SHORTHAND(border-right, border_right, BorderRight)
-CSS_PROP_BORDER(border-right-color, border_right_color, BorderRightColor, Margin, mBorderColor.mRight, eCSSType_Value, kBorderColorKTable)
+CSS_PROP_SHORTHAND(border-right-color, border_right_color, BorderRightColor)
+#ifndef CSS_PROP_LIST_EXCLUDE_INTERNAL
+CSS_PROP_BORDER(border-right-color-value, border_right_color_value, X, Margin, mBorderColor.mRight, eCSSType_Value, kBorderColorKTable)
+CSS_PROP_BORDER(border-right-color-ltr-source, border_right_color_ltr_source, X, Margin, mBorderRightColorLTRSource, eCSSType_Value, kBoxPropSourceKTable)
+CSS_PROP_BORDER(border-right-color-rtl-source, border_right_color_rtl_source, X, Margin, mBorderRightColorRTLSource, eCSSType_Value, kBoxPropSourceKTable)
+#endif
 CSS_PROP_BORDER(-moz-border-right-colors, border_right_colors, MozBorderRightColors, Margin, mBorderColors.mRight, eCSSType_ValueList, nsnull)
-CSS_PROP_BORDER(border-right-style, border_right_style, BorderRightStyle, Margin, mBorderStyle.mRight, eCSSType_Value, kBorderStyleKTable)  // on/off will need reflow
-CSS_PROP_BORDER(border-right-width, border_right_width, BorderRightWidth, Margin, mBorderWidth.mRight, eCSSType_Value, kBorderWidthKTable)
+CSS_PROP_SHORTHAND(border-right-style, border_right_style, BorderRightStyle) // on/off will need reflow
+#ifndef CSS_PROP_LIST_EXCLUDE_INTERNAL
+CSS_PROP_BORDER(border-right-style-value, border_right_style_value, X, Margin, mBorderStyle.mRight, eCSSType_Value, kBorderStyleKTable)
+CSS_PROP_BORDER(border-right-style-ltr-source, border_right_style_ltr_source, X, Margin, mBorderRightStyleLTRSource, eCSSType_Value, kBoxPropSourceKTable)
+CSS_PROP_BORDER(border-right-style-rtl-source, border_right_style_rtl_source, X, Margin, mBorderRightStyleRTLSource, eCSSType_Value, kBoxPropSourceKTable)
+#endif
+CSS_PROP_SHORTHAND(border-right-width, border_right_width, BorderRightWidth)
+#ifndef CSS_PROP_LIST_EXCLUDE_INTERNAL
+CSS_PROP_BORDER(border-right-width-value, border_right_width_value, X, Margin, mBorderWidth.mRight, eCSSType_Value, kBorderWidthKTable)
+CSS_PROP_BORDER(border-right-width-ltr-source, border_right_width_ltr_source, X, Margin, mBorderRightWidthLTRSource, eCSSType_Value, kBoxPropSourceKTable)
+CSS_PROP_BORDER(border-right-width-rtl-source, border_right_width_rtl_source, X, Margin, mBorderRightWidthRTLSource, eCSSType_Value, kBoxPropSourceKTable)
+#endif
 CSS_PROP_TABLEBORDER(border-spacing, border_spacing, BorderSpacing, Table, mBorderSpacing, eCSSType_ValuePair, nsnull) // XXX bug 3935
+CSS_PROP_SHORTHAND(-moz-border-start, border_start, MozBorderStart)
+CSS_PROP_SHORTHAND(-moz-border-start-color, border_start_color, MozBorderStartColor)
+#ifndef CSS_PROP_LIST_EXCLUDE_INTERNAL
+CSS_PROP_BORDER(border-start-color-value, border_start_color_value, X, Margin, mBorderStartColor, eCSSType_Value, kBorderColorKTable)
+#endif
+CSS_PROP_SHORTHAND(-moz-border-start-style, border_start_style, MozBorderStartStyle)
+#ifndef CSS_PROP_LIST_EXCLUDE_INTERNAL
+CSS_PROP_BORDER(border-start-style-value, border_start_style_value, X, Margin, mBorderStartStyle, eCSSType_Value, kBorderStyleKTable)
+#endif
+CSS_PROP_SHORTHAND(-moz-border-start-width, border_start_width, MozBorderStartWidth)
+#ifndef CSS_PROP_LIST_EXCLUDE_INTERNAL
+CSS_PROP_BORDER(border-start-width-value, border_start_width_value, X, Margin, mBorderStartWidth, eCSSType_Value, kBorderWidthKTable)
+#endif
 CSS_PROP_SHORTHAND(border-style, border_style, BorderStyle)  // on/off will need reflow
 CSS_PROP_SHORTHAND(border-top, border_top, BorderTop)
 CSS_PROP_BORDER(border-top-color, border_top_color, BorderTopColor, Margin, mBorderColor.mTop, eCSSType_Value, kBorderColorKTable)
diff --git a/layout/style/nsCSSProps.cpp b/layout/style/nsCSSProps.cpp
--- a/layout/style/nsCSSProps.cpp
+++ b/layout/style/nsCSSProps.cpp
@@ -1245,17 +1245,29 @@ static const nsCSSProperty gBackgroundSu
 
 static const nsCSSProperty gBorderSubpropTable[] = {
   eCSSProperty_border_top_width,
-  eCSSProperty_border_right_width,
+  eCSSProperty_border_right_width_value,
+  eCSSProperty_border_right_width_ltr_source,
+  eCSSProperty_border_right_width_rtl_source,
   eCSSProperty_border_bottom_width,
-  eCSSProperty_border_left_width,
+  eCSSProperty_border_left_width_value,
+  eCSSProperty_border_left_width_ltr_source,
+  eCSSProperty_border_left_width_rtl_source,
   eCSSProperty_border_top_style,
-  eCSSProperty_border_right_style,
+  eCSSProperty_border_right_style_value,
+  eCSSProperty_border_right_style_ltr_source,
+  eCSSProperty_border_right_style_rtl_source,
   eCSSProperty_border_bottom_style,
-  eCSSProperty_border_left_style,
+  eCSSProperty_border_left_style_value,
+  eCSSProperty_border_left_style_ltr_source,
+  eCSSProperty_border_left_style_rtl_source,
   eCSSProperty_border_top_color,
-  eCSSProperty_border_right_color,
+  eCSSProperty_border_right_color_value,
+  eCSSProperty_border_right_color_ltr_source,
+  eCSSProperty_border_right_color_rtl_source,
   eCSSProperty_border_bottom_color,
-  eCSSProperty_border_left_color,
+  eCSSProperty_border_left_color_value,
+  eCSSProperty_border_left_color_ltr_source,
+  eCSSProperty_border_left_color_rtl_source,
   eCSSProperty_UNKNOWN
 };
 
@@ -1270,34 +1282,152 @@ static const nsCSSProperty gBorderColorS
 static const nsCSSProperty gBorderColorSubpropTable[] = {
   // Code relies on these being in top-right-bottom-left order.
   eCSSProperty_border_top_color,
-  eCSSProperty_border_right_color,
+  eCSSProperty_border_right_color_value,
   eCSSProperty_border_bottom_color,
-  eCSSProperty_border_left_color,
+  eCSSProperty_border_left_color_value,
+  // extras:
+  eCSSProperty_border_left_color_ltr_source,
+  eCSSProperty_border_left_color_rtl_source,
+  eCSSProperty_border_right_color_ltr_source,
+  eCSSProperty_border_right_color_rtl_source,
+  eCSSProperty_UNKNOWN
+};
+
+static const nsCSSProperty gMozBorderEndColorSubpropTable[] = {
+  // nsCSSParser::ParseDirectionalBoxProperty depends on this order
+  eCSSProperty_border_end_color_value,
+  eCSSProperty_border_right_color_ltr_source,
+  eCSSProperty_border_left_color_rtl_source,
+  eCSSProperty_UNKNOWN
+};
+
+static const nsCSSProperty gBorderLeftColorSubpropTable[] = {
+  // nsCSSParser::ParseDirectionalBoxProperty depends on this order
+  eCSSProperty_border_left_color_value,
+  eCSSProperty_border_left_color_ltr_source,
+  eCSSProperty_border_left_color_rtl_source,
+  eCSSProperty_UNKNOWN
+};
+
+static const nsCSSProperty gBorderRightColorSubpropTable[] = {
+  // nsCSSParser::ParseDirectionalBoxProperty depends on this order
+  eCSSProperty_border_right_color_value,
+  eCSSProperty_border_right_color_ltr_source,
+  eCSSProperty_border_right_color_rtl_source,
+  eCSSProperty_UNKNOWN
+};
+
+static const nsCSSProperty gMozBorderStartColorSubpropTable[] = {
+  // nsCSSParser::ParseDirectionalBoxProperty depends on this order
+  eCSSProperty_border_start_color_value,
+  eCSSProperty_border_left_color_ltr_source,
+  eCSSProperty_border_right_color_rtl_source,
+  eCSSProperty_UNKNOWN
+};
+
+static const nsCSSProperty gMozBorderEndSubpropTable[] = {
+  // nsCSSDeclaration.cpp output the subproperties in this order.
+  eCSSProperty_border_end_width_value,
+  eCSSProperty_border_end_style_value,
+  eCSSProperty_border_end_color_value,
+  // extras:
+  eCSSProperty_border_right_width_ltr_source,
+  eCSSProperty_border_left_width_rtl_source,
+  eCSSProperty_border_right_style_ltr_source,
+  eCSSProperty_border_left_style_rtl_source,
+  eCSSProperty_border_right_color_ltr_source,
+  eCSSProperty_border_left_color_rtl_source,
   eCSSProperty_UNKNOWN
 };
 
 static const nsCSSProperty gBorderLeftSubpropTable[] = {
   // nsCSSDeclaration.cpp outputs the subproperties in this order.
-  eCSSProperty_border_left_width,
-  eCSSProperty_border_left_style,
-  eCSSProperty_border_left_color,
+  eCSSProperty_border_left_width_value,
+  eCSSProperty_border_left_style_value,
+  eCSSProperty_border_left_color_value,
+  // extras:
+  eCSSProperty_border_left_width_ltr_source,
+  eCSSProperty_border_left_width_rtl_source,
+  eCSSProperty_border_left_style_ltr_source,
+  eCSSProperty_border_left_style_rtl_source,
+  eCSSProperty_border_left_color_ltr_source,
+  eCSSProperty_border_left_color_rtl_source,
   eCSSProperty_UNKNOWN
 };
 
 static const nsCSSProperty gBorderRightSubpropTable[] = {
   // nsCSSDeclaration.cpp outputs the subproperties in this order.
-  eCSSProperty_border_right_width,
-  eCSSProperty_border_right_style,
-  eCSSProperty_border_right_color,
+  eCSSProperty_border_right_width_value,
+  eCSSProperty_border_right_style_value,
+  eCSSProperty_border_right_color_value,
+  // extras:
+  eCSSProperty_border_right_width_ltr_source,
+  eCSSProperty_border_right_width_rtl_source,
+  eCSSProperty_border_right_style_ltr_source,
+  eCSSProperty_border_right_style_rtl_source,
+  eCSSProperty_border_right_color_ltr_source,
+  eCSSProperty_border_right_color_rtl_source,
+  eCSSProperty_UNKNOWN
+};
+
+static const nsCSSProperty gMozBorderStartSubpropTable[] = {
+  // nsCSSDeclaration.cpp outputs the subproperties in this order.
+  eCSSProperty_border_start_width_value,
+  eCSSProperty_border_start_style_value,
+  eCSSProperty_border_start_color_value,
+  // extras:
+  eCSSProperty_border_left_width_ltr_source,
+  eCSSProperty_border_right_width_rtl_source,
+  eCSSProperty_border_left_style_ltr_source,
+  eCSSProperty_border_right_style_rtl_source,
+  eCSSProperty_border_left_color_ltr_source,
+  eCSSProperty_border_right_color_rtl_source,
   eCSSProperty_UNKNOWN
 };
 
 static const nsCSSProperty gBorderStyleSubpropTable[] = {
   // Code relies on these being in top-right-bottom-left order.
   eCSSProperty_border_top_style,
-  eCSSProperty_border_right_style,
+  eCSSProperty_border_right_style_value,
   eCSSProperty_border_bottom_style,
-  eCSSProperty_border_left_style,
+  eCSSProperty_border_left_style_value,
+  // extras:
+  eCSSProperty_border_left_style_ltr_source,
+  eCSSProperty_border_left_style_rtl_source,
+  eCSSProperty_border_right_style_ltr_source,
+  eCSSProperty_border_right_style_rtl_source,
+  eCSSProperty_UNKNOWN
+};
+
+static const nsCSSProperty gBorderLeftStyleSubpropTable[] = {
+  // nsCSSParser::ParseDirectionalBoxProperty depends on this order
+  eCSSProperty_border_left_style_value,
+  eCSSProperty_border_left_style_ltr_source,
+  eCSSProperty_border_left_style_rtl_source,
+  eCSSProperty_UNKNOWN
+};
+
+static const nsCSSProperty gBorderRightStyleSubpropTable[] = {
+  // nsCSSParser::ParseDirectionalBoxProperty depends on this order
+  eCSSProperty_border_right_style_value,
+  eCSSProperty_border_right_style_ltr_source,
+  eCSSProperty_border_right_style_rtl_source,
+  eCSSProperty_UNKNOWN
+};
+
+static const nsCSSProperty gMozBorderStartStyleSubpropTable[] = {
+  // nsCSSParser::ParseDirectionalBoxProperty depends on this order
+  eCSSProperty_border_start_style_value,
+  eCSSProperty_border_left_style_ltr_source,
+  eCSSProperty_border_right_style_rtl_source,
+  eCSSProperty_UNKNOWN
+};
+
+static const nsCSSProperty gMozBorderEndStyleSubpropTable[] = {
+  // nsCSSParser::ParseDirectionalBoxProperty depends on this order
+  eCSSProperty_border_end_style_value,
+  eCSSProperty_border_right_style_ltr_source,
+  eCSSProperty_border_left_style_rtl_source,
   eCSSProperty_UNKNOWN
 };
 
@@ -1312,9 +1442,46 @@ static const nsCSSProperty gBorderWidthS
 static const nsCSSProperty gBorderWidthSubpropTable[] = {
   // Code relies on these being in top-right-bottom-left order.
   eCSSProperty_border_top_width,
-  eCSSProperty_border_right_width,
+  eCSSProperty_border_right_width_value,
   eCSSProperty_border_bottom_width,
-  eCSSProperty_border_left_width,
+  eCSSProperty_border_left_width_value,
+  // extras:
+  eCSSProperty_border_left_width_ltr_source,
+  eCSSProperty_border_left_width_rtl_source,
+  eCSSProperty_border_right_width_ltr_source,
+  eCSSProperty_border_right_width_rtl_source,
+  eCSSProperty_UNKNOWN
+};
+
+static const nsCSSProperty gBorderLeftWidthSubpropTable[] = {
+  // nsCSSParser::ParseDirectionalBoxProperty depends on this order
+  eCSSProperty_border_left_width_value,
+  eCSSProperty_border_left_width_ltr_source,
+  eCSSProperty_border_left_width_rtl_source,
+  eCSSProperty_UNKNOWN
+};
+
+static const nsCSSProperty gBorderRightWidthSubpropTable[] = {
+  // nsCSSParser::ParseDirectionalBoxProperty depends on this order
+  eCSSProperty_border_right_width_value,
+  eCSSProperty_border_right_width_ltr_source,
+  eCSSProperty_border_right_width_rtl_source,
+  eCSSProperty_UNKNOWN
+};
+
+static const nsCSSProperty gMozBorderStartWidthSubpropTable[] = {
+  // nsCSSParser::ParseDirectionalBoxProperty depends on this order
+  eCSSProperty_border_start_width_value,
+  eCSSProperty_border_left_width_ltr_source,
+  eCSSProperty_border_right_width_rtl_source,
+  eCSSProperty_UNKNOWN
+};
+
+static const nsCSSProperty gMozBorderEndWidthSubpropTable[] = {
+  // nsCSSParser::ParseDirectionalBoxProperty depends on this order
+  eCSSProperty_border_end_width_value,
+  eCSSProperty_border_right_width_ltr_source,
+  eCSSProperty_border_left_width_rtl_source,
   eCSSProperty_UNKNOWN
 };
 
diff --git a/layout/style/nsCSSStruct.cpp b/layout/style/nsCSSStruct.cpp
--- a/layout/style/nsCSSStruct.cpp
+++ b/layout/style/nsCSSStruct.cpp
@@ -312,9 +312,21 @@ nsCSSMargin::nsCSSMargin(const nsCSSMarg
     mPaddingRightLTRSource(aCopy.mPaddingRightLTRSource),
     mPaddingRightRTLSource(aCopy.mPaddingRightRTLSource),
     mBorderWidth(aCopy.mBorderWidth),
+    mBorderLeftWidthLTRSource(aCopy.mBorderLeftWidthLTRSource),
+    mBorderLeftWidthRTLSource(aCopy.mBorderLeftWidthRTLSource),
+    mBorderRightWidthLTRSource(aCopy.mBorderRightWidthLTRSource),
+    mBorderRightWidthRTLSource(aCopy.mBorderRightWidthRTLSource),
     mBorderColor(aCopy.mBorderColor),
+    mBorderLeftColorLTRSource(aCopy.mBorderLeftColorLTRSource),
+    mBorderLeftColorRTLSource(aCopy.mBorderLeftColorRTLSource),
+    mBorderRightColorLTRSource(aCopy.mBorderRightColorLTRSource),
+    mBorderRightColorRTLSource(aCopy.mBorderRightColorRTLSource),
     mBorderColors(aCopy.mBorderColors),
     mBorderStyle(aCopy.mBorderStyle),
+    mBorderLeftStyleLTRSource(aCopy.mBorderLeftStyleLTRSource),
+    mBorderLeftStyleRTLSource(aCopy.mBorderLeftStyleRTLSource),
+    mBorderRightStyleLTRSource(aCopy.mBorderRightStyleLTRSource),
+    mBorderRightStyleRTLSource(aCopy.mBorderRightStyleRTLSource),
     mBorderRadius(aCopy.mBorderRadius),
     mOutlineWidth(aCopy.mOutlineWidth),
     mOutlineColor(aCopy.mOutlineColor),
diff --git a/layout/style/nsCSSStruct.h b/layout/style/nsCSSStruct.h
--- a/layout/style/nsCSSStruct.h
+++ b/layout/style/nsCSSStruct.h
@@ -304,9 +304,27 @@ struct nsCSSMargin : public nsCSSStruct 
   nsCSSValue  mPaddingRightLTRSource;
   nsCSSValue  mPaddingRightRTLSource;
   nsCSSRect   mBorderWidth;
+  nsCSSValue  mBorderStartWidth;
+  nsCSSValue  mBorderEndWidth;
+  nsCSSValue  mBorderLeftWidthLTRSource;
+  nsCSSValue  mBorderLeftWidthRTLSource;
+  nsCSSValue  mBorderRightWidthLTRSource;
+  nsCSSValue  mBorderRightWidthRTLSource;
   nsCSSRect   mBorderColor;
+  nsCSSValue  mBorderStartColor;
+  nsCSSValue  mBorderEndColor;
+  nsCSSValue  mBorderLeftColorLTRSource;
+  nsCSSValue  mBorderLeftColorRTLSource;
+  nsCSSValue  mBorderRightColorLTRSource;
+  nsCSSValue  mBorderRightColorRTLSource;
   nsCSSValueListRect mBorderColors;
   nsCSSRect   mBorderStyle;
+  nsCSSValue  mBorderStartStyle;
+  nsCSSValue  mBorderEndStyle;
+  nsCSSValue  mBorderLeftStyleLTRSource;
+  nsCSSValue  mBorderLeftStyleRTLSource;
+  nsCSSValue  mBorderRightStyleLTRSource;
+  nsCSSValue  mBorderRightStyleRTLSource;
   nsCSSRect   mBorderRadius;  // (extension)
   nsCSSValue  mOutlineWidth;
   nsCSSValue  mOutlineColor;
diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -1754,6 +1754,129 @@ nsRuleNode::AdjustLogicalBoxProp(nsStyle
           SetCoord(aRTLLogicalValue, coord, parentCoord, aMask, aContext,
                    mPresContext, aInherited))
         aRect.Set(aSide, coord);
+    }
+  }
+}
+
+void
+nsRuleNode::AdjustLogicalBorderWidth(nsStyleContext* aContext,
+                                     const nsCSSValue& aLTRSource,
+                                     const nsCSSValue& aRTLSource,
+                                     const nsCSSValue& aLTRLogicalValue,
+                                     const nsCSSValue& aRTLLogicalValue,
+                                     const nsStyleBorder* aParentBorder,
+                                     nsStyleBorder* aBorder,
+                                     PRUint8 aSide,
+                                     PRInt32 aMask,
+                                     PRBool& aInherited)
+{
+  PRBool LTRlogical = aLTRSource.GetUnit() == eCSSUnit_Enumerated &&
+                      aLTRSource.GetIntValue() == NS_BOXPROP_SOURCE_LOGICAL;
+  PRBool RTLlogical = aRTLSource.GetUnit() == eCSSUnit_Enumerated &&
+                      aRTLSource.GetIntValue() == NS_BOXPROP_SOURCE_LOGICAL;
+  if (LTRlogical || RTLlogical) {
+    // We can't cache anything on the rule tree if we use any data from
+    // the style context, since data cached in the rule tree could be
+    // used with a style context with a different value.
+    aInherited = PR_TRUE;
+    PRUint8 dir = aContext->GetStyleVisibility()->mDirection;
+
+    nsStyleCoord coord;
+    nsStyleCoord parentCoord; // What?
+
+    nsCSSValue value;
+    if (dir == NS_STYLE_DIRECTION_LTR && LTRlogical)
+      value = aLTRLogicalValue;
+    else if (dir == NS_STYLE_DIRECTION_RTL && RTLlogical)
+      value = aRTLLogicalValue;
+    else
+      return;
+
+    if (eCSSUnit_Enumerated == value.GetUnit())
+      aBorder->SetBorderWidth(aSide,
+                  (mPresContext->GetBorderWidthTable())[value.GetIntValue()]);
+    else if (SetCoord(value, coord, parentCoord, aMask,
+                      aContext, mPresContext, aInherited))
+      aBorder->SetBorderWidth(aSide, coord.GetCoordValue());
+  }
+}
+
+void
+nsRuleNode::AdjustLogicalBorderColor(nsStyleContext* aContext,
+                                     const nsCSSValue& aLTRSource,
+                                     const nsCSSValue& aRTLSource,
+                                     const nsCSSValue& aLTRLogicalValue,
+                                     const nsCSSValue& aRTLLogicalValue,
+                                     const nsStyleBorder* aParentBorder,
+                                     nsStyleBorder* aBorder,
+                                     PRUint8 aSide,
+                                     PRBool& aInherited)
+{
+  PRBool LTRlogical = aLTRSource.GetUnit() == eCSSUnit_Enumerated &&
+                      aLTRSource.GetIntValue() == NS_BOXPROP_SOURCE_LOGICAL;
+  PRBool RTLlogical = aRTLSource.GetUnit() == eCSSUnit_Enumerated &&
+                      aRTLSource.GetIntValue() == NS_BOXPROP_SOURCE_LOGICAL;
+  if (LTRlogical || RTLlogical) {
+    // We can't cache anything on the rule tree if we use any data from
+    // the style context, since data cached in the rule tree could be
+    // used with a style context with a different value.
+    aInherited = PR_TRUE;
+    PRUint8 dir = aContext->GetStyleVisibility()->mDirection;
+
+    nscolor color;
+    nscolor parentColor; // What?
+
+    nsCSSValue value;
+    if (dir == NS_STYLE_DIRECTION_LTR && LTRlogical)
+      value = aLTRLogicalValue;
+    else if (dir == NS_STYLE_DIRECTION_RTL && RTLlogical)
+      value = aRTLLogicalValue;
+    else
+      return;
+
+    if (SetColor(value, parentColor, mPresContext, 
+                 aContext, color, aInherited))
+      aBorder->SetBorderColor(aSide, color);
+    else if (eCSSUnit_Enumerated == value.GetUnit()) {
+      switch (value.GetIntValue()) {
+        case NS_STYLE_COLOR_TRANSPARENT:
+          aBorder->SetBorderTransparent(aSide);
+          break;
+        case NS_STYLE_COLOR_MOZ_USE_TEXT_COLOR:
+          aBorder->SetBorderToForeground(aSide);
+          break;
+      }
+    }
+  }
+}
+
+void
+nsRuleNode::AdjustLogicalBorderStyle(nsStyleContext* aContext,
+                                     const nsCSSValue& aLTRSource,
+                                     const nsCSSValue& aRTLSource,
+                                     const nsCSSValue& aLTRLogicalValue,
+                                     const nsCSSValue& aRTLLogicalValue,
+                                     const nsStyleBorder* aParentBorder,
+                                     nsStyleBorder* aBorder,
+                                     PRUint8 aSide,
+                                     PRBool& aInherited)
+{
+  PRBool LTRlogical = aLTRSource.GetUnit() == eCSSUnit_Enumerated &&
+                      aLTRSource.GetIntValue() == NS_BOXPROP_SOURCE_LOGICAL;
+  PRBool RTLlogical = aRTLSource.GetUnit() == eCSSUnit_Enumerated &&
+                      aRTLSource.GetIntValue() == NS_BOXPROP_SOURCE_LOGICAL;
+  if (LTRlogical || RTLlogical) {
+    // We can't cache anything on the rule tree if we use any data from
+    // the style context, since data cached in the rule tree could be
+    // used with a style context with a different value.
+    aInherited = PR_TRUE;
+    PRUint8 dir = aContext->GetStyleVisibility()->mDirection;
+
+    if (dir == NS_STYLE_DIRECTION_LTR && LTRlogical) {
+      aBorder->SetBorderStyle(aSide, aLTRLogicalValue.GetIntValue());
+    }
+    else if (dir == NS_STYLE_DIRECTION_RTL && RTLlogical) {
+      aBorder->SetBorderStyle(aSide, aRTLLogicalValue.GetIntValue());
     }
   }
 }
@@ -3342,6 +3465,20 @@ nsRuleNode::ComputeBorderData(nsStyleStr
       }
     }
   }
+  AdjustLogicalBorderWidth(aContext,
+                           marginData.mBorderLeftWidthLTRSource,
+                           marginData.mBorderLeftWidthRTLSource,
+                           marginData.mBorderStartWidth,
+                           marginData.mBorderEndWidth,
+                           parentBorder, border, 
+                           NS_SIDE_LEFT, SETCOORD_LENGTH, inherited);
+  AdjustLogicalBorderWidth(aContext,
+                           marginData.mBorderRightWidthLTRSource,
+                           marginData.mBorderRightWidthRTLSource,
+                           marginData.mBorderEndWidth,
+                           marginData.mBorderStartWidth,
+                           parentBorder, border,
+                           NS_SIDE_RIGHT, SETCOORD_LENGTH, inherited);
 
   // border-style, border-*-style: enum, none, inherit
   const nsCSSRect& ourStyle = marginData.mBorderStyle;
@@ -3361,6 +3498,18 @@ nsRuleNode::ComputeBorderData(nsStyleStr
       }
     }
   }
+  AdjustLogicalBorderStyle(aContext,
+                           marginData.mBorderLeftStyleLTRSource,
+                           marginData.mBorderLeftStyleRTLSource,
+                           marginData.mBorderStartStyle, marginData.mBorderEndStyle,
+                           parentBorder, border,
+                           NS_SIDE_LEFT, inherited);
+  AdjustLogicalBorderStyle(aContext,
+                           marginData.mBorderRightStyleLTRSource,
+                           marginData.mBorderRightStyleRTLSource,
+                           marginData.mBorderEndStyle, marginData.mBorderStartStyle,
+                           parentBorder, border,
+                           NS_SIDE_RIGHT, inherited);
 
   // -moz-border-*-colors: color, string, enum
   nscolor borderColor;
@@ -3431,6 +3580,19 @@ nsRuleNode::ComputeBorderData(nsStyleStr
       }
     }
   }
+
+  AdjustLogicalBorderColor(aContext,
+                           marginData.mBorderLeftColorLTRSource,
+                           marginData.mBorderLeftColorRTLSource,
+                           marginData.mBorderStartColor, marginData.mBorderEndColor,
+                           parentBorder, border,
+                           NS_SIDE_LEFT, inherited);
+  AdjustLogicalBorderColor(aContext,
+                           marginData.mBorderRightColorLTRSource,
+                           marginData.mBorderRightColorRTLSource,
+                           marginData.mBorderEndColor, marginData.mBorderStartColor,
+                           parentBorder, border,
+                           NS_SIDE_RIGHT, inherited);
 
   // -moz-border-radius: length, percent, inherit
   { // scope for compilers with broken |for| loop scoping
diff --git a/layout/style/nsRuleNode.h b/layout/style/nsRuleNode.h
--- a/layout/style/nsRuleNode.h
+++ b/layout/style/nsRuleNode.h
@@ -625,6 +625,37 @@ protected:
                                         PRUint8 aSide,
                                         PRInt32 aMask,
                                         PRBool& aInherited);
+
+  NS_HIDDEN_(void) AdjustLogicalBorderWidth(nsStyleContext* aContext,
+                                            const nsCSSValue& aLTRSource,
+                                            const nsCSSValue& aRTLSource,
+                                            const nsCSSValue& aLTRLogicalValue,
+                                            const nsCSSValue& aRTLLogicalValue,
+                                            const nsStyleBorder* aParentBorder,
+                                            nsStyleBorder* aRect,
+                                            PRUint8 aSide,
+                                            PRInt32 aMask,
+                                            PRBool& aInherited);
+
+  NS_HIDDEN_(void) AdjustLogicalBorderColor(nsStyleContext* aContext,
+                                            const nsCSSValue& aLTRSource,
+                                            const nsCSSValue& aRTLSource,
+                                            const nsCSSValue& aLTRLogicalValue,
+                                            const nsCSSValue& aRTLLogicalValue,
+                                            const nsStyleBorder* aParentBorder,
+                                            nsStyleBorder* aBorder,
+                                            PRUint8 aSide,
+                                            PRBool& aInherited);
+
+  NS_HIDDEN_(void) AdjustLogicalBorderStyle(nsStyleContext* aContext,
+                                            const nsCSSValue& aLTRSource,
+                                            const nsCSSValue& aRTLSource,
+                                            const nsCSSValue& aLTRLogicalValue,
+                                            const nsCSSValue& aRTLLogicalValue,
+                                            const nsStyleBorder* aParentBorder,
+                                            nsStyleBorder* aBorder,
+                                            PRUint8 aSide,
+                                            PRBool& aInherited);
   
   inline RuleDetail CheckSpecifiedProperties(const nsStyleStructID aSID, const nsRuleDataStruct& aRuleDataStruct);
 
diff --git a/layout/style/test/ListCSSProperties.cpp b/layout/style/test/ListCSSProperties.cpp
--- a/layout/style/test/ListCSSProperties.cpp
+++ b/layout/style/test/ListCSSProperties.cpp
@@ -113,6 +113,30 @@ const char *gInaccessibleProperties[] = 
     // Don't print the properties that aren't accepted by the parser, per
     // CSSParserImpl::ParseProperty
     "-x-system-font",
+    "border-end-color-value",
+    "border-end-style-value",
+    "border-end-width-value",
+    "border-left-color-value",
+    "border-left-color-ltr-source",
+    "border-left-color-rtl-source",
+    "border-left-style-value",
+    "border-left-style-ltr-source",
+    "border-left-style-rtl-source",
+    "border-left-width-value",
+    "border-left-width-ltr-source",
+    "border-left-width-rtl-source",
+    "border-right-color-value",
+    "border-right-color-ltr-source",
+    "border-right-color-rtl-source",
+    "border-right-style-value",
+    "border-right-style-ltr-source",
+    "border-right-style-rtl-source",
+    "border-right-width-value",
+    "border-right-width-ltr-source",
+    "border-right-width-rtl-source",
+    "border-start-color-value",
+    "border-start-style-value",
+    "border-start-width-value",
     "margin-end-value",
     "margin-left-value",
     "margin-right-value",
diff --git a/layout/style/test/property_database.js b/layout/style/test/property_database.js
--- a/layout/style/test/property_database.js
+++ b/layout/style/test/property_database.js
@@ -109,6 +109,41 @@ var gCSSProperties = {
 		other_values: [ "red green", "red #fc3", "#ff00cc" ],
 		invalid_values: [ "red none", "red inherit", "red, green" ]
 	},
+	"-moz-border-end": {
+		domProp: "MozBorderEnd",
+		inherited: false,
+		type: CSS_TYPE_TRUE_SHORTHAND,
+		subproperties: [ "-moz-border-end-color", "-moz-border-end-style", "-moz-border-end-width" ],
+		initial_values: [ "none", "medium", "currentColor", "none medium currentcolor" ],
+		other_values: [ "solid", "thin", "green", "medium solid", "green solid", "10px solid", "thick solid", "5px green none" ],
+		invalid_values: [ "5%" ]
+	},
+	"-moz-border-end-color": {
+		domProp: "MozBorderEndColor",
+		inherited: false,
+		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
+		initial_values: [ "currentColor" ],
+		other_values: [ "green", "rgba(255,128,0,0.5)", "transparent" ],
+		invalid_values: [ "#0", "#00", "#0000", "#00000", "#0000000", "#00000000", "#000000000" ]
+	},
+	"-moz-border-end-style": {
+		domProp: "MozBorderEndStyle",
+		inherited: false,
+		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
+		/* XXX hidden is sometimes the same as initial */
+		initial_values: [ "none" ],
+		other_values: [ "solid", "dashed", "dotted", "double", "outset", "inset", "groove", "ridge" ],
+		invalid_values: []
+	},
+	"-moz-border-end-width": {
+		domProp: "MozBorderEndWidth",
+		inherited: false,
+		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
+		prerequisites: { "-moz-border-end-style": "solid" },
+		initial_values: [ "medium", "3px" ],
+		other_values: [ "thin", "thick", "1px", "2em" ],
+		invalid_values: [ "5%" ]
+	},
 	"-moz-border-left-colors": {
 		domProp: "MozBorderLeftColors",
 		inherited: false,
@@ -165,6 +200,41 @@ var gCSSProperties = {
 		initial_values: [ "none" ],
 		other_values: [ "red green", "red #fc3", "#ff00cc" ],
 		invalid_values: [ "red none", "red inherit", "red, green" ]
+	},
+	"-moz-border-start": {
+		domProp: "MozBorderStart",
+		inherited: false,
+		type: CSS_TYPE_TRUE_SHORTHAND,
+		subproperties: [ "-moz-border-start-color", "-moz-border-start-style", "-moz-border-start-width" ],
+		initial_values: [ "none", "medium", "currentColor", "none medium currentcolor" ],
+		other_values: [ "solid", "thin", "green", "medium solid", "green solid", "10px solid", "thick solid", "5px green none" ],
+		invalid_values: [ "5%" ]
+	},
+	"-moz-border-start-color": {
+		domProp: "MozBorderStartColor",
+		inherited: false,
+		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
+		initial_values: [ "currentColor" ],
+		other_values: [ "green", "rgba(255,128,0,0.5)", "transparent" ],
+		invalid_values: [ "#0", "#00", "#0000", "#00000", "#0000000", "#00000000", "#000000000" ]
+	},
+	"-moz-border-start-style": {
+		domProp: "MozBorderStartStyle",
+		inherited: false,
+		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
+		/* XXX hidden is sometimes the same as initial */
+		initial_values: [ "none" ],
+		other_values: [ "solid", "dashed", "dotted", "double", "outset", "inset", "groove", "ridge" ],
+		invalid_values: []
+	},
+	"-moz-border-start-width": {
+		domProp: "MozBorderStartWidth",
+		inherited: false,
+		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
+		prerequisites: { "-moz-border-start-style": "solid" },
+		initial_values: [ "medium", "3px" ],
+		other_values: [ "thin", "thick", "1px", "2em" ],
+		invalid_values: [ "5%" ]
 	},
 	"-moz-border-top-colors": {
 		domProp: "MozBorderTopColors",
@@ -528,7 +598,7 @@ var gCSSProperties = {
 	"border-left-color": {
 		domProp: "borderLeftColor",
 		inherited: false,
-		type: CSS_TYPE_LONGHAND,
+		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
 		initial_values: [ "currentColor" ],
 		other_values: [ "green", "rgba(255,128,0,0.5)", "transparent" ],
 		invalid_values: [ "#0", "#00", "#0000", "#00000", "#0000000", "#00000000", "#000000000" ]
@@ -536,7 +606,7 @@ var gCSSProperties = {
 	"border-left-style": {
 		domProp: "borderLeftStyle",
 		inherited: false,
-		type: CSS_TYPE_LONGHAND,
+		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
 		/* XXX hidden is sometimes the same as initial */
 		initial_values: [ "none" ],
 		other_values: [ "solid", "dashed", "dotted", "double", "outset", "inset", "groove", "ridge" ],
@@ -545,7 +615,7 @@ var gCSSProperties = {
 	"border-left-width": {
 		domProp: "borderLeftWidth",
 		inherited: false,
-		type: CSS_TYPE_LONGHAND,
+		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
 		prerequisites: { "border-left-style": "solid" },
 		initial_values: [ "medium", "3px" ],
 		other_values: [ "thin", "thick", "1px", "2em" ],
@@ -563,7 +633,7 @@ var gCSSProperties = {
 	"border-right-color": {
 		domProp: "borderRightColor",
 		inherited: false,
-		type: CSS_TYPE_LONGHAND,
+		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
 		initial_values: [ "currentColor" ],
 		other_values: [ "green", "rgba(255,128,0,0.5)", "transparent" ],
 		invalid_values: [ "#0", "#00", "#0000", "#00000", "#0000000", "#00000000", "#000000000" ]
@@ -571,7 +641,7 @@ var gCSSProperties = {
 	"border-right-style": {
 		domProp: "borderRightStyle",
 		inherited: false,
-		type: CSS_TYPE_LONGHAND,
+		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
 		/* XXX hidden is sometimes the same as initial */
 		initial_values: [ "none" ],
 		other_values: [ "solid", "dashed", "dotted", "double", "outset", "inset", "groove", "ridge" ],
@@ -580,7 +650,7 @@ var gCSSProperties = {
 	"border-right-width": {
 		domProp: "borderRightWidth",
 		inherited: false,
-		type: CSS_TYPE_LONGHAND,
+		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
 		prerequisites: { "border-right-style": "solid" },
 		initial_values: [ "medium", "3px" ],
 		other_values: [ "thin", "thick", "1px", "2em" ],
diff --git a/layout/style/test/test_inherit_computation.html b/layout/style/test/test_inherit_computation.html
--- a/layout/style/test/test_inherit_computation.html
+++ b/layout/style/test/test_inherit_computation.html
@@ -24,6 +24,14 @@
 
 var gNoComputedStyle = {
   "-moz-force-broken-image-icon": true,
+  "-moz-border-end": true, // NB: shorthand
+  "-moz-border-end-color": true,
+  "-moz-border-end-style": true,
+  "-moz-border-end-width": true,
+  "-moz-border-start": true, // NB: shorthand
+  "-moz-border-start-color": true,
+  "-moz-border-start-style": true,
+  "-moz-border-start-width": true,
   "-moz-margin-end": true,
   "-moz-margin-start": true,
   "-moz-padding-end": true,
diff --git a/layout/style/test/test_inherit_storage.html b/layout/style/test/test_inherit_storage.html
--- a/layout/style/test/test_inherit_storage.html
+++ b/layout/style/test/test_inherit_storage.html
@@ -27,7 +27,9 @@ var gDeclaration = document.getElementBy
 
 var gKnownFails = {
   /* bug 377519: */
+  "-moz-border-end": true,
   "-moz-border-radius": true,
+  "-moz-border-start": true,
   "-moz-outline-radius": true,
   "background": true,
   "border": true,
@@ -48,7 +50,9 @@ var gKnownFails = {
 };
 
 var gKnownFails2 = {
+  "-moz-border-end": true,
   "-moz-border-radius": true,
+  "-moz-border-start": true,
   "-moz-outline-radius": true,
   "background": true,
   "border": true,
diff --git a/layout/style/test/test_initial_computation.html b/layout/style/test/test_initial_computation.html
--- a/layout/style/test/test_initial_computation.html
+++ b/layout/style/test/test_initial_computation.html
@@ -37,6 +37,14 @@
 
 var gNoComputedStyle = {
   "-moz-force-broken-image-icon": true,
+  "-moz-border-end": true, // NB: shorthand
+  "-moz-border-end-color": true,
+  "-moz-border-end-style": true,
+  "-moz-border-end-width": true,
+  "-moz-border-start": true, // NB: shorthand
+  "-moz-border-start-color": true,
+  "-moz-border-start-style": true,
+  "-moz-border-start-width": true,
   "-moz-margin-end": true,
   "-moz-margin-start": true,
   "-moz-padding-end": true,
diff --git a/layout/style/test/test_initial_storage.html b/layout/style/test/test_initial_storage.html
--- a/layout/style/test/test_initial_storage.html
+++ b/layout/style/test/test_initial_storage.html
@@ -27,7 +27,9 @@ var gDeclaration = document.getElementBy
 
 var gKnownFails = {
   /* bug 377519: */
+  "-moz-border-end": true,
   "-moz-border-radius": true,
+  "-moz-border-start": true,
   "-moz-outline-radius": true,
   "background": true,
   "border": true,
@@ -48,7 +50,9 @@ var gKnownFails = {
 };
 
 var gKnownFails2 = {
+  "-moz-border-end": true,
   "-moz-border-radius": true,
+  "-moz-border-start": true,
   "-moz-outline-radius": true,
   "background": true,
   "border": true,
diff --git a/layout/style/test/test_value_computation.html b/layout/style/test/test_value_computation.html
--- a/layout/style/test/test_value_computation.html
+++ b/layout/style/test/test_value_computation.html
@@ -37,6 +37,14 @@
 
 var gNoComputedStyle = {
   "-moz-force-broken-image-icon": true,
+  "-moz-border-end": true, // NB: shorthand
+  "-moz-border-end-color": true,
+  "-moz-border-end-style": true,
+  "-moz-border-end-width": true,
+  "-moz-border-start": true, // NB: shorthand
+  "-moz-border-start-color": true,
+  "-moz-border-start-style": true,
+  "-moz-border-start-width": true,
   "-moz-margin-end": true,
   "-moz-margin-start": true,
   "-moz-padding-end": true,
