Use a valid value for storing in a bitfield as the style struct ID for backend-only properties.  (Bug 469244)  r+sr=bzbarsky

diff --git a/layout/style/nsCSSProps.cpp b/layout/style/nsCSSProps.cpp
--- a/layout/style/nsCSSProps.cpp
+++ b/layout/style/nsCSSProps.cpp
@@ -1425,18 +1425,20 @@ const nsStyleStructID nsCSSProps::kSIDTa
     #define CSS_PROP_MARGIN(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_) eStyleStruct_Margin,
     #define CSS_PROP_PADDING(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_) eStyleStruct_Padding,
     #define CSS_PROP_BORDER(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_) eStyleStruct_Border,
     #define CSS_PROP_OUTLINE(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_) eStyleStruct_Outline,
     #define CSS_PROP_XUL(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_) eStyleStruct_XUL,
     #define CSS_PROP_SVG(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_) eStyleStruct_SVG,
     #define CSS_PROP_SVGRESET(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_) eStyleStruct_SVGReset,
     #define CSS_PROP_COLUMN(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_) eStyleStruct_Column,
-    // This shouldn't matter, but we need something to go here.
-    #define CSS_PROP_BACKENDONLY(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_) nsStyleStructID(-1),
+    // Use the special BackendOnly style struct ID (which does need to
+    // be valid for storing in the nsCSSCompressedDataBlock::mStyleBits
+    // bitfield).
+    #define CSS_PROP_BACKENDONLY(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_) eStyleStruct_BackendOnly,
 
     #include "nsCSSPropList.h"
 
     #undef CSS_PROP_FONT
     #undef CSS_PROP_COLOR
     #undef CSS_PROP_BACKGROUND
     #undef CSS_PROP_LIST
     #undef CSS_PROP_POSITION
diff --git a/layout/style/nsStyleStructFwd.h b/layout/style/nsStyleStructFwd.h
--- a/layout/style/nsStyleStructFwd.h
+++ b/layout/style/nsStyleStructFwd.h
@@ -51,16 +51,23 @@ enum nsStyleStructID {
  * The C++ standard, section 7.2, guarantees that enums begin with 0 and
  * increase by 1.
  */
 
 #define STYLE_STRUCT(name, checkdata_cb, ctor_args) eStyleStruct_##name,
 #include "nsStyleStructList.h"
 #undef STYLE_STRUCT
 
-nsStyleStructID_Length /* one past the end; length of 0-based list */
+// one past the end; length of 0-based list
+nsStyleStructID_Length,
+
+// An ID used for properties that are not in style structs.  This is
+// used only in some users of nsStyleStructID, such as
+// nsCSSProps::kSIDTable, including some that store SIDs in a bitfield,
+// such as nsCSSCompressedDataBlock::mStyleBits.
+eStyleStruct_BackendOnly = nsStyleStructID_Length
 
 };
 
 // A bit corresponding to each struct ID
 #define NS_STYLE_INHERIT_BIT(sid_)        (1 << PRInt32(eStyleStruct_##sid_))
 
 #endif /* nsStyleStructFwd_h_ */
