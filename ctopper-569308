From: Craig Topper <craig.topper@gmail.com>

Remove unneeded QueryInterface calls (to nsIDOMCSSValue) in nsComputedDOMStyle.  (Bug 569308)  r=dbaron

diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -590,41 +590,44 @@ nsComputedDOMStyle::GetBinding(nsIDOMCSS
   const nsStyleDisplay* display = GetStyleDisplay();
 
   if (display->mBinding) {
     val->SetURI(display->mBinding->mURI);
   } else {
     val->SetIdent(eCSSKeyword_none);
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetClear(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(nsCSSProps::ValueToKeywordEnum(GetStyleDisplay()->mBreakType,
                                                nsCSSProps::kClearKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetCssFloat(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(nsCSSProps::ValueToKeywordEnum(GetStyleDisplay()->mFloats,
                                                nsCSSProps::kFloatKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBottom(nsIDOMCSSValue** aValue)
 {
   return GetOffsetWidthFor(NS_SIDE_BOTTOM, aValue);
 }
 
@@ -632,17 +635,18 @@ nsresult
 nsComputedDOMStyle::GetStackSizing(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(GetStyleXUL()->mStretchStack ? eCSSKeyword_stretch_to_fit :
                 eCSSKeyword_ignore);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::SetToRGBAColor(nsROCSSPrimitiveValue* aValue,
                                    nscolor aColor)
 {
   if (NS_GET_A(aColor) == 0) {
     aValue->SetIdent(eCSSKeyword_transparent);
@@ -687,99 +691,106 @@ nsComputedDOMStyle::GetColor(nsIDOMCSSVa
   const nsStyleColor* color = GetStyleColor();
 
   nsresult rv = SetToRGBAColor(val, color->mColor);
   if (NS_FAILED(rv)) {
     delete val;
     return rv;
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetOpacity(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetNumber(GetStyleDisplay()->mOpacity);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetColumnCount(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleColumn* column = GetStyleColumn();
 
   if (column->mColumnCount == NS_STYLE_COLUMN_COUNT_AUTO) {
     val->SetIdent(eCSSKeyword_auto);
   } else {
     val->SetNumber(column->mColumnCount);
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetColumnWidth(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   // XXX fix the auto case. When we actually have a column frame, I think
   // we should return the computed column width.
   SetValueToCoord(val, GetStyleColumn()->mColumnWidth);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetColumnGap(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleColumn* column = GetStyleColumn();
   if (column->mColumnGap.GetUnit() == eStyleUnit_Normal) {
     val->SetAppUnits(GetStyleFont()->mFont.size);
   } else {
     SetValueToCoord(val, GetStyleColumn()->mColumnGap);
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetColumnRuleWidth(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   if (!val)
     return NS_ERROR_OUT_OF_MEMORY;
 
   val->SetAppUnits(GetStyleColumn()->GetComputedColumnRuleWidth());
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetColumnRuleStyle(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   if (!val)
     return NS_ERROR_OUT_OF_MEMORY;
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleColumn()->mColumnRuleStyle,
                                    nsCSSProps::kBorderStyleKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetColumnRuleColor(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   if (!val)
     return NS_ERROR_OUT_OF_MEMORY;
@@ -788,37 +799,40 @@ nsComputedDOMStyle::GetColumnRuleColor(n
   nscolor ruleColor;
   if (column->mColumnRuleColorIsForeground) {
     ruleColor = GetStyleColor()->mColor;
   } else {
     ruleColor = column->mColumnRuleColor;
   }
 
   SetToRGBAColor(val, ruleColor);
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetContent(nsIDOMCSSValue** aValue)
 {
   const nsStyleContent *content = GetStyleContent();
 
   if (content->ContentCount() == 0) {
     nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
     NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
     val->SetIdent(eCSSKeyword_none);
-    return CallQueryInterface(val, aValue);
+    NS_ADDREF(*aValue = val);
+    return NS_OK;
   }
 
   if (content->ContentCount() == 1 &&
       content->ContentAt(0).mType == eStyleContentType_AltContent) {
     nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
     NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
     val->SetIdent(eCSSKeyword__moz_alt_content);
-    return CallQueryInterface(val, aValue);
+    NS_ADDREF(*aValue = val);
+    return NS_OK;
   }
 
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_FALSE);
   NS_ENSURE_TRUE(valueList, NS_ERROR_OUT_OF_MEMORY);
 
   for (PRUint32 i = 0, i_end = content->ContentCount(); i < i_end; ++i) {
     nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
     if (!val || !valueList->AppendCSSValue(val)) {
@@ -905,29 +919,31 @@ nsComputedDOMStyle::GetContent(nsIDOMCSS
         break;
       case eStyleContentType_AltContent:
       default:
         NS_NOTREACHED("unexpected type");
         break;
     }
   }
 
-  return CallQueryInterface(valueList, aValue);
+  NS_ADDREF(*aValue = valueList);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetCounterIncrement(nsIDOMCSSValue** aValue)
 {
   const nsStyleContent *content = GetStyleContent();
 
   if (content->CounterIncrementCount() == 0) {
     nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
     NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
     val->SetIdent(eCSSKeyword_none);
-    return CallQueryInterface(val, aValue);
+    NS_ADDREF(*aValue = val);
+    return NS_OK;
   }
 
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_FALSE);
   NS_ENSURE_TRUE(valueList, NS_ERROR_OUT_OF_MEMORY);
 
   for (PRUint32 i = 0, i_end = content->CounterIncrementCount(); i < i_end; ++i) {
     nsROCSSPrimitiveValue* name = GetROCSSPrimitiveValue();
     if (!name || !valueList->AppendCSSValue(name)) {
@@ -945,54 +961,53 @@ nsComputedDOMStyle::GetCounterIncrement(
 
     const nsStyleCounterData *data = content->GetCounterIncrementAt(i);
     nsAutoString escaped;
     nsStyleUtil::AppendEscapedCSSIdent(data->mCounter, escaped);
     name->SetString(escaped);
     value->SetNumber(data->mValue); // XXX This should really be integer
   }
 
-  return CallQueryInterface(valueList, aValue);
+  NS_ADDREF(*aValue = valueList);
+  return NS_OK;
 }
 
 /* Convert the stored representation into a list of two values and then hand
  * it back.
  */
 nsresult nsComputedDOMStyle::GetMozTransformOrigin(nsIDOMCSSValue **aValue)
 {
   /* We need to build up a list of two values.  We'll call them
    * width and height.
    */
-  nsAutoPtr<nsROCSSPrimitiveValue> width(GetROCSSPrimitiveValue());
-  nsAutoPtr<nsROCSSPrimitiveValue> height(GetROCSSPrimitiveValue());
+  nsRefPtr<nsROCSSPrimitiveValue> width = GetROCSSPrimitiveValue();
+  nsRefPtr<nsROCSSPrimitiveValue> height = GetROCSSPrimitiveValue();
   if (!width || !height)
     return NS_ERROR_OUT_OF_MEMORY;
 
   /* Now, get the values. */
   const nsStyleDisplay* display = GetStyleDisplay();
   SetValueToCoord(width, display->mTransformOrigin[0],
                   &nsComputedDOMStyle::GetFrameBoundsWidthForTransform);
   SetValueToCoord(height, display->mTransformOrigin[1],
                   &nsComputedDOMStyle::GetFrameBoundsHeightForTransform);
 
   /* Store things as a value list, fail if we can't get one. */
-  nsAutoPtr<nsDOMCSSValueList> valueList(GetROCSSValueList(PR_FALSE));
+  nsRefPtr<nsDOMCSSValueList> valueList = GetROCSSValueList(PR_FALSE);
   if (!valueList)
     return NS_ERROR_OUT_OF_MEMORY;
 
   /* Chain on width and height, fail if we can't. */
   if (!valueList->AppendCSSValue(width))
     return NS_ERROR_OUT_OF_MEMORY;
-  width.forget();
   if (!valueList->AppendCSSValue(height))
     return NS_ERROR_OUT_OF_MEMORY;
-  height.forget();
-
-  /* Release the pointer and call query interface!  We're done. */
-  return CallQueryInterface(valueList.forget(), aValue);
+
+  valueList.forget(aValue);
+  return NS_OK;
 }
 
 /* If the property is "none", hand back "none" wrapped in a value.
  * Otherwise, compute the aggregate transform matrix and hands it back in a
  * "matrix" wrapper.
  */
 nsresult nsComputedDOMStyle::GetMozTransform(nsIDOMCSSValue **aValue)
 {
@@ -1000,23 +1015,24 @@ nsresult nsComputedDOMStyle::GetMozTrans
 
   /* First, get the display data.  We'll need it. */
   const nsStyleDisplay* display = GetStyleDisplay();
 
   /* If the "no transforms" flag is set, then we should construct a
    * single-element entry and hand it back.
    */
   if (!display->mTransformPresent) {
-    nsROCSSPrimitiveValue *val(GetROCSSPrimitiveValue());
+    nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
     if (!val)
       return NS_ERROR_OUT_OF_MEMORY;
 
     /* Set it to "none." */
     val->SetIdent(eCSSKeyword_none);
-    return CallQueryInterface(val, aValue);
+    NS_ADDREF(*aValue = val);
+    return NS_OK;
   }
 
   /* Otherwise, we need to compute the current value of the transform matrix,
    * store it in a string, and hand it back to the caller.
    */
   nsAutoString resultString(NS_LITERAL_STRING("matrix("));
 
   /* Now, we need to convert the matrix into a string.  We'll start by taking
@@ -1053,35 +1069,37 @@ nsresult nsComputedDOMStyle::GetMozTrans
 
   /* Append these values! */
   resultString.AppendFloat(deltaX);
   resultString.Append(NS_LITERAL_STRING("px, "));
   resultString.AppendFloat(deltaY);
   resultString.Append(NS_LITERAL_STRING("px)"));
 
   /* Create a value to hold our result. */
-  nsROCSSPrimitiveValue* rv(GetROCSSPrimitiveValue());
-
-  if (!rv)
+  nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
+
+  if (!val)
     return NS_ERROR_OUT_OF_MEMORY;
 
-  rv->SetString(resultString);
-  return CallQueryInterface(rv, aValue);
+  val->SetString(resultString);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetCounterReset(nsIDOMCSSValue** aValue)
 {
   const nsStyleContent *content = GetStyleContent();
 
   if (content->CounterResetCount() == 0) {
     nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
     NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
     val->SetIdent(eCSSKeyword_none);
-    return CallQueryInterface(val, aValue);
+    NS_ADDREF(*aValue = val);
+    return NS_OK;
   }
 
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_FALSE);
   NS_ENSURE_TRUE(valueList, NS_ERROR_OUT_OF_MEMORY);
 
   for (PRUint32 i = 0, i_end = content->CounterResetCount(); i < i_end; ++i) {
     nsROCSSPrimitiveValue* name = GetROCSSPrimitiveValue();
     if (!name || !valueList->AppendCSSValue(name)) {
@@ -1099,29 +1117,31 @@ nsComputedDOMStyle::GetCounterReset(nsID
 
     const nsStyleCounterData *data = content->GetCounterResetAt(i);
     nsAutoString escaped;
     nsStyleUtil::AppendEscapedCSSIdent(data->mCounter, escaped);
     name->SetString(escaped);
     value->SetNumber(data->mValue); // XXX This should really be integer
   }
 
-  return CallQueryInterface(valueList, aValue);
+  NS_ADDREF(*aValue = valueList);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetQuotes(nsIDOMCSSValue** aValue)
 {
   const nsStyleQuotes *quotes = GetStyleQuotes();
 
   if (quotes->QuotesCount() == 0) {
     nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
     NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
     val->SetIdent(eCSSKeyword_none);
-    return CallQueryInterface(val, aValue);
+    NS_ADDREF(*aValue = val);
+    return NS_OK;
   }
 
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_FALSE);
   NS_ENSURE_TRUE(valueList, NS_ERROR_OUT_OF_MEMORY);
 
   for (PRUint32 i = 0, i_end = quotes->QuotesCount(); i < i_end; ++i) {
     nsROCSSPrimitiveValue* openVal = GetROCSSPrimitiveValue();
     if (!openVal || !valueList->AppendCSSValue(openVal)) {
@@ -1140,17 +1160,18 @@ nsComputedDOMStyle::GetQuotes(nsIDOMCSSV
     nsString s;
     nsStyleUtil::AppendEscapedCSSString(*quotes->OpenQuoteAt(i), s);
     openVal->SetString(s);
     s.Truncate();
     nsStyleUtil::AppendEscapedCSSString(*quotes->CloseQuoteAt(i), s);
     closeVal->SetString(s);
   }
 
-  return CallQueryInterface(valueList, aValue);
+  NS_ADDREF(*aValue = valueList);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetFontFamily(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
@@ -1173,47 +1194,50 @@ nsComputedDOMStyle::GetFontFamily(nsIDOM
       val->SetString(Substring(fontName, 0, lendiff-1)); // -1 removes comma
     } else {
       val->SetString(fontName);
     }
   } else {
     val->SetString(fontName);
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetFontSize(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   // Note: GetStyleFont()->mSize is the 'computed size';
   // GetStyleFont()->mFont.size is the 'actual size'
   val->SetAppUnits(GetStyleFont()->mSize);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetFontSizeAdjust(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleFont *font = GetStyleFont();
 
   if (font->mFont.sizeAdjust) {
     val->SetNumber(font->mFont.sizeAdjust);
   } else {
     val->SetIdent(eCSSKeyword_none);
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetFontStretch(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
@@ -1231,29 +1255,31 @@ nsComputedDOMStyle::GetFontStretch(nsIDO
     val->SetIdent(eCSSKeyword_narrower);
   } else if (stretch >= NS_FONT_STRETCH_WIDER / 2) {
     val->SetIdent(eCSSKeyword_wider);
   } else {
     val->SetIdent(
       nsCSSProps::ValueToKeywordEnum(stretch, nsCSSProps::kFontStretchKTable));
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetFontStyle(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(nsCSSProps::ValueToKeywordEnum(GetStyleFont()->mFont.style,
                                                nsCSSProps::kFontStyleKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetFontWeight(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
@@ -1267,30 +1293,32 @@ nsComputedDOMStyle::GetFontWeight(nsIDOM
     // but at least it's legal CSS.
     val->SetIdent(eCSSKeyword_lighter);
   } else {
     // FIXME: This doesn't represent the full range of computed values,
     // but at least it's legal CSS.
     val->SetIdent(eCSSKeyword_bolder);
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetFontVariant(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleFont()->mFont.variant,
                                    nsCSSProps::kFontVariantKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBackgroundList(PRUint8 nsStyleBackground::Layer::* aMember,
                                       PRUint32 nsStyleBackground::* aCount,
                                       const PRInt32 aTable[],
                                       nsIDOMCSSValue** aResult)
 {
@@ -1305,17 +1333,18 @@ nsComputedDOMStyle::GetBackgroundList(PR
       delete val;
       delete valueList;
       return NS_ERROR_OUT_OF_MEMORY;
     }
     val->SetIdent(nsCSSProps::ValueToKeywordEnum(bg->mLayers[i].*aMember,
                                                  aTable));
   }
 
-  return CallQueryInterface(valueList, aResult);
+  NS_ADDREF(*aResult = valueList);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBackgroundAttachment(nsIDOMCSSValue** aValue)
 {
   return GetBackgroundList(&nsStyleBackground::Layer::mAttachment,
                            &nsStyleBackground::mAttachmentCount,
                            nsCSSProps::kBackgroundAttachmentKTable,
@@ -1339,17 +1368,18 @@ nsComputedDOMStyle::GetBackgroundColor(n
 
   const nsStyleBackground* color = GetStyleBackground();
   nsresult rv = SetToRGBAColor(val, color->mBackgroundColor);
   if (NS_FAILED(rv)) {
     delete val;
     return rv;
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 static void
 AppendCSSGradientLength(const nsStyleCoord& aValue,
                         nsROCSSPrimitiveValue* aPrimitive,
                         nsAString& aString)
 {
   nsAutoString tokenString;
@@ -1554,30 +1584,32 @@ nsComputedDOMStyle::GetBackgroundImage(n
     const nsStyleImage& image = bg->mLayers[i].mImage;
     nsresult rv = SetValueToStyleImage(image, val);
     if (NS_FAILED(rv)) {
       delete valueList;
       return rv;
     }
   }
 
-  return CallQueryInterface(valueList, aValue);
+  NS_ADDREF(*aValue = valueList);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBackgroundInlinePolicy(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(nsCSSProps::ValueToKeywordEnum(
                   GetStyleBackground()->mBackgroundInlinePolicy,
                   nsCSSProps::kBackgroundInlinePolicyKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBackgroundOrigin(nsIDOMCSSValue** aValue)
 {
   return GetBackgroundList(&nsStyleBackground::Layer::mOrigin,
                            &nsStyleBackground::mOriginCount,
                            nsCSSProps::kBackgroundOriginKTable,
@@ -1624,17 +1656,18 @@ nsComputedDOMStyle::GetBackgroundPositio
 
     if (pos.mYIsPercent) {
       valY->SetPercent(pos.mYPosition.mFloat);
     } else {
       valY->SetAppUnits(pos.mYPosition.mCoord);
     }
   }
 
-  return CallQueryInterface(valueList, aValue);
+  NS_ADDREF(*aValue = valueList);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBackgroundRepeat(nsIDOMCSSValue** aValue)
 {
   return GetBackgroundList(&nsStyleBackground::Layer::mRepeat,
                            &nsStyleBackground::mRepeatCount,
                            nsCSSProps::kBackgroundRepeatKTable,
@@ -1709,17 +1742,18 @@ nsComputedDOMStyle::GetMozBackgroundSize
                             "bad mHeightType");
           valY->SetAppUnits(size.mHeight.mCoord);
         }
         break;
       }
     }
   }
 
-  return CallQueryInterface(valueList, aValue);
+  NS_ADDREF(*aValue = valueList);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetPadding(nsIDOMCSSValue** aValue)
 {
   // return null per spec.
   *aValue = nsnull;
 
@@ -1755,17 +1789,18 @@ nsComputedDOMStyle::GetBorderCollapse(ns
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleTableBorder()->mBorderCollapse,
                                    nsCSSProps::kBorderCollapseKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBorderSpacing(nsIDOMCSSValue** aValue)
 {
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_FALSE);
   NS_ENSURE_TRUE(valueList, NS_ERROR_OUT_OF_MEMORY);
 
@@ -1790,56 +1825,60 @@ nsComputedDOMStyle::GetBorderSpacing(nsI
     delete ySpacing;
     return NS_ERROR_OUT_OF_MEMORY;
   }
 
   const nsStyleTableBorder *border = GetStyleTableBorder();
   xSpacing->SetAppUnits(border->mBorderSpacingX);
   ySpacing->SetAppUnits(border->mBorderSpacingY);
 
-  return CallQueryInterface(valueList, aValue);
+  NS_ADDREF(*aValue = valueList);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetCaptionSide(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleTableBorder()->mCaptionSide,
                                    nsCSSProps::kCaptionSideKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetEmptyCells(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleTableBorder()->mEmptyCells,
                                    nsCSSProps::kEmptyCellsKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetTableLayout(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleTable()->mLayoutStrategy,
                                    nsCSSProps::kTableLayoutKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBorderStyle(nsIDOMCSSValue** aValue)
 {
   // return null per spec.
   *aValue = nsnull;
 
@@ -2015,17 +2054,18 @@ nsComputedDOMStyle::GetMarginRightWidth(
 nsresult
 nsComputedDOMStyle::GetMarkerOffset(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   SetValueToCoord(val, GetStyleContent()->mMarkerOffset);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetOutline(nsIDOMCSSValue** aValue)
 {
   // return null per spec.
   *aValue = nsnull;
 
@@ -2049,41 +2089,44 @@ nsComputedDOMStyle::GetOutlineWidth(nsID
 #ifdef DEBUG
     PRBool res =
 #endif
       outline->GetOutlineWidth(width);
     NS_ASSERTION(res, "percent outline doesn't exist");
   }
   val->SetAppUnits(width);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetOutlineStyle(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleOutline()->GetOutlineStyle(),
                                    nsCSSProps::kOutlineStyleKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetOutlineOffset(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetAppUnits(GetStyleOutline()->mOutlineOffset);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetOutlineRadiusBottomLeft(nsIDOMCSSValue** aValue)
 {
   return GetEllipseRadii(GetStyleOutline()->mOutlineRadius,
                          NS_CORNER_BOTTOM_LEFT, aValue);
 }
@@ -2124,17 +2167,18 @@ nsComputedDOMStyle::GetOutlineColor(nsID
 #endif
 
   nsresult rv = SetToRGBAColor(val, color);
   if (NS_FAILED(rv)) {
     delete val;
     return rv;
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetEllipseRadii(const nsStyleCorners& aRadius,
                                     PRUint8 aFullCorner,
                                     nsIDOMCSSValue** aValue)
 {
   const nsStyleCoord& radiusX
@@ -2145,17 +2189,18 @@ nsComputedDOMStyle::GetEllipseRadii(cons
   // for compatibility, return a single value if X and Y are equal
   if (radiusX == radiusY) {
     nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
     NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
     SetValueToCoord(val, radiusX,
                     &nsComputedDOMStyle::GetFrameBorderRectWidth);
 
-    return CallQueryInterface(val, aValue);
+    NS_ADDREF(*aValue = val);
+    return NS_OK;
   } else {
     nsDOMCSSValueList *valueList = GetROCSSValueList(PR_FALSE);
     NS_ENSURE_TRUE(valueList, NS_ERROR_OUT_OF_MEMORY);
 
     nsROCSSPrimitiveValue *valX = GetROCSSPrimitiveValue();
     if (!valX || !valueList->AppendCSSValue(valX)) {
       delete valX;
       delete valueList;
@@ -2170,30 +2215,32 @@ nsComputedDOMStyle::GetEllipseRadii(cons
       return NS_ERROR_OUT_OF_MEMORY;
     }
 
     SetValueToCoord(valX, radiusX,
                     &nsComputedDOMStyle::GetFrameBorderRectWidth);
     SetValueToCoord(valY, radiusY,
                     &nsComputedDOMStyle::GetFrameBorderRectWidth);
 
-    return CallQueryInterface(valueList, aValue);
+    NS_ADDREF(*aValue = valueList);
+    return NS_OK;
   }
 }
 
 nsresult
 nsComputedDOMStyle::GetCSSShadowArray(nsCSSShadowArray* aArray,
                                       const nscolor& aDefaultColor,
                                       PRBool aIsBoxShadow,
                                       nsIDOMCSSValue** aValue)
 {
   if (!aArray) {
     nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
     val->SetIdent(eCSSKeyword_none);
-    return CallQueryInterface(val, aValue);
+    NS_ADDREF(*aValue = val);
+    return NS_OK;
   }
 
   static nscoord nsCSSShadowItem::* const shadowValuesNoSpread[] = {
     &nsCSSShadowItem::mXOffset,
     &nsCSSShadowItem::mYOffset,
     &nsCSSShadowItem::mRadius
   };
 
@@ -2262,17 +2309,18 @@ nsComputedDOMStyle::GetCSSShadowArray(ns
         return NS_ERROR_OUT_OF_MEMORY;
       }
       val->SetIdent(
         nsCSSProps::ValueToKeywordEnum(NS_STYLE_BOX_SHADOW_INSET,
                                        nsCSSProps::kBoxShadowTypeKTable));
     }
   }
 
-  return CallQueryInterface(valueList, aValue);
+  NS_ADDREF(*aValue = valueList);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBoxShadow(nsIDOMCSSValue** aValue)
 {
   return GetCSSShadowArray(GetStyleBorder()->mBoxShadow,
                            GetStyleColor()->mColor,
                            PR_TRUE, aValue);
@@ -2281,17 +2329,18 @@ nsComputedDOMStyle::GetBoxShadow(nsIDOMC
 nsresult
 nsComputedDOMStyle::GetZIndex(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   SetValueToCoord(val, GetStylePosition()->mZIndex);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetListStyleImage(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
@@ -2302,43 +2351,46 @@ nsComputedDOMStyle::GetListStyleImage(ns
   } else {
     nsCOMPtr<nsIURI> uri;
     if (list->GetListStyleImage()) {
       list->GetListStyleImage()->GetURI(getter_AddRefs(uri));
     }
     val->SetURI(uri);
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetListStylePosition(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleList()->mListStylePosition,
                                    nsCSSProps::kListStylePositionKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetListStyleType(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleList()->mListStyleType,
                                    nsCSSProps::kListStyleKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetImageRegion(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
@@ -2379,60 +2431,64 @@ nsComputedDOMStyle::GetImageRegion(nsIDO
     delete rightVal;
     delete bottomVal;
     delete leftVal;
     delete val;
 
     return rv;
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetLineHeight(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   nscoord lineHeight;
   if (GetLineHeightCoord(lineHeight)) {
     val->SetAppUnits(lineHeight);
   } else {
     SetValueToCoord(val, GetStyleText()->mLineHeight,
                     nsnull, nsCSSProps::kLineHeightKTable);
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetVerticalAlign(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   SetValueToCoord(val, GetStyleTextReset()->mVerticalAlign,
                   &nsComputedDOMStyle::GetLineHeightCoord,
                   nsCSSProps::kVerticalAlignKTable);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetTextAlign(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleText()->mTextAlign,
                                    nsCSSProps::kTextAlignKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetTextDecoration(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
@@ -2448,29 +2504,31 @@ nsComputedDOMStyle::GetTextDecoration(ns
                   NS_STYLE_TEXT_DECORATION_OVERRIDE_ALL);
     nsStyleUtil::AppendBitmaskCSSValue(eCSSProperty_text_decoration, intValue,
                                        NS_STYLE_TEXT_DECORATION_UNDERLINE,
                                        NS_STYLE_TEXT_DECORATION_BLINK,
                                        decorationString);
     val->SetString(decorationString);
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetTextIndent(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   SetValueToCoord(val, GetStyleText()->mTextIndent,
                   &nsComputedDOMStyle::GetCBContentWidth);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetTextShadow(nsIDOMCSSValue** aValue)
 {
   return GetCSSShadowArray(GetStyleText()->mTextShadow,
                            GetStyleColor()->mColor,
                            PR_FALSE, aValue);
@@ -2481,140 +2539,151 @@ nsComputedDOMStyle::GetTextTransform(nsI
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleText()->mTextTransform,
                                    nsCSSProps::kTextTransformKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetMozTabSize(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetNumber(GetStyleText()->mTabSize);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetLetterSpacing(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   SetValueToCoord(val, GetStyleText()->mLetterSpacing);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetWordSpacing(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetAppUnits(GetStyleText()->mWordSpacing);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetWhiteSpace(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleText()->mWhiteSpace,
                                    nsCSSProps::kWhitespaceKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetWindowShadow(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleUIReset()->mWindowShadow,
                                    nsCSSProps::kWindowShadowKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 
 nsresult
 nsComputedDOMStyle::GetWordWrap(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleText()->mWordWrap,
                                    nsCSSProps::kWordwrapKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetPointerEvents(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleVisibility()->mPointerEvents,
                                    nsCSSProps::kPointerEventsKTable));
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetVisibility(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(nsCSSProps::ValueToKeywordEnum(GetStyleVisibility()->mVisible,
                                                nsCSSProps::kVisibilityKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetDirection(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleVisibility()->mDirection,
                                    nsCSSProps::kDirectionKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetUnicodeBidi(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleTextReset()->mUnicodeBidi,
                                    nsCSSProps::kUnicodeBidiKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetCursor(nsIDOMCSSValue** aValue)
 {
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_TRUE);
   NS_ENSURE_TRUE(valueList, NS_ERROR_OUT_OF_MEMORY);
 
@@ -2669,128 +2738,138 @@ nsComputedDOMStyle::GetCursor(nsIDOMCSSV
   val->SetIdent(nsCSSProps::ValueToKeywordEnum(ui->mCursor,
                                                nsCSSProps::kCursorKTable));
   if (!valueList->AppendCSSValue(val)) {
     delete valueList;
     delete val;
     return NS_ERROR_OUT_OF_MEMORY;
   }
 
-  return CallQueryInterface(valueList, aValue);
+  NS_ADDREF(*aValue = valueList);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetAppearance(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(nsCSSProps::ValueToKeywordEnum(GetStyleDisplay()->mAppearance,
                                                nsCSSProps::kAppearanceKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 
 nsresult
 nsComputedDOMStyle::GetBoxAlign(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(nsCSSProps::ValueToKeywordEnum(GetStyleXUL()->mBoxAlign,
                                                nsCSSProps::kBoxAlignKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBoxDirection(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleXUL()->mBoxDirection,
                                    nsCSSProps::kBoxDirectionKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBoxFlex(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetNumber(GetStyleXUL()->mBoxFlex);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBoxOrdinalGroup(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetNumber(GetStyleXUL()->mBoxOrdinal);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBoxOrient(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleXUL()->mBoxOrient,
                                    nsCSSProps::kBoxOrientKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBoxPack(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(nsCSSProps::ValueToKeywordEnum(GetStyleXUL()->mBoxPack,
                                                nsCSSProps::kBoxPackKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBoxSizing(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStylePosition()->mBoxSizing,
                                    nsCSSProps::kBoxSizingKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBorderImage(nsIDOMCSSValue** aValue)
 {
   const nsStyleBorder* border = GetStyleBorder();
 
   // none
   if (!border->GetBorderImage()) {
     nsROCSSPrimitiveValue *valNone = GetROCSSPrimitiveValue();
     NS_ENSURE_TRUE(valNone, NS_ERROR_OUT_OF_MEMORY);
     valNone->SetIdent(eCSSKeyword_none);
-    return CallQueryInterface(valNone, aValue);
+    NS_ADDREF(*aValue = valNone);
+    return NS_OK;
   }
 
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_FALSE);
   NS_ENSURE_TRUE(valueList, NS_ERROR_OUT_OF_MEMORY);
 
   // uri
   nsROCSSPrimitiveValue *valURI = GetROCSSPrimitiveValue();
   if (!valURI || !valueList->AppendCSSValue(valURI)) {
@@ -2852,130 +2931,140 @@ nsComputedDOMStyle::GetBorderImage(nsIDO
     delete keyword2;
     delete valueList;
     return NS_ERROR_OUT_OF_MEMORY;
   }
   keyword2->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleBorder()->mBorderImageVFill,
                                    nsCSSProps::kBorderImageKTable));
 
-  return CallQueryInterface(valueList, aValue);
+  NS_ADDREF(*aValue = valueList);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetFloatEdge(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleBorder()->mFloatEdge,
                                    nsCSSProps::kFloatEdgeKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetForceBrokenImageIcon(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetNumber(GetStyleUIReset()->mForceBrokenImageIcon);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetIMEMode(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleUIReset()->mIMEMode,
                                    nsCSSProps::kIMEModeKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetUserFocus(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleUserInterface()->mUserFocus,
                                    nsCSSProps::kUserFocusKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetUserInput(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleUserInterface()->mUserInput,
                                    nsCSSProps::kUserInputKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetUserModify(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleUserInterface()->mUserModify,
                                    nsCSSProps::kUserModifyKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetUserSelect(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleUIReset()->mUserSelect,
                                    nsCSSProps::kUserSelectKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetDisplay(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(nsCSSProps::ValueToKeywordEnum(GetStyleDisplay()->mDisplay,
                                                nsCSSProps::kDisplayKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetPosition(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(nsCSSProps::ValueToKeywordEnum(GetStyleDisplay()->mPosition,
                                                nsCSSProps::kPositionKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetClip(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
@@ -3036,17 +3125,18 @@ nsComputedDOMStyle::GetClip(nsIDOMCSSVal
     delete rightVal;
     delete bottomVal;
     delete leftVal;
     delete val;
 
     return rv;
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetOverflow(nsIDOMCSSValue** aValue)
 {
   const nsStyleDisplay* display = GetStyleDisplay();
 
   if (display->mOverflowX != display->mOverflowY) {
@@ -3057,55 +3147,59 @@ nsComputedDOMStyle::GetOverflow(nsIDOMCS
   }
 
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(nsCSSProps::ValueToKeywordEnum(display->mOverflowX,
                                                nsCSSProps::kOverflowKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetOverflowX(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleDisplay()->mOverflowX,
                                    nsCSSProps::kOverflowSubKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetOverflowY(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleDisplay()->mOverflowY,
                                    nsCSSProps::kOverflowSubKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetResize(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(nsCSSProps::ValueToKeywordEnum(GetStyleDisplay()->mResize,
                                                nsCSSProps::kResizeKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 
 nsresult
 nsComputedDOMStyle::GetPageBreakAfter(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
@@ -3113,34 +3207,36 @@ nsComputedDOMStyle::GetPageBreakAfter(ns
   const nsStyleDisplay *display = GetStyleDisplay();
 
   if (display->mBreakAfter) {
     val->SetIdent(eCSSKeyword_always);
   } else {
     val->SetIdent(eCSSKeyword_auto);
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetPageBreakBefore(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleDisplay *display = GetStyleDisplay();
 
   if (display->mBreakBefore) {
     val->SetIdent(eCSSKeyword_always);
   } else {
     val->SetIdent(eCSSKeyword_auto);
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetHeight(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
@@ -3171,17 +3267,18 @@ nsComputedDOMStyle::GetHeight(nsIDOMCSSV
       StyleCoordToNSCoord(positionData->mMaxHeight,
                           &nsComputedDOMStyle::GetCBContentHeight,
                           nscoord_MAX);
 
     SetValueToCoord(val, positionData->mHeight, nsnull, nsnull,
                     minHeight, maxHeight);
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetWidth(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
@@ -3212,67 +3309,72 @@ nsComputedDOMStyle::GetWidth(nsIDOMCSSVa
       StyleCoordToNSCoord(positionData->mMaxWidth,
                           &nsComputedDOMStyle::GetCBContentWidth,
                           nscoord_MAX);
 
     SetValueToCoord(val, positionData->mWidth, nsnull,
                     nsCSSProps::kWidthKTable, minWidth, maxWidth);
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetMaxHeight(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   SetValueToCoord(val, GetStylePosition()->mMaxHeight,
                   &nsComputedDOMStyle::GetCBContentHeight);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetMaxWidth(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   SetValueToCoord(val, GetStylePosition()->mMaxWidth,
                   &nsComputedDOMStyle::GetCBContentWidth,
                   nsCSSProps::kWidthKTable);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetMinHeight(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   SetValueToCoord(val, GetStylePosition()->mMinHeight,
                   &nsComputedDOMStyle::GetCBContentHeight);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetMinWidth(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   SetValueToCoord(val, GetStylePosition()->mMinWidth,
                   &nsComputedDOMStyle::GetCBContentWidth,
                   nsCSSProps::kWidthKTable);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetLeft(nsIDOMCSSValue** aValue)
 {
   return GetOffsetWidthFor(NS_SIDE_LEFT, aValue);
 }
 
@@ -3388,17 +3490,18 @@ nsComputedDOMStyle::GetAbsoluteOffset(mo
         break;
     }
     val->SetAppUnits(offset);
   } else {
     // XXX no frame.  This property makes no sense
     val->SetAppUnits(0);
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 PR_STATIC_ASSERT((NS_SIDE_TOP == 0) && (NS_SIDE_RIGHT == 1) && (NS_SIDE_BOTTOM == 2) && (NS_SIDE_LEFT == 3));
 #define NS_OPPOSITE_SIDE(s_) mozilla::css::Side(((s_) + 2) & 3)
 
 nsresult
 nsComputedDOMStyle::GetRelativeOffset(mozilla::css::Side aSide, nsIDOMCSSValue** aValue)
 {
@@ -3422,46 +3525,49 @@ nsComputedDOMStyle::GetRelativeOffset(mo
   if (aSide == NS_SIDE_LEFT || aSide == NS_SIDE_RIGHT) {
     baseGetter = &nsComputedDOMStyle::GetCBContentWidth;
   } else {
     baseGetter = &nsComputedDOMStyle::GetCBContentHeight;
   }
 
   val->SetAppUnits(sign * StyleCoordToNSCoord(coord, baseGetter, 0));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetStaticOffset(mozilla::css::Side aSide, nsIDOMCSSValue** aValue)
 
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   SetValueToCoord(val, GetStylePosition()->mOffset.Get(aSide));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetPaddingWidthFor(mozilla::css::Side aSide, nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   if (!mInnerFrame) {
     SetValueToCoord(val, GetStylePadding()->mPadding.Get(aSide));
   } else {
     AssertFlushedPendingReflows();
 
     val->SetAppUnits(mInnerFrame->GetUsedPadding().side(aSide));
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 PRBool
 nsComputedDOMStyle::GetLineHeightCoord(nscoord& aCoord)
 {
   AssertFlushedPendingReflows();
 
   nscoord blockHeight = NS_AUTOHEIGHT;
@@ -3520,26 +3626,28 @@ nsComputedDOMStyle::GetBorderColorsFor(m
           delete valueList;
           delete primitive;
 
           return NS_ERROR_OUT_OF_MEMORY;
         }
         borderColors = borderColors->mNext;
       } while (borderColors);
 
-      return CallQueryInterface(valueList, aValue);
+      NS_ADDREF(*aValue = valueList);
+      return NS_OK;
     }
   }
 
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(eCSSKeyword_none);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBorderWidthFor(mozilla::css::Side aSide, nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
@@ -3547,17 +3655,18 @@ nsComputedDOMStyle::GetBorderWidthFor(mo
   if (mInnerFrame) {
     AssertFlushedPendingReflows();
     width = mInnerFrame->GetUsedBorder().side(aSide);
   } else {
     width = GetStyleBorder()->GetActualBorderWidth(aSide);
   }
   val->SetAppUnits(width);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBorderColorFor(mozilla::css::Side aSide, nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
@@ -3569,47 +3678,50 @@ nsComputedDOMStyle::GetBorderColorFor(mo
   }
 
   nsresult rv = SetToRGBAColor(val, color);
   if (NS_FAILED(rv)) {
     delete val;
     return rv;
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetMarginWidthFor(mozilla::css::Side aSide, nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   if (!mInnerFrame) {
     SetValueToCoord(val, GetStyleMargin()->mMargin.Get(aSide));
   } else {
     AssertFlushedPendingReflows();
 
     val->SetAppUnits(mInnerFrame->GetUsedMargin().side(aSide));
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetBorderStyleFor(mozilla::css::Side aSide, nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleBorder()->GetBorderStyle(aSide),
                                    nsCSSProps::kBorderStyleKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 void
 nsComputedDOMStyle::SetValueToCoord(nsROCSSPrimitiveValue* aValue,
                                     const nsStyleCoord& aCoord,
                                     PercentageBaseGetter aPercentageBaseGetter,
                                     const PRInt32 aTable[],
                                     nscoord aMinAppUnits,
@@ -3831,21 +3943,23 @@ nsComputedDOMStyle::GetSVGPaintFor(PRBoo
 
     val->SetURI(paint->mPaint.mPaintServer);
     nsresult rv = SetToRGBAColor(fallback, paint->mFallbackColor);
     if (NS_FAILED(rv)) {
       delete valueList;
       return rv;
     }
 
-    return CallQueryInterface(valueList, aValue);
+    NS_ADDREF(*aValue = valueList);
+    return NS_OK;
   }
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetFill(nsIDOMCSSValue** aValue)
 {
   return GetSVGPaintFor(PR_TRUE, aValue);
 }
 
@@ -3863,389 +3977,418 @@ nsComputedDOMStyle::GetMarkerEnd(nsIDOMC
 
   const nsStyleSVG* svg = GetStyleSVG();
 
   if (svg->mMarkerEnd)
     val->SetURI(svg->mMarkerEnd);
   else
     val->SetIdent(eCSSKeyword_none);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetMarkerMid(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVG* svg = GetStyleSVG();
 
   if (svg->mMarkerMid)
     val->SetURI(svg->mMarkerMid);
   else
     val->SetIdent(eCSSKeyword_none);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetMarkerStart(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVG* svg = GetStyleSVG();
 
   if (svg->mMarkerStart)
     val->SetURI(svg->mMarkerStart);
   else
     val->SetIdent(eCSSKeyword_none);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetStrokeDasharray(nsIDOMCSSValue** aValue)
 {
   const nsStyleSVG* svg = GetStyleSVG();
 
   if (!svg->mStrokeDasharrayLength || !svg->mStrokeDasharray) {
     nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
     NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
     val->SetIdent(eCSSKeyword_none);
-    return CallQueryInterface(val, aValue);
+    NS_ADDREF(*aValue = val);
+    return NS_OK;
   }
 
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_TRUE);
   NS_ENSURE_TRUE(valueList, NS_ERROR_OUT_OF_MEMORY);
 
   for (PRUint32 i = 0; i < svg->mStrokeDasharrayLength; i++) {
     nsROCSSPrimitiveValue* dash = GetROCSSPrimitiveValue();
     if (!dash || !valueList->AppendCSSValue(dash)) {
       delete valueList;
       delete dash;
       return NS_ERROR_OUT_OF_MEMORY;
     }
 
     SetValueToCoord(dash, svg->mStrokeDasharray[i]);
   }
 
-  return CallQueryInterface(valueList, aValue);
+  NS_ADDREF(*aValue = valueList);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetStrokeDashoffset(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   SetValueToCoord(val, GetStyleSVG()->mStrokeDashoffset);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetStrokeWidth(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   SetValueToCoord(val, GetStyleSVG()->mStrokeWidth);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetFillOpacity(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetNumber(GetStyleSVG()->mFillOpacity);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetFloodOpacity(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetNumber(GetStyleSVGReset()->mFloodOpacity);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetStopOpacity(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetNumber(GetStyleSVGReset()->mStopOpacity);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetStrokeMiterlimit(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetNumber(GetStyleSVG()->mStrokeMiterlimit);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetStrokeOpacity(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetNumber(GetStyleSVG()->mStrokeOpacity);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetClipRule(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(nsCSSProps::ValueToKeywordEnum(
                   GetStyleSVG()->mClipRule, nsCSSProps::kFillRuleKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetFillRule(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(nsCSSProps::ValueToKeywordEnum(
                   GetStyleSVG()->mFillRule, nsCSSProps::kFillRuleKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetStrokeLinecap(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleSVG()->mStrokeLinecap,
                                    nsCSSProps::kStrokeLinecapKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetStrokeLinejoin(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleSVG()->mStrokeLinejoin,
                                    nsCSSProps::kStrokeLinejoinKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetTextAnchor(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleSVG()->mTextAnchor,
                                    nsCSSProps::kTextAnchorKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetColorInterpolation(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleSVG()->mColorInterpolation,
                                    nsCSSProps::kColorInterpolationKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetColorInterpolationFilters(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleSVG()->mColorInterpolationFilters,
                                    nsCSSProps::kColorInterpolationKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetDominantBaseline(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleSVGReset()->mDominantBaseline,
                                    nsCSSProps::kDominantBaselineKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetImageRendering(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleSVG()->mImageRendering,
                                    nsCSSProps::kImageRenderingKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetShapeRendering(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleSVG()->mShapeRendering,
                                    nsCSSProps::kShapeRenderingKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetTextRendering(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   val->SetIdent(
     nsCSSProps::ValueToKeywordEnum(GetStyleSVG()->mTextRendering,
                                    nsCSSProps::kTextRenderingKTable));
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetFloodColor(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   nsresult rv = SetToRGBAColor(val, GetStyleSVGReset()->mFloodColor);
   if (NS_FAILED(rv)) {
     delete val;
     return rv;
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetLightingColor(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   nsresult rv = SetToRGBAColor(val, GetStyleSVGReset()->mLightingColor);
   if (NS_FAILED(rv)) {
     delete val;
     return rv;
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetStopColor(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   nsresult rv = SetToRGBAColor(val, GetStyleSVGReset()->mStopColor);
   if (NS_FAILED(rv)) {
     delete val;
     return rv;
   }
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetClipPath(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVGReset* svg = GetStyleSVGReset();
 
   if (svg->mClipPath)
     val->SetURI(svg->mClipPath);
   else
     val->SetIdent(eCSSKeyword_none);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetFilter(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVGReset* svg = GetStyleSVGReset();
 
   if (svg->mFilter)
     val->SetURI(svg->mFilter);
   else
     val->SetIdent(eCSSKeyword_none);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetMask(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVGReset* svg = GetStyleSVGReset();
 
   if (svg->mMask)
     val->SetURI(svg->mMask);
   else
     val->SetIdent(eCSSKeyword_none);
 
-  return CallQueryInterface(val, aValue);
+  NS_ADDREF(*aValue = val);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetTransitionDelay(nsIDOMCSSValue** aValue)
 {
   const nsStyleDisplay* display = GetStyleDisplay();
 
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_TRUE);
@@ -4260,17 +4403,18 @@ nsComputedDOMStyle::GetTransitionDelay(n
     if (!delay || !valueList->AppendCSSValue(delay)) {
       delete valueList;
       delete delay;
       return NS_ERROR_OUT_OF_MEMORY;
     }
     delay->SetTime((float)transition->GetDelay() / (float)PR_MSEC_PER_SEC);
   } while (++i < display->mTransitionDelayCount);
 
-  return CallQueryInterface(valueList, aValue);
+  NS_ADDREF(*aValue = valueList);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetTransitionDuration(nsIDOMCSSValue** aValue)
 {
   const nsStyleDisplay* display = GetStyleDisplay();
 
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_TRUE);
@@ -4286,17 +4430,18 @@ nsComputedDOMStyle::GetTransitionDuratio
       delete valueList;
       delete duration;
       return NS_ERROR_OUT_OF_MEMORY;
     }
 
     duration->SetTime((float)transition->GetDuration() / (float)PR_MSEC_PER_SEC);
   } while (++i < display->mTransitionDurationCount);
 
-  return CallQueryInterface(valueList, aValue);
+  NS_ADDREF(*aValue = valueList);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetTransitionProperty(nsIDOMCSSValue** aValue)
 {
   const nsStyleDisplay* display = GetStyleDisplay();
 
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_TRUE);
@@ -4324,17 +4469,18 @@ nsComputedDOMStyle::GetTransitionPropert
       nsStyleUtil::AppendEscapedCSSIdent(
         nsDependentAtomString(transition->GetUnknownProperty()), escaped);
       property->SetString(escaped); // really want SetIdent
     }
     else
       property->SetString(nsCSSProps::GetStringValue(cssprop));
   } while (++i < display->mTransitionPropertyCount);
 
-  return CallQueryInterface(valueList, aValue);
+  NS_ADDREF(*aValue = valueList);
+  return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetTransitionTimingFunction(nsIDOMCSSValue** aValue)
 {
   const nsStyleDisplay* display = GetStyleDisplay();
 
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_TRUE);
@@ -4355,17 +4501,18 @@ nsComputedDOMStyle::GetTransitionTimingF
     // set the value from the cubic-bezier control points
     // (We could try to regenerate the keywords if we want.)
     const nsTimingFunction& tf = transition->GetTimingFunction();
     timingFunction->SetString(
       nsPrintfCString(64, "cubic-bezier(%f, %f, %f, %f)",
                           tf.mX1, tf.mY1, tf.mX2, tf.mY2));
   } while (++i < display->mTransitionTimingFunctionCount);
 
-  return CallQueryInterface(valueList, aValue);
+  NS_ADDREF(*aValue = valueList);
+  return NS_OK;
 }
 
 #define COMPUTED_STYLE_MAP_ENTRY(_prop, _method)              \
   { eCSSProperty_##_prop, &nsComputedDOMStyle::Get##_method, PR_FALSE }
 #define COMPUTED_STYLE_MAP_ENTRY_LAYOUT(_prop, _method)       \
   { eCSSProperty_##_prop, &nsComputedDOMStyle::Get##_method, PR_TRUE }
 
 const nsComputedDOMStyle::ComputedStyleMapEntry*
