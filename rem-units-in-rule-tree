From: L. David Baron <dbaron@dbaron.org>

Bug 804970, patch 5: Don't force rem units out of the rule tree.

diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -300,31 +300,17 @@ static nscoord CalcLengthWith(const nsCS
       nsSize viewportSize = aPresContext->GetVisibleArea().Size();
       return ScaleCoord(aValue, 0.01f * min(viewportSize.width, viewportSize.height));
     }
     case eCSSUnit_ViewportMax: {
       aPresContext->SetUsesViewportUnits(true);
       nsSize viewportSize = aPresContext->GetVisibleArea().Size();
       return ScaleCoord(aValue, 0.01f * max(viewportSize.width, viewportSize.height));
     }
-    default:
-      // Fall through to the code for units that can't be stored in the
-      // rule tree because they depend on font data.
-  }
-  // Common code for all units other than pixel-based units and fixed-length
-  // units:
-  aCanStoreInRuleTree = false;
-  const nsStyleFont *styleFont =
-    aStyleFont ? aStyleFont : aStyleContext->GetStyleFont();
-  if (aFontSize == -1) {
-    // XXX Should this be styleFont->mSize instead to avoid taking minfontsize
-    // prefs into account?
-    aFontSize = styleFont->mFont.size;
-  }
-  switch (aValue.GetUnit()) {
+    // WRITE ME: EXPLAIN HERE WHY THIS IS OK.
     case eCSSUnit_RootEM: {
       aPresContext->SetUsesRootEMUnits(true);
       nscoord rootFontSize;
 
       if (aUseProvidedRootEmSize) {
         // We should use the provided aFontSize as the reference length to
         // scale. This only happens when we are calculating font-size or
         // an equivalent (scriptminsize or CalcLengthWithInitialFont) on
@@ -352,16 +338,31 @@ static nscoord CalcLengthWith(const nsCS
           }
         }
 
         rootFontSize = rootStyleFont->mFont.size;
       }
 
       return ScaleCoord(aValue, float(rootFontSize));
     }
+    default:
+      // Fall through to the code for units that can't be stored in the
+      // rule tree because they depend on font data.
+  }
+  // Common code for all units other than pixel-based units and fixed-length
+  // units:
+  aCanStoreInRuleTree = false;
+  const nsStyleFont *styleFont =
+    aStyleFont ? aStyleFont : aStyleContext->GetStyleFont();
+  if (aFontSize == -1) {
+    // XXX Should this be styleFont->mSize instead to avoid taking minfontsize
+    // prefs into account?
+    aFontSize = styleFont->mFont.size;
+  }
+  switch (aValue.GetUnit()) {
     case eCSSUnit_EM: {
       return ScaleCoord(aValue, float(aFontSize));
       // XXX scale against font metrics height instead?
     }
     case eCSSUnit_XHeight: {
       nsRefPtr<nsFontMetrics> fm =
         GetMetricsFor(aPresContext, aStyleContext, styleFont,
                       aFontSize, aUseUserFontSet);
