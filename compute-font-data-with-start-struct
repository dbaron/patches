Make SetGenericFont not use aStartStruct-based computation since it's fundamentally incompatible with it.  b=216456

diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -24,6 +24,7 @@
  *   Daniel Glazman <glazman@netscape.com>
  *   Roger B. Sidje <rbs@maths.uq.edu.au>
  *   Mats Palmgren <mats.palmgren@bredband.net>
+ *   L. David Baron <dbaron@dbaron.org>
  *
  * Alternatively, the contents of this file may be used under the terms of
  * either of the GNU General Public License Version 2 or later (the "GPL"),
@@ -2173,12 +2174,12 @@ nsRuleNode::SetFont(nsPresContext* aPres
 /* static */ void
 nsRuleNode::SetGenericFont(nsPresContext* aPresContext,
                            nsStyleContext* aContext,
-                           const nsRuleDataFont& aFontData,
                            PRUint8 aGenericFontID, nscoord aMinFontSize,
                            nsStyleFont* aFont)
 {
   // walk up the contexts until a context with the desired generic font
   nsAutoVoidArray contextPath;
+  contextPath.AppendElement(aContext);
   nsStyleContext* higherContext = aContext->GetParent();
   while (higherContext) {
     if (higherContext->GetStyleFont()->mFlags & aGenericFontID) {
@@ -2218,6 +2219,9 @@ nsRuleNode::SetGenericFont(nsPresContext
     ruleData.mFontData = &fontData;
 
     // Trimmed down version of ::WalkRuleTree() to re-apply the style rules
+    // Note that we *do* need to do this for our own data, since what is
+    // in |fontData| in ComputeFontData is only for the rules below
+    // aStartStruct.
     for (nsRuleNode* ruleNode = context->GetRuleNode(); ruleNode;
          ruleNode = ruleNode->GetParent()) {
       if (ruleNode->mNoneBits & fontBit)
@@ -2233,7 +2237,8 @@ nsRuleNode::SetGenericFont(nsPresContext
     }
 
     // Compute the delta from the information that the rules specified
-    fontData.mFamily.Reset(); // avoid unnecessary operations in SetFont()
+    if (i != 0)
+      fontData.mFamily.Reset(); // avoid unnecessary operations in SetFont()
 
     nsRuleNode::SetFont(aPresContext, context, aMinFontSize,
                         PR_TRUE, fontData, *defaultFont,
@@ -2248,13 +2253,6 @@ nsRuleNode::SetGenericFont(nsPresContext
     parentFont.mFont = aFont->mFont;
     parentFont.mSize = aFont->mSize;
   }
-
-  // Finish off by applying our own rules. In this case, aFontData
-  // already has the current cascading information that we want. We
-  // can just compute the delta from the parent.
-  nsRuleNode::SetFont(aPresContext, aContext, aMinFontSize,
-                      PR_TRUE, aFontData, *defaultFont,
-                      &parentFont, aFont, dummy);
 }
 
 static PRBool ExtractGeneric(const nsString& aFamily, PRBool aGeneric,
@@ -2346,7 +2344,7 @@ nsRuleNode::ComputeFontData(nsStyleStruc
   else {
     // re-calculate the font as a generic font
     inherited = PR_TRUE;
-    nsRuleNode::SetGenericFont(mPresContext, aContext, fontData, generic,
+    nsRuleNode::SetGenericFont(mPresContext, aContext, generic,
                                minimumFontSize, font);
   }
   // Set our generic font's bit to inform our descendants
diff --git a/layout/style/nsRuleNode.h b/layout/style/nsRuleNode.h
--- a/layout/style/nsRuleNode.h
+++ b/layout/style/nsRuleNode.h
@@ -611,7 +611,6 @@ protected:
 
   static NS_HIDDEN_(void) SetGenericFont(nsPresContext* aPresContext,
                                          nsStyleContext* aContext,
-                                         const nsRuleDataFont& aFontData,
                                          PRUint8 aGenericFontID,
                                          nscoord aMinFontSize,
                                          nsStyleFont* aFont);
