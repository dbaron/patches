Don't stomp on aFont so that we don't break ComputeFontData when called with an aStartStruct.  b=216456

diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -24,6 +24,7 @@
  *   Daniel Glazman <glazman@netscape.com>
  *   Roger B. Sidje <rbs@maths.uq.edu.au>
  *   Mats Palmgren <mats.palmgren@bredband.net>
+ *   L. David Baron <dbaron@dbaron.org>
  *
  * Alternatively, the contents of this file may be used under the terms of
  * either of the GNU General Public License Version 2 or later (the "GPL"),
@@ -2179,6 +2180,7 @@ nsRuleNode::SetGenericFont(nsPresContext
 {
   // walk up the contexts until a context with the desired generic font
   nsAutoVoidArray contextPath;
+  contextPath.AppendElement(aContext);
   nsStyleContext* higherContext = aContext->GetParent();
   while (higherContext) {
     if (higherContext->GetStyleFont()->mFlags & aGenericFontID) {
@@ -2233,8 +2235,6 @@ nsRuleNode::SetGenericFont(nsPresContext
     }
 
     // Compute the delta from the information that the rules specified
-    fontData.mFamily.Reset(); // avoid unnecessary operations in SetFont()
-
     nsRuleNode::SetFont(aPresContext, context, aMinFontSize,
                         PR_TRUE, fontData, *defaultFont,
                         &parentFont, aFont, dummy);
@@ -2248,13 +2248,6 @@ nsRuleNode::SetGenericFont(nsPresContext
     parentFont.mFont = aFont->mFont;
     parentFont.mSize = aFont->mSize;
   }
-
-  // Finish off by applying our own rules. In this case, aFontData
-  // already has the current cascading information that we want. We
-  // can just compute the delta from the parent.
-  nsRuleNode::SetFont(aPresContext, aContext, aMinFontSize,
-                      PR_TRUE, aFontData, *defaultFont,
-                      &parentFont, aFont, dummy);
 }
 
 static PRBool ExtractGeneric(const nsString& aFamily, PRBool aGeneric,
