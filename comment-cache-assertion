From: L. David Baron <dbaron@dbaron.org>

Bug 1055369 / 1092857 - NOT FOR CHECKIN - Comment out cache assertion until bug is fixed.

diff --git a/netwerk/cache2/CacheFileIOManager.cpp b/netwerk/cache2/CacheFileIOManager.cpp
--- a/netwerk/cache2/CacheFileIOManager.cpp
+++ b/netwerk/cache2/CacheFileIOManager.cpp
@@ -2625,17 +2625,17 @@ CacheFileIOManager::OverLimitEvictionInt
 
 #ifdef DEBUG
       // Dooming should never fail due to already doomed handle, but bug 1028415
       // shows that this unexpected state can happen. Assert in debug build so
       // we can find the cause if we ever find a way to reproduce it with NSPR
       // logging enabled.
       nsRefPtr<CacheFileHandle> handle;
       mHandles.GetHandle(&hash, true, getter_AddRefs(handle));
-      MOZ_ASSERT(!handle || !handle->IsDoomed());
+      NS_ASSERTION(!handle || !handle->IsDoomed(), "doomed handle?");
 #endif
 
       // Make sure index won't return the same entry again
       CacheIndex::RemoveEntry(&hash);
       consecutiveFailures = 0;
     } else {
       // This shouldn't normally happen, but the eviction must not fail
       // completely if we ever encounter this problem.
diff --git a/netwerk/protocol/http/nsHttpChannel.cpp b/netwerk/protocol/http/nsHttpChannel.cpp
--- a/netwerk/protocol/http/nsHttpChannel.cpp
+++ b/netwerk/protocol/http/nsHttpChannel.cpp
@@ -2412,17 +2412,17 @@ nsHttpChannel::ProcessNotModified()
 
     if (!mDidReval) {
         LOG(("Server returned a 304 response even though we did not send a "
              "conditional request"));
         return NS_ERROR_FAILURE;
     }
 
     MOZ_ASSERT(mCachedResponseHead);
-    MOZ_ASSERT(mCacheEntry);
+    //MOZ_ASSERT(mCacheEntry);
     NS_ENSURE_TRUE(mCachedResponseHead && mCacheEntry, NS_ERROR_UNEXPECTED);
 
     // If the 304 response contains a Last-Modified different than the
     // one in our cache that is pretty suspicious and is, in at least the
     // case of bug 716840, a sign of the server having previously corrupted
     // our cache with a bad response. Take the minor step here of just dooming
     // that cache entry so there is a fighting chance of getting things on the
     // right track as well as disabling pipelining for that host.
