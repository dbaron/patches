From: L. David Baron <dbaron@dbaron.org>

Add mechanism for an individual mochitest to say it needs a longer timeout.  (Bug 527614)

diff --git a/layout/style/test/test_value_cloning.html b/layout/style/test/test_value_cloning.html
--- a/layout/style/test/test_value_cloning.html
+++ b/layout/style/test/test_value_cloning.html
@@ -17,16 +17,17 @@ https://bugzilla.mozilla.org/show_bug.cg
 
 /** Test for cloning of CSS property values (including 'inherit' and '-moz-initial') **/
 
 var test_queue = [];
 var iframe = document.getElementById("iframe");
 var current_item;
 
 SimpleTest.waitForExplicitFinish();
+SimpleTest.requestLongerTimeout(3);
 
 for (var prop in gCSSProperties) {
   var info = gCSSProperties[prop];
 
   test_queue.push({ prop: prop, value: "inherit",
                     inherited_value: info.initial_values[0] });
   test_queue.push({ prop: prop, value: "inherit",
                     inherited_value: info.other_values[0] });
diff --git a/testing/mochitest/tests/SimpleTest/SimpleTest.js b/testing/mochitest/tests/SimpleTest/SimpleTest.js
--- a/testing/mochitest/tests/SimpleTest/SimpleTest.js
+++ b/testing/mochitest/tests/SimpleTest/SimpleTest.js
@@ -212,16 +212,22 @@ SimpleTest.showReport = function() {
  *
  * When SimpleTest.waitForExplicitFinish is called,
  * explicit SimpleTest.finish() is required.
 **/
 SimpleTest.waitForExplicitFinish = function () {
     SimpleTest._stopOnLoad = false;
 };
 
+SimpleTest.requestLongerTimeout = function (factor) {
+    if (parentRunner) {
+        parentRunner.requestLongerTimeout(factor);
+    }
+}
+
 SimpleTest.waitForFocus_started = false;
 SimpleTest.waitForFocus_loaded = false;
 SimpleTest.waitForFocus_focused = false;
 
 /**
  * If the page is not yet loaded, waits for the load event. If the page is
  * not yet focused, focuses and waits for the window to be focused. Calls
  * the callback when completed.
diff --git a/testing/mochitest/tests/SimpleTest/TestRunner.js b/testing/mochitest/tests/SimpleTest/TestRunner.js
--- a/testing/mochitest/tests/SimpleTest/TestRunner.js
+++ b/testing/mochitest/tests/SimpleTest/TestRunner.js
@@ -15,21 +15,22 @@ TestRunner._urls = [];
 TestRunner.timeout = 5 * 60 * 1000; // 5 minutes.
 TestRunner.maxTimeouts = 4; // halt testing after too many timeouts
 
 /**
  * Make sure the tests don't hang indefinitely.
 **/
 TestRunner._numTimeouts = 0;
 TestRunner._currentTestStartTime = new Date().valueOf();
+TestRunner._timeoutFactor = 1;
 
 TestRunner._checkForHangs = function() {
   if (TestRunner._currentTest < TestRunner._urls.length) {
     var runtime = new Date().valueOf() - TestRunner._currentTestStartTime;
-    if (runtime >= TestRunner.timeout) {
+    if (runtime >= TestRunner.timeout * TestRunner._timeoutFactor) {
       var frameWindow = $('testframe').contentWindow.wrappedJSObject ||
                           $('testframe').contentWindow;
       frameWindow.SimpleTest.ok(false, "Test timed out.");
 
       // If we have too many timeouts, give up. We don't want to wait hours
       // for results if some bug causes lots of tests to time out.
       if (++TestRunner._numTimeouts >= TestRunner.maxTimeouts) {
         TestRunner._haltTests = true;
@@ -45,16 +46,20 @@ TestRunner._checkForHangs = function() {
       if (TestRunner._haltTests)
         return;
     }
 
     TestRunner.deferred = callLater(30, TestRunner._checkForHangs);
   }
 }
 
+TestRunner.requestLongerTimeout = function(factor) {
+    TestRunner._timeoutFactor = factor;
+}
+
 /**
  * This function is called after generating the summary.
 **/
 TestRunner.onComplete = null;
 
 /**
  * If logEnabled is true, this is the logger that will be used.
 **/
@@ -129,16 +134,17 @@ TestRunner.runNextTest = function() {
         !TestRunner._haltTests)
     {
         var url = TestRunner._urls[TestRunner._currentTest];
         TestRunner.currentTestURL = url;
 
         $("current-test-path").innerHTML = url;
 
         TestRunner._currentTestStartTime = new Date().valueOf();
+        TestRunner._timeoutFactor = 1;
 
         if (TestRunner.logEnabled)
             TestRunner.logger.log("Running " + url + "...");
 
         TestRunner._makeIframe(url, 0);
     } else {
         $("current-test").innerHTML = "<b>Finished</b>";
         TestRunner._makeIframe("about:blank", 0);
