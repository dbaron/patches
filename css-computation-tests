Start adding tests for computation.

diff --git a/layout/style/test/Makefile.in b/layout/style/test/Makefile.in
--- a/layout/style/test/Makefile.in
+++ b/layout/style/test/Makefile.in
@@ -72,12 +72,15 @@ _TEST_FILES = 	test_bug302186.html \
 		test_bug372770.html \
 		test_bug373293.html \
 		test_inherit_storage.html \
+		test_inherit_computation.html \
 		test_initial_storage.html \
+		test_initial_computation.html \
 		test_property_database.html \
 		test_property_syntax_errors.html \
 		test_value_storage.html \
 		css_properties.js \
 		property_database.js \
+		unstyled.xml \
 		$(NULL)
 
 
diff --git a/layout/style/test/property_database.js b/layout/style/test/property_database.js
--- a/layout/style/test/property_database.js
+++ b/layout/style/test/property_database.js
@@ -240,7 +240,7 @@ var gCSSProperties = {
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "auto" ],
-		other_values: [ "50%", "15px" ],
+		other_values: [ "15px", "50%" ],
 		invalid_values: [ "20" ]
 	},
 	"-moz-float-edge": {
@@ -261,7 +261,7 @@ var gCSSProperties = {
 	},
 	"-moz-image-region": {
 		domProp: "MozImageRegion",
-		inherited: false,
+		inherited: true,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "auto" ],
 		other_values: [ "rect(3px 20px 15px 4px)", "rect(17px, 21px, 33px, 2px)" ],
@@ -480,7 +480,7 @@ var gCSSProperties = {
 		domProp: "borderBottomWidth",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
-		/* XXX a value differing from initial requires border-style to be set */
+		prerequisites: { "border-bottom-style": "solid" },
 		initial_values: [ "medium", "3px" ],
 		other_values: [ "thin", "thick", "1px", "2em" ],
 		invalid_values: [ "5%" ]
@@ -532,7 +532,7 @@ var gCSSProperties = {
 		domProp: "borderLeftWidth",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
-		/* XXX a value differing from initial requires border-style to be set */
+		prerequisites: { "border-left-style": "solid" },
 		initial_values: [ "medium", "3px" ],
 		other_values: [ "thin", "thick", "1px", "2em" ],
 		invalid_values: [ "5%" ]
@@ -567,7 +567,7 @@ var gCSSProperties = {
 		domProp: "borderRightWidth",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
-		/* XXX a value differing from initial requires border-style to be set */
+		prerequisites: { "border-right-style": "solid" },
 		initial_values: [ "medium", "3px" ],
 		other_values: [ "thin", "thick", "1px", "2em" ],
 		invalid_values: [ "5%" ]
@@ -620,7 +620,7 @@ var gCSSProperties = {
 		domProp: "borderTopWidth",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
-		/* XXX a value differing from initial requires border-style to be set */
+		prerequisites: { "border-top-style": "solid" },
 		initial_values: [ "medium", "3px" ],
 		other_values: [ "thin", "thick", "1px", "2em" ],
 		invalid_values: [ "5%" ]
@@ -630,7 +630,7 @@ var gCSSProperties = {
 		inherited: false,
 		type: CSS_TYPE_TRUE_SHORTHAND,
 		subproperties: [ "border-top-width", "border-right-width", "border-bottom-width", "border-left-width" ],
-		/* XXX a value differing from initial requires border-style to be set */
+		prerequisites: { "border-style": "solid" },
 		initial_values: [ "medium", "3px", "medium medium", "3px medium medium", "medium 3px medium medium" ],
 		other_values: [ "thin", "thick", "1px", "2em", "2px 0 0px 1em" ],
 		invalid_values: [ "5%" ]
@@ -666,7 +666,7 @@ var gCSSProperties = {
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "auto" ],
-		other_values: [ "rect(auto,auto,auto,auto)", "rect(3px, 4px, 4em, 0)", "rect(auto, 3em, 4pt, 2px)", "rect(2px 3px 4px 5px)" ],
+		other_values: [ "rect(0 0 0 0)", "rect(auto,auto,auto,auto)", "rect(3px, 4px, 4em, 0)", "rect(auto, 3em, 4pt, 2px)", "rect(2px 3px 4px 5px)" ],
 		invalid_values: [ "rect(auto, 3em, 2%, 5px)" ]
 	},
 	"color": {
@@ -1077,7 +1077,7 @@ var gCSSProperties = {
 		domProp: "outlineWidth",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
-		/* XXX a value differing from initial requires border-style to be set */
+		prerequisites: { "outline-style": "solid" },
 		initial_values: [ "medium", "3px" ],
 		other_values: [ "thin", "thick", "1px", "2em" ],
 		invalid_values: [ "5%" ]
diff --git a/layout/style/test/test_inherit_computation.html b/layout/style/test/test_inherit_computation.html
new file mode 100644
--- /dev/null
+++ b/layout/style/test/test_inherit_computation.html
@@ -0,0 +1,198 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+-->
+<head>
+  <title>Test for computation of CSS 'inherit'</title>
+  <script type="text/javascript" src="/MochiKit/MochiKit.js"></script>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript" src="property_database.js"></script>
+  <style type="text/css" id="stylesheet"></style>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<p id="display"></p>
+<div id="content" style="display: none">
+
+<div id="testnode"><span id="parent"><span id="child"></span></span></div>
+  
+</div>
+<pre id="test">
+<script class="testbody" type="text/javascript">
+
+/** Test for computation of CSS 'inherit' **/
+
+var gNoComputedStyle = {
+  "-moz-force-broken-image-icon": true,
+  "-moz-margin-end": true,
+  "-moz-margin-start": true,
+  "-moz-padding-end": true,
+  "-moz-padding-start": true,
+  "background-position": true,
+  "content": true,
+  "page-break-after": true,
+  "page-break-before": true,
+  "quotes": true,
+  "clip-path": true,
+  "clip-rule": true,
+  "color-interpolation": true,
+  "color-interpolation-filters": true,
+  "dominant-baseline": true,
+  "fill": true,
+  "fill-opacity": true,
+  "fill-rule": true,
+  "filter": true,
+  "flood-color": true,
+  "flood-opacity": true,
+  "marker": true, // NB: shorthand
+  "marker-end": true,
+  "marker-mid": true,
+  "marker-start": true,
+  "mask": true,
+  "pointer-events": true,
+  "shape-rendering": true,
+  "stop-color": true,
+  "stop-opacity": true,
+  "stroke": true,
+  "stroke-dasharray": true,
+  "stroke-dashoffset": true,
+  "stroke-linecap": true,
+  "stroke-linejoin": true,
+  "stroke-miterlimit": true,
+  "stroke-opacity": true,
+  "stroke-width": true,
+  "text-anchor": true,
+  "text-rendering": true
+};
+
+function xfail_diffcomputed(property) {
+  return property in gNoComputedStyle;
+}
+
+var gBrokenInherit = {
+  // The nsRuleNode code uses the 'inherit' value for -moz-box-orient
+  "-moz-box-flex": true,
+
+  // Not implemented in nsRuleNode
+  "-moz-border-bottom-colors": true,
+  "-moz-border-left-colors": true,
+  "-moz-border-right-colors": true,
+  "-moz-border-top-colors": true,
+
+  // Parses inherit as a counter name
+  "counter-increment": true,
+  "counter-reset": true,
+};
+
+function xfail_inherit(property, matching_initial) {
+  if (property == "-moz-box-flex" && matching_initial) {
+    // It inherits from the wrong property, but that ends up right in
+    // this case.
+    return false;
+  }
+  return property in gBrokenInherit;
+}
+
+var gParent = document.getElementById("parent");
+var gChild = document.getElementById("child");
+var gStyleSheet = document.getElementById("stylesheet").sheet;
+var gChildRule1 = gStyleSheet.cssRules[gStyleSheet.insertRule("#child {}", gStyleSheet.cssRules.length)];
+var gChildRule2 = gStyleSheet.cssRules[gStyleSheet.insertRule("#child {}", gStyleSheet.cssRules.length)];
+
+// Get the computed value for a property.  For shorthands, return the
+// computed values of all the subproperties, delimited by " ; ".
+function get_computed_value(node, property)
+{
+  var info = gCSSProperties[property];
+  var cs = getComputedStyle(node, "");
+  if (!("subproperties" in info)) {
+    return cs.getPropertyValue(property);
+  }
+  var results = [];
+  for (var idx in info.subproperties) {
+    var subprop = info.subproperties[idx];
+    results.push(cs.getPropertyValue(subprop));
+  }
+  return results.join(" ; ");
+}
+
+function test_property(property)
+{
+  var info = gCSSProperties[property];
+  if (info.backend_only)
+    return;
+
+  if ("prerequisites" in info) {
+    var prereqs = info.prerequisites;
+    for (var prereq in prereqs) {
+      gParent.style.setProperty(prereq, prereqs[prereq], "");
+      gChild.style.setProperty(prereq, prereqs[prereq], "");
+    }
+  }
+
+  if (info.inherited) {
+    gParent.style.setProperty(property, info.initial_values[0], "");
+    var initial_computed = get_computed_value(gChild, property);
+    gChildRule1.style.setProperty(property, info.other_values[0], "");
+    var other_computed = get_computed_value(gChild, property);
+    (xfail_diffcomputed(property) ? todo_isnot : isnot)(
+          other_computed, initial_computed,
+          "should be testing with values that compute to different things " +
+          "for '" + property + "'");
+    gChildRule2.style.setProperty(property, "inherit", "");
+    var inherit_initial_computed = get_computed_value(gChild, property);
+    (xfail_inherit(property, true) ? todo_is : is)(
+       inherit_initial_computed, initial_computed,
+       "inherit should cause inheritance of initial value for '" +
+       property + "'");
+    gParent.style.setProperty(property, info.other_values[0], "");
+    var inherit_other_computed = get_computed_value(gChild, property);
+    (xfail_inherit(property, false) ? todo_is : is)(
+       inherit_other_computed, other_computed,
+       "inherit should cause inheritance of other value for '" +
+       property + "'");
+    gParent.style.removeProperty(property);
+    gChildRule1.style.removeProperty(property);
+    gChildRule2.style.removeProperty(property);
+  } else {
+    gParent.style.setProperty(property, info.other_values[0], "");
+    var initial_computed = get_computed_value(gChild, property);
+    var other_computed = get_computed_value(gParent, property);
+    (xfail_diffcomputed(property) ? todo_isnot : isnot)(
+          other_computed, initial_computed,
+          "should be testing with values that compute to different things " +
+          "for '" + property + "'");
+    gChildRule2.style.setProperty(property, "inherit", "");
+    var inherit_other_computed = get_computed_value(gChild, property);
+    (xfail_inherit(property, false) ? todo_is : is)(
+       inherit_other_computed, other_computed,
+       "inherit should cause inheritance of other value for '" +
+       property + "'");
+    gParent.style.removeProperty(property);
+    gChildRule1.style.setProperty(property, info.other_values[0], "");
+    var inherit_initial_computed = get_computed_value(gChild, property);
+    (xfail_inherit(property, true) ? todo_is : is)(
+       inherit_initial_computed, initial_computed,
+       "inherit should cause inheritance of initial value for '" +
+       property + "'");
+    gParent.style.removeProperty(property);
+    gChildRule1.style.removeProperty(property);
+    gChildRule2.style.removeProperty(property);
+  }
+
+  if ("prerequisites" in info) {
+    var prereqs = info.prerequisites;
+    for (var prereq in prereqs) {
+      gParent.style.removeProperty(prereq);
+      gChild.style.removeProperty(prereq);
+    }
+  }
+}
+
+for (var prop in gCSSProperties)
+  test_property(prop);
+
+</script>
+</pre>
+</body>
+</html>
diff --git a/layout/style/test/test_initial_computation.html b/layout/style/test/test_initial_computation.html
new file mode 100644
--- /dev/null
+++ b/layout/style/test/test_initial_computation.html
@@ -0,0 +1,154 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+-->
+<head>
+  <title>Test for computation of CSS '-moz-initial'</title>
+  <script type="text/javascript" src="/MochiKit/MochiKit.js"></script>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript" src="property_database.js"></script>
+  <style type="text/css" id="stylesheet"></style>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<p id="display">
+<iframe id="unstyled" src="unstyled.xml" height="10" width="10"></iframe>
+</p>
+<div id="content" style="display: none">
+
+<div id="testnode"><span id="element"></span></div>
+
+  
+</div>
+<pre id="test">
+<script class="testbody" type="text/javascript">
+
+/** Test for computation of CSS '-moz-initial' **/
+
+var gNoComputedStyle = {
+  "-moz-force-broken-image-icon": true,
+  "-moz-margin-end": true,
+  "-moz-margin-start": true,
+  "-moz-padding-end": true,
+  "-moz-padding-start": true,
+  "background-position": true,
+  "content": true,
+  "page-break-after": true,
+  "page-break-before": true,
+  "quotes": true,
+  "clip-path": true,
+  "clip-rule": true,
+  "color-interpolation": true,
+  "color-interpolation-filters": true,
+  "dominant-baseline": true,
+  "fill": true,
+  "fill-opacity": true,
+  "fill-rule": true,
+  "filter": true,
+  "flood-color": true,
+  "flood-opacity": true,
+  "marker": true, // NB: shorthand
+  "marker-end": true,
+  "marker-mid": true,
+  "marker-start": true,
+  "mask": true,
+  "pointer-events": true,
+  "shape-rendering": true,
+  "stop-color": true,
+  "stop-opacity": true,
+  "stroke": true,
+  "stroke-dasharray": true,
+  "stroke-dashoffset": true,
+  "stroke-linecap": true,
+  "stroke-linejoin": true,
+  "stroke-miterlimit": true,
+  "stroke-opacity": true,
+  "stroke-width": true,
+  "text-anchor": true,
+  "text-rendering": true
+};
+
+function xfail_diffcomputed(property) {
+  return property in gNoComputedStyle;
+}
+
+var gBrokenInitial = {
+};
+
+function xfail_initial(property, matching_initial) {
+  return property in gBrokenInitial;
+}
+
+var gElement = document.getElementById("element");
+var gStyleSheet = document.getElementById("stylesheet").sheet;
+var gRule1 = gStyleSheet.cssRules[gStyleSheet.insertRule("#element {}", gStyleSheet.cssRules.length)];
+var gRule2 = gStyleSheet.cssRules[gStyleSheet.insertRule("#element {}", gStyleSheet.cssRules.length)];
+
+var gInitialValues;
+
+function setup_initial_values() {
+  var iframe = document.getElementById("unstyled");
+  gInitialValues = iframe.contentWindow.getComputedStyle(
+                     iframe.contentDocument.documentElement, "");
+}
+
+// Get the computed value for a property.  For shorthands, return the
+// computed values of all the subproperties, delimited by " ; ".
+function get_computed_value(cs, property)
+{
+  var info = gCSSProperties[property];
+  if (!("subproperties" in info)) {
+    return cs.getPropertyValue(property);
+  }
+  var results = [];
+  for (var idx in info.subproperties) {
+    var subprop = info.subproperties[idx];
+    results.push(cs.getPropertyValue(subprop));
+  }
+  return results.join(" ; ");
+}
+
+function test_property(property)
+{
+  var info = gCSSProperties[property];
+  if (info.backend_only)
+    return;
+
+  if ("prerequisites" in info) {
+    var prereqs = info.prerequisites;
+    for (var prereq in prereqs) {
+      gElement.style.setProperty(prereq, prereqs[prereq], "");
+    }
+  }
+
+  var initial_computed = get_computed_value(gInitialValues, property);
+  gRule1.style.setProperty(property, info.other_values[0], "");
+  var other_computed = get_computed_value(getComputedStyle(gElement, ""), property);
+  (xfail_diffcomputed(property) ? todo_isnot : isnot)(
+        other_computed, initial_computed,
+        "should be testing with values that compute to different things " +
+        "for '" + property + "'");
+  gRule2.style.setProperty(property, "-moz-initial", "");
+  var initial_val_computed = get_computed_value(getComputedStyle(gElement, ""), property);
+  (xfail_initial(property, true) ? todo_is : is)(
+     initial_val_computed, initial_computed,
+     "-moz-initial should cause initial value for '" + property + "'");
+  gRule1.style.removeProperty(property);
+  gRule2.style.removeProperty(property);
+
+  if ("prerequisites" in info) {
+    var prereqs = info.prerequisites;
+    for (var prereq in prereqs) {
+      gElement.style.removeProperty(prereq);
+    }
+  }
+}
+
+setup_initial_values();
+for (var prop in gCSSProperties)
+  test_property(prop);
+
+</script>
+</pre>
+</body>
+</html>
diff --git a/layout/style/test/unstyled.xml b/layout/style/test/unstyled.xml
new file mode 100644
--- /dev/null
+++ b/layout/style/test/unstyled.xml
@@ -0,0 +1,2 @@
+<?xml version="1.0"?>
+<root/>
