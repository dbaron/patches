Start adding tests for computation.

diff --git a/layout/style/test/Makefile.in b/layout/style/test/Makefile.in
--- a/layout/style/test/Makefile.in
+++ b/layout/style/test/Makefile.in
@@ -78,6 +78,7 @@ _TEST_FILES = 	test_bug302186.html \
 		test_value_storage.html \
 		css_properties.js \
 		property_database.js \
+		unstyled.xml \
 		$(NULL)
 
 
diff --git a/layout/style/test/test_inherit_computation.html b/layout/style/test/test_inherit_computation.html
new file mode 100644
--- /dev/null
+++ b/layout/style/test/test_inherit_computation.html
@@ -0,0 +1,134 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+-->
+<head>
+  <title>Test for computation of CSS 'inherit'</title>
+  <script type="text/javascript" src="/MochiKit/MochiKit.js"></script>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript" src="property_database.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<p id="display"></p>
+<div id="content" style="display: none">
+
+<div id="testnode"></div>
+  
+</div>
+<pre id="test">
+<script class="testbody" type="text/javascript">
+
+/** Test for computation of CSS 'inherit' **/
+
+var gDeclaration = document.getElementById("testnode").style;
+
+var gKnownFails = {
+  /* bug 377519: */
+  "-moz-border-radius": true,
+  "-moz-outline-radius": true,
+  "background": true,
+  "border": true,
+  "border-bottom": true,
+  "border-color": true,
+  "border-left": true,
+  "border-right": true,
+  "border-style": true,
+  "border-top": true,
+  "border-width": true,
+  "cue": true,
+  "font": true,
+  "list-style": true,
+  "margin": true,
+  "outline": true,
+  "padding": true,
+  "pause": true
+};
+
+var gKnownFails2 = {
+  "-moz-border-radius": true,
+  "-moz-outline-radius": true,
+  "background": true,
+  "border": true,
+  "border-bottom": true,
+  "border-left": true,
+  "border-right": true,
+  "border-top": true,
+  "cue": true,
+  "font": true,
+  "list-style": true,
+  "outline": true,
+  "pause": true
+};
+
+function test_property(property)
+{
+  var info = gCSSProperties[property];
+
+  function check_initial(sproperty) {
+    var sinfo = gCSSProperties[sproperty];
+    var val = gDeclaration.getPropertyValue(sproperty);
+    is(val, "", "value of '" + sproperty + "' before we do anything");
+    if (sinfo.domProp) {
+      is(val, gDeclaration[sinfo.domProp],
+         "consistency between decl.getPropertyValue('" + sproperty + "') and decl." + sinfo.domProp);
+    }
+  }
+  check_initial(property);
+  if ("subproperties" in info)
+    for (var idx in info.subproperties)
+      check_initial(info.subproperties[idx]);
+
+  gDeclaration.setProperty(property, "inherit", "");
+
+  function check_set(sproperty) {
+    var sinfo = gCSSProperties[sproperty];
+    val = gDeclaration.getPropertyValue(sproperty);
+    var func = is;
+    if (sproperty == property && property in gKnownFails)
+      func = todo_is;
+    func(val, "inherit",
+         "inherit reported back for property '" + sproperty + "'");
+    if (sinfo.domProp) {
+      is(val, gDeclaration[sinfo.domProp],
+         "consistency between decl.getPropertyValue('" + sproperty +
+         "') and decl." + sinfo.domProp);
+    }
+  }
+  check_set(property);
+  if ("subproperties" in info)
+    for (var idx in info.subproperties)
+      check_set(info.subproperties[idx]);
+
+  // We don't care particularly about the whitespace or the placement of
+  // semicolons, but for simplicity we'll test the current behavior.
+  var cssTextFunc = is;
+  if (property in gKnownFails2)
+    cssTextFunc = todo_is;
+  cssTextFunc(gDeclaration.cssText, property + ": inherit;",
+    "declaration should serialize to exactly what went in (for inherit)");
+
+  gDeclaration.removeProperty(property);
+
+  function check_final(sproperty) {
+    var sinfo = gCSSProperties[sproperty];
+    var val = gDeclaration.getPropertyValue(sproperty);
+    is(val, "", "value of '" + sproperty + "' after removal of value");
+    if (sinfo.domProp) {
+      is(val, gDeclaration[sinfo.domProp],
+         "consistency between decl.getPropertyValue('" + sproperty + "') and decl." + sinfo.domProp);
+    }
+  }
+  check_final(property);
+  if ("subproperties" in info)
+    for (var idx in info.subproperties)
+      check_final(info.subproperties[idx]);
+}
+
+for (var prop in gCSSProperties)
+  test_property(prop);
+
+</script>
+</pre>
+</body>
+</html>
diff --git a/layout/style/test/unstyled.xml b/layout/style/test/unstyled.xml
new file mode 100644
--- /dev/null
+++ b/layout/style/test/unstyled.xml
@@ -0,0 +1,2 @@
+<?xml version="1.0"?>
+<root/>
