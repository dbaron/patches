Start adding tests for computation.

diff --git a/layout/style/test/Makefile.in b/layout/style/test/Makefile.in
--- a/layout/style/test/Makefile.in
+++ b/layout/style/test/Makefile.in
@@ -72,12 +72,14 @@ _TEST_FILES = 	test_bug302186.html \
 		test_bug372770.html \
 		test_bug373293.html \
 		test_inherit_storage.html \
+		test_inherit_computation.html \
 		test_initial_storage.html \
 		test_property_database.html \
 		test_property_syntax_errors.html \
 		test_value_storage.html \
 		css_properties.js \
 		property_database.js \
+		unstyled.xml \
 		$(NULL)
 
 
diff --git a/layout/style/test/property_database.js b/layout/style/test/property_database.js
--- a/layout/style/test/property_database.js
+++ b/layout/style/test/property_database.js
@@ -261,7 +261,7 @@ var gCSSProperties = {
 	},
 	"-moz-image-region": {
 		domProp: "MozImageRegion",
-		inherited: false,
+		inherited: true,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "auto" ],
 		other_values: [ "rect(3px 20px 15px 4px)", "rect(17px, 21px, 33px, 2px)" ],
diff --git a/layout/style/test/test_inherit_computation.html b/layout/style/test/test_inherit_computation.html
new file mode 100644
--- /dev/null
+++ b/layout/style/test/test_inherit_computation.html
@@ -0,0 +1,155 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+-->
+<head>
+  <title>Test for computation of CSS 'inherit'</title>
+  <script type="text/javascript" src="/MochiKit/MochiKit.js"></script>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript" src="property_database.js"></script>
+  <style type="text/css" id="stylesheet"></style>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<p id="display"></p>
+<div id="content" style="display: none">
+
+<div id="testnode"><span id="parent"><span id="child"></span></span></div>
+  
+</div>
+<pre id="test">
+<script class="testbody" type="text/javascript">
+
+/** Test for computation of CSS 'inherit' **/
+
+var gNoComputedStyle = {
+  "-moz-force-broken-image-icon": true,
+  "-moz-margin-end": true,
+  "-moz-margin-start": true,
+  "-moz-padding-end": true,
+  "-moz-padding-start": true,
+  "background-position": true,
+  "content": true,
+  "page-break-after": true,
+  "page-break-before": true,
+  "quotes": true,
+  "clip-path": true,
+  "clip-rule": true,
+  "color-interpolation": true,
+  "color-interpolation-filters": true,
+  "dominant-baseline": true,
+  "fill": true,
+  "fill-opacity": true,
+  "fill-rule": true,
+  "filter": true,
+  "flood-color": true,
+  "flood-opacity": true,
+  "marker": true, // NB: shorthand
+  "marker-end": true,
+  "marker-mid": true,
+  "marker-start": true,
+  "mask": true,
+  "pointer-events": true,
+  "shape-rendering": true,
+  "stop-color": true,
+  "stop-opacity": true,
+  "stroke": true,
+  "stroke-dasharray": true,
+  "stroke-dashoffset": true,
+  "stroke-linecap": true,
+  "stroke-linejoin": true,
+  "stroke-miterlimit": true,
+  "stroke-opacity": true,
+  "stroke-width": true,
+  "text-anchor": true,
+  "text-rendering": true
+};
+
+function xfail_diffcomputed(property) {
+  return property in gNoComputedStyle;
+}
+
+var gParent = document.getElementById("parent");
+var gChild = document.getElementById("child");
+var gStyleSheet = document.getElementById("stylesheet").sheet;
+var gChildRule1 = gStyleSheet.cssRules[gStyleSheet.insertRule("#child {}", gStyleSheet.cssRules.length)];
+var gChildRule2 = gStyleSheet.cssRules[gStyleSheet.insertRule("#child {}", gStyleSheet.cssRules.length)];
+
+// Get the computed value for a property.  For shorthands, return the
+// computed values of all the subproperties, delimited by " ; ".
+function get_computed_value(node, property)
+{
+  var info = gCSSProperties[property];
+  var cs = getComputedStyle(node, "");
+  if (!("subproperties" in info)) {
+    return cs.getPropertyValue(property);
+  }
+  var results = [];
+  for (var idx in info.subproperties) {
+    var subprop = info.subproperties[idx];
+    results.push(cs.getPropertyValue(subprop));
+  }
+  return results.join(" ; ");
+}
+
+function test_property(property)
+{
+  var info = gCSSProperties[property];
+  if (info.backend_only)
+    return;
+
+  var func;
+  if (info.inherited) {
+    gParent.style.setProperty(property, info.initial_values[0], "");
+    var initial_computed = get_computed_value(gChild, property);
+    gChildRule1.style.setProperty(property, info.other_values[0], "");
+    var other_computed = get_computed_value(gChild, property);
+    (xfail_diffcomputed(property) ? todo_isnot : isnot)(
+          initial_computed, other_computed,
+          "should be testing with values that compute to different things " +
+          "for '" + property + "'");
+    gChildRule2.style.setProperty(property, "inherit", "");
+    var inherit_initial_computed = get_computed_value(gChild, property);
+    is(inherit_initial_computed, initial_computed,
+       "inherit should cause inheritance of initial value for '" +
+       property + "'");
+    gParent.style.setProperty(property, info.other_values[0], "");
+    var inherit_other_computed = get_computed_value(gChild, property);
+    is(inherit_other_computed, other_computed,
+       "inherit should cause inheritance of other value for '" +
+       property + "'");
+    gParent.style.removeProperty(property);
+    gChildRule1.style.removeProperty(property);
+    gChildRule2.style.removeProperty(property);
+  } else {
+    gParent.style.setProperty(property, info.other_values[0], "");
+    var initial_computed = get_computed_value(gChild, property);
+    var other_computed = get_computed_value(gParent, property);
+    (xfail_diffcomputed(property) ? todo_isnot : isnot)(
+          initial_computed, other_computed,
+          "should be testing with values that compute to different things " +
+          "for '" + property + "'");
+    gChildRule2.style.setProperty(property, "inherit", "");
+    var inherit_other_computed = get_computed_value(gChild, property);
+    is(inherit_other_computed, other_computed,
+       "inherit should cause inheritance of other value for '" +
+       property + "'");
+    gParent.style.removeProperty(property);
+    gChildRule1.style.setProperty(property, info.other_values[0], "");
+    var inherit_initial_computed = get_computed_value(gChild, property);
+    is(inherit_initial_computed, initial_computed,
+       "inherit should cause inheritance of initial value for '" +
+       property + "'");
+    gParent.style.removeProperty(property);
+    gChildRule1.style.removeProperty(property);
+    gChildRule2.style.removeProperty(property);
+  }
+}
+
+for (var prop in gCSSProperties)
+  test_property(prop);
+
+</script>
+</pre>
+</body>
+</html>
diff --git a/layout/style/test/unstyled.xml b/layout/style/test/unstyled.xml
new file mode 100644
--- /dev/null
+++ b/layout/style/test/unstyled.xml
@@ -0,0 +1,2 @@
+<?xml version="1.0"?>
+<root/>
