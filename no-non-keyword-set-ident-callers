Eliminate all callers to forms of nsROCSSPrimitiveValue::SetIdent other than the one taking nsCSSKeyword.  (Bug 474712)

diff --git a/content/base/src/nsGkAtomList.h b/content/base/src/nsGkAtomList.h
--- a/content/base/src/nsGkAtomList.h
+++ b/content/base/src/nsGkAtomList.h
@@ -418,17 +418,16 @@ GK_ATOM(hspace, "hspace")
 GK_ATOM(html, "html")
 GK_ATOM(htmlBaseHref, "html-base-href")
 GK_ATOM(htmlBaseTarget, "html-base-target")
 GK_ATOM(httpEquiv, "http-equiv")
 GK_ATOM(i, "i")
 GK_ATOM(id, "id")
 GK_ATOM(_if, "if")
 GK_ATOM(iframe, "iframe")
-GK_ATOM(ignore, "ignore")
 GK_ATOM(ignorecase, "ignorecase")
 GK_ATOM(ignorekeys, "ignorekeys")
 GK_ATOM(ilayer, "ilayer")
 GK_ATOM(image, "image")
 GK_ATOM(imageClickedPoint, "image-clicked-point")
 GK_ATOM(img, "img")
 GK_ATOM(implementation, "implementation")
 GK_ATOM(implements, "implements")
@@ -853,17 +852,16 @@ GK_ATOM(start_after, "start_after")
 GK_ATOM(start_before, "start_before")
 GK_ATOM(startsWith, "starts-with")
 GK_ATOM(state, "state")
 GK_ATOM(statedatasource, "statedatasource")
 GK_ATOM(staticHint, "staticHint")
 GK_ATOM(statustext, "statustext")
 GK_ATOM(stop, "stop")
 GK_ATOM(stretch, "stretch")
-GK_ATOM(stretch_to_fit, "stretch-to-fit")
 GK_ATOM(strike, "strike")
 GK_ATOM(string, "string")
 GK_ATOM(stringLength, "string-length")
 GK_ATOM(stripSpace, "strip-space")
 GK_ATOM(strong, "strong")
 GK_ATOM(style, "style")
 GK_ATOM(stylesheet, "stylesheet")
 GK_ATOM(stylesheetPrefix, "stylesheet-prefix")
diff --git a/layout/style/nsCSSKeywordList.h b/layout/style/nsCSSKeywordList.h
--- a/layout/style/nsCSSKeywordList.h
+++ b/layout/style/nsCSSKeywordList.h
@@ -460,16 +460,17 @@ CSS_KEY(threedhighlight, threedhighlight
 CSS_KEY(threedlightshadow, threedlightshadow)
 CSS_KEY(threedshadow, threedshadow)
 CSS_KEY(toggle, toggle)
 CSS_KEY(top, top)
 CSS_KEY(top-outside, top_outside)
 CSS_KEY(translate, translate)
 CSS_KEY(translatex, translatex)
 CSS_KEY(translatey, translatey)
+CSS_KEY(transparent, transparent) // for nsComputedDOMStyle only
 CSS_KEY(tri-state, tri_state)
 CSS_KEY(ultra-condensed, ultra_condensed)
 CSS_KEY(ultra-expanded, ultra_expanded)
 CSS_KEY(underline, underline)
 CSS_KEY(upper-alpha, upper_alpha)
 CSS_KEY(upper-latin, upper_latin)
 CSS_KEY(upper-roman, upper_roman)
 CSS_KEY(uppercase, uppercase)
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -453,57 +453,53 @@ nsComputedDOMStyle::GetBinding(nsIDOMCSS
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleDisplay* display = GetStyleDisplay();
 
   if (display->mBinding) {
     val->SetURI(display->mBinding->mURI);
   } else {
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetClear(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleDisplay *display = GetStyleDisplay();
 
   if (display->mBreakType != NS_STYLE_CLEAR_NONE) {
-    const nsAFlatCString& clear =
-      nsCSSProps::ValueToKeyword(display->mBreakType,
-                                 nsCSSProps::kClearKTable);
-    val->SetIdent(clear);
-  } else {
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(nsCSSProps::ValueToKeywordEnum(display->mBreakType,
+                                                 nsCSSProps::kClearKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_none);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetCssFloat(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleDisplay* display = GetStyleDisplay();
 
   if (display->mFloats != NS_STYLE_FLOAT_NONE) {
-    const nsAFlatCString& cssFloat =
-      nsCSSProps::ValueToKeyword(display->mFloats,
-                                 nsCSSProps::kFloatKTable);
-    val->SetIdent(cssFloat);
-  } else {
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(nsCSSProps::ValueToKeywordEnum(display->mFloats,
+                                                 nsCSSProps::kFloatKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_none);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetBottom(nsIDOMCSSValue** aValue)
 {
@@ -511,28 +507,28 @@ nsComputedDOMStyle::GetBottom(nsIDOMCSSV
 }
 
 nsresult
 nsComputedDOMStyle::GetStackSizing(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  val->SetIdent(GetStyleXUL()->mStretchStack ? nsGkAtoms::stretch_to_fit :
-                nsGkAtoms::ignore);
+  val->SetIdent(GetStyleXUL()->mStretchStack ? eCSSKeyword_stretch_to_fit :
+                eCSSKeyword_ignore);
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::SetToRGBAColor(nsROCSSPrimitiveValue* aValue,
                                    nscolor aColor)
 {
   if (NS_GET_A(aColor) == 0) {
-    aValue->SetIdent(nsGkAtoms::transparent);
+    aValue->SetIdent(eCSSKeyword_transparent);
     return NS_OK;
   }
 
   nsROCSSPrimitiveValue *red   = GetROCSSPrimitiveValue();
   nsROCSSPrimitiveValue *green = GetROCSSPrimitiveValue();
   nsROCSSPrimitiveValue *blue  = GetROCSSPrimitiveValue();
   nsROCSSPrimitiveValue *alpha  = GetROCSSPrimitiveValue();
 
@@ -592,17 +588,17 @@ nsresult
 nsComputedDOMStyle::GetColumnCount(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleColumn* column = GetStyleColumn();
 
   if (column->mColumnCount == NS_STYLE_COLUMN_COUNT_AUTO) {
-    val->SetIdent(nsGkAtoms::_auto);
+    val->SetIdent(eCSSKeyword_auto);
   } else {
     val->SetNumber(column->mColumnCount);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
@@ -649,22 +645,21 @@ nsresult
 nsComputedDOMStyle::GetColumnRuleStyle(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   if (!val)
     return NS_ERROR_OUT_OF_MEMORY;
 
   const nsStyleColumn* column = GetStyleColumn();
   if (column->mColumnRuleStyle == NS_STYLE_BORDER_STYLE_NONE) {
-    val->SetIdent(nsGkAtoms::none);
-  } else {
-    const nsAFlatCString& style =
-      nsCSSProps::ValueToKeyword(column->mColumnRuleStyle,
-                                 nsCSSProps::kBorderStyleKTable);
-    val->SetIdent(style);
+    val->SetIdent(eCSSKeyword_none);
+  } else {
+    val->SetIdent(
+      nsCSSProps::ValueToKeywordEnum(column->mColumnRuleStyle,
+                                     nsCSSProps::kBorderStyleKTable));
   }
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetColumnRuleColor(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
@@ -686,17 +681,17 @@ nsComputedDOMStyle::GetColumnRuleColor(n
 nsresult
 nsComputedDOMStyle::GetContent(nsIDOMCSSValue** aValue)
 {
   const nsStyleContent *content = GetStyleContent();
 
   if (content->ContentCount() == 0) {
     nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
     NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
     return CallQueryInterface(val, aValue);
   }
 
   if (content->ContentCount() == 1 &&
       content->ContentAt(0).mType == eStyleContentType_AltContent) {
     nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
     NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
     val->SetIdent(eCSSKeyword__moz_alt_content);
@@ -799,17 +794,17 @@ nsComputedDOMStyle::GetContent(nsIDOMCSS
 nsresult
 nsComputedDOMStyle::GetCounterIncrement(nsIDOMCSSValue** aValue)
 {
   const nsStyleContent *content = GetStyleContent();
 
   if (content->CounterIncrementCount() == 0) {
     nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
     NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
     return CallQueryInterface(val, aValue);
   }
 
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_FALSE);
   NS_ENSURE_TRUE(valueList, NS_ERROR_OUT_OF_MEMORY);
 
   for (PRUint32 i = 0, i_end = content->CounterIncrementCount(); i < i_end; ++i) {
     nsROCSSPrimitiveValue* name = GetROCSSPrimitiveValue();
@@ -951,17 +946,17 @@ nsresult nsComputedDOMStyle::GetMozTrans
 nsresult
 nsComputedDOMStyle::GetCounterReset(nsIDOMCSSValue** aValue)
 {
   const nsStyleContent *content = GetStyleContent();
 
   if (content->CounterResetCount() == 0) {
     nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
     NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
     return CallQueryInterface(val, aValue);
   }
 
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_FALSE);
   NS_ENSURE_TRUE(valueList, NS_ERROR_OUT_OF_MEMORY);
 
   for (PRUint32 i = 0, i_end = content->CounterResetCount(); i < i_end; ++i) {
     nsROCSSPrimitiveValue* name = GetROCSSPrimitiveValue();
@@ -989,17 +984,17 @@ nsComputedDOMStyle::GetCounterReset(nsID
 nsresult
 nsComputedDOMStyle::GetQuotes(nsIDOMCSSValue** aValue)
 {
   const nsStyleQuotes *quotes = GetStyleQuotes();
 
   if (quotes->QuotesCount() == 0) {
     nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
     NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
     return CallQueryInterface(val, aValue);
   }
 
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_FALSE);
   NS_ENSURE_TRUE(valueList, NS_ERROR_OUT_OF_MEMORY);
 
   for (PRUint32 i = 0, i_end = quotes->QuotesCount(); i < i_end; ++i) {
     nsROCSSPrimitiveValue* openVal = GetROCSSPrimitiveValue();
@@ -1082,109 +1077,103 @@ nsComputedDOMStyle::GetFontSizeAdjust(ns
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleFont *font = GetStyleFont();
 
   if (font->mFont.sizeAdjust) {
     val->SetNumber(font->mFont.sizeAdjust);
   } else {
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetFontStyle(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleFont* font = GetStyleFont();
 
   if (font->mFont.style != NS_STYLE_FONT_STYLE_NORMAL) {
-    const nsAFlatCString& style=
-      nsCSSProps::ValueToKeyword(font->mFont.style,
-                                 nsCSSProps::kFontStyleKTable);
-    val->SetIdent(style);
-  } else {
-    val->SetIdent(nsGkAtoms::normal);
+    val->SetIdent(nsCSSProps::ValueToKeywordEnum(font->mFont.style,
+                                                 nsCSSProps::kFontStyleKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_normal);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetFontWeight(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleFont* font = GetStyleFont();
 
-  const nsAFlatCString& str_weight=
-    nsCSSProps::ValueToKeyword(font->mFont.weight,
-                               nsCSSProps::kFontWeightKTable);
-  if (!str_weight.IsEmpty()) {
-    val->SetIdent(str_weight);
+  const nsCSSKeyword enum_weight =
+    nsCSSProps::ValueToKeywordEnum(font->mFont.weight,
+                                   nsCSSProps::kFontWeightKTable);
+  if (enum_weight != eCSSKeyword_UNKNOWN) {
+    val->SetIdent(enum_weight);
   } else {
     val->SetNumber(font->mFont.weight);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetFontVariant(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleFont* font = GetStyleFont();
 
   if (font->mFont.variant != NS_STYLE_FONT_VARIANT_NORMAL) {
-    const nsAFlatCString& variant=
-      nsCSSProps::ValueToKeyword(font->mFont.variant,
-                                 nsCSSProps::kFontVariantKTable);
-    val->SetIdent(variant);
-  } else {
-    val->SetIdent(nsGkAtoms::normal);
+    val->SetIdent(
+      nsCSSProps::ValueToKeywordEnum(font->mFont.variant,
+                                     nsCSSProps::kFontVariantKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_normal);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetBackgroundAttachment(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleBackground *background = GetStyleBackground();
 
-  const nsAFlatCString& backgroundAttachment =
-    nsCSSProps::ValueToKeyword(background->mBackgroundAttachment,
-                               nsCSSProps::kBackgroundAttachmentKTable);
-  val->SetIdent(backgroundAttachment);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(background->mBackgroundAttachment,
+                                   nsCSSProps::kBackgroundAttachmentKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetBackgroundClip(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& backgroundClip =
-    nsCSSProps::ValueToKeyword(GetStyleBackground()->mBackgroundClip,
-                               nsCSSProps::kBackgroundClipKTable);
-
-  val->SetIdent(backgroundClip);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleBackground()->mBackgroundClip,
+                                   nsCSSProps::kBackgroundClipKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetBackgroundColor(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
@@ -1204,17 +1193,17 @@ nsresult
 nsComputedDOMStyle::GetBackgroundImage(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleBackground* color = GetStyleBackground();
 
   if (color->mBackgroundFlags & NS_STYLE_BG_IMAGE_NONE) {
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
   } else {
     nsCOMPtr<nsIURI> uri;
     if (color->mBackgroundImage) {
       color->mBackgroundImage->GetURI(getter_AddRefs(uri));
     }
     val->SetURI(uri);
   }
 
@@ -1222,36 +1211,32 @@ nsComputedDOMStyle::GetBackgroundImage(n
 }
 
 nsresult
 nsComputedDOMStyle::GetBackgroundInlinePolicy(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& backgroundPolicy =
-      nsCSSProps::ValueToKeyword(GetStyleBackground()->mBackgroundInlinePolicy,
-                                 nsCSSProps::kBackgroundInlinePolicyKTable);
-
-  val->SetIdent(backgroundPolicy);
+  val->SetIdent(nsCSSProps::ValueToKeywordEnum(
+                  GetStyleBackground()->mBackgroundInlinePolicy,
+                  nsCSSProps::kBackgroundInlinePolicyKTable));
 
   return CallQueryInterface(val, aValue);  
 }
 
 nsresult
 nsComputedDOMStyle::GetBackgroundOrigin(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& backgroundOrigin =
-    nsCSSProps::ValueToKeyword(GetStyleBackground()->mBackgroundOrigin,
-                               nsCSSProps::kBackgroundOriginKTable);
-
-  val->SetIdent(backgroundOrigin);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleBackground()->mBackgroundOrigin,
+                                   nsCSSProps::kBackgroundOriginKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetBackgroundPosition(nsIDOMCSSValue** aValue)
 {
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_FALSE);
@@ -1297,20 +1282,19 @@ nsComputedDOMStyle::GetBackgroundPositio
 }
 
 nsresult
 nsComputedDOMStyle::GetBackgroundRepeat(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& backgroundRepeat =
-    nsCSSProps::ValueToKeyword(GetStyleBackground()->mBackgroundRepeat,
-                               nsCSSProps::kBackgroundRepeatKTable);
-  val->SetIdent(backgroundRepeat);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleBackground()->mBackgroundRepeat,
+                                   nsCSSProps::kBackgroundRepeatKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetPadding(nsIDOMCSSValue** aValue)
 {
   // return null per spec.
@@ -1344,20 +1328,19 @@ nsComputedDOMStyle::GetPaddingRight(nsID
 }
 
 nsresult
 nsComputedDOMStyle::GetBorderCollapse(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& ident=
-    nsCSSProps::ValueToKeyword(GetStyleTableBorder()->mBorderCollapse,
-                               nsCSSProps::kBorderCollapseKTable);
-  val->SetIdent(ident);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleTableBorder()->mBorderCollapse,
+                                   nsCSSProps::kBorderCollapseKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetBorderSpacing(nsIDOMCSSValue** aValue)
 {
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_FALSE);
@@ -1393,53 +1376,50 @@ nsComputedDOMStyle::GetBorderSpacing(nsI
 }
 
 nsresult
 nsComputedDOMStyle::GetCaptionSide(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& side =
-    nsCSSProps::ValueToKeyword(GetStyleTableBorder()->mCaptionSide,
-                               nsCSSProps::kCaptionSideKTable);
-  val->SetIdent(side);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleTableBorder()->mCaptionSide,
+                                   nsCSSProps::kCaptionSideKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetEmptyCells(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& emptyCells =
-    nsCSSProps::ValueToKeyword(GetStyleTableBorder()->mEmptyCells,
-                               nsCSSProps::kEmptyCellsKTable);
-  val->SetIdent(emptyCells);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleTableBorder()->mEmptyCells,
+                                   nsCSSProps::kEmptyCellsKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetTableLayout(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleTable *table = GetStyleTable();
 
   if (table->mLayoutStrategy != NS_STYLE_TABLE_LAYOUT_AUTO) {
-    const nsAFlatCString& tableLayout =
-      nsCSSProps::ValueToKeyword(table->mLayoutStrategy,
-                                 nsCSSProps::kTableLayoutKTable);
-    val->SetIdent(tableLayout);
-  } else {
-    val->SetIdent(nsGkAtoms::_auto);
+    val->SetIdent(
+      nsCSSProps::ValueToKeywordEnum(table->mLayoutStrategy,
+                                     nsCSSProps::kTableLayoutKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_auto);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetBorderStyle(nsIDOMCSSValue** aValue)
 {
@@ -1664,26 +1644,25 @@ nsresult
 nsComputedDOMStyle::GetOutlineStyle(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   PRUint8 outlineStyle = GetStyleOutline()->GetOutlineStyle();
   switch (outlineStyle) {
   case NS_STYLE_BORDER_STYLE_NONE:
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
     break;
   case NS_STYLE_BORDER_STYLE_AUTO:
-    val->SetIdent(nsGkAtoms::_auto);
+    val->SetIdent(eCSSKeyword_auto);
     break;
   default:
-    const nsAFlatCString& style =
-      nsCSSProps::ValueToKeyword(outlineStyle,
-                                 nsCSSProps::kOutlineStyleKTable);
-    val->SetIdent(style);
+    val->SetIdent(
+      nsCSSProps::ValueToKeywordEnum(outlineStyle,
+                                     nsCSSProps::kOutlineStyleKTable));
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetOutlineOffset(nsIDOMCSSValue** aValue)
 {
@@ -1796,17 +1775,17 @@ nsComputedDOMStyle::GetEllipseRadii(cons
 nsresult
 nsComputedDOMStyle::GetCSSShadowArray(nsCSSShadowArray* aArray,
                                       const nscolor& aDefaultColor,
                                       PRBool aUsesSpread,
                                       nsIDOMCSSValue** aValue)
 {
   if (!aArray) {
     nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
     return CallQueryInterface(val, aValue);
   }
 
   static nscoord nsCSSShadowItem::* const shadowValuesNoSpread[] = {
     &nsCSSShadowItem::mXOffset,
     &nsCSSShadowItem::mYOffset,
     &nsCSSShadowItem::mRadius
   };
@@ -1894,17 +1873,17 @@ nsresult
 nsComputedDOMStyle::GetListStyleImage(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleList* list = GetStyleList();
 
   if (!list->mListStyleImage) {
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
   } else {
     nsCOMPtr<nsIURI> uri;
     if (list->mListStyleImage) {
       list->mListStyleImage->GetURI(getter_AddRefs(uri));
     }
     val->SetURI(uri);
   }
     
@@ -1912,39 +1891,37 @@ nsComputedDOMStyle::GetListStyleImage(ns
 }
 
 nsresult
 nsComputedDOMStyle::GetListStylePosition(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& style =
-    nsCSSProps::ValueToKeyword(GetStyleList()->mListStylePosition,
-                               nsCSSProps::kListStylePositionKTable);
-  val->SetIdent(style);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleList()->mListStylePosition,
+                                   nsCSSProps::kListStylePositionKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetListStyleType(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleList *list = GetStyleList();
 
   if (list->mListStyleType == NS_STYLE_LIST_STYLE_NONE) {
-    val->SetIdent(nsGkAtoms::none);
-  } else {
-    const nsAFlatCString& style =
-      nsCSSProps::ValueToKeyword(list->mListStyleType,
-                                 nsCSSProps::kListStyleKTable);
-    val->SetIdent(style);
+    val->SetIdent(eCSSKeyword_none);
+  } else {
+    val->SetIdent(
+      nsCSSProps::ValueToKeywordEnum(list->mListStyleType,
+                                     nsCSSProps::kListStyleKTable));
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetImageRegion(nsIDOMCSSValue** aValue)
 {
@@ -1954,17 +1931,17 @@ nsComputedDOMStyle::GetImageRegion(nsIDO
   const nsStyleList* list = GetStyleList();
 
   nsresult rv = NS_OK;
   nsROCSSPrimitiveValue *topVal = nsnull;
   nsROCSSPrimitiveValue *rightVal = nsnull;
   nsROCSSPrimitiveValue *bottomVal = nsnull;
   nsROCSSPrimitiveValue *leftVal = nsnull;
   if (list->mImageRegion.width <= 0 || list->mImageRegion.height <= 0) {
-    val->SetIdent(nsGkAtoms::_auto);
+    val->SetIdent(eCSSKeyword_auto);
   } else {
     // create the cssvalues for the sides, stick them in the rect object
     topVal = GetROCSSPrimitiveValue();
     rightVal = GetROCSSPrimitiveValue();
     bottomVal = GetROCSSPrimitiveValue();
     leftVal = GetROCSSPrimitiveValue();
     if (topVal && rightVal && bottomVal && leftVal) {
       nsDOMCSSRect * domRect = new nsDOMCSSRect(topVal, rightVal,
@@ -2023,36 +2000,33 @@ nsComputedDOMStyle::GetVerticalAlign(nsI
 }
 
 nsresult
 nsComputedDOMStyle::GetTextAlign(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& align=
-    nsCSSProps::ValueToKeyword(GetStyleText()->mTextAlign,
-                               nsCSSProps::kTextAlignKTable);
-  val->SetIdent(align);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleText()->mTextAlign,
+                                   nsCSSProps::kTextAlignKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetTextDecoration(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleTextReset* text = GetStyleTextReset();
 
   if (NS_STYLE_TEXT_DECORATION_NONE == text->mTextDecoration) {
-    const nsAFlatCString& decoration=
-      nsCSSKeywords::GetStringValue(eCSSKeyword_none);
-    val->SetIdent(decoration);
+    val->SetIdent(eCSSKeyword_none);
   } else {
     nsAutoString decorationString;
     if (text->mTextDecoration & NS_STYLE_TEXT_DECORATION_UNDERLINE) {
       const nsAFlatCString& decoration=
         nsCSSProps::ValueToKeyword(NS_STYLE_TEXT_DECORATION_UNDERLINE,
                                    nsCSSProps::kTextDecorationKTable);
       decorationString.AppendWithConversion(decoration.get());
     }
@@ -2113,22 +2087,21 @@ nsresult
 nsComputedDOMStyle::GetTextTransform(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleText *text = GetStyleText();
 
   if (text->mTextTransform != NS_STYLE_TEXT_TRANSFORM_NONE) {
-    const nsAFlatCString& textTransform =
-      nsCSSProps::ValueToKeyword(text->mTextTransform,
-                                 nsCSSProps::kTextTransformKTable);
-    val->SetIdent(textTransform);
-  } else {
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(
+      nsCSSProps::ValueToKeywordEnum(text->mTextTransform,
+                                     nsCSSProps::kTextTransformKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_none);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetLetterSpacing(nsIDOMCSSValue** aValue)
 {
@@ -2155,111 +2128,104 @@ nsresult
 nsComputedDOMStyle::GetWhiteSpace(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleText *text = GetStyleText();
 
   if (text->mWhiteSpace != NS_STYLE_WHITESPACE_NORMAL) {
-    const nsAFlatCString& whiteSpace =
-      nsCSSProps::ValueToKeyword(text->mWhiteSpace,
-                                 nsCSSProps::kWhitespaceKTable);
-    val->SetIdent(whiteSpace);
-  } else {
-    val->SetIdent(nsGkAtoms::normal);
+    val->SetIdent(
+      nsCSSProps::ValueToKeywordEnum(text->mWhiteSpace,
+                                     nsCSSProps::kWhitespaceKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_normal);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetWindowShadow(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleUIReset *uiData = GetStyleUIReset();
 
   if (uiData->mWindowShadow != NS_STYLE_WINDOW_SHADOW_NONE) {
-    const nsAFlatCString& windowShadow =
-      nsCSSProps::ValueToKeyword(uiData->mWindowShadow,
-                                 nsCSSProps::kWindowShadowKTable);
-    val->SetIdent(windowShadow);
-  } else {
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(
+      nsCSSProps::ValueToKeywordEnum(uiData->mWindowShadow,
+                                     nsCSSProps::kWindowShadowKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_none);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 
 nsresult
 nsComputedDOMStyle::GetWordWrap(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleText *text = GetStyleText();
 
   if (text->mWordWrap != NS_STYLE_WORDWRAP_NORMAL) {
-    const nsAFlatCString& wordWrap =
-      nsCSSProps::ValueToKeyword(text->mWordWrap,
-                                 nsCSSProps::kWordwrapKTable);
-    val->SetIdent(wordWrap);
-  } else {
-    val->SetIdent(nsGkAtoms::normal);
+    val->SetIdent(
+      nsCSSProps::ValueToKeywordEnum(text->mWordWrap,
+                                     nsCSSProps::kWordwrapKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_normal);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetVisibility(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& value=
-    nsCSSProps::ValueToKeyword(GetStyleVisibility()->mVisible,
-                               nsCSSProps::kVisibilityKTable);
-  val->SetIdent(value);
+  val->SetIdent(nsCSSProps::ValueToKeywordEnum(GetStyleVisibility()->mVisible,
+                                               nsCSSProps::kVisibilityKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetDirection(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString & direction =
-    nsCSSProps::ValueToKeyword(GetStyleVisibility()->mDirection,
-                               nsCSSProps::kDirectionKTable);
-  val->SetIdent(direction);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleVisibility()->mDirection,
+                                   nsCSSProps::kDirectionKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetUnicodeBidi(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleTextReset *text = GetStyleTextReset();
 
   if (text->mUnicodeBidi != NS_STYLE_UNICODE_BIDI_NORMAL) {
-    const nsAFlatCString& bidi =
-      nsCSSProps::ValueToKeyword(text->mUnicodeBidi,
-                                 nsCSSProps::kUnicodeBidiKTable);
-    val->SetIdent(bidi);
-  } else {
-    val->SetIdent(nsGkAtoms::normal);
+    val->SetIdent(
+      nsCSSProps::ValueToKeywordEnum(text->mUnicodeBidi,
+                                     nsCSSProps::kUnicodeBidiKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_normal);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetCursor(nsIDOMCSSValue** aValue)
 {
@@ -2310,71 +2276,65 @@ nsComputedDOMStyle::GetCursor(nsIDOMCSSV
 
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   if (!val) {
     delete valueList;
     return NS_ERROR_OUT_OF_MEMORY;
   }
 
   if (ui->mCursor == NS_STYLE_CURSOR_AUTO) {
-    val->SetIdent(nsGkAtoms::_auto);
-  } else {
-    const nsAFlatCString& cursor =
-      nsCSSProps::ValueToKeyword(ui->mCursor,
-                                 nsCSSProps::kCursorKTable);
-    val->SetIdent(cursor);
+    val->SetIdent(eCSSKeyword_auto);
+  } else {
+    val->SetIdent(
+      nsCSSProps::ValueToKeywordEnum(ui->mCursor,
+                                     nsCSSProps::kCursorKTable));
   }
   if (!valueList->AppendCSSValue(val)) {
     delete valueList;
     delete val;
     return NS_ERROR_OUT_OF_MEMORY;
   }
 
   return CallQueryInterface(valueList, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetAppearance(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& appearanceIdent =
-    nsCSSProps::ValueToKeyword(GetStyleDisplay()->mAppearance,
-                               nsCSSProps::kAppearanceKTable);
-  val->SetIdent(appearanceIdent);
+  val->SetIdent(nsCSSProps::ValueToKeywordEnum(GetStyleDisplay()->mAppearance,
+                                               nsCSSProps::kAppearanceKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 
 nsresult
 nsComputedDOMStyle::GetBoxAlign(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& boxAlignIdent =
-    nsCSSProps::ValueToKeyword(GetStyleXUL()->mBoxAlign,
-                               nsCSSProps::kBoxAlignKTable);
-  val->SetIdent(boxAlignIdent);
+  val->SetIdent(nsCSSProps::ValueToKeywordEnum(GetStyleXUL()->mBoxAlign,
+                                               nsCSSProps::kBoxAlignKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetBoxDirection(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& boxDirectionIdent =
-    nsCSSProps::ValueToKeyword(GetStyleXUL()->mBoxDirection,
-                               nsCSSProps::kBoxDirectionKTable);
-  val->SetIdent(boxDirectionIdent);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleXUL()->mBoxDirection,
+                                   nsCSSProps::kBoxDirectionKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetBoxFlex(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
@@ -2397,62 +2357,58 @@ nsComputedDOMStyle::GetBoxOrdinalGroup(n
 }
 
 nsresult
 nsComputedDOMStyle::GetBoxOrient(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& boxOrientIdent =
-    nsCSSProps::ValueToKeyword(GetStyleXUL()->mBoxOrient,
-                               nsCSSProps::kBoxOrientKTable);
-  val->SetIdent(boxOrientIdent);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleXUL()->mBoxOrient,
+                                   nsCSSProps::kBoxOrientKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetBoxPack(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& boxPackIdent =
-    nsCSSProps::ValueToKeyword(GetStyleXUL()->mBoxPack,
-                               nsCSSProps::kBoxPackKTable);
-  val->SetIdent(boxPackIdent);
+  val->SetIdent(nsCSSProps::ValueToKeywordEnum(GetStyleXUL()->mBoxPack,
+                                               nsCSSProps::kBoxPackKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetBoxSizing(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& boxSizingIdent =
-    nsCSSProps::ValueToKeyword(GetStylePosition()->mBoxSizing,
-                               nsCSSProps::kBoxSizingKTable);
-  val->SetIdent(boxSizingIdent);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStylePosition()->mBoxSizing,
+                                   nsCSSProps::kBoxSizingKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetBorderImage(nsIDOMCSSValue** aValue)
 {
   const nsStyleBorder* border = GetStyleBorder();
   
   // none
   if (!border->GetBorderImage()) {
     nsROCSSPrimitiveValue *valNone = GetROCSSPrimitiveValue();
     NS_ENSURE_TRUE(valNone, NS_ERROR_OUT_OF_MEMORY);
-    valNone->SetIdent(nsGkAtoms::none);
+    valNone->SetIdent(eCSSKeyword_none);
     return CallQueryInterface(valNone, aValue);
   }
   
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_FALSE);
   NS_ENSURE_TRUE(valueList, NS_ERROR_OUT_OF_MEMORY);
   
   // uri
   nsROCSSPrimitiveValue *valURI = GetROCSSPrimitiveValue();
@@ -2500,46 +2456,43 @@ nsComputedDOMStyle::GetBorderImage(nsIDO
   
   // first keyword
   nsROCSSPrimitiveValue *keyword = GetROCSSPrimitiveValue();
   if (!keyword || !valueList->AppendCSSValue(keyword)) {
     delete keyword;
     delete valueList;
     return NS_ERROR_OUT_OF_MEMORY;
   }
-  const nsAFlatCString& borderImageIdent =
-            nsCSSProps::ValueToKeyword(GetStyleBorder()->mBorderImageHFill,
-                                       nsCSSProps::kBorderImageKTable);
-  keyword->SetIdent(borderImageIdent);
+  keyword->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleBorder()->mBorderImageHFill,
+                                   nsCSSProps::kBorderImageKTable));
   
   // second keyword
   nsROCSSPrimitiveValue *keyword2 = GetROCSSPrimitiveValue();
   if (!keyword2 || !valueList->AppendCSSValue(keyword2)) {
     delete keyword2;
     delete valueList;
     return NS_ERROR_OUT_OF_MEMORY;
   }
-  const nsAFlatCString& borderImageIdent2 =
-            nsCSSProps::ValueToKeyword(GetStyleBorder()->mBorderImageVFill,
-                                       nsCSSProps::kBorderImageKTable);
-  keyword2->SetIdent(borderImageIdent2);
+  keyword2->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleBorder()->mBorderImageVFill,
+                                   nsCSSProps::kBorderImageKTable));
   
   return CallQueryInterface(valueList, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetFloatEdge(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& floatEdgeIdent =
-    nsCSSProps::ValueToKeyword(GetStyleBorder()->mFloatEdge,
-                               nsCSSProps::kFloatEdgeKTable);
-  val->SetIdent(floatEdgeIdent);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleBorder()->mFloatEdge,
+                                   nsCSSProps::kFloatEdgeKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetForceBrokenImageIcon(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
@@ -2562,149 +2515,129 @@ nsComputedDOMStyle::GetIMEMode(nsIDOMCSS
   if (uiData->mIMEMode == NS_STYLE_IME_MODE_AUTO) {
     keyword = eCSSKeyword_auto;
   } else if (uiData->mIMEMode == NS_STYLE_IME_MODE_NORMAL) {
     keyword = eCSSKeyword_normal;
   } else {
     keyword = nsCSSProps::ValueToKeywordEnum(uiData->mIMEMode,
                 nsCSSProps::kIMEModeKTable);
   }
-  val->SetIdent(nsCSSKeywords::GetStringValue(keyword));
+  val->SetIdent(keyword);
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetUserFocus(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleUserInterface *uiData = GetStyleUserInterface();
 
   if (uiData->mUserFocus != NS_STYLE_USER_FOCUS_NONE) {
     if (uiData->mUserFocus == NS_STYLE_USER_FOCUS_NORMAL) {
-      const nsAFlatCString& userFocusIdent =
-              nsCSSKeywords::GetStringValue(eCSSKeyword_normal);
-      val->SetIdent(userFocusIdent);
-    } else {
-      const nsAFlatCString& userFocusIdent =
-        nsCSSProps::ValueToKeyword(uiData->mUserFocus,
-                                   nsCSSProps::kUserFocusKTable);
-      val->SetIdent(userFocusIdent);
-    }
-  } else {
-    const nsAFlatCString& userFocusIdent =
-            nsCSSKeywords::GetStringValue(eCSSKeyword_none);
-    val->SetIdent(userFocusIdent);
+      val->SetIdent(eCSSKeyword_normal);
+    } else {
+      val->SetIdent(
+        nsCSSProps::ValueToKeywordEnum(uiData->mUserFocus,
+                                       nsCSSProps::kUserFocusKTable));
+    }
+  } else {
+    val->SetIdent(eCSSKeyword_none);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetUserInput(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleUserInterface *uiData = GetStyleUserInterface();
 
   if (uiData->mUserInput != NS_STYLE_USER_INPUT_AUTO) {
     if (uiData->mUserInput == NS_STYLE_USER_INPUT_NONE) {
-      const nsAFlatCString& userInputIdent =
-        nsCSSKeywords::GetStringValue(eCSSKeyword_none);
-      val->SetIdent(userInputIdent);
-    } else {
-      const nsAFlatCString& userInputIdent =
-        nsCSSProps::ValueToKeyword(uiData->mUserInput,
-                                   nsCSSProps::kUserInputKTable);
-      val->SetIdent(userInputIdent);
-    }
-  } else {
-    const nsAFlatCString& userInputIdent =
-            nsCSSKeywords::GetStringValue(eCSSKeyword_auto);
-    val->SetIdent(userInputIdent);
+      val->SetIdent(eCSSKeyword_none);
+    } else {
+      val->SetIdent(
+        nsCSSProps::ValueToKeywordEnum(uiData->mUserInput,
+                                       nsCSSProps::kUserInputKTable));
+    }
+  } else {
+    val->SetIdent(eCSSKeyword_auto);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetUserModify(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& userModifyIdent =
-    nsCSSProps::ValueToKeyword(GetStyleUserInterface()->mUserModify,
-                               nsCSSProps::kUserModifyKTable);
-  val->SetIdent(userModifyIdent);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleUserInterface()->mUserModify,
+                                   nsCSSProps::kUserModifyKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetUserSelect(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleUIReset *uiData = GetStyleUIReset();
 
   if (uiData->mUserSelect != NS_STYLE_USER_SELECT_AUTO) {
     if (uiData->mUserSelect == NS_STYLE_USER_SELECT_NONE) {
-      const nsAFlatCString& userSelectIdent =
-        nsCSSKeywords::GetStringValue(eCSSKeyword_none);
-      val->SetIdent(userSelectIdent);
-    } else {
-      const nsAFlatCString& userSelectIdent =
-        nsCSSProps::ValueToKeyword(uiData->mUserSelect,
-                                   nsCSSProps::kUserSelectKTable);
-      val->SetIdent(userSelectIdent);
-    }
-  } else {
-    const nsAFlatCString& userSelectIdent =
-            nsCSSKeywords::GetStringValue(eCSSKeyword_auto);
-    val->SetIdent(userSelectIdent);
+      val->SetIdent(eCSSKeyword_none);
+    } else {
+      val->SetIdent(
+        nsCSSProps::ValueToKeywordEnum(uiData->mUserSelect,
+                                       nsCSSProps::kUserSelectKTable));
+    }
+  } else {
+    val->SetIdent(eCSSKeyword_auto);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetDisplay(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleDisplay *displayData = GetStyleDisplay();
 
   if (displayData->mDisplay == NS_STYLE_DISPLAY_NONE) {
-    val->SetIdent(nsGkAtoms::none);
-  } else {
-    const nsAFlatCString& display =
-      nsCSSProps::ValueToKeyword(displayData->mDisplay,
-                                 nsCSSProps::kDisplayKTable);
-    val->SetIdent(display);
+    val->SetIdent(eCSSKeyword_none);
+  } else {
+    val->SetIdent(nsCSSProps::ValueToKeywordEnum(displayData->mDisplay,
+                                                 nsCSSProps::kDisplayKTable));
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetPosition(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& position =
-    nsCSSProps::ValueToKeyword(GetStyleDisplay()->mPosition,
-                               nsCSSProps::kPositionKTable);
-  val->SetIdent(position);
+  val->SetIdent(nsCSSProps::ValueToKeywordEnum(GetStyleDisplay()->mPosition,
+                                               nsCSSProps::kPositionKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetClip(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
@@ -2713,47 +2646,47 @@ nsComputedDOMStyle::GetClip(nsIDOMCSSVal
   const nsStyleDisplay* display = GetStyleDisplay();
 
   nsresult rv = NS_OK;
   nsROCSSPrimitiveValue *topVal = nsnull;
   nsROCSSPrimitiveValue *rightVal = nsnull;
   nsROCSSPrimitiveValue *bottomVal = nsnull;
   nsROCSSPrimitiveValue *leftVal = nsnull;
   if (display->mClipFlags == NS_STYLE_CLIP_AUTO) {
-    val->SetIdent(nsGkAtoms::_auto);
+    val->SetIdent(eCSSKeyword_auto);
   } else {
     // create the cssvalues for the sides, stick them in the rect object
     topVal = GetROCSSPrimitiveValue();
     rightVal = GetROCSSPrimitiveValue();
     bottomVal = GetROCSSPrimitiveValue();
     leftVal = GetROCSSPrimitiveValue();
     if (topVal && rightVal && bottomVal && leftVal) {
       nsDOMCSSRect * domRect = new nsDOMCSSRect(topVal, rightVal,
                                                 bottomVal, leftVal);
       if (domRect) {
         if (display->mClipFlags & NS_STYLE_CLIP_TOP_AUTO) {
-          topVal->SetIdent(nsGkAtoms::_auto);
+          topVal->SetIdent(eCSSKeyword_auto);
         } else {
           topVal->SetAppUnits(display->mClip.y);
         }
         
         if (display->mClipFlags & NS_STYLE_CLIP_RIGHT_AUTO) {
-          rightVal->SetIdent(nsGkAtoms::_auto);
+          rightVal->SetIdent(eCSSKeyword_auto);
         } else {
           rightVal->SetAppUnits(display->mClip.width + display->mClip.x);
         }
         
         if (display->mClipFlags & NS_STYLE_CLIP_BOTTOM_AUTO) {
-          bottomVal->SetIdent(nsGkAtoms::_auto);
+          bottomVal->SetIdent(eCSSKeyword_auto);
         } else {
           bottomVal->SetAppUnits(display->mClip.height + display->mClip.y);
         }
         
         if (display->mClipFlags & NS_STYLE_CLIP_LEFT_AUTO) {
-          leftVal->SetIdent(nsGkAtoms::_auto);
+          leftVal->SetIdent(eCSSKeyword_auto);
         } else {
           leftVal->SetAppUnits(display->mClip.x);
         }
 
         val->SetRect(domRect);
       } else {
         rv = NS_ERROR_OUT_OF_MEMORY;
       }
@@ -2786,96 +2719,90 @@ nsComputedDOMStyle::GetOverflow(nsIDOMCS
     *aValue = nsnull;
     return NS_OK;
   }
   
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   if (display->mOverflowX != NS_STYLE_OVERFLOW_AUTO) {
-    const nsAFlatCString& overflow =
-      nsCSSProps::ValueToKeyword(display->mOverflowX,
-                                 nsCSSProps::kOverflowKTable);
-    val->SetIdent(overflow);
-  } else {
-    val->SetIdent(nsGkAtoms::_auto);
+    val->SetIdent(nsCSSProps::ValueToKeywordEnum(display->mOverflowX,
+                                                 nsCSSProps::kOverflowKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_auto);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetOverflowX(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleDisplay* display = GetStyleDisplay();
 
   if (display->mOverflowX != NS_STYLE_OVERFLOW_AUTO) {
-    const nsAFlatCString& overflow =
-      nsCSSProps::ValueToKeyword(display->mOverflowX,
-                                 nsCSSProps::kOverflowSubKTable);
-    val->SetIdent(overflow);
-  } else {
-    val->SetIdent(nsGkAtoms::_auto);
+    val->SetIdent(nsCSSProps::ValueToKeywordEnum(
+                    display->mOverflowX, nsCSSProps::kOverflowSubKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_auto);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetOverflowY(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleDisplay* display = GetStyleDisplay();
 
   if (display->mOverflowY != NS_STYLE_OVERFLOW_AUTO) {
-    const nsAFlatCString& overflow =
-      nsCSSProps::ValueToKeyword(display->mOverflowY,
-                                 nsCSSProps::kOverflowSubKTable);
-    val->SetIdent(overflow);
-  } else {
-    val->SetIdent(nsGkAtoms::_auto);
+    val->SetIdent(nsCSSProps::ValueToKeywordEnum(
+                    display->mOverflowY, nsCSSProps::kOverflowSubKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_auto);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetPageBreakAfter(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleDisplay *display = GetStyleDisplay();
 
   if (display->mBreakAfter) {
-    val->SetIdent(nsGkAtoms::always);
-  } else {
-    val->SetIdent(nsGkAtoms::_auto);
+    val->SetIdent(eCSSKeyword_always);
+  } else {
+    val->SetIdent(eCSSKeyword_auto);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetPageBreakBefore(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleDisplay *display = GetStyleDisplay();
 
   if (display->mBreakBefore) {
-    val->SetIdent(nsGkAtoms::always);
-  } else {
-    val->SetIdent(nsGkAtoms::_auto);
+    val->SetIdent(eCSSKeyword_always);
+  } else {
+    val->SetIdent(eCSSKeyword_auto);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetHeight(nsIDOMCSSValue** aValue)
 {
@@ -3264,17 +3191,17 @@ nsComputedDOMStyle::GetBorderColorsFor(P
 
       return CallQueryInterface(valueList, aValue);
     }
   }
 
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  val->SetIdent(nsGkAtoms::none);
+  val->SetIdent(eCSSKeyword_none);
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetBorderWidthFor(PRUint8 aSide, nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
@@ -3335,22 +3262,20 @@ nsresult
 nsComputedDOMStyle::GetBorderStyleFor(PRUint8 aSide, nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   PRUint8 borderStyle = GetStyleBorder()->GetBorderStyle(aSide);
 
   if (borderStyle != NS_STYLE_BORDER_STYLE_NONE) {
-    const nsAFlatCString& style=
-      nsCSSProps::ValueToKeyword(borderStyle,
-                                 nsCSSProps::kBorderStyleKTable);
-    val->SetIdent(style);
-  } else {
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(nsCSSProps::ValueToKeywordEnum(
+                    borderStyle, nsCSSProps::kBorderStyleKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_none);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 void
 nsComputedDOMStyle::SetValueToCoord(nsROCSSPrimitiveValue* aValue,
                                     const nsStyleCoord& aCoord,
@@ -3358,21 +3283,21 @@ nsComputedDOMStyle::SetValueToCoord(nsRO
                                     const PRInt32 aTable[],
                                     nscoord aMinAppUnits,
                                     nscoord aMaxAppUnits)
 {
   NS_PRECONDITION(aValue, "Must have a value to work with");
   
   switch (aCoord.GetUnit()) {
     case eStyleUnit_Normal:
-      aValue->SetIdent(nsGkAtoms::normal);
+      aValue->SetIdent(eCSSKeyword_normal);
       break;
       
     case eStyleUnit_Auto:
-      aValue->SetIdent(nsGkAtoms::_auto);
+      aValue->SetIdent(eCSSKeyword_auto);
       break;
       
     case eStyleUnit_Percent:
       {
         nscoord percentageBase;
         if (aPercentageBaseGetter &&
             (this->*aPercentageBaseGetter)(percentageBase)) {
           nscoord val = nscoord(aCoord.GetPercentValue() * percentageBase);
@@ -3395,22 +3320,22 @@ nsComputedDOMStyle::SetValueToCoord(nsRO
       break;
       
     case eStyleUnit_Integer:
       aValue->SetNumber(aCoord.GetIntValue());
       break;
       
     case eStyleUnit_Enumerated:
       NS_ASSERTION(aTable, "Must have table to handle this case");
-      aValue->SetIdent(nsCSSProps::ValueToKeyword(aCoord.GetIntValue(),
-                                                  aTable));
+      aValue->SetIdent(nsCSSProps::ValueToKeywordEnum(aCoord.GetIntValue(),
+                                                      aTable));
       break;
       
     case eStyleUnit_None:
-      aValue->SetIdent(nsGkAtoms::none);
+      aValue->SetIdent(eCSSKeyword_none);
       break;
       
     default:
       NS_ERROR("Can't handle this unit");
       break;
   }
 }
 
@@ -3540,17 +3465,17 @@ nsComputedDOMStyle::GetSVGPaintFor(PRBoo
   else
     paint = &svg->mStroke;
 
   nsAutoString paintString;
 
   switch (paint->mType) {
   case eStyleSVGPaintType_None:
   {
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
     break;
   }
   case eStyleSVGPaintType_Color:
   {
     nsresult rv = SetToRGBAColor(val, paint->mPaint.mColor);
     if (NS_FAILED(rv)) {
       delete val;
       return rv;
@@ -3607,62 +3532,62 @@ nsComputedDOMStyle::GetMarkerEnd(nsIDOMC
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVG* svg = GetStyleSVG();
 
   if (svg->mMarkerEnd)
     val->SetURI(svg->mMarkerEnd);
   else
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetMarkerMid(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVG* svg = GetStyleSVG();
 
   if (svg->mMarkerMid)
     val->SetURI(svg->mMarkerMid);
   else
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetMarkerStart(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVG* svg = GetStyleSVG();
 
   if (svg->mMarkerStart)
     val->SetURI(svg->mMarkerStart);
   else
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetStrokeDasharray(nsIDOMCSSValue** aValue)
 {
   const nsStyleSVG* svg = GetStyleSVG();
 
   if (!svg->mStrokeDasharrayLength || !svg->mStrokeDasharray) {
     nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
     NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
     return CallQueryInterface(val, aValue);
   }
 
   nsDOMCSSValueList *valueList = GetROCSSValueList(PR_TRUE);
   NS_ENSURE_TRUE(valueList, NS_ERROR_OUT_OF_MEMORY);
 
   for (PRUint32 i = 0; i < svg->mStrokeDasharrayLength; i++) {
     nsROCSSPrimitiveValue* dash = GetROCSSPrimitiveValue();
@@ -3756,195 +3681,180 @@ nsComputedDOMStyle::GetStrokeOpacity(nsI
 }
 
 nsresult
 nsComputedDOMStyle::GetClipRule(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& keyword =
-    nsCSSProps::ValueToKeyword(GetStyleSVG()->mClipRule,
-                               nsCSSProps::kFillRuleKTable);
-  val->SetIdent(keyword);
+  val->SetIdent(nsCSSProps::ValueToKeywordEnum(
+                  GetStyleSVG()->mClipRule, nsCSSProps::kFillRuleKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetFillRule(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& keyword =
-    nsCSSProps::ValueToKeyword(GetStyleSVG()->mFillRule,
-                               nsCSSProps::kFillRuleKTable);
-  val->SetIdent(keyword);
+  val->SetIdent(nsCSSProps::ValueToKeywordEnum(
+                  GetStyleSVG()->mFillRule, nsCSSProps::kFillRuleKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetStrokeLinecap(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& keyword =
-    nsCSSProps::ValueToKeyword(GetStyleSVG()->mStrokeLinecap,
-                               nsCSSProps::kStrokeLinecapKTable);
-  val->SetIdent(keyword);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleSVG()->mStrokeLinecap,
+                                   nsCSSProps::kStrokeLinecapKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetStrokeLinejoin(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& keyword =
-    nsCSSProps::ValueToKeyword(GetStyleSVG()->mStrokeLinejoin,
-                               nsCSSProps::kStrokeLinejoinKTable);
-  val->SetIdent(keyword);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleSVG()->mStrokeLinejoin,
+                                   nsCSSProps::kStrokeLinejoinKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetTextAnchor(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  const nsAFlatCString& keyword =
-    nsCSSProps::ValueToKeyword(GetStyleSVG()->mTextAnchor,
-                               nsCSSProps::kTextAnchorKTable);
-  val->SetIdent(keyword);
+  val->SetIdent(
+    nsCSSProps::ValueToKeywordEnum(GetStyleSVG()->mTextAnchor,
+                                   nsCSSProps::kTextAnchorKTable));
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetColorInterpolation(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVG* svg = GetStyleSVG();
 
   if (svg->mColorInterpolation != NS_STYLE_COLOR_INTERPOLATION_AUTO) {
-    const nsAFlatCString& keyword =
-      nsCSSProps::ValueToKeyword(svg->mColorInterpolation,
-                                 nsCSSProps::kColorInterpolationKTable);
-    val->SetIdent(keyword);
-  } else {
-    val->SetIdent(nsGkAtoms::_auto);
+    val->SetIdent(
+      nsCSSProps::ValueToKeywordEnum(svg->mColorInterpolation,
+                                     nsCSSProps::kColorInterpolationKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_auto);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetColorInterpolationFilters(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVG* svg = GetStyleSVG();
 
   if (svg->mColorInterpolationFilters != NS_STYLE_COLOR_INTERPOLATION_AUTO) {
-    const nsAFlatCString& keyword =
-      nsCSSProps::ValueToKeyword(svg->mColorInterpolationFilters,
-                                 nsCSSProps::kColorInterpolationKTable);
-    val->SetIdent(keyword);
-  } else {
-    val->SetIdent(nsGkAtoms::_auto);
+    val->SetIdent(
+      nsCSSProps::ValueToKeywordEnum(svg->mColorInterpolationFilters,
+                                     nsCSSProps::kColorInterpolationKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_auto);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetDominantBaseline(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVGReset* svg = GetStyleSVGReset();
 
   if (svg->mDominantBaseline != NS_STYLE_DOMINANT_BASELINE_AUTO) {
-    const nsAFlatCString& keyword =
-      nsCSSProps::ValueToKeyword(svg->mDominantBaseline,
-                                 nsCSSProps::kDominantBaselineKTable);
-    val->SetIdent(keyword);
-  } else {
-    val->SetIdent(nsGkAtoms::_auto);
+    val->SetIdent(
+      nsCSSProps::ValueToKeywordEnum(svg->mDominantBaseline,
+                                     nsCSSProps::kDominantBaselineKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_auto);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetPointerEvents(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVG* svg = GetStyleSVG();
 
   if (svg->mPointerEvents != NS_STYLE_POINTER_EVENTS_NONE) {
-    const nsAFlatCString& keyword =
-      nsCSSProps::ValueToKeyword(svg->mPointerEvents,
-                                 nsCSSProps::kPointerEventsKTable);
-    val->SetIdent(keyword);
-  } else {
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(
+      nsCSSProps::ValueToKeywordEnum(svg->mPointerEvents,
+                                     nsCSSProps::kPointerEventsKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_none);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetShapeRendering(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVG* svg = GetStyleSVG();
 
   if (svg->mShapeRendering != NS_STYLE_SHAPE_RENDERING_AUTO) {
-    const nsAFlatCString& keyword =
-      nsCSSProps::ValueToKeyword(svg->mShapeRendering,
-                                 nsCSSProps::kShapeRenderingKTable);
-    val->SetIdent(keyword);
-  } else {
-    val->SetIdent(nsGkAtoms::_auto);
+    val->SetIdent(nsCSSProps::ValueToKeywordEnum(
+                    svg->mShapeRendering, nsCSSProps::kShapeRenderingKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_auto);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetTextRendering(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVG* svg = GetStyleSVG();
 
   if (svg->mTextRendering != NS_STYLE_TEXT_RENDERING_AUTO) {
-    const nsAFlatCString& keyword =
-      nsCSSProps::ValueToKeyword(svg->mTextRendering,
-                                 nsCSSProps::kTextRenderingKTable);
-    val->SetIdent(keyword);
-  } else {
-    val->SetIdent(nsGkAtoms::_auto);
+    val->SetIdent(nsCSSProps::ValueToKeywordEnum(
+                    svg->mTextRendering, nsCSSProps::kTextRenderingKTable));
+  } else {
+    val->SetIdent(eCSSKeyword_auto);
   }
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetFloodColor(nsIDOMCSSValue** aValue)
 {
@@ -3996,49 +3906,49 @@ nsComputedDOMStyle::GetClipPath(nsIDOMCS
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVGReset* svg = GetStyleSVGReset();
 
   if (svg->mClipPath)
     val->SetURI(svg->mClipPath);
   else
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetFilter(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVGReset* svg = GetStyleSVGReset();
 
   if (svg->mFilter)
     val->SetURI(svg->mFilter);
   else
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetMask(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVGReset* svg = GetStyleSVGReset();
 
   if (svg->mMask)
     val->SetURI(svg->mMask);
   else
-    val->SetIdent(nsGkAtoms::none);
+    val->SetIdent(eCSSKeyword_none);
 
   return CallQueryInterface(val, aValue);
 }
 
 #endif // MOZ_SVG
 
 
 #define COMPUTED_STYLE_MAP_ENTRY(_prop, _method)              \
