From: L. David Baron <dbaron@dbaron.org>

Rewrap long argument lists to CSS_PROP macros.  Whitespace changes only.  (Bug 504652)

diff --git a/layout/style/nsCSSDataBlock.cpp b/layout/style/nsCSSDataBlock.cpp
--- a/layout/style/nsCSSDataBlock.cpp
+++ b/layout/style/nsCSSDataBlock.cpp
@@ -563,23 +563,25 @@ nsCSSExpandedDataBlock::nsCSSExpandedDat
 
 nsCSSExpandedDataBlock::~nsCSSExpandedDataBlock()
 {
     AssertInitialState();
 }
 
 const nsCSSExpandedDataBlock::PropertyOffsetInfo
 nsCSSExpandedDataBlock::kOffsetTable[eCSSProperty_COUNT_no_shorthands] = {
-    #define CSS_PROP_BACKENDONLY(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_) \
-        { offsetof(nsCSSExpandedDataBlock, m##datastruct_.member_),           \
-          size_t(-1),                                                         \
+    #define CSS_PROP_BACKENDONLY(name_, id_, method_, flags_, datastruct_,     \
+                                 member_, type_, kwtable_)                     \
+        { offsetof(nsCSSExpandedDataBlock, m##datastruct_.member_),            \
+          size_t(-1),                                                          \
           size_t(-1) },
-    #define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_, stylestruct_, stylestructoffset_, animtype_) \
-        { offsetof(nsCSSExpandedDataBlock, m##datastruct_.member_),           \
-          offsetof(nsRuleData, m##datastruct_##Data),                         \
+    #define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_, \
+                     kwtable_, stylestruct_, stylestructoffset_, animtype_)    \
+        { offsetof(nsCSSExpandedDataBlock, m##datastruct_.member_),            \
+          offsetof(nsRuleData, m##datastruct_##Data),                          \
           offsetof(nsRuleData##datastruct_, member_) },
     #include "nsCSSPropList.h"
     #undef CSS_PROP
     #undef CSS_PROP_BACKENDONLY
 };
 
 void
 nsCSSExpandedDataBlock::DoExpand(nsCSSCompressedDataBlock *aBlock,
diff --git a/layout/style/nsCSSProperty.h b/layout/style/nsCSSProperty.h
--- a/layout/style/nsCSSProperty.h
+++ b/layout/style/nsCSSProperty.h
@@ -46,17 +46,19 @@
    enum values are "eCSSProperty_foo" (where foo is the property)
 
    To change the list of properties, see nsCSSPropList.h
 
  */
 enum nsCSSProperty {
   eCSSProperty_UNKNOWN = -1,
 
-  #define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_, stylestruct_, stylestructoffset_, animtype_) eCSSProperty_##id_,
+  #define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_,   \
+                   kwtable_, stylestruct_, stylestructoffset_, animtype_)      \
+    eCSSProperty_##id_,
   #include "nsCSSPropList.h"
   #undef CSS_PROP
 
   eCSSProperty_COUNT_no_shorthands,
   // Make the count continue where it left off:
   eCSSProperty_COUNT_DUMMY = eCSSProperty_COUNT_no_shorthands - 1,
 
   #define CSS_PROP_SHORTHAND(name_, id_, method_, flags_) eCSSProperty_##id_,
diff --git a/layout/style/nsCSSProps.cpp b/layout/style/nsCSSProps.cpp
--- a/layout/style/nsCSSProps.cpp
+++ b/layout/style/nsCSSProps.cpp
@@ -54,17 +54,19 @@
 #include "nsReadableUtils.h"
 #include "nsStaticNameTable.h"
 
 // required to make the symbol external, so that TestCSSPropertyLookup.cpp can link with it
 extern const char* const kCSSRawProperties[];
 
 // define an array of all CSS properties
 const char* const kCSSRawProperties[] = {
-#define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_, stylestruct_, stylestructoffset_, animtype_) #name_,
+#define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_,     \
+                 kwtable_, stylestruct_, stylestructoffset_, animtype_)        \
+  #name_,
 #include "nsCSSPropList.h"
 #undef CSS_PROP
 #define CSS_PROP_SHORTHAND(name_, id_, method_, flags_) #name_,
 #include "nsCSSPropList.h"
 #undef CSS_PROP_SHORTHAND
 };
 
 
@@ -1374,17 +1376,19 @@ nsCSSProps::ValueToKeyword(PRInt32 aValu
     return sNullStr;
   } else {
     return nsCSSKeywords::GetStringValue(keyword);
   }
 }
 
 /* static */ const PRInt32* const
 nsCSSProps::kKeywordTableTable[eCSSProperty_COUNT_no_shorthands] = {
-  #define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_, stylestruct_, stylestructoffset_, animtype_) kwtable_,
+  #define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_,   \
+                   kwtable_, stylestruct_, stylestructoffset_, animtype_)      \
+    kwtable_,
   #include "nsCSSPropList.h"
   #undef CSS_PROP
 };
 
 const nsAFlatCString& 
 nsCSSProps::LookupPropertyValue(nsCSSProperty aProp, PRInt32 aValue)
 {
   NS_ASSERTION(aProp >= 0 && aProp < eCSSProperty_COUNT, "property out of range");
@@ -1414,50 +1418,58 @@ PRBool nsCSSProps::GetColorName(PRInt32 
     nsCSSKeywords::ReleaseTable();
     rv = PR_TRUE;
   }
   return rv;
 }
 
 // define array of all CSS property types
 const nsCSSType nsCSSProps::kTypeTable[eCSSProperty_COUNT_no_shorthands] = {
-    #define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_, stylestruct_, stylestructoffset_, animtype_) type_,
+    #define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_, \
+                     kwtable_, stylestruct_, stylestructoffset_, animtype_)    \
+        type_,
     #include "nsCSSPropList.h"
     #undef CSS_PROP
 };
 
 const nsStyleStructID nsCSSProps::kSIDTable[eCSSProperty_COUNT_no_shorthands] = {
     // Note that this uses the special BackendOnly style struct ID
     // (which does need to be valid for storing in the
     // nsCSSCompressedDataBlock::mStyleBits bitfield).
-    #define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_, stylestruct_, stylestructoffset_, animtype_) eStyleStruct_##stylestruct_,
+    #define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_, \
+                     kwtable_, stylestruct_, stylestructoffset_, animtype_)    \
+        eStyleStruct_##stylestruct_,
 
     #include "nsCSSPropList.h"
 
     #undef CSS_PROP
 };
 
 const nsStyleAnimType
 nsCSSProps::kAnimTypeTable[eCSSProperty_COUNT_no_shorthands] = {
-#define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_, stylestruct_, stylestructoffset_, animtype_) \
+#define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_,     \
+                 kwtable_, stylestruct_, stylestructoffset_, animtype_)        \
   animtype_,
 #include "nsCSSPropList.h"
 #undef CSS_PROP
 };
 
 const ptrdiff_t
 nsCSSProps::kStyleStructOffsetTable[eCSSProperty_COUNT_no_shorthands] = {
-#define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_, stylestruct_, stylestructoffset_, animtype_) \
+#define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_,     \
+                 kwtable_, stylestruct_, stylestructoffset_, animtype_)        \
   stylestructoffset_,
 #include "nsCSSPropList.h"
 #undef CSS_PROP
 };
 
 const PRUint32 nsCSSProps::kFlagsTable[eCSSProperty_COUNT] = {
-#define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_, stylestruct_, stylestructoffset_, animtype_) flags_,
+#define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_,     \
+                 kwtable_, stylestruct_, stylestructoffset_, animtype_)        \
+  flags_,
 #include "nsCSSPropList.h"
 #undef CSS_PROP
 #define CSS_PROP_SHORTHAND(name_, id_, method_, flags_) flags_,
 #include "nsCSSPropList.h"
 #undef CSS_PROP_SHORTHAND
 };
 
 static const nsCSSProperty gMozBorderRadiusSubpropTable[] = {
diff --git a/layout/style/nsDOMCSSDeclaration.cpp b/layout/style/nsDOMCSSDeclaration.cpp
--- a/layout/style/nsDOMCSSDeclaration.cpp
+++ b/layout/style/nsDOMCSSDeclaration.cpp
@@ -375,17 +375,18 @@ NS_IMETHODIMP
 CSS2PropertiesTearoff::QueryInterface(REFNSIID aIID, void** aInstancePtr)
 {
   return mOuter->QueryInterface(aIID, aInstancePtr);
 }
 
 // nsIDOMCSS2Properties
 // nsIDOMNSCSS2Properties
 
-#define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_, stylestruct_, stylestructoffset_, animtype_) \
+#define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_,   \
+                 kwtable_, stylestruct_, stylestructoffset_, animtype_)      \
   NS_IMETHODIMP                                                              \
   CSS2PropertiesTearoff::Get##method_(nsAString& aValue)                     \
   {                                                                          \
     return mOuter->GetPropertyValue(eCSSProperty_##id_, aValue);             \
   }                                                                          \
                                                                              \
   NS_IMETHODIMP                                                              \
   CSS2PropertiesTearoff::Set##method_(const nsAString& aValue)               \
diff --git a/layout/style/test/ListCSSProperties.cpp b/layout/style/test/ListCSSProperties.cpp
--- a/layout/style/test/ListCSSProperties.cpp
+++ b/layout/style/test/ListCSSProperties.cpp
@@ -43,34 +43,36 @@
 
 struct PropertyInfo {
     const char *propName;
     const char *domName;
 };
 
 const PropertyInfo gLonghandProperties[] = {
 
-#define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_, stylestruct_, stylestructoffset_, animtype_) \
+#define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_,     \
+                 kwtable_, stylestruct_, stylestructoffset_, animtype_)        \
     { #name_, #method_ },
 
 #include "nsCSSPropList.h"
 
 #undef CSS_PROP
 
 };
 
 /*
  * These are the properties for which domName in the above list should
  * be used.  They're in the same order as the above list, with some
  * items skipped.
  */
 const char* gLonghandPropertiesWithDOMProp[] = {
 
 #define CSS_PROP_LIST_EXCLUDE_INTERNAL
-#define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_, kwtable_, stylestruct_, stylestructoffset_, animtype_) \
+#define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_, type_,     \
+                 kwtable_, stylestruct_, stylestructoffset_, animtype_)        \
     #name_,
 
 #include "nsCSSPropList.h"
 
 #undef CSS_PROP
 #undef CSS_PROP_LIST_EXCLUDE_INTERNAL
 
 };
