Use PlaceTopBottomFrames for the children of the root span, too.  b=118501

diff --git a/layout/generic/nsLineLayout.cpp b/layout/generic/nsLineLayout.cpp
--- a/layout/generic/nsLineLayout.cpp
+++ b/layout/generic/nsLineLayout.cpp
@@ -1461,43 +1461,12 @@ nsLineLayout::VerticalAlignLine()
 #ifdef DEBUG
     NS_ASSERTION(0xFF != pfd->mVerticalAlign, "umr");
 #endif
-    switch (pfd->mVerticalAlign) {
-      case VALIGN_TOP:
-        if (span) {
-          pfd->mBounds.y = mTopEdge - pfd->mBorderPadding.top +
-            span->mTopLeading;
-        }
-        else {
-          pfd->mBounds.y = mTopEdge + pfd->mMargin.top;
-        }
-        break;
-      case VALIGN_BOTTOM:
-        if (span) {
-          // Compute bottom leading
-          pfd->mBounds.y = mTopEdge + lineHeight -
-            pfd->mBounds.height + pfd->mBorderPadding.bottom -
-            span->mBottomLeading;
-        }
-        else {
-          pfd->mBounds.y = mTopEdge + lineHeight - pfd->mMargin.bottom -
-            pfd->mBounds.height;
-        }
-        break;
-      case VALIGN_OTHER:
-        pfd->mBounds.y += baselineY;
-        break;
-    }
-    pfd->mFrame->SetRect(pfd->mBounds);
-#ifdef NOISY_VERTICAL_ALIGN
-    printf("  [child of line]");
-    nsFrame::ListTag(stdout, pfd->mFrame);
-    printf(": y=%d\n", pfd->mBounds.y);
-#endif
-    if (span) {
-      nscoord distanceFromTop = pfd->mBounds.y - mTopEdge;
-      PlaceTopBottomFrames(span, distanceFromTop, lineHeight);
+    if (pfd->mVerticalAlign == VALIGN_OTHER) {
+      pfd->mBounds.y += baselineY;
+      pfd->mFrame->SetRect(pfd->mBounds);
     }
   }
+  PlaceTopBottomFrames(psd, -mTopEdge, lineHeight);
 
   // Fill in returned line-box and max-element-width data
   mLineBox->mBounds.x = psd->mLeftEdge;
