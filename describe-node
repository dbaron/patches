From: L. David Baron <dbaron@dbaron.org>

Add nsINode::DescribeNode for use in debugging.

diff --git a/dom/base/nsINode.cpp b/dom/base/nsINode.cpp
--- a/dom/base/nsINode.cpp
+++ b/dom/base/nsINode.cpp
@@ -85,16 +85,17 @@
 #include "nsPIBoxObject.h"
 #include "nsPIDOMWindow.h"
 #include "nsPresContext.h"
 #ifdef MOZ_OLD_STYLE
 #include "nsRuleProcessorData.h"
 #endif
 #include "nsString.h"
 #include "nsStyleConsts.h"
+#include "nsStyleUtil.h"
 #include "nsSVGUtils.h"
 #include "nsTextNode.h"
 #include "nsUnicharUtils.h"
 #include "nsXBLBinding.h"
 #include "nsXBLPrototypeBinding.h"
 #include "mozilla/Preferences.h"
 #include "xpcpublic.h"
 #ifdef MOZ_OLD_STYLE
@@ -158,16 +159,109 @@ nsINode::nsSlots::Unlink()
 //----------------------------------------------------------------------
 
 nsINode::~nsINode()
 {
   MOZ_ASSERT(!HasSlots(), "nsNodeUtils::LastRelease was not called?");
   MOZ_ASSERT(mSubtreeRoot == this, "Didn't restore state properly?");
 }
 
+#ifdef DEBUG
+void
+nsINode::DescribeNode(nsAString& aDestString, uint32_t aDepthLimit)
+{
+  AutoTArray<nsINode*, 64> stack;
+  for (nsINode* n = this; n && aDepthLimit-- != 0; n = n->GetParentNode()) {
+    stack.AppendElement(n);
+  }
+
+  if (stack.IsEmpty()) {
+    return;
+  }
+
+  for (uint32_t stackIdx = stack.Length(); stackIdx-- != 0; ) {
+    nsINode* n = stack[stackIdx];
+    switch (n->NodeType()) {
+      case ELEMENT_NODE: {
+        Element* e = n->AsElement();
+        // tag name
+        nsStyleUtil::AppendEscapedCSSIdent(n->NodeName(), aDestString);
+        // id
+        nsAtom* id = e->GetID();
+        if (id) {
+          aDestString.AppendASCII("#");
+          nsStyleUtil::AppendEscapedCSSIdent(
+            nsDependentAtomString(id), aDestString);
+        }
+        // classes
+        const nsAttrValue *classes = e->GetClasses();
+        if (classes) {
+          for (uint32_t classIdx = 0, classEnd = classes->GetAtomCount();
+               classIdx < classEnd; ++classIdx) {
+            aDestString.AppendASCII(".");
+            nsStyleUtil::AppendEscapedCSSIdent(
+              nsDependentAtomString(classes->AtomAt(classIdx)), aDestString);
+          }
+        }
+
+        // index in parent
+        // nsNthIndexCache wants the element to have a non-null GetParent(),
+        // not just a non-null GetParentNode().
+        nsIContent* parent = n->GetParent();
+        if (parent && parent->GetChildCount() > 1) {
+          nsNthIndexCache cache;
+          int32_t index = cache.GetNthIndex(e, false, false, false);
+          aDestString.AppendASCII(":nth-child(");
+          aDestString.AppendInt(index);
+          aDestString.AppendASCII(")");
+        }
+        break;
+      }
+      case DOCUMENT_NODE: {
+        nsIDocument* doc = n->OwnerDoc();
+        nsIURI* uri = doc->GetDocumentURI();
+        nsAutoCString spec;
+        if (uri) {
+          uri->GetSpec(spec);
+        }
+        aDestString.AppendASCII("::document(");
+        nsStyleUtil::AppendEscapedCSSString(
+          NS_ConvertUTF8toUTF16(spec), aDestString);
+        aDestString.AppendASCII(")");
+        break;
+      }
+      default: {
+        aDestString.AppendASCII("::node(");
+        const nsString& nodeName = n->NodeName();
+        if (!nodeName.IsEmpty() && nodeName.First() == '#') {
+          nsStyleUtil::AppendEscapedCSSIdent(Substring(nodeName, 1),
+                                             aDestString);
+          nsAutoString nodeValue;
+          n->GetNodeValue(nodeValue);
+          if (!nodeValue.IsEmpty()) {
+            aDestString.AppendASCII(", ");
+            nsStyleUtil::AppendEscapedCSSString(nodeValue, aDestString);
+          }
+        } else {
+          aDestString.AppendASCII("type ");
+          aDestString.AppendInt(n->NodeType());
+          aDestString.AppendASCII(", ");
+          nsStyleUtil::AppendEscapedCSSString(nodeName, aDestString);
+        }
+        aDestString.AppendASCII(")");
+        break;
+      }
+    }
+    if (stackIdx != 0) {
+      aDestString.AppendASCII(" > ");
+    }
+  }
+}
+#endif
+
 void*
 nsINode::GetProperty(uint16_t aCategory, nsAtom *aPropertyName,
                      nsresult *aStatus) const
 {
   if (!HasProperties()) { // a fast HasFlag() test
     if (aStatus) {
       *aStatus = NS_PROPTABLE_PROP_NOT_THERE;
     }
diff --git a/dom/base/nsINode.h b/dom/base/nsINode.h
--- a/dom/base/nsINode.h
+++ b/dom/base/nsINode.h
@@ -732,16 +732,25 @@ public:
 
   bool IsShadowRoot() const
   {
     const bool isShadowRoot = IsInShadowTree() && !GetParentNode();
     MOZ_ASSERT_IF(isShadowRoot, NodeType() == DOCUMENT_FRAGMENT_NODE);
     return isShadowRoot;
   }
 
+#ifdef DEBUG
+  /**
+   * Append a description of this node, in CSS selector-like form, to
+   * the given UTF-16 string.  The result is intended to be usable for
+   * printing to the console or to logs during debugging.
+   */
+   void DescribeNode(nsAString& aDestString, uint32_t aDepthLimit = UINT32_MAX);
+#endif
+
   /**
    * Insert a content node before another or at the end.
    * This method handles calling BindToTree on the child appropriately.
    *
    * @param aKid the content to insert
    * @param aBeforeThis an existing node. Use nullptr if you want to
    *        add aKid at the end.
    * @param aNotify whether to notify the document (current document for
