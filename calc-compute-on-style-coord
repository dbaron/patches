From: L. David Baron <dbaron@dbaron.org>

Add API to compute length, percentage or calc() style coords.  (Bug 363249)

diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -513,17 +513,17 @@ SpecifiedCalcToComputedCalc(const nsCSSV
 // FIXME: Need to clamp nscoords resulting from arithmetic ops.
 struct ComputeComputedCalcCalcOps : public css::BasicCoordCalcOps
 {
   typedef nsStyleCoord input_type;
   typedef nsStyleCoord::Array input_array_type;
 
   static nsCSSUnit GetUnit(const nsStyleCoord& aValue)
   {
-    return ConvertCalcUnit(aValue.GetUnit());
+    return css::ConvertCalcUnit(aValue.GetUnit());
   }
 
   const nscoord mPercentageBasis;
 
   ComputeComputedCalcCalcOps(nscoord aPercentageBasis)
     : mPercentageBasis(aPercentageBasis)
   {
   }
@@ -553,16 +553,32 @@ struct ComputeComputedCalcCalcOps : publ
 /* static */ nscoord
 nsRuleNode::ComputeComputedCalc(const nsStyleCoord& aValue,
                                 nscoord aPercentageBasis)
 {
   ComputeComputedCalcCalcOps ops(aPercentageBasis);
   return css::ComputeCalc(aValue, ops);
 }
 
+/* static */ nscoord
+nsRuleNode::ComputeCoordPercentCalc(const nsStyleCoord& aCoord,
+                                    nscoord aPercentageBasis)
+{
+  switch (aCoord.GetUnit()) {
+    case eStyleUnit_Coord:
+      return aCoord.GetCoordValue();
+    case eStyleUnit_Percent:
+      return NSCoordSaturatingMultiply(aPercentageBasis,
+                                       aCoord.GetPercentValue());
+    default:
+      NS_ABORT_IF_FALSE(aCoord.IsCalcUnit(), "unexpected unit");
+      return nsRuleNode::ComputeComputedCalc(aCoord, aPercentageBasis);
+  }
+}
+
 #define SETCOORD_NORMAL                 0x01   // N
 #define SETCOORD_AUTO                   0x02   // A
 #define SETCOORD_INHERIT                0x04   // H
 #define SETCOORD_PERCENT                0x08   // P
 #define SETCOORD_FACTOR                 0x10   // F
 #define SETCOORD_LENGTH                 0x20   // L
 #define SETCOORD_INTEGER                0x40   // I
 #define SETCOORD_ENUMERATED             0x80   // E
diff --git a/layout/style/nsRuleNode.h b/layout/style/nsRuleNode.h
--- a/layout/style/nsRuleNode.h
+++ b/layout/style/nsRuleNode.h
@@ -57,16 +57,18 @@ struct nsCSSStruct;
 struct nsCSSValueList;
 // Copy of typedef that's in nsCSSStruct.h, for compilation speed.
 typedef nsCSSStruct nsRuleDataStruct;
 
 struct nsRuleDataFont;
 class nsCSSValue;
 struct nsCSSRect;
 
+class nsStyleCoord;
+
 struct nsInheritedStyleData
 {
 
 #define STYLE_STRUCT_INHERITED(name, checkdata_cb, ctor_args) \
   nsStyle##name * m##name##Data;
 #define STYLE_STRUCT_RESET(name, checkdata_cb, ctor_args)
 
 #include "nsStyleStructList.h"
@@ -757,16 +759,21 @@ public:
                             PRBool& aCanStoreInRuleTree);
 
   // Compute the value of an nsStyleCoord that IsCalcUnit().
   // (Values that don't require aPercentageBasis should be handled
   // inside nsRuleNode rather than through this API.)
   static nscoord ComputeComputedCalc(const nsStyleCoord& aCoord,
                                      nscoord aPercentageBasis);
 
+  // Compute the value of an nsStyleCoord that is either a coord, a
+  // percent, or a calc expression.
+  static nscoord ComputeCoordPercentCalc(const nsStyleCoord& aCoord,
+                                         nscoord aPercentageBasis);
+
   // Return whether the rule tree for which this node is the root has
   // cached data such that we need to do dynamic change handling for
   // changes that change the results of media queries or require
   // rebuilding all style data.
   PRBool TreeHasCachedData() const {
     NS_ASSERTION(IsRoot(), "should only be called on root of rule tree");
     return HaveChildren() || mStyleData.mInheritedData || mStyleData.mResetData;
   }
