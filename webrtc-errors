From: L. David Baron <dbaron@dbaron.org>

Fix fatal warnings in webrtc code with -Wwrite-strings.

diff --git a/media/webrtc/signaling/src/sipcc/core/ccapp/cc_device_manager.c b/media/webrtc/signaling/src/sipcc/core/ccapp/cc_device_manager.c
--- a/media/webrtc/signaling/src/sipcc/core/ccapp/cc_device_manager.c
+++ b/media/webrtc/signaling/src/sipcc/core/ccapp/cc_device_manager.c
@@ -32,17 +32,17 @@
 mgmt_state_t mgmtState = MGMT_STATE_IDLE;
 //int parse_config_properties (int device_handle, const char *device_name, const char *cfg, int from_memory);
 static boolean isStartRequestPending = FALSE;
 static boolean isServiceStopped = TRUE;
 
 extern cc_boolean is_action_to_be_deferred(cc_action_t action);
 
 
-char *mgmt_event_to_str (int evt) {
+const char *mgmt_event_to_str (int evt) {
 
     switch (evt) {
         case EV_CC_CREATE:
             return "EV_CC_CREATE";
         case EV_CC_START:
             return "EV_CC_START";
         case EV_CC_CONFIG_RECEIVED:
             return "EV_CC_CONFIG_RECEIVED";
@@ -68,17 +68,17 @@ char *mgmt_event_to_str (int evt) {
             return "EV_CC_IP_VALID";
         case EV_CC_IP_INVALID:
             return "EV_CC_IP_INVALID";
     }
 
     return "EV_INVALID";
 }
 
-char *mgmt_state_to_str (int state) {
+const char *mgmt_state_to_str (int state) {
 
     switch (state) {
         case MGMT_STATE_IDLE:
             return "MGMT_STATE_IDLE";
         case MGMT_STATE_CREATED:
             return "MGMT_STATE_CREATED";
         case MGMT_STATE_REGISTERING:
             return "MGMT_STATE_REGISTERING";
diff --git a/media/webrtc/signaling/src/sipcc/core/ccapp/ccprovider.c b/media/webrtc/signaling/src/sipcc/core/ccapp/ccprovider.c
--- a/media/webrtc/signaling/src/sipcc/core/ccapp/ccprovider.c
+++ b/media/webrtc/signaling/src/sipcc/core/ccapp/ccprovider.c
@@ -970,17 +970,17 @@ processSessionEvent (line_t line_id, cal
     }
 }
 
 void CCAppShutdown()
 {
 }
 
 
-static char * ccapp_cmd_to_str(unsigned int cmd) {
+static const char * ccapp_cmd_to_str(unsigned int cmd) {
    switch (cmd) {
      case CMD_INSERVICE:
          return "CMD_INSERVICE";
      case CMD_SHUTDOWN:
          return "CMD_SHUTDOWN";
      case CMD_RESTART:
          return "CMD_RESTART";
      case CMD_UNREGISTER_ALL_LINES:
diff --git a/media/webrtc/signaling/src/sipcc/core/common/config_api.c b/media/webrtc/signaling/src/sipcc/core/common/config_api.c
--- a/media/webrtc/signaling/src/sipcc/core/common/config_api.c
+++ b/media/webrtc/signaling/src/sipcc/core/common/config_api.c
@@ -110,17 +110,17 @@ config_set_string (int id, char *buffer)
  *
  *  Returns: none
  */
 /*
  * Some logical upper limit to avoid long print out in case
  * of large length value
  */
 void
-print_config_value (int id, char *get_set, const char *entry_name,
+print_config_value (int id, const char *get_set, const char *entry_name,
                     void *buffer, int length)
 {
     long  long_val  = 0;
     int   int_val   = 0;
     short short_val = 0;
     char  char_val  = 0;
     char  str[MAX_CONFIG_VAL_PRINT_LEN];
     char *in_ptr;
diff --git a/media/webrtc/signaling/src/sipcc/core/common/config_parser.c b/media/webrtc/signaling/src/sipcc/core/common/config_parser.c
--- a/media/webrtc/signaling/src/sipcc/core/common/config_parser.c
+++ b/media/webrtc/signaling/src/sipcc/core/common/config_parser.c
@@ -41,17 +41,17 @@ static char autoreg_name[MAX_LINE_NAME_S
 
 static char fcpTemplateFile[FILE_PATH] = "";
 
 char g_cfg_version_stamp[MAX_CFG_VERSION_STAMP_LEN + 1] = {0};
 int line = -1;  //initialize line to -1, as 0 is valid line
 boolean apply_config = FALSE;
 cc_apply_config_result_t apply_config_result = APPLY_CONFIG_NONE;
 extern var_t prot_cfg_table[];
-void print_config_value (int id, char *get_set, const char *entry_name, void *buffer, int length);
+void print_config_value (int id, const char *get_set, const char *entry_name, void *buffer, int length);
 
 static int sip_port[MAX_CCM];
 static int secured_sip_port[MAX_CCM];
 static int security_mode = 3; /*SECURE*/
 extern accessory_cfg_info_t g_accessoryCfgInfo;
 
 // Configurable settings
 static int gTransportLayerProtocol = 4;   //  4 = tcp, 2 = udp
diff --git a/media/webrtc/signaling/src/sipcc/core/common/plat.c b/media/webrtc/signaling/src/sipcc/core/common/plat.c
--- a/media/webrtc/signaling/src/sipcc/core/common/plat.c
+++ b/media/webrtc/signaling/src/sipcc/core/common/plat.c
@@ -48,39 +48,39 @@ platform_apply_config (char * configVers
                        char * inactiveLoadId,
                        char * loadServer,
                        char * logServer,
                        boolean ppid)
 {
     static const char fname[] = "platform_apply_config";
     session_mgmt_t msg;
 
-    fcpVersionStamp = (fcpVersionStamp != NULL) ? fcpVersionStamp : "";
+    const char *fcpVersionStamp2 = (fcpVersionStamp != NULL) ? fcpVersionStamp : "";
 
     /// Print the arguments
     CCAPP_DEBUG(DEB_F_PREFIX"   configVersionStamp=%s \ndialplanVersionStamp=%s"
            "\nfcpVersionStamp=%s \ncucmResult=%s "
            "\nloadId=%s \ninactiveLoadId=%s \nloadServer=%s \nlogServer=%s "
            "\nppid=%s\n", DEB_F_PREFIX_ARGS(PLAT_API, fname),
            (configVersionStamp != NULL) ? configVersionStamp : "",
            (dialplanVersionStamp != NULL) ? dialplanVersionStamp:"",
-           fcpVersionStamp,
+           fcpVersionStamp2,
            cucmResult != NULL ? cucmResult: "",
            (loadId != NULL) ? loadId : "",
            (inactiveLoadId != NULL) ? inactiveLoadId : "",
            (loadServer != NULL) ? loadServer : "",
            (logServer != NULL) ? logServer : "",
            ppid == TRUE? "True": "False");
 
 
     // following data is freed in function freeSessionMgmtData()
     msg.func_id = SESSION_MGMT_APPLY_CONFIG;
     msg.data.config.config_version_stamp = STRLIB_CREATE(configVersionStamp);
     msg.data.config.dialplan_version_stamp = STRLIB_CREATE(dialplanVersionStamp);
-    msg.data.config.fcp_version_stamp = STRLIB_CREATE(fcpVersionStamp);
+    msg.data.config.fcp_version_stamp = STRLIB_CREATE(fcpVersionStamp2);
     msg.data.config.cucm_result = STRLIB_CREATE(cucmResult);
     msg.data.config.load_id = STRLIB_CREATE(loadId);
     msg.data.config.inactive_load_id = STRLIB_CREATE(inactiveLoadId);
     msg.data.config.load_server = STRLIB_CREATE(loadServer);
     msg.data.config.log_server = STRLIB_CREATE(logServer);
     msg.data.config.ppid = ppid;
 
     if ( ccappTaskPostMsg(CCAPP_SESSION_MGMT, &msg, sizeof(session_mgmt_t), CCAPP_CCPROVIER) != CPR_SUCCESS ) {
diff --git a/media/webrtc/signaling/src/sipcc/core/common/ui.c b/media/webrtc/signaling/src/sipcc/core/common/ui.c
--- a/media/webrtc/signaling/src/sipcc/core/common/ui.c
+++ b/media/webrtc/signaling/src/sipcc/core/common/ui.c
@@ -988,17 +988,17 @@ ui_set_local_hold (line_t line, callid_t
  *
  *  @param line       - line identifier
  *  @param cfa        - call forward all true/false
  *  @param cfa_number - string representing call forwarded to number
  *
  *  @return none
  */
 void
-ui_cfwd_status (line_t line, boolean cfa, char *cfa_number, boolean lcl_fwd)
+ui_cfwd_status (line_t line, boolean cfa, const char *cfa_number, boolean lcl_fwd)
 {
     feature_update_t msg;
 
     TNP_DEBUG(DEB_F_PREFIX"line=%d cfa=%d cfa_number=%s lcl_fwd=%d", DEB_F_PREFIX_ARGS(UI_API, __FUNCTION__),
               line, cfa, cfa_number, lcl_fwd);
 
     msg.sessionType = SESSIONTYPE_CALLCONTROL;
     msg.featureID = DEVICE_FEATURE_CFWD;
@@ -1232,17 +1232,17 @@ ui_call_in_preservation (line_t line_id,
  * @param call_id     - call identifier
  * @param set_name    - name of the softkey set
  * @param sk_mask_list - the softkey events that need to be masked
  * @param len          - length of the softkey list array
  *
  * @return  none
  */
 void
-ui_select_feature_key_set (line_t line_id, callid_t call_id, char *set_name,
+ui_select_feature_key_set (line_t line_id, callid_t call_id, const char *set_name,
                            int sk_mask_list[], int len)
 {
     int i;
     session_update_t msg;
     memset( &msg, 0, sizeof(session_update_t));
 
     TNP_DEBUG(DEB_L_C_F_PREFIX"called", DEB_L_C_F_PREFIX_ARGS(UI_API, line_id, call_id, __FUNCTION__));
 
diff --git a/media/webrtc/signaling/src/sipcc/core/includes/phntask.h b/media/webrtc/signaling/src/sipcc/core/includes/phntask.h
--- a/media/webrtc/signaling/src/sipcc/core/includes/phntask.h
+++ b/media/webrtc/signaling/src/sipcc/core/includes/phntask.h
@@ -299,11 +299,11 @@ enum {
 #define TIMER_THREAD_RELATIVE_PRIORITY  0
 #define GSM_THREAD_RELATIVE_PRIORITY    -1
 #define SIP_THREAD_RELATIVE_PRIORITY    -1
 #define APP_THREAD_RELATIVE_PRIORITY    -1
 #define CCPROVIDER_THREAD_RELATIVE_PRIORITY    -1
 
 #endif
 
-extern int platThreadInit(char *threadName);
+extern int platThreadInit(const char *threadName);
 
 #endif /* PHNTASK_H */
diff --git a/media/webrtc/signaling/src/sipcc/core/includes/uiapi.h b/media/webrtc/signaling/src/sipcc/core/includes/uiapi.h
--- a/media/webrtc/signaling/src/sipcc/core/includes/uiapi.h
+++ b/media/webrtc/signaling/src/sipcc/core/includes/uiapi.h
@@ -120,31 +120,31 @@ char *ui_get_idle_prompt_string(void);
 void ui_set_idle_prompt_string(string_t pString, int prompt);
 void ui_set_notification(line_t line, callid_t callID,
                          char *promptString, int timeout,
                          boolean notifyProgress, char priority);
 void ui_clear_notification();
 
 /* softkey manipulation */
 void ui_control_feature(line_t line_id, callid_t call_id, int list[], int len, int enable);
-void ui_select_feature_key_set(line_t line_id, callid_t call_id, char *set_name,
+void ui_select_feature_key_set(line_t line_id, callid_t call_id, const char *set_name,
                                int sk_list[], int len);
 void ui_control_featurekey_bksp(line_t line_id, callid_t call_id,
                                 boolean enable);
 
 /* speaker */
 void ui_set_speaker_mode(boolean mode);
 
 /* mwi */
 void ui_set_mwi(line_t line, boolean status, int type, int newCount, int oldCount, int hpNewCount, int hpOldCount);
 void ui_change_mwi_lamp(int status);
 boolean ui_line_has_mwi_active(line_t line);
 
 /* call forward */
-void ui_cfwd_status(line_t line, boolean cfa, char *cfa_number,
+void ui_cfwd_status(line_t line, boolean cfa, const char *cfa_number,
                     boolean lcl_fwd);
 
 /* registration, stack init related */
 void ui_sip_config_done(void);
 void ui_set_sip_registration_state(line_t line, boolean registered);
 void ui_reg_all_failed(void);
 
 void ui_keypad_button(char *digitstr, int direction);
diff --git a/media/webrtc/signaling/src/sipcc/core/sipstack/ccsip_task.c b/media/webrtc/signaling/src/sipcc/core/sipstack/ccsip_task.c
--- a/media/webrtc/signaling/src/sipcc/core/sipstack/ccsip_task.c
+++ b/media/webrtc/signaling/src/sipcc/core/sipstack/ccsip_task.c
@@ -52,17 +52,17 @@
 
 #if defined SIP_OS_WINDOWS
 #include "../win32/cpr_win_defines.h"
 #endif
 
 
 
 extern sipSCB_t *find_scb_by_callid(const char *callID, int *scb_index);
-extern int platThreadInit(char *);
+extern int platThreadInit(const char *);
 void sip_platform_handle_service_control_notify(sipServiceControl_t *scp);
 short SIPTaskProcessTimerExpiration(void *msg, uint32_t *cmd);
 extern cprMsgQueue_t gsm_msgq;
 extern void ccsip_dump_recv_msg_info(sipMessage_t *pSIPMessage,
                                cpr_ip_addr_t *cc_remote_ipaddr,
                                uint16_t cc_remote_port);
 
 // Global variables
diff --git a/media/webrtc/signaling/src/sipcc/include/plat_api.h b/media/webrtc/signaling/src/sipcc/include/plat_api.h
--- a/media/webrtc/signaling/src/sipcc/include/plat_api.h
+++ b/media/webrtc/signaling/src/sipcc/include/plat_api.h
@@ -221,17 +221,17 @@ typedef enum {
  * Called by the thread to initialize any thread specific data
  * once the thread is created.
  *
  * @param[in] tname       thread name
  *
  * @return 0 - SUCCESS
  *        -1 - FAILURE
  */
-int platThreadInit(char * tname);
+int platThreadInit(const char * tname);
 
 /**
  * The initial initialization function for any platform related
  * modules
  *
  *
  * @return 0 - SUCCESS
  *        -1 - FAILURE
diff --git a/media/webrtc/signaling/src/sipcc/plat/darwin/plat_api_stub.c b/media/webrtc/signaling/src/sipcc/plat/darwin/plat_api_stub.c
--- a/media/webrtc/signaling/src/sipcc/plat/darwin/plat_api_stub.c
+++ b/media/webrtc/signaling/src/sipcc/plat/darwin/plat_api_stub.c
@@ -8,17 +8,17 @@
 #include "cc_constants.h"
 #include "cpr_socket.h"
 #include "plat_api.h"
 
 /**
  * Initialize the platform threa.
  * @todo add more explanation here.
  */
-int platThreadInit(char * tname)
+int platThreadInit(const char * tname)
 {
     return 0;
 }
 
 /**
  * The initial initialization function for any platform related
  * modules
  *
diff --git a/media/webrtc/signaling/src/sipcc/plat/win32/plat_api_stub.c b/media/webrtc/signaling/src/sipcc/plat/win32/plat_api_stub.c
--- a/media/webrtc/signaling/src/sipcc/plat/win32/plat_api_stub.c
+++ b/media/webrtc/signaling/src/sipcc/plat/win32/plat_api_stub.c
@@ -8,17 +8,17 @@
 #include "plat_api.h"
 #include "plat_debug.h"
 #include "phone_types.h"
 
 /**
  * Initialize the platform threa.
  * @todo add more explanation here.
  */
-int sipcc_platThreadInit(char * tname)
+int sipcc_platThreadInit(const char * tname)
 {
     return 0;
 }
 
 /**
  * The initial initialization function for any platform related
  * modules
  *
diff --git a/media/webrtc/signaling/src/softphonewrapper/ccapi_plat_api_impl.cpp b/media/webrtc/signaling/src/softphonewrapper/ccapi_plat_api_impl.cpp
--- a/media/webrtc/signaling/src/softphonewrapper/ccapi_plat_api_impl.cpp
+++ b/media/webrtc/signaling/src/softphonewrapper/ccapi_plat_api_impl.cpp
@@ -121,17 +121,17 @@ void platGetMacAddr(char *maddr) {
  * Called by the thread to initialize any thread specific data
  * once the thread is created.
  *
  * @param[in] tname       thread name
  *
  * @return 0 - SUCCESS
  *        -1 - FAILURE
  */
-int platThreadInit(char * tname) {
+int platThreadInit(const char * tname) {
     return 0;
 }
 
 /**
  * The initial initialization function for any platform related
  * modules
  *
  *
