Avoid recursion when handling mNegations in CalcWeight.  (Bug 473908)

diff --git a/layout/style/nsCSSStyleRule.cpp b/layout/style/nsCSSStyleRule.cpp
--- a/layout/style/nsCSSStyleRule.cpp
+++ b/layout/style/nsCSSStyleRule.cpp
@@ -410,17 +410,17 @@ void nsCSSSelector::AddAttribute(PRInt32
   }
 }
 
 void nsCSSSelector::SetOperator(PRUnichar aOperator)
 {
   mOperator = aOperator;
 }
 
-PRInt32 nsCSSSelector::CalcWeight(void) const
+PRInt32 nsCSSSelector::CalcWeightWithoutNegations() const
 {
   PRInt32 weight = 0;
 
   if (nsnull != mTag) {
     weight += 0x000001;
   }
   nsAtomList* list = mIDList;
   while (nsnull != list) {
@@ -437,18 +437,25 @@ PRInt32 nsCSSSelector::CalcWeight(void) 
     weight += 0x000100;
     plist = plist->mNext;
   }
   nsAttrSelector* attr = mAttrList;
   while (nsnull != attr) {
     weight += 0x000100;
     attr = attr->mNext;
   }
-  if (nsnull != mNegations) {
-    weight += mNegations->CalcWeight();
+  return weight;
+}
+
+PRInt32 nsCSSSelector::CalcWeight() const
+{
+  // Loop over this selector and all its negations.
+  PRInt32 weight = 0;
+  for (nsCSSSelector *n = this; n; n = n->mNegations) {
+    weight += n->CalcWeight();
   }
   return weight;
 }
 
 // pseudo-elements are stored in the selectors' chain using fictional elements;
 // these fictional elements have mTag starting with a colon
 static PRBool IsPseudoElement(nsIAtom* aAtom)
 {
diff --git a/layout/style/nsICSSStyleRule.h b/layout/style/nsICSSStyleRule.h
--- a/layout/style/nsICSSStyleRule.h
+++ b/layout/style/nsICSSStyleRule.h
@@ -158,33 +158,37 @@ public:
   void AddPseudoClass(nsIAtom* aPseudoClass);
   void AddPseudoClass(nsIAtom* aPseudoClass, const PRUnichar* aString);
   void AddPseudoClass(nsIAtom* aPseudoClass, const PRInt32* aIntPair);
   void AddAttribute(PRInt32 aNameSpace, const nsString& aAttr);
   void AddAttribute(PRInt32 aNameSpace, const nsString& aAttr, PRUint8 aFunc, 
                     const nsString& aValue, PRBool aCaseSensitive);
   void SetOperator(PRUnichar aOperator);
 
-  PRInt32 CalcWeight(void) const;
+  // Calculate the specificity of this selector (not including its mNext!).
+  PRInt32 CalcWeight() const;
 
   void ToString(nsAString& aString, nsICSSStyleSheet* aSheet,
                 PRBool aAppend = PR_FALSE) const;
 
 private:
   void AddPseudoClassInternal(nsPseudoClassList *aPseudoClass);
   nsCSSSelector* Clone(PRBool aDeepNext, PRBool aDeepNegations) const;
 
   void AppendNegationToString(nsAString& aString);
   void ToStringInternal(nsAString& aString, nsICSSStyleSheet* aSheet,
                         PRBool aIsPseudoElem,
                         PRBool aIsNegated) const;
   // Returns true if this selector can have a namespace specified (which
   // happens if and only if the default namespace would apply to this
   // selector).
   PRBool CanBeNamespaced(PRBool aIsNegated) const;
+  // Calculate the specificity of this selector (not including its mNext
+  // or its mNegations).
+  PRInt32 CalcWeightWithoutNegations() const;
 
 public:
   PRInt32         mNameSpace;
   nsCOMPtr<nsIAtom> mTag;
   nsAtomList*     mIDList;
   nsAtomList*     mClassList;
   nsPseudoClassList* mPseudoClassList; // atom for the pseudo, string for
                                        // the argument to functional pseudos
diff --git a/layout/style/test/test_cascade.html b/layout/style/test/test_cascade.html
--- a/layout/style/test/test_cascade.html
+++ b/layout/style/test/test_cascade.html
@@ -94,13 +94,31 @@ do_test("body#thebody div", false, "body
 do_test("body div.content_class", false, "body#thebody div", false, 2);
 
 // Test specificity combined with !important
 do_test("div.content_class", false, "div", false, 1);
 do_test("div.content_class", true, "div", false, 1);
 do_test("div.content_class", false, "div", true, 2);
 do_test("div.content_class", true, "div", true, 1);
 
+function do_test_greater(sel1, sel2) {
+  do_test(sel1, false, sel2, false, 1);
+  do_test(sel2, false, sel1, false, 2);
+}
+
+function do_test_equal(sel1, sel2) {
+  do_test(sel1, false, sel2, false, 2);
+  do_test(sel2, false, sel1, false, 2);
+}
+
+// Test specificity of contents of :not()
+do_test_equal("div.content_class", "div:not(.wrong_class)");
+do_test_greater("div.content_class.content_class", "div.content_class");
+do_test_greater("div.content_class", "div");
+do_test_greater("div:not(.wrong_class)", "div");
+do_test_greater("div:not(.wrong_class):not(.wrong_class)",
+                "div:not(.wrong_class)");
+
 </script>
 </pre>
 </body>
 </html>
 
