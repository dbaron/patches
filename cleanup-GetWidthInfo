Remove now-unneeded argument from GetWidthInfo.  (Bug 466108)

diff --git a/layout/tables/BasicTableLayoutStrategy.cpp b/layout/tables/BasicTableLayoutStrategy.cpp
--- a/layout/tables/BasicTableLayoutStrategy.cpp
+++ b/layout/tables/BasicTableLayoutStrategy.cpp
@@ -96,75 +96,74 @@ struct CellWidthInfo {
 
     PRBool hasSpecifiedWidth;
     nscoord minCoord;
     nscoord prefCoord;
     float prefPercent;
 };
 
 // Used for both column and cell calculations.  The parts needed only
-// for cells are skipped when aCellFrame is null.
+// for cells are skipped when aIsCell is false.
 static CellWidthInfo
 GetWidthInfo(nsIRenderingContext *aRenderingContext,
-             nsIFrame *aFrame,
-             PRBool aIsCell,
-             const nsStylePosition *aStylePos)
+             nsIFrame *aFrame, PRBool aIsCell)
 {
     nscoord minCoord, prefCoord;
     if (aIsCell) {
         minCoord = aFrame->GetMinWidth(aRenderingContext);
         prefCoord = aFrame->GetPrefWidth(aRenderingContext);
     } else {
         minCoord = 0;
         prefCoord = 0;
     }
     float prefPercent = 0.0f;
     PRBool hasSpecifiedWidth = PR_FALSE;
 
     // XXXldb Should we consider -moz-box-sizing?
 
-    nsStyleUnit unit = aStylePos->mWidth.GetUnit();
+    const nsStylePosition *stylePos = aFrame->GetStylePosition();
+    nsStyleUnit unit = stylePos->mWidth.GetUnit();
     if (unit == eStyleUnit_Coord) {
         hasSpecifiedWidth = PR_TRUE;
         nscoord w = nsLayoutUtils::ComputeWidthValue(aRenderingContext,
-                      aFrame, 0, 0, 0, aStylePos->mWidth);
+                      aFrame, 0, 0, 0, stylePos->mWidth);
         // Quirk: A cell with "nowrap" set and a coord value for the
         // width which is bigger than the intrinsic minimum width uses
         // that coord value as the minimum width.
-        // This is kept up-to-date with dynamic chnages to nowrap by code in
+        // This is kept up-to-date with dynamic changes to nowrap by code in
         // nsTableCellFrame::AttributeChanged
         if (aIsCell && w > minCoord &&
             aFrame->PresContext()->CompatibilityMode() ==
               eCompatibility_NavQuirks &&
             aFrame->GetContent()->HasAttr(kNameSpaceID_None,
                                           nsGkAtoms::nowrap)) {
             minCoord = w;
         }
         prefCoord = PR_MAX(w, minCoord);
     } else if (unit == eStyleUnit_Percent) {
-        prefPercent = aStylePos->mWidth.GetPercentValue();
+        prefPercent = stylePos->mWidth.GetPercentValue();
     } else if (unit == eStyleUnit_Enumerated && aIsCell) {
-        switch (aStylePos->mWidth.GetIntValue()) {
+        switch (stylePos->mWidth.GetIntValue()) {
             case NS_STYLE_WIDTH_MAX_CONTENT:
                 // 'width' only affects pref width, not min
                 // width, so don't change anything
                 break;
             case NS_STYLE_WIDTH_MIN_CONTENT:
                 prefCoord = minCoord;
                 break;
             case NS_STYLE_WIDTH_FIT_CONTENT:
             case NS_STYLE_WIDTH_AVAILABLE:
                 // act just like 'width: auto'
                 break;
             default:
                 NS_NOTREACHED("unexpected enumerated value");
         }
     }
 
-    nsStyleCoord maxWidth(aStylePos->mMaxWidth);
+    nsStyleCoord maxWidth(stylePos->mMaxWidth);
     if (maxWidth.GetUnit() == eStyleUnit_Enumerated) {
         if (!aIsCell || maxWidth.GetIntValue() == NS_STYLE_WIDTH_AVAILABLE)
             maxWidth.SetNoneValue();
         else if (maxWidth.GetIntValue() == NS_STYLE_WIDTH_FIT_CONTENT)
             // for 'max-width', '-moz-fit-content' is like
             // '-moz-max-content'
             maxWidth.SetIntValue(NS_STYLE_WIDTH_MAX_CONTENT,
                                  eStyleUnit_Enumerated);
@@ -176,22 +175,22 @@ GetWidthInfo(nsIRenderingContext *aRende
         nscoord w =
             nsLayoutUtils::ComputeWidthValue(aRenderingContext, aFrame,
                                              0, 0, 0, maxWidth);
         if (w < minCoord)
             minCoord = w;
         if (w < prefCoord)
             prefCoord = w;
     } else if (unit == eStyleUnit_Percent) {
-        float p = aStylePos->mMaxWidth.GetPercentValue();
+        float p = stylePos->mMaxWidth.GetPercentValue();
         if (p < prefPercent)
             prefPercent = p;
     }
 
-    nsStyleCoord minWidth(aStylePos->mMinWidth);
+    nsStyleCoord minWidth(stylePos->mMinWidth);
     if (minWidth.GetUnit() == eStyleUnit_Enumerated) {
         if (!aIsCell || minWidth.GetIntValue() == NS_STYLE_WIDTH_AVAILABLE)
             minWidth.SetCoordValue(0);
         else if (minWidth.GetIntValue() == NS_STYLE_WIDTH_FIT_CONTENT)
             // for 'min-width', '-moz-fit-content' is like
             // '-moz-min-content'
             minWidth.SetIntValue(NS_STYLE_WIDTH_MIN_CONTENT,
                                  eStyleUnit_Enumerated);
@@ -201,17 +200,17 @@ GetWidthInfo(nsIRenderingContext *aRende
         nscoord w =
             nsLayoutUtils::ComputeWidthValue(aRenderingContext, aFrame,
                                              0, 0, 0, minWidth);
         if (w > minCoord)
             minCoord = w;
         if (w > prefCoord)
             prefCoord = w;
     } else if (unit == eStyleUnit_Percent) {
-        float p = aStylePos->mMinWidth.GetPercentValue();
+        float p = stylePos->mMinWidth.GetPercentValue();
         if (p > prefPercent)
             prefPercent = p;
     }
 
     // XXX Should col frame have border/padding considered?
     if (aIsCell) {
         nsIFrame::IntrinsicWidthOffsetData offsets =
             aFrame->IntrinsicWidthOffsets(aRenderingContext);
@@ -223,26 +222,24 @@ GetWidthInfo(nsIRenderingContext *aRende
 
     return CellWidthInfo(minCoord, prefCoord, prefPercent, hasSpecifiedWidth);
 }
 
 static inline CellWidthInfo
 GetCellWidthInfo(nsIRenderingContext *aRenderingContext,
                  nsTableCellFrame *aCellFrame)
 {
-    return GetWidthInfo(aRenderingContext, aCellFrame, PR_TRUE,
-                        aCellFrame->GetStylePosition());
+    return GetWidthInfo(aRenderingContext, aCellFrame, PR_TRUE);
 }
 
 static inline CellWidthInfo
 GetColWidthInfo(nsIRenderingContext *aRenderingContext,
                 nsIFrame *aFrame)
 {
-    return GetWidthInfo(aRenderingContext, aFrame, PR_FALSE,
-                        aFrame->GetStylePosition());
+    return GetWidthInfo(aRenderingContext, aFrame, PR_FALSE);
 }
 
 
 /**
  * The algorithm in this function, in addition to meeting the
  * requirements of Web-compatibility, is also invariant under reordering
  * of the rows within a table (something that most, but not all, other
  * browsers are).
