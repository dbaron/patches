Avoid exponential growth of special height reflows.  (Bug 438509)

diff --git a/layout/generic/nsHTMLReflowState.cpp b/layout/generic/nsHTMLReflowState.cpp
--- a/layout/generic/nsHTMLReflowState.cpp
+++ b/layout/generic/nsHTMLReflowState.cpp
@@ -400,20 +400,23 @@ nsHTMLReflowState::InitResizeFlags(nsPre
     mStylePosition->mOffset.GetBottomUnit() != eStyleUnit_Auto ||
     frame->IsBoxFrame() ||
     (mStylePosition->mHeight.GetUnit() == eStyleUnit_Auto &&
      frame->GetIntrinsicSize().height.GetUnit() == eStyleUnit_Percent);
 
   // If we're the descendant of a table cell that performs special height
   // reflows and we could be the child that requires them, always set
   // the vertical resize in case this is the first pass before the
-  // special height reflow.
+  // special height reflow.  However, don't do this if it actually is
+  // the special height reflow, since in that case it will already be
+  // set correctly above if we need it set.
   if (!mFlags.mVResize && mCBReflowState &&
       (IS_TABLE_CELL(mCBReflowState->frame->GetType()) || 
        mCBReflowState->mFlags.mHeightDependsOnAncestorCell) &&
+      !mCBReflowState->mFlags.mSpecialHeightReflow && 
       dependsOnCBHeight) {
     mFlags.mVResize = PR_TRUE;
     mFlags.mHeightDependsOnAncestorCell = PR_TRUE;
   }
 
   // Set NS_FRAME_CONTAINS_RELATIVE_HEIGHT if it's needed.
 
   // It would be nice to check that |mComputedHeight != NS_AUTOHEIGHT|
diff --git a/layout/tables/nsTableFrame.cpp b/layout/tables/nsTableFrame.cpp
--- a/layout/tables/nsTableFrame.cpp
+++ b/layout/tables/nsTableFrame.cpp
@@ -1876,17 +1876,26 @@ NS_METHOD nsTableFrame::Reflow(nsPresCon
   aDesiredSize.width = aReflowState.availableWidth;
 
   // Check for an overflow list, and append any row group frames being pushed
   MoveOverflowToChildList(aPresContext);
 
   PRBool haveDesiredHeight = PR_FALSE;
   SetHaveReflowedColGroups(PR_FALSE);
 
-  if (aReflowState.ComputedHeight() != NS_UNCONSTRAINEDSIZE ||
+      // If we have a constrained computed height that is either
+      // different, or something inside us is different, or we're being
+      // reflowed at a different size, we could need to undo the effects
+      // of a previous special height reflow in order to distribute
+      // heights correctly again.
+  if ((aReflowState.ComputedHeight() != NS_UNCONSTRAINEDSIZE &&
+       (aReflowState.ComputedHeight() +
+          aReflowState.mComputedBorderPadding.TopBottom() != GetSize().height ||
+        NS_SUBTREE_DIRTY(this) ||
+        aReflowState.mFlags.mHResize)) ||
       // Also check mVResize, to handle the first Reflow preceding a
       // special height Reflow, when we've already had a special height
       // Reflow (where mComputedHeight would not be
       // NS_UNCONSTRAINEDSIZE, but without a style change in between).
       aReflowState.mFlags.mVResize) {
     // XXX Eventually, we should modify DistributeHeightToRows to use
     // nsTableRowFrame::GetHeight instead of nsIFrame::GetSize().height.
     // That way, it will make its calculations based on internal table
@@ -1901,17 +1910,17 @@ NS_METHOD nsTableFrame::Reflow(nsPresCon
   // constrained initial reflow and other reflows which require either a strategy init or balance. 
   // This isn't done during an unconstrained reflow, because it will occur later when the parent 
   // reflows with a constrained width.
   PRBool needToInitiateSpecialReflow =
     !!(GetStateBits() & NS_FRAME_CONTAINS_RELATIVE_HEIGHT);
   if (NS_SUBTREE_DIRTY(this) ||
       aReflowState.ShouldReflowAllKids() ||
       IsGeometryDirty() ||
-      needToInitiateSpecialReflow) {
+      (needToInitiateSpecialReflow && aReflowState.mFlags.mVResize)) {
     // see if an extra reflow will be necessary in pagination mode when there is a specified table height 
     if (isPaginated && !GetPrevInFlow() && (NS_UNCONSTRAINEDSIZE != aReflowState.availableHeight)) {
       nscoord tableSpecifiedHeight = CalcBorderBoxHeight(aReflowState);
       if ((tableSpecifiedHeight > 0) && 
           (tableSpecifiedHeight != NS_UNCONSTRAINEDSIZE)) {
         needToInitiateSpecialReflow = PR_TRUE;
       }
     }
