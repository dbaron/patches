Remove eCSSUnit_Proportional and eStyleUnit_Proportional, which were used only for a removed feature.  b=333352

diff --git a/content/html/content/src/nsHTMLTableColElement.cpp b/content/html/content/src/nsHTMLTableColElement.cpp
--- a/content/html/content/src/nsHTMLTableColElement.cpp
+++ b/content/html/content/src/nsHTMLTableColElement.cpp
@@ -163,10 +163,6 @@ void MapAttributesIntoRule(const nsMappe
         aData->mPositionData->mWidth.SetFloatValue((float)value->GetIntegerValue(), eCSSUnit_Pixel);
         break;
       }
-      case nsAttrValue::eProportional: {
-        aData->mPositionData->mWidth.SetFloatValue((float)value->GetProportionalValue(), eCSSUnit_Proportional);
-        break;
-      }
       default:
         break;
       }
diff --git a/layout/style/nsCSSDeclaration.cpp b/layout/style/nsCSSDeclaration.cpp
--- a/layout/style/nsCSSDeclaration.cpp
+++ b/layout/style/nsCSSDeclaration.cpp
@@ -506,8 +506,6 @@ nsCSSDeclaration::AppendCSSValueToString
 
     case eCSSUnit_Pixel:        aResult.AppendLiteral("px");   break;
 
-    case eCSSUnit_Proportional: aResult.AppendLiteral("*");   break;
-
     case eCSSUnit_Degree:       aResult.AppendLiteral("deg");  break;
     case eCSSUnit_Grad:         aResult.AppendLiteral("grad"); break;
     case eCSSUnit_Radian:       aResult.AppendLiteral("rad");  break;
diff --git a/layout/style/nsCSSValue.h b/layout/style/nsCSSValue.h
--- a/layout/style/nsCSSValue.h
+++ b/layout/style/nsCSSValue.h
@@ -106,9 +106,6 @@ enum nsCSSUnit {
   // Screen relative measure
   eCSSUnit_Pixel        = 900,    // (float) CSS pixel unit
 
-  // Proportional Unit (for columns in tables)
-  eCSSUnit_Proportional = 950, 
-
   // Angular units
   eCSSUnit_Degree       = 1000,    // (float) 360 per circle
   eCSSUnit_Grad         = 1001,    // (float) 400 per circle
@@ -165,11 +162,11 @@ public:
 
   nsCSSUnit GetUnit() const { return mUnit; }
   PRBool    IsLengthUnit() const
-    { return PRBool((eCSSUnit_Inch <= mUnit) && (mUnit <= eCSSUnit_Proportional)); }
+    { return PRBool((eCSSUnit_Inch <= mUnit) && (mUnit <= eCSSUnit_Pixel)); }
   PRBool    IsFixedLengthUnit() const  
     { return PRBool((eCSSUnit_Inch <= mUnit) && (mUnit <= eCSSUnit_Cicero)); }
   PRBool    IsRelativeLengthUnit() const  
-    { return PRBool((eCSSUnit_EM <= mUnit) && (mUnit <= eCSSUnit_Proportional)); }
+    { return PRBool((eCSSUnit_EM <= mUnit) && (mUnit <= eCSSUnit_Pixel)); }
   PRBool    IsAngularUnit() const  
     { return PRBool((eCSSUnit_Degree <= mUnit) && (mUnit <= eCSSUnit_Radian)); }
   PRBool    IsFrequencyUnit() const  
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -2772,7 +2772,6 @@ nsComputedDOMStyle::SetValueToCoord(nsRO
       break;
       
     default:
-      // eStyleUnit_Proportional
       NS_ERROR("Can't handle this unit");
       break;
   }
diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -3587,11 +3587,8 @@ nsRuleNode::ComputePositionData(nsStyleS
     }
   }
 
-  if (posData.mWidth.GetUnit() == eCSSUnit_Proportional)
-    pos->mWidth.SetIntValue((PRInt32)(posData.mWidth.GetFloatValue()), eStyleUnit_Proportional);
-  else 
-    SetCoord(posData.mWidth, pos->mWidth, parentPos->mWidth,
-             SETCOORD_LPAEH, aContext, mPresContext, inherited);
+  SetCoord(posData.mWidth, pos->mWidth, parentPos->mWidth,
+           SETCOORD_LPAEH, aContext, mPresContext, inherited);
   SetCoord(posData.mMinWidth, pos->mMinWidth, parentPos->mMinWidth,
            SETCOORD_LPEH, aContext, mPresContext, inherited);
   if (! SetCoord(posData.mMaxWidth, pos->mMaxWidth, parentPos->mMaxWidth,
diff --git a/layout/style/nsStyleCoord.cpp b/layout/style/nsStyleCoord.cpp
--- a/layout/style/nsStyleCoord.cpp
+++ b/layout/style/nsStyleCoord.cpp
@@ -62,11 +62,9 @@ nsStyleCoord::nsStyleCoord(PRInt32 aValu
 {
   //if you want to pass in eStyleUnit_Coord, don't. instead, use the
   //constructor just above this one... MMP
-  NS_ASSERTION((aUnit == eStyleUnit_Proportional) ||
-               (aUnit == eStyleUnit_Enumerated) ||
+  NS_ASSERTION((aUnit == eStyleUnit_Enumerated) ||
                (aUnit == eStyleUnit_Integer), "not an int value");
-  if ((aUnit == eStyleUnit_Proportional) ||
-      (aUnit == eStyleUnit_Enumerated) ||
+  if ((aUnit == eStyleUnit_Enumerated) ||
       (aUnit == eStyleUnit_Integer)) {
     mValue.mInt = aValue;
   }
@@ -141,12 +139,10 @@ void nsStyleCoord::SetCoordValue(nscoord
 
 void nsStyleCoord::SetIntValue(PRInt32 aValue, nsStyleUnit aUnit)
 {
-  NS_ASSERTION((aUnit == eStyleUnit_Proportional) ||
-               (aUnit == eStyleUnit_Enumerated) ||
+  NS_ASSERTION((aUnit == eStyleUnit_Enumerated) ||
                (aUnit == eStyleUnit_Chars) ||
                (aUnit == eStyleUnit_Integer), "not an int value");
-  if ((aUnit == eStyleUnit_Proportional) ||
-      (aUnit == eStyleUnit_Enumerated) ||
+  if ((aUnit == eStyleUnit_Enumerated) ||
       (aUnit == eStyleUnit_Chars) ||
       (aUnit == eStyleUnit_Integer)) {
     mUnit = aUnit;
@@ -197,7 +193,6 @@ void nsStyleCoord::AppendToString(nsStri
     aBuffer.AppendFloat(mValue.mFloat);
   }
   else if ((eStyleUnit_Coord == mUnit) || 
-           (eStyleUnit_Proportional == mUnit) ||
            (eStyleUnit_Enumerated == mUnit) ||
            (eStyleUnit_Integer == mUnit)) {
     aBuffer.AppendInt(mValue.mInt, 10);
@@ -213,7 +208,6 @@ void nsStyleCoord::AppendToString(nsStri
     case eStyleUnit_Factor:       aBuffer.AppendLiteral("f");        break;
     case eStyleUnit_Normal:       aBuffer.AppendLiteral("Normal");   break;
     case eStyleUnit_Auto:         aBuffer.AppendLiteral("Auto");     break;
-    case eStyleUnit_Proportional: aBuffer.AppendLiteral("*");        break;
     case eStyleUnit_Enumerated:   aBuffer.AppendLiteral("enum");     break;
     case eStyleUnit_Integer:      aBuffer.AppendLiteral("int");      break;
     case eStyleUnit_Chars:        aBuffer.AppendLiteral("chars");    break;
diff --git a/layout/style/nsStyleCoord.h b/layout/style/nsStyleCoord.h
--- a/layout/style/nsStyleCoord.h
+++ b/layout/style/nsStyleCoord.h
@@ -54,7 +54,6 @@ enum nsStyleUnit {
   eStyleUnit_Factor       = 11,     // (float) a multiplier
   eStyleUnit_Coord        = 20,     // (nscoord) value is twips
   eStyleUnit_Integer      = 30,     // (int) value is simple integer
-  eStyleUnit_Proportional = 31,     // (int) value has proportional meaning
   eStyleUnit_Enumerated   = 32,     // (int) value has enumerated meaning
   eStyleUnit_Chars        = 33      // (int) value is number of characters
 };
@@ -171,12 +170,10 @@ inline PRInt32 nsStyleCoord::GetCoordVal
 
 inline PRInt32 nsStyleCoord::GetIntValue(void) const
 {
-  NS_ASSERTION((mUnit == eStyleUnit_Proportional) ||
-               (mUnit == eStyleUnit_Enumerated) ||
+  NS_ASSERTION((mUnit == eStyleUnit_Enumerated) ||
                (mUnit == eStyleUnit_Chars) ||
                (mUnit == eStyleUnit_Integer), "not an int value");
-  if ((mUnit == eStyleUnit_Proportional) ||
-      (mUnit == eStyleUnit_Enumerated) ||
+  if ((mUnit == eStyleUnit_Enumerated) ||
       (mUnit == eStyleUnit_Chars) ||
       (mUnit == eStyleUnit_Integer)) {
     return mValue.mInt;
diff --git a/layout/tables/nsTableFrame.cpp b/layout/tables/nsTableFrame.cpp
--- a/layout/tables/nsTableFrame.cpp
+++ b/layout/tables/nsTableFrame.cpp
@@ -3384,7 +3384,6 @@ nsTableFrame::IsAutoHeight()
 
   switch (position->mHeight.GetUnit()) {
     case eStyleUnit_Auto:         // specified auto width
-    case eStyleUnit_Proportional: // illegal for table, so ignored
       break;
     case eStyleUnit_Coord:
       isAuto = PR_FALSE;
