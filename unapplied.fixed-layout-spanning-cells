From: L. David Baron <dbaron@dbaron.org>

For fixed-layout tables, fix the algorithm to use cell widths on spanning cells in either all or none of their columns (depending on whether we have a better width from the column they originate in).  (Not Bug 444928)  (maybe bug 445142)

diff --git a/layout/tables/FixedTableLayoutStrategy.cpp b/layout/tables/FixedTableLayoutStrategy.cpp
--- a/layout/tables/FixedTableLayoutStrategy.cpp
+++ b/layout/tables/FixedTableLayoutStrategy.cpp
@@ -86,16 +86,18 @@ FixedTableLayoutStrategy::GetMinWidth(ns
 
     nscoord result = 0;
 
     if (colCount > 0) {
         result += spacing * (colCount + 1);
     }
 
     for (PRInt32 col = 0; col < colCount; ++col) {
+        // NOTE:  |col| is also incremented below if we process a
+        // column-spanning cell.
         nsTableColFrame *colFrame = mTableFrame->GetColFrame(col);
         if (!colFrame) {
             NS_ERROR("column frames out of sync with cell map");
             continue;
         }
         const nsStyleCoord *styleWidth =
             &colFrame->GetStylePosition()->mWidth;
         if (styleWidth->GetUnit() == eStyleUnit_Coord) {
@@ -104,48 +106,51 @@ FixedTableLayoutStrategy::GetMinWidth(ns
         } else if (styleWidth->GetUnit() == eStyleUnit_Percent) {
             // do nothing
         } else {
             NS_ASSERTION(styleWidth->GetUnit() == eStyleUnit_Auto ||
                          styleWidth->GetUnit() == eStyleUnit_Enumerated,
                          "bad width");
 
             // The 'table-layout: fixed' algorithm considers only cells
-            // in the first row.
+            // in the first row.  Cells are considered when the column
+            // they originate in has no width; if so, they then override
+            // widths specified on later columns.
             PRBool originates;
             PRInt32 colSpan;
             nsTableCellFrame *cellFrame =
                 cellMap->GetCellInfoAt(0, col, &originates, &colSpan);
-            if (cellFrame) {
+            if (cellFrame && originates) {
                 styleWidth = &cellFrame->GetStylePosition()->mWidth;
+                PRBool haveWidth = PR_TRUE;
+                nscoord cellWidth;
                 if (styleWidth->GetUnit() == eStyleUnit_Coord ||
                     (styleWidth->GetUnit() == eStyleUnit_Enumerated &&
                      (styleWidth->GetIntValue() == NS_STYLE_WIDTH_MAX_CONTENT ||
                       styleWidth->GetIntValue() == NS_STYLE_WIDTH_MIN_CONTENT))) {
-                    nscoord cellWidth = nsLayoutUtils::IntrinsicForContainer(
+                    cellWidth = nsLayoutUtils::IntrinsicForContainer(
                         aRenderingContext, cellFrame, nsLayoutUtils::MIN_WIDTH);
-                    if (colSpan > 1) {
-                        // If a column-spanning cell is in the first
-                        // row, split up the space evenly.  (XXX This
-                        // isn't quite right if some of the columns it's
-                        // in have specified widths.  Should we care?)
-                        // XXXldb This doesn't consider columns with no
-                        // cells originating.
-                        cellWidth = ((cellWidth + spacing) / colSpan) - spacing;
-                    }
-                    result += cellWidth;
                 } else if (styleWidth->GetUnit() == eStyleUnit_Percent) {
-                    if (colSpan > 1) {
-                        // XXX Can this force columns to negative
-                        // widths?
-                        result -= spacing * (colSpan - 1);
-                    }
+                    cellWidth = 0;
+                } else {
+                    // for 'auto', '-moz-available', and '-moz-fit-content'
+                    // do nothing
+                    haveWidth = PR_FALSE;
                 }
-                // else, for 'auto', '-moz-available', and '-moz-fit-content'
-                // do nothing
+                if (haveWidth) {
+                    // We want to skip over all the columns spanned by
+                    // this cell, even if they have widths.  We also
+                    // want to ensure that we have enough room for
+                    // cellspacing.
+                    nscoord altWidth = spacing * (colCount - 1);
+                    // Increment the main loop counter here, since
+                    // we want this to apply to all spanned columns.
+                    col += (colSpan - 1);
+                    result += PR_MAX(cellWidth, altWidth);
+                }
                 // XXXldb Bug 364989
             }
         }
     }
 
     return (mMinWidth = result);
 }
 
@@ -202,46 +207,51 @@ FixedTableLayoutStrategy::ComputeColumnW
     const nscoord unassignedMarker = nscoord_MIN;
 
     // We use the PrefPercent on the columns to store the percentages
     // used to compute column widths in case we need to reduce their
     // basis.
     float pctTotal = 0.0f;
 
     for (PRInt32 col = 0; col < colCount; ++col) {
+        // NOTE:  |col| is also incremented below if we process a
+        // column-spanning cell.
         nsTableColFrame *colFrame = mTableFrame->GetColFrame(col);
         if (!colFrame) {
             NS_ERROR("column frames out of sync with cell map");
             continue;
         }
         colFrame->ResetPrefPercent();
         const nsStyleCoord *styleWidth =
             &colFrame->GetStylePosition()->mWidth;
         nscoord colWidth;
+        PRInt32 colSpanForWidth = 1;
         if (styleWidth->GetUnit() == eStyleUnit_Coord) {
             colWidth = nsLayoutUtils::ComputeWidthValue(
                          aReflowState.rendContext,
                          colFrame, 0, 0, 0, *styleWidth);
         } else if (styleWidth->GetUnit() == eStyleUnit_Percent) {
             float pct = styleWidth->GetPercentValue();
             colWidth = NSToCoordFloor(pct * float(tableWidth));
             colFrame->AddPrefPercent(pct);
             pctTotal += pct;
         } else {
             NS_ASSERTION(styleWidth->GetUnit() == eStyleUnit_Auto ||
                          styleWidth->GetUnit() == eStyleUnit_Enumerated,
                          "bad width");
 
             // The 'table-layout: fixed' algorithm considers only cells
-            // in the first row.
+            // in the first row.  Cells are considered when the column
+            // they originate in has no width; if so, they then override
+            // widths specified on later columns.
             PRBool originates;
             PRInt32 colSpan;
             nsTableCellFrame *cellFrame =
                 cellMap->GetCellInfoAt(0, col, &originates, &colSpan);
-            if (cellFrame) {
+            if (cellFrame && originates) {
                 styleWidth = &cellFrame->GetStylePosition()->mWidth;
                 if (styleWidth->GetUnit() == eStyleUnit_Coord ||
                     (styleWidth->GetUnit() == eStyleUnit_Enumerated &&
                      (styleWidth->GetIntValue() == NS_STYLE_WIDTH_MAX_CONTENT ||
                       styleWidth->GetIntValue() == NS_STYLE_WIDTH_MIN_CONTENT))) {
                     // XXX This should use real percentage padding
                     // Note that the difference between MIN_WIDTH and
                     // PREF_WIDTH shouldn't matter for any of these
@@ -261,38 +271,56 @@ FixedTableLayoutStrategy::ComputeColumnW
                     pct /= float(colSpan);
                     colFrame->AddPrefPercent(pct);
                     pctTotal += pct;
                 } else {
                     // 'auto', '-moz-available', and '-moz-fit-content'
                     colWidth = unassignedMarker;
                 }
                 if (colWidth != unassignedMarker) {
-                    if (colSpan > 1) {
-                        // If a column-spanning cell is in the first
-                        // row, split up the space evenly.  (XXX This
-                        // isn't quite right if some of the columns it's
-                        // in have specified widths.  Should we care?)
-                        colWidth = ((colWidth + spacing) / colSpan) - spacing;
-                        if (colWidth < 0)
-                            colWidth = 0;
-                    }
+                    colSpanForWidth = colSpan;
                 }
             } else {
                 colWidth = unassignedMarker;
             }
         }
 
-        colFrame->SetFinalWidth(colWidth);
+        NS_ASSERTION(colSpanForWidth > 0, "unexpected span");
+        NS_ASSERTION(colSpanForWidth == 1 || colWidth != unassignedMarker,
+                     "unexpected width when spanning");
 
-        if (colWidth == unassignedMarker) {
-            ++unassignedCount;
-        } else {
-            unassignedSpace -= colWidth;
+        if (colWidth != unassignedMarker) {
+            colWidth -= spacing * (colSpanForWidth - 1);
+            if (colWidth < 0)
+                colWidth = 0;
         }
+        NS_ASSERTION(colWidth >= 0 || colWidth == unassignedMarker,
+                     "width should be nonnegative");
+
+        do {
+            colFrame = mTableFrame->GetColFrame(col);
+            if (!colFrame) {
+                NS_ERROR("column frames out of sync with cell map");
+                continue;
+            }
+
+            if (colWidth == unassignedMarker) {
+                NS_ASSERTION(colSpanForWidth == 1, "unexpected span");
+                colFrame->SetFinalWidth(colWidth);
+                ++unassignedCount;
+            } else {
+                nscoord toAssign = colWidth / colSpanForWidth;
+                colFrame->SetFinalWidth(toAssign);
+                unassignedSpace -= toAssign;
+                colWidth -= toAssign;
+            }
+
+            // Increment the main loop counter here, since we want this to
+            // apply to all spanned columns and then otherwise skip them.
+        } while ((++col, --colSpanForWidth != 0));
     }
 
     if (unassignedSpace < 0) {
         if (pctTotal > 0) {
             // If the columns took up too much space, reduce those that
             // had percentage widths.  The spec doesn't say to do this,
             // but we've always done it in the past, and so does WinIE6.
             nscoord pctUsed = NSToCoordFloor(pctTotal * float(tableWidth));
