From: L. David Baron <dbaron@dbaron.org>

Bug 771329 - Add support for unprefixed device-pixel-ratio.

diff --git a/layout/style/test/test_media_queries.html b/layout/style/test/test_media_queries.html
--- a/layout/style/test/test_media_queries.html
+++ b/layout/style/test/test_media_queries.html
@@ -111,16 +111,20 @@ function run() {
 
   function expression_should_not_be_parseable(e) {
     ok(!expression_is_parseable(e),
        "expression " + e + " should not be parseable");
   }
 
   // Helper to share code between -moz & -webkit device-pixel-ratio versions:
   function test_device_pixel_ratio(equal_name, min_name, max_name) {
+    expression_should_be_parseable(equal_name + ": 1.0");
+    expression_should_be_parseable(min_name + ": 1.0");
+    expression_should_be_parseable(max_name + ": 1.0");
+
     var real_dpr = 1.0 * getScreenPixelsPerCSSPixel();
     var high_dpr = 1.1 * getScreenPixelsPerCSSPixel();
     var low_dpr = 0.9 * getScreenPixelsPerCSSPixel();
     should_apply("all and (" + max_name + ": " + real_dpr + ")");
     should_apply("all and (" + min_name + ": " + real_dpr + ")");
     should_not_apply("not all and (" + max_name + ": " + real_dpr + ")");
     should_not_apply("not all and (" + min_name + ": " + real_dpr + ")");
     should_apply("all and (" + min_name + ": " + low_dpr + ")");
@@ -489,25 +493,19 @@ function run() {
   // Tests for -moz- & -webkit versions of "device-pixel-ratio"
   // (Note that the vendor prefixes go in different places.)
   test_device_pixel_ratio("-moz-device-pixel-ratio",
                           "min--moz-device-pixel-ratio",
                           "max--moz-device-pixel-ratio");
   test_device_pixel_ratio("-webkit-device-pixel-ratio",
                           "-webkit-min-device-pixel-ratio",
                           "-webkit-max-device-pixel-ratio");
-
-  // Make sure that we don't accidentally start accepting *unprefixed*
-  // "device-pixel-ratio" expressions:
-  expression_should_be_parseable("-webkit-device-pixel-ratio: 1.0");
-  expression_should_not_be_parseable("device-pixel-ratio: 1.0");
-  expression_should_be_parseable("-webkit-min-device-pixel-ratio: 1.0");
-  expression_should_not_be_parseable("min-device-pixel-ratio: 1.0");
-  expression_should_be_parseable("-webkit-max-device-pixel-ratio: 1.0");
-  expression_should_not_be_parseable("max-device-pixel-ratio: 1.0");
+  test_device_pixel_ratio("device-pixel-ratio",
+                          "min-device-pixel-ratio",
+                          "max-device-pixel-ratio");
 
   should_apply("(-webkit-transform-3d)");
 
   features = [ "max-aspect-ratio", "device-aspect-ratio" ];
   for (i in features) {
     feature = features[i];
     expression_should_be_parseable(feature + ": 1/1");
     expression_should_be_parseable(feature + ": 1  /1");
diff --git a/servo/components/style/gecko/media_features.rs b/servo/components/style/gecko/media_features.rs
--- a/servo/components/style/gecko/media_features.rs
+++ b/servo/components/style/gecko/media_features.rs
@@ -431,17 +431,17 @@ macro_rules! system_metric_feature {
 }
 
 lazy_static! {
     /// Adding new media features requires (1) adding the new feature to this
     /// array, with appropriate entries (and potentially any new code needed
     /// to support new types in these entries and (2) ensuring that either
     /// nsPresContext::MediaFeatureValuesChanged is called when the value that
     /// would be returned by the evaluator function could change.
-    pub static ref MEDIA_FEATURES: [MediaFeatureDescription; 43] = [
+    pub static ref MEDIA_FEATURES: [MediaFeatureDescription; 44] = [
         feature!(
             atom!("width"),
             AllowsRanges::Yes,
             Evaluator::Length(eval_width),
             ParsingRequirements::empty(),
         ),
         feature!(
             atom!("height"),
@@ -503,16 +503,22 @@ lazy_static! {
         ),
         feature!(
             atom!("-moz-device-pixel-ratio"),
             AllowsRanges::Yes,
             Evaluator::Float(eval_device_pixel_ratio),
             ParsingRequirements::empty(),
         ),
         feature!(
+            atom!("device-pixel-ratio"),
+            AllowsRanges::Yes,
+            Evaluator::Float(eval_device_pixel_ratio),
+            ParsingRequirements::empty(),
+        ),
+        feature!(
             atom!("resolution"),
             AllowsRanges::Yes,
             Evaluator::Resolution(eval_resolution),
             ParsingRequirements::empty(),
         ),
         feature!(
             atom!("display-mode"),
             AllowsRanges::No,
