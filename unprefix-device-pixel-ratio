From: L. David Baron <dbaron@dbaron.org>

Bug 771329 - Add support for unprefixed device-pixel-ratio.

diff --git a/layout/style/nsMediaFeatures.cpp b/layout/style/nsMediaFeatures.cpp
--- a/layout/style/nsMediaFeatures.cpp
+++ b/layout/style/nsMediaFeatures.cpp
@@ -599,16 +599,26 @@ nsMediaFeatures::features[] = {
     nsMediaFeature::eBoolInteger,
     nsMediaFeature::eHasWebkitPrefix,
     { nullptr },
     GetTransform3d
   },
 
   // Mozilla extensions
   {
+    // unprefixed
+    &nsGkAtoms::devicePixelRatio,
+    nsMediaFeature::eMinMaxAllowed,
+    nsMediaFeature::eFloat,
+    nsMediaFeature::eNoRequirements,
+    { nullptr },
+    GetDevicePixelRatio
+  },
+  {
+    // prefixed; unprefixed supported above
     &nsGkAtoms::_moz_device_pixel_ratio,
     nsMediaFeature::eMinMaxAllowed,
     nsMediaFeature::eFloat,
     nsMediaFeature::eNoRequirements,
     { nullptr },
     GetDevicePixelRatio
   },
   {
diff --git a/layout/style/test/test_media_queries.html b/layout/style/test/test_media_queries.html
--- a/layout/style/test/test_media_queries.html
+++ b/layout/style/test/test_media_queries.html
@@ -111,16 +111,20 @@ function run() {
 
   function expression_should_not_be_parseable(e) {
     ok(!expression_is_parseable(e),
        "expression " + e + " should not be parseable");
   }
 
   // Helper to share code between -moz & -webkit device-pixel-ratio versions:
   function test_device_pixel_ratio(equal_name, min_name, max_name) {
+    expression_should_be_parseable(equal_name + ": 1.0");
+    expression_should_be_parseable(min_name + ": 1.0");
+    expression_should_be_parseable(max_name + ": 1.0");
+
     var real_dpr = 1.0 * getScreenPixelsPerCSSPixel();
     var high_dpr = 1.1 * getScreenPixelsPerCSSPixel();
     var low_dpr = 0.9 * getScreenPixelsPerCSSPixel();
     should_apply("all and (" + max_name + ": " + real_dpr + ")");
     should_apply("all and (" + min_name + ": " + real_dpr + ")");
     should_not_apply("not all and (" + max_name + ": " + real_dpr + ")");
     should_not_apply("not all and (" + min_name + ": " + real_dpr + ")");
     should_apply("all and (" + min_name + ": " + low_dpr + ")");
@@ -433,25 +437,19 @@ function run() {
   // Tests for -moz- & -webkit versions of "device-pixel-ratio"
   // (Note that the vendor prefixes go in different places.)
   test_device_pixel_ratio("-moz-device-pixel-ratio",
                           "min--moz-device-pixel-ratio",
                           "max--moz-device-pixel-ratio");
   test_device_pixel_ratio("-webkit-device-pixel-ratio",
                           "-webkit-min-device-pixel-ratio",
                           "-webkit-max-device-pixel-ratio");
-
-  // Make sure that we don't accidentally start accepting *unprefixed*
-  // "device-pixel-ratio" expressions:
-  expression_should_be_parseable("-webkit-device-pixel-ratio: 1.0");
-  expression_should_not_be_parseable("device-pixel-ratio: 1.0");
-  expression_should_be_parseable("-webkit-min-device-pixel-ratio: 1.0");
-  expression_should_not_be_parseable("min-device-pixel-ratio: 1.0");
-  expression_should_be_parseable("-webkit-max-device-pixel-ratio: 1.0");
-  expression_should_not_be_parseable("max-device-pixel-ratio: 1.0");
+  test_device_pixel_ratio("device-pixel-ratio",
+                          "min-device-pixel-ratio",
+                          "max-device-pixel-ratio");
 
   should_apply("(-webkit-transform-3d)");
 
   features = [ "max-aspect-ratio", "device-aspect-ratio" ];
   for (i in features) {
     feature = features[i];
     expression_should_be_parseable(feature + ": 1/1");
     expression_should_be_parseable(feature + ": 1  /1");
