From: L. David Baron <dbaron@dbaron.org>

Locally back out 77aff162aa0c so I can test the arrow panel animation.

diff --git a/browser/base/content/browser.css b/browser/base/content/browser.css
--- a/browser/base/content/browser.css
+++ b/browser/base/content/browser.css
@@ -983,28 +983,23 @@ toolbarpaletteitem[place="palette"] > #d
 }
 
 /* Give this menupopup an arrow panel styling */
 #BMB_bookmarksPopup {
   -moz-appearance: none;
   -moz-binding: url("chrome://browser/content/places/menu.xml#places-popup-arrow");
   background: transparent;
   border: none;
-  /* The popup inherits -moz-image-region from the button, must reset it */
-  -moz-image-region: auto;
-}
-
-%ifndef MOZ_WIDGET_GTK
-
-#BMB_bookmarksPopup {
   transform: scale(.4);
   opacity: 0;
   transition-property: transform, opacity;
   transition-duration: 0.15s;
   transition-timing-function: ease-out;
+  /* The popup inherits -moz-image-region from the button, must reset it */
+  -moz-image-region: auto;
 }
 
 #BMB_bookmarksPopup[animate="open"] {
   transform: none;
   opacity: 1.0;
 }
 
 #BMB_bookmarksPopup[animate="cancel"] {
@@ -1026,17 +1021,16 @@ toolbarpaletteitem[place="palette"] > #d
   transform-origin: 20px bottom;
 }
 
 #BMB_bookmarksPopup[arrowposition="before_end"]:-moz-locale-dir(ltr),
 #BMB_bookmarksPopup[arrowposition="before_start"]:-moz-locale-dir(rtl) {
   transform-origin: calc(100% - 20px) bottom;
 }
 
-%endif
 
 /* Customize mode */
 #navigator-toolbox,
 #browser-bottombox,
 #content-deck {
   transition-property: margin-left, margin-right;
   transition-duration: 200ms;
   transition-timing-function: linear;
diff --git a/layout/xul/nsXULPopupManager.cpp b/layout/xul/nsXULPopupManager.cpp
--- a/layout/xul/nsXULPopupManager.cpp
+++ b/layout/xul/nsXULPopupManager.cpp
@@ -1580,19 +1580,17 @@ nsXULPopupManager::FirePopupHidingEvent(
       popupFrame->SetPopupState(ePopupShown);
     }
     else {
       // If the popup has an animate attribute and it is not set to false, check
       // if it has a closing transition and wait for it to finish. The transition
       // may still occur either way, but the view will be hidden and you won't be
       // able to see it. If there is a next popup, indicating that mutliple popups
       // are rolling up, don't wait and hide the popup right away since the effect
-      // would likely be undesirable. Transitions are currently disabled on Linux
-      // due to rendering issues on certain configurations.
-#ifndef MOZ_WIDGET_GTK
+      // would likely be undesirable.
       if (!aNextPopup && aPopup->HasAttr(kNameSpaceID_None, nsGkAtoms::animate)) {
         // If animate="false" then don't transition at all. If animate="cancel",
         // only show the transition if cancelling the popup or rolling up.
         // Otherwise, always show the transition.
         nsAutoString animate;
         aPopup->GetAttr(kNameSpaceID_None, nsGkAtoms::animate, animate);
 
         if (!animate.EqualsLiteral("false") &&
@@ -1607,17 +1605,16 @@ nsXULPopupManager::FirePopupHidingEvent(
           if (nsLayoutUtils::HasCurrentTransitions(popupFrame)) {
             RefPtr<TransitionEnder> ender = new TransitionEnder(aPopup, aDeselectMenu);
             aPopup->AddSystemEventListener(NS_LITERAL_STRING("transitionend"),
                                            ender, false, false);
             return;
           }
         }
       }
-#endif
 
       HidePopupCallback(aPopup, popupFrame, aNextPopup, aLastPopup,
                         aPopupType, aDeselectMenu);
     }
   }
 }
 
 bool
diff --git a/toolkit/content/tests/chrome/test_arrowpanel.xul b/toolkit/content/tests/chrome/test_arrowpanel.xul
--- a/toolkit/content/tests/chrome/test_arrowpanel.xul
+++ b/toolkit/content/tests/chrome/test_arrowpanel.xul
@@ -175,45 +175,41 @@ function* nextTest()
     $("bottomleft").setAttribute("right", "15");
     $("bottomright").setAttribute("left", "15");
     $("topleft").removeAttribute("left");
     $("topright").removeAttribute("right");
     $("bottomleft").removeAttribute("left");
     $("bottomright").removeAttribute("right");
   }
 
-  // Test that a transition occurs when opening or closing the popup. The transition is
-  // disabled on Linux.
-  if (navigator.platform.indexOf("Linux") == -1) {
-    var transitions = 0;
-    function transitionEnded(event) {
-      transitions++;
-      // Two properties transition so continue on the second one finishing.
-      if (!(transitions % 2)) {
+  var transitions = 0;
+  function transitionEnded(event) {
+    transitions++;
+    // Two properties transition so continue on the second one finishing.
+    if (!(transitions % 2)) {
         is($("animatepanel").state, "open", "state is open after transitionend");
         ok(animatedPopupShown, "popupshown now fired")
-        SimpleTest.executeSoon(() => runNextTest.next());
-      }
+      SimpleTest.executeSoon(() => runNextTest.next());
+    }
       else {
         is($("animatepanel").state, "showing", "state is showing during transitionend");
         ok(!animatedPopupShown, "popupshown not fired yet")
       }
-    }
+  }
 
-    // Check that the transition occurs for an arrow panel with animate="true"
-    window.addEventListener("transitionend", transitionEnded, false);
-    $("animatepanel").openPopup($("topleft"), "after_start", 0, 0, false, false, null, "start");
+  // Check that the transition occurs for an arrow panel with animate="true"
+  window.addEventListener("transitionend", transitionEnded, false);
+  $("animatepanel").openPopup($("topleft"), "after_start", 0, 0, false, false, null, "start");
     is($("animatepanel").state, "showing", "state is showing");
-    yield;
-    window.removeEventListener("transitionend", transitionEnded, false);
+  yield;
+  window.removeEventListener("transitionend", transitionEnded, false);
 
-    synthesizeKey("VK_ESCAPE", { });
-    ok(!animatedPopupHidden, "animated popup not hidden yet");
-    yield;
-  }
+  synthesizeKey("VK_ESCAPE", { });
+  ok(!animatedPopupHidden, "animated popup not hidden yet");
+  yield;
 
   SimpleTest.finish()
 }
 
 function setScale(win, scale)
 {
   var wn = win.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
               .getInterface(Components.interfaces.nsIWebNavigation);
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -431,18 +431,16 @@ tooltip {
   white-space: pre-wrap;
   margin-top: 21px;
 }
 
 panel[type="arrow"] {
   -moz-binding: url("chrome://global/content/bindings/popup.xml#arrowpanel");
 }
 
-%ifndef MOZ_WIDGET_GTK
-
 panel[type="arrow"]:not([animate="false"]) {
   transform: scale(.4);
   opacity: 0;
   transition-property: transform, opacity;
   transition-duration: 0.15s;
   transition-timing-function: ease-out;
 }
 
@@ -490,17 +488,16 @@ panel[arrowposition="start_before"]:-moz
   transform-origin: left 20px;
 }
 
 panel[arrowposition="end_after"]:-moz-locale-dir(ltr),
 panel[arrowposition="start_after"]:-moz-locale-dir(rtl) {
   transform-origin: left calc(100% - 20px);
 }
 
-%endif
 
 %ifdef XP_MACOSX
 .statusbar-resizerpanel {
   display: none;
 }
 %else
 window[sizemode="maximized"] statusbarpanel.statusbar-resizerpanel {
   visibility: collapse;
