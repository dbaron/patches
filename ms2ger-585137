From: Ms2ger <ms2ger@gmail.com>

Make nsICSSRule::Clone return the cloned value directly.  (Bug 585137)  r=bzbarsky  a2.0=dbaron

diff --git a/content/html/content/src/nsGenericHTMLElement.cpp b/content/html/content/src/nsGenericHTMLElement.cpp
--- a/content/html/content/src/nsGenericHTMLElement.cpp
+++ b/content/html/content/src/nsGenericHTMLElement.cpp
@@ -289,21 +289,18 @@ nsGenericHTMLElement::CopyInnerTo(nsGene
   PRInt32 i, count = GetAttrCount();
   for (i = 0; i < count; ++i) {
     const nsAttrName *name = mAttrsAndChildren.AttrNameAt(i);
     const nsAttrValue *value = mAttrsAndChildren.AttrAt(i);
     if (name->Equals(nsGkAtoms::style, kNameSpaceID_None) &&
         value->Type() == nsAttrValue::eCSSStyleRule) {
       // We can't just set this as a string, because that will fail
       // to reparse the string into style data until the node is
-      // inserted into the document.  Clone the HTMLValue instead.
-      nsCOMPtr<nsICSSRule> ruleClone;
-      rv = value->GetCSSStyleRuleValue()->Clone(*getter_AddRefs(ruleClone));
-      NS_ENSURE_SUCCESS(rv, rv);
-
+      // inserted into the document.  Clone the nsICSSRule instead.
+      nsCOMPtr<nsICSSRule> ruleClone = value->GetCSSStyleRuleValue()->Clone();
       nsCOMPtr<nsICSSStyleRule> styleRule = do_QueryInterface(ruleClone);
       NS_ENSURE_TRUE(styleRule, NS_ERROR_UNEXPECTED);
 
       rv = aDst->SetInlineStyleRule(styleRule, PR_FALSE);
       NS_ENSURE_SUCCESS(rv, rv);
 
       continue;
     }
diff --git a/content/xul/content/src/nsXULElement.cpp b/content/xul/content/src/nsXULElement.cpp
--- a/content/xul/content/src/nsXULElement.cpp
+++ b/content/xul/content/src/nsXULElement.cpp
@@ -1930,19 +1930,18 @@ nsXULElement::GetStyle(nsIDOMCSSStyleDec
 
     // Clone the prototype rule, if we don't have a local one.
     if (mPrototype &&
         !mAttrsAndChildren.GetAttr(nsGkAtoms::style, kNameSpaceID_None)) {
 
         nsXULPrototypeAttribute *protoattr =
                   FindPrototypeAttribute(kNameSpaceID_None, nsGkAtoms::style);
         if (protoattr && protoattr->mValue.Type() == nsAttrValue::eCSSStyleRule) {
-            nsCOMPtr<nsICSSRule> ruleClone;
-            rv = protoattr->mValue.GetCSSStyleRuleValue()->Clone(*getter_AddRefs(ruleClone));
-            NS_ENSURE_SUCCESS(rv, rv);
+            nsCOMPtr<nsICSSRule> ruleClone =
+                protoattr->mValue.GetCSSStyleRuleValue()->Clone();
 
             nsAttrValue value;
             nsCOMPtr<nsICSSStyleRule> styleRule = do_QueryInterface(ruleClone);
             value.SetTo(styleRule);
 
             rv = mAttrsAndChildren.SetAndTakeAttr(nsGkAtoms::style, value);
             NS_ENSURE_SUCCESS(rv, rv);
         }
@@ -2319,19 +2318,18 @@ nsresult nsXULElement::MakeHeavyweight()
             continue;
         }
 
         // XXX we might wanna have a SetAndTakeAttr that takes an nsAttrName
         nsAttrValue attrValue(protoattr->mValue);
         
         // Style rules need to be cloned.
         if (attrValue.Type() == nsAttrValue::eCSSStyleRule) {
-            nsCOMPtr<nsICSSRule> ruleClone;
-            rv = attrValue.GetCSSStyleRuleValue()->Clone(*getter_AddRefs(ruleClone));
-            NS_ENSURE_SUCCESS(rv, rv);
+            nsCOMPtr<nsICSSRule> ruleClone =
+                attrValue.GetCSSStyleRuleValue()->Clone();
 
             nsCOMPtr<nsICSSStyleRule> styleRule = do_QueryInterface(ruleClone);
             attrValue.SetTo(styleRule);
         }
 
         if (protoattr->mName.IsAtom()) {
             rv = mAttrsAndChildren.SetAndTakeAttr(protoattr->mName.Atom(), attrValue);
         }
diff --git a/layout/style/nsCSSRules.cpp b/layout/style/nsCSSRules.cpp
--- a/layout/style/nsCSSRules.cpp
+++ b/layout/style/nsCSSRules.cpp
@@ -203,17 +203,17 @@ public:
 
   // nsIStyleRule methods
 #ifdef DEBUG
   virtual void List(FILE* out = stdout, PRInt32 aIndent = 0) const;
 #endif
 
   // nsICSSRule methods
   virtual PRInt32 GetType() const;
-  virtual nsresult Clone(nsICSSRule*& aClone) const;
+  virtual already_AddRefed<nsICSSRule> Clone() const;
 
   // nsIDOMCSSRule interface
   NS_DECL_NSIDOMCSSRULE
   
   // nsIDOMCSSCharsetRule methods
   NS_IMETHOD GetEncoding(nsAString& aEncoding);
   NS_IMETHOD SetEncoding(const nsAString& aEncoding);
 
@@ -268,26 +268,21 @@ CSSCharsetRuleImpl::List(FILE* out, PRIn
 #endif
 
 /* virtual */ PRInt32
 CSSCharsetRuleImpl::GetType() const
 {
   return nsICSSRule::CHARSET_RULE;
 }
 
-/* virtual */ nsresult
-CSSCharsetRuleImpl::Clone(nsICSSRule*& aClone) const
+/* virtual */ already_AddRefed<nsICSSRule>
+CSSCharsetRuleImpl::Clone() const
 {
-  CSSCharsetRuleImpl* clone = new CSSCharsetRuleImpl(*this);
-  if (clone) {
-    NS_ADDREF(aClone = clone);
-    return NS_OK;
-  }
-  aClone = nsnull;
-  return NS_ERROR_OUT_OF_MEMORY;
+  nsCOMPtr<nsICSSRule> clone = new CSSCharsetRuleImpl(*this);
+  return clone.forget();
 }
 
 NS_IMETHODIMP
 CSSCharsetRuleImpl::GetEncoding(nsAString& aEncoding)
 {
   aEncoding = mEncoding;
   return NS_OK;
 }
@@ -378,17 +373,17 @@ public:
 
   // nsIStyleRule methods
 #ifdef DEBUG
   virtual void List(FILE* out = stdout, PRInt32 aIndent = 0) const;
 #endif
 
   // nsICSSRule methods
   virtual PRInt32 GetType() const;
-  virtual nsresult Clone(nsICSSRule*& aClone) const;
+  virtual already_AddRefed<nsICSSRule> Clone() const;
 
   // nsICSSImportRule methods
   NS_IMETHOD SetURLSpec(const nsString& aURLSpec);
   NS_IMETHOD GetURLSpec(nsString& aURLSpec) const;
 
   NS_IMETHOD SetMedia(const nsString& aMedia);
   NS_IMETHOD GetMedia(nsString& aMedia) const;
 
@@ -472,26 +467,21 @@ CSSImportRuleImpl::List(FILE* out, PRInt
 #endif
 
 /* virtual */ PRInt32
 CSSImportRuleImpl::GetType() const
 {
   return nsICSSRule::IMPORT_RULE;
 }
 
-/* virtual */ nsresult
-CSSImportRuleImpl::Clone(nsICSSRule*& aClone) const
+/* virtual */ already_AddRefed<nsICSSRule>
+CSSImportRuleImpl::Clone() const
 {
-  CSSImportRuleImpl* clone = new CSSImportRuleImpl(*this);
-  if (clone) {
-    NS_ADDREF(aClone = clone);
-    return NS_OK;
-  }
-  aClone = nsnull;
-  return NS_ERROR_OUT_OF_MEMORY;
+  nsCOMPtr<nsICSSRule> clone = new CSSImportRuleImpl(*this);
+  return clone.forget();
 }
 
 NS_IMETHODIMP
 CSSImportRuleImpl::SetURLSpec(const nsString& aURLSpec)
 {
   mURLSpec = aURLSpec;
   return NS_OK;
 }
@@ -641,22 +631,18 @@ nsCSSGroupRule::nsCSSGroupRule()
   : nsCSSRule()
   , mRuleCollection(nsnull)
 {
 }
 
 static PRBool
 CloneRuleInto(nsICSSRule* aRule, void* aArray)
 {
-  nsICSSRule* clone = nsnull;
-  aRule->Clone(clone);
-  if (clone) {
-    static_cast<nsCOMArray<nsICSSRule>*>(aArray)->AppendObject(clone);
-    NS_RELEASE(clone);
-  }
+  nsCOMPtr<nsICSSRule> clone = aRule->Clone();
+  static_cast<nsCOMArray<nsICSSRule>*>(aArray)->AppendObject(clone);
   return PR_TRUE;
 }
 
 static PRBool
 SetParentRuleReference(nsICSSRule* aRule, void* aParentRule)
 {
   nsCSSGroupRule* parentRule = static_cast<nsCSSGroupRule*>(aParentRule);
   aRule->SetParentRule(parentRule);
@@ -952,26 +938,21 @@ nsCSSMediaRule::List(FILE* out, PRInt32 
 #endif
 
 /* virtual */ PRInt32
 nsCSSMediaRule::GetType() const
 {
   return nsICSSRule::MEDIA_RULE;
 }
 
-/* virtual */ nsresult
-nsCSSMediaRule::Clone(nsICSSRule*& aClone) const
+/* virtual */ already_AddRefed<nsICSSRule>
+nsCSSMediaRule::Clone() const
 {
-  nsCSSMediaRule* clone = new nsCSSMediaRule(*this);
-  if (clone) {
-    NS_ADDREF(aClone = clone);
-    return NS_OK;
-  }
-  aClone = nsnull;
-  return NS_ERROR_OUT_OF_MEMORY;
+  nsCOMPtr<nsICSSRule> clone = new nsCSSMediaRule(*this);
+  return clone.forget();
 }
 
 nsresult
 nsCSSMediaRule::SetMedia(nsMediaList* aMedia)
 {
   mMedia = aMedia;
   if (aMedia)
     mMedia->SetStyleSheet(mSheet);
@@ -1120,26 +1101,21 @@ nsCSSDocumentRule::List(FILE* out, PRInt
 #endif
 
 /* virtual */ PRInt32
 nsCSSDocumentRule::GetType() const
 {
   return nsICSSRule::DOCUMENT_RULE;
 }
 
-/* virtual */ nsresult
-nsCSSDocumentRule::Clone(nsICSSRule*& aClone) const
+/* virtual */ already_AddRefed<nsICSSRule>
+nsCSSDocumentRule::Clone() const
 {
-  nsCSSDocumentRule* clone = new nsCSSDocumentRule(*this);
-  if (clone) {
-    NS_ADDREF(aClone = clone);
-    return NS_OK;
-  }
-  aClone = nsnull;
-  return NS_ERROR_OUT_OF_MEMORY;
+  nsCOMPtr<nsICSSRule> clone = new nsCSSDocumentRule(*this);
+  return clone.forget();
 }
 
 // nsIDOMCSSRule methods
 NS_IMETHODIMP
 nsCSSDocumentRule::GetType(PRUint16* aType)
 {
   // XXX What should really happen here?
   *aType = nsIDOMCSSRule::UNKNOWN_RULE;
@@ -1270,17 +1246,17 @@ public:
 
   // nsIStyleRule methods
 #ifdef DEBUG
   virtual void List(FILE* out = stdout, PRInt32 aIndent = 0) const;
 #endif
 
   // nsICSSRule methods
   virtual PRInt32 GetType() const;
-  virtual nsresult Clone(nsICSSRule*& aClone) const;
+  virtual already_AddRefed<nsICSSRule> Clone() const;
 
   // nsICSSNameSpaceRule methods
   NS_IMETHOD GetPrefix(nsIAtom*& aPrefix) const;
   NS_IMETHOD SetPrefix(nsIAtom* aPrefix);
 
   NS_IMETHOD GetURLSpec(nsString& aURLSpec) const;
   NS_IMETHOD SetURLSpec(const nsString& aURLSpec);
 
@@ -1352,26 +1328,21 @@ CSSNameSpaceRuleImpl::List(FILE* out, PR
 #endif
 
 /* virtual */ PRInt32
 CSSNameSpaceRuleImpl::GetType() const
 {
   return nsICSSRule::NAMESPACE_RULE;
 }
 
-/* virtual */ nsresult
-CSSNameSpaceRuleImpl::Clone(nsICSSRule*& aClone) const
+/* virtual */ already_AddRefed<nsICSSRule>
+CSSNameSpaceRuleImpl::Clone() const
 {
-  CSSNameSpaceRuleImpl* clone = new CSSNameSpaceRuleImpl(*this);
-  if (clone) {
-    NS_ADDREF(aClone = clone);
-    return NS_OK;
-  }
-  aClone = nsnull;
-  return NS_ERROR_OUT_OF_MEMORY;
+  nsCOMPtr<nsICSSRule> clone = new CSSNameSpaceRuleImpl(*this);
+  return clone.forget();
 }
 
 NS_IMETHODIMP
 CSSNameSpaceRuleImpl::GetPrefix(nsIAtom*& aPrefix) const
 {
   aPrefix = mPrefix;
   NS_IF_ADDREF(aPrefix);
   return NS_OK;
@@ -1787,26 +1758,21 @@ nsCSSFontFaceStyleDecl::GetParentRule(ns
   return ContainingRule()->GetDOMRule(aParentRule);
 }
 
 
 // -------------------------------------------
 // nsCSSFontFaceRule
 // 
 
-/* virtual */ nsresult
-nsCSSFontFaceRule::Clone(nsICSSRule*& aClone) const
+/* virtual */ already_AddRefed<nsICSSRule>
+nsCSSFontFaceRule::Clone() const
 {
-  nsCSSFontFaceRule* clone = new nsCSSFontFaceRule(*this);
-  if (clone) {
-    NS_ADDREF(aClone = clone);
-    return NS_OK;
-  }
-  aClone = nsnull;
-  return NS_ERROR_OUT_OF_MEMORY;
+  nsCOMPtr<nsICSSRule> clone = new nsCSSFontFaceRule(*this);
+  return clone.forget();
 }
 
 NS_IMPL_ADDREF_INHERITED(nsCSSFontFaceRule, nsCSSRule)
 NS_IMPL_RELEASE_INHERITED(nsCSSFontFaceRule, nsCSSRule)
 
 DOMCI_DATA(CSSFontFaceRule, nsCSSFontFaceRule)
 
 // QueryInterface implementation for nsCSSFontFaceRule
diff --git a/layout/style/nsCSSRules.h b/layout/style/nsCSSRules.h
--- a/layout/style/nsCSSRules.h
+++ b/layout/style/nsCSSRules.h
@@ -126,17 +126,17 @@ public:
   // nsIStyleRule methods
 #ifdef DEBUG
   virtual void List(FILE* out = stdout, PRInt32 aIndent = 0) const;
 #endif
 
   // nsICSSRule methods
   virtual void SetStyleSheet(nsCSSStyleSheet* aSheet); //override nsCSSGroupRule
   virtual PRInt32 GetType() const;
-  virtual nsresult Clone(nsICSSRule*& aClone) const;
+  virtual already_AddRefed<nsICSSRule> Clone() const;
   nsIDOMCSSRule* GetDOMRuleWeak(nsresult *aResult)
   {
     *aResult = NS_OK;
     return this;
   }
 
   // nsIDOMCSSRule interface
   NS_DECL_NSIDOMCSSRULE
@@ -167,17 +167,17 @@ public:
 
   // nsIStyleRule methods
 #ifdef DEBUG
   virtual void List(FILE* out = stdout, PRInt32 aIndent = 0) const;
 #endif
 
   // nsICSSRule methods
   virtual PRInt32 GetType() const;
-  virtual nsresult Clone(nsICSSRule*& aClone) const;
+  virtual already_AddRefed<nsICSSRule> Clone() const;
   nsIDOMCSSRule* GetDOMRuleWeak(nsresult *aResult)
   {
     *aResult = NS_OK;
     return this;
   }
 
   // nsIDOMCSSRule interface
   NS_DECL_NSIDOMCSSRULE
@@ -260,17 +260,17 @@ public:
 #ifdef DEBUG
   virtual void List(FILE* out = stdout, PRInt32 aIndent = 0) const;
 #endif
 
   // nsICSSRule methods
   DECL_STYLE_RULE_INHERIT
 
   virtual PRInt32 GetType() const;
-  virtual nsresult Clone(nsICSSRule*& aClone) const;
+  virtual already_AddRefed<nsICSSRule> Clone() const;
 
   // nsIDOMCSSRule interface
   NS_DECL_NSIDOMCSSRULE
 
   // nsIDOMCSSFontFaceRule interface
   NS_DECL_NSIDOMCSSFONTFACERULE
 
   void SetDesc(nsCSSFontDesc aDescID, nsCSSValue const & aValue);
diff --git a/layout/style/nsCSSStyleRule.cpp b/layout/style/nsCSSStyleRule.cpp
--- a/layout/style/nsCSSStyleRule.cpp
+++ b/layout/style/nsCSSStyleRule.cpp
@@ -1306,17 +1306,17 @@ public:
   virtual nsresult GetCssText(nsAString& aCssText);
   virtual nsresult SetCssText(const nsAString& aCssText);
   virtual nsresult GetParentStyleSheet(nsCSSStyleSheet** aSheet);
   virtual nsresult GetParentRule(nsICSSGroupRule** aParentRule);
   virtual nsresult GetSelectorText(nsAString& aSelectorText);
   virtual nsresult SetSelectorText(const nsAString& aSelectorText);
 
   virtual PRInt32 GetType() const;
-  virtual nsresult Clone(nsICSSRule*& aClone) const;
+  virtual already_AddRefed<nsICSSRule> Clone() const;
 
   nsIDOMCSSRule* GetDOMRuleWeak(nsresult* aResult);
 
   virtual already_AddRefed<nsICSSStyleRule>
     DeclarationChanged(PRBool aHandleContainer);
 
   // The new mapping function.
   virtual void MapRuleInfoInto(nsRuleData* aRuleData);
@@ -1490,27 +1490,21 @@ CSSStyleRuleImpl::SetParentRule(nsICSSGr
 }
 
 /* virtual */ PRInt32
 CSSStyleRuleImpl::GetType() const
 {
   return nsICSSRule::STYLE_RULE;
 }
 
-/* virtual */ nsresult
-CSSStyleRuleImpl::Clone(nsICSSRule*& aClone) const
+/* virtual */ already_AddRefed<nsICSSRule>
+CSSStyleRuleImpl::Clone() const
 {
-  CSSStyleRuleImpl* clone = new CSSStyleRuleImpl(*this);
-  if (!clone || !clone->mDeclaration || (!clone->mSelector != !mSelector)) {
-    delete clone;
-    aClone = nsnull;
-    return NS_ERROR_OUT_OF_MEMORY;
-  }
-  NS_ADDREF(aClone = clone);
-  return NS_OK;
+  nsCOMPtr<nsICSSRule> clone = new CSSStyleRuleImpl(*this);
+  return clone.forget();
 }
 
 nsIDOMCSSRule*
 CSSStyleRuleImpl::GetDOMRuleWeak(nsresult *aResult)
 {
   *aResult = NS_OK;
   if (!mSheet) {
     // inline style rules aren't supposed to have a DOM rule object, only
diff --git a/layout/style/nsCSSStyleSheet.cpp b/layout/style/nsCSSStyleSheet.cpp
--- a/layout/style/nsCSSStyleSheet.cpp
+++ b/layout/style/nsCSSStyleSheet.cpp
@@ -788,22 +788,18 @@ static PRBool SetStyleSheetReference(nsI
     aRule->SetStyleSheet(static_cast<nsCSSStyleSheet*>(aSheet));
   }
   return PR_TRUE;
 }
 
 static PRBool
 CloneRuleInto(nsICSSRule* aRule, void* aArray)
 {
-  nsICSSRule* clone = nsnull;
-  aRule->Clone(clone);
-  if (clone) {
-    static_cast<nsCOMArray<nsICSSRule>*>(aArray)->AppendObject(clone);
-    NS_RELEASE(clone);
-  }
+  nsCOMPtr<nsICSSRule> clone = aRule->Clone();
+  static_cast<nsCOMArray<nsICSSRule>*>(aArray)->AppendObject(clone);
   return PR_TRUE;
 }
 
 struct ChildSheetListBuilder {
   nsRefPtr<nsCSSStyleSheet>* sheetSlot;
   nsCSSStyleSheet* parent;
 
   void SetParentLinks(nsCSSStyleSheet* aSheet) {
diff --git a/layout/style/nsICSSGroupRule.h b/layout/style/nsICSSGroupRule.h
--- a/layout/style/nsICSSGroupRule.h
+++ b/layout/style/nsICSSGroupRule.h
@@ -35,28 +35,28 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
 /*
  * internal interface representing CSS style rules that contain other
  * rules, such as @media rules
  */
 
-#ifndef nsICSSGroupRule_h___
-#define nsICSSGroupRule_h___
+#ifndef nsICSSGroupRule_h
+#define nsICSSGroupRule_h
 
 #include "nsICSSRule.h"
 #include "nsCOMArray.h"
 
 class nsPresContext;
 class nsMediaQueryResultCacheKey;
 
-// IID for the nsICSSGroupRule interface {388222c0-cb76-4a01-9988-8cd28e66690e}
-#define NS_ICSS_GROUP_RULE_IID     \
-{0x388222c0, 0xcb76, 0x4a01, {0x99, 0x88, 0x8c, 0xd2, 0x8e, 0x66, 0x69, 0x0e}}
+#define NS_ICSS_GROUP_RULE_IID \
+{ 0xf1e3d96b, 0xe381, 0x4533, \
+  { 0xa6, 0x5e, 0xa5, 0x31, 0xba, 0xca, 0x93, 0x62 } }
 
 
 class nsICSSGroupRule : public nsICSSRule {
 public:
   NS_DECLARE_STATIC_IID_ACCESSOR(NS_ICSS_GROUP_RULE_IID)
 
   NS_IMETHOD  AppendStyleRule(nsICSSRule* aRule) = 0;
 
@@ -78,9 +78,9 @@ public:
 
   NS_IMETHOD_(PRBool) UseForPresentation(nsPresContext* aPresContext,
                                          nsMediaQueryResultCacheKey& aKey) = 0;
    
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(nsICSSGroupRule, NS_ICSS_GROUP_RULE_IID)
 
-#endif /* nsICSSGroupRule_h___ */
+#endif /* nsICSSGroupRule_h */
diff --git a/layout/style/nsICSSImportRule.h b/layout/style/nsICSSImportRule.h
--- a/layout/style/nsICSSImportRule.h
+++ b/layout/style/nsICSSImportRule.h
@@ -32,27 +32,27 @@
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 /* internal interface for CSS @import rules */
 
-#ifndef nsICSSImportRule_h___
-#define nsICSSImportRule_h___
+#ifndef nsICSSImportRule_h
+#define nsICSSImportRule_h
 
 #include "nsICSSRule.h"
 
 class nsMediaList;
 class nsString;
 
-// IID for the nsICSSImportRule interface {99118ef3-927d-43f0-a210-27482d75de2e}
-#define NS_ICSS_IMPORT_RULE_IID     \
-{0x99118ef3, 0x927d, 0x43f0, {0xa2, 0x10, 0x27, 0x48, 0x2d, 0x75, 0xde, 0x2e}}
+#define NS_ICSS_IMPORT_RULE_IID \
+{ 0x07bd9b80, 0x721e, 0x4566, \
+  { 0xb7, 0x90, 0xed, 0x25, 0x10, 0xed, 0x99, 0xde } }
 
 
 class nsICSSImportRule : public nsICSSRule {
 public:
   NS_DECLARE_STATIC_IID_ACCESSOR(NS_ICSS_IMPORT_RULE_IID)
 
   NS_IMETHOD SetURLSpec(const nsString& aURLSpec) = 0;
   NS_IMETHOD GetURLSpec(nsString& aURLSpec) const = 0;
@@ -64,9 +64,9 @@ public:
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(nsICSSImportRule, NS_ICSS_IMPORT_RULE_IID)
 
 nsresult
 NS_NewCSSImportRule(nsICSSImportRule** aInstancePtrResult, 
                     const nsString& aURLSpec, nsMediaList* aMedia);
 
-#endif /* nsICSSImportRule_h___ */
+#endif /* nsICSSImportRule_h */
diff --git a/layout/style/nsICSSNameSpaceRule.h b/layout/style/nsICSSNameSpaceRule.h
--- a/layout/style/nsICSSNameSpaceRule.h
+++ b/layout/style/nsICSSNameSpaceRule.h
@@ -32,26 +32,26 @@
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 /* internal interface for CSS @namespace rules */
 
-#ifndef nsICSSNameSpaceRule_h___
-#define nsICSSNameSpaceRule_h___
+#ifndef nsICSSNameSpaceRule_h
+#define nsICSSNameSpaceRule_h
 
 #include "nsICSSRule.h"
 
 class nsIAtom;
 
-// IID for the nsICSSNameSpaceRule interface {ec064d33-a6f1-459c-8f31-8289eed877de}
-#define NS_ICSS_NAMESPACE_RULE_IID     \
-{0xec064d33, 0xa6f1, 0x459c, {0x8f, 0x31, 0x82, 0x89, 0xee, 0xd8, 0x77, 0xde}}
+#define NS_ICSS_NAMESPACE_RULE_IID \
+{ 0x9be32bb3, 0x5729, 0x4853, \
+  { 0x87, 0x29, 0x9b, 0x46, 0x69, 0xad, 0x82, 0x1b } }
 
 
 class nsICSSNameSpaceRule : public nsICSSRule {
 public:
   NS_DECLARE_STATIC_IID_ACCESSOR(NS_ICSS_NAMESPACE_RULE_IID)
 
   NS_IMETHOD  GetPrefix(nsIAtom*& aPrefix) const = 0;
   NS_IMETHOD  SetPrefix(nsIAtom* aPrefix) = 0;
@@ -61,9 +61,9 @@ public:
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(nsICSSNameSpaceRule, NS_ICSS_NAMESPACE_RULE_IID)
 
 nsresult
 NS_NewCSSNameSpaceRule(nsICSSNameSpaceRule** aInstancePtrResult, 
                        nsIAtom* aPrefix, const nsString& aURLSpec);
 
-#endif /* nsICSSNameSpaceRule_h___ */
+#endif /* nsICSSNameSpaceRule_h */
diff --git a/layout/style/nsICSSRule.h b/layout/style/nsICSSRule.h
--- a/layout/style/nsICSSRule.h
+++ b/layout/style/nsICSSRule.h
@@ -32,31 +32,31 @@
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 /* internal interface for all rule types in a CSS style sheet */
 
-#ifndef nsICSSRule_h___
-#define nsICSSRule_h___
+#ifndef nsICSSRule_h
+#define nsICSSRule_h
 
 #include "nsIStyleRule.h"
 #include "nsIDOMCSSRule.h"
 
 class nsCSSStyleSheet;
 class nsICSSGroupRule;
 class nsAString;
 template<class T> struct already_AddRefed;
 
-// IID for the nsICSSRule interface {471d733e-c138-4a50-9e1a-d13cbb65b526}
-#define NS_ICSS_RULE_IID     \
-{ 0x471d733e, 0xc138, 0x4a50, \
- { 0x9e, 0x1a, 0xd1, 0x3c, 0xbb, 0x65, 0xb5, 0x26 } }
+// IID for the nsICSSRule interface
+#define NS_ICSS_RULE_IID \
+{ 0x1f560b20, 0xa829, 0x4b99, \
+  { 0x87, 0xbd, 0x8c, 0x87, 0x95, 0x2b, 0x3b, 0xb6 } }
 
 
 // inheriting from nsIStyleRule is only for style rules, not other rule types
 class nsICSSRule : public nsIStyleRule {
 public:
   NS_DECLARE_STATIC_IID_ACCESSOR(NS_ICSS_RULE_IID)
   // The constants in this list must maintain the following invariants:
   //   If a rule of type N must appear before a rule of type M in stylesheets
@@ -76,17 +76,20 @@ public:
   };
 
   virtual PRInt32 GetType() const = 0;
 
   virtual already_AddRefed<nsIStyleSheet> GetStyleSheet() const = 0;
   virtual void SetStyleSheet(nsCSSStyleSheet* aSheet) = 0;
   virtual void SetParentRule(nsICSSGroupRule* aRule) = 0;
 
-  virtual nsresult Clone(nsICSSRule*& aClone) const = 0;
+  /**
+   * Clones |this|. Never returns NULL.
+   */
+  virtual already_AddRefed<nsICSSRule> Clone() const = 0;
 
   // Note that this returns null for inline style rules since they aren't
   // supposed to have a DOM rule representation (and our code wouldn't work).
   nsresult GetDOMRule(nsIDOMCSSRule** aDOMRule)
   {
     nsresult rv;
     NS_IF_ADDREF(*aDOMRule = GetDOMRuleWeak(&rv));
     return rv;
@@ -97,9 +100,9 @@ public:
 NS_DEFINE_STATIC_IID_ACCESSOR(nsICSSRule, NS_ICSS_RULE_IID)
 
 /* Define global NS_New* functions for rules that don't need their own
    interfaces here */
 nsresult
 NS_NewCSSCharsetRule(nsICSSRule** aInstancePtrResult,
                      const nsAString& aEncoding);
 
-#endif /* nsICSSRule_h___ */
+#endif /* nsICSSRule_h */
diff --git a/layout/style/nsICSSStyleRule.h b/layout/style/nsICSSStyleRule.h
--- a/layout/style/nsICSSStyleRule.h
+++ b/layout/style/nsICSSStyleRule.h
@@ -287,20 +287,19 @@ struct nsCSSSelectorList {
 private: 
   nsCSSSelectorList* Clone(PRBool aDeep) const;
 
   // These are not supported and are not implemented! 
   nsCSSSelectorList(const nsCSSSelectorList& aCopy);
   nsCSSSelectorList& operator=(const nsCSSSelectorList& aCopy); 
 };
 
-// 86354e96-99a5-4e73-89ad-e17f7771c47b
 #define NS_ICSS_STYLE_RULE_IID \
-{ 0x86354e96, 0x99a5, 0x4e73, \
- { 0x89, 0xad, 0xe1, 0x7f, 0x77, 0x71, 0xc4, 0x7b } }
+{ 0x50f91efe, 0x9e36, 0x4b88, \
+  { 0x89, 0x04, 0xb1, 0x88, 0xa1, 0x23, 0x48, 0x13 } }
 
 
 class nsICSSStyleRule : public nsICSSRule {
 public:
   NS_DECLARE_STATIC_IID_ACCESSOR(NS_ICSS_STYLE_RULE_IID)
 
   // null for style attribute
   virtual nsCSSSelectorList* Selector(void) = 0;
