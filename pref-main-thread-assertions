From: L. David Baron <dbaron@dbaron.org>

Bug 619487 - Add assertions for prefs being accessed off the main thread to debug recursion-level assertions that I see after running for a long time.

diff --git a/modules/libpref/prefapi.cpp b/modules/libpref/prefapi.cpp
--- a/modules/libpref/prefapi.cpp
+++ b/modules/libpref/prefapi.cpp
@@ -140,16 +140,18 @@ enum {
     kPrefForceSet = 2
 };
 static nsresult pref_HashPref(const char *key, PrefValue value, PrefType type, uint32_t flags);
 
 #define PREF_HASHTABLE_INITIAL_LENGTH   1024
 
 void PREF_Init()
 {
+    NS_ASSERTION(NS_IsMainThread(),
+                 "pref hashtable is main thread only");
     if (!gHashTable.IsInitialized()) {
         PL_DHashTableInit(&gHashTable, &pref_HashTableOps,
                           sizeof(PrefHashEntry), PREF_HASHTABLE_INITIAL_LENGTH);
         PL_INIT_ARENA_POOL(&gPrefNameArena, "PrefNameArena",
                            PREFNAME_ARENA_SIZE);
     }
 }
 
@@ -171,16 +173,18 @@ void PREF_Cleanup()
     gCallbacks = nullptr;
 
     PREF_CleanupPrefs();
 }
 
 /* Frees up all the objects except the callback list. */
 void PREF_CleanupPrefs()
 {
+    NS_ASSERTION(NS_IsMainThread(),
+                 "pref hashtable is main thread only");
     if (gHashTable.IsInitialized()) {
         PL_DHashTableFinish(&gHashTable);
         PL_FinishArenaPool(&gPrefNameArena);
     }
 }
 
 // note that this appends to aResult, and does not assign!
 static void str_escape(const char * original, nsAFlatCString& aResult)
@@ -561,19 +565,17 @@ pref_DeleteItem(PLDHashTable *table, PLD
         return PL_DHASH_REMOVE;
 
     return PL_DHASH_NEXT;
 }
 
 nsresult
 PREF_DeleteBranch(const char *branch_name)
 {
-#ifndef MOZ_B2G
     MOZ_ASSERT(NS_IsMainThread());
-#endif
 
     int len = (int)strlen(branch_name);
 
     if (!gHashTable.IsInitialized())
         return NS_ERROR_NOT_INITIALIZED;
 
     /* The following check insures that if the branch name already has a "."
      * at the end, we don't end up with a "..". This fixes an incompatibility
@@ -632,19 +634,17 @@ pref_ClearUserPref(PLDHashTable *table, 
         pref_DoCallback(pref->key);
     }
     return nextOp;
 }
 
 nsresult
 PREF_ClearAllUserPrefs()
 {
-#ifndef MOZ_B2G
     MOZ_ASSERT(NS_IsMainThread());
-#endif
 
     if (!gHashTable.IsInitialized())
         return NS_ERROR_NOT_INITIALIZED;
 
     PL_DHashTableEnumerate(&gHashTable, pref_ClearUserPref, nullptr);
 
     gDirty = true;
     return NS_OK;
@@ -714,28 +714,24 @@ static void pref_SetValue(PrefValue* exi
     }
     else {
         *existingValue = newValue;
     }
 }
 
 PrefHashEntry* pref_HashTableLookup(const void *key)
 {
-#ifndef MOZ_B2G
     MOZ_ASSERT(NS_IsMainThread());
-#endif
 
     return static_cast<PrefHashEntry*>(PL_DHashTableSearch(&gHashTable, key));
 }
 
 nsresult pref_HashPref(const char *key, PrefValue value, PrefType type, uint32_t flags)
 {
-#ifndef MOZ_B2G
     MOZ_ASSERT(NS_IsMainThread());
-#endif
 
     if (!gHashTable.IsInitialized())
         return NS_ERROR_OUT_OF_MEMORY;
 
     PrefHashEntry* pref = static_cast<PrefHashEntry*>
         (PL_DHashTableAdd(&gHashTable, key, fallible));
 
     if (!pref)
