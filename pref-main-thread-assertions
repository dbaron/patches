From: L. David Baron <dbaron@dbaron.org>

Add assertions for prefs being accessed off the main thread to debug recursion-level assertions that I see after running for a long time.

diff --git a/modules/libpref/src/prefapi.cpp b/modules/libpref/src/prefapi.cpp
--- a/modules/libpref/src/prefapi.cpp
+++ b/modules/libpref/src/prefapi.cpp
@@ -149,16 +149,18 @@ enum {
     kPrefForceSet = 2
 };
 static nsresult pref_HashPref(const char *key, PrefValue value, PrefType type, uint32_t flags);
 
 #define PREF_HASHTABLE_INITIAL_SIZE	2048
 
 nsresult PREF_Init()
 {
+    NS_ASSERTION(NS_IsMainThread(),
+                 "pref hashtable is main thread only");
     if (!gHashTable.ops) {
         if (!PL_DHashTableInit(&gHashTable, &pref_HashTableOps, nullptr,
                                sizeof(PrefHashEntry),
                                PREF_HASHTABLE_INITIAL_SIZE)) {
             gHashTable.ops = nullptr;
             return NS_ERROR_OUT_OF_MEMORY;
         }
 
@@ -186,16 +188,18 @@ void PREF_Cleanup()
     gCallbacks = NULL;
 
     PREF_CleanupPrefs();
 }
 
 /* Frees up all the objects except the callback list. */
 void PREF_CleanupPrefs()
 {
+    NS_ASSERTION(NS_IsMainThread(),
+                 "pref hashtable is main thread only");
     if (gHashTable.ops) {
         PL_DHashTableFinish(&gHashTable);
         gHashTable.ops = nullptr;
         PL_FinishArenaPool(&gPrefNameArena);
     }
 }
 
 // note that this appends to aResult, and does not assign!
@@ -574,16 +578,18 @@ pref_DeleteItem(PLDHashTable *table, PLD
         return PL_DHASH_REMOVE;
 
     return PL_DHASH_NEXT;
 }
 
 nsresult
 PREF_DeleteBranch(const char *branch_name)
 {
+    NS_ASSERTION(NS_IsMainThread(),
+                 "pref hashtable is main thread only");
     int len = (int)PL_strlen(branch_name);
 
     if (!gHashTable.ops)
         return NS_ERROR_NOT_INITIALIZED;
 
     /* The following check insures that if the branch name already has a "."
      * at the end, we don't end up with a "..". This fixes an incompatibility
      * between nsIPref, which needs the period added, and nsIPrefBranch which
@@ -641,16 +647,18 @@ pref_ClearUserPref(PLDHashTable *table, 
         pref_DoCallback(pref->key);
     }
     return nextOp;
 }
 
 nsresult
 PREF_ClearAllUserPrefs()
 {
+    NS_ASSERTION(NS_IsMainThread(),
+                 "pref hashtable is main thread only");
     if (!gHashTable.ops)
         return NS_ERROR_NOT_INITIALIZED;
 
     PL_DHashTableEnumerate(&gHashTable, pref_ClearUserPref, nullptr);
 
     gDirty = true;
     return NS_OK;
 }
@@ -715,27 +723,31 @@ static void pref_SetValue(PrefValue* old
         default:
             *oldValue = newValue;
     }
     gDirty = true;
 }
 
 PrefHashEntry* pref_HashTableLookup(const void *key)
 {
+    NS_ASSERTION(NS_IsMainThread(),
+                 "pref hashtable is main thread only");
     PrefHashEntry* result =
         static_cast<PrefHashEntry*>(PL_DHashTableOperate(&gHashTable, key, PL_DHASH_LOOKUP));
 
     if (PL_DHASH_ENTRY_IS_FREE(result))
         return nullptr;
 
     return result;
 }
 
 nsresult pref_HashPref(const char *key, PrefValue value, PrefType type, uint32_t flags)
 {
+    NS_ASSERTION(NS_IsMainThread(),
+                 "pref hashtable is main thread only");
     if (!gHashTable.ops)
         return NS_ERROR_OUT_OF_MEMORY;
 
     PrefHashEntry* pref = static_cast<PrefHashEntry*>(PL_DHashTableOperate(&gHashTable, key, PL_DHASH_ADD));
 
     if (!pref)
         return NS_ERROR_OUT_OF_MEMORY;
 
