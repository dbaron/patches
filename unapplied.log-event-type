From: L. David Baron <dbaron@dbaron.org>

Log type of event on Linux and Mac.

TODO: Should condition on *runtime* PR logging check.

diff --git a/xpcom/threads/nsThread.cpp b/xpcom/threads/nsThread.cpp
--- a/xpcom/threads/nsThread.cpp
+++ b/xpcom/threads/nsThread.cpp
@@ -465,20 +465,34 @@ nsThread::DispatchInternal(nsIRunnable *
 
   NS_ASSERTION(flags == NS_DISPATCH_NORMAL, "unexpected dispatch flags");
   return PutEvent(event, target);
 }
 
 //-----------------------------------------------------------------------------
 // nsIEventTarget
 
+#include "nsStackWalk.h"
+
+static char gBuf[1024];
+
+static const char*
+GetTypeName(void* ptr)
+{
+  nsCodeAddressDetails details;
+  void *vptr = *(void**)ptr;
+  NS_DescribeCodeAddress(vptr, &details);
+  NS_FormatCodeAddressDetails(vptr, &details, gBuf, sizeof(gBuf));
+  return gBuf;
+}
+
 NS_IMETHODIMP
 nsThread::Dispatch(nsIRunnable *event, uint32_t flags)
 {
-  LOG(("THRD(%p) Dispatch [%p %x]\n", this, event, flags));
+  LOG(("THRD(%p) Dispatch [%p(%s) %x]\n", this, event, GetTypeName(event), flags));
 
   return DispatchInternal(event, flags, nullptr);
 }
 
 NS_IMETHODIMP
 nsThread::IsOnCurrentThread(bool *result)
 {
   *result = (PR_GetCurrentThread() == mThread);
@@ -683,17 +697,17 @@ nsThread::ProcessNextEvent(bool mayWait,
 
     // If we are shutting down, then do not wait for new events.
     nsCOMPtr<nsIRunnable> event;
     mEvents->GetEvent(reallyWait, getter_AddRefs(event));
 
     *result = (event.get() != nullptr);
 
     if (event) {
-      LOG(("THRD(%p) running [%p]\n", this, event.get()));
+      LOG(("THRD(%p) running [%p(%s)]\n", this, event.get(), GetTypeName(event)));
       if (MAIN_THREAD == mIsMainThread)
         HangMonitor::NotifyActivity();
       event->Run();
     } else if (mayWait) {
       MOZ_ASSERT(ShuttingDown(),
                  "This should only happen when shutting down");
       rv = NS_ERROR_UNEXPECTED;
     }
