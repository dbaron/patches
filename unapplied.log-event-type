From: L. David Baron <dbaron@dbaron.org>

Log type of event on Linux and Mac.

TODO: Should condition on *runtime* PR logging check.

diff --git a/xpcom/threads/nsThread.cpp b/xpcom/threads/nsThread.cpp
--- a/xpcom/threads/nsThread.cpp
+++ b/xpcom/threads/nsThread.cpp
@@ -600,20 +600,34 @@ nsThread::DispatchInternal(already_AddRe
 
 NS_IMETHODIMP
 nsThread::DispatchFromScript(nsIRunnable* aEvent, uint32_t aFlags)
 {
   nsCOMPtr<nsIRunnable> event(aEvent);
   return Dispatch(event.forget(), aFlags);
 }
 
+#include "nsStackWalk.h"
+
+static char gBuf[1024];
+
+static const char*
+GetTypeName(void* ptr)
+{
+  nsCodeAddressDetails details;
+  void *vptr = *(void**)ptr;
+  NS_DescribeCodeAddress(vptr, &details);
+  NS_FormatCodeAddressDetails(vptr, &details, gBuf, sizeof(gBuf));
+  return gBuf;
+}
+
 NS_IMETHODIMP
 nsThread::Dispatch(already_AddRefed<nsIRunnable>&& aEvent, uint32_t aFlags)
 {
-  LOG(("THRD(%p) Dispatch [%p %x]\n", this, /* XXX aEvent */nullptr, aFlags));
+  LOG(("THRD(%p) Dispatch [%p(%s) %x]\n", this, /* XXX aEvent */nullptr, GetTypeName(aEvent), aFlags));
 
   return DispatchInternal(Move(aEvent), aFlags, nullptr);
 }
 
 NS_IMETHODIMP
 nsThread::IsOnCurrentThread(bool* aResult)
 {
   *aResult = (PR_GetCurrentThread() == mThread);
@@ -860,17 +874,17 @@ nsThread::ProcessNextEvent(bool aMayWait
 
     // If we are shutting down, then do not wait for new events.
     nsCOMPtr<nsIRunnable> event;
     mEvents->GetEvent(reallyWait, getter_AddRefs(event));
 
     *aResult = (event.get() != nullptr);
 
     if (event) {
-      LOG(("THRD(%p) running [%p]\n", this, event.get()));
+      LOG(("THRD(%p) running [%p(%s)]\n", this, event.get(), GetTypeName(event)));
 #if !defined(MOZILLA_XPCOMRT_API)
       if (MAIN_THREAD == mIsMainThread) {
         HangMonitor::NotifyActivity();
       }
 #endif // !defined(MOZILLA_XPCOMRT_API)
       event->Run();
     } else if (aMayWait) {
       MOZ_ASSERT(ShuttingDown(),
