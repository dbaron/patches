From: L. David Baron <dbaron@dbaron.org>

Rename eUnit_BorderCorner to eUnit_CSSValuePair.

diff --git a/layout/style/nsStyleAnimation.cpp b/layout/style/nsStyleAnimation.cpp
--- a/layout/style/nsStyleAnimation.cpp
+++ b/layout/style/nsStyleAnimation.cpp
@@ -186,17 +186,17 @@ nsStyleAnimation::ComputeDistance(const 
       double diffA = startA - endA;
       double diffR = startR - endR;
       double diffG = startG - endG;
       double diffB = startB - endB;
       aDistance = sqrt(diffA * diffA + diffR * diffR +
                        diffG * diffG + diffB * diffB);
       break;
     }
-    case eUnit_BorderCorner: {
+    case eUnit_CSSValuePair: {
       const nsCSSValuePair *pair1 = aStartValue.GetCSSValuePairValue();
       const nsCSSValuePair *pair2 = aEndValue.GetCSSValuePairValue();
       if (pair1->mXValue.GetUnit() != pair2->mXValue.GetUnit() ||
           pair1->mYValue.GetUnit() != pair2->mYValue.GetUnit()) {
         // At least until we have calc()
         return PR_FALSE;
       }
 
@@ -498,17 +498,17 @@ nsStyleAnimation::AddWeighted(double aCo
         PRUint8 Rres = ClampColor((R1 * aCoeff1 + R2 * aCoeff2) * factor);
         PRUint8 Gres = ClampColor((G1 * aCoeff1 + G2 * aCoeff2) * factor);
         PRUint8 Bres = ClampColor((B1 * aCoeff1 + B2 * aCoeff2) * factor);
         resultColor = NS_RGBA(Rres, Gres, Bres, Ares);
       }
       aResultValue.SetColorValue(resultColor);
       break;
     }
-    case eUnit_BorderCorner: {
+    case eUnit_CSSValuePair: {
       const nsCSSValuePair *pair1 = aValue1.GetCSSValuePairValue();
       const nsCSSValuePair *pair2 = aValue2.GetCSSValuePairValue();
       if (pair1->mXValue.GetUnit() != pair2->mXValue.GetUnit() ||
           pair1->mYValue.GetUnit() != pair2->mYValue.GetUnit()) {
         // At least until we have calc()
         return PR_FALSE;
       }
 
@@ -537,17 +537,17 @@ nsStyleAnimation::AddWeighted(double aCo
               aCoeff2 * (pair2->*member).GetPercentValue());
             break;
           default:
             NS_ABORT_IF_FALSE(PR_FALSE, "unexpected unit");
             return PR_FALSE;
         }
       }
 
-      aResultValue.SetCSSValuePairValue(result.forget(), eUnit_BorderCorner,
+      aResultValue.SetCSSValuePairValue(result.forget(), eUnit_CSSValuePair,
                                         PR_TRUE);
       break;
     }
     case eUnit_Dasharray: {
       const nsCSSValueList *list1 = aValue1.GetCSSValueListValue();
       const nsCSSValueList *list2 = aValue2.GetCSSValueListValue();
 
       PRUint32 len1 = 0, len2 = 0;
@@ -814,17 +814,17 @@ nsStyleAnimation::UncomputeValue(nsCSSPr
           SetBothValuesTo(val);
       } else {
         NS_ABORT_IF_FALSE(nsCSSProps::kTypeTable[aProperty] == eCSSType_Value,
                           "type mismatch");
         static_cast<nsCSSValue*>(aSpecifiedValue)->
           SetColorValue(aComputedValue.GetColorValue());
       }
       break;
-    case eUnit_BorderCorner:
+    case eUnit_CSSValuePair:
       NS_ABORT_IF_FALSE(nsCSSProps::kTypeTable[aProperty] ==
                           eCSSType_ValuePair, "type mismatch");
       *static_cast<nsCSSValuePair*>(aSpecifiedValue) =
         *aComputedValue.GetCSSValuePairValue();
       break;
     case eUnit_Dasharray:
     case eUnit_Shadow:
       NS_ABORT_IF_FALSE(nsCSSProps::kTypeTable[aProperty] ==
@@ -1136,17 +1136,17 @@ nsStyleAnimation::ExtractComputedValue(n
       const nsStyleCoord &vert =
         corners->Get(NS_FULL_TO_HALF_CORNER(fullCorner, PR_TRUE));
       nsCSSValuePair *pair = new nsCSSValuePair;
       if (!pair) {
         return PR_FALSE;
       }
       StyleCoordToCSSValue(horiz, pair->mXValue);
       StyleCoordToCSSValue(vert, pair->mYValue);
-      aComputedValue.SetCSSValuePairValue(pair, eUnit_BorderCorner, PR_TRUE);
+      aComputedValue.SetCSSValuePairValue(pair, eUnit_CSSValuePair, PR_TRUE);
       return PR_TRUE;
     }
     case eStyleAnimType_nscoord:
       aComputedValue.SetCoordValue(*static_cast<const nscoord*>(
         StyleDataAtOffset(styleStruct, ssOffset)));
       return PR_TRUE;
     case eStyleAnimType_EnumU8:
       aComputedValue.SetIntValue(*static_cast<const PRUint8*>(
@@ -1289,17 +1289,17 @@ nsStyleAnimation::Value::operator=(const
       break;
     case eUnit_Percent:
     case eUnit_Float:
       mValue.mFloat = aOther.mValue.mFloat;
       break;
     case eUnit_Color:
       mValue.mColor = aOther.mValue.mColor;
       break;
-    case eUnit_BorderCorner:
+    case eUnit_CSSValuePair:
       NS_ABORT_IF_FALSE(aOther.mValue.mCSSValuePair,
                         "value pairs may not be null");
       mValue.mCSSValuePair = new nsCSSValuePair(*aOther.mValue.mCSSValuePair);
       if (!mValue.mCSSValuePair) {
         mUnit = eUnit_Null;
       }
       break;
     case eUnit_Dasharray:
@@ -1441,17 +1441,17 @@ nsStyleAnimation::Value::operator==(cons
       return mValue.mInt == aOther.mValue.mInt;
     case eUnit_Coord:
       return mValue.mCoord == aOther.mValue.mCoord;
     case eUnit_Percent:
     case eUnit_Float:
       return mValue.mFloat == aOther.mValue.mFloat;
     case eUnit_Color:
       return mValue.mColor == aOther.mValue.mColor;
-    case eUnit_BorderCorner:
+    case eUnit_CSSValuePair:
       return *mValue.mCSSValuePair == *aOther.mValue.mCSSValuePair;
     case eUnit_Dasharray:
     case eUnit_Shadow:
       return nsCSSValueList::Equal(mValue.mCSSValueList,
                                    aOther.mValue.mCSSValueList);
   }
 
   NS_NOTREACHED("incomplete case");
diff --git a/layout/style/nsStyleAnimation.h b/layout/style/nsStyleAnimation.h
--- a/layout/style/nsStyleAnimation.h
+++ b/layout/style/nsStyleAnimation.h
@@ -223,17 +223,17 @@ public:
     eUnit_Auto,
     eUnit_None,
     eUnit_Enumerated,
     eUnit_Integer,
     eUnit_Coord,
     eUnit_Percent,
     eUnit_Float,
     eUnit_Color,
-    eUnit_BorderCorner, // nsCSSValuePair* (never null)
+    eUnit_CSSValuePair, // nsCSSValuePair* (never null)
     eUnit_Dasharray, // nsCSSValueList* (never null)
     eUnit_Shadow  // nsCSSValueList* (may be null)
   };
 
   class Value {
   private:
     Unit mUnit;
     union {
@@ -325,17 +325,17 @@ public:
 
   private:
     void FreeValue();
 
     static PRBool IsIntUnit(Unit aUnit) {
       return aUnit == eUnit_Enumerated || aUnit == eUnit_Integer;
     }
     static PRBool IsCSSValuePairUnit(Unit aUnit) {
-      return aUnit == eUnit_BorderCorner;
+      return aUnit == eUnit_CSSValuePair;
     }
     static PRBool IsCSSValueListUnit(Unit aUnit) {
       return aUnit == eUnit_Dasharray || aUnit == eUnit_Shadow;
     }
   };
 };
 
 #endif
