From: L. David Baron <dbaron@dbaron.org>

Fix variable shadowing that would become noisy with -Wshadow enabled.  (Bug 563195)

diff --git a/js/src/jscntxt.h b/js/src/jscntxt.h
--- a/js/src/jscntxt.h
+++ b/js/src/jscntxt.h
@@ -2528,25 +2528,25 @@ class RuntimeAllocPolicy
     void reportAllocOverflow() const {}
 };
 
 /*
  * FIXME bug 647103 - replace these *AllocPolicy names.
  */
 class ContextAllocPolicy
 {
-    JSContext *const cx;
+    JSContext *const mContext;
 
   public:
-    ContextAllocPolicy(JSContext *cx) : cx(cx) {}
-    JSContext *context() const { return cx; }
-    void *malloc_(size_t bytes) { return cx->malloc_(bytes); }
-    void *realloc_(void *p, size_t oldBytes, size_t bytes) { return cx->realloc_(p, oldBytes, bytes); }
-    void free_(void *p) { cx->free_(p); }
-    void reportAllocOverflow() const { js_ReportAllocationOverflow(cx); }
+    ContextAllocPolicy(JSContext *cx) : mContext(cx) {}
+    JSContext *context() const { return mContext; }
+    void *malloc_(size_t bytes) { return mContext->malloc_(bytes); }
+    void *realloc_(void *p, size_t oldBytes, size_t bytes) { return mContext->realloc_(p, oldBytes, bytes); }
+    void free_(void *p) { mContext->free_(p); }
+    void reportAllocOverflow() const { js_ReportAllocationOverflow(mContext); }
 };
 
 } /* namespace js */
 
 #ifdef _MSC_VER
 #pragma warning(pop)
 #pragma warning(pop)
 #endif
diff --git a/js/src/jshashtable.h b/js/src/jshashtable.h
--- a/js/src/jshashtable.h
+++ b/js/src/jshashtable.h
@@ -128,17 +128,17 @@ class HashTable : private AllocPolicy
     {
         friend class HashTable;
         typedef void (Ptr::* ConvertibleToBool)();
         void nonNull() {}
 
         Entry *entry;
 
       protected:
-        Ptr(Entry &entry) : entry(&entry) {}
+        Ptr(Entry &entryarg) : entry(&entryarg) {}
 
       public:
         /* Leaves Ptr uninitialized. */
         Ptr() {
 #ifdef DEBUG
             entry = (Entry *)0xbad;
 #endif
         }
@@ -155,20 +155,20 @@ class HashTable : private AllocPolicy
     /* A Ptr that can be used to add a key after a failed lookup. */
     class AddPtr : public Ptr
     {
         friend class HashTable;
         HashNumber keyHash;
 #ifdef DEBUG
         uint64 mutationCount;
 
-        AddPtr(Entry &entry, HashNumber hn, uint64 mutationCount)
-            : Ptr(entry), keyHash(hn), mutationCount(mutationCount) {}
+        AddPtr(Entry &entryarg, HashNumber hn, uint64 mutationCount)
+            : Ptr(entryarg), keyHash(hn), mutationCount(mutationCount) {}
 #else
-        AddPtr(Entry &entry, HashNumber hn) : Ptr(entry), keyHash(hn) {}
+        AddPtr(Entry &entryarg, HashNumber hn) : Ptr(entryarg), keyHash(hn) {}
 #endif
       public:
         /* Leaves AddPtr uninitialized. */
         AddPtr() {}
     };
 
     /*
      * A collection of hash table entries. The collection is enumerated by
diff --git a/js/src/jstl.h b/js/src/jstl.h
--- a/js/src/jstl.h
+++ b/js/src/jstl.h
@@ -226,19 +226,19 @@ RoundUpPow2(size_t x)
 }
 
 template <class T>
 class AlignedPtrAndFlag
 {
     uintptr_t bits;
 
   public:
-    AlignedPtrAndFlag(T *t, bool flag) {
+    AlignedPtrAndFlag(T *t, bool flagarg) {
         JS_ASSERT((uintptr_t(t) & 1) == 0);
-        bits = uintptr_t(t) | uintptr_t(flag);
+        bits = uintptr_t(t) | uintptr_t(flagarg);
     }
 
     T *ptr() const {
         return (T *)(bits & ~uintptr_t(1));
     }
 
     bool flag() const {
         return (bits & 1) != 0;
@@ -252,19 +252,19 @@ class AlignedPtrAndFlag
     void setFlag() {
         bits |= 1;
     }
 
     void unsetFlag() {
         bits &= ~uintptr_t(1);
     }
 
-    void set(T *t, bool flag) {
+    void set(T *t, bool flagarg) {
         JS_ASSERT((uintptr_t(t) & 1) == 0);
-        bits = uintptr_t(t) | flag;
+        bits = uintptr_t(t) | flagarg;
     }
 };
 
 template <class T>
 static inline void
 Reverse(T *beg, T *end)
 {
     while (beg != end) {
