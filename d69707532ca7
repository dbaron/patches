
# HG changeset patch
# User Ryan VanderMeulen <ryanvm@gmail.com>
# Date 1479404903 18000
# Node ID d69707532ca794bc2898108b6ee550b7284e0341
# Parent  4fca3c861e317f502d667fcee4950bc2be3d3b65
Bug 1318195 - Only build RegisterXPCTestComponents if tests are enabled. r=froydnj

diff --git a/js/xpconnect/src/XPCShellImpl.cpp b/js/xpconnect/src/XPCShellImpl.cpp
--- a/js/xpconnect/src/XPCShellImpl.cpp
+++ b/js/xpconnect/src/XPCShellImpl.cpp
@@ -23,17 +23,16 @@
 #include "nscore.h"
 #include "nsArrayEnumerator.h"
 #include "nsCOMArray.h"
 #include "nsDirectoryServiceUtils.h"
 #include "nsCOMPtr.h"
 #include "nsJSPrincipals.h"
 #include "xpcpublic.h"
 #include "xpcprivate.h"
-#include "xpctest_private.h"
 #include "BackstagePass.h"
 #include "nsIScriptSecurityManager.h"
 #include "nsIPrincipal.h"
 #include "nsJSUtils.h"
 #include "gfxPrefs.h"
 #include "nsIXULRuntime.h"
 
 #include "base/histogram.h"
@@ -60,16 +59,20 @@
 #include <unistd.h>     /* for isatty() */
 #endif
 
 #ifdef MOZ_CRASHREPORTER
 #include "nsExceptionHandler.h"
 #include "nsICrashReporter.h"
 #endif
 
+#ifdef ENABLE_TESTS
+#include "xpctest_private.h"
+#endif
+
 using namespace mozilla;
 using namespace JS;
 using mozilla::dom::AutoJSAPI;
 using mozilla::dom::AutoEntryScript;
 
 class XPCShellDirProvider : public nsIDirectoryServiceProvider2
 {
 public:
@@ -639,31 +642,33 @@ RegisterAppManifest(JSContext* cx, unsig
     rv = XRE_AddManifestLocation(NS_APP_LOCATION, file);
     if (NS_FAILED(rv)) {
         XPCThrower::Throw(rv, cx);
         return false;
     }
     return true;
 }
 
+#ifdef ENABLE_TESTS
 static bool
 RegisterXPCTestComponents(JSContext* cx, unsigned argc, Value* vp)
 {
     JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
     if (args.length() != 0) {
         JS_ReportErrorASCII(cx, "Wrong number of arguments");
         return false;
     }
     nsresult rv = XRE_AddStaticComponent(&kXPCTestModule);
     if (NS_FAILED(rv)) {
         XPCThrower::Throw(rv, cx);
         return false;
     }
     return true;
 }
+#endif
 
 static const JSFunctionSpec glob_functions[] = {
     JS_FS("print",           Print,          0,0),
     JS_FS("readline",        ReadLine,       1,0),
     JS_FS("load",            Load,           1,0),
     JS_FS("quit",            Quit,           0,0),
     JS_FS("version",         Version,        1,0),
     JS_FS("dumpXPC",         DumpXPC,        1,0),
@@ -674,17 +679,19 @@ static const JSFunctionSpec glob_functio
 #endif
     JS_FS("options",         Options,        0,0),
     JS_FS("sendCommand",     SendCommand,    1,0),
     JS_FS("atob",            xpc::Atob,      1,0),
     JS_FS("btoa",            xpc::Btoa,      1,0),
     JS_FS("setInterruptCallback", SetInterruptCallback, 1,0),
     JS_FS("simulateActivityCallback", SimulateActivityCallback, 1,0),
     JS_FS("registerAppManifest", RegisterAppManifest, 1, 0),
+#ifdef ENABLE_TESTS
     JS_FS("registerXPCTestComponents", RegisterXPCTestComponents, 0, 0),
+#endif
     JS_FS_END
 };
 
 static bool
 env_setProperty(JSContext* cx, HandleObject obj, HandleId id, MutableHandleValue vp,
                 ObjectOpResult& result)
 {
 /* XXX porting may be easy, but these don't seem to supply setenv by default */
