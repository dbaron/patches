Avoid stack overflow by not using recursion to add the important rules.  b=439184

diff --git a/layout/style/nsStyleSet.cpp b/layout/style/nsStyleSet.cpp
--- a/layout/style/nsStyleSet.cpp
+++ b/layout/style/nsStyleSet.cpp
@@ -424,60 +424,68 @@ nsStyleSet::GetContext(nsPresContext* aP
 
   return result;
 }
 
 void
 nsStyleSet::AddImportantRules(nsRuleNode* aCurrLevelNode,
                               nsRuleNode* aLastPrevLevelNode)
 {
-  if (!aCurrLevelNode || aCurrLevelNode == aLastPrevLevelNode)
+  if (!aCurrLevelNode)
     return;
 
-  AddImportantRules(aCurrLevelNode->GetParent(), aLastPrevLevelNode);
+  nsCOMArray<nsIStyleRule> importantRules;
+  for (nsRuleNode *node = aCurrLevelNode; node != aLastPrevLevelNode;
+       node = node->GetParent()) {
+    nsIStyleRule *rule = node->GetRule();
+    nsCOMPtr<nsICSSStyleRule> cssRule(do_QueryInterface(rule));
+    if (cssRule) {
+      nsCOMPtr<nsIStyleRule> impRule = cssRule->GetImportantRule();
+      if (impRule)
+        importantRules.AppendObject(impRule);
+    }
+  }
 
-  nsIStyleRule *rule = aCurrLevelNode->GetRule();
-  nsCOMPtr<nsICSSStyleRule> cssRule(do_QueryInterface(rule));
-  if (cssRule) {
-    nsCOMPtr<nsIStyleRule> impRule = cssRule->GetImportantRule();
-    if (impRule)
-      mRuleWalker->Forward(impRule);
+  for (PRInt32 i = importantRules.Count(); i >= 0; --i) {
+    mRuleWalker->Forward(importantRules[i]);
   }
 }
 
 #ifdef DEBUG
 void
 nsStyleSet::AssertNoImportantRules(nsRuleNode* aCurrLevelNode,
                                    nsRuleNode* aLastPrevLevelNode)
 {
-  if (!aCurrLevelNode || aCurrLevelNode == aLastPrevLevelNode)
+  if (!aCurrLevelNode)
     return;
 
-  AssertNoImportantRules(aCurrLevelNode->GetParent(), aLastPrevLevelNode);
-
-  nsIStyleRule *rule = aCurrLevelNode->GetRule();
-  nsCOMPtr<nsICSSStyleRule> cssRule(do_QueryInterface(rule));
-  if (cssRule) {
-    nsCOMPtr<nsIStyleRule> impRule = cssRule->GetImportantRule();
-    NS_ASSERTION(!impRule, "Unexpected important rule");
+  for (nsRuleNode *node = aCurrLevelNode; node != aLastPrevLevelNode;
+       node = node->GetParent()) {
+    nsIStyleRule *rule = node->GetRule();
+    nsCOMPtr<nsICSSStyleRule> cssRule(do_QueryInterface(rule));
+    if (cssRule) {
+      nsCOMPtr<nsIStyleRule> impRule = cssRule->GetImportantRule();
+      NS_ASSERTION(!impRule, "Unexpected important rule");
+    }
   }
 }
 
 void
 nsStyleSet::AssertNoCSSRules(nsRuleNode* aCurrLevelNode,
                              nsRuleNode* aLastPrevLevelNode)
 {
   if (!aCurrLevelNode || aCurrLevelNode == aLastPrevLevelNode)
     return;
 
-  AssertNoCSSRules(aCurrLevelNode->GetParent(), aLastPrevLevelNode);
-
-  nsIStyleRule *rule = aCurrLevelNode->GetRule();
-  nsCOMPtr<nsICSSStyleRule> cssRule(do_QueryInterface(rule));
-  NS_ASSERTION(!cssRule || !cssRule->Selector(), "Unexpected CSS rule");
+  for (nsRuleNode *node = aCurrLevelNode; node != aLastPrevLevelNode;
+       node = node->GetParent()) {
+    nsIStyleRule *rule = node->GetRule();
+    nsCOMPtr<nsICSSStyleRule> cssRule(do_QueryInterface(rule));
+    NS_ASSERTION(!cssRule || !cssRule->Selector(), "Unexpected CSS rule");
+  }
 }
 #endif
 
 // Enumerate the rules in a way that cares about the order of the rules.
 void
 nsStyleSet::FileRules(nsIStyleRuleProcessor::EnumFunc aCollectorFunc, 
                       RuleProcessorData* aData)
 {
