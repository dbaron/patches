From: L. David Baron <dbaron@dbaron.org>

Separate properties that are parsed in ParseSingleValueProperty with something other than ParseVariant.

diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -5446,16 +5446,35 @@ CSSParserImpl::ParsePropertyByFunction(n
 #define BG_RIGHT   NS_STYLE_BG_POSITION_RIGHT
 #define BG_CTB    (BG_CENTER | BG_TOP | BG_BOTTOM)
 #define BG_CLR    (BG_CENTER | BG_LEFT | BG_RIGHT)
 
 PRBool
 CSSParserImpl::ParseSingleValueProperty(nsCSSValue& aValue,
                                         nsCSSProperty aPropID)
 {
+  if (nsCSSProps::PropHasFlags(aPropID, CSS_PROPERTY_VALUE_PARSER_FUNCTION)) {
+    switch (aPropID) {
+      case eCSSProperty_azimuth:
+        return ParseAzimuth(aValue);
+      case eCSSProperty_font_family:
+      case eCSSProperty_voice_family:
+        return ParseFamily(aValue);
+      case eCSSProperty_font_weight:
+        return ParseFontWeight(aValue);
+      case eCSSProperty_marks:
+        return ParseMarks(aValue);
+      case eCSSProperty_text_decoration:
+        return ParseTextDecoration(aValue);
+      default:
+        NS_ABORT_IF_FALSE(PR_FALSE, "should not reach here");
+        return PR_FALSE;
+    }
+  }
+
   switch (aPropID) {
   case eCSSProperty_UNKNOWN:
   case eCSSProperty_background:
   case eCSSProperty_background_position:
   case eCSSProperty_border:
   case eCSSProperty_border_color:
   case eCSSProperty_border_bottom_colors:
   case eCSSProperty_border_image:
@@ -5566,18 +5585,16 @@ CSSParserImpl::ParseSingleValueProperty(
   case eCSSProperty_script_min_size:
 #endif
     NS_ERROR("not currently parsed here");
     return PR_FALSE;
 
   case eCSSProperty_appearance:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kAppearanceKTable);
-  case eCSSProperty_azimuth:
-    return ParseAzimuth(aValue);
   case eCSSProperty_background_attachment:
     // Used only internally.
     return ParseVariant(aValue, VARIANT_KEYWORD,
                         nsCSSProps::kBackgroundAttachmentKTable);
   case eCSSProperty_background_clip:
     // Used only internally.
     return ParseVariant(aValue, VARIANT_KEYWORD,
                         nsCSSProps::kBackgroundOriginKTable);
@@ -5767,18 +5784,16 @@ CSSParserImpl::ParseSingleValueProperty(
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kEmptyCellsKTable);
   case eCSSProperty_float:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kFloatKTable);
   case eCSSProperty_float_edge:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kFloatEdgeKTable);
-  case eCSSProperty_font_family:
-    return ParseFamily(aValue);
   case eCSSProperty_font_feature_settings:
   case eCSSProperty_font_language_override:
     return ParseVariant(aValue, VARIANT_NORMAL | VARIANT_INHERIT |
                                 VARIANT_STRING, nsnull);
   case eCSSProperty_font_size:
     return ParseNonNegativeVariant(aValue,
                                    VARIANT_HKLP | VARIANT_SYSFONT |
                                      VARIANT_CALC,
@@ -5790,18 +5805,16 @@ CSSParserImpl::ParseSingleValueProperty(
     return ParseVariant(aValue, VARIANT_HK | VARIANT_SYSFONT,
                         nsCSSProps::kFontStretchKTable);
   case eCSSProperty_font_style:
     return ParseVariant(aValue, VARIANT_HK | VARIANT_SYSFONT,
                         nsCSSProps::kFontStyleKTable);
   case eCSSProperty_font_variant:
     return ParseVariant(aValue, VARIANT_HK | VARIANT_SYSFONT,
                         nsCSSProps::kFontVariantKTable);
-  case eCSSProperty_font_weight:
-    return ParseFontWeight(aValue);
   case eCSSProperty_ime_mode:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kIMEModeKTable);
   case eCSSProperty__moz_tab_size:
     return ParseNonNegativeVariant(aValue, VARIANT_HI, nsnull);
   case eCSSProperty_letter_spacing:
   case eCSSProperty_word_spacing:
     return ParseVariant(aValue, VARIANT_HL | VARIANT_NORMAL | VARIANT_CALC,
@@ -5818,18 +5831,16 @@ CSSParserImpl::ParseSingleValueProperty(
   case eCSSProperty_margin_end_value: // for internal use
   case eCSSProperty_margin_left_value: // for internal use
   case eCSSProperty_margin_right_value: // for internal use
   case eCSSProperty_margin_start_value: // for internal use
   case eCSSProperty_margin_top:
     return ParseVariant(aValue, VARIANT_AHLP | VARIANT_CALC, nsnull);
   case eCSSProperty_marker_offset:
     return ParseVariant(aValue, VARIANT_AHL | VARIANT_CALC, nsnull);
-  case eCSSProperty_marks:
-    return ParseMarks(aValue);
   case eCSSProperty_max_height:
     return ParseNonNegativeVariant(aValue, VARIANT_HLPO | VARIANT_CALC,
                                    nsnull);
   case eCSSProperty_max_width:
     return ParseNonNegativeVariant(aValue, VARIANT_HKLPO | VARIANT_CALC,
                                    nsCSSProps::kWidthKTable);
   case eCSSProperty_min_height:
     return ParseNonNegativeVariant(aValue, VARIANT_HLP | VARIANT_CALC,
@@ -5923,18 +5934,16 @@ CSSParserImpl::ParseSingleValueProperty(
   case eCSSProperty_table_layout:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kTableLayoutKTable);
   case eCSSProperty_text_align:
     // When we support aligning on a string, we can parse text-align
     // as a string....
     return ParseVariant(aValue, VARIANT_HK /* | VARIANT_STRING */,
                         nsCSSProps::kTextAlignKTable);
-  case eCSSProperty_text_decoration:
-    return ParseTextDecoration(aValue);
   case eCSSProperty_text_indent:
     return ParseVariant(aValue, VARIANT_HLP | VARIANT_CALC, nsnull);
   case eCSSProperty_text_transform:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kTextTransformKTable);
   case eCSSProperty_unicode_bidi:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kUnicodeBidiKTable);
@@ -5951,18 +5960,16 @@ CSSParserImpl::ParseSingleValueProperty(
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kUserSelectKTable);
   case eCSSProperty_vertical_align:
     return ParseVariant(aValue, VARIANT_HKLP | VARIANT_CALC,
                         nsCSSProps::kVerticalAlignKTable);
   case eCSSProperty_visibility:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kVisibilityKTable);
-  case eCSSProperty_voice_family:
-    return ParseFamily(aValue);
   case eCSSProperty_volume:
     return ParseVariant(aValue, VARIANT_HPN | VARIANT_KEYWORD,
                         nsCSSProps::kVolumeKTable);
   case eCSSProperty_white_space:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kWhitespaceKTable);
   case eCSSProperty__moz_window_shadow:
     return ParseVariant(aValue, VARIANT_HK,
diff --git a/layout/style/nsCSSPropList.h b/layout/style/nsCSSPropList.h
--- a/layout/style/nsCSSPropList.h
+++ b/layout/style/nsCSSPropList.h
@@ -369,17 +369,18 @@ CSS_PROP_FONT(
     kFontKTable,
     CSS_PROP_NO_OFFSET,
     eStyleAnimType_None)
 #endif
 CSS_PROP_BACKENDONLY(
     azimuth,
     azimuth,
     Azimuth,
-    CSS_PROPERTY_PARSE_VALUE,
+    CSS_PROPERTY_PARSE_VALUE |
+        CSS_PROPERTY_VALUE_PARSER_FUNCTION,
     Aural,
     mAzimuth,
     kAzimuthKTable)
 CSS_PROP_SHORTHAND(
     background,
     background,
     Background,
     CSS_PROPERTY_PARSE_FUNCTION)
@@ -1410,16 +1411,17 @@ CSS_PROP_SHORTHAND(
     font,
     Font,
     CSS_PROPERTY_PARSE_FUNCTION)
 CSS_PROP_FONT(
     font-family,
     font_family,
     FontFamily,
     CSS_PROPERTY_PARSE_VALUE |
+        CSS_PROPERTY_VALUE_PARSER_FUNCTION |
         CSS_PROPERTY_APPLIES_TO_FIRST_LETTER_AND_FIRST_LINE,
     Font,
     mFamily,
     nsnull,
     CSS_PROP_NO_OFFSET,
     eStyleAnimType_None)
 CSS_PROP_FONT(
     -moz-font-feature-settings,
@@ -1500,16 +1502,17 @@ CSS_PROP_FONT(
     kFontVariantKTable,
     offsetof(nsStyleFont, mFont.variant),
     eStyleAnimType_EnumU8)
 CSS_PROP_FONT(
     font-weight,
     font_weight,
     FontWeight,
     CSS_PROPERTY_PARSE_VALUE |
+        CSS_PROPERTY_VALUE_PARSER_FUNCTION |
         CSS_PROPERTY_APPLIES_TO_FIRST_LETTER_AND_FIRST_LINE,
     Font,
     mWeight,
     kFontWeightKTable,
     offsetof(nsStyleFont, mFont.weight),
     eStyleAnimType_Custom)
 CSS_PROP_UIRESET(
     -moz-force-broken-image-icon,
@@ -1785,17 +1788,18 @@ CSS_PROP_CONTENT(
     mMarkerOffset,
     nsnull,
     offsetof(nsStyleContent, mMarkerOffset),
     eStyleAnimType_Coord)
 CSS_PROP_BACKENDONLY(
     marks,
     marks,
     Marks,
-    CSS_PROPERTY_PARSE_VALUE,
+    CSS_PROPERTY_PARSE_VALUE |
+        CSS_PROPERTY_VALUE_PARSER_FUNCTION,
     Page,
     mMarks,
     kPageMarksKTable)
 CSS_PROP_POSITION(
     max-height,
     max_height,
     MaxHeight,
     CSS_PROPERTY_PARSE_VALUE |
@@ -2290,16 +2294,17 @@ CSS_PROP_TEXT(
     kTextAlignKTable,
     CSS_PROP_NO_OFFSET,
     eStyleAnimType_None)
 CSS_PROP_TEXTRESET(
     text-decoration,
     text_decoration,
     TextDecoration,
     CSS_PROPERTY_PARSE_VALUE |
+        CSS_PROPERTY_VALUE_PARSER_FUNCTION |
         CSS_PROPERTY_APPLIES_TO_FIRST_LETTER_AND_FIRST_LINE,
     Text,
     mDecoration,
     kTextDecorationKTable,
     offsetof(nsStyleTextReset, mTextDecoration),
     eStyleAnimType_EnumU8)
 CSS_PROP_TEXT(
     text-indent,
@@ -2491,17 +2496,18 @@ CSS_PROP_VISIBILITY(
     mVisibility,
     kVisibilityKTable,
     offsetof(nsStyleVisibility, mVisible),
     eStyleAnimType_EnumU8)  // reflow for collapse
 CSS_PROP_BACKENDONLY(
     voice-family,
     voice_family,
     VoiceFamily,
-    CSS_PROPERTY_PARSE_VALUE,
+    CSS_PROPERTY_PARSE_VALUE |
+        CSS_PROPERTY_VALUE_PARSER_FUNCTION,
     Aural,
     mVoiceFamily,
     nsnull)
 CSS_PROP_BACKENDONLY(
     volume,
     volume,
     Volume,
     CSS_PROPERTY_PARSE_VALUE,
diff --git a/layout/style/nsCSSProps.h b/layout/style/nsCSSProps.h
--- a/layout/style/nsCSSProps.h
+++ b/layout/style/nsCSSProps.h
@@ -96,16 +96,19 @@
 
 // Define what mechanism the CSS parser uses for parsing the property.
 // See CSSParserImpl::ParseProperty(nsCSSProperty).
 #define CSS_PROPERTY_PARSE_PROPERTY_MASK          (3<<9)
 #define CSS_PROPERTY_PARSE_INACCESSIBLE           (0<<9)
 #define CSS_PROPERTY_PARSE_FUNCTION               (1<<9)
 #define CSS_PROPERTY_PARSE_VALUE                  (2<<9)
 
+// See CSSParserImpl::ParseSingleValueProperty
+#define CSS_PROPERTY_VALUE_PARSER_FUNCTION        (1<<11)
+
 /**
  * Types of animatable values.
  */
 enum nsStyleAnimType {
   // requires a custom implementation in
   // nsStyleAnimation::ExtractComputedValue
   eStyleAnimType_Custom,
 
