Mark one of the border-image tests as failing on Mac OS X 10.4.

diff --git a/layout/reftests/border-image/reftest.list b/layout/reftests/border-image/reftest.list
--- a/layout/reftests/border-image/reftest.list
+++ b/layout/reftests/border-image/reftest.list
@@ -1,7 +1,7 @@ fails-if(MOZ_WIDGET_TOOLKIT=="cocoa") ==
 fails-if(MOZ_WIDGET_TOOLKIT=="cocoa") == solid-image-1.html solid-image-1-ref.html # bug 445911
 == transparent-image-1.html transparent-image-1-ref.html
 fails-if(MOZ_WIDGET_TOOLKIT=="cocoa") == solid-image-2.html solid-image-2-ref.html # bug 445911
 == multicolor-image-1.html multicolor-image-1-ref.html
-== multicolor-image-2.html multicolor-image-2-ref.html
+fails-if(http.oscpu.match(/Mac\x20OS\x20X\x2010\.4$/)) == multicolor-image-2.html multicolor-image-2-ref.html # fails on OS X 10.4 (bug 448121)
 == multicolor-image-3.html multicolor-image-3-ref.html
 != repeat-image-1.html repeat-image-1-ref.html
diff --git a/layout/tools/reftest/reftest.js b/layout/tools/reftest/reftest.js
--- a/layout/tools/reftest/reftest.js
+++ b/layout/tools/reftest/reftest.js
@@ -45,16 +45,18 @@ const NS_LOCAL_FILE_CONTRACTID = "@mozil
 const NS_LOCAL_FILE_CONTRACTID = "@mozilla.org/file/local;1";
 const IO_SERVICE_CONTRACTID = "@mozilla.org/network/io-service;1";
 const NS_LOCALFILEINPUTSTREAM_CONTRACTID =
           "@mozilla.org/network/file-input-stream;1";
 const NS_SCRIPTSECURITYMANAGER_CONTRACTID =
           "@mozilla.org/scriptsecuritymanager;1";
 const NS_REFTESTHELPER_CONTRACTID =
           "@mozilla.org/reftest-helper;1";
+const NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX =
+          "@mozilla.org/network/protocol;1?name=";
 
 const LOAD_FAILURE_TIMEOUT = 10000; // ms
 
 var gBrowser;
 var gCanvas1, gCanvas2;
 var gURLs;
 var gTotalTests = 0;
 var gState;
@@ -138,19 +140,28 @@ function ReadManifest(aURL)
     var secMan = CC[NS_SCRIPTSECURITYMANAGER_CONTRACTID]
                      .getService(CI.nsIScriptSecurityManager);
 
     var fis = CC[NS_LOCALFILEINPUTSTREAM_CONTRACTID].
                   createInstance(CI.nsIFileInputStream);
     fis.init(listURL.file, -1, -1, false);
     var lis = fis.QueryInterface(CI.nsILineInputStream);
 
+    // Build the sandbox for fails-if(), etc., condition evaluation.
     var sandbox = new Components.utils.Sandbox(aURL.spec);
     for (var prop in gAutoconfVars)
         sandbox[prop] = gAutoconfVars[prop];
+    var hh = CC[NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX + "http"].
+                 getService(CI.nsIHttpProtocolHandler);
+    sandbox.http = {};
+    for each (var prop in [ "userAgent", "appName", "appVersion", 
+                            "vendor", "vendorSub", "vendorComment",
+                            "product", "productSub", "productComment",
+                            "platform", "oscpu", "language", "misc" ])
+        sandbox.http[prop] = hh[prop];
 
     var line = {value:null};
     var lineNo = 0;
     do {
         var more = lis.readLine(line);
         ++lineNo;
         var str = line.value;
         if (str.charAt(0) == "#")
