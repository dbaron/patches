From: L. David Baron <dbaron@dbaron.org>

Bug 1156451 patch 1 - Add comments for existing started_test() calls.

diff --git a/layout/style/test/test_transitions_events.html b/layout/style/test/test_transitions_events.html
--- a/layout/style/test/test_transitions_events.html
+++ b/layout/style/test/test_transitions_events.html
@@ -198,22 +198,22 @@ document.documentElement.addEventListene
     }
     is(event.elapsedTime, 0.5,
        "elapsedTime for transitionend on one");
     is(cs("one").getPropertyValue(event.propertyName), "rgb(0, 255, 0)",
        "computed style of " + event.propertyName + " for transitionend on one");
     finished_test();
   }, false);
 
-started_test();
-started_test();
-started_test();
-started_test();
-started_test();
-started_test();
+started_test(); // color on #one
+started_test(); // border-top-color on #one
+started_test(); // border-right-color on #one
+started_test(); // border-bottom-color on #one
+started_test(); // border-left-color on #one
+started_test(); // -moz-column-rule-color on #one
 $("one").style.color = "lime";
 
 
 $("two").addEventListener("transitionend",
   function(event) {
     event.stopPropagation();
 
     ok(!got_two_target, "transitionend on two on target");
@@ -226,17 +226,17 @@ started_test();
     is(event.cancelable, false,
        "transitionend events should not be cancelable");
     is(cs("two").marginLeft, "10px",
        "computed style for transitionend on two");
     got_two_target = true;
     finished_test();
   }, false);
 
-started_test();
+started_test(); // #two
 $("two").className = "bar";
 
 $("three").addEventListener("transitionend",
   function(event) {
     event.stopPropagation();
 
     switch (event.propertyName) {
       case "margin-top":
@@ -261,37 +261,37 @@ started_test();
     }
     is(event.elapsedTime, 0.5,
        "elapsedTime for transitionend on three");
     is(cs("three").getPropertyValue(event.propertyName), "10px",
        "computed style for transitionend on three");
     finished_test();
   }, true);
 
-started_test();
-started_test();
-started_test();
-started_test();
+started_test(); // margin-top on #three
+started_test(); // margin-right on #three
+started_test(); // margin-bottom on #three
+started_test(); // margin-left on #three
 $("three").className = "bar";
 
 // We reverse the transition on four, and we should only get an event
 // at the end of the second transition.
-started_test();
+started_test(); // #four (listener on root)
 $("four").style.color = "lime";
 
 // We cancel the transition on five by changing 'transition-property',
 // and should thus get no event.
 $("five").style.color = "lime";
 
 // We cancel the transition on six by changing 'transition-duration' and
 // then changing the value, so we should get no event.
 $("six").style.color = "lime";
 
-started_test();
-started_test();
+started_test(); // #seven::before (listener on root)
+started_test(); // #seven::after (listener on root)
 $("seven").setAttribute("foo", "bar");
 
 setTimeout(function() {
              if (cs("five") != "rgb(0, 255, 0)" &&
                  cs("six") != "rgb(0, 255, 0)") {
                // The transition hasn't finished already.
                did_stops = true;
              }
@@ -307,17 +307,17 @@ function poll_start_reversal() {
   } else {
     // The forward transition has not started yet.
     setTimeout(poll_start_reversal, 20);
   }
 }
 setTimeout(poll_start_reversal, 200);
 
 // And make our own event to dispatch to the body.
-started_test();
+started_test(); // synthesized event to body (listener on root)
 
 var e = new TransitionEvent("transitionend",
                             {
                               bubbles: true,
                               cancelable: true,
                               propertyName: "some-unknown-prop",
                               elapsedTime: 0.5,
                               pseudoElement: "pseudo"
