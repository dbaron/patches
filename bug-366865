Subtract allocated parts before repeating division used for allocation to avoid rounding error of total.  b=366865

diff -r 1a098d4c63a9 layout/tables/BasicTableLayoutStrategy.cpp
--- a/layout/tables/BasicTableLayoutStrategy.cpp	Tue Jan 23 15:03:29 2007 -0800
+++ b/layout/tables/BasicTableLayoutStrategy.cpp	Tue Jan 23 15:03:39 2007 -0800
@@ -336,8 +336,8 @@ BasicTableLayoutStrategy::ComputeColumnI
 
             // Before looping over the spanned columns to distribute
             // this cell's width over the columns it spans, we first
-            // compute that loop's invariants, which include totals over
-            // the spanned columns and ratios derived from those totals.
+            // compute totals over the spanned columns so we know how to
+            // allocate the space.
 
             // Accumulate information about the spanned columns, and
             // subtract the already-used space from |info|.
@@ -382,6 +382,7 @@ BasicTableLayoutStrategy::ComputeColumnI
 
             // Compute the ratios used to distribute this cell's width
             // appropriately among the spanned columns.
+            // XXX MOVE DOWN
             float pctRatio = 0.0f;
             if (nonPctCount && info.prefPercent > 0.0f) {
                 if (totalSNonPctPref > 0) {
@@ -747,6 +748,8 @@ BasicTableLayoutStrategy::ComputeColumnW
     };
 
     Loop2Type l2t;
+    // XXX Should this actually not be a constant to avoid rounding
+    // error?
     float c; // the constant (over columns) for each case's math
     if (width < guess_pref) {
         NS_ASSERTION(width >= guess_min, "bad width");
