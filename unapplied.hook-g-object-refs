From: L. David Baron <dbaron@dbaron.org>

Bug 456864 - Hook g_object_ref and g_object_unref into NS_LogAddRef and NS_LogRelease.

diff --git a/toolkit/xre/nsAppRunner.cpp b/toolkit/xre/nsAppRunner.cpp
--- a/toolkit/xre/nsAppRunner.cpp
+++ b/toolkit/xre/nsAppRunner.cpp
@@ -2894,16 +2894,111 @@ static void MOZ_gdk_display_close(GdkDis
       gdk_display_close(display);
   }
 #else // not NS_FREE_PERMANENT_DATA
   // Don't do anything to avoid running into driver bugs under XCloseDisplay().
   // See bug 973192.
   (void) display;
 #endif
 }
+
+#ifdef NS_BUILD_REFCNT_LOGGING
+
+#define _GNU_SOURCE 1
+#include <dlfcn.h>
+
+typedef gpointer (*ns_g_object_ref_type)  (gpointer);
+typedef void (*ns_g_object_unref_type)(gpointer);
+typedef GObject* (*ns_g_object_constructor_type)(GType, guint,
+                                                 GObjectConstructParam*);
+
+/*
+ * Note that these overrides only hook calls from outside of gobject,
+ * since gobjectalias.h plays tricks with visibility and macros so that
+ * we can't override the ones inside gobject.
+ *
+ * That's why we have to hook g_object_constructor rather than
+ * g_type_create_instance (which it calls).
+ */
+static ns_g_object_ref_type real_g_object_ref = 
+  (ns_g_object_ref_type) dlsym(RTLD_NEXT, "g_object_ref");
+gpointer
+g_object_ref (gpointer _object)
+{
+  gpointer result = real_g_object_ref(_object);
+
+  GObject *object = G_OBJECT(_object);
+  GTypeQuery q;
+  q.instance_size = 0;
+  g_type_query(G_TYPE_FROM_INSTANCE(object), &q);
+  NS_LogAddRef(object, object->ref_count, G_OBJECT_TYPE_NAME(object),
+               q.instance_size);
+
+  return result;
+}
+
+static ns_g_object_unref_type real_g_object_unref = 
+  (ns_g_object_unref_type) dlsym(RTLD_NEXT, "g_object_unref");
+void
+g_object_unref (gpointer _object)
+{
+  GObject *object = G_OBJECT(_object);
+  NS_LogRelease(object, object->ref_count - 1, G_OBJECT_TYPE_NAME(object));
+
+  real_g_object_unref(_object);
+}
+
+// Also need to hook:
+// g_object_ref_sink
+// g_object_add_toggle_ref
+// g_object_remove_toggle_ref
+// g_value_object_*
+
+static ns_g_object_constructor_type HookGObjectConstructor();
+
+static ns_g_object_constructor_type real_g_object_constructor = 
+  HookGObjectConstructor();
+
+static GObject*
+my_g_object_constructor(GType type,
+                        guint n_construct_properties,
+                        GObjectConstructParam *construct_params)
+{
+  // GObjects are initialized with a reference count of one.  We want to
+  // hook into their construction path as early as possible to log that
+  // reference count, so that we log it before any other reference
+  // counting happens.  However, we need to do this late enough so that
+  // G_OBJECT_TYPE_NAME() will return the correct result, which means
+  // after g_type_create_instance (called from the real
+  // g_object_constructor) finishes.
+  GObject *object = real_g_object_constructor(type, n_construct_properties,
+                                              construct_params);
+
+  GTypeQuery q;
+  q.instance_size = 0;
+  g_type_query(type, &q);
+  NS_LogAddRef(object, 1, g_type_name(type), q.instance_size);
+
+  return object;
+}
+
+static ns_g_object_constructor_type
+HookGObjectConstructor()
+{
+  g_type_init();
+  // Leak this reference.
+  GObjectClass *clazz = G_OBJECT_CLASS(g_type_class_ref(G_TYPE_OBJECT));
+  ns_g_object_constructor_type real_ctor = clazz->constructor;
+  clazz->constructor = my_g_object_constructor;
+  return real_ctor;
+}
+
+
+#endif // defined(NS_BUILD_REFCNT_LOGGING)
+
 #endif
 
 /**
  * NSPR will search for the "nspr_use_zone_allocator" symbol throughout
  * the process and use it to determine whether the application defines its own
  * memory allocator or not.
  *
  * Since most applications (e.g. Firefox and Thunderbird) don't use any special
