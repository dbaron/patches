From: L. David Baron <dbaron@dbaron.org>

Bug 1159042 patch 5 - Reflow dirty roots starting from the least deep in the tree.

MozReview-Commit-ID: JMQJOw8pnu8

diff --git a/layout/base/PresShell.cpp b/layout/base/PresShell.cpp
--- a/layout/base/PresShell.cpp
+++ b/layout/base/PresShell.cpp
@@ -9196,16 +9196,19 @@ PresShell::ProcessReflowCommands(bool aI
       AUTO_LAYOUT_PHASE_ENTRY_POINT(GetPresContext(), Reflow);
       nsViewManager::AutoDisableRefresh refreshBlocker(mViewManager);
 
       OverflowChangedTracker overflowTracker;
 
       do {
         // Send an incremental reflow notification to the target frame.
         int32_t idx = mDirtyRoots.Length() - 1;
+        // FIXME: We should start with the dirty root least deep in the
+        // tree.  (And we should store the dirty roots in a balanced
+        // binary tree to make that fast.
         nsIFrame *target = mDirtyRoots[idx];
         mDirtyRoots.RemoveElementAt(idx);
 
         if (!NS_SUBTREE_DIRTY(target)) {
           // It's not dirty anymore, which probably means the notification
           // was posted in the middle of a reflow (perhaps with a reflow
           // root in the middle).  Don't do anything.
           continue;
diff --git a/layout/base/nsIPresShell.h b/layout/base/nsIPresShell.h
--- a/layout/base/nsIPresShell.h
+++ b/layout/base/nsIPresShell.h
@@ -1758,18 +1758,23 @@ protected:
   nsPoint                   mVisualViewportOffset;
 
   // A list of stack weak frames. This is a pointer to the last item in the list.
   AutoWeakFrame*            mAutoWeakFrames;
 
   // A hash table of heap allocated weak frames.
   nsTHashtable<nsPtrHashKey<WeakFrame>> mWeakFrames;
 
+  struct DirtyRootInfo {
+    nsIFrame* mFrame;
+    int32_t mFrameDepth; // 0 means root frame, 1 means child of root, -1 means unknown
+  };
+
   // Reflow roots that need to be reflowed.
-  nsTArray<nsIFrame*> mDirtyRoots;
+  nsTArray<DirtyRootInfo> mDirtyRoots;
 
 #ifdef MOZ_GECKO_PROFILER
   // These two fields capture call stacks of any changes that require a restyle
   // or a reflow. Only the first change per restyle / reflow is recorded (the
   // one that caused a call to SetNeedStyleFlush() / SetNeedLayoutFlush()).
   UniqueProfilerBacktrace mStyleCause;
   UniqueProfilerBacktrace mReflowCause;
 #endif
