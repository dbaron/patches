From: L. David Baron <dbaron@dbaron.org>

Bug 1381080 patch 6 - Assert in some cases that strings marked as having a null-terminated buffer are actually null-terminated.

While it would be nice to assert this in AssertValid() (added in the
previous patch), this is difficult because of what MutatePrep does:
https://searchfox.org/mozilla-central/rev/cbd628b085ac809bf5a536109e6288aa91cbdff0/xpcom/string/nsTSubstring.cpp#152,165,177-178

MozReview-Commit-ID: 12sQLHtJ4xc

diff --git a/xpcom/string/nsTLiteralString.h b/xpcom/string/nsTLiteralString.h
--- a/xpcom/string/nsTLiteralString.h
+++ b/xpcom/string/nsTLiteralString.h
@@ -39,16 +39,18 @@ public:
    */
 
   template<size_type N>
   explicit constexpr nsTLiteralString(const char_type (&aStr)[N])
     : base_string_type(const_cast<char_type*>(aStr), N - 1,
                        DataFlags::TERMINATED | DataFlags::LITERAL,
                        ClassFlags::NULL_TERMINATED)
   {
+    // Would be nice, but can't assert in a constexpr constructor:
+    //MOZ_ASSERT(aStr[N - 1] == 0, "String literal must be null-terminated.");
   }
 
   /**
    * For compatibility with existing code that requires const ns[C]String*.
    * Use sparingly. If possible, rewrite code to use const ns[C]String&
    * and the implicit cast will just work.
    */
   const nsTString<T>& AsString() const
@@ -69,16 +71,18 @@ public:
 
   /**
    * Prohibit get() on temporaries as in nsLiteralCString("x").get().
    * These should be written as just "x", using a string literal directly.
    */
   const typename raw_type<T>::type get() const && = delete;
   const typename raw_type<T>::type get() const &
   {
+    MOZ_ASSERT(!(mDataFlags & DataFlags::TERMINATED) || mData[mLength] == 0,
+               "String marked as null-terminated must be null-terminated.");
     return this->mData;
   }
 
 private:
 
   // NOT TO BE IMPLEMENTED
   template<size_type N>
   nsTLiteralString(char_type (&aStr)[N]) = delete;
diff --git a/xpcom/string/nsTString.h b/xpcom/string/nsTString.h
--- a/xpcom/string/nsTString.h
+++ b/xpcom/string/nsTString.h
@@ -153,16 +153,18 @@ public:
 
   template <typename U> struct raw_type { typedef const U* type; };
 #if defined(MOZ_USE_CHAR16_WRAPPER)
   template <> struct raw_type<char16_t> { typedef char16ptr_t type; };
 #endif
 
   MOZ_NO_DANGLING_ON_TEMPORARIES typename raw_type<T>::type get() const
   {
+    MOZ_ASSERT(!(mDataFlags & DataFlags::TERMINATED) || mData[mLength] == 0,
+               "String marked as null-terminated must be null-terminated.");
     return this->mData;
   }
 
 
   /**
    * returns character at specified index.
    *
    * NOTE: unlike nsTSubstring::CharAt, this function allows you to index
