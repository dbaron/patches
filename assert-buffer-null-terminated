From: L. David Baron <dbaron@dbaron.org>

Bug 1381080 patch 6 - Assert in some cases that strings marked as having a null-terminated buffer are actually null-terminated.

While it would be nice to assert this in AssertValid() (added in the
previous patch), this is difficult because of what MutatePrep does:
https://searchfox.org/mozilla-central/rev/cbd628b085ac809bf5a536109e6288aa91cbdff0/xpcom/string/nsTSubstring.cpp#152,165,177-178

MozReview-Commit-ID: 12sQLHtJ4xc

diff --git a/xpcom/string/nsTLiteralString.h b/xpcom/string/nsTLiteralString.h
--- a/xpcom/string/nsTLiteralString.h
+++ b/xpcom/string/nsTLiteralString.h
@@ -28,16 +28,18 @@ public:
    */
 
   template<size_type N>
   explicit constexpr nsTLiteralString_CharT(const char_type (&aStr)[N])
     : base_string_type(const_cast<char_type*>(aStr), N - 1,
                        DataFlags::TERMINATED | DataFlags::LITERAL,
                        ClassFlags::NULL_TERMINATED)
   {
+    // Would be nice, but can't assert in a constexpr constructor:
+    //MOZ_ASSERT(aStr[N - 1] == 0, "String literal must be null-terminated.");
   }
 
   /**
    * For compatibility with existing code that requires const ns[C]String*.
    * Use sparingly. If possible, rewrite code to use const ns[C]String&
    * and the implicit cast will just work.
    */
   const nsTString_CharT& AsString() const
@@ -57,16 +59,18 @@ public:
 #if defined(CharT_is_PRUnichar) && defined(MOZ_USE_CHAR16_WRAPPER)
   char16ptr_t get() const && = delete;
   char16ptr_t get() const &
 #else
   const char_type* get() const && = delete;
   const char_type* get() const &
 #endif
   {
+    MOZ_ASSERT(!(mDataFlags & DataFlags::TERMINATED) || mData[mLength] == 0,
+               "String marked as null-terminated must be null-terminated.");
     return mData;
   }
 
 private:
 
   // NOT TO BE IMPLEMENTED
   template<size_type N>
   nsTLiteralString_CharT(char_type (&aStr)[N]) = delete;
diff --git a/xpcom/string/nsTString.h b/xpcom/string/nsTString.h
--- a/xpcom/string/nsTString.h
+++ b/xpcom/string/nsTString.h
@@ -109,16 +109,18 @@ public:
    */
 
 #if defined(CharT_is_PRUnichar) && defined(MOZ_USE_CHAR16_WRAPPER)
   MOZ_NO_DANGLING_ON_TEMPORARIES char16ptr_t get() const
 #else
   MOZ_NO_DANGLING_ON_TEMPORARIES const char_type* get() const
 #endif
   {
+    MOZ_ASSERT(!(mDataFlags & DataFlags::TERMINATED) || mData[mLength] == 0,
+               "String marked as null-terminated must be null-terminated.");
     return mData;
   }
 
 
   /**
    * returns character at specified index.
    *
    * NOTE: unlike nsTSubstring::CharAt, this function allows you to index
@@ -735,16 +737,18 @@ public:
 
   // return nullptr if we are voided
 #if defined(CharT_is_PRUnichar) && defined(MOZ_USE_CHAR16_WRAPPER)
   MOZ_NO_DANGLING_ON_TEMPORARIES char16ptr_t get() const
 #else
   MOZ_NO_DANGLING_ON_TEMPORARIES const char_type* get() const
 #endif
   {
+    MOZ_ASSERT(!(mDataFlags & DataFlags::TERMINATED) || mData[mLength] == 0,
+               "String marked as null-terminated must be null-terminated.");
     return (mDataFlags & DataFlags::VOIDED) ? nullptr : mData;
   }
 
   // this case operator is the reason why this class cannot just be a
   // typedef for nsTString
   operator const char_type*() const
   {
     return get();
