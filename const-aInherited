Make the aInherited parameters to Compute*Data const.  (Bug 476598)  r+sr=bzbarsky

diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -2815,17 +2815,18 @@ static PRBool ExtractGeneric(const nsStr
   return PR_TRUE;
 }
 
 const void* 
 nsRuleNode::ComputeFontData(void* aStartStruct,
                             const nsRuleDataStruct& aData, 
                             nsStyleContext* aContext, 
                             nsRuleNode* aHighestNode,
-                            const RuleDetail aRuleDetail, PRBool aInherited)
+                            const RuleDetail aRuleDetail,
+                            const PRBool aInherited)
 {
   COMPUTE_START_INHERITED(Font, (mPresContext), font, parentFont,
                           Font, fontData)
 
   // NOTE:  The |aRuleDetail| passed in is a little bit conservative due
   // to the -moz-system-font property.  We really don't need to consider
   // it here in determining whether to cache in the rule tree.  However,
   // we do need to consider it in WalkRuleTree when deciding whether to
@@ -2974,17 +2975,18 @@ nsRuleNode::GetShadowData(nsCSSValueList
   return shadowList;
 }
 
 const void*
 nsRuleNode::ComputeTextData(void* aStartStruct,
                             const nsRuleDataStruct& aData, 
                             nsStyleContext* aContext, 
                             nsRuleNode* aHighestNode,
-                            const RuleDetail aRuleDetail, PRBool aInherited)
+                            const RuleDetail aRuleDetail,
+                            const PRBool aInherited)
 {
   COMPUTE_START_INHERITED(Text, (), text, parentText, Text, textData)
 
     // letter-spacing: normal, length, inherit
   SetCoord(textData.mLetterSpacing, text->mLetterSpacing, parentText->mLetterSpacing,
            SETCOORD_LH | SETCOORD_NORMAL | SETCOORD_INITIAL_NORMAL,
            aContext, mPresContext, inherited);
 
@@ -3097,17 +3099,18 @@ nsRuleNode::ComputeTextData(void* aStart
   COMPUTE_END_INHERITED(Text, text)
 }
 
 const void*
 nsRuleNode::ComputeTextResetData(void* aStartStruct,
                                  const nsRuleDataStruct& aData, 
                                  nsStyleContext* aContext, 
                                  nsRuleNode* aHighestNode,
-                                 const RuleDetail aRuleDetail, PRBool aInherited)
+                                 const RuleDetail aRuleDetail,
+                                 const PRBool aInherited)
 {
   COMPUTE_START_RESET(TextReset, (), text, parentText, Text, textData)
   
   // vertical-align: enum, length, percent, inherit
   if (!SetCoord(textData.mVerticalAlign, text->mVerticalAlign,
                 parentText->mVerticalAlign, SETCOORD_LPH | SETCOORD_ENUMERATED,
                 aContext, mPresContext, inherited)) {
     if (eCSSUnit_Initial == textData.mVerticalAlign.GetUnit()) {
@@ -3149,17 +3152,17 @@ nsRuleNode::ComputeTextResetData(void* a
 }
 
 const void*
 nsRuleNode::ComputeUserInterfaceData(void* aStartStruct,
                                      const nsRuleDataStruct& aData, 
                                      nsStyleContext* aContext, 
                                      nsRuleNode* aHighestNode,
                                      const RuleDetail aRuleDetail,
-                                     PRBool aInherited)
+                                     const PRBool aInherited)
 {
   COMPUTE_START_INHERITED(UserInterface, (), ui, parentUI,
                           UserInterface, uiData)
 
   // cursor: enum, auto, url, inherit
   nsCSSValueList*  list = uiData.mCursor;
   if (nsnull != list) {
     delete [] ui->mCursorArray;
@@ -3249,17 +3252,18 @@ nsRuleNode::ComputeUserInterfaceData(voi
   COMPUTE_END_INHERITED(UserInterface, ui)
 }
 
 const void*
 nsRuleNode::ComputeUIResetData(void* aStartStruct,
                                const nsRuleDataStruct& aData, 
                                nsStyleContext* aContext, 
                                nsRuleNode* aHighestNode,
-                               const RuleDetail aRuleDetail, PRBool aInherited)
+                               const RuleDetail aRuleDetail,
+                               const PRBool aInherited)
 {
   COMPUTE_START_RESET(UIReset, (), ui, parentUI, UserInterface, uiData)
   
   // user-select: auto, none, enum, inherit, initial
   SetDiscrete(uiData.mUserSelect, ui->mUserSelect, inherited,
               SETDSC_ENUMERATED | SETDSC_NONE | SETDSC_AUTO,
               parentUI->mUserSelect,
               NS_STYLE_USER_SELECT_AUTO,
@@ -3325,17 +3329,18 @@ static nsStyleTransformMatrix ReadTransf
   return result;
 }
 
 const void*
 nsRuleNode::ComputeDisplayData(void* aStartStruct,
                                const nsRuleDataStruct& aData, 
                                nsStyleContext* aContext, 
                                nsRuleNode* aHighestNode,
-                               const RuleDetail aRuleDetail, PRBool aInherited)
+                               const RuleDetail aRuleDetail,
+                               const PRBool aInherited)
 {
   COMPUTE_START_RESET(Display, (), display, parentDisplay,
                       Display, displayData)
 
   // opacity: factor, inherit, initial
   SetFactor(displayData.mOpacity, display->mOpacity, inherited,
             parentDisplay->mOpacity, 1.0f, SETFCT_OPACITY);
 
@@ -3643,17 +3648,18 @@ nsRuleNode::ComputeDisplayData(void* aSt
   COMPUTE_END_RESET(Display, display)
 }
 
 const void*
 nsRuleNode::ComputeVisibilityData(void* aStartStruct,
                                   const nsRuleDataStruct& aData, 
                                   nsStyleContext* aContext, 
                                   nsRuleNode* aHighestNode,
-                                  const RuleDetail aRuleDetail, PRBool aInherited)
+                                  const RuleDetail aRuleDetail,
+                                  const PRBool aInherited)
 {
   COMPUTE_START_INHERITED(Visibility, (mPresContext),
                           visibility, parentVisibility,
                           Display, displayData)
 
   // direction: enum, inherit, initial
   SetDiscrete(displayData.mDirection, visibility->mDirection, inherited,
               SETDSC_ENUMERATED, parentVisibility->mDirection,
@@ -3684,17 +3690,18 @@ nsRuleNode::ComputeVisibilityData(void* 
   COMPUTE_END_INHERITED(Visibility, visibility)
 }
 
 const void*
 nsRuleNode::ComputeColorData(void* aStartStruct,
                              const nsRuleDataStruct& aData, 
                              nsStyleContext* aContext, 
                              nsRuleNode* aHighestNode,
-                             const RuleDetail aRuleDetail, PRBool aInherited)
+                             const RuleDetail aRuleDetail,
+                             const PRBool aInherited)
 {
   COMPUTE_START_INHERITED(Color, (mPresContext), color, parentColor,
                           Color, colorData)
 
   // color: color, string, inherit
   // Special case for currentColor.  According to CSS3, setting color to 'currentColor'
   // should behave as if it is inherited
   if (colorData.mColor.GetUnit() == eCSSUnit_EnumColor && 
@@ -3714,17 +3721,17 @@ nsRuleNode::ComputeColorData(void* aStar
 }
 
 const void*
 nsRuleNode::ComputeBackgroundData(void* aStartStruct,
                                   const nsRuleDataStruct& aData, 
                                   nsStyleContext* aContext, 
                                   nsRuleNode* aHighestNode,
                                   const RuleDetail aRuleDetail,
-                                  PRBool aInherited)
+                                  const PRBool aInherited)
 {
   COMPUTE_START_RESET(Background, (), bg, parentBG, Color, colorData)
 
   // save parentFlags in case bg == parentBG and we clobber them later
   PRUint8 parentFlags = parentBG->mBackgroundFlags;
 
   // background-color: color, string, inherit
   if (eCSSUnit_Initial == colorData.mBackColor.GetUnit()) {
@@ -3841,17 +3848,18 @@ nsRuleNode::ComputeBackgroundData(void* 
   COMPUTE_END_RESET(Background, bg)
 }
 
 const void*
 nsRuleNode::ComputeMarginData(void* aStartStruct,
                               const nsRuleDataStruct& aData, 
                               nsStyleContext* aContext, 
                               nsRuleNode* aHighestNode,
-                              const RuleDetail aRuleDetail, PRBool aInherited)
+                              const RuleDetail aRuleDetail,
+                              const PRBool aInherited)
 {
   COMPUTE_START_RESET(Margin, (), margin, parentMargin, Margin, marginData)
 
   // margin: length, percent, auto, inherit
   nsStyleCoord  coord;
   nsCSSRect ourMargin(marginData.mMargin);
   AdjustLogicalBoxProp(aContext,
                        marginData.mMarginLeftLTRSource,
@@ -3876,17 +3884,18 @@ nsRuleNode::ComputeMarginData(void* aSta
   COMPUTE_END_RESET(Margin, margin)
 }
 
 const void* 
 nsRuleNode::ComputeBorderData(void* aStartStruct,
                               const nsRuleDataStruct& aData, 
                               nsStyleContext* aContext, 
                               nsRuleNode* aHighestNode,
-                              const RuleDetail aRuleDetail, PRBool aInherited)
+                              const RuleDetail aRuleDetail,
+                              const PRBool aInherited)
 {
   COMPUTE_START_RESET(Border, (mPresContext), border, parentBorder,
                       Margin, marginData)
 
   // -moz-box-shadow: none, list, inherit, initial
   {
     nsCSSValueList* list = marginData.mBoxShadow;
     if (list) {
@@ -4175,17 +4184,18 @@ nsRuleNode::ComputeBorderData(void* aSta
   COMPUTE_END_RESET(Border, border)
 }
   
 const void*
 nsRuleNode::ComputePaddingData(void* aStartStruct,
                                const nsRuleDataStruct& aData, 
                                nsStyleContext* aContext, 
                                nsRuleNode* aHighestNode,
-                               const RuleDetail aRuleDetail, PRBool aInherited)
+                               const RuleDetail aRuleDetail,
+                               const PRBool aInherited)
 {
   COMPUTE_START_RESET(Padding, (), padding, parentPadding, Margin, marginData)
 
   // padding: length, percent, inherit
   nsStyleCoord  coord;
   nsCSSRect ourPadding(marginData.mPadding);
   AdjustLogicalBoxProp(aContext,
                        marginData.mPaddingLeftLTRSource,
@@ -4210,17 +4220,18 @@ nsRuleNode::ComputePaddingData(void* aSt
   COMPUTE_END_RESET(Padding, padding)
 }
 
 const void*
 nsRuleNode::ComputeOutlineData(void* aStartStruct,
                                const nsRuleDataStruct& aData, 
                                nsStyleContext* aContext, 
                                nsRuleNode* aHighestNode,
-                               const RuleDetail aRuleDetail, PRBool aInherited)
+                               const RuleDetail aRuleDetail,
+                               const PRBool aInherited)
 {
   COMPUTE_START_RESET(Outline, (mPresContext), outline, parentOutline,
                       Margin, marginData)
 
   // outline-width: length, enum, inherit
   if (eCSSUnit_Initial == marginData.mOutlineWidth.GetUnit()) {
     outline->mOutlineWidth =
       nsStyleCoord(NS_STYLE_BORDER_WIDTH_MEDIUM, eStyleUnit_Enumerated);
@@ -4305,17 +4316,18 @@ nsRuleNode::ComputeOutlineData(void* aSt
   COMPUTE_END_RESET(Outline, outline)
 }
 
 const void* 
 nsRuleNode::ComputeListData(void* aStartStruct,
                             const nsRuleDataStruct& aData, 
                             nsStyleContext* aContext, 
                             nsRuleNode* aHighestNode,
-                            const RuleDetail aRuleDetail, PRBool aInherited)
+                            const RuleDetail aRuleDetail,
+                            const PRBool aInherited)
 {
   COMPUTE_START_INHERITED(List, (), list, parentList, List, listData)
 
   // list-style-type: enum, none, inherit, initial
   SetDiscrete(listData.mType, list->mListStyleType, inherited,
               SETDSC_ENUMERATED | SETDSC_NONE, parentList->mListStyleType,
               NS_STYLE_LIST_STYLE_DISC, 0,
               NS_STYLE_LIST_STYLE_NONE, 0, 0);
@@ -4375,17 +4387,18 @@ nsRuleNode::ComputeListData(void* aStart
   COMPUTE_END_INHERITED(List, list)
 }
 
 const void* 
 nsRuleNode::ComputePositionData(void* aStartStruct,
                                 const nsRuleDataStruct& aData, 
                                 nsStyleContext* aContext, 
                                 nsRuleNode* aHighestNode,
-                                const RuleDetail aRuleDetail, PRBool aInherited)
+                                const RuleDetail aRuleDetail,
+                                const PRBool aInherited)
 {
   COMPUTE_START_RESET(Position, (), pos, parentPos, Position, posData)
 
   // box offsets: length, percent, auto, inherit
   nsStyleCoord  coord;
   NS_FOR_CSS_SIDES(side) {
     nsStyleCoord parentCoord = parentPos->mOffset.Get(side);
     if (SetCoord(posData.mOffset.*(nsCSSRect::sides[side]),
@@ -4434,17 +4447,18 @@ nsRuleNode::ComputePositionData(void* aS
   COMPUTE_END_RESET(Position, pos)
 }
 
 const void* 
 nsRuleNode::ComputeTableData(void* aStartStruct,
                              const nsRuleDataStruct& aData, 
                              nsStyleContext* aContext, 
                              nsRuleNode* aHighestNode,
-                             const RuleDetail aRuleDetail, PRBool aInherited)
+                             const RuleDetail aRuleDetail,
+                             const PRBool aInherited)
 {
   COMPUTE_START_RESET(Table, (), table, parentTable, Table, tableData)
 
   // table-layout: auto, enum, inherit, initial
   SetDiscrete(tableData.mLayout, table->mLayoutStrategy, inherited,
               SETDSC_ENUMERATED | SETDSC_AUTO,
               parentTable->mLayoutStrategy,
               NS_STYLE_TABLE_LAYOUT_AUTO,
@@ -4471,17 +4485,18 @@ nsRuleNode::ComputeTableData(void* aStar
   COMPUTE_END_RESET(Table, table)
 }
 
 const void* 
 nsRuleNode::ComputeTableBorderData(void* aStartStruct,
                                    const nsRuleDataStruct& aData, 
                                    nsStyleContext* aContext, 
                                    nsRuleNode* aHighestNode,
-                                   const RuleDetail aRuleDetail, PRBool aInherited)
+                                   const RuleDetail aRuleDetail,
+                                   const PRBool aInherited)
 {
   COMPUTE_START_INHERITED(TableBorder, (mPresContext), table, parentTable,
                           Table, tableData)
 
   // border-collapse: enum, inherit, initial
   SetDiscrete(tableData.mBorderCollapse, table->mBorderCollapse, inherited,
               SETDSC_ENUMERATED, parentTable->mBorderCollapse,
               NS_STYLE_BORDER_SEPARATE, 0, 0, 0, 0);
@@ -4525,17 +4540,18 @@ nsRuleNode::ComputeTableBorderData(void*
   COMPUTE_END_INHERITED(TableBorder, table)
 }
 
 const void* 
 nsRuleNode::ComputeContentData(void* aStartStruct,
                                const nsRuleDataStruct& aData, 
                                nsStyleContext* aContext, 
                                nsRuleNode* aHighestNode,
-                               const RuleDetail aRuleDetail, PRBool aInherited)
+                               const RuleDetail aRuleDetail,
+                               const PRBool aInherited)
 {
   COMPUTE_START_RESET(Content, (), content, parentContent,
                       Content, contentData)
 
   // content: [string, url, counter, attr, enum]+, normal, none, inherit
   PRUint32 count;
   nsAutoString  buffer;
   nsCSSValueList* contentValue = contentData.mContent;
@@ -4712,17 +4728,18 @@ nsRuleNode::ComputeContentData(void* aSt
   COMPUTE_END_RESET(Content, content)
 }
 
 const void* 
 nsRuleNode::ComputeQuotesData(void* aStartStruct,
                               const nsRuleDataStruct& aData, 
                               nsStyleContext* aContext, 
                               nsRuleNode* aHighestNode,
-                              const RuleDetail aRuleDetail, PRBool aInherited)
+                              const RuleDetail aRuleDetail,
+                              const PRBool aInherited)
 {
   COMPUTE_START_INHERITED(Quotes, (), quotes, parentQuotes,
                           Content, contentData)
 
   // quotes: inherit, initial, none, [string string]+
   nsCSSValuePairList* ourQuotes = contentData.mQuotes;
   if (ourQuotes) {
     if (eCSSUnit_Inherit == ourQuotes->mXValue.GetUnit()) {
@@ -4762,17 +4779,18 @@ nsRuleNode::ComputeQuotesData(void* aSta
   COMPUTE_END_INHERITED(Quotes, quotes)
 }
 
 const void* 
 nsRuleNode::ComputeXULData(void* aStartStruct,
                            const nsRuleDataStruct& aData, 
                            nsStyleContext* aContext, 
                            nsRuleNode* aHighestNode,
-                           const RuleDetail aRuleDetail, PRBool aInherited)
+                           const RuleDetail aRuleDetail,
+                           const PRBool aInherited)
 {
   COMPUTE_START_RESET(XUL, (), xul, parentXUL, XUL, xulData)
 
   // box-align: enum, inherit, initial
   SetDiscrete(xulData.mBoxAlign, xul->mBoxAlign, inherited,
               SETDSC_ENUMERATED, parentXUL->mBoxAlign,
               NS_STYLE_BOX_ALIGN_STRETCH, 0, 0, 0, 0);
 
@@ -4813,17 +4831,18 @@ nsRuleNode::ComputeXULData(void* aStartS
   COMPUTE_END_RESET(XUL, xul)
 }
 
 const void* 
 nsRuleNode::ComputeColumnData(void* aStartStruct,
                               const nsRuleDataStruct& aData, 
                               nsStyleContext* aContext, 
                               nsRuleNode* aHighestNode,
-                              const RuleDetail aRuleDetail, PRBool aInherited)
+                              const RuleDetail aRuleDetail,
+                              const PRBool aInherited)
 {
   COMPUTE_START_RESET(Column, (mPresContext), column, parent, Column, columnData)
 
   // column-width: length, auto, inherit
   SetCoord(columnData.mColumnWidth,
            column->mColumnWidth, parent->mColumnWidth,
            SETCOORD_LAH | SETCOORD_INITIAL_AUTO,
            aContext, mPresContext, inherited);
@@ -4939,17 +4958,18 @@ SetSVGPaint(const nsCSSValuePair& aValue
   }
 }
 
 const void* 
 nsRuleNode::ComputeSVGData(void* aStartStruct,
                            const nsRuleDataStruct& aData, 
                            nsStyleContext* aContext, 
                            nsRuleNode* aHighestNode,
-                           const RuleDetail aRuleDetail, PRBool aInherited)
+                           const RuleDetail aRuleDetail,
+                           const PRBool aInherited)
 {
   COMPUTE_START_INHERITED(SVG, (), svg, parentSVG, SVG, SVGData)
 
   // clip-rule: enum, inherit, initial
   SetDiscrete(SVGData.mClipRule, svg->mClipRule, inherited,
               SETDSC_ENUMERATED, parentSVG->mClipRule,
               NS_STYLE_FILL_RULE_NONZERO, 0, 0, 0, 0);
 
@@ -5133,17 +5153,18 @@ nsRuleNode::ComputeSVGData(void* aStartS
   COMPUTE_END_INHERITED(SVG, svg)
 }
 
 const void* 
 nsRuleNode::ComputeSVGResetData(void* aStartStruct,
                                 const nsRuleDataStruct& aData,
                                 nsStyleContext* aContext, 
                                 nsRuleNode* aHighestNode,
-                                const RuleDetail aRuleDetail, PRBool aInherited)
+                                const RuleDetail aRuleDetail,
+                                const PRBool aInherited)
 {
   COMPUTE_START_RESET(SVGReset, (), svgReset, parentSVGReset, SVG, SVGData)
 
   // stop-color:
   if (eCSSUnit_Initial == SVGData.mStopColor.GetUnit()) {
     svgReset->mStopColor = NS_RGB(0, 0, 0);
   } else {
     SetColor(SVGData.mStopColor, parentSVGReset->mStopColor,
diff --git a/layout/style/nsRuleNode.h b/layout/style/nsRuleNode.h
--- a/layout/style/nsRuleNode.h
+++ b/layout/style/nsRuleNode.h
@@ -470,151 +470,151 @@ protected:
   NS_HIDDEN_(const void*)
     WalkRuleTree(const nsStyleStructID aSID, nsStyleContext* aContext, 
                  nsRuleData* aRuleData, nsRuleDataStruct* aSpecificData);
 
   NS_HIDDEN_(const void*)
     ComputeDisplayData(void* aStartStruct,
                        const nsRuleDataStruct& aData,
                        nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                       RuleDetail aRuleDetail, PRBool aInherited);
+                       RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeVisibilityData(void* aStartStruct,
                           const nsRuleDataStruct& aData,
                           nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                          RuleDetail aRuleDetail, PRBool aInherited);
+                          RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeFontData(void* aStartStruct,
                     const nsRuleDataStruct& aData,
                     nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                    RuleDetail aRuleDetail, PRBool aInherited);
+                    RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeColorData(void* aStartStruct,
                      const nsRuleDataStruct& aData,
                      nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                     RuleDetail aRuleDetail, PRBool aInherited);
+                     RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeBackgroundData(void* aStartStruct,
                           const nsRuleDataStruct& aData, 
                           nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                          RuleDetail aRuleDetail, PRBool aInherited);
+                          RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeMarginData(void* aStartStruct,
                       const nsRuleDataStruct& aData, 
                       nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                      RuleDetail aRuleDetail, PRBool aInherited);
+                      RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeBorderData(void* aStartStruct,
                       const nsRuleDataStruct& aData, 
                       nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                      RuleDetail aRuleDetail, PRBool aInherited);
+                      RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputePaddingData(void* aStartStruct,
                        const nsRuleDataStruct& aData, 
                        nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                       RuleDetail aRuleDetail, PRBool aInherited);
+                       RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeOutlineData(void* aStartStruct,
                        const nsRuleDataStruct& aData, 
                        nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                       RuleDetail aRuleDetail, PRBool aInherited);
+                       RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeListData(void* aStartStruct,
                     const nsRuleDataStruct& aData,
                     nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                    RuleDetail aRuleDetail, PRBool aInherited);
+                    RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputePositionData(void* aStartStruct,
                         const nsRuleDataStruct& aData, 
                         nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                        RuleDetail aRuleDetail, PRBool aInherited);
+                        RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeTableData(void* aStartStruct,
                      const nsRuleDataStruct& aData, 
                      nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                     RuleDetail aRuleDetail, PRBool aInherited);
+                     RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeTableBorderData(void* aStartStruct,
                            const nsRuleDataStruct& aData, 
                            nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                           RuleDetail aRuleDetail, PRBool aInherited);
+                           RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeContentData(void* aStartStruct,
                        const nsRuleDataStruct& aData,
                        nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                       RuleDetail aRuleDetail, PRBool aInherited);
+                       RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeQuotesData(void* aStartStruct,
                       const nsRuleDataStruct& aData, 
                       nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                      RuleDetail aRuleDetail, PRBool aInherited);
+                      RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeTextData(void* aStartStruct,
                     const nsRuleDataStruct& aData, 
                     nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                    RuleDetail aRuleDetail, PRBool aInherited);
+                    RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeTextResetData(void* aStartStruct,
                          const nsRuleDataStruct& aData,
                          nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                         RuleDetail aRuleDetail, PRBool aInherited);
+                         RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeUserInterfaceData(void* aStartStruct,
                              const nsRuleDataStruct& aData, 
                              nsStyleContext* aContext,
                              nsRuleNode* aHighestNode,
-                             RuleDetail aRuleDetail, PRBool aInherited);
+                             RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeUIResetData(void* aStartStruct,
                        const nsRuleDataStruct& aData,
                        nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                       RuleDetail aRuleDetail, PRBool aInherited);
+                       RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeXULData(void* aStartStruct,
                    const nsRuleDataStruct& aData, 
                    nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                   RuleDetail aRuleDetail, PRBool aInherited);
+                   RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeColumnData(void* aStartStruct,
                       const nsRuleDataStruct& aData,
                       nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                      RuleDetail aRuleDetail, PRBool aInherited);
+                      RuleDetail aRuleDetail, const PRBool aInherited);
 
 #ifdef MOZ_SVG
   NS_HIDDEN_(const void*)
     ComputeSVGData(void* aStartStruct,
                    const nsRuleDataStruct& aData, 
                    nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                   RuleDetail aRuleDetail, PRBool aInherited);
+                   RuleDetail aRuleDetail, const PRBool aInherited);
 
   NS_HIDDEN_(const void*)
     ComputeSVGResetData(void* aStartStruct,
                         const nsRuleDataStruct& aData, 
                         nsStyleContext* aContext, nsRuleNode* aHighestNode,
-                        RuleDetail aRuleDetail, PRBool aInherited);
+                        RuleDetail aRuleDetail, const PRBool aInherited);
 #endif
 
   // helpers for |ComputeFontData| that need access to |mNoneBits|:
   static NS_HIDDEN_(void) SetFontSize(nsPresContext* aPresContext,
                                       const nsRuleDataFont& aFontData,
                                       const nsStyleFont* aFont,
                                       const nsStyleFont* aParentFont,
                                       nscoord* aSize,
