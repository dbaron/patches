From: L. David Baron <dbaron@dbaron.org>

Drop use of JS 1.7 features so that this test can run on other browsers.

diff --git a/layout/style/test/test_media_queries.html b/layout/style/test/test_media_queries.html
--- a/layout/style/test/test_media_queries.html
+++ b/layout/style/test/test_media_queries.html
@@ -11,17 +11,17 @@ https://bugzilla.mozilla.org/show_bug.cg
 </head>
 <body onload="run()">
 <a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=156716">Mozilla Bug 156716</a>
 <iframe id="subdoc" src="media_queries_iframe.html"></iframe>
 <div id="content" style="display: none">
   
 </div>
 <pre id="test">
-<script class="testbody" type="application/javascript; version=1.7">
+<script class="testbody" type="application/javascript">
 
 /** Test for Bug 156716 **/
 
 // Note that many other tests are in test_acid3_test46.html .
 
 SimpleTest.waitForExplicitFinish();
 
 function run() {
@@ -96,18 +96,21 @@ function run() {
   // The no-type syntax doesn't mix with the not and only keywords.
   query_should_be_parseable("(orientation)");
   query_should_not_be_parseable("not (orientation)");
   query_should_not_be_parseable("only (orientation)");
   query_should_be_parseable("all and (orientation)");
   query_should_be_parseable("not all and (orientation)");
   query_should_be_parseable("only all and (orientation)");
 
-  for each (let feature in [ "width", "height", "device-width",
-                             "device-height" ]) {
+  var features = [ "width", "height", "device-width", "device-height" ];
+  var feature;
+  var i;
+  for (i in features) {
+    feature = features[i];
     expression_should_be_parseable(feature);
     expression_should_be_parseable(feature + ": 0");
     expression_should_be_parseable(feature + ": 0px");
     expression_should_be_parseable(feature + ": 0em");
     expression_should_be_parseable(feature + ": -0");
     expression_should_be_parseable("min-" + feature + ": -0");
     expression_should_be_parseable("max-" + feature + ": -0");
     expression_should_be_parseable(feature + ": -0cm");
@@ -124,27 +127,28 @@ function run() {
   }
 
   var content_div = document.getElementById("content");
   content_div.style.font = "-moz-initial";
   var em_size =
     getComputedStyle(content_div, "").fontSize.match(/^(\d+)px$/)[1];
 
   // in this test, assume the common underlying implementation is correct
-  let width_val = 117; // pick two not-too-round numbers
-  let height_val = 76;
+  var width_val = 117; // pick two not-too-round numbers
+  var height_val = 76;
   iframe_style.width = width_val + "px";
   iframe_style.height = height_val + "px";
-  let device_width = window.screen.width;
-  let device_height = window.screen.height;
-  for (let [feature, value] in
-         Iterator({ "width": width_val,
+  var device_width = window.screen.width;
+  var device_height = window.screen.height;
+  features = { "width": width_val,
                     "height": height_val,
                     "device-width": device_width,
-                    "device-height": device_height })) {
+                    "device-height": device_height };
+  for (feature in features) {
+    var value = features[feature];
     should_apply("all and (" + feature + ": " + value + "px)");
     should_not_apply("all and (" + feature + ": " + (value + 1) + "px)");
     should_not_apply("all and (" + feature + ": " + (value - 1) + "px)");
     should_apply("all and (min-" + feature + ": " + value + "px)");
     should_not_apply("all and (min-" + feature + ": " + (value + 1) + "px)");
     should_apply("all and (min-" + feature + ": " + (value - 1) + "px)");
     should_apply("all and (max-" + feature + ": " + value + "px)");
     should_apply("all and (max-" + feature + ": " + (value + 1) + "px)");
@@ -220,21 +224,21 @@ function run() {
 
   should_apply("(max-aspect-ratio: 59/80)");
   should_not_apply("(max-aspect-ratio: 58/80)");
   should_not_apply("(max-aspect-ratio: 59/81)");
   should_apply("(max-aspect-ratio: 60/80)");
   should_apply("(max-aspect-ratio: 59/79)");
   expression_should_not_be_parseable("max-aspect-ratio");
 
-  let real_dar = device_width + "/" + device_height;
-  let high_dar_1 = (device_width + 1) + "/" + device_height;
-  let high_dar_2 = device_width + "/" + (device_height - 1);
-  let low_dar_1 = (device_width - 1) + "/" + device_height;
-  let low_dar_2 = device_width + "/" + (device_height + 1);
+  var real_dar = device_width + "/" + device_height;
+  var high_dar_1 = (device_width + 1) + "/" + device_height;
+  var high_dar_2 = device_width + "/" + (device_height - 1);
+  var low_dar_1 = (device_width - 1) + "/" + device_height;
+  var low_dar_2 = device_width + "/" + (device_height + 1);
   should_apply("(device-aspect-ratio: " + real_dar + ")");
   should_apply("not all and (device-aspect-ratio: " + high_dar_1 + ")");
   should_not_apply("all and (device-aspect-ratio: " + high_dar_2 + ")");
   should_not_apply("all and (device-aspect-ratio: " + low_dar_1 + ")");
   should_apply("not all and (device-aspect-ratio: " + low_dar_2 + ")");
   should_apply("(device-aspect-ratio)");
 
   should_apply("(min-device-aspect-ratio: " + real_dar + ")");
@@ -246,17 +250,19 @@ function run() {
 
   should_apply("all and (max-device-aspect-ratio: " + real_dar + ")");
   should_apply("(max-device-aspect-ratio: " + high_dar_1 + ")");
   should_apply("(max-device-aspect-ratio: " + high_dar_2 + ")");
   should_not_apply("all and (max-device-aspect-ratio: " + low_dar_1 + ")");
   should_apply("not all and (max-device-aspect-ratio: " + low_dar_2 + ")");
   expression_should_not_be_parseable("max-device-aspect-ratio");
 
-  for each (let feature in [ "max-aspect-ratio", "device-aspect-ratio" ]) {
+  features = [ "max-aspect-ratio", "device-aspect-ratio" ];
+  for (i in features) {
+    feature = features[i];
     expression_should_be_parseable(feature + ": 1/1");
     expression_should_be_parseable(feature + ": 1  /1");
     expression_should_be_parseable(feature + ": 1  / \t\n1");
     expression_should_be_parseable(feature + ": 1/\r1");
     expression_should_not_be_parseable(feature + ": 1");
     expression_should_not_be_parseable(feature + ": 0.5");
     expression_should_not_be_parseable(feature + ": 1.0/1");
     expression_should_not_be_parseable(feature + ": 1/1.0");
@@ -300,17 +306,19 @@ function run() {
   (is_color ? should_not_apply : should_apply)("all and (monochrome)");
   expression_should_not_be_parseable("max-monochrome");
   expression_should_not_be_parseable("min-monochrome");
   (is_color ? should_apply : should_not_apply)("not all and (monochrome)");
   (is_color ? should_not_apply : should_apply)("not all and (color)");
   (is_color ? should_apply : should_not_apply)("only all and (color)");
   (is_color ? should_not_apply : should_apply)("only all and (monochrome)");
 
-  for each (let feature in [ "color", "min-monochrome", "max-color-index" ]) {
+  features = [ "color", "min-monochrome", "max-color-index" ];
+  for (i in features) {
+    feature = features[i];
     expression_should_be_parseable(feature + ": 1");
     expression_should_be_parseable(feature + ": 327");
     expression_should_be_parseable(feature + ": 0");
     expression_should_not_be_parseable(feature + ": 1.0");
     expression_should_not_be_parseable(feature + ": -1");
     expression_should_not_be_parseable(feature + ": 1/1");
   }
 
@@ -319,40 +327,41 @@ function run() {
   should_apply("(color-index: 0)");
   should_not_apply("(color-index: 1)");
   should_apply("(min-color-index: 0)");
   should_not_apply("(min-color-index: 1)");
   should_apply("(max-color-index: 0)");
   should_apply("(max-color-index: 1)");
   should_apply("(max-color-index: 157)");
 
-  for each (let feature in [ "resolution", "min-resolution",
-                             "max-resolution" ]) {
+  features = [ "resolution", "min-resolution", "max-resolution" ];
+  for (i in features) {
+    feature = features[i];
     expression_should_be_parseable(feature + ": 3dpi");
     expression_should_be_parseable(feature + ":3dpi");
     expression_should_not_be_parseable(feature + ": 3.0dpi");
     expression_should_not_be_parseable(feature + ": 3.4dpi");
     expression_should_be_parseable(feature + "\t: 120dpcm");
     expression_should_not_be_parseable(feature + ": 0dpi");
     expression_should_not_be_parseable(feature + ": -3dpi");
   }
 
   // Find the resolution using max-resolution
-  let resolution = 0;
+  var resolution = 0;
   do {
     ++resolution;
     if (resolution > 10000) {
       ok(false, "resolution greater than 10000dpi???");
       break;
     }
   } while (!query_applies("(max-resolution: " + resolution + "dpi)"));
 
   // resolution should now be Math.ceil() of the actual resolution.
-  let dpi_high;
-  let dpi_low = resolution - 1;
+  var dpi_high;
+  var dpi_low = resolution - 1;
   if (query_applies("(min-resolution: " + resolution + "dpi)")) {
     // It's exact!
     should_apply("(resolution: " + resolution + "dpi)");
     should_not_apply("(resolution: " + (resolution + 1) + "dpi)");
     should_not_apply("(resolution: " + (resolution - 1) + "dpi)");
     dpi_high = resolution + 1;
   } else {
 	// We have no way to test resolution applying since it need not be
@@ -363,18 +372,18 @@ function run() {
   }
 
   should_apply("(min-resolution: " + dpi_low + "dpi)");
   should_not_apply("not all and (min-resolution: " + dpi_low + "dpi)");
   should_apply("not all and (min-resolution: " + dpi_high + "dpi)");
   should_not_apply("all and (min-resolution: " + dpi_high + "dpi)");
 
   // Test dpcm units based on what we computed in dpi.
-  let dpcm_high = Math.ceil(dpi_high / 2.54);
-  let dpcm_low = Math.floor(dpi_low / 2.54);
+  var dpcm_high = Math.ceil(dpi_high / 2.54);
+  var dpcm_low = Math.floor(dpi_low / 2.54);
   should_apply("(min-resolution: " + dpcm_low + "dpcm)");
   should_apply("(max-resolution: " + dpcm_high + "dpcm)");
   should_not_apply("(max-resolution: " + dpcm_low + "dpcm)");
   should_apply("not all and (min-resolution: " + dpcm_high + "dpcm)");
 
   expression_should_be_parseable("scan");
   expression_should_be_parseable("scan: progressive");
   expression_should_be_parseable("scan:interlace");
@@ -438,8 +447,9 @@ function run() {
   SimpleTest.finish();
 }
 
 </script>
 </pre>
 </body>
 </html>
 
+
