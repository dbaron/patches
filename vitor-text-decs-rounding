From: Vitor Menezes <vmenezes@mozilla.com>

Fix apparent rounding issues with new text decoration code. (Bug 403524)  r=dbaron

Rendering text decorations far away from the frame's baseline seems to sometimes
introduce rounding issues. This patch addresses that by avoiding snapped-baseline weirdness
and using a different argument to nsTextFrame::PaintTextDecorations in some computations
that didn't really need to use the snapped baseline anyway.

diff --git a/layout/base/nsCSSRendering.cpp b/layout/base/nsCSSRendering.cpp
--- a/layout/base/nsCSSRendering.cpp
+++ b/layout/base/nsCSSRendering.cpp
@@ -3638,17 +3638,19 @@ nsCSSRendering::GetTextDecorationRectInt
   NS_ASSERTION(aStyle <= NS_STYLE_TEXT_DECORATION_STYLE_WAVY,
                "Invalid aStyle value");
 
   if (aStyle == NS_STYLE_TEXT_DECORATION_STYLE_NONE)
     return gfxRect(0, 0, 0, 0);
 
   PRBool canLiftUnderline = aDescentLimit >= 0.0;
 
-  gfxRect r(NS_floor(aPt.x + 0.5), 0, NS_round(aLineSize.width), 0);
+  const gfxFloat left  = NS_floor(aPt.x + 0.5),
+                 right = NS_floor(aPt.x + aLineSize.width + 0.5);
+  gfxRect r(left, 0, right - left, 0);
 
   gfxFloat lineHeight = NS_round(aLineSize.height);
   lineHeight = NS_MAX(lineHeight, 1.0);
 
   gfxFloat ascent = NS_round(aAscent);
   gfxFloat descentLimit = NS_floor(aDescentLimit);
 
   gfxFloat suggestedMaxRectHeight = NS_MAX(NS_MIN(ascent, descentLimit), 1.0);
diff --git a/layout/generic/nsTextFrameThebes.cpp b/layout/generic/nsTextFrameThebes.cpp
--- a/layout/generic/nsTextFrameThebes.cpp
+++ b/layout/generic/nsTextFrameThebes.cpp
@@ -4495,56 +4495,57 @@ nsTextFrame::PaintTextDecorations(
 
 
   const gfxFloat app = aTextPaintStyle.PresContext()->AppUnitsPerDevPixel();
 
   // XXX aFramePt is in AppUnits, shouldn't it be nsFloatPoint?
   nscoord x = NSToCoordRound(aFramePt.x);
   nscoord width = GetRect().width;
   aClipEdges.Intersect(&x, &width);
+
   gfxPoint pt(x / app, 0);
   gfxSize size(width / app, 0);
   const gfxFloat ascent = gfxFloat(mAscent) / app;
-  const nscoord baseline = aTextBaselinePt.y - mAscent;
+  const gfxFloat frameTop = aFramePt.y;
 
   nscolor lineColor;
   for (PRUint32 i = decorations.mUnderlines.Length(); i-- > 0; ) {
     const LineDecoration& dec = decorations.mUnderlines[i];
     gfxFontGroup* fontGroup = GetFontGroupForFrame(dec.mFrame);
     const gfxFont::Metrics metrics = GetFirstFontMetrics(fontGroup);
 
     size.height = metrics.underlineSize;
-    pt.y = (baseline - dec.mBaselineOffset) / app;
+    pt.y = (frameTop - dec.mBaselineOffset) / app;
 
     lineColor = aOverrideColor ? *aOverrideColor : dec.mColor;
     nsCSSRendering::PaintDecorationLine(aCtx, lineColor, pt, size, ascent,
       fontGroup->GetUnderlineOffset(), NS_STYLE_TEXT_DECORATION_LINE_UNDERLINE,
       dec.mStyle);
   }
   for (PRUint32 i = decorations.mOverlines.Length(); i-- > 0; ) {
     const LineDecoration& dec = decorations.mOverlines[i];
 
     const gfxFont::Metrics metrics =
       GetFirstFontMetrics(GetFontGroupForFrame(dec.mFrame));
 
     size.height = metrics.underlineSize;
-    pt.y = (baseline - dec.mBaselineOffset) / app;
+    pt.y = (frameTop - dec.mBaselineOffset) / app;
 
     lineColor = aOverrideColor ? *aOverrideColor : dec.mColor;
     nsCSSRendering::PaintDecorationLine(aCtx, lineColor, pt, size, ascent,
       metrics.maxAscent, NS_STYLE_TEXT_DECORATION_LINE_OVERLINE, dec.mStyle);
   }
   for (PRUint32 i = decorations.mStrikes.Length(); i-- > 0; ) {
     const LineDecoration& dec = decorations.mStrikes[i];
 
     const gfxFont::Metrics metrics =
       GetFirstFontMetrics(GetFontGroupForFrame(dec.mFrame));
 
     size.height = metrics.strikeoutSize;
-    pt.y = (baseline - dec.mBaselineOffset) / app;
+    pt.y = (frameTop - dec.mBaselineOffset) / app;
 
     lineColor = aOverrideColor ? *aOverrideColor : dec.mColor;
     nsCSSRendering::PaintDecorationLine(aCtx, lineColor, pt, size, ascent,
       metrics.strikeoutOffset, NS_STYLE_TEXT_DECORATION_LINE_LINE_THROUGH,
       dec.mStyle);
   }
 }
 
