From: L. David Baron <dbaron@dbaron.org>

Make EnsureUniqueInner return a tri-state result that says whether it needed to do any cloning.  (Bug 536379)

diff --git a/layout/style/nsCSSStyleSheet.cpp b/layout/style/nsCSSStyleSheet.cpp
--- a/layout/style/nsCSSStyleSheet.cpp
+++ b/layout/style/nsCSSStyleSheet.cpp
@@ -145,18 +145,19 @@ CSSRuleListImpl::GetLength(PRUint32* aLe
 }
 
 nsIDOMCSSRule*    
 CSSRuleListImpl::GetItemAt(PRUint32 aIndex, nsresult* aResult)
 {
   nsresult result = NS_OK;
 
   if (mStyleSheet) {
-    result = mStyleSheet->EnsureUniqueInner(); // needed to ensure rules have correct parent
-    if (NS_SUCCEEDED(result)) {
+    // ensure rules have correct parent
+    if (mStyleSheet->EnsureUniqueInner() !=
+          nsCSSStyleSheet::eUniqueInner_CloneFailed) {
       nsCOMPtr<nsICSSRule> rule;
 
       result = mStyleSheet->GetStyleRuleAt(aIndex, *getter_AddRefs(rule));
       if (rule) {
         mRulesAccessed = PR_TRUE; // signal to never share rules again
         return rule->GetDOMRuleWeak(aResult);
       }
       if (result == NS_ERROR_ILLEGAL_VALUE) {
@@ -1012,16 +1013,17 @@ nsCSSStyleSheet::nsCSSStyleSheet(const n
     mRuleProcessors(nsnull)
 {
 
   mInner->AddSheet(this);
 
   if (aCopy.mRuleCollection && 
       aCopy.mRuleCollection->mRulesAccessed) {  // CSSOM's been there, force full copy now
     NS_ASSERTION(mInner->mComplete, "Why have rules been accessed on an incomplete sheet?");
+    // FIXME: handle failure?
     EnsureUniqueInner();
   }
 
   if (aCopy.mMedia) {
     // XXX This is wrong; we should be keeping @import rules and
     // sheets in sync!
     aCopy.mMedia->Clone(getter_AddRefs(mMedia));
   }
@@ -1460,30 +1462,31 @@ nsCSSStyleSheet::GetStyleSheetAt(PRInt32
     child = child->mNext;
   }
     
   NS_IF_ADDREF(aSheet = child);
 
   return NS_OK;
 }
 
-nsresult  
+nsCSSStyleSheet::EnsureUniqueInnerResult
 nsCSSStyleSheet::EnsureUniqueInner()
 {
-  if (1 < mInner->mSheets.Length()) {
-    nsCSSStyleSheetInner* clone = mInner->CloneFor(this);
-    if (clone) {
-      mInner->RemoveSheet(this);
-      mInner = clone;
-    }
-    else {
-      return NS_ERROR_OUT_OF_MEMORY;
-    }
+  NS_ABORT_IF_FALSE(mInner->mSheets.Length() != 0,
+                    "unexpected number of outers");
+  if (mInner->mSheets.Length() == 1) {
+    return eUniqueInner_AlreadyUnique;
   }
-  return NS_OK;
+  nsCSSStyleSheetInner* clone = mInner->CloneFor(this);
+  if (!clone) {
+    return eUniqueInner_CloneFailed;
+  }
+  mInner->RemoveSheet(this);
+  mInner = clone;
+  return eUniqueInner_ClonedInner;
 }
 
 NS_IMETHODIMP
 nsCSSStyleSheet::Clone(nsICSSStyleSheet* aCloneParent,
                        nsICSSImportRule* aCloneOwnerRule,
                        nsIDocument* aCloneDocument,
                        nsIDOMNode* aCloneOwningNode,
                        nsICSSStyleSheet** aClone) const
@@ -1572,18 +1575,21 @@ nsCSSStyleSheet::ClearRuleCascades()
 
 nsresult
 nsCSSStyleSheet::WillDirty()
 {
   if (!mInner->mComplete) {
     // Do nothing
     return NS_OK;
   }
-  
-  return EnsureUniqueInner();
+
+  if (EnsureUniqueInner() == eUniqueInner_CloneFailed) {
+    return NS_ERROR_OUT_OF_MEMORY;
+  }
+  return NS_OK;
 }
 
 void
 nsCSSStyleSheet::DidDirty()
 {
   ClearRuleCascades();
   mDirty = PR_TRUE;
 }
diff --git a/layout/style/nsCSSStyleSheet.h b/layout/style/nsCSSStyleSheet.h
--- a/layout/style/nsCSSStyleSheet.h
+++ b/layout/style/nsCSSStyleSheet.h
@@ -170,18 +170,27 @@ public:
   NS_IMETHOD DropRuleProcessor(nsCSSRuleProcessor* aProcessor);
   NS_IMETHOD InsertRuleInternal(const nsAString& aRule,
                                 PRUint32 aIndex, PRUint32* aReturn);
   NS_IMETHOD_(nsIURI*) GetOriginalURI() const;
 
   // nsICSSLoaderObserver interface
   NS_IMETHOD StyleSheetLoaded(nsICSSStyleSheet* aSheet, PRBool aWasAlternate,
                               nsresult aStatus);
-  
-  nsresult EnsureUniqueInner();
+
+  enum EnsureUniqueInnerResult {
+    // No work was needed to ensure a unique inner.
+    eUniqueInner_AlreadyUnique,
+    // A clone was done to ensure a unique inner (which means the style
+    // rules in this sheet have changed).
+    eUniqueInner_ClonedInner,
+    // A clone was attempted, but it failed.
+    eUniqueInner_CloneFailed
+  };
+  EnsureUniqueInnerResult EnsureUniqueInner();
 
   PRBool UseForPresentation(nsPresContext* aPresContext,
                             nsMediaQueryResultCacheKey& aKey) const;
 
   // nsIDOMStyleSheet interface
   NS_DECL_NSIDOMSTYLESHEET
 
   // nsIDOMCSSStyleSheet interface
