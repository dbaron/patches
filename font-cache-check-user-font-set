Check that the user font set matches before returning an entry from the font cache.  (Bug 457821)

diff --git a/gfx/public/nsIFontMetrics.h b/gfx/public/nsIFontMetrics.h
--- a/gfx/public/nsIFontMetrics.h
+++ b/gfx/public/nsIFontMetrics.h
@@ -43,19 +43,20 @@
 #include "nsFont.h"
 
 class nsString;
 class nsIDeviceContext;
 class nsIAtom;
 class gfxUserFontSet;
 
 // IID for the nsIFontMetrics interface
+// 23de09f7-c6a7-4470-8c9c-a8df0a3bd6a0
 #define NS_IFONT_METRICS_IID   \
-{ 0xc74cb770, 0xa33e, 0x11d1, \
-{ 0xa8, 0x24, 0x00, 0x40, 0x95, 0x9a, 0x28, 0xc9 } }
+{ 0x23de09f7, 0xc6a7, 0x4470, \
+  { 0x8c, 0x9c, 0xa8, 0xdf, 0x0a, 0x3b, 0xd6, 0xa0 } }
 
 //----------------------------------------------------------------------
 
 /**
  * A native font handle
  */
 typedef void* nsFontHandle;
 
@@ -211,16 +212,20 @@ public:
    */
   NS_IMETHOD  GetAveCharWidth(nscoord& aAveCharWidth) = 0;
 
   /**
    * Returns the often needed width of the space character
    */
   NS_IMETHOD  GetSpaceWidth(nscoord& aSpaceCharWidth) = 0;
 
+  // Needs to be virtual and at this level so that its caller in gkgfx can
+  // avoid linking against thebes.
+  virtual gfxUserFontSet* UserFontSet() = 0;
+
 protected:
 
   nsFont mFont;		// The font for this metrics object.
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(nsIFontMetrics, NS_IFONT_METRICS_IID)
 
 #endif /* nsIFontMetrics_h___ */
diff --git a/gfx/src/nsDeviceContext.cpp b/gfx/src/nsDeviceContext.cpp
--- a/gfx/src/nsDeviceContext.cpp
+++ b/gfx/src/nsDeviceContext.cpp
@@ -46,16 +46,17 @@
 #include "nsIFontMetrics.h"
 #include "nsHashtable.h"
 #include "nsILanguageAtomService.h"
 #include "nsIServiceManager.h"
 #include "nsUnicharUtils.h"
 #include "nsCRT.h"
 #include "nsIRenderingContext.h"
 #include "gfxUserFontSet.h"
+#include "nsIThebesFontMetrics.h"
 
 NS_IMPL_ISUPPORTS3(DeviceContextImpl, nsIDeviceContext, nsIObserver, nsISupportsWeakReference)
 
 DeviceContextImpl::DeviceContextImpl()
 {
   mAppUnitsPerDevPixel = -1;
   mAppUnitsPerInch = -1;
   mAppUnitsPerDevNotScaledPixel = -1;
@@ -477,17 +478,17 @@ nsFontCache::GetMetricsFor(const nsFont&
 {
   // First check our cache
   // start from the end, which is where we put the most-recent-used element
 
   nsIFontMetrics* fm;
   PRInt32 n = mFontMetrics.Count() - 1;
   for (PRInt32 i = n; i >= 0; --i) {
     fm = static_cast<nsIFontMetrics*>(mFontMetrics[i]);
-    if (fm->Font().Equals(aFont)) {
+    if (fm->Font().Equals(aFont) && fm->UserFontSet() == aUserFontSet) {
       nsCOMPtr<nsIAtom> langGroup;
       fm->GetLangGroup(getter_AddRefs(langGroup));
       if (aLangGroup == langGroup.get()) {
         if (i != n) {
           // promote it to the end of the cache
           mFontMetrics.MoveElement(i, n);
         }
         NS_ADDREF(aMetrics = fm);
diff --git a/gfx/src/thebes/nsThebesFontMetrics.cpp b/gfx/src/thebes/nsThebesFontMetrics.cpp
--- a/gfx/src/thebes/nsThebesFontMetrics.cpp
+++ b/gfx/src/thebes/nsThebesFontMetrics.cpp
@@ -265,16 +265,22 @@ nsThebesFontMetrics::GetAveCharWidth(nsc
 
 NS_IMETHODIMP
 nsThebesFontMetrics::GetSpaceWidth(nscoord& aSpaceCharWidth)
 {
     aSpaceCharWidth = CEIL_TO_TWIPS(GetMetrics().spaceWidth);
     return NS_OK;
 }
 
+/* virtual */ gfxUserFontSet*
+nsThebesFontMetrics::UserFontSet()
+{
+    return mFontGroup->GetUserFontSet();
+}
+
 PRInt32
 nsThebesFontMetrics::GetMaxStringLength()
 {
     const gfxFont::Metrics& m = GetMetrics();
     const double x = 32767.0 / m.maxAdvance;
     PRInt32 len = (PRInt32)floor(x);
     return PR_MAX(1, len);
 }
diff --git a/gfx/src/thebes/nsThebesFontMetrics.h b/gfx/src/thebes/nsThebesFontMetrics.h
--- a/gfx/src/thebes/nsThebesFontMetrics.h
+++ b/gfx/src/thebes/nsThebesFontMetrics.h
@@ -74,16 +74,18 @@ public:
     NS_IMETHOD  GetMaxHeight(nscoord &aHeight);
     NS_IMETHOD  GetMaxAscent(nscoord &aAscent);
     NS_IMETHOD  GetMaxDescent(nscoord &aDescent);
     NS_IMETHOD  GetMaxAdvance(nscoord &aAdvance);
     NS_IMETHOD  GetLangGroup(nsIAtom** aLangGroup);
     NS_IMETHOD  GetFontHandle(nsFontHandle &aHandle);
     NS_IMETHOD  GetAveCharWidth(nscoord& aAveCharWidth);
     NS_IMETHOD  GetSpaceWidth(nscoord& aSpaceCharWidth);
+    virtual gfxUserFontSet* UserFontSet();
+
     virtual PRInt32 GetMaxStringLength();
 
 
     virtual nsresult GetWidth(const char* aString, PRUint32 aLength, nscoord& aWidth,
                               nsThebesRenderingContext *aContext);
     virtual nsresult GetWidth(const PRUnichar* aString, PRUint32 aLength,
                               nscoord& aWidth, PRInt32 *aFontID,
                               nsThebesRenderingContext *aContext);
