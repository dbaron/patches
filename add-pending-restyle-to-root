From: L. David Baron <dbaron@dbaron.org>

Bug 1115812 patch 1 - Add RestyleTracker::AddPendingRestyleToRoot.

diff --git a/layout/base/RestyleManager.cpp b/layout/base/RestyleManager.cpp
--- a/layout/base/RestyleManager.cpp
+++ b/layout/base/RestyleManager.cpp
@@ -1541,29 +1541,17 @@ RestyleManager::DoRebuildAllStyleData(Re
   if (NS_FAILED(rv)) {
     return;
   }
 
   aRestyleHint = aRestyleHint | eRestyle_ForceDescendants;
 
   if (!(aRestyleHint & eRestyle_Subtree) &&
       (aRestyleHint & ~(eRestyle_Force | eRestyle_ForceDescendants))) {
-    // We want this hint to apply to the root node's primary frame
-    // rather than the root frame, since it's the primary frame that has
-    // the styles for the root element (rather than the ancestors of the
-    // primary frame whose mContent is the root node but which have
-    // different styles).  If we use up the hint for one of the
-    // ancestors that we hit first, then we'll fail to do the restyling
-    // we need to do.
-    Element* root = mPresContext->Document()->GetRootElement();
-    if (root) {
-      // If the root element is gone, dropping the hint on the floor
-      // should be fine.
-      aRestyleTracker.AddPendingRestyle(root, aRestyleHint, nsChangeHint(0));
-    }
+    aRestyleTracker.AddPendingRestyleToRoot(aRestyleHint, nsChangeHint(0));
     aRestyleHint = nsRestyleHint(0);
   }
 
   // Recalculate all of the style contexts for the document
   // Note that we can ignore the return value of ComputeStyleChangeFor
   // because we never need to reframe the root frame
   // XXX Does it matter that we're passing aExtraHint to the real root
   // frame and not the root node's primary frame?  (We could do
diff --git a/layout/base/RestyleTracker.cpp b/layout/base/RestyleTracker.cpp
--- a/layout/base/RestyleTracker.cpp
+++ b/layout/base/RestyleTracker.cpp
@@ -357,16 +357,35 @@ RestyleTracker::GetRestyleData(Element* 
   } else {
     aElement->UnsetFlags(mRestyleBits);
   }
 
   return true;
 }
 
 void
+RestyleTracker::AddPendingRestyleToRoot(nsRestyleHint aRestyleHint,
+                                        nsChangeHint aChangeHint)
+{
+  // We want this hint to apply to the root node's primary frame rather
+  // than the root frame, since it's the primary frame that has the
+  // styles for the root element (rather than the ancestors of the
+  // primary frame whose mContent is the root node but which have
+  // different styles).  If we use up the hint for one of the ancestors
+  // that we hit first, then we'll fail to do the restyling we need to
+  // do.
+  Element* root = mRestyleManager->PresContext()->Document()->GetRootElement();
+  if (root) {
+    // If the root element is gone, dropping the hint on the floor
+    // should be fine.
+    AddPendingRestyle(root, aRestyleHint, nsChangeHint(0));
+  }
+}
+
+void
 RestyleTracker::AddRestyleRootsIfAwaitingRestyle(
                                    const nsTArray<nsRefPtr<Element>>& aElements)
 {
   // The RestyleData for a given element has stored in mDescendants
   // the list of descendants we need to end up restyling.  Since we
   // won't necessarily end up restyling them, due to the restyle
   // process finishing early (see how eRestyleResult_Stop is handled
   // in ElementRestyler::Restyle), we add them to the list of restyle
diff --git a/layout/base/RestyleTracker.h b/layout/base/RestyleTracker.h
--- a/layout/base/RestyleTracker.h
+++ b/layout/base/RestyleTracker.h
@@ -263,16 +263,22 @@ public:
   /**
    * Add a restyle for the given element to the tracker.  Returns true
    * if the element already had eRestyle_LaterSiblings set on it.
    */
   bool AddPendingRestyle(Element* aElement, nsRestyleHint aRestyleHint,
                          nsChangeHint aMinChangeHint);
 
   /**
+   * Call AddPendingRestyle for the root element, if any.
+   */
+  void AddPendingRestyleToRoot(nsRestyleHint aRestyleHint,
+                               nsChangeHint aChangeHint);
+
+  /**
    * Process the restyles we've been tracking.
    */
   void ProcessRestyles() {
     // Fast-path the common case (esp. for the animation restyle
     // tracker) of not having anything to do.
     if (mPendingRestyles.Count()) {
       DoProcessRestyles();
     }
