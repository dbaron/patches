From: L. David Baron <dbaron@dbaron.org>

Issues to follow up on post bug 776265.

diff --git a/layout/generic/nsHTMLReflowState.cpp b/layout/generic/nsHTMLReflowState.cpp
--- a/layout/generic/nsHTMLReflowState.cpp
+++ b/layout/generic/nsHTMLReflowState.cpp
@@ -1639,17 +1639,16 @@ nsHTMLReflowState::InitAbsoluteConstrain
       autoHeight = 0;
     }
 
     if (ComputedHeight() == NS_UNCONSTRAINEDSIZE) {
       // For non-replaced elements with 'height' auto, the 'height'
       // fills the remaining space.
       ComputedHeight() = autoHeight;
 
-      // XXX Do these need box-sizing adjustments?
       if (ComputedHeight() > ComputedMaxHeight())
         ComputedHeight() = ComputedMaxHeight();
       if (ComputedHeight() < ComputedMinHeight())
         ComputedHeight() = ComputedMinHeight();
     }
 
     // The height might still not fill all the available space in case:
     //  * height was specified
@@ -2128,16 +2127,19 @@ nsHTMLReflowState::InitConstraints(nsPre
       }
       // calc() with percentages acts like 'auto' on internal table elements
       if (eStyleUnit_Auto == heightUnit ||
           (height.IsCalcUnit() && height.CalcHasPercent())) {
         ComputedHeight() = NS_AUTOHEIGHT;
       } else {
         NS_ASSERTION(heightUnit == mStylePosition->mHeight.GetUnit(),
                      "unexpected height unit change");
+        // Is passing mBoxSizing through for internal table elements
+        // really right?  Do they have their border and padding set
+        // correctly?  (Same for min/max-height, really.)
         ComputedHeight() = ComputeHeightValue(aContainingBlockHeight, 
                                              mStylePosition->mBoxSizing,
                                              mStylePosition->mHeight);
       }
 
       // Doesn't apply to table elements
       ComputedMinWidth() = ComputedMinHeight() = 0;
       ComputedMaxWidth() = ComputedMaxHeight() = NS_UNCONSTRAINEDSIZE;
