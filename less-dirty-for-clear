From: L. David Baron <dbaron@dbaron.org>

Bug 481128 - Avoid marking lines dirty because of clearance inside during append-only reflows.  (NOT YET COMPATIBLE WITH IREFLOW)

diff --git a/layout/base/nsPresContext.cpp b/layout/base/nsPresContext.cpp
--- a/layout/base/nsPresContext.cpp
+++ b/layout/base/nsPresContext.cpp
@@ -2931,16 +2931,18 @@ nsPresContext::ReflowStarted(bool aInter
   // start.
   mHasPendingInterrupt = false;
 
   mInterruptChecksToSkip = sInterruptChecksToSkip;
 
   if (mInterruptsEnabled) {
     mReflowStartTime = TimeStamp::Now();
   }
+
+  mBelowSomethingDirty = false;
 }
 
 bool
 nsPresContext::CheckForInterrupt(nsIFrame* aFrame)
 {
   if (mHasPendingInterrupt) {
     mShell->FrameNeedsToContinueReflow(aFrame);
     return true;
diff --git a/layout/base/nsPresContext.h b/layout/base/nsPresContext.h
--- a/layout/base/nsPresContext.h
+++ b/layout/base/nsPresContext.h
@@ -1179,16 +1179,25 @@ public:
   }
 
   void SetHasWarnedAboutTooLargeDashedOrDottedRadius() {
     mHasWarnedAboutTooLargeDashedOrDottedRadius = true;
   }
 
   nsBidi& GetBidiEngine();
 
+  /**
+   * State that is cleared each reflow, to indicate that something
+   * earlier in the document was dirty during this reflow.  This is
+   * helpful for optimizing incremental reflows that occur during
+   * document loading to avoid O(N^2) algorithms.
+   */
+  void SetBelowSomethingDirty() { mBelowSomethingDirty = true; }
+  bool IsBelowSomethingDirty() { return mBelowSomethingDirty; }
+
 protected:
   friend class nsRunnableMethod<nsPresContext>;
   void ThemeChangedInternal();
   void SysColorChangedInternal();
   void RefreshSystemMetrics();
 
   // update device context's resolution from the widget
   void UIResolutionChangedInternal();
@@ -1470,16 +1479,18 @@ protected:
   unsigned              mPostedFlushCounterStyles: 1;
 
   // resize reflow is suppressed when the only change has been to zoom
   // the document rather than to change the document's dimensions
   unsigned              mSuppressResizeReflow : 1;
 
   unsigned              mIsVisual : 1;
 
+  unsigned              mBelowSomethingDirty : 1;
+
   unsigned              mFireAfterPaintEvents : 1;
 
   unsigned              mIsChrome : 1;
   unsigned              mIsChromeOriginImage : 1;
 
   // Should we paint flash in this context? Do not use this variable directly.
   // Use GetPaintFlashing() method instead.
   mutable unsigned mPaintFlashing : 1;
diff --git a/layout/generic/nsBlockFrame.cpp b/layout/generic/nsBlockFrame.cpp
--- a/layout/generic/nsBlockFrame.cpp
+++ b/layout/generic/nsBlockFrame.cpp
@@ -2245,16 +2245,17 @@ nsBlockFrame::ReflowDirtyLines(BlockRefl
 
     if (selfDirty)
       line->MarkDirty();
 
     // This really sucks, but we have to look inside any blocks that have clear
     // elements inside them.
     // XXX what can we do smarter here?
     if (!line->IsDirty() && line->IsBlock() &&
+        aState.mPresContext->IsBelowSomethingDirty() &&
         (line->mFirstChild->GetStateBits() & NS_BLOCK_HAS_CLEAR_CHILDREN)) {
       line->MarkDirty();
     }
 
     nsIFrame *replacedBlock = nullptr;
     if (line->IsBlock() &&
         !nsBlockFrame::BlockCanIntersectFloats(line->mFirstChild)) {
       replacedBlock = line->mFirstChild;
diff --git a/layout/generic/nsIFrame.h b/layout/generic/nsIFrame.h
--- a/layout/generic/nsIFrame.h
+++ b/layout/generic/nsIFrame.h
@@ -4079,16 +4079,20 @@ protected:
   inline void PropagateRootElementWritingMode(mozilla::WritingMode aRootElemWM);
 
   void MarkInReflow() {
 #ifdef DEBUG_dbaron_off
     // bug 81268
     NS_ASSERTION(!(mState & NS_FRAME_IN_REFLOW), "frame is already in reflow");
 #endif
     mState |= NS_FRAME_IN_REFLOW;
+
+    if (mState & NS_FRAME_IS_DIRTY) {
+      PresContext()->SetBelowSomethingDirty();
+    }
   }
 
   nsFrameState     mState;
 
   /**
    * List of properties attached to the frame.
    */
   FrameProperties  mProperties;
