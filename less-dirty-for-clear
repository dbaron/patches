From: L. David Baron <dbaron@dbaron.org>

Bug 481128 - Avoid marking lines dirty because of clearance inside during append-only reflows.  (NOT YET COMPATIBLE WITH IREFLOW)

diff --git a/layout/base/nsPresContext.cpp b/layout/base/nsPresContext.cpp
--- a/layout/base/nsPresContext.cpp
+++ b/layout/base/nsPresContext.cpp
@@ -2671,16 +2671,18 @@ nsPresContext::ReflowStarted(bool aInter
   // start.
   mHasPendingInterrupt = false;
 
   mInterruptChecksToSkip = sInterruptChecksToSkip;
 
   if (mInterruptsEnabled) {
     mReflowStartTime = TimeStamp::Now();
   }
+
+  mBelowSomethingDirty = false;
 }
 
 bool
 nsPresContext::CheckForInterrupt(nsIFrame* aFrame)
 {
   if (mHasPendingInterrupt) {
     mShell->FrameNeedsToContinueReflow(aFrame);
     return true;
diff --git a/layout/base/nsPresContext.h b/layout/base/nsPresContext.h
--- a/layout/base/nsPresContext.h
+++ b/layout/base/nsPresContext.h
@@ -1032,16 +1032,25 @@ public:
   bool HasWarnedAboutPositionedTableParts() const {
     return mHasWarnedAboutPositionedTableParts;
   }
 
   void SetHasWarnedAboutPositionedTableParts() {
     mHasWarnedAboutPositionedTableParts = true;
   }
 
+  /**
+   * State that is cleared each reflow, to indicate that something
+   * earlier in the document was dirty during this reflow.  This is
+   * helpful for optimizing incremental reflows that occur during
+   * document loading to avoid O(N^2) algorithms.
+   */
+  void SetBelowSomethingDirty() { mBelowSomethingDirty = true; }
+  bool IsBelowSomethingDirty() { return mBelowSomethingDirty; }
+
 protected:
   friend class nsRunnableMethod<nsPresContext>;
   void ThemeChangedInternal();
   void SysColorChangedInternal();
   void UIResolutionChangedInternal();
 
   static bool
   UIResolutionChangedSubdocumentCallback(nsIDocument* aDocument, void* aData);
@@ -1337,16 +1346,18 @@ protected:
   // the document rather than to change the document's dimensions
   unsigned              mSupressResizeReflow : 1;
 
   unsigned              mIsVisual : 1;
 
   unsigned              mProcessingRestyles : 1;
   unsigned              mProcessingAnimationStyleChange : 1;
 
+  unsigned              mBelowSomethingDirty : 1;
+
   unsigned              mFireAfterPaintEvents : 1;
 
   unsigned              mIsChrome : 1;
   unsigned              mIsChromeOriginImage : 1;
 
   // Should we paint flash in this context? Do not use this variable directly.
   // Use GetPaintFlashing() method instead.
   mutable unsigned mPaintFlashing : 1;
diff --git a/layout/generic/nsBlockFrame.cpp b/layout/generic/nsBlockFrame.cpp
--- a/layout/generic/nsBlockFrame.cpp
+++ b/layout/generic/nsBlockFrame.cpp
@@ -1992,16 +1992,17 @@ nsBlockFrame::ReflowDirtyLines(nsBlockRe
 
     if (selfDirty)
       line->MarkDirty();
 
     // This really sucks, but we have to look inside any blocks that have clear
     // elements inside them.
     // XXX what can we do smarter here?
     if (!line->IsDirty() && line->IsBlock() &&
+        aState.mPresContext->IsBelowSomethingDirty() &&
         (line->mFirstChild->GetStateBits() & NS_BLOCK_HAS_CLEAR_CHILDREN)) {
       line->MarkDirty();
     }
 
     nsIFrame *replacedBlock = nullptr;
     if (line->IsBlock() &&
         !nsBlockFrame::BlockCanIntersectFloats(line->mFirstChild)) {
       replacedBlock = line->mFirstChild;
diff --git a/layout/generic/nsFrame.cpp b/layout/generic/nsFrame.cpp
--- a/layout/generic/nsFrame.cpp
+++ b/layout/generic/nsFrame.cpp
@@ -4280,16 +4280,20 @@ nsFrame::WillReflow(nsPresContext* aPres
   // bug 81268
   NS_ASSERTION(!(mState & NS_FRAME_IN_REFLOW),
                "nsFrame::WillReflow: frame is already in reflow");
 #endif
 
   NS_FRAME_TRACE_MSG(NS_FRAME_TRACE_CALLS,
                      ("WillReflow: oldState=%x", mState));
   mState |= NS_FRAME_IN_REFLOW;
+
+  if (mState & NS_FRAME_IS_DIRTY) {
+    PresContext()->SetBelowSomethingDirty();
+  }
 }
 
 void
 nsFrame::DidReflow(nsPresContext*           aPresContext,
                    const nsHTMLReflowState*  aReflowState,
                    nsDidReflowStatus         aStatus)
 {
   NS_FRAME_TRACE_MSG(NS_FRAME_TRACE_CALLS,
