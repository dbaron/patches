From: L. David Baron <dbaron@dbaron.org>

Bug 1381080 patch 4 - Assert that strings whose static type requires a null-terminated buffer aren't assign a non-null-terminated buffer.

I actually couldn't figure out a way to trigger this assertion with the
current string code without doing invalid casts, but there are things we
may want to add to the string code in the future that might risk hitting
this (e.g., move constructors, promoting various rebind methods to
nsA[C]String), so I think it's worth asserting.

MozReview-Commit-ID: 4R0dYuTfrFW

diff --git a/xpcom/string/nsTSubstring.h b/xpcom/string/nsTSubstring.h
--- a/xpcom/string/nsTSubstring.h
+++ b/xpcom/string/nsTSubstring.h
@@ -300,24 +300,32 @@ public:
      * Simplified, that gives us:
      */
     return (aStart < (mData + mLength) && aEnd > mData);
   }
 
 protected:
   nsTStringRepr_CharT() = delete; // Never instantiate directly
 
-  constexpr
   nsTStringRepr_CharT(char_type* aData, size_type aLength,
                       DataFlags aDataFlags, ClassFlags aClassFlags)
     : mData(aData)
     , mLength(aLength)
     , mDataFlags(aDataFlags)
     , mClassFlags(aClassFlags)
   {
+    AssertValid();
+  }
+
+  void AssertValid()
+  {
+    MOZ_ASSERT(!(mClassFlags & ClassFlags::NULL_TERMINATED) ||
+               (mDataFlags & DataFlags::TERMINATED),
+               "String classes whose static type guarantees a null-terminated "
+               "buffer must not be assigned a non-null-terminated buffer.");
   }
 
   char_type* mData;
   size_type mLength;
   DataFlags mDataFlags;
   ClassFlags const mClassFlags;
 };
 
@@ -1081,23 +1089,25 @@ protected:
   }
 #endif /* DEBUG || FORCE_BUILD_REFCNT_LOGGING */
 
   void SetToEmptyBuffer()
   {
     mData = char_traits::sEmptyBuffer;
     mLength = 0;
     mDataFlags = DataFlags::TERMINATED;
+    AssertValid();
   }
 
   void SetData(char_type* aData, size_type aLength, DataFlags aDataFlags)
   {
     mData = aData;
     mLength = aLength;
     mDataFlags = aDataFlags;
+    AssertValid();
   }
 
   /**
    * this function releases mData and does not change the value of
    * any of its member variables.  in other words, this function acts
    * like a destructor.
    */
   void NS_FASTCALL Finalize();
