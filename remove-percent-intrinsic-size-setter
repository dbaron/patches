From: L. David Baron <dbaron@dbaron.org>

Remove notion of percentage intrinsic size:  remove the single case that (incorrectly) sets percentage intrinsic sizes.  (Bug 611099)

Needed to help CSS 2.1 meet Proposed Recommendation entrance criteria.

TODO: Needs adjustment of the following reftests:
layout/reftests/box-shadow/boxshadow-inner-basic.html
layout/reftests/bugs/243519-8.svg
layout/reftests/image-element/gradient-html-02.html
layout/reftests/image-element/pattern-html-01.html
layout/reftests/ogg-video/aspect-ratio-1a.xhtml
layout/reftests/ogg-video/aspect-ratio-1b.xhtml
parser/htmlparser/tests/reftest/bug577418-1.html
layout/reftests/svg/as-image/img-and-image-1.html
layout/reftests/svg/image/image-svg-inline-01.html
layout/reftests/svg/sizing/standalone--auto-auto--pct-pct.svg
layout/reftests/svg/sizing/standalone--auto-auto--pct-px.svg
layout/reftests/svg/sizing/standalone--auto-auto--px-pct.svg
layout/reftests/svg/sizing/standalone--auto-pct--pct-0.svg
layout/reftests/svg/sizing/standalone--auto-pct--pct-pct.svg
layout/reftests/svg/sizing/standalone--auto-pct--pct-px.svg
layout/reftests/svg/sizing/standalone--auto-px--pct-0.svg
layout/reftests/svg/sizing/standalone--auto-px--pct-pct.svg
layout/reftests/svg/sizing/standalone--auto-px--pct-px.svg
layout/reftests/svg/sizing/standalone--pct-auto--0-pct.svg
layout/reftests/svg/sizing/standalone--pct-auto--pct-pct.svg
layout/reftests/svg/sizing/standalone--pct-auto--px-pct.svg
layout/reftests/svg/sizing/standalone--px-auto--0-pct.svg
layout/reftests/svg/sizing/standalone--px-auto--pct-pct.svg
layout/reftests/svg/sizing/standalone--px-auto--px-pct.svg
layout/reftests/svg/sizing/inline--position-absolute--02.xhtml
layout/reftests/svg/sizing/object--auto-auto--0-pct.html
layout/reftests/svg/sizing/object--auto-auto--pct-0.html
layout/reftests/svg/sizing/dynamic--inline-css-height.xhtml
layout/reftests/svg/sizing/dynamic--inline-css-width.xhtml
layout/reftests/svg/sizing/dynamic--inline-resize-cb-height.xhtml
layout/reftests/svg/sizing/dynamic--inline-resize-cb-width.xhtml
layout/reftests/svg/filters/feConvolveMatrix-2.svg
layout/reftests/svg/filters/feMorphology-2.svg
layout/reftests/svg/filters/feTile-2.svg
layout/reftests/svg/moz-only/feImage-zoom-01a.svg
layout/reftests/svg/moz-only/feImage-zoom-01b.svg
layout/reftests/svg/moz-only/foreignObject-zoom-01.svg
layout/reftests/svg/svg-integration/clipPath-html-01.xhtml
layout/reftests/svg/svg-integration/clipPath-html-01-extref.xhtml
layout/reftests/svg/svg-integration/clipPath-html-02.xhtml
layout/reftests/svg/svg-integration/clipPath-html-02-extref.xhtml
layout/reftests/svg/svg-integration/clipPath-html-03.xhtml
layout/reftests/svg/svg-integration/clipPath-html-03-extref.xhtml
layout/reftests/svg/svg-integration/clipPath-html-06.xhtml
layout/reftests/svg/svg-integration/clipPath-html-06-extref.xhtml
layout/reftests/svg/svg-integration/clipPath-html-zoomed-01.xhtml
layout/reftests/svg/svg-integration/filter-html-01.xhtml
layout/reftests/svg/svg-integration/filter-html-01-extref.xhtml
layout/reftests/svg/svg-integration/filter-html-zoomed-01.xhtml
layout/reftests/svg/svg-integration/mask-html-01.xhtml
layout/reftests/svg/svg-integration/mask-html-01-extref-01.xhtml
layout/reftests/svg/svg-integration/mask-html-01-extref-02.xhtml
layout/reftests/svg/svg-integration/mask-html-zoomed-01.xhtml
layout/reftests/svg/svg-integration/mask-html-xbl-bound-01.html
layout/reftests/svg/dynamic-rect-04.xhtml
layout/reftests/svg/dynamic-use-02.svg
layout/reftests/svg/outer-svg-border-and-padding-01.svg
layout/reftests/svg/svg-in-foreignObject-01.xhtml
layout/reftests/svg/svg-in-foreignObject-02.xhtml
layout/reftests/svg/viewBox-and-pattern-01.svg
content/test/reftest/xml-stylesheet/css_relative_href.xml
content/test/reftest/xml-stylesheet/css_relative_href_also_external.xml
content/test/reftest/xml-stylesheet/css_relative_href_also_external_override.xml

diff --git a/layout/svg/base/src/nsSVGOuterSVGFrame.cpp b/layout/svg/base/src/nsSVGOuterSVGFrame.cpp
--- a/layout/svg/base/src/nsSVGOuterSVGFrame.cpp
+++ b/layout/svg/base/src/nsSVGOuterSVGFrame.cpp
@@ -243,31 +243,23 @@ nsSVGOuterSVGFrame::GetIntrinsicSize()
   // specified and we're embedded inside an nsIObjectLoadingContent.
 
   IntrinsicSize intrinsicSize;
 
   nsSVGSVGElement *content = static_cast<nsSVGSVGElement*>(mContent);
   nsSVGLength2 &width  = content->mLengthAttributes[nsSVGSVGElement::WIDTH];
   nsSVGLength2 &height = content->mLengthAttributes[nsSVGSVGElement::HEIGHT];
 
-  if (width.IsPercentage()) {
-    float val = width.GetAnimValInSpecifiedUnits() / 100.0f;
-    if (val < 0.0f) val = 0.0f;
-    intrinsicSize.width.SetPercentValue(val);
-  } else {
+  if (!width.IsPercentage()) {
     nscoord val = nsPresContext::CSSPixelsToAppUnits(width.GetAnimValue(content));
     if (val < 0) val = 0;
     intrinsicSize.width.SetCoordValue(val);
   }
 
-  if (height.IsPercentage()) {
-    float val = height.GetAnimValInSpecifiedUnits() / 100.0f;
-    if (val < 0.0f) val = 0.0f;
-    intrinsicSize.height.SetPercentValue(val);
-  } else {
+  if (!height.IsPercentage()) {
     nscoord val = nsPresContext::CSSPixelsToAppUnits(height.GetAnimValue(content));
     if (val < 0) val = 0;
     intrinsicSize.height.SetCoordValue(val);
   }
 
   return intrinsicSize;
 }
 
@@ -313,26 +305,60 @@ nsSVGOuterSVGFrame::GetIntrinsicRatio()
 /* virtual */ nsSize
 nsSVGOuterSVGFrame::ComputeSize(nsIRenderingContext *aRenderingContext,
                                 nsSize aCBSize, nscoord aAvailableWidth,
                                 nsSize aMargin, nsSize aBorder, nsSize aPadding,
                                 PRBool aShrinkWrap)
 {
   nsSVGSVGElement* content = static_cast<nsSVGSVGElement*>(mContent);
 
-  if ((content->HasValidViewbox() || content->ShouldSynthesizeViewBox()) &&
-      (IsRootOfImage() || IsRootOfReplacedElementSubDoc())) {
-    // The embedding element has done the replaced element sizing, using our
-    // intrinsic dimensions as necessary. We just need to fill the viewport.
-    return aCBSize;
+  IntrinsicSize intrinsicSize = GetIntrinsicSize();
+
+  if (!mContent->GetParent()) {
+    if (IsRootOfImage() || IsRootOfReplacedElementSubDoc()) {
+      if (content->HasValidViewbox() || content->ShouldSynthesizeViewBox()) {
+        // The embedding element has done the replaced element sizing,
+        // using our intrinsic dimensions as necessary. We just need to
+        // fill the viewport.
+        return aCBSize;
+      }
+    } else {
+      // We're the root of a browsing context, so we need to honor
+      // widths and heights in percentages.  (GetIntrinsicSize() doesn't
+      // report these since there's no such thing as a percentage
+      // intrinsic size.)
+      nsSVGLength2 &width =
+        content->mLengthAttributes[nsSVGSVGElement::WIDTH];
+      if (width.IsPercentage()) {
+        NS_ABORT_IF_FALSE(intrinsicSize.width.GetUnit() == eStyleUnit_None,
+                          "GetIntrinsicSize should have reported no "
+                          "intrinsic width");
+        float val = width.GetAnimValInSpecifiedUnits() / 100.0f;
+        if (val < 0.0f) val = 0.0f;
+        intrinsicSize.width.SetCoordValue(val * aCBSize.width);
+      }
+
+      nsSVGLength2 &height =
+        content->mLengthAttributes[nsSVGSVGElement::HEIGHT];
+      NS_ABORT_IF_FALSE(aCBSize.height != NS_AUTOHEIGHT,
+                        "root should not have auto-height containing block");
+      if (height.IsPercentage()) {
+        NS_ABORT_IF_FALSE(intrinsicSize.height.GetUnit() == eStyleUnit_None,
+                          "GetIntrinsicSize should have reported no "
+                          "intrinsic height");
+        float val = height.GetAnimValInSpecifiedUnits() / 100.0f;
+        if (val < 0.0f) val = 0.0f;
+        intrinsicSize.height.SetCoordValue(val * aCBSize.height);
+      }
+    }
   }
 
   return nsLayoutUtils::ComputeSizeWithIntrinsicDimensions(
                             aRenderingContext, this,
-                            GetIntrinsicSize(), GetIntrinsicRatio(), aCBSize,
+                            intrinsicSize, GetIntrinsicRatio(), aCBSize,
                             aMargin, aBorder, aPadding);
 }
 
 NS_IMETHODIMP
 nsSVGOuterSVGFrame::Reflow(nsPresContext*           aPresContext,
                            nsHTMLReflowMetrics&     aDesiredSize,
                            const nsHTMLReflowState& aReflowState,
                            nsReflowStatus&          aStatus)
