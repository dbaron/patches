From: L. David Baron <dbaron@dbaron.org>

Remove notion of percentage intrinsic size:  remove the single case that (incorrectly) sets percentage intrinsic sizes.  (Bug 611099)

Needed to help CSS 2.1 meet Proposed Recommendation entrance criteria.

TODO: Needs adjustment of the following reftests:
layout/reftests/svg/as-image/img-novb-height-meet-1.html
layout/reftests/svg/as-image/img-novb-height-slice-1.html
layout/reftests/svg/as-image/img-novb-width-meet-1.html
layout/reftests/svg/as-image/img-novb-width-slice-1.html
layout/reftests/svg/svg-integration/clipPath-html-06.xhtml
layout/reftests/svg/svg-integration/clipPath-html-06-extref.xhtml
layout/reftests/svg/svg-integration/conditions-outer-svg-01.xhtml
layout/reftests/svg/svg-integration/conditions-outer-svg-02.xhtml
layout/reftests/svg/svg-integration/dynamic-conditions-outer-svg-01.xhtml
layout/reftests/svg/svg-integration/dynamic-conditions-outer-svg-02.xhtml
layout/reftests/svg/svg-integration/dynamic-conditions-outer-svg-03.xhtml
layout/reftests/svg/svg-integration/dynamic-conditions-outer-svg-04.xhtml
layout/reftests/svg/dynamic-rect-04.xhtml
layout/reftests/svg/svg-in-foreignObject-01.xhtml
layout/reftests/svg/svg-in-foreignObject-02.xhtml

diff --git a/layout/reftests/svg/sizing/dynamic--inline-resize-cb-height.xhtml b/layout/reftests/svg/sizing/dynamic--inline-resize-cb-height.xhtml
--- a/layout/reftests/svg/sizing/dynamic--inline-resize-cb-height.xhtml
+++ b/layout/reftests/svg/sizing/dynamic--inline-resize-cb-height.xhtml
@@ -17,17 +17,17 @@
     <style type="text/css">
 
 html, body, div {
   padding: 0;
   border: 0;
   margin: 0;
   width: 100%;
   height: 100%;  /* inline style override on the div below */
-  background: red;
+  background: white;
   overflow: hidden;
 }
 
     </style>
     <script type="text/javascript">
 
 function resize_div()
 {
@@ -39,14 +39,14 @@ function resize_div()
 document.addEventListener("MozReftestInvalidate", resize_div, false);
 
     </script>
   </head>
   <body>
 
     <div style="height:50%;">
       <svg xmlns="http://www.w3.org/2000/svg" width="5000" height="100%">
-        <rect width="100%" height="100%" fill="lime"/>
+        <rect width="100%" height="100%" fill="blue"/>
       </svg>
     </div>
 
   </body>
 </html>
diff --git a/layout/reftests/svg/sizing/dynamic--inline-resize-cb-width.xhtml b/layout/reftests/svg/sizing/dynamic--inline-resize-cb-width.xhtml
--- a/layout/reftests/svg/sizing/dynamic--inline-resize-cb-width.xhtml
+++ b/layout/reftests/svg/sizing/dynamic--inline-resize-cb-width.xhtml
@@ -17,17 +17,17 @@
     <style type="text/css">
 
 html, body, div {
   padding: 0;
   border: 0;
   margin: 0;
   width: 100%;  /* inline style override on the div below */
   height: 100%;
-  background: red;
+  background: white;
   overflow: hidden;
 }
 
     </style>
     <script type="text/javascript">
 
 function resize_div()
 {
@@ -39,14 +39,14 @@ function resize_div()
 document.addEventListener("MozReftestInvalidate", resize_div, false);
 
     </script>
   </head>
   <body>
 
     <div style="width:50%;">
       <svg xmlns="http://www.w3.org/2000/svg" width="100%" height="5000">
-        <rect width="100%" height="100%" fill="lime"/>
+        <rect width="100%" height="100%" fill="blue"/>
       </svg>
     </div>
 
   </body>
 </html>
diff --git a/layout/reftests/svg/sizing/dynamic--object--auto-auto--pct-px.html b/layout/reftests/svg/sizing/dynamic--object--auto-auto--pct-px.html
--- a/layout/reftests/svg/sizing/dynamic--object--auto-auto--pct-px.html
+++ b/layout/reftests/svg/sizing/dynamic--object--auto-auto--pct-px.html
@@ -5,20 +5,21 @@
 <html xmlns="http://www.w3.org/1999/xhtml">
   <head>
 
     <!-- From https://bugzilla.mozilla.org/show_bug.cgi?id=294086 -->
 
     <title>Test: width:auto; height:auto; width="49%" height="70px"</title>
 
     <!--
-    This testcase checks that the <object> element uses the intrinsic width and
-    height of the embedded SVG. Since the intrinsic width is 49% and the
-    intrinsic height is 70px, you should see a blue rectangle 49% wide by 70px
-    high when viewing this file. You should not see any red.
+    This testcase checks that the <object> element uses the intrinsic
+    height of the embedded SVG, but ignores the percentage width. Since
+    the intrinsic height is 70px, you should see a blue rectangle 300px
+    (the magic default) wide by 70px high when viewing this file. You
+    should not see any red.
     -->
 
     <style type="text/css">
 
 html, body {
   padding: 0;
   border: 0;
   margin: 0;
diff --git a/layout/reftests/svg/sizing/inline--position-absolute--02.xhtml b/layout/reftests/svg/sizing/inline--position-absolute--02.xhtml
--- a/layout/reftests/svg/sizing/inline--position-absolute--02.xhtml
+++ b/layout/reftests/svg/sizing/inline--position-absolute--02.xhtml
@@ -30,21 +30,21 @@ html, body {
   <body>
 
     <!-- create containing block for absolutely positioned children -->
     <div style="position:relative;">
 
       <!-- div to expand parent div to a computed height of 20px -->
       <div style="height:20px; background:red;"/>
 
-      <!-- absolutely positioned SVG - the implicity 100% percentage height
+      <!-- absolutely positioned SVG - the explicit 100% percentage height
            should compute as a percentage of the parent div's computed height,
            not as a percentage of the body's height! I.e. no red should show.
       -->
-      <svg xmlns="http://www.w3.org/2000/svg" style="position:absolute; top:0;">
+      <svg xmlns="http://www.w3.org/2000/svg" style="position:absolute; top:0; width: 100%; height: 100%">
         <rect width="100%" height="100%" fill="red"/>
         <rect width="100%" height="20px" fill="lime"/>
       </svg>
 
     </div>
 
   </body>
 </html>
diff --git a/layout/reftests/svg/sizing/object--auto-auto--0-pct--ref.html b/layout/reftests/svg/sizing/object--auto-auto--0-pct--ref.html
--- a/layout/reftests/svg/sizing/object--auto-auto--0-pct--ref.html
+++ b/layout/reftests/svg/sizing/object--auto-auto--0-pct--ref.html
@@ -21,17 +21,17 @@ html, body {
   overflow: hidden;
 }
 
 div {
   padding: 0;
   border: 1px solid blue;
   margin: 50px;
   width: 0;
-  height: 49%;
+  height: 150px;
 }
 
     </style>
   </head>
   <body>
     <div></div>
   </body>
 </html>
diff --git a/layout/reftests/svg/sizing/object--auto-auto--0-pct.html b/layout/reftests/svg/sizing/object--auto-auto--0-pct.html
--- a/layout/reftests/svg/sizing/object--auto-auto--0-pct.html
+++ b/layout/reftests/svg/sizing/object--auto-auto--0-pct.html
@@ -5,20 +5,21 @@
 <html xmlns="http://www.w3.org/1999/xhtml">
   <head>
 
     <!-- From https://bugzilla.mozilla.org/show_bug.cgi?id=294086 -->
 
     <title>Test: width:auto; height:auto; width="0" height="49%"</title>
 
     <!--
-    This testcase checks that the <object> element uses the intrinsic width and
-    height of the embedded SVG. Since the intrinsic width is zero and the
-    intrinsic height is 49%, you should see a 1px blue border around rectangle
-    0px wide by 49% high when viewing this file. You should not see any red.
+    This testcase checks that the <object> element uses the intrinsic
+    width of the embedded SVG but ignores the (percentage) height.
+    Since the intrinsic width is zero, you should see a 1px blue border
+    around rectangle 0px wide by 150px high when viewing this file. You
+    should not see any red.
     -->
 
     <style type="text/css">
 
 html, body {
   padding: 0;
   border: 0;
   margin: 0;
diff --git a/layout/reftests/svg/sizing/object--auto-auto--pct-0--ref.html b/layout/reftests/svg/sizing/object--auto-auto--pct-0--ref.html
--- a/layout/reftests/svg/sizing/object--auto-auto--pct-0--ref.html
+++ b/layout/reftests/svg/sizing/object--auto-auto--pct-0--ref.html
@@ -20,17 +20,17 @@ html, body {
   /* XXX Not sure why we get scrolling with 'div' but not 'object'. */
   overflow: hidden;
 }
 
 div {
   padding: 0;
   border: 1px solid blue;
   margin: 50px;
-  width: 49%;
+  width: 300px;
   height: 0;
 }
 
     </style>
   </head>
   <body>
     <div></div>
   </body>
diff --git a/layout/reftests/svg/sizing/object--auto-auto--pct-0.html b/layout/reftests/svg/sizing/object--auto-auto--pct-0.html
--- a/layout/reftests/svg/sizing/object--auto-auto--pct-0.html
+++ b/layout/reftests/svg/sizing/object--auto-auto--pct-0.html
@@ -5,21 +5,21 @@
 <html xmlns="http://www.w3.org/1999/xhtml">
   <head>
 
     <!-- From https://bugzilla.mozilla.org/show_bug.cgi?id=294086 -->
 
     <title>Test: width:auto; height:auto; width="49%" height="0"</title>
 
     <!--
-    This testcase checks that the <object> element uses the intrinsic width and
-    height of the embedded SVG. Since the intrinsic width is 49% and the
-    intrinsic height is zero, you should see a 1px blue border around a
-    rectangle 49% wide by 0px high when viewing this file. You should not see
-    any red.
+    This testcase checks that the <object> element uses the intrinsic
+    height of the embedded SVG, but ignores the percentage intrinsic
+    width. Since the intrinsic height is zero, you should see a 1px blue
+    border around a rectangle 300px wide by 0px high when viewing this
+    file. You should not see any red.
     -->
 
     <style type="text/css">
 
 html, body {
   padding: 0;
   border: 0;
   margin: 0;
diff --git a/layout/reftests/svg/sizing/reftest.list b/layout/reftests/svg/sizing/reftest.list
--- a/layout/reftests/svg/sizing/reftest.list
+++ b/layout/reftests/svg/sizing/reftest.list
@@ -298,15 +298,17 @@ random-if(Android) == object--auto-auto-
 # Assorted tests to check that dynamic changes work correctly
 #
 # Here we have an assortment of different tests to check that updates occur
 # correctly when changes are made that should result in a change in the size
 # or position of the SVG.
 
 == dynamic--inline-css-height.xhtml             pass.svg
 == dynamic--inline-css-width.xhtml              pass.svg
-== dynamic--inline-resize-cb-height.xhtml       pass.svg
-== dynamic--inline-resize-cb-width.xhtml        pass.svg
+# These two don't have a whole lot of point anymore now that the meaning
+# of percentages has changed.
+== dynamic--inline-resize-cb-height.xhtml       standalone-sanity-height-150px.svg
+== dynamic--inline-resize-cb-width.xhtml        standalone-sanity-width-300px.svg
 skip == dynamic--inline-resize-window-height.xhtml  pass.svg # XXX breaks the reftest run as the window height somehow is not restored
 skip == dynamic--inline-resize-window-width.xhtml    pass.svg # Fails way too much
 fails == dynamic--object-svg-unloaded.xhtml     pass.svg
 # == dynamic--object--auto-auto--pct-px.html 
 
diff --git a/layout/svg/base/src/nsSVGOuterSVGFrame.cpp b/layout/svg/base/src/nsSVGOuterSVGFrame.cpp
--- a/layout/svg/base/src/nsSVGOuterSVGFrame.cpp
+++ b/layout/svg/base/src/nsSVGOuterSVGFrame.cpp
@@ -243,31 +243,23 @@ nsSVGOuterSVGFrame::GetIntrinsicSize()
   // specified and we're embedded inside an nsIObjectLoadingContent.
 
   IntrinsicSize intrinsicSize;
 
   nsSVGSVGElement *content = static_cast<nsSVGSVGElement*>(mContent);
   nsSVGLength2 &width  = content->mLengthAttributes[nsSVGSVGElement::WIDTH];
   nsSVGLength2 &height = content->mLengthAttributes[nsSVGSVGElement::HEIGHT];
 
-  if (width.IsPercentage()) {
-    float val = width.GetAnimValInSpecifiedUnits() / 100.0f;
-    if (val < 0.0f) val = 0.0f;
-    intrinsicSize.width.SetPercentValue(val);
-  } else {
+  if (!width.IsPercentage()) {
     nscoord val = nsPresContext::CSSPixelsToAppUnits(width.GetAnimValue(content));
     if (val < 0) val = 0;
     intrinsicSize.width.SetCoordValue(val);
   }
 
-  if (height.IsPercentage()) {
-    float val = height.GetAnimValInSpecifiedUnits() / 100.0f;
-    if (val < 0.0f) val = 0.0f;
-    intrinsicSize.height.SetPercentValue(val);
-  } else {
+  if (!height.IsPercentage()) {
     nscoord val = nsPresContext::CSSPixelsToAppUnits(height.GetAnimValue(content));
     if (val < 0) val = 0;
     intrinsicSize.height.SetCoordValue(val);
   }
 
   return intrinsicSize;
 }
 
@@ -313,26 +305,60 @@ nsSVGOuterSVGFrame::GetIntrinsicRatio()
 /* virtual */ nsSize
 nsSVGOuterSVGFrame::ComputeSize(nsIRenderingContext *aRenderingContext,
                                 nsSize aCBSize, nscoord aAvailableWidth,
                                 nsSize aMargin, nsSize aBorder, nsSize aPadding,
                                 PRBool aShrinkWrap)
 {
   nsSVGSVGElement* content = static_cast<nsSVGSVGElement*>(mContent);
 
-  if ((content->HasValidViewbox() || content->ShouldSynthesizeViewBox()) &&
-      (IsRootOfImage() || IsRootOfReplacedElementSubDoc())) {
-    // The embedding element has done the replaced element sizing, using our
-    // intrinsic dimensions as necessary. We just need to fill the viewport.
-    return aCBSize;
+  IntrinsicSize intrinsicSize = GetIntrinsicSize();
+
+  if (!mContent->GetParent()) {
+    if (IsRootOfImage() || IsRootOfReplacedElementSubDoc()) {
+      if (content->HasValidViewbox() || content->ShouldSynthesizeViewBox()) {
+        // The embedding element has done the replaced element sizing,
+        // using our intrinsic dimensions as necessary. We just need to
+        // fill the viewport.
+        return aCBSize;
+      }
+    } else {
+      // We're the root of a browsing context, so we need to honor
+      // widths and heights in percentages.  (GetIntrinsicSize() doesn't
+      // report these since there's no such thing as a percentage
+      // intrinsic size.)
+      nsSVGLength2 &width =
+        content->mLengthAttributes[nsSVGSVGElement::WIDTH];
+      if (width.IsPercentage()) {
+        NS_ABORT_IF_FALSE(intrinsicSize.width.GetUnit() == eStyleUnit_None,
+                          "GetIntrinsicSize should have reported no "
+                          "intrinsic width");
+        float val = width.GetAnimValInSpecifiedUnits() / 100.0f;
+        if (val < 0.0f) val = 0.0f;
+        intrinsicSize.width.SetCoordValue(val * aCBSize.width);
+      }
+
+      nsSVGLength2 &height =
+        content->mLengthAttributes[nsSVGSVGElement::HEIGHT];
+      NS_ABORT_IF_FALSE(aCBSize.height != NS_AUTOHEIGHT,
+                        "root should not have auto-height containing block");
+      if (height.IsPercentage()) {
+        NS_ABORT_IF_FALSE(intrinsicSize.height.GetUnit() == eStyleUnit_None,
+                          "GetIntrinsicSize should have reported no "
+                          "intrinsic height");
+        float val = height.GetAnimValInSpecifiedUnits() / 100.0f;
+        if (val < 0.0f) val = 0.0f;
+        intrinsicSize.height.SetCoordValue(val * aCBSize.height);
+      }
+    }
   }
 
   return nsLayoutUtils::ComputeSizeWithIntrinsicDimensions(
                             aRenderingContext, this,
-                            GetIntrinsicSize(), GetIntrinsicRatio(), aCBSize,
+                            intrinsicSize, GetIntrinsicRatio(), aCBSize,
                             aMargin, aBorder, aPadding);
 }
 
 NS_IMETHODIMP
 nsSVGOuterSVGFrame::Reflow(nsPresContext*           aPresContext,
                            nsHTMLReflowMetrics&     aDesiredSize,
                            const nsHTMLReflowState& aReflowState,
                            nsReflowStatus&          aStatus)
diff --git a/parser/htmlparser/tests/reftest/bug577418-1.html b/parser/htmlparser/tests/reftest/bug577418-1.html
--- a/parser/htmlparser/tests/reftest/bug577418-1.html
+++ b/parser/htmlparser/tests/reftest/bug577418-1.html
@@ -1,12 +1,12 @@
 <!DOCTYPE html>
 <html style="width:100%;height:100%;margin:0;border:0;overflow:hidden">
 <body style="width:100%;height:100%;margin:0;border:0;overflow:hidden">
-<svg>
+<svg style="width:100%;height:100%">
  <rect height="100%" width="100%" fill="red"/>
    <foreignObject>
      <html>
        <body>
        </body>
      </html>
     </foreignObject>
   <rect height="100%" width="100%" fill="lime"/>
