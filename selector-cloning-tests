From: L. David Baron <dbaron@dbaron.org>

Add tests for selector serialization and cloning.

diff --git a/layout/style/test/test_selectors.html b/layout/style/test/test_selectors.html
--- a/layout/style/test/test_selectors.html
+++ b/layout/style/test/test_selectors.html
@@ -2,38 +2,37 @@
 <html>
 <head>
   <title>Test for CSS Selectors</title>
   <script type="text/javascript" src="/MochiKit/packed.js"></script>
   <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
 </head>
 <body onload="run()">
-<p id="display"><iframe id="iframe" src="about:blank"></iframe></p>
+<p id="display"><iframe id="iframe" src="about:blank"></iframe><iframe id="cloneiframe" src="about:blank"></iframe></p>
 <pre id="test">
 <script class="testbody" type="text/javascript">
 
 SimpleTest.waitForExplicitFinish();
 
+var cloneiframe;
+
 function run() {
 
     var iframe = document.getElementById("iframe");
     var ifwin = iframe.contentWindow;
     var ifdoc = iframe.contentDocument;
 
-    function setup_style() {
-        var style_elem = ifdoc.createElement("style");
-        style_elem.setAttribute("type", "text/css");
-        ifdoc.getElementsByTagName("head")[0].appendChild(style_elem);
-        var style_text = ifdoc.createTextNode("");
-        style_elem.appendChild(style_text);
-        return style_text;
-    }
+    cloneiframe = document.getElementById("cloneiframe");
 
-    var style_text = setup_style();
+    var style_elem = ifdoc.createElement("style");
+    style_elem.setAttribute("type", "text/css");
+    ifdoc.getElementsByTagName("head")[0].appendChild(style_elem);
+    var style_text = ifdoc.createTextNode("");
+    style_elem.appendChild(style_text);
 
     var gCounter = 0;
 
     /*
      * selector: the selector to test
      * body_contents: what to set the body's innerHTML to
      * match_fn: a function that, given the document object into which
      *   body_contents has been inserted, produces an array of nodes that
@@ -99,37 +98,82 @@ function run() {
         // But when we serialize the serialized result, we should get
         // the same text.
         var ser2 = style_text.parentNode.sheet.cssRules[idx].selectorText;
         is(ser2, ser1, "parse+serialize of selector \"" + selector +
                        "\" is idempotent");
 
         ifdoc.body.innerHTML = "";
         style_text.data = "";
+
+        // FIXME: And now test that when we clone the style sheet, we end up
+        // with the same selector (serializes to same string, and matches same
+        // things).
     }
 
     function should_serialize_to(selector, serialization)
     {
         style_text.data = selector + "{ z-index: 0 }";
         is(style_text.parentNode.sheet.cssRules[0].selectorText,
            serialization,
            "selector '" + selector + "' should serialize to '" +
              serialization + "'.");
     }
 
     function test_parseable(selector)
     {
+        ifdoc.body.innerHTML = "<p></p>";
+
         var zi = ++gCounter;
-        ifdoc.body.innerHTML = "<p></p>";
         style_text.data = "p, " + selector + "{ z-index: " + zi + " }";
         var should_match = ifdoc.getElementsByTagName("p")[0];
         is(ifwin.getComputedStyle(should_match, "").zIndex, zi,
            "selector " + selector + " was parsed");
+
+        // Test that it serializes to something that is also parseable.
+        var ser1 = style_elem.sheet.cssRules[0].selectorText;
+        zi = ++gCounter;
+        style_text.data = ser1 + "{ z-index: " + zi + " }";
+        is(ifwin.getComputedStyle(should_match, "").zIndex, zi,
+           "serialization " + ser1 + " of selector p, " + selector +
+           " was parsed");
+        var ser2 = style_elem.sheet.cssRules[0].selectorText;
+        is(ser2, ser1,
+           "parse+serialize of selector " + selector + " is idempotent");
+
         ifdoc.body.innerHTML = "";
         style_text.data = "";
+
+        // Test that it clones to the same thing it serializes to.
+        zi = ++gCounter;
+        var style_sheet = "data:text/css," +
+                          escape("p, " + selector + "{ z-index: " + zi + " }");
+        var style_sheet_link = "<link rel='stylesheet' href='" + style_sheet +
+                               "'>";
+                               
+        var html_doc = "<!DOCTYPE HTML>" +
+                       style_sheet_link + style_sheet_link +
+                       "<p></p>";
+        var docurl = "data:text/html," + escape(html_doc);
+
+        defer_clonedoc_tests(docurl, function() {
+            var clonedoc = cloneiframe.contentDocument;
+            var clonewin = cloneiframe.contentWindow;
+            var links = clonedoc.getElementsByTagName("link");
+            // cause a clone
+            links[1].sheet.insertRule("#nonexistent { color: purple}", 0);
+            // remove the uncloned sheet
+            links[0].parentNode.removeChild(links[0]);
+            should_match = clonedoc.getElementsByTagName("p")[0];
+            is(ifwin.getComputedStyle(should_match, "").zIndex, zi,
+               "selector " + selector + " was cloned correctly");
+            var ser3 = links[0].sheet.cssRules[1].selectorText;
+            is(ser3, ser1,
+               "selector " + selector + " serializes correctly after cloning");
+        })
     }
 
     function test_balanced_unparseable(selector)
     {
         var zi1 = ++gCounter;
         var zi2 = ++gCounter;
         ifdoc.body.innerHTML = "<p></p><div></div>";
         style_text.data = "p, " + selector + "{ z-index: " + zi1 + " }" +
@@ -508,18 +552,18 @@ function run() {
     test_selector_in_html("a", single_a, set_single, empty_set,
                           html_default_ns);
     test_selector_in_html("a", single_a, empty_set, set_single,
                           xul_default_ns);
     test_selector_in_html("*|a", single_a, set_single, empty_set,
                           xul_default_ns);
     test_selector_in_html("html|a", single_a, set_single, empty_set,
                           xul_default_ns + html_ns);
-	// Type selectors inside :not() bring in default namespaces, but
-	// non-type selectors don't.
+    // Type selectors inside :not() bring in default namespaces, but
+    // non-type selectors don't.
     test_selector_in_html("*|a:not(*)", single_a, set_single, empty_set,
                           xul_default_ns);
     test_selector_in_html("*|a:not(a)", single_a, set_single, empty_set,
                           xul_default_ns);
     test_selector_in_html("*|a:not(*|*)", single_a, empty_set, set_single,
                           xul_default_ns);
     test_selector_in_html("*|a:not(*|a)", single_a, empty_set, set_single,
                           xul_default_ns);
@@ -541,16 +585,44 @@ function run() {
                           xul_default_ns + html_ns);
     test_selector_in_html("html|a:not(|a)", single_a, set_single, empty_set,
                           xul_default_ns + html_ns);
     test_selector_in_html("html|a:not(*|*)", single_a, empty_set, set_single,
                           xul_default_ns + html_ns);
     test_selector_in_html("html|a:not(*|a)", single_a, empty_set, set_single,
                           xul_default_ns + html_ns);
 
-    SimpleTest.finish();
+    run_deferred_tests();
+}
+
+var deferred_tests = [];
+
+function defer_clonedoc_tests(docurl, onloadfunc)
+{
+    deferred_tests.push( { docurl: docurl, onloadfunc: onloadfunc } );
+}
+
+function run_deferred_tests()
+{
+    if (deferred_tests.length == 0) {
+        SimpleTest.finish();
+    }
+
+    cloneiframe.onload = deferred_tests_onload;
+    cloneiframe.src = deferred_tests[0].docurl;
+}
+
+function deferred_tests_onload(event)
+{
+    if (event.target != cloneiframe)
+        return;
+
+    deferred_tests[0].onloadfunc();
+    deferred_tests.shift();
+
+    run_deferred_tests();
 }
 
 </script>
 </pre>
 </body>
 </html>
 
