From: L. David Baron <dbaron@dbaron.org>

Bug 743392 - Serialize background-color at the beginning of the last item of the background shorthand.

This matches what Chrome and WebKit do for a single-item background
shorthand, per discussion on today's CSS teleconference.  (At least
Chrome has bugs for multiple-items.)

The added test fails without the patch and passes with the patch.

diff --git a/browser/devtools/styleinspector/test/browser_ruleview_pseudo-element_01.js b/browser/devtools/styleinspector/test/browser_ruleview_pseudo-element_01.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_pseudo-element_01.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_pseudo-element_01.js
@@ -162,17 +162,17 @@ function* testParagraph(inspector, view)
   let elementFirstLineRule = rules.firstLineRules[0];
   let elementFirstLineRuleView = [].filter.call(view.element.children[1].children, (e) => {
     return e._ruleEditor && e._ruleEditor.rule === elementFirstLineRule;
   })[0]._ruleEditor;
 
   is
   (
     convertTextPropsToString(elementFirstLineRule.textProps),
-    "background: none repeat scroll 0% 0% blue",
+    "background: blue none repeat scroll 0% 0%",
     "Paragraph first-line properties are correct"
   );
 
   let elementFirstLetterRule = rules.firstLetterRules[0];
   let elementFirstLetterRuleView = [].filter.call(view.element.children[1].children, (e) => {
     return e._ruleEditor && e._ruleEditor.rule === elementFirstLetterRule;
   })[0]._ruleEditor;
 
@@ -186,17 +186,17 @@ function* testParagraph(inspector, view)
   let elementSelectionRule = rules.selectionRules[0];
   let elementSelectionRuleView = [].filter.call(view.element.children[1].children, (e) => {
     return e._ruleEditor && e._ruleEditor.rule === elementSelectionRule;
   })[0]._ruleEditor;
 
   is
   (
     convertTextPropsToString(elementSelectionRule.textProps),
-    "color: white; background: none repeat scroll 0% 0% black",
+    "color: white; background: black none repeat scroll 0% 0%",
     "Paragraph first-letter properties are correct"
   );
 }
 
 function* testBody(inspector, view) {
   let {element, elementStyle} = yield testNode("body", inspector, view);
 
   let gutters = view.element.querySelectorAll(".theme-gutter");
@@ -239,9 +239,9 @@ function* assertPseudoElementRulesNumber
 function assertGutters(view) {
   let gutters = view.element.querySelectorAll(".theme-gutter");
   is (gutters.length, 3, "There are 3 gutter headings");
   is (gutters[0].textContent, "Pseudo-elements", "Gutter heading is correct");
   is (gutters[1].textContent, "This Element", "Gutter heading is correct");
   is (gutters[2].textContent, "Inherited from body", "Gutter heading is correct");
 
   return gutters;
-}
\ No newline at end of file
+}
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_refresh-on-attribute-change_02.js b/browser/devtools/styleinspector/test/browser_ruleview_refresh-on-attribute-change_02.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_refresh-on-attribute-change_02.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_refresh-on-attribute-change_02.js
@@ -91,24 +91,24 @@ function* testPropertyChange5(inspector,
 
   let rule = ruleView._elementStyle.rules[0];
   is(rule.editor.element.querySelectorAll(".ruleview-property").length, 4, "Added a property");
   validateTextProp(rule.textProps[3], true, "padding-left", "20px", "Padding property enabled");
 }
 
 function* testPropertyChange6(inspector, ruleView, testElement) {
   info("Add an entirely new property again");
-  yield changeElementStyle(testElement, "background: url(\"chrome://branding/content/about-logo.png\") repeat scroll 0% 0% red", inspector);
+  yield changeElementStyle(testElement, "background: red url(\"chrome://branding/content/about-logo.png\") repeat scroll 0% 0%", inspector);
 
   let rule = ruleView._elementStyle.rules[0];
   is(rule.editor.element.querySelectorAll(".ruleview-property").length, 5, "Added a property");
   validateTextProp(rule.textProps[4], true, "background",
-                   "url(\"chrome://branding/content/about-logo.png\") repeat scroll 0% 0% red",
+                   "red url(\"chrome://branding/content/about-logo.png\") repeat scroll 0% 0%",
                    "shortcut property correctly set",
-                   "url(\"chrome://branding/content/about-logo.png\") repeat scroll 0% 0% #F00");
+                   "#F00 url(\"chrome://branding/content/about-logo.png\") repeat scroll 0% 0%");
 }
 
 function* changeElementStyle(testElement, style, inspector) {
   let onRefreshed = inspector.once("rule-view-refreshed");
   testElement.setAttribute("style", style);
   yield onRefreshed;
 }
 
diff --git a/layout/style/Declaration.cpp b/layout/style/Declaration.cpp
--- a/layout/style/Declaration.cpp
+++ b/layout/style/Declaration.cpp
@@ -418,16 +418,23 @@ Declaration::GetValue(nsCSSProperty aPro
         GetListValue();
       const nsCSSValueList *origin =
         data->ValueFor(eCSSProperty_background_origin)->
         GetListValue();
       const nsCSSValuePairList *size =
         data->ValueFor(eCSSProperty_background_size)->
         GetPairListValue();
       for (;;) {
+        // Serialize background-color at the beginning of the last item.
+        if (!image->mNext) {
+          AppendValueToString(eCSSProperty_background_color, aValue,
+                              aSerialization);
+          aValue.Append(char16_t(' '));
+        }
+
         image->mValue.AppendToString(eCSSProperty_background_image, aValue,
                                      aSerialization);
         aValue.Append(char16_t(' '));
         repeat->mXValue.AppendToString(eCSSProperty_background_repeat, aValue,
                                        aSerialization);
         if (repeat->mYValue.GetUnit() != eCSSUnit_Null) {
           repeat->mYValue.AppendToString(eCSSProperty_background_repeat, aValue,
                                          aSerialization);
@@ -500,20 +507,16 @@ Declaration::GetValue(nsCSSProperty aPro
         if (!repeat || !attachment || !position || !clip || !origin || !size) {
           // Uneven length lists, so can't be serialized as shorthand.
           aValue.Truncate();
           return;
         }
         aValue.Append(char16_t(','));
         aValue.Append(char16_t(' '));
       }
-
-      aValue.Append(char16_t(' '));
-      AppendValueToString(eCSSProperty_background_color, aValue,
-                          aSerialization);
       break;
     }
     case eCSSProperty_font: {
       // systemFont might not be present; other values are guaranteed to be
       // available based on the shorthand check at the beginning of the
       // function, as long as the prop is enabled
       const nsCSSValue *systemFont =
         data->ValueFor(eCSSProperty__x_system_font);
diff --git a/layout/style/test/chrome/test_author_specified_style.html b/layout/style/test/chrome/test_author_specified_style.html
--- a/layout/style/test/chrome/test_author_specified_style.html
+++ b/layout/style/test/chrome/test_author_specified_style.html
@@ -18,29 +18,29 @@ var values = [
   "hsla(60,50%,50%,0.1250)", "hsla(60, 50%, 50%, 0.125)",
   "rgba(0,0,0,0)",           "rgba(0, 0, 0, 0)"
 ];
 
 var properties = [
   // property to test with  // fixed prefix to ignore from getAuthoredPropertyValue()
   "color",                  "",
   "background-color",       "",
-  "background",             "none repeat scroll 0% 0% "
+  "background",             " none repeat scroll 0% 0%"
 ];
 
 function runTest() {
   var span = document.createElement("span");
   for (var j = 0; j < properties.length; j += 2) {
     var propertyName = properties[j];
-    var expectedPrefix = properties[j + 1];
+    var expectedSuffix = properties[j + 1];
     for (var i = 0; i < values.length; i += 2) {
       var value = values[i];
       var expected = values[i + 1];
       span.setAttribute("style", propertyName + ": " + value);
-      is(span.style.getAuthoredPropertyValue(propertyName), expectedPrefix + expected, "specified " + value);
+      is(span.style.getAuthoredPropertyValue(propertyName), expected + expectedSuffix, "specified " + value);
     }
   }
 
   // also test a custom property
   span.setAttribute("style", "--color: rgb(10%,25%,99%)");
   is(span.style.getAuthoredPropertyValue("--color"), " rgb(10%,25%,99%)", "specified --color");
 
   SimpleTest.finish();
diff --git a/layout/style/test/test_shorthand_property_getters.html b/layout/style/test/test_shorthand_property_getters.html
--- a/layout/style/test/test_shorthand_property_getters.html
+++ b/layout/style/test/test_shorthand_property_getters.html
@@ -208,12 +208,24 @@ e.setAttribute("style", '-moz-border-lef
 is(e.style.cssText,
    '-moz-border-left-colors: fuchsia blue; border-left: medium solid green;',
    "border-left does NOT reset -moz-border-left-colors");
 e.setAttribute("style", '-moz-border-left-colors: fuchsia blue; border: medium solid green');
 is(e.style.cssText,
    'border: medium solid green;',
    "border DOES reset -moz-border-left-colors");
 
+// Test that the color goes at the beginning of the last item of the
+// background shorthand.
+// FIXME: Really the "repeat scroll 0% 0%" shouldn't be there.
+e.setAttribute("style", "background: url(foo.png) blue");
+is(e.style.cssText,
+   "background: blue url(\"foo.png\") repeat scroll 0% 0%;",
+   "color should be at start of single-item background");
+e.setAttribute("style", "background: url(bar.png), url(foo.png) blue");
+is(e.style.cssText,
+   "background: url(\"bar.png\") repeat scroll 0% 0%, blue url(\"foo.png\") repeat scroll 0% 0%;",
+   "color should be at start of single-item background");
+
 </script>
 </pre>
 </body>
 </html>
