Make nsTraceRefcnt use 64-bit counters when those counters are for all objects over app lifetime.  (Bug 483500)

diff --git a/xpcom/base/nsTraceRefcntImpl.cpp b/xpcom/base/nsTraceRefcntImpl.cpp
--- a/xpcom/base/nsTraceRefcntImpl.cpp
+++ b/xpcom/base/nsTraceRefcntImpl.cpp
@@ -122,20 +122,20 @@ static FILE *gCOMPtrLog = nsnull;
 
 struct serialNumberRecord {
   PRInt32 serialNumber;
   PRInt32 refCount;
   PRInt32 COMPtrCount;
 };
 
 struct nsTraceRefcntStats {
-  nsrefcnt mAddRefs;
-  nsrefcnt mReleases;
-  nsrefcnt mCreates;
-  nsrefcnt mDestroys;
+  PRUint64 mAddRefs;
+  PRUint64 mReleases;
+  PRUint64 mCreates;
+  PRUint64 mDestroys;
   double mRefsOutstandingTotal;
   double mRefsOutstandingSquared;
   double mObjsOutstandingTotal;
   double mObjsOutstandingSquared;
 };
 
   // I hope to turn this on for everybody once we hit it a little less.
 #define ASSERT_ACTIVITY_IS_LEGAL                                             \
@@ -258,23 +258,23 @@ public:
   }
 
   void Dtor() {
     mNewStats.mDestroys++;
     AccountObjs();
   }
 
   void AccountRefs() {
-    PRInt32 cnt = (mNewStats.mAddRefs - mNewStats.mReleases);
+    PRUint64 cnt = (mNewStats.mAddRefs - mNewStats.mReleases);
     mNewStats.mRefsOutstandingTotal += cnt;
     mNewStats.mRefsOutstandingSquared += cnt * cnt;
   }
 
   void AccountObjs() {
-    PRInt32 cnt = (mNewStats.mCreates - mNewStats.mDestroys);
+    PRUint64 cnt = (mNewStats.mCreates - mNewStats.mDestroys);
     mNewStats.mObjsOutstandingTotal += cnt;
     mNewStats.mObjsOutstandingSquared += cnt * cnt;
   }
 
   static PRIntn DumpEntry(PLHashEntry *he, PRIntn i, void *arg) {
     BloatEntry* entry = (BloatEntry*)he->value;
     if (entry) {
       entry->Accumulate();
@@ -295,19 +295,19 @@ public:
     total->mAllStats.mAddRefs += mNewStats.mAddRefs + mAllStats.mAddRefs;
     total->mAllStats.mReleases += mNewStats.mReleases + mAllStats.mReleases;
     total->mAllStats.mCreates += mNewStats.mCreates + mAllStats.mCreates;
     total->mAllStats.mDestroys += mNewStats.mDestroys + mAllStats.mDestroys;
     total->mAllStats.mRefsOutstandingTotal += mNewStats.mRefsOutstandingTotal + mAllStats.mRefsOutstandingTotal;
     total->mAllStats.mRefsOutstandingSquared += mNewStats.mRefsOutstandingSquared + mAllStats.mRefsOutstandingSquared;
     total->mAllStats.mObjsOutstandingTotal += mNewStats.mObjsOutstandingTotal + mAllStats.mObjsOutstandingTotal;
     total->mAllStats.mObjsOutstandingSquared += mNewStats.mObjsOutstandingSquared + mAllStats.mObjsOutstandingSquared;
-    PRInt32 count = (mNewStats.mCreates + mAllStats.mCreates);
+    PRUint64 count = (mNewStats.mCreates + mAllStats.mCreates);
     total->mClassSize += mClassSize * count;    // adjust for average in DumpTotal
-    total->mTotalLeaked += (PRInt32)(mClassSize *
+    total->mTotalLeaked += (PRUint64)(mClassSize *
                                      ((mNewStats.mCreates + mAllStats.mCreates)
                                       -(mNewStats.mDestroys + mAllStats.mDestroys)));
   }
 
   void DumpTotal(FILE* out) {
     mClassSize /= mAllStats.mCreates;
     Dump(-1, out, nsTraceRefcntImpl::ALL_STATS);
   }
@@ -356,37 +356,37 @@ public:
     if ((stats->mAddRefs - stats->mReleases) != 0 ||
         stats->mAddRefs != 0 ||
         meanRefs != 0 ||
         stddevRefs != 0 ||
         (stats->mCreates - stats->mDestroys) != 0 ||
         stats->mCreates != 0 ||
         meanObjs != 0 ||
         stddevObjs != 0) {
-      fprintf(out, "%4d %-40.40s %8d %8d %8d %8d (%8.2f +/- %8.2f) %8d %8d (%8.2f +/- %8.2f)\n",
+      fprintf(out, "%4d %-40.40s %8d %8llu %8llu %8llu (%8.2f +/- %8.2f) %8llu %8llu (%8.2f +/- %8.2f)\n",
               i+1, mClassName,
               (PRInt32)mClassSize,
               (nsCRT::strcmp(mClassName, "TOTAL"))
-                  ?(PRInt32)((stats->mCreates - stats->mDestroys) * mClassSize)
+                  ?(PRUint64)((stats->mCreates - stats->mDestroys) * mClassSize)
                   :mTotalLeaked,
               stats->mCreates,
               (stats->mCreates - stats->mDestroys),
               meanObjs,
               stddevObjs,
               stats->mAddRefs,
               (stats->mAddRefs - stats->mReleases),
               meanRefs,
               stddevRefs);
     }
   }
 
 protected:
   char*         mClassName;
   double        mClassSize;     // this is stored as a double because of the way we compute the avg class size for total bloat
-  PRInt32       mTotalLeaked; // used only for TOTAL entry
+  PRUint64      mTotalLeaked; // used only for TOTAL entry
   nsTraceRefcntStats mNewStats;
   nsTraceRefcntStats mAllStats;
 };
 
 static void
 BloatViewFreeEntry(void *pool, PLHashEntry *he, PRUintn flag)
 {
     if (flag == HT_FREE_ENTRY) {
