From: L. David Baron <dbaron@dbaron.org>

Get rid of (void) C-isms in nsStyleCoord.  (Bug 363249)

diff --git a/layout/style/nsStyleCoord.cpp b/layout/style/nsStyleCoord.cpp
--- a/layout/style/nsStyleCoord.cpp
+++ b/layout/style/nsStyleCoord.cpp
@@ -101,17 +101,17 @@ PRBool nsStyleCoord::operator==(const ns
     }
     else {
       return PRBool(mValue.mInt == aOther.mValue.mInt);
     }
   }
   return PR_FALSE;
 }
 
-void nsStyleCoord::Reset(void)
+void nsStyleCoord::Reset()
 {
   mUnit = eStyleUnit_Null;
   mValue.mInt = 0;
 }
 
 void nsStyleCoord::SetCoordValue(nscoord aValue)
 {
   mUnit = eStyleUnit_Coord;
@@ -152,29 +152,29 @@ void nsStyleCoord::SetAngleValue(float a
     mUnit = aUnit;
     mValue.mFloat = aValue;
   } else {
     NS_NOTREACHED("not an angle value");
     Reset();
   }
 }
 
-void nsStyleCoord::SetNormalValue(void)
+void nsStyleCoord::SetNormalValue()
 {
   mUnit = eStyleUnit_Normal;
   mValue.mInt = 0;
 }
 
-void nsStyleCoord::SetAutoValue(void)
+void nsStyleCoord::SetAutoValue()
 {
   mUnit = eStyleUnit_Auto;
   mValue.mInt = 0;
 }
 
-void nsStyleCoord::SetNoneValue(void)
+void nsStyleCoord::SetNoneValue()
 {
   mUnit = eStyleUnit_None;
   mValue.mInt = 0;
 }
 
 // accessors that are not inlined
 
 double
@@ -205,30 +205,30 @@ nsStyleCoord::GetAngleValueInRadians() c
   }                                                                           \
   else {                                                                      \
     if (mValues[i].mInt != aOther.mValues[i].mInt)                            \
       return PR_FALSE;                                                        \
   }                                                                           \
   PR_END_MACRO
 
 
-nsStyleSides::nsStyleSides(void)
+nsStyleSides::nsStyleSides()
 {
   memset(this, 0x00, sizeof(nsStyleSides));
 }
 
 PRBool nsStyleSides::operator==(const nsStyleSides& aOther) const
 {
   NS_FOR_CSS_SIDES(i) {
     COMPARE_INDEXED_COORD(i);
   }
   return PR_TRUE;
 }
 
-void nsStyleSides::Reset(void)
+void nsStyleSides::Reset()
 {
   memset(this, 0x00, sizeof(nsStyleSides));
 }
 
 nsStyleCorners::nsStyleCorners()
 {
   memset(this, 0x00, sizeof(nsStyleCorners));
 }
@@ -237,17 +237,17 @@ PRBool
 nsStyleCorners::operator==(const nsStyleCorners& aOther) const
 {
   NS_FOR_CSS_HALF_CORNERS(i) {
     COMPARE_INDEXED_COORD(i);
   }
   return PR_TRUE;
 }
 
-void nsStyleCorners::Reset(void)
+void nsStyleCorners::Reset()
 {
   memset(this, 0x00, sizeof(nsStyleCorners));
 }
 
 // Validation of NS_SIDE_IS_VERTICAL and NS_HALF_CORNER_IS_X.
 #define CASE(side, result)                                                    \
   PR_STATIC_ASSERT(NS_SIDE_IS_VERTICAL(side) == result)
 CASE(NS_SIDE_TOP,    PR_FALSE);
diff --git a/layout/style/nsStyleCoord.h b/layout/style/nsStyleCoord.h
--- a/layout/style/nsStyleCoord.h
+++ b/layout/style/nsStyleCoord.h
@@ -83,77 +83,77 @@ public:
   nsStyleCoord(float aValue, nsStyleUnit aUnit);
   inline nsStyleCoord(const nsStyleCoord& aCopy);
   inline nsStyleCoord(const nsStyleUnion& aValue, nsStyleUnit aUnit);
 
   nsStyleCoord&  operator=(const nsStyleCoord& aCopy);
   PRBool         operator==(const nsStyleCoord& aOther) const;
   PRBool         operator!=(const nsStyleCoord& aOther) const;
 
-  nsStyleUnit GetUnit(void) const {
+  nsStyleUnit GetUnit() const {
     NS_ASSERTION(mUnit != eStyleUnit_Null, "reading uninitialized value");
     return mUnit;
   }
 
-  PRBool IsAngleValue(void) const {
+  PRBool IsAngleValue() const {
     return eStyleUnit_Degree <= mUnit && mUnit <= eStyleUnit_Radian;
   }
 
-  nscoord     GetCoordValue(void) const;
-  PRInt32     GetIntValue(void) const;
-  float       GetPercentValue(void) const;
-  float       GetFactorValue(void) const;
-  float       GetAngleValue(void) const;
-  double      GetAngleValueInRadians(void) const;
+  nscoord     GetCoordValue() const;
+  PRInt32     GetIntValue() const;
+  float       GetPercentValue() const;
+  float       GetFactorValue() const;
+  float       GetAngleValue() const;
+  double      GetAngleValueInRadians() const;
   void        GetUnionValue(nsStyleUnion& aValue) const;
 
-  void  Reset(void);  // sets to null
+  void  Reset();  // sets to null
   void  SetCoordValue(nscoord aValue);
   void  SetIntValue(PRInt32 aValue, nsStyleUnit aUnit);
   void  SetPercentValue(float aValue);
   void  SetFactorValue(float aValue);
   void  SetAngleValue(float aValue, nsStyleUnit aUnit);
-  void  SetNormalValue(void);
-  void  SetAutoValue(void);
-  void  SetNoneValue(void);
+  void  SetNormalValue();
+  void  SetAutoValue();
+  void  SetNoneValue();
 
 public:
   nsStyleUnit   mUnit;
   nsStyleUnion  mValue;
 };
 
 
 /**
  * Class that represents a set of top/right/bottom/left nsStyleCoords.
  * This is commonly used to hold the widths of the borders, margins,
  * or paddings of a box.
  */
 class nsStyleSides {
 public:
-  nsStyleSides(void);
+  nsStyleSides();
 
 //  nsStyleSides&  operator=(const nsStyleSides& aCopy);  // use compiler's version
   PRBool         operator==(const nsStyleSides& aOther) const;
   PRBool         operator!=(const nsStyleSides& aOther) const;
 
   // aSide is always one of NS_SIDE_* defined in nsStyleConsts.h
 
   inline nsStyleUnit GetUnit(PRUint8 aSide) const;
-  inline nsStyleUnit GetLeftUnit(void) const;
-  inline nsStyleUnit GetTopUnit(void) const;
-  inline nsStyleUnit GetRightUnit(void) const;
-  inline nsStyleUnit GetBottomUnit(void) const;
+  inline nsStyleUnit GetLeftUnit() const;
+  inline nsStyleUnit GetTopUnit() const;
+  inline nsStyleUnit GetRightUnit() const;
+  inline nsStyleUnit GetBottomUnit() const;
 
   inline nsStyleCoord Get(PRUint8 aSide) const;
   inline nsStyleCoord GetLeft() const;
   inline nsStyleCoord GetTop() const;
   inline nsStyleCoord GetRight() const;
   inline nsStyleCoord GetBottom() const;
 
-  void  Reset(void);
+  void  Reset();
 
   inline void Set(PRUint8 aSide, const nsStyleCoord& aCoord);
   inline void SetLeft(const nsStyleCoord& aCoord);
   inline void SetTop(const nsStyleCoord& aCoord);
   inline void SetRight(const nsStyleCoord& aCoord);
   inline void SetBottom(const nsStyleCoord& aCoord);
 
 protected:
@@ -163,29 +163,29 @@ protected:
 
 /**
  * Class that represents a set of top-left/top-right/bottom-left/bottom-right
  * nsStyleCoord pairs.  This is used to hold the dimensions of the
  * corners of a box (for, e.g., border-radius and outline-radius).
  */
 class nsStyleCorners {
 public:
-  nsStyleCorners(void);
+  nsStyleCorners();
 
   // use compiler's version
   //nsStyleCorners&  operator=(const nsStyleCorners& aCopy);  
   PRBool         operator==(const nsStyleCorners& aOther) const;
   PRBool         operator!=(const nsStyleCorners& aOther) const;
 
   // aCorner is always one of NS_CORNER_* defined in nsStyleConsts.h
   inline nsStyleUnit GetUnit(PRUint8 aHalfCorner) const;
 
   inline nsStyleCoord Get(PRUint8 aHalfCorner) const;
 
-  void  Reset(void);
+  void  Reset();
 
   inline void Set(PRUint8 aHalfCorner, const nsStyleCoord& aCoord);
 
 protected:
   PRUint8       mUnits[8];
   nsStyleUnion  mValues[8];
 };
 
@@ -220,55 +220,55 @@ inline nsStyleCoord::nsStyleCoord(const 
 #endif
 }
 
 inline PRBool nsStyleCoord::operator!=(const nsStyleCoord& aOther) const
 {
   return !((*this) == aOther);
 }
 
-inline PRInt32 nsStyleCoord::GetCoordValue(void) const
+inline PRInt32 nsStyleCoord::GetCoordValue() const
 {
   NS_ASSERTION((mUnit == eStyleUnit_Coord), "not a coord value");
   if (mUnit == eStyleUnit_Coord) {
     return mValue.mInt;
   }
   return 0;
 }
 
-inline PRInt32 nsStyleCoord::GetIntValue(void) const
+inline PRInt32 nsStyleCoord::GetIntValue() const
 {
   NS_ASSERTION((mUnit == eStyleUnit_Enumerated) ||
                (mUnit == eStyleUnit_Integer), "not an int value");
   if ((mUnit == eStyleUnit_Enumerated) ||
       (mUnit == eStyleUnit_Integer)) {
     return mValue.mInt;
   }
   return 0;
 }
 
-inline float nsStyleCoord::GetPercentValue(void) const
+inline float nsStyleCoord::GetPercentValue() const
 {
   NS_ASSERTION(mUnit == eStyleUnit_Percent, "not a percent value");
   if (mUnit == eStyleUnit_Percent) {
     return mValue.mFloat;
   }
   return 0.0f;
 }
 
-inline float nsStyleCoord::GetFactorValue(void) const
+inline float nsStyleCoord::GetFactorValue() const
 {
   NS_ASSERTION(mUnit == eStyleUnit_Factor, "not a factor value");
   if (mUnit == eStyleUnit_Factor) {
     return mValue.mFloat;
   }
   return 0.0f;
 }
 
-inline float nsStyleCoord::GetAngleValue(void) const
+inline float nsStyleCoord::GetAngleValue() const
 {
   NS_ASSERTION(mUnit >= eStyleUnit_Degree &&
                mUnit <= eStyleUnit_Radian, "not an angle value");
   if (mUnit >= eStyleUnit_Degree && mUnit <= eStyleUnit_Radian) {
     return mValue.mFloat;
   }
   return 0.0f;
 }
@@ -286,32 +286,32 @@ inline PRBool nsStyleSides::operator!=(c
   return !((*this) == aOther);
 }
 
 inline nsStyleUnit nsStyleSides::GetUnit(PRUint8 aSide) const
 {
   return (nsStyleUnit)mUnits[aSide];
 }
 
-inline nsStyleUnit nsStyleSides::GetLeftUnit(void) const
+inline nsStyleUnit nsStyleSides::GetLeftUnit() const
 {
   return GetUnit(NS_SIDE_LEFT);
 }
 
-inline nsStyleUnit nsStyleSides::GetTopUnit(void) const
+inline nsStyleUnit nsStyleSides::GetTopUnit() const
 {
   return GetUnit(NS_SIDE_TOP);
 }
 
-inline nsStyleUnit nsStyleSides::GetRightUnit(void) const
+inline nsStyleUnit nsStyleSides::GetRightUnit() const
 {
   return GetUnit(NS_SIDE_RIGHT);
 }
 
-inline nsStyleUnit nsStyleSides::GetBottomUnit(void) const
+inline nsStyleUnit nsStyleSides::GetBottomUnit() const
 {
   return GetUnit(NS_SIDE_BOTTOM);
 }
 
 inline nsStyleCoord nsStyleSides::Get(PRUint8 aSide) const
 {
   return nsStyleCoord(mValues[aSide], nsStyleUnit(mUnits[aSide]));
 }
