From: Brian Hackett <bhackett1024@gmail.com>

Remove bogus assert.  (Bug 608980)

diff --git a/js/src/jit-test/tests/basic/bug608980.js b/js/src/jit-test/tests/basic/bug608980.js
new file mode 100644
--- /dev/null
+++ b/js/src/jit-test/tests/basic/bug608980.js
@@ -0,0 +1,11 @@
+
+/* Don't trip bogus assert. */
+
+function foo()
+{
+  var x;
+  while (x = 0) {
+    x = 1;
+  }
+}
+foo();
diff --git a/js/src/jsanalyze.cpp b/js/src/jsanalyze.cpp
--- a/js/src/jsanalyze.cpp
+++ b/js/src/jsanalyze.cpp
@@ -576,20 +576,24 @@ Script::analyze(JSContext *cx, JSScript 
             if (local < nfixed && !localDefined(local, offset))
                 setLocal(local, LOCAL_USE_BEFORE_DEF);
             break;
           }
 
           case JSOP_SETLOCAL:
           case JSOP_FORLOCAL: {
             uint32 local = GET_SLOTNO(pc);
-            JS_ASSERT_IF(local < nfixed &&
-                         locals[local] != LOCAL_CONDITIONALLY_DEFINED &&
-                         locals[local] != LOCAL_USE_BEFORE_DEF,
-                         locals[local] <= offset);
+
+            /*
+             * The local variable may already have been marked as unconditionally
+             * defined at a later point in the script, if that definition was in the
+             * condition for a loop which then jumped back here.  In such cases we
+             * will not treat the variable as ever being defined in the loop body
+             * (see setLocal).
+             */
             if (local < nfixed && locals[local] == LOCAL_CONDITIONALLY_DEFINED) {
                 if (forwardJump) {
                     /* Add this local to the variables defined after this bytecode. */
                     uint32 *newArray = ArenaArray<uint32>(pool, defineCount + 1);
                     if (!newArray) {
                         setOOM(cx);
                         return;
                     }
