From: L. David Baron <dbaron@dbaron.org>

Bug 841896:  Rename CSSKeyframesRule.insertRule to appendRule to match spec change.

Note that this does not change the IID of nsIDOMMozCSSKeyframesRule
since neither the method signature nor semantics have changed; only the
name is different.

diff --git a/dom/interfaces/css/nsIDOMMozCSSKeyframesRule.idl b/dom/interfaces/css/nsIDOMMozCSSKeyframesRule.idl
--- a/dom/interfaces/css/nsIDOMMozCSSKeyframesRule.idl
+++ b/dom/interfaces/css/nsIDOMMozCSSKeyframesRule.idl
@@ -6,12 +6,12 @@
 #include "nsIDOMCSSRule.idl"
 
 [scriptable, uuid(aa4ea11f-791b-4671-b192-b931e6539669)]
 interface nsIDOMMozCSSKeyframesRule : nsIDOMCSSRule
 {
            attribute DOMString         name;
   readonly attribute nsIDOMCSSRuleList cssRules;
 
-  void                     insertRule(in DOMString rule);
+  void                     appendRule(in DOMString rule);
   void                     deleteRule(in DOMString key);
   nsIDOMMozCSSKeyframeRule findRule(in DOMString key);
 };
diff --git a/layout/style/nsCSSRules.cpp b/layout/style/nsCSSRules.cpp
--- a/layout/style/nsCSSRules.cpp
+++ b/layout/style/nsCSSRules.cpp
@@ -2310,17 +2310,17 @@ nsCSSKeyframesRule::SetName(const nsAStr
 
 NS_IMETHODIMP
 nsCSSKeyframesRule::GetCssRules(nsIDOMCSSRuleList* *aRuleList)
 {
   return GroupRule::GetCssRules(aRuleList);
 }
 
 NS_IMETHODIMP
-nsCSSKeyframesRule::InsertRule(const nsAString& aRule)
+nsCSSKeyframesRule::AppendRule(const nsAString& aRule)
 {
   // The spec is confusing, and I think we should just append the rule,
   // which also turns out to match WebKit:
   // http://lists.w3.org/Archives/Public/www-style/2011Apr/0034.html
   nsCSSParser parser;
 
   // FIXME: pass filename and line number
   nsRefPtr<nsCSSKeyframeRule> rule =
diff --git a/layout/style/test/test_keyframes_rules.html b/layout/style/test/test_keyframes_rules.html
--- a/layout/style/test/test_keyframes_rules.html
+++ b/layout/style/test/test_keyframes_rules.html
@@ -114,21 +114,21 @@ is(bounce.cssRules.length, 4, "length of
 bounce.deleteRule("85%");
 is(bounce.cssRules.length, 4, "deleteRule should match all keys");
 bounce.deleteRule("85%, 75%");
 is(bounce.cssRules.length, 4, "deleteRule should match key list");
 bounce.deleteRule("75%  ,85%");
 is(bounce.cssRules.length, 3, "deleteRule should match keys in order, parsed");
 bounce.deleteRule("0%");
 is(bounce.cssRules.length, 2, "deleteRule should match keys in order, parsed");
-bounce.insertRule("from { color: blue }");
-is(bounce.cssRules.length, 3, "insertRule should append");
-is(bounce.cssRules[2].keyText, "0%", "insertRule should append");
-bounce.insertRule("from { color: blue }");
-is(bounce.cssRules.length, 4, "insertRule should append");
-is(bounce.cssRules[3].keyText, "0%", "insertRule should append");
-bounce.insertRule("from { color: blue } to { color: green }");
-is(bounce.cssRules.length, 4, "insertRule should ignore garbage at end");
+bounce.appendRule("from { color: blue }");
+is(bounce.cssRules.length, 3, "appendRule should append");
+is(bounce.cssRules[2].keyText, "0%", "appendRule should append");
+bounce.appendRule("from { color: blue }");
+is(bounce.cssRules.length, 4, "appendRule should append");
+is(bounce.cssRules[3].keyText, "0%", "appendRule should append");
+bounce.appendRule("from { color: blue } to { color: green }");
+is(bounce.cssRules.length, 4, "appendRule should ignore garbage at end");
 
 </script>
 </pre>
 </body>
 </html>
