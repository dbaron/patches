From: L. David Baron <dbaron@dbaron.org>

Bug 1087541 patch 1 - Make UpdateStyleAndEvents a method on CommonAnimationManager so that we can call it on both the animation manager and transition manager.

This really isn't a very good name anymore, but I'm not quite sure what
to call it.  Any ideas?

diff --git a/layout/style/AnimationCommon.h b/layout/style/AnimationCommon.h
--- a/layout/style/AnimationCommon.h
+++ b/layout/style/AnimationCommon.h
@@ -27,16 +27,21 @@ class nsIFrame;
 class nsPresContext;
 class nsStyleChangeList;
 
 namespace mozilla {
 
 class RestyleTracker;
 struct AnimationPlayerCollection;
 
+enum EnsureStyleRuleFlags {
+  EnsureStyleRule_IsThrottled,
+  EnsureStyleRule_IsNotThrottled
+};
+
 namespace css {
 
 bool IsGeometricProperty(nsCSSProperty aProperty);
 
 class CommonAnimationManager : public nsIStyleRuleProcessor,
                                public nsARefreshObserver {
 public:
   explicit CommonAnimationManager(nsPresContext *aPresContext);
@@ -66,16 +71,20 @@ public:
   // elements.
   void AddStyleUpdatesTo(mozilla::RestyleTracker& aTracker);
 
   enum FlushFlags {
     Can_Throttle,
     Cannot_Throttle
   };
 
+  virtual void UpdateStyleAndEvents(mozilla::AnimationPlayerCollection* aEA,
+                                    mozilla::TimeStamp aRefreshTime,
+                                    mozilla::EnsureStyleRuleFlags aFlags) = 0;
+
   static bool ExtractComputedValueForTransition(
                   nsCSSProperty aProperty,
                   nsStyleContext* aStyleContext,
                   mozilla::StyleAnimationValue& aComputedValue);
 protected:
   virtual ~CommonAnimationManager();
 
   // For ElementCollectionRemoved
@@ -138,21 +147,16 @@ private:
   InfallibleTArray<PropertyValuePair> mPropertyValuePairs;
 };
 
 } /* end css sub-namespace */
 
 typedef InfallibleTArray<nsRefPtr<dom::AnimationPlayer> >
   AnimationPlayerPtrArray;
 
-enum EnsureStyleRuleFlags {
-  EnsureStyleRule_IsThrottled,
-  EnsureStyleRule_IsNotThrottled
-};
-
 struct AnimationPlayerCollection : public PRCList
 {
   AnimationPlayerCollection(dom::Element *aElement, nsIAtom *aElementProperty,
                             mozilla::css::CommonAnimationManager *aManager)
     : mElement(aElement)
     , mElementProperty(aElementProperty)
     , mManager(aManager)
     , mAnimationGeneration(0)
diff --git a/layout/style/nsAnimationManager.h b/layout/style/nsAnimationManager.h
--- a/layout/style/nsAnimationManager.h
+++ b/layout/style/nsAnimationManager.h
@@ -164,19 +164,19 @@ public:
       if (aContent->GetProperty(nsGkAtoms::animationsProperty)) {
         return true;
       }
     } while ((aContent = aContent->GetParent()));
 
     return false;
   }
 
-  void UpdateStyleAndEvents(mozilla::AnimationPlayerCollection* aEA,
-                            mozilla::TimeStamp aRefreshTime,
-                            mozilla::EnsureStyleRuleFlags aFlags);
+  virtual void UpdateStyleAndEvents(mozilla::AnimationPlayerCollection* aEA,
+                                    mozilla::TimeStamp aRefreshTime,
+                                    mozilla::EnsureStyleRuleFlags aFlags) MOZ_OVERRIDE;
   void QueueEvents(mozilla::AnimationPlayerCollection* aEA,
                    mozilla::EventArray &aEventsToDispatch);
 
   // nsIStyleRuleProcessor (parts)
   virtual void RulesMatching(ElementRuleProcessorData* aData) MOZ_OVERRIDE;
   virtual void RulesMatching(PseudoElementRuleProcessorData* aData) MOZ_OVERRIDE;
   virtual void RulesMatching(AnonBoxRuleProcessorData* aData) MOZ_OVERRIDE;
 #ifdef MOZ_XUL
diff --git a/layout/style/nsTransitionManager.cpp b/layout/style/nsTransitionManager.cpp
--- a/layout/style/nsTransitionManager.cpp
+++ b/layout/style/nsTransitionManager.cpp
@@ -616,16 +616,25 @@ nsTransitionManager::GetElementTransitio
     }
 
     AddElementCollection(collection);
   }
 
   return collection;
 }
 
+void
+nsTransitionManager::UpdateStyleAndEvents(AnimationPlayerCollection*
+                                            aCollection,
+                                          TimeStamp aRefreshTime,
+                                          EnsureStyleRuleFlags aFlags)
+{
+  aCollection->EnsureStyleRuleFor(aRefreshTime, aFlags);
+}
+
 /*
  * nsIStyleRuleProcessor implementation
  */
 
 void
 nsTransitionManager::WalkTransitionRule(
   ElementDependentRuleProcessorData* aData,
   nsCSSPseudoElements::Type aPseudoType)
diff --git a/layout/style/nsTransitionManager.h b/layout/style/nsTransitionManager.h
--- a/layout/style/nsTransitionManager.h
+++ b/layout/style/nsTransitionManager.h
@@ -144,16 +144,19 @@ public:
 
   void FlushTransitions(FlushFlags aFlags);
 
   AnimationPlayerCollection* GetElementTransitions(
     mozilla::dom::Element *aElement,
     nsCSSPseudoElements::Type aPseudoType,
     bool aCreateIfNeeded);
 
+  virtual void UpdateStyleAndEvents(mozilla::AnimationPlayerCollection* aEA,
+                                    mozilla::TimeStamp aRefreshTime,
+                                    mozilla::EnsureStyleRuleFlags aFlags) MOZ_OVERRIDE;
 protected:
   virtual void ElementCollectionRemoved() MOZ_OVERRIDE;
   virtual void
   AddElementCollection(AnimationPlayerCollection* aCollection) MOZ_OVERRIDE;
 
 private:
   void
   ConsiderStartingTransition(nsCSSProperty aProperty,
