From: L. David Baron <dbaron@dbaron.org>

Fix GLX version check so it won't break when the version hits 1.10.  (Bug 605992)

diff --git a/gfx/thebes/GLContextProviderGLX.cpp b/gfx/thebes/GLContextProviderGLX.cpp
--- a/gfx/thebes/GLContextProviderGLX.cpp
+++ b/gfx/thebes/GLContextProviderGLX.cpp
@@ -58,17 +58,24 @@
 #include "gfxImageSurface.h"
 #include "gfxPlatform.h"
 
 namespace mozilla {
 namespace gl {
 
 static PRBool gIsATI = PR_FALSE;
 static PRBool gIsChromium = PR_FALSE;
-static int gGLXVersion = 0;
+static int gGLXMajorVersion = 0, gGLXMinorVersion = 0;
+
+static inline bool
+GLXVersionCheck(int aMajor, int aMinor)
+{
+    return aMajor > gGLXMajorVersion ||
+           (aMajor == gGLXMajorVersion && aMinor >= gGLXMinorVersion);
+}
 
 static bool HasExtension(const char* aExtensions, const char* aRequiredExtension)
 {
     // aExtensions is a space-separated list of extension names (which do
     // not contain spaces
     NS_ASSERTION(strchr(aRequiredExtension, ' ') == 0,
                  "extension names must not have spaces");
 
@@ -109,21 +116,21 @@ GLXLibrary::EnsureInitialized()
         }
     }
 
     LibrarySymbolLoader::SymLoadStruct symbols[] = {
         /* functions that were in GLX 1.0 */
         { (PRFuncPtr*) &xDestroyContext, { "glXDestroyContext", NULL } },
         { (PRFuncPtr*) &xMakeCurrent, { "glXMakeCurrent", NULL } },
         { (PRFuncPtr*) &xSwapBuffers, { "glXSwapBuffers", NULL } },
+        { (PRFuncPtr*) &xQueryVersion, { "glXQueryVersion", NULL } },
         { (PRFuncPtr*) &xGetCurrentContext, { "glXGetCurrentContext", NULL } },
         /* functions introduced in GLX 1.1 */
         { (PRFuncPtr*) &xQueryExtensionsString, { "glXQueryExtensionsString", NULL } },
         { (PRFuncPtr*) &xQueryServerString, { "glXQueryServerString", NULL } },
-        { (PRFuncPtr*) &xGetClientString, { "glXGetClientString", NULL } },
         { NULL, { NULL } }
     };
 
     LibrarySymbolLoader::SymLoadStruct symbols13[] = {
         /* functions introduced in GLX 1.3 */
         { (PRFuncPtr*) &xChooseFBConfig, { "glXChooseFBConfig", NULL } },
         { (PRFuncPtr*) &xGetFBConfigAttrib, { "glXGetFBConfigAttrib", NULL } },
         { (PRFuncPtr*) &xGetFBConfigs, { "glXGetFBConfigs", NULL } },
@@ -164,78 +171,66 @@ GLXLibrary::EnsureInitialized()
 
     if (!LibrarySymbolLoader::LoadSymbols(mOGLLibrary, &symbols[0])) {
         NS_WARNING("Couldn't find required entry point in OpenGL shared library");
         return PR_FALSE;
     }
 
     Display *display = DefaultXDisplay();
     int screen = DefaultScreen(display);
+    if (!xQueryVersion(display, &gGLXMajorVersion, &gGLXMinorVersion)) {
+        gGLXMajorVersion = 0;
+        gGLXMinorVersion = 0;
+        return PR_FALSE;
+    }
+
     const char *vendor = xQueryServerString(display, screen, GLX_VENDOR);
     const char *serverVersionStr = xQueryServerString(display, screen, GLX_VERSION);
-    const char *clientVersionStr = xGetClientString(display, GLX_VERSION);
 
-    int serverVersion = 0, clientVersion = 0;
-    if (serverVersionStr &&
-        strlen(serverVersionStr) >= 3 &&
-        serverVersionStr[1] == '.')
-    {
-        serverVersion = (serverVersionStr[0] - '0') << 8 | (serverVersionStr[2] - '0');
-    }
-
-    if (clientVersionStr &&
-        strlen(clientVersionStr) >= 3 &&
-        clientVersionStr[1] == '.')
-    {
-        clientVersion = (clientVersionStr[0] - '0') << 8 | (clientVersionStr[2] - '0');
-    }
-
-    gGLXVersion = PR_MIN(clientVersion, serverVersion);
-
-    if (gGLXVersion < 0x0101)
+    if (!GLXVersionCheck(1, 1))
         // Not possible to query for extensions.
         return PR_FALSE;
 
     const char *extensionsStr = xQueryExtensionsString(display, screen);
 
     LibrarySymbolLoader::SymLoadStruct *sym13;
-    if (gGLXVersion < 0x0103) {
+    if (!GLXVersionCheck(1, 3)) {
         // Even if we don't have 1.3, we might have equivalent extensions
         // (as on the Intel X server).
         if (!HasExtension(extensionsStr, "GLX_SGIX_fbconfig")) {
             return PR_FALSE;
         }
         sym13 = symbols13_ext;
     } else {
         sym13 = symbols13;
     }
     if (!LibrarySymbolLoader::LoadSymbols(mOGLLibrary, sym13)) {
         NS_WARNING("Couldn't find required entry point in OpenGL shared library");
         return PR_FALSE;
     }
 
     LibrarySymbolLoader::SymLoadStruct *sym14;
-    if (gGLXVersion < 0x0104) {
+    if (!GLXVersionCheck(1, 4)) {
         // Even if we don't have 1.4, we might have equivalent extensions
         // (as on the Intel X server).
         if (!HasExtension(extensionsStr, "GLX_ARB_get_proc_address")) {
             return PR_FALSE;
         }
         sym14 = symbols14_ext;
     } else {
         sym14 = symbols14;
     }
     if (!LibrarySymbolLoader::LoadSymbols(mOGLLibrary, sym14)) {
         NS_WARNING("Couldn't find required entry point in OpenGL shared library");
         return PR_FALSE;
     }
 
     gIsATI = vendor && DoesVendorStringMatch(vendor, "ATI");
     gIsChromium = (vendor && DoesVendorStringMatch(vendor, "Chromium")) ||
-        (serverVersion && DoesVendorStringMatch(serverVersionStr, "Chromium"));
+        (serverVersionStr && DoesVendorStringMatch(serverVersionStr, "Chromium"));
 
     mInitialized = PR_TRUE;
     return PR_TRUE;
 }
 
 GLXLibrary sGLXLibrary;
 
 static bool ctxErrorOccurred = false;
@@ -522,17 +517,17 @@ GLContextProviderGLX::CreateForWindow(ns
     // is a relatively safe intermediate step.
 
     Display *display = (Display*)aWidget->GetNativeData(NS_NATIVE_DISPLAY); 
     int xscreen = DefaultScreen(display);
     Window window = GET_NATIVE_WINDOW(aWidget);
 
     int numConfigs;
     ScopedXFree<GLXFBConfig> cfgs;
-    if (gIsATI || gGLXVersion < 0x0103) {
+    if (gIsATI || !GLXVersionCheck(1, 3)) {
         const int attribs[] = {
             GLX_DOUBLEBUFFER, False,
             0
         };
         cfgs = sGLXLibrary.xChooseFBConfig(display,
                                            xscreen,
                                            attribs,
                                            &numConfigs);
diff --git a/gfx/thebes/GLXLibrary.h b/gfx/thebes/GLXLibrary.h
--- a/gfx/thebes/GLXLibrary.h
+++ b/gfx/thebes/GLXLibrary.h
@@ -96,24 +96,25 @@ public:
     typedef GLXPixmap (GLAPIENTRY * PFNGLXCREATEPIXMAP) (Display *,
                                                          GLXFBConfig,
                                                          Pixmap,
                                                          const int *);
     PFNGLXCREATEPIXMAP xCreatePixmap;
     typedef void (GLAPIENTRY * PFNGLXDESTROYPIXMAP) (Display *,
                                                      GLXPixmap);
     PFNGLXDESTROYPIXMAP xDestroyPixmap;
-    typedef const char * (GLAPIENTRY * PFNGLXGETCLIENTSTRING) (Display *,
-                                                               int);
-    PFNGLXGETCLIENTSTRING xGetClientString;
     typedef GLXContext (GLAPIENTRY * PFNGLXCREATECONTEXT) (Display *,
                                                            XVisualInfo *,
                                                            GLXContext,
                                                            Bool);
     PFNGLXCREATECONTEXT xCreateContext;
+    typedef Bool (GLAPIENTRY * PFNGLXQUERYVERSION) (Display *,
+                                                    int *,
+                                                    int *);
+    PFNGLXQUERYVERSION xQueryVersion;
 
     PRBool EnsureInitialized();
 
 private:
     PRBool mInitialized;
     PRBool mTriedInitializing;
     PRLibrary *mOGLLibrary;
 };
