From: L. David Baron <dbaron@dbaron.org>

Bug 976364:  Make 'perspective' create a stacking context.

While it seems a little silly since 'perspective' doesn't require
atomicity (rather, it adds an additional transformation to any 3-D
descendants, which already require atomicity), the spec requires it, and
it matches WebKit.

diff --git a/layout/generic/nsFrame.cpp b/layout/generic/nsFrame.cpp
--- a/layout/generic/nsFrame.cpp
+++ b/layout/generic/nsFrame.cpp
@@ -2175,16 +2175,19 @@ nsIFrame::BuildDisplayListForChild(nsDis
     return;
 
   // Child is composited if it's transformed, partially transparent, or has
   // SVG effects or a blend mode..
   const nsStyleDisplay* disp = child->StyleDisplay();
   const nsStylePosition* pos = child->StylePosition();
   bool isVisuallyAtomic = child->HasOpacity()
     || child->IsTransformed()
+    // strictly speaking, 'perspective' doesn't require visual atomicity,
+    // but the spec says it acts like the rest of these
+    || disp->mChildPerspective.GetUnit() == eStyleUnit_Coord
     || disp->mMixBlendMode != NS_STYLE_BLEND_NORMAL
     || nsSVGIntegrationUtils::UsingEffectsForFrame(child);
 
   bool isPositioned = disp->IsPositioned(child);
   bool isStackingContext =
     (isPositioned && (disp->mPosition == NS_STYLE_POSITION_STICKY ||
                       pos->mZIndex.GetUnit() == eStyleUnit_Integer)) ||
      (disp->mWillChangeBitField & NS_STYLE_WILL_CHANGE_STACKING_CONTEXT) ||
diff --git a/layout/reftests/z-index/reftest.list b/layout/reftests/z-index/reftest.list
--- a/layout/reftests/z-index/reftest.list
+++ b/layout/reftests/z-index/reftest.list
@@ -1,2 +1,4 @@
 == 480053-1.html 480053-1-ref.html
 == z-index-1.html z-index-1-ref.html
+!= stacking-context-yes.html stacking-context-no.html
+== stacking-context-perspective.html stacking-context-yes.html
diff --git a/layout/reftests/z-index/stacking-context-common.css b/layout/reftests/z-index/stacking-context-common.css
new file mode 100644
--- /dev/null
+++ b/layout/reftests/z-index/stacking-context-common.css
@@ -0,0 +1,26 @@
+.contain, .maybesc {
+  width: 100px;
+  height: 100px;
+}
+.contain, .maybesc {
+  position: relative;
+}
+.inner1, .inner3, .intruder {
+  position: absolute;
+  top: 0; left: 0; bottom: 0; right: 0;
+}
+.inner1 {
+  left: 5px; right: 30px;
+  background: rgba(0, 255, 255, 0.5); /* aqua */
+  z-index: 1;
+}
+.inner3 {
+  left: 30px; right: 5px;
+  background: rgba(255, 255, 0, 0.5); /* yellow */
+  z-index: 3;
+}
+.intruder {
+  top: 20px; bottom: 20px;
+  background: rgba(255, 0, 255, 0.5); /* fuchsia */
+  z-index: 2;
+}
diff --git a/layout/reftests/z-index/stacking-context-no.html b/layout/reftests/z-index/stacking-context-no.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/z-index/stacking-context-no.html
@@ -0,0 +1,11 @@
+<!DOCTYPE HTML>
+<meta charset="UTF-8">
+<title>Reference for things that do not create a stacking context</title>
+<link rel="stylesheet" href="stacking-context-common.css">
+<div class="contain">
+  <div class="maybesc">
+    <div class="inner1"></div>
+    <div class="inner3"></div>
+  </div>
+  <div class="intruder"></div>
+</div>
diff --git a/layout/reftests/z-index/stacking-context-perspective.html b/layout/reftests/z-index/stacking-context-perspective.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/z-index/stacking-context-perspective.html
@@ -0,0 +1,17 @@
+<!DOCTYPE HTML>
+<meta charset="UTF-8">
+<title>Does 'perspective' create a stacking context?</title>
+<link rel="stylesheet" href="stacking-context-common.css">
+<style>
+.perspective {
+  -webkit-perspective: 200px;
+  perspective: 200px;
+}
+</style>
+<div class="contain">
+  <div class="maybesc perspective">
+    <div class="inner1"></div>
+    <div class="inner3"></div>
+  </div>
+  <div class="intruder"></div>
+</div>
diff --git a/layout/reftests/z-index/stacking-context-yes.html b/layout/reftests/z-index/stacking-context-yes.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/z-index/stacking-context-yes.html
@@ -0,0 +1,16 @@
+<!DOCTYPE HTML>
+<meta charset="UTF-8">
+<title>Reference for things that create a stacking context</title>
+<link rel="stylesheet" href="stacking-context-common.css">
+<style>
+.sc {
+  z-index: 0;
+}
+</style>
+<div class="contain">
+  <div class="maybesc sc">
+    <div class="inner1"></div>
+    <div class="inner3"></div>
+  </div>
+  <div class="intruder"></div>
+</div>
