Fix setting of prereqs so it doesn't interfere with testing initial values properly.

diff --git a/layout/style/test/test_initial_computation.html b/layout/style/test/test_initial_computation.html
--- a/layout/style/test/test_initial_computation.html
+++ b/layout/style/test/test_initial_computation.html
@@ -114,7 +114,6 @@ var gBrokenInitial = {
   "background-color": true,
   "background-image": true,
   "background-repeat": true,
-  // XXX Why aren't the border-width values failing, etc.?
   "border-bottom-color": true,
   "border-collapse": true,
   "border-color": true,
@@ -153,6 +152,7 @@ var gBrokenInitial = {
   "outline-color": true, // XXX Why didn't this fail until I added the if (info.inherited) checks?
   "outline-offset": true,
   "outline-style": true,
+  "outline-width": true,
   "overflow": true,
   "padding": true,
   "padding-bottom": true,
@@ -220,7 +220,7 @@ function test_property(property)
   if ("prerequisites" in info) {
     var prereqs = info.prerequisites;
     for (var prereq in prereqs) {
-      gElement.style.setProperty(prereq, prereqs[prereq], "");
+      gRule1.style.setProperty(prereq, prereqs[prereq], "");
       gInitialPrereqsRule.style.setProperty(prereq, prereqs[prereq], "");
     }
   }
@@ -235,6 +235,14 @@ function test_property(property)
         other_computed, initial_computed,
         "should be testing with values that compute to different things " +
         "for '" + property + "'");
+  // It's important (given the current design of nsRuleNode) that we're
+  // modifying the most specific rule that matches the element, and that
+  // we've already requested style while that rule was empty.  This
+  // means we'll have a cached aStartStruct from the parent in the rule
+  // tree (caching the "other" value), so we'll make sure we don't get
+  // the initial value from the luck of default-initialization.
+  // This means that it's important that we set the prereqs on
+  // gRule1.style rather than on gElement.style.
   gRule2.style.setProperty(property, "-moz-initial", "");
   var initial_val_computed = get_computed_value(getComputedStyle(gElement, ""), property);
   (xfail_initial(property) ? todo_is : is)(
@@ -246,7 +254,7 @@ function test_property(property)
   if ("prerequisites" in info) {
     var prereqs = info.prerequisites;
     for (var prereq in prereqs) {
-      gElement.style.removeProperty(prereq);
+      gRule1.style.removeProperty(prereq);
       gInitialPrereqsRule.style.removeProperty(prereq);
     }
   }
diff --git a/layout/style/test/test_value_computation.html b/layout/style/test/test_value_computation.html
--- a/layout/style/test/test_value_computation.html
+++ b/layout/style/test/test_value_computation.html
@@ -201,7 +201,7 @@ function test_value(property, val, is_in
   if ("prerequisites" in info) {
     var prereqs = info.prerequisites;
     for (var prereq in prereqs) {
-      gElement.style.setProperty(prereq, prereqs[prereq], "");
+      gRule1.style.setProperty(prereq, prereqs[prereq], "");
       gInitialPrereqsRule.style.setProperty(prereq, prereqs[prereq], "");
     }
   }
@@ -218,6 +218,15 @@ function test_value(property, val, is_in
           "should be testing with values that compute to different things " +
           "for '" + property + "'");
   }
+  // It's important for values that are supposed to compute to the
+  // initial value (given the current design of nsRuleNode) that we're
+  // modifying the most specific rule that matches the element, and that
+  // we've already requested style while that rule was empty.  This
+  // means we'll have a cached aStartStruct from the parent in the rule
+  // tree (caching the "other" value), so we'll make sure we don't get
+  // the initial value from the luck of default-initialization.
+  // This means that it's important that we set the prereqs on
+  // gRule1.style rather than on gElement.style.
   gRule2.style.setProperty(property, val, "");
   var val_computed = get_computed_value(getComputedStyle(gElement, ""), property);
   if (is_initial) {
@@ -236,7 +245,7 @@ function test_value(property, val, is_in
   if ("prerequisites" in info) {
     var prereqs = info.prerequisites;
     for (var prereq in prereqs) {
-      gElement.style.removeProperty(prereq);
+      gRule1.style.removeProperty(prereq);
       gInitialPrereqsRule.style.removeProperty(prereq);
     }
   }
