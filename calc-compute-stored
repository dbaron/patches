From: L. David Baron <dbaron@dbaron.org>

Add API to compute stored calc() expressions.  (Bug 363249)

diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -441,16 +441,54 @@ struct SpecifiedToComputedCalcOps :
 static void
 SpecifiedCalcToComputedCalc(const nsCSSValue& aValue, nsStyleCoord& aCoord, 
                             nsStyleContext* aStyleContext,
                             PRBool& aCanStoreInRuleTree)
 {
   // FIXME: WRITE ME
 }
 
+// FIXME: Need to clamp nscoords resulting from arithmetic ops.
+struct ComputeComputedCalcCalcOps :
+           public mozilla::css::BasicCoordCalcOps,
+           public mozilla::css::NumbersAlreadyNormalizedOps
+{
+  struct ComputeData {
+    nscoord mPercentageBasis;
+
+    ComputeData(nscoord aPercentageBasis)
+      : mPercentageBasis(aPercentageBasis)
+    {
+    }
+  };
+
+  static result_type ComputeLeafValue(const nsStyleCoord& aValue,
+                                      const ComputeData& aClosure)
+  {
+    nscoord result;
+    if (aValue.GetUnit() == eStyleUnit_Percent) {
+      result = NSToCoordFloorClamped(aValue.GetPercentValue() *
+                                     aClosure.mPercentageBasis);
+    } else {
+      result = aValue.GetCoordValue();
+    }
+    return result;
+  }
+};
+
+// This is our public API for handling calc() expressions that involve
+// percentages.
+/* static */ nscoord
+nsRuleNode::ComputeComputedCalc(const nsCSSValue& aValue,
+                                nscoord aPercentageBasis)
+{
+  ComputeComputedCalcCalcOps::ComputeData data(aPercentageBasis);
+  return mozilla::css::ComputeCalc<ComputeComputedCalcCalcOps>(aValue, data);
+}
+
 #define SETCOORD_NORMAL                 0x01   // N
 #define SETCOORD_AUTO                   0x02   // A
 #define SETCOORD_INHERIT                0x04   // H
 #define SETCOORD_PERCENT                0x08   // P
 #define SETCOORD_FACTOR                 0x10   // F
 #define SETCOORD_LENGTH                 0x20   // L
 #define SETCOORD_INTEGER                0x40   // I
 #define SETCOORD_ENUMERATED             0x80   // E
diff --git a/layout/style/nsRuleNode.h b/layout/style/nsRuleNode.h
--- a/layout/style/nsRuleNode.h
+++ b/layout/style/nsRuleNode.h
@@ -751,16 +751,22 @@ public:
   static nscoord CalcLengthWithInitialFont(nsPresContext* aPresContext,
                                            const nsCSSValue& aValue);
   // Expose this so nsTransformFunctions can use it.
   static nscoord CalcLength(const nsCSSValue& aValue,
                             nsStyleContext* aStyleContext,
                             nsPresContext* aPresContext,
                             PRBool& aCanStoreInRuleTree);
 
+  // Compute the value of an nsStyleCoord that IsCalcUnit().
+  // (Values that don't require aPercentageBasis should be handled
+  // inside nsRuleNode rather than through this API.)
+  static nscoord ComputeComputedCalc(const nsStyleCoord& aCoord,
+                                     nscoord aPercentageBasis);
+
   // Return whether the rule tree for which this node is the root has
   // cached data such that we need to do dynamic change handling for
   // changes that change the results of media queries or require
   // rebuilding all style data.
   PRBool TreeHasCachedData() const {
     NS_ASSERTION(IsRoot(), "should only be called on root of rule tree");
     return HaveChildren() || mStyleData.mInheritedData || mStyleData.mResetData;
   }
