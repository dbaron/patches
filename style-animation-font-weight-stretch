From: L. David Baron <dbaron@dbaron.org>

Add support for animation of font-weight and font-stretch.

diff --git a/layout/style/nsCSSPropList.h b/layout/style/nsCSSPropList.h
--- a/layout/style/nsCSSPropList.h
+++ b/layout/style/nsCSSPropList.h
@@ -1458,18 +1458,18 @@ CSS_PROP_FONT(
     font-stretch,
     font_stretch,
     FontStretch,
     CSS_PROPERTY_APPLIES_TO_FIRST_LETTER_AND_FIRST_LINE,
     Font,
     mStretch,
     eCSSType_Value,
     kFontStretchKTable,
-    CSS_PROP_NO_OFFSET,
-    eStyleAnimType_None)
+    offsetof(nsStyleFont, mFont.stretch),
+    eStyleAnimType_Custom)
 CSS_PROP_FONT(
     font-style,
     font_style,
     FontStyle,
     CSS_PROPERTY_APPLIES_TO_FIRST_LETTER_AND_FIRST_LINE,
     Font,
     mStyle,
     eCSSType_Value,
@@ -1491,18 +1491,18 @@ CSS_PROP_FONT(
     font-weight,
     font_weight,
     FontWeight,
     CSS_PROPERTY_APPLIES_TO_FIRST_LETTER_AND_FIRST_LINE,
     Font,
     mWeight,
     eCSSType_Value,
     kFontWeightKTable,
-    CSS_PROP_NO_OFFSET,
-    eStyleAnimType_None)
+    offsetof(nsStyleFont, mFont.weight),
+    eStyleAnimType_Custom)
 CSS_PROP_UIRESET(
     -moz-force-broken-image-icon,
     force_broken_image_icon,
     MozForceBrokenImageIcon,
     0,
     UserInterface,
     mForceBrokenImageIcon,
     eCSSType_Value,
diff --git a/layout/style/nsStyleAnimation.cpp b/layout/style/nsStyleAnimation.cpp
--- a/layout/style/nsStyleAnimation.cpp
+++ b/layout/style/nsStyleAnimation.cpp
@@ -124,17 +124,28 @@ nsStyleAnimation::ComputeDistance(nsCSSP
 {
   Unit commonUnit = GetCommonUnit(aStartValue.GetUnit(), aEndValue.GetUnit());
 
   PRBool success = PR_TRUE;
   switch (commonUnit) {
     case eUnit_Null:
     case eUnit_None:
     case eUnit_Enumerated:
-      success = PR_FALSE;
+      switch (aProperty) {
+        case eCSSProperty_font_stretch: {
+          // just like eUnit_Integer.
+          PRInt32 startInt = aStartValue.GetIntValue();
+          PRInt32 endInt = aEndValue.GetIntValue();
+          aDistance = PR_ABS(endInt - startInt);
+          break;
+        }
+        default:
+          success = PR_FALSE;
+          break;
+      }
       break;
     case eUnit_Integer: {
       PRInt32 startInt = aStartValue.GetIntValue();
       PRInt32 endInt = aEndValue.GetIntValue();
       aDistance = PR_ABS(endInt - startInt);
       break;
     }
     case eUnit_Coord: {
@@ -485,25 +496,39 @@ nsStyleAnimation::AddWeighted(nsCSSPrope
   // that in GetCommonUnit? in which case maybe ConvertToCommonUnit would be
   // better.)
 
   PRBool success = PR_TRUE;
   switch (commonUnit) {
     case eUnit_Null:
     case eUnit_None:
     case eUnit_Enumerated:
-      success = PR_FALSE;
+      switch (aProperty) {
+        case eCSSProperty_font_stretch: {
+          // Animate just like eUnit_Integer.
+          PRInt32 result = NS_floor(aCoeff1 * double(aValue1.GetIntValue()) +
+                                    aCoeff2 * double(aValue2.GetIntValue()));
+          aResultValue.SetIntValue(result, eUnit_Enumerated);
+          break;
+        }
+        default:
+          success = PR_FALSE;
+          break;
+      }
       break;
     case eUnit_Integer: {
       // http://dev.w3.org/csswg/css3-transitions/#animation-of-property-types-
       // says we should use floor
-      aResultValue.SetIntValue(NS_floor(
-          aCoeff1 * double(aValue1.GetIntValue()) +
-          aCoeff2 * double(aValue2.GetIntValue())),
-        eUnit_Integer);
+      PRInt32 result = NS_floor(aCoeff1 * double(aValue1.GetIntValue()) +
+                                aCoeff2 * double(aValue2.GetIntValue()));
+      if (aProperty == eCSSProperty_font_weight) {
+        NS_ASSERTION(result > 0, "unexpected value");
+        result -= result % 100;
+      }
+      aResultValue.SetIntValue(result, eUnit_Integer);
       break;
     }
     case eUnit_Coord: {
       aResultValue.SetCoordValue(NSToCoordRound(
         aCoeff1 * aValue1.GetCoordValue() +
         aCoeff2 * aValue2.GetCoordValue()));
       break;
     }
@@ -1265,16 +1290,36 @@ nsStyleAnimation::ExtractComputedValue(n
             vrect->mLeft.SetAutoValue();
           } else {
             nscoordToCSSValue(srect.x, vrect->mLeft);
           }
           aComputedValue.SetAndAdoptCSSRectValue(vrect, eUnit_CSSRect);
           break;
         }
 
+        case eCSSProperty_font_stretch: {
+          PRInt16 stretch =
+            static_cast<const nsStyleFont*>(styleStruct)->mFont.stretch;
+          if (stretch < -5 || stretch > 5) {
+            return PR_FALSE;
+          }
+          aComputedValue.SetIntValue(stretch, eUnit_Enumerated);
+          return PR_FALSE;
+        }
+
+        case eCSSProperty_font_weight: {
+          PRUint16 weight =
+            static_cast<const nsStyleFont*>(styleStruct)->mFont.weight;
+          if (weight % 100 != 0) {
+            return PR_FALSE;
+          }
+          aComputedValue.SetIntValue(weight, eUnit_Integer);
+          return PR_TRUE;
+        }
+
         default:
           NS_ABORT_IF_FALSE(PR_FALSE, "missing property implementation");
           return PR_FALSE;
       };
       return PR_TRUE;
     case eStyleAnimType_Coord:
       return StyleCoordToValue(*static_cast<const nsStyleCoord*>(
         StyleDataAtOffset(styleStruct, ssOffset)), aComputedValue);
