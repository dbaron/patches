From: L. David Baron <dbaron@dbaron.org>

Bug 1448138 - Rename string DataFlags::SHARED to REFCOUNTED to make it clearer to those reading the code.  (Servo changes.)  r=erahm

MozReview-Commit-ID: GGR9AtZpjyQ

diff --git a/servo/support/gecko/nsstring/src/lib.rs b/servo/support/gecko/nsstring/src/lib.rs
--- a/servo/support/gecko/nsstring/src/lib.rs
+++ b/servo/support/gecko/nsstring/src/lib.rs
@@ -135,17 +135,18 @@ use std::u32;
 mod data_flags {
     bitflags! {
         // While this has the same layout as u16, it cannot be passed
         // over FFI safely as a u16.
         #[repr(C)]
         pub struct DataFlags: u16 {
             const TERMINATED = 1 << 0; // IsTerminated returns true
             const VOIDED = 1 << 1; // IsVoid returns true
-            const SHARED = 1 << 2; // mData points to a heap-allocated, shared buffer
+            const REFCOUNTED = 1 << 2; // mData points to a heap-allocated, shareable, refcounted
+                                       // buffer
             const OWNED = 1 << 3; // mData points to a heap-allocated, raw buffer
             const INLINE = 1 << 4; // mData points to a writable, inline buffer
             const LITERAL = 1 << 5; // mData points to a string literal; TERMINATED will also be set
         }
     }
 }
 
 mod class_flags {
@@ -1179,26 +1180,26 @@ pub mod test_helpers {
                   dataflags, Rust_Test_Member_nsCString_mDataFlags);
     member_check!(nsCStringRepr, nsCString, nsCStr<'static>,
                   classflags, Rust_Test_Member_nsCString_mClassFlags);
 
     #[no_mangle]
     #[allow(non_snake_case)]
     pub extern fn Rust_Test_NsStringFlags(f_terminated: *mut u16,
                                           f_voided: *mut u16,
-                                          f_shared: *mut u16,
+                                          f_refcounted: *mut u16,
                                           f_owned: *mut u16,
                                           f_inline: *mut u16,
                                           f_literal: *mut u16,
                                           f_class_inline: *mut u16,
                                           f_class_null_terminated: *mut u16) {
         unsafe {
             *f_terminated = DataFlags::TERMINATED.bits();
             *f_voided = DataFlags::VOIDED.bits();
-            *f_shared = DataFlags::SHARED.bits();
+            *f_refcounted = DataFlags::REFCOUNTED.bits();
             *f_owned = DataFlags::OWNED.bits();
             *f_inline = DataFlags::INLINE.bits();
             *f_literal = DataFlags::LITERAL.bits();
             *f_class_inline = ClassFlags::INLINE.bits();
             *f_class_null_terminated = ClassFlags::NULL_TERMINATED.bits();
         }
     }
 }
