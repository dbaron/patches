From: Zack Weinberg <zweinberg@mozilla.com>

Bug 511147:  Avoid the slow greedy-operator path for A > B ~ C selectors.  r=dbaron

diff --git a/layout/style/nsCSSRuleProcessor.cpp b/layout/style/nsCSSRuleProcessor.cpp
--- a/layout/style/nsCSSRuleProcessor.cpp
+++ b/layout/style/nsCSSRuleProcessor.cpp
@@ -1898,21 +1898,22 @@ static PRBool SelectorMatchesTree(RulePr
       return PR_FALSE;
     }
     if (SelectorMatches(*data, selector, 0, nsnull, aForStyling)) {
       // to avoid greedy matching, we need to recur if this is a
       // descendant or general sibling combinator and the next
       // combinator is different, but we can make an exception for
       // sibling, then parent, since a sibling's parent is always the
       // same.
-      if ((NS_IS_GREEDY_OPERATOR(selector->mOperator)) &&
-          (selector->mNext) &&
-          (selector->mNext->mOperator != selector->mOperator) &&
+      if (NS_IS_GREEDY_OPERATOR(selector->mOperator) &&
+          selector->mNext &&
+          selector->mNext->mOperator != selector->mOperator &&
           !(selector->mOperator == '~' &&
-            selector->mNext->mOperator == PRUnichar(0))) {
+            (selector->mNext->mOperator == PRUnichar(0) ||
+             selector->mNext->mOperator == PRUnichar('>')))) {
 
         // pretend the selector didn't match, and step through content
         // while testing the same selector
 
         // This approach is slightly strange in that when it recurs
         // it tests from the top of the content tree, down.  This
         // doesn't matter much for performance since most selectors
         // don't match.  (If most did, it might be faster...)
diff --git a/layout/style/test/test_selectors.html b/layout/style/test/test_selectors.html
--- a/layout/style/test/test_selectors.html
+++ b/layout/style/test/test_selectors.html
@@ -485,16 +485,30 @@ function run() {
     function idset(ids) { // takes an array of ids
         return function idset_filter(doc) {
             var result = [];
             for each (var id in ids)
                 result.push(doc.getElementById(id));
             return result;
         }
     }
+    function classset(classes) { // takes an array of classes
+        return function classset_filter(doc) {
+            var i, j, els;
+            var result = [];
+            for (i = 0; i < classes.length; i++) {
+                els = doc.getElementsByClassName(classes[i]);
+                for (j = 0; j < els.length; j++) {
+                    result.push(els[j]);
+                }
+            }
+            return result;
+        }
+    }
+    function emptyset(doc) { return []; }
     test_parseable(":first-child");
     test_parseable(":last-child");
     test_parseable(":only-child");
     test_parseable(":-moz-first-node");
     test_parseable(":-moz-last-node");
     test_parseable(":first-of-type");
     test_parseable(":last-of-type");
     test_parseable(":only-of-type");
@@ -574,16 +588,37 @@ function run() {
                           idset(["c"]), idset(["a", "b", "d"]));
     test_selector_in_html("#a > #b div", four_children,
                           idset(["c", "d"]), idset(["a", "b"]));
     test_selector_in_html("#a #c > div", four_children,
                           idset(["d"]), idset(["a", "b", "c"]));
     test_selector_in_html("#a > #c div", four_children,
                           idset([]), idset(["a", "b", "c", "d"]));
 
+    // More descendant combinator greediness (bug 511147)
+    test_selector_in_html(".a > .b ~ .match", '<div class="a"><div class="b"></div><div class="match"></div></div>',
+                         classset(["match"]), classset(["a", "b"]));
+    test_selector_in_html(".a > .b ~ .match", '<div class="a"><div class="b"></div><div class="x"></div><div class="match"></div></div>',
+                         classset(["match"]), classset(["a", "b", "x"]));
+    test_selector_in_html(".a > .b ~ .match", '<div class="a"><div class="b"><p>filler filler <i>filler</i> filler</p></div><div class="match"></div></div>',
+                         classset(["match"]), classset(["a", "b", "x"]));
+    test_selector_in_html(".a > .b ~ .match", '<div class="a"><div class="x"><p>filler filler <i>filler</i> filler</p></div><div></div><div class="b"></div><div></div><div class="x"><p>filler filler <i>filler</i> filler</p></div><div class="match"></div></div>',
+                         classset(["match"]), classset(["a", "b", "x"]));
+    test_selector_in_html(".a > .b ~ .match", '<div class="a"><div class="b"></div><div class="match"></div><div class="match"></div></div>',
+                         classset(["match"]), classset(["a", "b"]));
+
+    test_selector_in_html(".a > .b ~ .nomatch", '<div class="a"><div><div class="b"></div><div class="nomatch"></div></div></div>',
+                         emptyset, classset(["a", "b", "nomatch"]));
+    test_selector_in_html(".a > .b ~ .nomatch", '<div class="a"><div><div class="b"></div><div class="nomatch"></div></div><div class="nomatch"></div></div>',
+                         emptyset, classset(["a", "b", "nomatch"]));
+    test_selector_in_html(".a > .b ~ .nomatch", '<div class="a"><div class="b"></div><div><div class="nomatch"></div></div><div></div></div>',
+                         emptyset, classset(["a", "b", "nomatch"]));
+    test_selector_in_html(".a > .b ~ .nomatch", '<div class="a"><div class="b"></div></div><div class="nomatch"></div>',
+                         emptyset, classset(["a", "b", "nomatch"]));
+
     // Test serialization of pseudo-elements.
     should_serialize_to("p:first-letter", "p:first-letter");
     should_serialize_to("div>p:first-letter", "div > p:first-letter");
     should_serialize_to("span +div:first-line", "span + div:first-line");
 
     // Test default namespaces, including inside :not().
     var html_default_ns = "@namespace url(http://www.w3.org/1999/xhtml);";
     var html_ns = "@namespace html url(http://www.w3.org/1999/xhtml);";
@@ -673,9 +708,8 @@ function deferred_tests_onload(event)
 
     run_deferred_tests();
 }
 
 </script>
 </pre>
 </body>
 </html>
-
