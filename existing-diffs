From: L. David Baron <dbaron@dbaron.org>

What remains of the changes in my CVS tree before I switched to mercurial.

diff --git a/docshell/base/nsDocShell.cpp b/docshell/base/nsDocShell.cpp
--- a/docshell/base/nsDocShell.cpp
+++ b/docshell/base/nsDocShell.cpp
@@ -1314,16 +1314,24 @@ nsDocShell::LoadURI(nsIURI* aURI,
 
   NS_ENSURE_ARG(aURI);
 
   if (!StartupTimeline::HasRecord(StartupTimeline::FIRST_LOAD_URI) &&
       mItemType == typeContent && !NS_IsAboutBlank(aURI)) {
     StartupTimeline::RecordOnce(StartupTimeline::FIRST_LOAD_URI);
   }
 
+#ifdef DEBUG
+  {
+    nsAutoCString spec;
+    aURI->GetSpec(spec);
+    printf("nsDocShell(%p)::LoadURI(%s)\n", this, spec.get());
+  }
+#endif
+
   // Extract the info from the DocShellLoadInfo struct...
   if (aLoadInfo) {
     aLoadInfo->GetReferrer(getter_AddRefs(referrer));
     aLoadInfo->GetOriginalURI(getter_AddRefs(originalURI));
     GetMaybeResultPrincipalURI(aLoadInfo, resultPrincipalURI);
     aLoadInfo->GetLoadReplace(&loadReplace);
     nsDocShellInfoLoadType lt = nsIDocShellLoadInfo::loadNormal;
     aLoadInfo->GetLoadType(&lt);
diff --git a/dom/base/nsAttrAndChildArray.cpp b/dom/base/nsAttrAndChildArray.cpp
--- a/dom/base/nsAttrAndChildArray.cpp
+++ b/dom/base/nsAttrAndChildArray.cpp
@@ -771,16 +771,19 @@ nsAttrAndChildArray::MakeMappedUnique(ns
 
   if (!mImpl && !GrowBy(1)) {
     return NS_ERROR_OUT_OF_MEMORY;
   }
 
   if (!aAttributes->GetStyleSheet()) {
     // This doesn't currently happen, but it could if we do loading right
 
+    // XXXldb We shouldn't try to handle this gracefully, since it
+    // should never happen.  But it seems to.
+    //NS_NOTREACHED("no style sheet");
     RefPtr<nsMappedAttributes> mapped(aAttributes);
     mapped.swap(mImpl->mMappedAttrs);
 
     return NS_OK;
   }
 
   RefPtr<nsMappedAttributes> mapped =
     aAttributes->GetStyleSheet()->UniqueMappedAttributes(aAttributes);
diff --git a/dom/base/nsDocument.cpp b/dom/base/nsDocument.cpp
--- a/dom/base/nsDocument.cpp
+++ b/dom/base/nsDocument.cpp
@@ -8583,16 +8583,17 @@ nsDocument::CanSavePresentation(nsIReque
   // we only want to block suspend windows that aren't also
   // frozen.
   nsPIDOMWindowInner* win = GetInnerWindow();
   if (win && win->IsSuspended() && !win->IsFrozen()) {
     return false;
   }
 
   // Check our event listener manager for unload/beforeunload listeners.
+  // XXX What about listeners on the document rather than the window?
   nsCOMPtr<EventTarget> piTarget = do_QueryInterface(mScriptGlobalObject);
   if (piTarget) {
     EventListenerManager* manager = piTarget->GetExistingListenerManager();
     if (manager && manager->HasUnloadListeners()) {
       return false;
     }
   }
 
diff --git a/dom/base/nsGlobalWindow.cpp b/dom/base/nsGlobalWindow.cpp
--- a/dom/base/nsGlobalWindow.cpp
+++ b/dom/base/nsGlobalWindow.cpp
@@ -3213,16 +3213,17 @@ nsGlobalWindow::SetNewDocument(nsIDocume
             Performance::CreateForMainThread(newInnerWindow->AsInner(),
                                              currentInner->mPerformance->GetDOMTiming(),
                                              currentInner->mPerformance->GetChannel());
         }
       }
 
       // Don't free objects on our current inner window if it's going to be
       // held in the bfcache.
+      // XXXldb Move this out of currentInner->mJSObject check!
       if (!currentInner->IsFrozen()) {
         currentInner->FreeInnerObjects();
       }
     }
 
     mInnerWindow = newInnerWindow->AsInner();
     MOZ_ASSERT(mInnerWindow);
     mInnerWindow->TryToCacheTopInnerWindow();
diff --git a/dom/html/HTMLSelectElement.cpp b/dom/html/HTMLSelectElement.cpp
--- a/dom/html/HTMLSelectElement.cpp
+++ b/dom/html/HTMLSelectElement.cpp
@@ -1837,16 +1837,17 @@ HTMLSelectElement::GetValidationMessage(
   }
 }
 
 #ifdef DEBUG
 
 void
 HTMLSelectElement::VerifyOptionsArray()
 {
+#ifndef DEBUG_dbaron // This is really really slow on long selects!
   int32_t index = 0;
   for (nsIContent* child = nsINode::GetFirstChild();
        child;
        child = child->GetNextSibling()) {
     HTMLOptionElement* opt = HTMLOptionElement::FromContent(child);
     if (opt) {
       NS_ASSERTION(opt == mOptions->ItemAsOption(index++),
                    "Options collection broken");
@@ -1857,16 +1858,17 @@ HTMLSelectElement::VerifyOptionsArray()
         opt = HTMLOptionElement::FromContent(grandchild);
         if (opt) {
           NS_ASSERTION(opt == mOptions->ItemAsOption(index++),
                        "Options collection broken");
         }
       }
     }
   }
+#endif
 }
 
 #endif
 
 void
 HTMLSelectElement::UpdateBarredFromConstraintValidation()
 {
   SetBarredFromConstraintValidation(IsDisabled());
diff --git a/layout/base/nsBidi_noICU.cpp b/layout/base/nsBidi_noICU.cpp
--- a/layout/base/nsBidi_noICU.cpp
+++ b/layout/base/nsBidi_noICU.cpp
@@ -1,9 +1,9 @@
-/* -*- Mode: C; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
  *
  * This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "nsBidi.h"
 #include "nsUnicodeProperties.h"
 #include "nsCRTGlue.h"
diff --git a/layout/base/nsBidi_noICU.h b/layout/base/nsBidi_noICU.h
--- a/layout/base/nsBidi_noICU.h
+++ b/layout/base/nsBidi_noICU.h
@@ -145,17 +145,17 @@ typedef uint8_t DirProp;
 #define IS_SECOND_SURROGATE(uchar) (((uchar)&0xfc00)==0xdc00)
 
 /* get the UTF-32 value directly from the surrogate pseudo-characters */
 #define SURROGATE_OFFSET ((0xd800<<10UL)+0xdc00-0x10000)
 #define GET_UTF_32(first, second) (((first)<<10UL)+(second)-SURROGATE_OFFSET)
 
 #if !ENABLE_INTL_API // these are provided by ICU if present in the build
 
-#define UTF_ERROR_VALUE 0xffff
+#define UTF_ERROR_VALUE 0xfffd
 /* definitions with forward iteration --------------------------------------- */
 
 /*
  * all the macros that go forward assume that
  * the initial offset is 0<=i<length;
  * they update the offset
  */
 
diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -6732,16 +6732,19 @@ nsCSSFrameConstructor::AppendFramesToPar
 
 #define UNSET_DISPLAY static_cast<StyleDisplay>(255)
 
 // This gets called to see if the frames corresponding to aSibling and aContent
 // should be siblings in the frame tree. Although (1) rows and cols, (2) row
 // groups and col groups, (3) row groups and captions, (4) legends and content
 // inside fieldsets, (5) popups and other kids of the menu are siblings from a
 // content perspective, they are not considered siblings in the frame tree.
+// XXXldb 307394 [Stir DOM] The way this is used seems completely bogus.
+// We should construct or grovel through pseudo-frames if this is false,
+// not skip content.
 bool
 nsCSSFrameConstructor::IsValidSibling(nsIFrame*              aSibling,
                                       nsIContent*            aContent,
                                       StyleDisplay&          aDisplay)
 {
   nsIFrame* parentFrame = aSibling->GetParent();
   LayoutFrameType parentType = parentFrame->Type();
 
@@ -10120,16 +10123,19 @@ nsCSSFrameConstructor::GetFirstLineStyle
                                 aStyleContext,
                                 nullptr);
   }
   return nullptr;
 }
 
 // Predicate to see if a given content (block element) has
 // first-letter style applied to it.
+// XXXldb Bug 362901 This isn't necessarily going to work if changes are
+// batched, since removing the style rule at the same time as messing
+// with content that relies on this could break things pretty badly.
 bool
 nsCSSFrameConstructor::ShouldHaveFirstLetterStyle(nsIContent* aContent,
                                                   nsStyleContext* aStyleContext)
 {
   return nsLayoutUtils::HasPseudoStyle(aContent, aStyleContext,
                                        CSSPseudoElementType::firstLetter,
                                        mPresShell->GetPresContext());
 }
diff --git a/layout/generic/nsFrame.cpp b/layout/generic/nsFrame.cpp
--- a/layout/generic/nsFrame.cpp
+++ b/layout/generic/nsFrame.cpp
@@ -9706,16 +9706,17 @@ nsFrame::RefreshSizeCache(nsBoxLayoutSta
       int count = 0;
       nsIFrame* firstFrame = nullptr;
       int32_t framesOnLine;
       nsRect lineBounds;
 
       do {
          lines->GetLine(count, &firstFrame, &framesOnLine, lineBounds);
 
+         // XXX This should sum across forced breaks!
          if (lineBounds.height > metrics->mBlockMinSize.height)
            metrics->mBlockMinSize.height = lineBounds.height;
 
          count++;
       } while(firstFrame);
     } else {
       metrics->mBlockMinSize.height = desiredSize.Height();
     }
diff --git a/layout/tables/FixedTableLayoutStrategy.cpp b/layout/tables/FixedTableLayoutStrategy.cpp
--- a/layout/tables/FixedTableLayoutStrategy.cpp
+++ b/layout/tables/FixedTableLayoutStrategy.cpp
@@ -94,16 +94,18 @@ FixedTableLayoutStrategy::GetMinISize(gf
           nscoord cellISize =
             nsLayoutUtils::IntrinsicForContainer(aRenderingContext, cellFrame,
                                                  nsLayoutUtils::MIN_ISIZE);
           if (colSpan > 1) {
             // If a column-spanning cell is in the first row, split up
             // the space evenly.  (XXX This isn't quite right if some of
             // the columns it's in have specified inline sizes.  Should
             // we care?)
+            // XXXldb This doesn't consider columns with no cells
+            // originating.
             cellISize = ((cellISize + spacing) / colSpan) - spacing;
           }
           result += cellISize;
         } else if (styleISize->GetUnit() == eStyleUnit_Percent) {
           if (colSpan > 1) {
             // XXX Can this force columns to negative inline sizes?
             result -= spacing * (colSpan - 1);
           }
diff --git a/layout/tables/nsTableFrame.cpp b/layout/tables/nsTableFrame.cpp
--- a/layout/tables/nsTableFrame.cpp
+++ b/layout/tables/nsTableFrame.cpp
@@ -331,16 +331,18 @@ nsTableFrame::SetInitialChildList(ChildL
     const nsStyleDisplay* childDisplay = childFrame->StyleDisplay();
 
     if (mozilla::StyleDisplay::TableColumnGroup == childDisplay->mDisplay) {
       NS_ASSERTION(childFrame->IsTableColGroupFrame(),
                    "This is not a colgroup");
       mColGroups.AppendFrame(nullptr, childFrame);
     }
     else { // row groups and unknown frames go on the main list for now
+      NS_ASSERTION(IsRowGroup(childDisplay->mDisplay),
+                   "yikes, unknown frame type");
       mFrames.AppendFrame(nullptr, childFrame);
     }
   }
 
   // If we have a prev-in-flow, then we're a table that has been split and
   // so don't treat this like an append
   if (!GetPrevInFlow()) {
     // process col groups first so that real cols get constructed before
diff --git a/layout/xul/nsBoxFrame.cpp b/layout/xul/nsBoxFrame.cpp
--- a/layout/xul/nsBoxFrame.cpp
+++ b/layout/xul/nsBoxFrame.cpp
@@ -496,16 +496,17 @@ nsBoxFrame::GetInitialDirection(bool& aI
   const nsStyleXUL* boxInfo = StyleXUL();
   if (boxInfo->mBoxDirection == StyleBoxDirection::Reverse) {
     aIsNormal = !aIsNormal; // Invert our direction.
   }
 
   // Now see if we have an attribute.  The attribute overrides
   // the style system value.
   if (IsXULHorizontal()) {
+    // XXXldb This makes two reverses go back to normal!
     static nsIContent::AttrValuesArray strings[] =
       {&nsGkAtoms::reverse, &nsGkAtoms::ltr, &nsGkAtoms::rtl, nullptr};
     int32_t index = GetContent()->FindAttrValueIn(kNameSpaceID_None, nsGkAtoms::dir,
         strings, eCaseMatters);
     if (index >= 0) {
       bool values[] = {!aIsNormal, true, false};
       aIsNormal = values[index];
     }
diff --git a/layout/xul/nsMenuPopupFrame.cpp b/layout/xul/nsMenuPopupFrame.cpp
--- a/layout/xul/nsMenuPopupFrame.cpp
+++ b/layout/xul/nsMenuPopupFrame.cpp
@@ -2506,26 +2506,24 @@ nsMenuPopupFrame::CreatePopupView()
   }
 
   nsViewManager* viewManager = PresContext()->GetPresShell()->GetViewManager();
   NS_ASSERTION(nullptr != viewManager, "null view manager");
 
   // Create a view
   nsView* parentView = viewManager->GetRootView();
   nsViewVisibility visibility = nsViewVisibility_kHide;
-  int32_t zIndex = INT32_MAX;
-  bool    autoZIndex = false;
 
   NS_ASSERTION(parentView, "no parent view");
 
   // Create a view
   nsView *view = viewManager->CreateView(GetRect(), parentView, visibility);
-  viewManager->SetViewZIndex(view, autoZIndex, zIndex);
   // XXX put view last in document order until we can do better
   viewManager->InsertChild(parentView, view, nullptr, true);
+  SyncFrameViewProperties(view);
 
   // Remember our view
   SetView(view);
 
   NS_FRAME_LOG(NS_FRAME_TRACE_CALLS,
     ("nsMenuPopupFrame::CreatePopupView: frame=%p view=%p", this, view));
 }
 
diff --git a/layout/xul/nsSprocketLayout.cpp b/layout/xul/nsSprocketLayout.cpp
--- a/layout/xul/nsSprocketLayout.cpp
+++ b/layout/xul/nsSprocketLayout.cpp
@@ -213,19 +213,17 @@ nsSprocketLayout::XULLayout(nsIFrame* aB
   nscoord min = 0;
   nscoord max = 0;
   int32_t flexes = 0;
   PopulateBoxSizes(aBox, aState, boxSizes, min, max, flexes);
 
   // The |size| variable will hold the total size of children along the axis of
   // the box.  Continuing with the example begun in the comment above, size would
   // be 150 pixels.
-  nscoord size = clientRect.width;
-  if (!IsXULHorizontal(aBox))
-    size = clientRect.height;
+  nscoord size = IsXULHorizontal(aBox) ? clientRect.width : clientRect.height;
   ComputeChildSizes(aBox, aState, size, boxSizes, computedBoxSizes);
 
   // After the call to ComputeChildSizes, the |size| variable contains the
   // total required size of all the children.  We adjust our clientRect in the
   // appropriate dimension to match this size.  In our example, we now assign
   // 150 pixels into the clientRect.width.
   //
   // The variables |min| and |max| hold the minimum required size box must be
diff --git a/netwerk/dns/nsIDNService.cpp b/netwerk/dns/nsIDNService.cpp
--- a/netwerk/dns/nsIDNService.cpp
+++ b/netwerk/dns/nsIDNService.cpp
@@ -619,23 +619,23 @@ nsresult nsIDNService::stringPrep(const 
   NS_ENSURE_TRUE(idn_err == idn_success, NS_ERROR_MALFORMED_URI);
 
   nsAutoString namePrepStr;
   ucs4toUtf16(namePrepBuf, namePrepStr);
   if (namePrepStr.Length() >= kMaxDNSNodeLen)
     return NS_ERROR_MALFORMED_URI;
 
   // normalize
-  nsAutoString normlizedStr;
-  rv = mNormalizer->NormalizeUnicodeNFKC(namePrepStr, normlizedStr);
-  if (normlizedStr.Length() >= kMaxDNSNodeLen)
+  nsAutoString normalizedStr;
+  rv = mNormalizer->NormalizeUnicodeNFKC(namePrepStr, normalizedStr);
+  if (normalizedStr.Length() >= kMaxDNSNodeLen)
     return NS_ERROR_MALFORMED_URI;
 
   // set the result string
-  out.Assign(normlizedStr);
+  out.Assign(normalizedStr);
 
   if (flag == eStringPrepIgnoreErrors) {
     return NS_OK;
   }
 
   // prohibit
   const uint32_t *found = nullptr;
   idn_err = idn_nameprep_isprohibited(mNamePrepHandle,
diff --git a/toolkit/components/statusfilter/nsBrowserStatusFilter.cpp b/toolkit/components/statusfilter/nsBrowserStatusFilter.cpp
--- a/toolkit/components/statusfilter/nsBrowserStatusFilter.cpp
+++ b/toolkit/components/statusfilter/nsBrowserStatusFilter.cpp
@@ -58,16 +58,17 @@ nsBrowserStatusFilter::AddProgressListen
 {
     mListener = aListener;
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsBrowserStatusFilter::RemoveProgressListener(nsIWebProgressListener *aListener)
 {
+    NS_ASSERTION(aListener == mListener, "listener mismatch");
     if (aListener == mListener)
         mListener = nullptr;
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsBrowserStatusFilter::GetDOMWindow(mozIDOMWindowProxy **aResult)
 {
diff --git a/widget/gtk/nsWindow.cpp b/widget/gtk/nsWindow.cpp
--- a/widget/gtk/nsWindow.cpp
+++ b/widget/gtk/nsWindow.cpp
@@ -4325,16 +4325,20 @@ nsWindow::CleanLayerManagerRecursive(voi
     for (GList* list = children; list; list = list->next) {
         nsWindow* window = get_window_for_gdk_window(GDK_WINDOW(list->data));
         if (window) {
             window->CleanLayerManagerRecursive();
         }
     }
 }
 
+// Once people are reliably running compositing window managers, we
+// could get 8-bit alpha by using gdk_screen_get_rgba_visual.
+// See http://mail.gnome.org/archives/gtk-app-devel-list/2005-September/msg00124.html
+
 void
 nsWindow::SetTransparencyMode(nsTransparencyMode aMode)
 {
     if (!mShell) {
         // Pass the request to the toplevel window
         GtkWidget *topWidget = GetToplevelWidget();
         if (!topWidget)
             return;
diff --git a/xpcom/base/nsIWeakReference.idl b/xpcom/base/nsIWeakReference.idl
--- a/xpcom/base/nsIWeakReference.idl
+++ b/xpcom/base/nsIWeakReference.idl
@@ -14,16 +14,25 @@
  * An instance of |nsIWeakReference| is a proxy object that cooperates with
  * its referent to give clients a non-owning, non-dangling reference.  Clients
  * own the proxy, and should generally manage it with an |nsCOMPtr| (see the
  * type |nsWeakPtr| for a |typedef| name that stands out) as they would any
  * other XPCOM object.  The |QueryReferent| member function provides a
  * (hopefully short-lived) owning reference on demand, through which clients
  * can get useful access to the referent, while it still exists.
  *
+ * Thus this interface provides the following contract:  The result of
+ * calling QueryReferent on a given implementation of this interface
+ * with a given IID may change over time, but not more than twice:  it
+ * may change once from null to non-null (to account for aggregation)
+ * and it may change once from non-null to null.  This means that if
+ * a QueryReferent for an IID that once returned non-null (or was
+ * guaranteed by GetWeakReference to return non-null) at some time
+ * returns null, it will never again return non-null.
+ *
  * @version 1.0
  * @see nsISupportsWeakReference
  * @see nsWeakReference
  * @see nsWeakPtr
  */
 [scriptable, uuid(9188bc85-f92e-11d2-81ef-0060083a0bcf)]
 interface nsIWeakReference : nsISupports
   {
@@ -58,16 +67,22 @@ interface nsIWeakReference : nsISupports
 [scriptable, uuid(9188bc86-f92e-11d2-81ef-0060083a0bcf)]
 interface nsISupportsWeakReference : nsISupports
   {
     /**
      * |GetWeakReference| produces an appropriate instance of |nsIWeakReference|.
      * As with all good XPCOM `getters', you own the resulting interface and should
      * manage it with an |nsCOMPtr|.
      *
+     * If this call is successful, the weak reference returned is (while
+     * the nsISupportsWeakReference object is held) guaranteed to return
+     * non-null for a QueryReferent to any interface that the
+     * nsISupportsWeakReference implementation is known to
+     * QueryInterface to.
+     *
      * @see nsIWeakReference
      * @see nsWeakPtr
      * @see nsCOMPtr
      */
     nsIWeakReference GetWeakReference();
   };
 
 
diff --git a/xpcom/io/nsEscape.cpp b/xpcom/io/nsEscape.cpp
--- a/xpcom/io/nsEscape.cpp
+++ b/xpcom/io/nsEscape.cpp
@@ -442,16 +442,17 @@ T_EscapeURL(const typename T::char_type*
       }
       uint32_t len = ::AppendPercentHex(tempBuffer + tempBufferPos, c);
       tempBufferPos += len;
       MOZ_ASSERT(len <= ENCODE_MAX_LEN, "potential buffer overflow");
     }
 
     // Flush the temp buffer if it doesnt't have room for another encoded char.
     if (tempBufferPos >= mozilla::ArrayLength(tempBuffer) - ENCODE_MAX_LEN) {
+      // XXXldb Why is this guaranteed not to fire?
       NS_ASSERTION(writing, "should be writing");
       if (!aResult.Append(tempBuffer, tempBufferPos, fallible)) {
         return NS_ERROR_OUT_OF_MEMORY;
       }
       tempBufferPos = 0;
     }
 
     previousIsNonASCII = (c > 0x7f);
diff --git a/xpcom/io/nsLocalFileWin.cpp b/xpcom/io/nsLocalFileWin.cpp
--- a/xpcom/io/nsLocalFileWin.cpp
+++ b/xpcom/io/nsLocalFileWin.cpp
@@ -1683,18 +1683,18 @@ nsLocalFile::Normalize()
     }
 
     // add the current component to the path, including the preceding backslash
     mWorkingPath.Append(pathBuffer + begin - 1, len + 1);
   }
 
   // kill trailing dots and spaces.
   int32_t filePathLen = mWorkingPath.Length() - 1;
-  while (filePathLen > 0 && (mWorkingPath[filePathLen] == L' ' ||
-                             mWorkingPath[filePathLen] == L'.')) {
+  while (filePathLen >= 0 && (mWorkingPath[filePathLen] == L' ' ||
+                              mWorkingPath[filePathLen] == L'.')) {
     mWorkingPath.Truncate(filePathLen--);
   }
 
   MakeDirty();
   return NS_OK;
 }
 
 NS_IMETHODIMP
