diff --git a/accessible/src/atk/nsAccessibleWrap.cpp b/accessible/src/atk/nsAccessibleWrap.cpp
--- a/accessible/src/atk/nsAccessibleWrap.cpp
+++ b/accessible/src/atk/nsAccessibleWrap.cpp
@@ -261,17 +261,17 @@ mai_atk_object_get_type(void)
     }
     return type;
 }
 
 /*
  * Must keep sychronization with enumerate AtkProperty in 
  * accessible/src/base/nsAccessibleEventData.h
  */
-static char * sAtkPropertyNameArray[PROP_LAST] = {
+static const char * sAtkPropertyNameArray[PROP_LAST] = {
     0,
     "accessible-name",
     "accessible-description",
     "accessible-parent",
     "accessible-role",
     "accessible-layer",
     "accessible-mdi-zorder",
     "accessible-table-caption",
diff --git a/browser/components/preferences/permissions.xul b/browser/components/preferences/permissions.xul
--- a/browser/components/preferences/permissions.xul
+++ b/browser/components/preferences/permissions.xul
@@ -82,16 +82,17 @@
     </hbox>
     <separator class="thin"/>
     <tree id="permissionsTree" flex="1" style="height: 18em;"
           hidecolumnpicker="true"
           onkeypress="gPermissionManager.onPermissionKeyPress(event)"
           onselect="gPermissionManager.onPermissionSelected();">
       <treecols>
         <treecol id="siteCol" label="&treehead.sitename.label;" flex="3"
+                 style="text-align: right"
                 onclick="gPermissionManager.onPermissionSort('rawHost');" persist="width"/>
         <splitter class="tree-splitter"/>
         <treecol id="statusCol" label="&treehead.status.label;" flex="1"
                 onclick="gPermissionManager.onPermissionSort('capability');" persist="width"/>
       </treecols>
       <treechildren/>
     </tree>
   </vbox>
diff --git a/browser/components/preferences/permissionsutils.js b/browser/components/preferences/permissionsutils.js
--- a/browser/components/preferences/permissionsutils.js
+++ b/browser/components/preferences/permissionsutils.js
@@ -82,17 +82,28 @@ var gTreeUtils = {
     }
     selection.selectEventsSuppressed = false;
   },
   
   sort: function (aTree, aView, aDataSet, aColumn, 
                   aLastSortColumn, aLastSortAscending) 
   {
     var ascending = (aColumn == aLastSortColumn) ? !aLastSortAscending : true;
-    aDataSet.sort(function (a, b) { return a[aColumn].toLowerCase().localeCompare(b[aColumn].toLowerCase()); });
+    var compareFunc;
+    if (aColumn == "rawHost") {
+      // sort by components of domain name, from last to first
+      compareFunc = function(a, b) {
+        return a[aColumn].toLowerCase().split(".").reverse().join(".").
+          localeCompare(
+            b[aColumn].toLowerCase().split(".").reverse().join("."));
+      };
+    } else {
+      compareFunc = function (a, b) { return a[aColumn].toLowerCase().localeCompare(b[aColumn].toLowerCase()); };
+    }
+    aDataSet.sort(compareFunc);
     if (!ascending)
       aDataSet.reverse();
     
     aTree.view.selection.select(-1);
     aTree.view.selection.select(0);
     aTree.treeBoxObject.invalidate();
     aTree.treeBoxObject.ensureRowIsVisible(0);
     
diff --git a/caps/src/nsScriptSecurityManager.cpp b/caps/src/nsScriptSecurityManager.cpp
--- a/caps/src/nsScriptSecurityManager.cpp
+++ b/caps/src/nsScriptSecurityManager.cpp
@@ -3165,17 +3165,19 @@ static const char sPrincipalPrefix[] = "
 static const char sPrincipalPrefix[] = "capability.principal";
 static const char sPolicyPrefix[] = "capability.policy.";
 
 NS_IMETHODIMP
 nsScriptSecurityManager::Observe(nsISupports* aObject, const char* aTopic,
                                  const PRUnichar* aMessage)
 {
     nsresult rv = NS_OK;
-    NS_ConvertUTF16toUTF8 messageStr(aMessage);
+    nsCAutoString messageStr;
+    if (aMessage)
+        AppendUTF16toUTF8(aMessage, messageStr);
     const char *message = messageStr.get();
 
     static const char jsPrefix[] = "javascript.";
     static const char securityPrefix[] = "security.";
     if ((PL_strncmp(message, jsPrefix, sizeof(jsPrefix)-1) == 0) ||
         (PL_strncmp(message, securityPrefix, sizeof(securityPrefix)-1) == 0) )
     {
         ScriptSecurityPrefChanged();
diff --git a/config/Makefile.in b/config/Makefile.in
--- a/config/Makefile.in
+++ b/config/Makefile.in
@@ -43,21 +43,19 @@ VPATH		= @srcdir@
 VPATH		= @srcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 # For sanity's sake, we compile nsinstall without the wrapped system
 # headers, so that we can use it to set up the wrapped system headers.
 VISIBILITY_FLAGS =
 
-ifneq (,$(CROSS_COMPILE)$(filter-out WINNT OS2,$(OS_ARCH)))
-ifneq ($(OS_ARCH), WINCE)
+ifneq (,$(CROSS_COMPILE)$(filter-out WINCE WINNT OS2,$(OS_ARCH)))
 HOST_PROGRAM	= nsinstall$(HOST_BIN_SUFFIX)
 HOST_CSRCS	= nsinstall.c pathsub.c
-endif
 endif
 
 PLSRCS		= nfspwd.pl revdepth.pl
 
 TARGETS		= $(HOST_PROGRAM) $(PLSRCS:.pl=) $(SIMPLE_PROGRAMS)
 
 ifndef CROSS_COMPILE
 ifdef USE_ELF_DYNSTR_GC
diff --git a/content/base/src/nsAttrAndChildArray.cpp b/content/base/src/nsAttrAndChildArray.cpp
--- a/content/base/src/nsAttrAndChildArray.cpp
+++ b/content/base/src/nsAttrAndChildArray.cpp
@@ -724,16 +724,19 @@ nsAttrAndChildArray::MakeMappedUnique(ns
 
   if (!mImpl && !GrowBy(1)) {
     return NS_ERROR_OUT_OF_MEMORY;
   }
 
   if (!aAttributes->GetStyleSheet()) {
     // This doesn't currently happen, but it could if we do loading right
 
+    // XXXldb We shouldn't try to handle this gracefully, since it
+    // should never happen.  But it seems to.
+    //NS_NOTREACHED("no style sheet");
     nsRefPtr<nsMappedAttributes> mapped(aAttributes);
     mapped.swap(mImpl->mMappedAttrs);
 
     return NS_OK;
   }
 
   nsRefPtr<nsMappedAttributes> mapped =
     aAttributes->GetStyleSheet()->UniqueMappedAttributes(aAttributes);
diff --git a/content/base/src/nsDocument.cpp b/content/base/src/nsDocument.cpp
--- a/content/base/src/nsDocument.cpp
+++ b/content/base/src/nsDocument.cpp
@@ -6815,16 +6815,17 @@ CanCacheSubDocument(PLDHashTable *table,
 #ifdef DEBUG_bryner
 #define DEBUG_PAGE_CACHE
 #endif
 
 PRBool
 nsDocument::CanSavePresentation(nsIRequest *aNewRequest)
 {
   // Check our event listener manager for unload/beforeunload listeners.
+  // XXX What about listeners on the document rather than the window?
   nsCOMPtr<nsPIDOMEventTarget> piTarget = do_QueryInterface(mScriptGlobalObject);
   if (piTarget) {
     nsCOMPtr<nsIEventListenerManager> manager;
     piTarget->GetListenerManager(PR_FALSE, getter_AddRefs(manager));
     if (manager && manager->HasUnloadListeners()) {
       return PR_FALSE;
     }
   }
diff --git a/content/base/src/nsFrameLoader.cpp b/content/base/src/nsFrameLoader.cpp
--- a/content/base/src/nsFrameLoader.cpp
+++ b/content/base/src/nsFrameLoader.cpp
@@ -406,16 +406,19 @@ AddTreeItemToTreeOwner(nsIDocShellTreeIt
   if (aParentNode) {
     aParentNode->AddChild(aItem);
   }
 
   PRBool retval = PR_FALSE;
   if (aParentType == nsIDocShellTreeItem::typeChrome && isContent) {
     retval = PR_TRUE;
 
+    // Old comment, is it still valid?
+    // XXXldb This is inconsistent with the conditions under which
+    // nsFrame
     PRBool is_primary = value.LowerCaseEqualsLiteral("content-primary");
 
     if (aOwner) {
       PRBool is_targetable = is_primary ||
         value.LowerCaseEqualsLiteral("content-targetable");
       aOwner->ContentShellAdded(aItem, is_primary, is_targetable, value);
     }
   }
diff --git a/content/html/content/src/nsHTMLSelectElement.cpp b/content/html/content/src/nsHTMLSelectElement.cpp
--- a/content/html/content/src/nsHTMLSelectElement.cpp
+++ b/content/html/content/src/nsHTMLSelectElement.cpp
@@ -1768,18 +1768,20 @@ VerifyOptionsRecurse(nsIContent* aRoot, 
       VerifyOptionsRecurse(child, aIndex, aArray);
     }
   }
 }
 
 void
 nsHTMLSelectElement::VerifyOptionsArray()
 {
+#ifndef DEBUG_dbaron // This is really really slow on long selects!
   PRInt32 aIndex = 0;
   VerifyOptionsRecurse(this, aIndex, mOptions);
+#endif
 }
 
 
 #endif
 
 //----------------------------------------------------------------------
 //
 // nsHTMLOptionCollection implementation
diff --git a/content/xul/document/src/nsXULPrototypeCache.h b/content/xul/document/src/nsXULPrototypeCache.h
--- a/content/xul/document/src/nsXULPrototypeCache.h
+++ b/content/xul/document/src/nsXULPrototypeCache.h
@@ -66,17 +66,17 @@ struct CacheScriptEntry
  * The XUL prototype cache can be used to store and retrieve shared data for
  * XUL documents, style sheets, XBL, and scripts.
  *
  * The cache has two levels:
  *  1. In-memory hashtables
  *  2. The on-disk fastload file.
  */
 class nsXULPrototypeCache : public nsIXULPrototypeCache,
-                                   nsIObserver
+                            public nsIObserver
 {
 public:
     // nsISupports
     NS_DECL_ISUPPORTS
     NS_DECL_NSIOBSERVER
 
     // nsIXULPrototypeCache
     virtual PRBool IsCached(nsIURI* aURI) {
diff --git a/content/xul/document/src/nsXULPrototypeDocument.cpp b/content/xul/document/src/nsXULPrototypeDocument.cpp
--- a/content/xul/document/src/nsXULPrototypeDocument.cpp
+++ b/content/xul/document/src/nsXULPrototypeDocument.cpp
@@ -225,17 +225,18 @@ NS_NewXULPrototypeDocument(nsXULPrototyp
     }
 
     NS_ADDREF(*aResult);
     return rv;
 }
 
 // Helper method that shares a system global among all prototype documents
 // that have the system principal as their security principal.   Called by
-// nsXULPrototypeDocument::Read and nsXULPDGlobalObject::GetGlobalObject.
+// nsXULPrototypeDocument::Read and
+// nsXULPrototypeDocument::GetScriptGlobalObject.
 // This method greatly reduces the number of nsXULPDGlobalObjects and their
 // nsIScriptContexts in apps that load many XUL documents via chrome: URLs.
 
 nsXULPDGlobalObject *
 nsXULPrototypeDocument::NewXULPDGlobalObject()
 {
     // Now compare DocumentPrincipal() to gSystemPrincipal, in order to create
     // gSystemGlobal if the two pointers are equal.  Thus, gSystemGlobal
diff --git a/db/mork/src/morkFactory.cpp b/db/mork/src/morkFactory.cpp
--- a/db/mork/src/morkFactory.cpp
+++ b/db/mork/src/morkFactory.cpp
@@ -101,16 +101,17 @@ morkFactory::~morkFactory() /*i*/ // ass
   MORK_ASSERT(mFactory_Env.IsShutNode());
   MORK_ASSERT(this->IsShutNode());
 }
 
 /*public non-poly*/
 morkFactory::morkFactory() // uses orkinHeap
 : morkObject(morkUsage::kGlobal, (nsIMdbHeap*) 0, morkColor_kNone)
 , mFactory_Env(morkUsage::kMember, (nsIMdbHeap*) 0, this,
+  // XXXldb Nothing ever frees this new orkinHeap
   new orkinHeap())
 , mFactory_Heap()
 {
   if ( mFactory_Env.Good() )
   {
     mNode_Derived = morkDerived_kFactory;
     mNode_Refs += morkFactory_kWeakRefCountBonus;
   }
@@ -142,16 +143,17 @@ morkFactory::morkFactory(morkEnv* ev, /*
     mNode_Refs += morkFactory_kWeakRefCountBonus;
   }
 }
 
 NS_IMPL_ISUPPORTS_INHERITED1(morkFactory, morkObject, nsIMdbFactory)
 
 extern "C" nsIMdbFactory* MakeMdbFactory() 
 {
+  // XXXldb Nothing ever frees this new orkinHeap
   return new morkFactory(new orkinHeap());
 }
 
 
 /*public non-poly*/ void
 morkFactory::CloseFactory(morkEnv* ev) /*i*/ // called by CloseMorkNode();
 {
   if ( this )
@@ -265,16 +267,17 @@ NS_IMETHODIMP
 NS_IMETHODIMP
 morkFactory::MakeEnv(nsIMdbHeap* ioHeap, nsIMdbEnv** acqEnv)
 // ioHeap can be nil, causing a MakeHeap() style heap instance to be used
 {
   mdb_err outErr = 0;
   nsIMdbEnv* outEnv = 0;
   mork_bool ownsHeap = (ioHeap == 0);
   if ( !ioHeap )
+    // XXXldb Nothing ever frees this new orkinHeap
     ioHeap = new orkinHeap();
 
   if ( acqEnv && ioHeap )
   {
     morkEnv* fenv = this->GetInternalFactoryEnv(&outErr);
     if ( fenv )
     {
       morkEnv* newEnv = new(*ioHeap, fenv)
@@ -305,16 +308,17 @@ NS_IMETHODIMP
 NS_IMETHODIMP
 morkFactory::MakeHeap(nsIMdbEnv* mev, nsIMdbHeap** acqHeap)
 {
   mdb_err outErr = 0;
   nsIMdbHeap* outHeap = 0;
   morkEnv* ev = morkEnv::FromMdbEnv(mev);
   if ( ev )
   {
+    // XXXldb Nothing ever frees this new orkinHeap
     outHeap = new orkinHeap();
     if ( !outHeap )
       ev->OutOfMemoryError();
   }
   MORK_ASSERT(acqHeap);
   if ( acqHeap )
     *acqHeap = outHeap;
   return outErr;
diff --git a/docshell/base/nsDocShell.cpp b/docshell/base/nsDocShell.cpp
--- a/docshell/base/nsDocShell.cpp
+++ b/docshell/base/nsDocShell.cpp
@@ -728,16 +728,24 @@ nsDocShell::LoadURI(nsIURI * aURI,
     PRBool inheritOwner = PR_FALSE;
     PRBool sendReferrer = PR_TRUE;
     nsCOMPtr<nsISHEntry> shEntry;
     nsXPIDLString target;
     PRUint32 loadType = MAKE_LOAD_TYPE(LOAD_NORMAL, aLoadFlags);    
 
     NS_ENSURE_ARG(aURI);
 
+#ifdef DEBUG
+    {
+        nsCAutoString spec;
+        aURI->GetSpec(spec);
+        printf("nsDocShell(%p)::LoadURI(%s)\n", this, spec.get());
+    }
+#endif
+
     // Extract the info from the DocShellLoadInfo struct...
     if (aLoadInfo) {
         aLoadInfo->GetReferrer(getter_AddRefs(referrer));
 
         nsDocShellInfoLoadType lt = nsIDocShellLoadInfo::loadNormal;
         aLoadInfo->GetLoadType(&lt);
         // Get the appropriate loadType from nsIDocShellLoadInfo type
         loadType = ConvertDocShellLoadInfoToLoadType(lt);
@@ -3822,16 +3830,21 @@ nsDocShell::GetSize(PRInt32 * aCX, PRInt
     PRInt32 dummyHolder;
     return GetPositionAndSize(&dummyHolder, &dummyHolder, aCX, aCY);
 }
 
 NS_IMETHODIMP
 nsDocShell::SetPositionAndSize(PRInt32 x, PRInt32 y, PRInt32 cx,
                                PRInt32 cy, PRBool fRepaint)
 {
+#if 0
+printf("\n\nnsDocShell[%p]::SetPositionAndSize(x=%d, y=%d, width=%d, height=%d)\n\n\n",
+       this, x, y, cx, cy);
+#endif
+
     mBounds.x = x;
     mBounds.y = y;
     mBounds.width = cx;
     mBounds.height = cy;
 
     // Hold strong ref, since SetBounds can make us null out mContentViewer
     nsCOMPtr<nsIContentViewer> viewer = mContentViewer;
     if (viewer) {
@@ -5360,73 +5373,93 @@ nsDocShell::CreateAboutBlankContentViewe
   mCreatingDocument = PR_FALSE;
 
   // The transient about:blank viewer doesn't have a session history entry.
   SetHistoryEntry(&mOSHE, nsnull);
 
   return rv;
 }
 
+#ifdef DEBUG_dbaron
+#define CSP_DEBUG_PRINTF(string_) printf("nsDocShell::CanSavePresentation: " string_ "\n")
+#else
+#define CSP_DEBUG_PRINTF(string_) PR_BEGIN_MACRO PR_END_MACRO
+#endif
+
 PRBool
 nsDocShell::CanSavePresentation(PRUint32 aLoadType,
                                 nsIRequest *aNewRequest,
                                 nsIDocument *aNewDocument)
 {
-    if (!mOSHE)
+    if (!mOSHE) {
+        CSP_DEBUG_PRINTF(" returning false, since no OSHE");
         return PR_FALSE; // no entry to save into
+    }
 
     // Only save presentation for "normal" loads and link loads.  Anything else
     // probably wants to refetch the page, so caching the old presentation
     // would be incorrect.
     if (aLoadType != LOAD_NORMAL &&
         aLoadType != LOAD_HISTORY &&
         aLoadType != LOAD_LINK &&
         aLoadType != LOAD_STOP_CONTENT &&
         aLoadType != LOAD_STOP_CONTENT_AND_REPLACE &&
         aLoadType != LOAD_ERROR_PAGE)
-        return PR_FALSE;
+    {
+        CSP_DEBUG_PRINTF(" returning false, due to load type");
+        return PR_FALSE;
+    }
 
     // If the session history entry has the saveLayoutState flag set to false,
     // then we should not cache the presentation.
     PRBool canSaveState;
     mOSHE->GetSaveLayoutStateFlag(&canSaveState);
-    if (canSaveState == PR_FALSE)
-        return PR_FALSE;
+    if (canSaveState == PR_FALSE) {
+        CSP_DEBUG_PRINTF(" returning false, due to session history entry flag");
+        return PR_FALSE;
+    }
 
     // If the document is not done loading, don't cache it.
     nsCOMPtr<nsPIDOMWindow> pWin = do_QueryInterface(mScriptGlobal);
-    if (!pWin || pWin->IsLoading())
-        return PR_FALSE;
+    if (!pWin || pWin->IsLoading()) {
+        CSP_DEBUG_PRINTF(" returning false, due to window still loading");
+        return PR_FALSE;
+    }
 
     if (pWin->WouldReuseInnerWindow(aNewDocument))
         return PR_FALSE;
 
     // Avoid doing the work of saving the presentation state in the case where
     // the content viewer cache is disabled.
-    if (nsSHistory::GetMaxTotalViewers() == 0)
-        return PR_FALSE;
+    if (nsSHistory::GetMaxTotalViewers() == 0) {
+        CSP_DEBUG_PRINTF(" returning false, GetMaxTotalViewers 0");
+        return PR_FALSE;
+    }
 
     // Don't cache the content viewer if we're in a subframe and the subframe
     // pref is disabled.
     PRBool cacheFrames = PR_FALSE;
     mPrefs->GetBoolPref("browser.sessionhistory.cache_subframes",
                         &cacheFrames);
     if (!cacheFrames) {
         nsCOMPtr<nsIDocShellTreeItem> root;
         GetSameTypeParent(getter_AddRefs(root));
         if (root && root != this) {
             return PR_FALSE;  // this is a subframe load
         }
     }
 
     // If the document does not want its presentation cached, then don't.
     nsCOMPtr<nsIDocument> doc = do_QueryInterface(pWin->GetExtantDocument());
-    if (!doc || !doc->CanSavePresentation(aNewRequest))
-        return PR_FALSE;
-
+    if (!doc || !doc->CanSavePresentation(aNewRequest)) {
+        CSP_DEBUG_PRINTF(" returning false, since document says so");
+        return PR_FALSE;
+    }
+
+    CSP_DEBUG_PRINTF(" returning TRUE");
     return PR_TRUE;
 }
 
 void
 nsDocShell::ReattachEditorToWindow(nsISHEntry *aSHEntry)
 {
     NS_ASSERTION(!mEditorData,
                  "Why reattach an editor when we already have one?");
diff --git a/docshell/base/nsWebShell.cpp b/docshell/base/nsWebShell.cpp
--- a/docshell/base/nsWebShell.cpp
+++ b/docshell/base/nsWebShell.cpp
@@ -544,19 +544,17 @@ DispatchPings(nsIContent *content, nsIUR
 //----------------------------------------------------------------------
 
 // Note: operator new zeros our memory
 nsWebShell::nsWebShell() : nsDocShell()
 {
 #ifdef DEBUG
   // We're counting the number of |nsWebShells| to help find leaks
   ++gNumberOfWebShells;
-#endif
-#ifdef DEBUG
-    printf("++WEBSHELL %p == %ld\n", (void*) this, gNumberOfWebShells);
+  printf("++WEBSHELL %p == %ld\n", (void*) this, gNumberOfWebShells);
 #endif
 
   InitFrameData();
   mItemType = typeContent;
   mCharsetReloadState = eCharsetReloadInit;
 }
 
 nsWebShell::~nsWebShell()
@@ -568,18 +566,16 @@ nsWebShell::~nsWebShell()
 
   mContentViewer=nsnull;
 
   InitFrameData();
 
 #ifdef DEBUG
   // We're counting the number of |nsWebShells| to help find leaks
   --gNumberOfWebShells;
-#endif
-#ifdef DEBUG
   printf("--WEBSHELL %p == %ld\n", (void*) this, gNumberOfWebShells);
 #endif
 }
 
 void nsWebShell::InitFrameData()
 {
   SetMarginWidth(-1);    
   SetMarginHeight(-1);
diff --git a/dom/src/base/nsGlobalWindow.cpp b/dom/src/base/nsGlobalWindow.cpp
--- a/dom/src/base/nsGlobalWindow.cpp
+++ b/dom/src/base/nsGlobalWindow.cpp
@@ -1814,16 +1814,17 @@ nsGlobalWindow::SetNewDocument(nsIDocume
                                                          (currentInner));
 
             termFuncSet = PR_TRUE;
           }
         }
 
         // Don't clear scope on our current inner window if it's going to be
         // held in the bfcache.
+        // XXXldb Move this out of currentInner->mJSObject check!
         if (!currentInner->IsFrozen()) {
           // Skip the ClearScope if we set a termination function to do
           // it ourselves, later.
           currentInner->FreeInnerObjects(!termFuncSet);
         }
       }
 
       mInnerWindow = newInnerWindow;
diff --git a/dom/src/base/nsJSEnvironment.cpp b/dom/src/base/nsJSEnvironment.cpp
--- a/dom/src/base/nsJSEnvironment.cpp
+++ b/dom/src/base/nsJSEnvironment.cpp
@@ -3047,16 +3047,93 @@ static JSFunctionSpec TraceMallocFunctio
     {"TraceMallocCloseLogFD",      TraceMallocCloseLogFD,      1, 0, 0},
     {"TraceMallocLogTimestamp",    TraceMallocLogTimestamp,    1, 0, 0},
     {"TraceMallocDumpAllocations", TraceMallocDumpAllocations, 1, 0, 0},
     {nsnull,                       nsnull,                     0, 0, 0}
 };
 
 #endif /* NS_TRACE_MALLOC */
 
+#ifdef LINUX
+
+#include <malloc.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <stdio.h>
+#include <errno.h>
+
+static void
+dump_mallinfo(FILE *ofp)
+{
+    struct mallinfo mi = mallinfo();
+    fprintf(ofp,
+            "%8d non-mmapped space allocated from system (bytes)\n"
+            "%8d free chunks (count)\n"
+            "%8d fastbin blocks (count)\n"
+            "%8d mmapped regions (count)\n"
+            "%8d space in mmapped regions (bytes)\n"
+            "%8d maximum total allocated space (bytes)\n"
+            "%8d space available in freed fastbin blocks (bytes)\n"
+            "%8d total allocated space (bytes)\n"
+            "%8d total free space (bytes)\n"
+            "%8d top-most, releasable (via malloc_trim) space (bytes)\n",
+            mi.arena, mi.ordblks, mi.smblks, mi.hblks, mi.hblkhd,
+            mi.usmblks, mi.fsmblks, mi.uordblks, mi.fordblks, mi.keepcost);
+}
+
+static void
+dump_pid_proc_file(FILE *ofp, const char* procfile)
+{
+    char filename[40];
+    snprintf(filename, sizeof(filename),
+             "/proc/%d/%s", getpid(), procfile);
+    FILE *in = fopen(filename, "r");
+    if (!in)
+        return;
+
+    char buf[8192];
+    while (!feof(in)) {
+        size_t s = fread(buf, 1, sizeof(buf), in);
+        fwrite(buf, 1, s, ofp);
+    }
+
+    fclose(in);
+}
+
+static JSBool
+DumpHeapInfo(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
+{
+    JSString *str = JS_ValueToString(cx, argv[0]);
+    if (!str)
+        return JS_FALSE;
+    const char *pathname = JS_GetStringBytes(str);
+    FILE *ofp = fopen(pathname, "w");
+    if (!ofp) {
+        JS_ReportError(cx, "can't dump to %s: %s", pathname, strerror(errno));
+        return JS_FALSE;
+    }
+
+    dump_mallinfo(ofp);
+    fprintf(ofp, "-----\n");
+    dump_pid_proc_file(ofp, "maps");
+    fprintf(ofp, "-----\n");
+    dump_pid_proc_file(ofp, "status");
+    fprintf(ofp, "-----\n");
+
+    fclose(ofp);
+
+    return JS_TRUE;
+}
+
+static JSFunctionSpec DumpHeapFunctions[] = {
+    {"DumpHeapInfo",               DumpHeapInfo,               1, 0, 0},
+    {nsnull,                       nsnull,                     0, 0, 0}
+};
+#endif
+
 #ifdef MOZ_JPROF
 
 #include <signal.h>
 
 inline PRBool
 IsJProfAction(struct sigaction *action)
 {
     return (action->sa_sigaction &&
@@ -3177,16 +3254,20 @@ nsJSContext::InitClasses(void *aGlobalOb
     ::JS_SetOptions(mContext, mDefaultJSOptions);
   } else {
     rv = NS_ERROR_FAILURE;
   }
 
 #ifdef NS_TRACE_MALLOC
   // Attempt to initialize TraceMalloc functions
   ::JS_DefineFunctions(mContext, globalObj, TraceMallocFunctions);
+#endif
+
+#ifdef LINUX
+  ::JS_DefineFunctions(mContext, globalObj, DumpHeapFunctions);
 #endif
 
 #ifdef MOZ_JPROF
   // Attempt to initialize JProf functions
   ::JS_DefineFunctions(mContext, globalObj, JProfFunctions);
 #endif
 
 #ifdef MOZ_SHARK
diff --git a/extensions/layout-debug/src/nsDebugFactory.cpp b/extensions/layout-debug/src/nsDebugFactory.cpp
--- a/extensions/layout-debug/src/nsDebugFactory.cpp
+++ b/extensions/layout-debug/src/nsDebugFactory.cpp
@@ -45,17 +45,17 @@
 #include "nsIGenericFactory.h"
 #include "nsICategoryManager.h"
 #include "nsIServiceManager.h"
 
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsRegressionTester)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsLayoutDebuggingTools)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsLayoutDebugCLH)
 
-static NS_IMETHODIMP
+static NS_METHOD
 RegisterCommandLineHandlers(nsIComponentManager* compMgr, nsIFile* path,
                             const char *location, const char *type,
                             const nsModuleComponentInfo *info)
 {
   nsresult rv;
   nsCOMPtr<nsICategoryManager> catMan (do_GetService(NS_CATEGORYMANAGER_CONTRACTID));
   NS_ENSURE_TRUE(catMan, NS_ERROR_FAILURE);
 
@@ -63,17 +63,17 @@ RegisterCommandLineHandlers(nsIComponent
                                 "@mozilla.org/commandlinehandler/general-startup;1?type=layoutdebug",
                                 PR_TRUE, PR_TRUE, nsnull);
   if (NS_FAILED(rv))
     return NS_ERROR_FAILURE;
 
   return NS_OK;
 }
 
-static NS_IMETHODIMP
+static NS_METHOD
 UnregisterCommandLineHandlers(nsIComponentManager* compMgr, nsIFile *path,
                               const char *location,
                               const nsModuleComponentInfo *info)
 {
   nsCOMPtr<nsICategoryManager> catMan (do_GetService(NS_CATEGORYMANAGER_CONTRACTID));
   NS_ENSURE_TRUE(catMan, NS_ERROR_FAILURE);
 
   catMan->DeleteCategoryEntry("command-line-handler", "m-layoutdebug",
diff --git a/extensions/layout-debug/src/nsLayoutDebuggingTools.cpp b/extensions/layout-debug/src/nsLayoutDebuggingTools.cpp
--- a/extensions/layout-debug/src/nsLayoutDebuggingTools.cpp
+++ b/extensions/layout-debug/src/nsLayoutDebuggingTools.cpp
@@ -143,24 +143,25 @@ nsLayoutDebuggingTools::~nsLayoutDebuggi
 {
 }
 
 NS_IMPL_ISUPPORTS1(nsLayoutDebuggingTools, nsILayoutDebuggingTools)
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::Init(nsIDOMWindow *aWin)
 {
+    mPrefs = do_GetService(NS_PREF_CONTRACTID);
+
     {
         nsCOMPtr<nsPIDOMWindow> window = do_QueryInterface(aWin);
         if (!window)
             return NS_ERROR_UNEXPECTED;
         mDocShell = window->GetDocShell();
     }
-
-    mPrefs = do_GetService(NS_PREF_CONTRACTID);
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_UNEXPECTED);
 
     GetBoolPref("nglayout.debug.paint_flashing", &mPaintFlashing);
     GetBoolPref("nglayout.debug.paint_dumping", &mPaintDumping);
     GetBoolPref("nglayout.debug.invalidate_dumping", &mInvalidateDumping);
     GetBoolPref("nglayout.debug.event_dumping", &mEventDumping);
     GetBoolPref("nglayout.debug.motion_event_dumping", &mMotionEventDumping);
     GetBoolPref("nglayout.debug.crossing_event_dumping", &mCrossingEventDumping);
     GetBoolPref("layout.reflow.showframecounts", &mReflowCounts);
@@ -174,16 +175,17 @@ nsLayoutDebuggingTools::Init(nsIDOMWindo
     }
 
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::NewURILoaded()
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
     // Reset all the state that should be reset between pages.
 
     // XXX Some of these should instead be transferred between pages!
     mEditorMode = PR_FALSE;
     mVisualDebugging = PR_FALSE;
     mVisualEventDebugging = PR_FALSE;
 
     mReflowCounts = PR_FALSE;
@@ -319,16 +321,17 @@ nsLayoutDebuggingTools::GetReflowCounts(
 {
     *aShow = mReflowCounts;
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::SetReflowCounts(PRBool aShow)
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
     nsCOMPtr<nsIPresShell> shell(pres_shell(mDocShell)); 
     if (shell) {
 #ifdef MOZ_REFLOW_PERF
         shell->SetPaintFrameCount(aShow);
         SetBoolPrefAndRefresh("layout.reflow.showframecounts", aShow);
         mReflowCounts = aShow;
 #else
         printf("************************************************\n");
@@ -368,16 +371,17 @@ static void DumpAWebShell(nsIDocShellTre
     for (i = aIndent; --i >= 0; )
         fprintf(out, "  ");
     fputs(">\n", out);
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::DumpWebShells()
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
     nsCOMPtr<nsIDocShellTreeItem> shellAsItem(do_QueryInterface(mDocShell));
     DumpAWebShell(shellAsItem, stdout, 0);
     return NS_OK;
 }
 
 static
 void
 DumpContentRecur(nsIDocShell* aDocShell, FILE* out)
@@ -409,120 +413,121 @@ DumpContentRecur(nsIDocShell* aDocShell,
         }
     }
 #endif
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::DumpContent()
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
     DumpContentRecur(mDocShell, stdout);
     return NS_OK;
 }
 
 static void
 DumpFramesRecur(nsIDocShell* aDocShell, FILE* out)
 {
-    if (nsnull != aDocShell) {
-        fprintf(out, "webshell=%p \n", static_cast<void*>(aDocShell));
-        nsCOMPtr<nsIPresShell> shell(pres_shell(aDocShell));
-        if (shell) {
-            nsIFrame* root = shell->GetRootFrame();
-            if (root) {
-                nsIFrameDebug* fdbg;
-                if (NS_SUCCEEDED(CallQueryInterface(root, &fdbg))) {
-                    fdbg->List(out, 0);
-                }
+    fprintf(out, "webshell=%p \n", static_cast<void*>(aDocShell));
+    nsCOMPtr<nsIPresShell> shell(pres_shell(aDocShell));
+    if (shell) {
+        nsIFrame* root = shell->GetRootFrame();
+        if (root) {
+            nsIFrameDebug* fdbg;
+            if (NS_SUCCEEDED(CallQueryInterface(root, &fdbg))) {
+                fdbg->List(out, 0);
             }
         }
-        else {
-            fputs("null pres shell\n", out);
-        }
+    }
+    else {
+        fputs("null pres shell\n", out);
+    }
 
-        // dump the frames of the sub documents
-        PRInt32 i, n;
-        nsCOMPtr<nsIDocShellTreeNode> docShellAsNode(do_QueryInterface(aDocShell));
-        docShellAsNode->GetChildCount(&n);
-        for (i = 0; i < n; ++i) {
-            nsCOMPtr<nsIDocShellTreeItem> child;
-            docShellAsNode->GetChildAt(i, getter_AddRefs(child));
-            nsCOMPtr<nsIDocShell> childAsShell(do_QueryInterface(child));
-            if (childAsShell) {
-                DumpFramesRecur(childAsShell, out);
-            }
+    // dump the frames of the sub documents
+    PRInt32 i, n;
+    nsCOMPtr<nsIDocShellTreeNode> docShellAsNode(do_QueryInterface(aDocShell));
+    docShellAsNode->GetChildCount(&n);
+    for (i = 0; i < n; ++i) {
+        nsCOMPtr<nsIDocShellTreeItem> child;
+        docShellAsNode->GetChildAt(i, getter_AddRefs(child));
+        nsCOMPtr<nsIDocShell> childAsShell(do_QueryInterface(child));
+        if (childAsShell) {
+            DumpFramesRecur(childAsShell, out);
         }
     }
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::DumpFrames()
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
     DumpFramesRecur(mDocShell, stdout);
     return NS_OK;
 }
 
 static
 void
 DumpViewsRecur(nsIDocShell* aDocShell, FILE* out)
 {
 #ifdef DEBUG
-    if (aDocShell) {
-        fprintf(out, "docshell=%p \n", static_cast<void*>(aDocShell));
-        nsCOMPtr<nsIViewManager> vm(view_manager(aDocShell));
-        if (vm) {
-            nsIView* root;
-            vm->GetRootView(root);
-            if (nsnull != root) {
-                root->List(out);
-            }
+    fprintf(out, "docshell=%p \n", static_cast<void*>(aDocShell));
+    nsCOMPtr<nsIViewManager> vm(view_manager(aDocShell));
+    if (vm) {
+        nsIView* root;
+        vm->GetRootView(root);
+        if (nsnull != root) {
+            root->List(out);
         }
-        else {
-            fputs("null view manager\n", out);
-        }
+    }
+    else {
+        fputs("null view manager\n", out);
+    }
 
-        // dump the views of the sub documents
-        PRInt32 i, n;
-        nsCOMPtr<nsIDocShellTreeNode> docShellAsNode(do_QueryInterface(aDocShell));
-        docShellAsNode->GetChildCount(&n);
-        for (i = 0; i < n; i++) {
-            nsCOMPtr<nsIDocShellTreeItem> child;
-            docShellAsNode->GetChildAt(i, getter_AddRefs(child));
-            nsCOMPtr<nsIDocShell> childAsShell(do_QueryInterface(child));
-            if (childAsShell) {
-                DumpViewsRecur(childAsShell, out);
-            }
+    // dump the views of the sub documents
+    PRInt32 i, n;
+    nsCOMPtr<nsIDocShellTreeNode> docShellAsNode(do_QueryInterface(aDocShell));
+    docShellAsNode->GetChildCount(&n);
+    for (i = 0; i < n; i++) {
+        nsCOMPtr<nsIDocShellTreeItem> child;
+        docShellAsNode->GetChildAt(i, getter_AddRefs(child));
+        nsCOMPtr<nsIDocShell> childAsShell(do_QueryInterface(child));
+        if (childAsShell) {
+            DumpViewsRecur(childAsShell, out);
         }
     }
 #endif // DEBUG
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::DumpViews()
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
     DumpViewsRecur(mDocShell, stdout);
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::DumpStyleSheets()
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
 #ifdef DEBUG
     FILE *out = stdout;
     nsCOMPtr<nsIPresShell> shell(pres_shell(mDocShell)); 
     if (shell)
         shell->ListStyleSheets(out);
     else
         fputs("null pres shell\n", out);
 #endif
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::DumpStyleContexts()
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
 #ifdef DEBUG
     FILE *out = stdout;
     nsCOMPtr<nsIPresShell> shell(pres_shell(mDocShell)); 
     if (shell) {
         nsIFrame* root = shell->GetRootFrame();
         if (!root) {
             fputs("null root frame\n", out);
         } else {
@@ -533,16 +538,17 @@ nsLayoutDebuggingTools::DumpStyleContext
     }
 #endif
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::DumpReflowStats()
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
 #ifdef DEBUG
     nsCOMPtr<nsIPresShell> shell(pres_shell(mDocShell)); 
     if (shell) {
 #ifdef MOZ_REFLOW_PERF
         shell->DumpReflows();
 #else
         printf("************************************************\n");
         printf("Sorry, you have not built with MOZ_REFLOW_PERF=1\n");
@@ -564,16 +570,17 @@ void nsLayoutDebuggingTools::ForceRefres
         vm->UpdateView(root, NS_VMREFRESH_IMMEDIATE);
     }
 }
 
 nsresult
 nsLayoutDebuggingTools::SetBoolPrefAndRefresh(const char * aPrefName,
                                               PRBool aNewVal)
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
     NS_ENSURE_TRUE(mPrefs && aPrefName, NS_OK);
 
     mPrefs->SetBoolPref(aPrefName, aNewVal);
     mPrefs->SavePrefFile(nsnull);
 
     ForceRefresh();
 
     return NS_OK;
diff --git a/extensions/layout-debug/src/nsRegressionTester.cpp b/extensions/layout-debug/src/nsRegressionTester.cpp
--- a/extensions/layout-debug/src/nsRegressionTester.cpp
+++ b/extensions/layout-debug/src/nsRegressionTester.cpp
@@ -137,16 +137,39 @@ nsRegressionTester::DumpFrameModel(nsIDO
     fdbg->DumpRegressionData(presShell->GetPresContext(), fp, 0, dumpStyle);
   }
   if (fp != stdout)
     fclose(fp);
   *aResult = DUMP_RESULT_COMPLETED;
   return NS_OK;
 }
 
+#if 0
+NS_IMETHODIMP
+nsRegressionTester::DumpPrintFrameModel(nsIDOMWindow *aWindowToDump, nsILocalFile *aDestFile)
+{
+  nsCOMPtr<nsIDocShell> docShell;
+  rv = GetDocShellFromWindow(aWindowToDump, getter_AddRefs(docShell));
+
+  nsCOMPtr<nsIContentViewer> cv;
+  docShell->GetContentViewer(getter_AddRefs(cv));
+  nsCOMPtr<nsIContentViewerFile> cvf = do_QueryInterface(cv);
+
+  FILE* fp = stdout;
+  if (aDestFile)
+  {
+    rv = aDestFile->OpenANSIFileDesc("w", &fp);
+    if (NS_FAILED(rv)) return rv;
+  }
+
+  cvf->Print(PR_TRUE, fp, nsnull);
+  return NS_OK;
+}
+#endif
+
 NS_IMETHODIMP
 nsRegressionTester::CompareFrameModels(nsILocalFile *aBaseFile, nsILocalFile *aVerFile, PRUint32 aFlags, PRInt32 *aResult) 
 {
   NS_ENSURE_ARG(aBaseFile);
   NS_ENSURE_ARG(aVerFile);
   NS_ENSURE_ARG_POINTER(aResult);
   
   *aResult = NS_OK;
diff --git a/extensions/pref/system-pref/src/gconf/nsSystemPrefService.cpp b/extensions/pref/system-pref/src/gconf/nsSystemPrefService.cpp
--- a/extensions/pref/system-pref/src/gconf/nsSystemPrefService.cpp
+++ b/extensions/pref/system-pref/src/gconf/nsSystemPrefService.cpp
@@ -594,20 +594,23 @@ gconfDeleteObserver(void *aElement, void
 
 GConfProxy::GConfProxy(nsSystemPrefService *aSysPrefService):
     mGConfClient(nsnull),
     mGConfLib(nsnull),
     mInitialized(PR_FALSE),
     mSysPrefService(aSysPrefService),
     mObservers(nsnull)
 {
+    MOZ_COUNT_CTOR(GConfProxy);
 }
 
 GConfProxy::~GConfProxy()
 {
+    MOZ_COUNT_DTOR(GConfProxy);
+
     if (mGConfClient)
         g_object_unref(G_OBJECT(mGConfClient));
 
     if (mObservers) {
         (void)mObservers->EnumerateForwards(gconfDeleteObserver, nsnull);
         delete mObservers;
     }
 
diff --git a/gfx/thebes/src/gfxPangoFonts.cpp b/gfx/thebes/src/gfxPangoFonts.cpp
--- a/gfx/thebes/src/gfxPangoFonts.cpp
+++ b/gfx/thebes/src/gfxPangoFonts.cpp
@@ -67,16 +67,20 @@
 #include <pango/pango.h>
 #include <pango/pangofc-fontmap.h>
 
 #ifdef MOZ_WIDGET_GTK2
 #include <gdk/gdkscreen.h>
 #endif
 
 #include <math.h>
+
+#ifdef DEBUG_dbaron_off
+#define DEBUG_print_glyphs
+#endif
 
 #define FLOAT_PANGO_SCALE ((gfxFloat)PANGO_SCALE)
 
 #ifndef PANGO_VERSION_CHECK
 #define PANGO_VERSION_CHECK(x,y,z) 0
 #endif
 #ifndef PANGO_GLYPH_UNKNOWN_FLAG
 #define PANGO_GLYPH_UNKNOWN_FLAG ((PangoGlyph)0x10000000)
diff --git a/gfx/thebes/src/nsUnicodeRange.cpp b/gfx/thebes/src/nsUnicodeRange.cpp
--- a/gfx/thebes/src/nsUnicodeRange.cpp
+++ b/gfx/thebes/src/nsUnicodeRange.cpp
@@ -31,16 +31,18 @@
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "nsUnicodeRange.h"
+
+// XXXldb Replace this with something generated from the Unicode database.
 
 // This table depends on unicode range definitions. 
 // Each item's index must correspond unicode range value
 // eg. x-cyrillic = LangGroupTable[kRangeCyrillic]
 static const char *gUnicodeRangeToLangGroupTable[] = 
 {
   "x-cyrillic",
   "el",
diff --git a/intl/uconv/native/nsNativeUConvService.cpp b/intl/uconv/native/nsNativeUConvService.cpp
--- a/intl/uconv/native/nsNativeUConvService.cpp
+++ b/intl/uconv/native/nsNativeUConvService.cpp
@@ -312,22 +312,22 @@ IConvAdaptor::ConvertInternal(void * aSr
                 break;
             }
             
             if (errno == EILSEQ) {
 
                 if (mReplaceOnError) {
                     if (aDestCharSize == 1) {
                         (*(char*)aDest) = (char)mReplaceChar;
-                        aDest = (char*)aDest + sizeof(char);
+                        aDest = (char*)aDest + 1;
                     }
                     else
                     {
                         (*(PRUnichar*)aDest) = (PRUnichar)mReplaceChar;
-                        aDest = (PRUnichar*)aDest + sizeof(PRUnichar);
+                        aDest = (PRUnichar*)aDest + 1;
                     
                     }
                     inLeft -= aSrcCharSize;
                     outLeft -= aDestCharSize;
 
 #ifdef DEBUG
                     printf(" * IConvAdaptor - replacing char in output  ( %s -> %s )\n", 
                            mFrom.get(), mTo.get());
diff --git a/intl/unicharutil/tools/gentransliterate.pl b/intl/unicharutil/tools/gentransliterate.pl
--- a/intl/unicharutil/tools/gentransliterate.pl
+++ b/intl/unicharutil/tools/gentransliterate.pl
@@ -72,16 +72,19 @@
 # the terms of any one of the MPL, the GPL or the LGPL.
 #
 # ***** END LICENSE BLOCK *****
 
 # 
 # THIS FILE IS GENERATED BY mozilla/intl/unicharutil/tools/gentransliterate.pl
 # PLEASE DO NOT MODIFY THIS FILE BY HAND
 #
+END_OF_HEADER
+
+$handcoded = <<END_OF_HANDCODED;
 entity.list.name=transliterate
 entity.169=(c)
 #
 #
 # Here are the windows-1252 characters from the range 0x80 - 0x9F
 #
 END_OF_HEADER
 
diff --git a/js/src/config/Makefile.in b/js/src/config/Makefile.in
--- a/js/src/config/Makefile.in
+++ b/js/src/config/Makefile.in
@@ -43,21 +43,19 @@ VPATH		= @srcdir@
 VPATH		= @srcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 # For sanity's sake, we compile nsinstall without the wrapped system
 # headers, so that we can use it to set up the wrapped system headers.
 VISIBILITY_FLAGS =
 
-ifneq (,$(CROSS_COMPILE)$(filter-out WINNT OS2,$(OS_ARCH)))
-ifneq ($(OS_ARCH), WINCE)
+ifneq (,$(CROSS_COMPILE)$(filter-out WINCE WINNT OS2,$(OS_ARCH)))
 HOST_PROGRAM	= nsinstall$(HOST_BIN_SUFFIX)
 HOST_CSRCS	= nsinstall.c pathsub.c
-endif
 endif
 
 PLSRCS		= nfspwd.pl revdepth.pl
 
 TARGETS		= $(HOST_PROGRAM) $(PLSRCS:.pl=) $(SIMPLE_PROGRAMS)
 
 # IMPORTANT: Disable NSBUILDROOT for this directory only, otherwise we have
 # a recursive rule for finding nsinstall and the Perl scripts.
diff --git a/js/src/xpconnect/src/XPCDispInterface.cpp b/js/src/xpconnect/src/XPCDispInterface.cpp
--- a/js/src/xpconnect/src/XPCDispInterface.cpp
+++ b/js/src/xpconnect/src/XPCDispInterface.cpp
@@ -360,16 +360,18 @@ JSBool XPCDispInterface::Member::GetValu
                                          JS_GetStringBytes(JSVAL_TO_STRING(mName)));
         if(!fun)
             return JS_FALSE;
 
         JSObject* funobj = JS_GetFunctionObject(fun);
         if(!funobj)
             return JS_FALSE;
 
+        // XXXldb root funobj?
+
         // Store ourselves and our native interface within the JSObject
         if(!JS_SetReservedSlot(ccx, funobj, 0, PRIVATE_TO_JSVAL(this)))
             return JS_FALSE;
 
         if(!JS_SetReservedSlot(ccx, funobj, 1, PRIVATE_TO_JSVAL(iface)))
             return JS_FALSE;
 
         {   // scoped lock
diff --git a/js/src/xpconnect/src/xpcwrappednativescope.cpp b/js/src/xpconnect/src/xpcwrappednativescope.cpp
--- a/js/src/xpconnect/src/xpcwrappednativescope.cpp
+++ b/js/src/xpconnect/src/xpcwrappednativescope.cpp
@@ -753,21 +753,17 @@ void DEBUG_CheckForComponentsInScope(XPC
         return;
 
     // This is pretty much always bad. It usually means that native code is
     // making a callback to an interface implemented in JavaScript, but the
     // document where the JS object was created has already been cleared and the
     // global properties of that document's window are *gone*. Generally this
     // indicates a problem that should be addressed in the design and use of the
     // callback code.
-#ifdef I_FOOLISHLY_WANT_TO_IGNORE_THIS_LIKE_THE_OTHER_CRAP_WE_PRINTF
-    NS_WARNING("XPConnect is being called on a scope without a 'Components' property!");
-#else
     NS_ERROR("XPConnect is being called on a scope without a 'Components' property!");
-#endif
 }
 #else
 #define DEBUG_CheckForComponentsInScope(ccx, obj, OKIfNotInitialized) ((void)0)
 #endif
 
 // static
 XPCWrappedNativeScope*
 XPCWrappedNativeScope::FindInJSObjectScope(XPCCallContext& ccx, JSObject* obj,
diff --git a/layout/base/nsBidi.cpp b/layout/base/nsBidi.cpp
--- a/layout/base/nsBidi.cpp
+++ b/layout/base/nsBidi.cpp
@@ -1,9 +1,9 @@
-/* -*- Mode: C; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
  *
  * ***** BEGIN LICENSE BLOCK *****
  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
  *
  * The contents of this file are subject to the Mozilla Public License Version
  * 1.1 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * http://www.mozilla.org/MPL/
diff --git a/layout/base/nsBidi.h b/layout/base/nsBidi.h
--- a/layout/base/nsBidi.h
+++ b/layout/base/nsBidi.h
@@ -262,17 +262,17 @@ typedef PRUint8 DirProp;
 #define IS_FIRST_SURROGATE(uchar) (((uchar)&0xfc00)==0xd800)
 #define IS_SECOND_SURROGATE(uchar) (((uchar)&0xfc00)==0xdc00)
 
 /* get the UTF-32 value directly from the surrogate pseudo-characters */
 #define SURROGATE_OFFSET ((0xd800<<10UL)+0xdc00-0x10000)
 #define GET_UTF_32(first, second) (((first)<<10UL)+(second)-SURROGATE_OFFSET)
 
 
-#define UTF_ERROR_VALUE 0xffff
+#define UTF_ERROR_VALUE 0xfffd
 /* definitions with forward iteration --------------------------------------- */
 
 /*
  * all the macros that go forward assume that
  * the initial offset is 0<=i<length;
  * they update the offset
  */
 
diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -8117,16 +8117,19 @@ nsCSSFrameConstructor::FindNextAnonymous
   return nsnull;
 }
 
 // This gets called to see if the frames corresponding to aSiblingDisplay and aDisplay
 // should be siblings in the frame tree. Although (1) rows and cols, (2) row groups 
 // and col groups, (3) row groups and captions, (4) legends and content inside fieldsets, (5) popups and other kids of the menu
 // are siblings from a content perspective, they are not considered siblings in the 
 // frame tree.
+// XXXldb 307394 [Stir DOM] The way this is used seems completely bogus.
+// We should construct or grovel through pseudo-frames if this is false,
+// not skip content.
 PRBool
 nsCSSFrameConstructor::IsValidSibling(nsIFrame*              aSibling,
                                       nsIContent*            aContent,
                                       PRUint8&               aDisplay)
 {
   nsIFrame* parentFrame = aSibling->GetParent();
   nsIAtom* parentType = nsnull;
   nsIAtom* grandparentType = nsnull;
@@ -8250,16 +8253,18 @@ nsCSSFrameConstructor::FindPreviousSibli
                                            PRInt32     aIndexInContainer,
                                            nsIContent* aChild)
 {
   NS_ASSERTION(aContainer, "null argument");
 
   ChildIterator first, iter;
   nsresult rv = ChildIterator::Init(aContainer, &first, &iter);
   NS_ENSURE_SUCCESS(rv, nsnull);
+  // XXXldb 307394 [Stir DOM on XUL] if |iter| has mNodes, then this is
+  // meaningless.  Should we even use ChildIterator at all?
   iter.seek(aIndexInContainer);
 
   PRUint8 childDisplay = UNSET_DISPLAY;
   // Note: not all content objects are associated with a frame (e.g., if it's
   // `display: none') so keep looking until we find a previous frame
   while (iter-- != first) {
     nsIFrame* prevSibling =
       FindFrameForContentSibling(nsCOMPtr<nsIContent>(*iter), aChild,
@@ -8286,16 +8291,18 @@ nsIFrame*
 nsIFrame*
 nsCSSFrameConstructor::FindNextSibling(nsIContent* aContainer,
                                        PRInt32     aIndexInContainer,
                                        nsIContent* aChild)
 {
   ChildIterator iter, last;
   nsresult rv = ChildIterator::Init(aContainer, &iter, &last);
   NS_ENSURE_SUCCESS(rv, nsnull);
+  // XXXldb 307394 [Stir DOM on XUL] if |iter| has mNodes, then this is
+  // meaningless.  Should we even use ChildIterator at all?
   iter.seek(aIndexInContainer);
 
   // Catch the case where someone tries to append
   if (iter == last)
     return nsnull;
 
   PRUint8 childDisplay = UNSET_DISPLAY;
 
@@ -8849,17 +8856,17 @@ nsCSSFrameConstructor::ContentInserted(n
   parentFrame = insertionPoint;
 
   // Find the frame that precedes the insertion point. Walk backwards
   // from the parent frame to get the parent content, because if an
   // XBL insertion point is involved, we'll need to use _that_ to find
   // the preceding frame.
   nsIContent* container = parentFrame->GetContent();
 
-  // XXX if the insertionPoint was different from the original
+  // XXX 307394 if the insertionPoint was different from the original
   // parentFrame, then aIndexInContainer is most likely completely
   // wrong. What we need to do here is remember the original index,
   // then as we insert, search the child list where we're about to put
   // the new frame to make sure that it appears after any siblings
   // with a lower index, and before any siblings with a higher
   // index. Same with FindNextSibling(), below.
   nsIFrame* prevSibling = (aIndexInContainer >= 0)
     ? FindPreviousSibling(container, aIndexInContainer, aChild)
@@ -11244,16 +11251,19 @@ nsCSSFrameConstructor::GetFirstLineStyle
       ResolvePseudoStyleFor(aContent,
                             nsCSSPseudoElements::firstLine, aStyleContext);
   }
   return nsnull;
 }
 
 // Predicate to see if a given content (block element) has
 // first-letter style applied to it.
+// XXXldb Bug 362901 This isn't necessarily going to work if changes are
+// batched, since removing the style rule at the same time as messing
+// with content that relies on this could break things pretty badly.
 PRBool
 nsCSSFrameConstructor::ShouldHaveFirstLetterStyle(nsIContent* aContent,
                                                   nsStyleContext* aStyleContext)
 {
   return nsLayoutUtils::HasPseudoStyle(aContent, aStyleContext,
                                        nsCSSPseudoElements::firstLetter,
                                        mPresShell->GetPresContext());
 }
@@ -12536,16 +12546,17 @@ nsCSSFrameConstructor::ConstructInline(n
   aNewFrame->SetInitialChildList(nsnull, list1);
                                              
   // list2's frames belong to an anonymous block that we create right
   // now. The anonymous block will be the parent of the block children
   // of the inline.
   nsIAtom* blockStyle;
   nsRefPtr<nsStyleContext> blockSC;
   nsIFrame* blockFrame;
+  // XXXldb Remove :-moz-anonymous-positioned-block -- not supported by spec.
   if (aIsPositioned) {
     blockStyle = nsCSSAnonBoxes::mozAnonymousPositionedBlock;
     
     blockSC = mPresShell->StyleSet()->
       ResolvePseudoStyleFor(aContent, blockStyle, aStyleContext);
       
     blockFrame = NS_NewRelativeItemWrapperFrame(mPresShell, blockSC, 0);
   }
diff --git a/layout/base/tests/Makefile.in b/layout/base/tests/Makefile.in
--- a/layout/base/tests/Makefile.in
+++ b/layout/base/tests/Makefile.in
@@ -56,17 +56,17 @@ CPPSRCS		= \
 		$(NULL)
 
 SIMPLE_PROGRAMS	= $(CPPSRCS:.cpp=$(BIN_SUFFIX))
 
 LOCAL_INCLUDES	= \
 		-I$(srcdir)/../src \
 		$(NULL)
 
-EXTRA_DSO_LIBS	= gkbase_s gkgfx
+EXTRA_DSO_LIBS	= gkbase_s gkgfx gkconbase_s gkconshared_s gkconhtmlstyle_s
 
 LIBS		+= \
 		$(LIBS_DIR) \
 		$(EXTRA_DSO_LIBS) \
 		$(MOZ_UNICHARUTIL_LIBS) \
 		$(MOZ_COMPONENT_LIBS) \
 		$(MOZ_JS_LIBS) \
 		$(TK_LIBS) \
diff --git a/layout/forms/nsComboboxControlFrame.cpp b/layout/forms/nsComboboxControlFrame.cpp
--- a/layout/forms/nsComboboxControlFrame.cpp
+++ b/layout/forms/nsComboboxControlFrame.cpp
@@ -1225,17 +1225,17 @@ nsComboboxControlFrame::Destroy()
   // Revoke any pending RedisplayTextEvent
   mRedisplayTextEvent.Revoke();
 
   nsFormControlFrame::RegUnRegAccessKey(static_cast<nsIFrame*>(this), PR_FALSE);
 
   if (mDroppedDown) {
     // Get parent view
     nsIFrame * listFrame;
-    if (NS_OK == mListControlFrame->QueryInterface(NS_GET_IID(nsIFrame), (void **)&listFrame)) {
+    if (NS_SUCCEEDED(CallQueryInterface(mListControlFrame, &listFrame))) {
       nsIView* view = listFrame->GetView();
       NS_ASSERTION(view, "nsComboboxControlFrame view is null");
       if (view) {
         nsIWidget* widget = view->GetWidget();
         if (widget)
           widget->CaptureRollupEvents(this, PR_FALSE, PR_TRUE);
       }
     }
diff --git a/layout/forms/nsListControlFrame.h b/layout/forms/nsListControlFrame.h
--- a/layout/forms/nsListControlFrame.h
+++ b/layout/forms/nsListControlFrame.h
@@ -449,18 +449,18 @@ protected:
 
   static nsListControlFrame * mFocused;
   
 #ifdef DO_REFLOW_COUNTER
   PRInt32 mReflowId;
 #endif
 
 private:
-  NS_IMETHOD_(nsrefcnt) AddRef() { return NS_OK; }
-  NS_IMETHOD_(nsrefcnt) Release() { return NS_OK; }
+  NS_IMETHOD_(nsrefcnt) AddRef() { /*NS_NOTREACHED("not supported on frames");*/ return NS_OK; }
+  NS_IMETHOD_(nsrefcnt) Release() { /*NS_NOTREACHED("not supported on frames");*/ return NS_OK; }
 
   // for incremental typing navigation
   static nsAString& GetIncrementalString ();
   static DOMTimeStamp gLastKeyTime;
 };
 
 #endif /* nsListControlFrame_h___ */
 
diff --git a/layout/generic/nsBRFrame.cpp b/layout/generic/nsBRFrame.cpp
--- a/layout/generic/nsBRFrame.cpp
+++ b/layout/generic/nsBRFrame.cpp
@@ -137,17 +137,17 @@ BRFrame::Reflow(nsPresContext* aPresCont
       // creates some vertical whitespace.  It's necessary to use the
       // line-height rather than the font size because the
       // quirks-mode fix that doesn't apply the block's min
       // line-height makes this necessary to make BR cause a line
       // of the full line-height
 
       // We also do this in strict mode because BR should act like a
       // normal inline frame.  That line-height is used is important
-      // here for cases where the line-height is less that 1.
+      // here for cases where the line-height is less than 1.
       nsLayoutUtils::SetFontFromStyle(aReflowState.rendContext, mStyleContext);
       nsCOMPtr<nsIFontMetrics> fm;
       aReflowState.rendContext->GetFontMetrics(*getter_AddRefs(fm));
       if (fm) {
         nscoord ascent, descent;
         fm->GetMaxAscent(ascent);
         fm->GetMaxDescent(descent);
         nscoord logicalHeight = aReflowState.CalcLineHeight(this);
diff --git a/layout/generic/nsBlockFrame.cpp b/layout/generic/nsBlockFrame.cpp
--- a/layout/generic/nsBlockFrame.cpp
+++ b/layout/generic/nsBlockFrame.cpp
@@ -958,17 +958,17 @@ nsBlockFrame::Reflow(nsPresContext*     
   // Handle paginated overflow (see nsContainerFrame.h)
   nsRect overflowContainerBounds;
   if (GetPrevInFlow()) {
     ReflowOverflowContainerChildren(aPresContext, aReflowState,
                                     overflowContainerBounds, 0,
                                     state.mReflowStatus);
   }
 
-  // If the block is complete, put continuted floats in the closest ancestor 
+  // If the block is complete, put continued floats in the closest ancestor 
   // block that uses the same space manager and leave the block complete; this 
   // allows subsequent lines on the page to be impacted by floats. If the 
   // block is incomplete or there is no ancestor using the same space manager, 
   // put continued floats at the beginning of the first overflow line.
   if (state.mOverflowPlaceholders.NotEmpty()) {
     NS_ASSERTION(aReflowState.availableHeight != NS_UNCONSTRAINEDSIZE,
                  "Somehow we failed to fit all content, even though we have unlimited space!");
     if (NS_FRAME_IS_FULLY_COMPLETE(state.mReflowStatus)) {
@@ -5791,19 +5791,17 @@ nsBlockFrame::ReflowFloat(nsBlockReflowS
   if (floatFrame->GetType() == nsGkAtoms::letterFrame) {
     // We never split floating first letters; an incomplete state for
     // such frames simply means that there is more content to be
     // reflowed on the line.
     if (NS_FRAME_IS_NOT_COMPLETE(aReflowStatus)) 
       aReflowStatus = NS_FRAME_COMPLETE;
   }
 
-  if (NS_FAILED(rv)) {
-    return rv;
-  }
+  NS_ENSURE_SUCCESS(rv, rv);
 
   // Capture the margin information for the caller
   const nsMargin& m = floatRS.mComputedMargin;
   aFloatMargin.top = brc.GetTopMargin();
   aFloatMargin.right = m.right;
   // Only last in flows get a bottom margin
   if (NS_FRAME_IS_COMPLETE(aReflowStatus)) {
     brc.GetCarriedOutBottomMargin().Include(m.bottom);
@@ -6418,19 +6416,17 @@ nsBlockFrame::SetInitialChildList(nsIAto
       !IsFrameOfType(eMathML) &&
       nsRefPtr<nsStyleContext>(GetFirstLetterStyle(presContext)) != nsnull;
     NS_ASSERTION(haveFirstLetterStyle ==
                  ((mState & NS_BLOCK_HAS_FIRST_LETTER_STYLE) != 0),
                  "NS_BLOCK_HAS_FIRST_LETTER_STYLE state out of sync");
 #endif
     
     rv = AddFrames(aChildList, nsnull);
-    if (NS_FAILED(rv)) {
-      return rv;
-    }
+    NS_ENSURE_SUCCESS(rv, rv);
 
     // Create list bullet if this is a list-item. Note that this is done
     // here so that RenumberLists will work (it needs the bullets to
     // store the bullet numbers).
     const nsStyleDisplay* styleDisplay = GetStyleDisplay();
     if ((nsnull == GetPrevInFlow()) &&
         (NS_STYLE_DISPLAY_LIST_ITEM == styleDisplay->mDisplay) &&
         (nsnull == mBullet)) {
diff --git a/layout/generic/nsFrame.cpp b/layout/generic/nsFrame.cpp
--- a/layout/generic/nsFrame.cpp
+++ b/layout/generic/nsFrame.cpp
@@ -445,17 +445,17 @@ nsFrame::Init(nsIContent*      aContent,
     // The frame gets reconstructed if we toggle the -moz-transform
     // property, so we can set this bit here and then ignore it.
     mState |= NS_FRAME_MAY_BE_TRANSFORMED_OR_HAVE_RENDERING_OBSERVERS;
   }
   
   DidSetStyleContext(nsnull);
 
   if (IsBoxWrapped())
-    InitBoxMetrics(PR_FALSE);
+    InitBoxMetrics(PR_FALSE); // XXX propagate allocation failure?
 
   return NS_OK;
 }
 
 NS_IMETHODIMP nsFrame::SetInitialChildList(nsIAtom*        aListName,
                                            nsIFrame*       aChildList)
 {
   // XXX This shouldn't be getting called at all, but currently is for backwards
@@ -6199,16 +6199,17 @@ nsFrame::RefreshSizeCache(nsBoxLayoutSta
       nsIFrame* firstFrame = nsnull;
       PRInt32 framesOnLine;
       nsRect lineBounds;
       PRUint32 lineFlags;
 
       do {
          lines->GetLine(count, &firstFrame, &framesOnLine, lineBounds, &lineFlags);
 
+         // XXX This should sum across forced breaks!
          if (lineBounds.height > metrics->mBlockMinSize.height)
            metrics->mBlockMinSize.height = lineBounds.height;
 
          count++;
       } while(firstFrame);
     } else {
       metrics->mBlockMinSize.height = desiredSize.height;
     }
diff --git a/layout/generic/nsFrame.h b/layout/generic/nsFrame.h
--- a/layout/generic/nsFrame.h
+++ b/layout/generic/nsFrame.h
@@ -618,17 +618,17 @@ private:
                      nscoord aWidth,
                      nscoord aHeight,
                      PRBool aMoveFrame = PR_TRUE);
 
   NS_IMETHODIMP RefreshSizeCache(nsBoxLayoutState& aState);
 
   virtual nsILineIterator* GetLineIterator();
 
-protected:
+protected: // XXXldb Private!
   NS_IMETHOD_(nsrefcnt) AddRef(void);
   NS_IMETHOD_(nsrefcnt) Release(void);
 };
 
 // Start Display Reflow Debugging
 #ifdef DEBUG
 
   struct DR_cookie {
diff --git a/layout/generic/nsFrameFrame.cpp b/layout/generic/nsFrameFrame.cpp
--- a/layout/generic/nsFrameFrame.cpp
+++ b/layout/generic/nsFrameFrame.cpp
@@ -734,16 +734,19 @@ nsSubDocumentFrame::AttributeChanged(PRI
       parentTreeOwner->ContentShellRemoved(docShellAsItem);
 
       if (value.LowerCaseEqualsLiteral("content") ||
           StringBeginsWith(value, NS_LITERAL_STRING("content-"),
                            nsCaseInsensitiveStringComparator())) {
         PRBool is_targetable = is_primary ||
           value.LowerCaseEqualsLiteral("content-targetable");
 
+        // Old comment, maybe still valid?
+        // XXXldb The conditions under which this call is made are
+        // different from the conditions under which nsFrameLoader does.
         parentTreeOwner->ContentShellAdded(docShellAsItem, is_primary,
                                            is_targetable, value);
       }
     }
   }
 
   return NS_OK;
 }
diff --git a/layout/html/tests/block/rtest.sh b/layout/html/tests/block/rtest.sh
--- a/layout/html/tests/block/rtest.sh
+++ b/layout/html/tests/block/rtest.sh
@@ -23,16 +23,17 @@ dirs="  base \
         ../table/marvin \
         ../table/other \
         ../table/dom \
         ../table/printing \
         ../formctls/base \
         ../formctls/bugs \
         ../style/bugs \
         ../xbl \
+        net \
         "
 
 # This doesn't appear to work on Linux right now; needs support for a
 # null driver, perhaps?
 #extra_dirs="../table/printing"
 
 #extra_dirs="net/HTML_Chars net/W3C net/baron net/boxAcidTest net/glazman net/mozilla"
 
diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -254,18 +254,26 @@ protected:
   void ReleaseScanner(void);
 #ifdef MOZ_SVG
   PRBool IsSVGMode() const {
     return mScanner.IsSVGMode();
   }
 #endif
 
   PRBool GetToken(PRBool aSkipWS);
-  PRBool GetURLToken();
   void UngetToken();
+
+  // get the part in paretheses of the url() function, which is really a
+  // part of a token in the CSS grammar, but we're using a combination
+  // of the parser and the scanner to do it to hnadle the backtracking
+  // required by the error handling of the tokenization (since if we
+  // fail to scan the full token, we should fall back to tokenizing as
+  // FUNCTION ... ')').
+  // Note that this function WILL WRITE TO aURL IN SOME FAILURE CASES.
+  PRBool GetURLInParens(nsString& aURL);
 
   void AssertInitialState() {
     NS_PRECONDITION(!mHTMLMediaMode, "Bad initial state");
     NS_PRECONDITION(!mUnresolvablePrefixException, "Bad initial state");
     NS_PRECONDITION(!mParsingCompoundProperty, "Bad initial state");
   }
 
   PRBool ExpectSymbol(PRUnichar aSymbol, PRBool aSkipWS);
@@ -1226,31 +1234,45 @@ CSSParserImpl::GetToken(PRBool aSkipWS)
       continue;
     }
     return PR_TRUE;
   }
   return PR_FALSE;
 }
 
 PRBool
-CSSParserImpl::GetURLToken()
-{
-  for (;;) {
-    // XXXldb This pushback code doesn't make sense.
-    if (! mHavePushBack) {
-      if (! mScanner.NextURL(mToken)) {
-        break;
-      }
-    }
-    mHavePushBack = PR_FALSE;
-    if (eCSSToken_WhiteSpace != mToken.mType) {
-      return PR_TRUE;
-    }
-  }
-  return PR_FALSE;
+CSSParserImpl::GetURLInParens(nsString& aURL)
+{
+  if (!ExpectSymbol('(', PR_FALSE))
+    return PR_FALSE;
+
+  NS_ASSERTION(!mHavePushBack,
+               "ExpectSymbol returning success shouldn't leave pushback");
+  do {
+    if (! mScanner.NextURL(mToken)) {
+      return PR_FALSE;
+    }
+  } while (eCSSToken_WhiteSpace == mToken.mType);
+
+  if (eCSSToken_String != mToken.mType && eCSSToken_URL != mToken.mType)
+    return PR_FALSE;
+
+  aURL = mToken.mIdent;
+
+  if (!ExpectSymbol(')', PR_TRUE)) {
+    // in the failure case, we have to match parentheses, as if this
+    // weren't treated as a URL token by the tokenization
+
+    // XXX We really need to push aURL back into the buffer before this
+    // SkipUntil!
+    SkipUntil(')');
+    return PR_FALSE;
+  }
+
+  return PR_TRUE;
 }
 
 void
 CSSParserImpl::UngetToken()
 {
   NS_PRECONDITION(mHavePushBack == PR_FALSE, "double pushback");
   mHavePushBack = PR_TRUE;
 }
@@ -1449,24 +1471,18 @@ CSSParserImpl::GatherURL(nsString& aURL)
     return PR_FALSE;
   }
   if (eCSSToken_String == mToken.mType) {
     aURL = mToken.mIdent;
     return PR_TRUE;
   }
   else if (eCSSToken_Function == mToken.mType &&
            mToken.mIdent.LowerCaseEqualsLiteral("url") &&
-           ExpectSymbol('(', PR_FALSE) &&
-           GetURLToken() &&
-           (eCSSToken_String == mToken.mType ||
-            eCSSToken_URL == mToken.mType)) {
-    aURL = mToken.mIdent;
-    if (ExpectSymbol(')', PR_TRUE)) {
-      return PR_TRUE;
-    }
+           GetURLInParens(aURL)) {
+    return PR_TRUE;
   }
   return PR_FALSE;
 }
 
 PRBool
 CSSParserImpl::ParseMediaQuery(PRUnichar aStopSymbol,
                                nsMediaQuery **aQuery,
                                PRBool *aParsedSomething,
@@ -1922,33 +1938,27 @@ CSSParserImpl::ParseMozDocumentRule(Rule
     if (mToken.mIdent.LowerCaseEqualsLiteral("url")) {
       cur->func = nsCSSDocumentRule::eURL;
     } else if (mToken.mIdent.LowerCaseEqualsLiteral("url-prefix")) {
       cur->func = nsCSSDocumentRule::eURLPrefix;
     } else if (mToken.mIdent.LowerCaseEqualsLiteral("domain")) {
       cur->func = nsCSSDocumentRule::eDomain;
     }
 
-    if (!ExpectSymbol('(', PR_FALSE) ||
-        !GetURLToken() ||
-        (eCSSToken_String != mToken.mType &&
-         eCSSToken_URL != mToken.mType)) {
+    nsAutoString url;
+    if (!GetURLInParens(url)) {
       REPORT_UNEXPECTED_TOKEN(PEMozDocRuleNotURI);
-      delete urls;
-      return PR_FALSE;
-    }
-    if (!ExpectSymbol(')', PR_TRUE)) {
       delete urls;
       return PR_FALSE;
     }
 
     // We could try to make the URL (as long as it's not domain())
     // canonical and absolute with NS_NewURI and GetSpec, but I'm
     // inclined to think we shouldn't.
-    CopyUTF16toUTF8(mToken.mIdent, cur->url);
+    CopyUTF16toUTF8(url, cur->url);
   } while (ExpectSymbol(',', PR_TRUE));
 
   nsRefPtr<nsCSSDocumentRule> rule(new nsCSSDocumentRule());
   if (!rule) {
     mScanner.SetLowLevelError(NS_ERROR_OUT_OF_MEMORY);
     delete urls;
     return PR_FALSE;
   }
@@ -1982,28 +1992,20 @@ CSSParserImpl::ParseNameSpaceRule(RuleAp
     url = mToken.mIdent;
     if (ExpectSymbol(';', PR_TRUE)) {
       ProcessNameSpace(prefix, url, aAppendFunc, aData);
       return PR_TRUE;
     }
   }
   else if ((eCSSToken_Function == mToken.mType) &&
            (mToken.mIdent.LowerCaseEqualsLiteral("url"))) {
-    if (ExpectSymbol('(', PR_FALSE)) {
-      if (GetURLToken()) {
-        if ((eCSSToken_String == mToken.mType) || (eCSSToken_URL == mToken.mType)) {
-          url = mToken.mIdent;
-          if (ExpectSymbol(')', PR_TRUE)) {
-            if (ExpectSymbol(';', PR_TRUE)) {
-              ProcessNameSpace(prefix, url, aAppendFunc, aData);
-              return PR_TRUE;
-            }
-          }
-        }
-      }
+    if (GetURLInParens(url) &&
+        ExpectSymbol(';', PR_TRUE)) {
+      ProcessNameSpace(prefix, url, aAppendFunc, aData);
+      return PR_TRUE;
     }
   }
   REPORT_UNEXPECTED_TOKEN(PEAtNSUnexpected);
 
   return PR_FALSE;
 }
 
 PRBool
@@ -4624,27 +4626,18 @@ CSSParserImpl::ParseURL(nsCSSValue& aVal
 CSSParserImpl::ParseURL(nsCSSValue& aValue)
 {
   if (!mSheetPrincipal) {
     NS_NOTREACHED("Codepaths that expect to parse URLs MUST pass in an "
                   "origin principal");
     return PR_FALSE;
   }
 
-  if (!ExpectSymbol('(', PR_FALSE))
-    return PR_FALSE;
-  if (!GetURLToken())
-    return PR_FALSE;
-
-  nsCSSToken* tk = &mToken;
-  if (eCSSToken_String != tk->mType && eCSSToken_URL != tk->mType)
-    return PR_FALSE;
-
-  nsString url = tk->mIdent;
-  if (!ExpectSymbol(')', PR_TRUE))
+  nsString url;
+  if (!GetURLInParens(url))
     return PR_FALSE;
 
   // Translate url into an absolute url if the url is relative to the
   // style sheet.
   nsCOMPtr<nsIURI> uri;
   NS_NewURI(getter_AddRefs(uri), url, nsnull, mBaseURL);
 
   nsStringBuffer* buffer = nsCSSValue::BufferFromString(url);
diff --git a/layout/style/nsCSSScanner.cpp b/layout/style/nsCSSScanner.cpp
--- a/layout/style/nsCSSScanner.cpp
+++ b/layout/style/nsCSSScanner.cpp
@@ -848,89 +848,72 @@ nsCSSScanner::NextURL(nsCSSToken& aToken
 
   // WS
   if (IsWhitespace(ch)) {
     aToken.mType = eCSSToken_WhiteSpace;
     aToken.mIdent.Assign(PRUnichar(ch));
     (void) EatWhiteSpace();
     return PR_TRUE;
   }
-  if (ch == '/') {
-    PRInt32 nextChar = Peek();
-    if (nextChar == '*') {
-      (void) Read();
-#if 0
-      // If we change our storage data structures such that comments are
-      // stored (for Editor), we should reenable this code, condition it
-      // on being in editor mode, and apply glazou's patch from bug
-      // 60290.
-      aToken.mIdent.SetCapacity(2);
-      aToken.mIdent.Assign(PRUnichar(ch));
-      aToken.mIdent.Append(PRUnichar(nextChar));
-      return ParseCComment(aToken);
-#endif
-      return SkipCComment() && Next(aToken);
-    }
-  }
 
   // Process a url lexical token. A CSS1 url token can contain
   // characters beyond identifier characters (e.g. '/', ':', etc.)
   // Because of this the normal rules for tokenizing the input don't
   // apply very well. To simplify the parser and relax some of the
   // requirements on the scanner we parse url's here. If we find a
   // malformed URL then we emit a token of type "InvalidURL" so that
-  // the CSS1 parser can ignore the invalid input. We attempt to eat
-  // the right amount of input data when an invalid URL is presented.
+  // the CSS1 parser can ignore the invalid input.  The parser must
+  // treat an InvalidURL token like a Function token, and process
+  // tokens until a matching parenthesis.
 
   aToken.mType = eCSSToken_InvalidURL;
   nsString& ident = aToken.mIdent;
   ident.SetLength(0);
 
-  if (ch == ')') {
-    Pushback(ch);
-    // empty url spec; just get out of here
-    aToken.mType = eCSSToken_URL;
-  } else {
-    // start of a non-quoted url
-    Pushback(ch);
-    PRBool ok = PR_TRUE;
-    for (;;) {
-      ch = Read();
-      if (ch < 0) break;
-      if (ch == CSS_ESCAPE) {
-        ParseAndAppendEscape(ident);
-      } else if ((ch == '"') || (ch == '\'') || (ch == '(')) {
-        // This is an invalid URL spec
-        ok = PR_FALSE;
-      } else if (IsWhitespace(ch)) {
-        // Whitespace is allowed at the end of the URL
+  Pushback(ch);
+
+  // start of a non-quoted url (which may be empty)
+  PRBool ok = PR_TRUE;
+  for (;;) {
+    ch = Read();
+    if (ch < 0) break;
+    if (ch == CSS_ESCAPE) {
+      ParseAndAppendEscape(ident);
+    } else if ((ch == '"') || (ch == '\'') || (ch == '(')) {
+      // This is an invalid URL spec
+      ok = PR_FALSE;
+      Pushback(ch); // push it back so the parser can match tokens and
+                    // then closing parenthesis
+      break;
+    } else if (IsWhitespace(ch)) {
+      // Whitespace is allowed at the end of the URL
         (void) EatWhiteSpace();
         if (LookAhead(')')) {
-          Pushback(')');  // leave the closing symbol
-          // done!
-          break;
-        }
-        // Whitespace is followed by something other than a
-        // ")". This is an invalid url spec.
-        ok = PR_FALSE;
-      } else if (ch == ')') {
-        Pushback(ch);
-        // All done
+        Pushback(')');  // leave the closing symbol
+        // done!
         break;
-      } else {
-        // A regular url character.
-        ident.Append(PRUnichar(ch));
       }
+      // Whitespace is followed by something other than a
+      // ")". This is an invalid url spec.
+      ok = PR_FALSE;
+      break;
+    } else if (ch == ')') {
+      Pushback(ch);
+      // All done
+      break;
+    } else {
+      // A regular url character.
+      ident.Append(PRUnichar(ch));
     }
+  }
 
-    // If the result of the above scanning is ok then change the token
-    // type to a useful one.
-    if (ok) {
-      aToken.mType = eCSSToken_URL;
-    }
+  // If the result of the above scanning is ok then change the token
+  // type to a useful one.
+  if (ok) {
+    aToken.mType = eCSSToken_URL;
   }
   return PR_TRUE;
 }
 
 
 void
 nsCSSScanner::ParseAndAppendEscape(nsString& aOutput)
 {
diff --git a/layout/style/ua.css b/layout/style/ua.css
--- a/layout/style/ua.css
+++ b/layout/style/ua.css
@@ -116,16 +116,17 @@
   outline: 1px dotted;
 }
 
 /* Miscellaneous */
 
 *|*::-moz-anonymous-block, *|*::-moz-cell-content {
   display: block !important;
   position: static !important;
+  /* XXX shouldn't unicode-bidi inherit? */
 }
 
 *|*::-moz-anonymous-block, *|*::-moz-anonymous-positioned-block {
   /* we currently inherit from the inline that is split */
   outline: inherit;
   outline-offset: inherit;
   clip-path: inherit;
   filter: inherit;
diff --git a/layout/tables/FixedTableLayoutStrategy.cpp b/layout/tables/FixedTableLayoutStrategy.cpp
--- a/layout/tables/FixedTableLayoutStrategy.cpp
+++ b/layout/tables/FixedTableLayoutStrategy.cpp
@@ -122,28 +122,31 @@ FixedTableLayoutStrategy::GetMinWidth(ns
                       styleWidth->GetIntValue() == NS_STYLE_WIDTH_MIN_CONTENT))) {
                     nscoord cellWidth = nsLayoutUtils::IntrinsicForContainer(
                         aRenderingContext, cellFrame, nsLayoutUtils::MIN_WIDTH);
                     if (colSpan > 1) {
                         // If a column-spanning cell is in the first
                         // row, split up the space evenly.  (XXX This
                         // isn't quite right if some of the columns it's
                         // in have specified widths.  Should we care?)
+                        // XXXldb This doesn't consider columns with no
+                        // cells originating.
                         cellWidth = ((cellWidth + spacing) / colSpan) - spacing;
                     }
                     result += cellWidth;
                 } else if (styleWidth->GetUnit() == eStyleUnit_Percent) {
                     if (colSpan > 1) {
                         // XXX Can this force columns to negative
                         // widths?
                         result -= spacing * (colSpan - 1);
                     }
                 }
                 // else, for 'auto', '-moz-available', and '-moz-fit-content'
                 // do nothing
+                // XXXldb Bug 364989
             }
         }
     }
 
     return (mMinWidth = result);
 }
 
 /* virtual */ nscoord
diff --git a/layout/tables/nsTableFrame.cpp b/layout/tables/nsTableFrame.cpp
--- a/layout/tables/nsTableFrame.cpp
+++ b/layout/tables/nsTableFrame.cpp
@@ -352,16 +352,17 @@ nsTableFrame::SetInitialChildList(nsIAto
       if (mColGroups.IsEmpty())
         mColGroups.SetFrames(childFrame);
       else
         prevColGroupChild->SetNextSibling(childFrame);
       prevColGroupChild = childFrame;
     }
     else
     { // unknown frames go on the main list for now
+      NS_NOTREACHED("yikes, unknown frame type");
       if (mFrames.IsEmpty())
         mFrames.SetFrames(childFrame);
       else
         prevMainChild->SetNextSibling(childFrame);
       prevMainChild = childFrame;
     }
     nsIFrame *prevChild = childFrame;
     childFrame = childFrame->GetNextSibling();
diff --git a/layout/tables/nsTableRowFrame.cpp b/layout/tables/nsTableRowFrame.cpp
--- a/layout/tables/nsTableRowFrame.cpp
+++ b/layout/tables/nsTableRowFrame.cpp
@@ -204,16 +204,18 @@ nsTableRowFrame::AppendFrames(nsIAtom*  
 
   // Add the new cell frames to the table
   nsTableFrame *tableFrame =  nsTableFrame::GetTableFrame(this);
   for (nsIFrame* childFrame = aFrameList; childFrame;
        childFrame = childFrame->GetNextSibling()) {
     if (IS_TABLE_CELL(childFrame->GetType())) {
       // Add the cell to the cell map
       tableFrame->AppendCell((nsTableCellFrame&)*childFrame, GetRowIndex());
+    } else {
+      NS_NOTREACHED("unexpected child of table row");
     }
   }
 
   PresContext()->PresShell()->FrameNeedsReflow(this, nsIPresShell::eTreeChange,
                                                NS_FRAME_HAS_DIRTY_CHILDREN);
   tableFrame->SetGeometryDirty();
 
   return NS_OK;
@@ -235,16 +237,18 @@ nsTableRowFrame::InsertFrames(nsIAtom*  
   // gather the new frames (only those which are cells) into an array
   nsIAtom* cellFrameType = (tableFrame->IsBorderCollapse()) ? nsGkAtoms::bcTableCellFrame : nsGkAtoms::tableCellFrame;
   nsTableCellFrame* prevCellFrame = (nsTableCellFrame *)nsTableFrame::GetFrameAtOrBefore(this, aPrevFrame, cellFrameType);
   nsVoidArray cellChildren;
   for (nsIFrame* childFrame = aFrameList; childFrame;
        childFrame = childFrame->GetNextSibling()) {
     if (IS_TABLE_CELL(childFrame->GetType())) {
       cellChildren.AppendElement(childFrame);
+    } else {
+      NS_NOTREACHED("unexpected child of table row");
     }
   }
   // insert the cells into the cell map
   PRInt32 colIndex = -1;
   if (prevCellFrame) {
     prevCellFrame->GetColIndex(colIndex);
   }
   tableFrame->InsertCells(cellChildren, GetRowIndex(), colIndex);
diff --git a/layout/xul/base/src/nsBoxFrame.cpp b/layout/xul/base/src/nsBoxFrame.cpp
--- a/layout/xul/base/src/nsBoxFrame.cpp
+++ b/layout/xul/base/src/nsBoxFrame.cpp
@@ -536,16 +536,17 @@ nsBoxFrame::GetInitialDirection(PRBool& 
 
   // Now check the style system to see if we should invert aIsNormal.
   const nsStyleXUL* boxInfo = GetStyleXUL();
   if (boxInfo->mBoxDirection == NS_STYLE_BOX_DIRECTION_REVERSE)
     aIsNormal = !aIsNormal; // Invert our direction.
   
   // Now see if we have an attribute.  The attribute overrides
   // the style system value.
+  // XXXldb This makes two reverses go back to normal!
   static nsIContent::AttrValuesArray strings[] =
     {&nsGkAtoms::reverse, &nsGkAtoms::ltr, &nsGkAtoms::rtl, nsnull};
   PRInt32 index = GetContent()->FindAttrValueIn(kNameSpaceID_None, nsGkAtoms::dir,
       strings, eCaseMatters);
   if (index >= 0) {
     PRPackedBool values[] = {!aIsNormal, PR_TRUE, PR_FALSE};
     aIsNormal = values[index];
   }
@@ -1840,20 +1841,21 @@ nsBoxFrame::CreateViewForFrame(nsPresCon
       nsIView *view = viewManager->CreateView(aFrame->GetRect(), parentView, visibility);
       if (view) {
         // Insert the view into the view hierarchy. If the parent view is a
         // scrolling view we need to do this differently
         nsIScrollableView*  scrollingView = parentView->ToScrollableView();
         if (scrollingView) {
           scrollingView->SetScrolledView(view);
         } else {
-          viewManager->SetViewZIndex(view, autoZIndex, zIndex);
           // XXX put view last in document order until we can do better
           viewManager->InsertChild(parentView, view, nsnull, PR_TRUE);
         }
+        nsContainerFrame::SyncFrameViewProperties(aPresContext, aFrame,
+                                                  nsnull, view);
       }
 
       // Remember our view
       aFrame->SetView(view);
 
       NS_FRAME_LOG(NS_FRAME_TRACE_CALLS,
         ("nsBoxFrame::CreateViewForFrame: frame=%p view=%p",
          aFrame));
diff --git a/layout/xul/base/src/nsDeckFrame.cpp b/layout/xul/base/src/nsDeckFrame.cpp
--- a/layout/xul/base/src/nsDeckFrame.cpp
+++ b/layout/xul/base/src/nsDeckFrame.cpp
@@ -117,28 +117,34 @@ void
 void
 nsDeckFrame::HideBox(nsPresContext* aPresContext, nsIBox* aBox)
 {
   nsIView* view = aBox->GetView();
 
   if (view) {
     nsIViewManager* viewManager = view->GetViewManager();
     viewManager->SetViewVisibility(view, nsViewVisibility_kHide);
+    // XXX This can go away when our notion of view visibility applies
+    // better to descendant views. (i.e., more callers use IsVisible
+    // rather than GetVisibility).
     viewManager->ResizeView(view, nsRect(0, 0, 0, 0));
   }
 }
 
 void
 nsDeckFrame::ShowBox(nsPresContext* aPresContext, nsIBox* aBox)
 {
   nsRect rect = aBox->GetRect();
   nsIView* view = aBox->GetView();
   if (view) {
     nsIViewManager* viewManager = view->GetViewManager();
     rect.x = rect.y = 0;
+    // XXX This can go away when our notion of view visibility applies
+    // better to descendant views. (i.e., more callers use IsVisible
+    // rather than GetVisibility).
     viewManager->ResizeView(view, rect);
     viewManager->SetViewVisibility(view, nsViewVisibility_kShow);
   }
 }
 
 void
 nsDeckFrame::IndexChanged(nsPresContext* aPresContext)
 {
diff --git a/layout/xul/base/src/nsSprocketLayout.cpp b/layout/xul/base/src/nsSprocketLayout.cpp
--- a/layout/xul/base/src/nsSprocketLayout.cpp
+++ b/layout/xul/base/src/nsSprocketLayout.cpp
@@ -246,19 +246,17 @@ nsSprocketLayout::Layout(nsIBox* aBox, n
   nscoord min = 0;
   nscoord max = 0;
   PRInt32 flexes = 0;
   PopulateBoxSizes(aBox, aState, boxSizes, computedBoxSizes, min, max, flexes);
   
   // The |size| variable will hold the total size of children along the axis of
   // the box.  Continuing with the example begun in the comment above, size would
   // be 150 pixels.
-  nscoord size = clientRect.width;
-  if (!IsHorizontal(aBox))
-    size = clientRect.height;
+  nscoord size = IsHorizontal(aBox) ? clientRect.width : clientRect.height;
   ComputeChildSizes(aBox, aState, size, boxSizes, computedBoxSizes);
 
   // After the call to ComputeChildSizes, the |size| variable contains the
   // total required size of all the children.  We adjust our clientRect in the
   // appropriate dimension to match this size.  In our example, we now assign
   // 150 pixels into the clientRect.width.
   //
   // The variables |min| and |max| hold the minimum required size box must be 
diff --git a/modules/oji/src/nsJVMManager.cpp b/modules/oji/src/nsJVMManager.cpp
--- a/modules/oji/src/nsJVMManager.cpp
+++ b/modules/oji/src/nsJVMManager.cpp
@@ -114,17 +114,16 @@ void stopAsyncCursors(void);
 void stopAsyncCursors(void);
 }
 #endif // XP_MAC
 
 static NS_DEFINE_IID(kISupportsIID, NS_ISUPPORTS_IID);
 static NS_DEFINE_IID(kIJVMManagerIID, NS_IJVMMANAGER_IID);
 static NS_DEFINE_IID(kIJVMThreadManagerIID, NS_IJVMTHREADMANAGER_IID);
 static NS_DEFINE_IID(kILiveConnectManagerIID, NS_ILIVECONNECTMANAGER_IID);
-static NS_DEFINE_IID(kIJVMPluginIID, NS_IJVMPLUGIN_IID);
 
 #define PLUGIN_REGIONAL_URL "chrome://global-region/locale/region.properties"
 
 ////////////////////////////////////////////////////////////////////////////////
 
 NS_IMPL_AGGREGATED(nsJVMManager)
 
 extern "C" {
@@ -378,17 +377,17 @@ nsJVMManager::PostEvent(PRThread* prthre
 
     if (!async)
         syncEv->Wait();
 
     return NS_OK;
 }
 
 nsJVMManager::nsJVMManager(nsISupports* outer)
-    : fJVM(NULL), fStatus(nsJVMStatus_Disabled),
+    : fStatus(nsJVMStatus_Disabled),
       fDebugManager(NULL), fJSJavaVM(NULL),
       fClassPathAdditions(new nsVoidArray()), fClassPathAdditionsString(NULL),
       fStartupMessagePosted(PR_FALSE)
 {
     NS_INIT_AGGREGATED(outer);
 
     nsCOMPtr<nsIPluginHost> host = do_GetService(kPluginManagerCID);
     if (host) {
@@ -416,20 +415,17 @@ nsJVMManager::~nsJVMManager()
 
     int count = fClassPathAdditions->Count();
     for (int i = 0; i < count; i++) {
         PR_Free((*fClassPathAdditions)[i]);
     }
     delete fClassPathAdditions;
     if (fClassPathAdditionsString)
         PR_Free(fClassPathAdditionsString);
-    if (fJVM) {
-        /*nsrefcnt c =*/ fJVM->Release();   // Release for QueryInterface in GetJVM
-        // XXX unload plugin if c == 1 ? (should this be done inside Release?)
-    }
+    // XXX unload plugin if fJVM's refcount is 1?
 }
 
 nsresult
 nsJVMManager::AggregatedQueryInterface(const nsIID& aIID, void** aInstancePtr)
 {
     if (aIID.Equals(kIJVMManagerIID)) {
         *aInstancePtr = this;
         NS_ADDREF_THIS();
@@ -667,17 +663,17 @@ nsJVMManager::StartupJVM(void)
 	}
  */
 
 #ifdef MOZ_OJI_REQUIRE_THREAD_SAFE_ON_STARTUP    
     PRUintn uStatus=0;
     EnterMonitor(&uStatus);
 #endif // MOZ_OJI_REQUIRE_THREAD_SAFE_ON_STARTUP    
 
-    PR_ASSERT(fJVM == NULL);
+    PR_ASSERT(fJVM == nsnull);
     /*
     **TODO: amusil. Load the plugin by getting into Service manager.
     **              Right now there is no API to do this stuff. We need to
     **              add this to nsIPluginHost. We need a case where we just 
     **              load the plugin but do not instantiate any instance. 
     **              The code in there right now always creates a new instance.
     **              But for Java we may not create any instances and may need to
     **              do JNI calls via liveconnect.
@@ -702,40 +698,41 @@ nsJVMManager::StartupJVM(void)
 
 #ifdef MOZ_OJI_REQUIRE_THREAD_SAFE_ON_STARTUP    
         ExitMonitor(&uStatus);
 #endif // MOZ_OJI_REQUIRE_THREAD_SAFE_ON_STARTUP    
 
         return fStatus;
     }
 
-    nsIPlugin* pluginFactory = NULL;
+    nsCOMPtr<nsIPlugin> pluginFactory;
      // this code is the correct way to obtain pluggable JVM
     nsCOMPtr<nsIPlugin> f = 
              do_GetService(NS_INLINE_PLUGIN_CONTRACTID_PREFIX NS_JVM_MIME_TYPE, &err);
     if (NS_FAILED(err) || !f) {
-        err = pluginHost->GetPluginFactory(NS_JVM_MIME_TYPE, &pluginFactory);
+        err = pluginHost->GetPluginFactory(NS_JVM_MIME_TYPE, getter_AddRefs(pluginFactory));
     } 
     else {
         pluginFactory  = f;
     }
     
-    if (pluginFactory == NULL) {
+    if (!pluginFactory) {
         fStatus = nsJVMStatus_Failed;
 
 #ifdef MOZ_OJI_REQUIRE_THREAD_SAFE_ON_STARTUP    
         ExitMonitor(&uStatus);
 #endif // MOZ_OJI_REQUIRE_THREAD_SAFE_ON_STARTUP    
 
         return fStatus;
     }
 
-    nsresult rslt = pluginFactory->QueryInterface(kIJVMPluginIID, (void**)&fJVM);
+    nsresult rslt;
+    fJVM = do_QueryInterface(pluginFactory, &rslt);
     if (rslt != NS_OK) {
-        PR_ASSERT(fJVM == NULL);
+        PR_ASSERT(fJVM == nsnull);
         fStatus = nsJVMStatus_Failed;
 
 #ifdef MOZ_OJI_REQUIRE_THREAD_SAFE_ON_STARTUP    
         ExitMonitor(&uStatus);
 #endif // MOZ_OJI_REQUIRE_THREAD_SAFE_ON_STARTUP    
 
         return fStatus;
     }
@@ -743,18 +740,16 @@ nsJVMManager::StartupJVM(void)
     // beard: do we really need an explicit startup mechanim for the JVM?
     // since we obtained a working JVM plugin, assume it is running.
     fStatus = nsJVMStatus_Running;
 
 #if 0
     JSContext* crippledContext = LM_GetCrippledContext();
     MaybeStartupLiveConnect(crippledContext, JS_GetGlobalObject(crippledContext));
 #endif
-
-    fJVM->Release();
 
 #ifdef DEBUG
     PRIntervalTime end = PR_IntervalNow();
     PRInt32 d = PR_IntervalToMilliseconds(end - start);
     PR_LOG(NSJAVA, PR_LOG_ALWAYS,
            ("Starting java...%s (%ld ms)",
             (fStatus == nsJVMStatus_Running ? "done" : "failed"), d));
 #endif
@@ -771,28 +766,28 @@ nsJVMManager::StartupJVM(void)
  */
     return fStatus;
 }
 
 nsJVMStatus
 nsJVMManager::ShutdownJVM(PRBool fullShutdown)
 {
     if (fStatus == nsJVMStatus_Running) {
-        PR_ASSERT(fJVM != NULL);
+        PR_ASSERT(fJVM != nsnull);
         // XXX need to shutdown JVM via ServiceManager
 //        nsresult err = fJVM->ShutdownJVM(fullShutdown);
 //        if (err == NS_OK)
             fStatus = nsJVMStatus_Enabled;
 //        else {
 //            ReportJVMError(err);
 //            fStatus = nsJVMStatus_Disabled;
 //        }
-        fJVM = NULL;
+        fJVM = nsnull;
     }
-    PR_ASSERT(fJVM == NULL);
+    PR_ASSERT(fJVM == nsnull);
     return fStatus;
 }
 
 ////////////////////////////////////////////////////////////////////////////////
 
 void
 nsJVMManager::SetJVMEnabled(PRBool enabled)
 {
diff --git a/modules/oji/src/nsJVMManager.h b/modules/oji/src/nsJVMManager.h
--- a/modules/oji/src/nsJVMManager.h
+++ b/modules/oji/src/nsJVMManager.h
@@ -216,17 +216,17 @@ protected:
      * @return conjure up THE nsIWebBrowserChrome instance from thin
      * air!
 
      */
 
     nsresult    GetChrome(nsIWebBrowserChrome **theChrome);
     const char* GetJavaErrorString(JRIEnv* env);
 
-    nsIJVMPlugin*       fJVM;
+    nsCOMPtr<nsIJVMPlugin> fJVM;
     nsJVMStatus         fStatus;
     nsISupports*        fDebugManager;
     JSJavaVM *          fJSJavaVM;  
     nsVoidArray*        fClassPathAdditions;
     char*               fClassPathAdditionsString;
     PRBool              fStartupMessagePosted;
 };
 
diff --git a/modules/plugin/base/public/nsIPluginInstanceInternal.h b/modules/plugin/base/public/nsIPluginInstanceInternal.h
--- a/modules/plugin/base/public/nsIPluginInstanceInternal.h
+++ b/modules/plugin/base/public/nsIPluginInstanceInternal.h
@@ -48,16 +48,18 @@ struct JSContext;
   {0x1a9c2ae8, 0xab75, 0x4296, \
     { 0xaf, 0xcb, 0x39, 0x54, 0x39, 0x96, 0x06, 0xa9 }}
 
 class NS_NO_VTABLE nsIPluginInstanceInternal : public nsISupports
 {
 public: 
   NS_DECLARE_STATIC_IID_ACCESSOR(NS_IPLUGININSTANCEINTERNAL_IID)
 
+  // The caller needs to root this object before making most JS API
+  // calls.
   virtual JSObject *GetJSObject(JSContext *cx) = 0;
 
   virtual nsresult GetFormValue(nsAString& aValue) = 0;
 
   virtual void PushPopupsEnabledState(PRBool aEnabled) = 0;
   virtual void PopPopupsEnabledState() = 0;
 
   virtual PRUint16 GetPluginAPIVersion() = 0;
diff --git a/modules/plugin/base/src/nsNPAPIPlugin.cpp b/modules/plugin/base/src/nsNPAPIPlugin.cpp
--- a/modules/plugin/base/src/nsNPAPIPlugin.cpp
+++ b/modules/plugin/base/src/nsNPAPIPlugin.cpp
@@ -2116,29 +2116,34 @@ _setvalue(NPP npp, NPPVariable variable,
           do_GetService("@mozilla.org/js/xpc/ContextStack;1", &rv);
         if (NS_SUCCEEDED(rv)) {
           NPBool bPushCaller = (result != nsnull);
 
           if (bPushCaller) {
             rv = NS_ERROR_FAILURE;
 
             nsCOMPtr<nsIPluginInstancePeer> peer;
+            // XXXldb Shouldn't this return failure if peer is null
+            // (i.e., just skip the null-check)?
             if (NS_SUCCEEDED(inst->GetPeer(getter_AddRefs(peer))) && peer) {
               nsCOMPtr<nsIPluginInstancePeer2> peer2 =
                 do_QueryInterface(peer);
 
               if (peer2) {
                 JSContext *cx;
                 rv = peer2->GetJSContext(&cx);
 
                 if (NS_SUCCEEDED(rv))
+                  // XXXldb Should assert that every push a plugin does
+                  // is matched by a pop.
                   rv = contextStack->Push(cx);
               }
             }
           } else {
+            // XXXldb Should assert that it's the right context!
             rv = contextStack->Pop(nsnull);
           }
         }
         return NS_SUCCEEDED(rv) ? NPERR_NO_ERROR : NPERR_GENERIC_ERROR;
       }
 
     case NPPVpluginKeepLibraryInMemory: {
       NPBool bCached = (result != nsnull);
diff --git a/netwerk/base/src/nsProtocolProxyService.h b/netwerk/base/src/nsProtocolProxyService.h
--- a/netwerk/base/src/nsProtocolProxyService.h
+++ b/netwerk/base/src/nsProtocolProxyService.h
@@ -316,16 +316,18 @@ protected:
         eProxyConfig_PAC,
         eProxyConfig_Direct4x,
         eProxyConfig_WPAD,
         eProxyConfig_System, // use system proxy settings if available, otherwise DIRECT
         eProxyConfig_Last
     };
 
     // simplified array of filters defined by this struct
+    struct HostInfo;
+    friend struct HostInfo;
     struct HostInfo {
         PRBool  is_ipaddr;
         PRInt32 port;
         union {
             HostInfoIP   ip;
             HostInfoName name;
         };
 
diff --git a/netwerk/base/src/nsStandardURL.cpp b/netwerk/base/src/nsStandardURL.cpp
--- a/netwerk/base/src/nsStandardURL.cpp
+++ b/netwerk/base/src/nsStandardURL.cpp
@@ -50,16 +50,17 @@
 #include "nsIPrefService.h"
 #include "nsIPrefBranch.h"
 #include "nsIPrefBranch2.h"
 #include "nsIIDNService.h"
 #include "nsNetUtil.h"
 #include "prlog.h"
 #include "nsAutoPtr.h"
 #include "nsIProgrammingLanguage.h"
+#include "nsVoidArray.h"
 
 static NS_DEFINE_CID(kThisImplCID, NS_THIS_STANDARDURL_IMPL_CID);
 static NS_DEFINE_CID(kStandardURLCID, NS_STANDARDURL_CID);
 
 nsIIDNService *nsStandardURL::gIDN = nsnull;
 nsICharsetConverterManager *nsStandardURL::gCharsetMgr = nsnull;
 PRBool nsStandardURL::gInitialized = PR_FALSE;
 PRBool nsStandardURL::gEscapeUTF8 = PR_TRUE;
@@ -264,16 +265,20 @@ nsSegmentEncoder::InitUnicodeEncoder()
 #define GET_QUERY_ENCODER(name) \
     GET_SEGMENT_ENCODER_INTERNAL(name, gAlwaysEncodeInUTF8 && \
                                  gEncodeQueryInUTF8)
 
 //----------------------------------------------------------------------------
 // nsStandardURL <public>
 //----------------------------------------------------------------------------
 
+#ifdef DEBUG_DUMP_URLS_AT_SHUTDOWN
+static PRCList gAllURLs;
+#endif
+
 nsStandardURL::nsStandardURL(PRBool aSupportsFileURL)
     : mDefaultPort(-1)
     , mPort(-1)
     , mHostA(nsnull)
     , mHostEncoding(eEncoding_ASCII)
     , mSpecEncoding(eEncoding_Unknown)
     , mURLType(URLTYPE_STANDARD)
     , mMutable(PR_TRUE)
@@ -288,38 +293,63 @@ nsStandardURL::nsStandardURL(PRBool aSup
 
     if (!gInitialized) {
         gInitialized = PR_TRUE;
         InitGlobalObjects();
     }
 
     // default parser in case nsIStandardURL::Init is never called
     mParser = net_GetStdURLParser();
+
+#ifdef DEBUG_DUMP_URLS_AT_SHUTDOWN
+    PR_APPEND_LINK(&mDebugCList, &gAllURLs);
+#endif
 }
 
 nsStandardURL::~nsStandardURL()
 {
     LOG(("Destroying nsStandardURL @%p\n", this));
 
     CRTFREEIF(mHostA);
+#ifdef DEBUG_DUMP_URLS_AT_SHUTDOWN
+    PR_REMOVE_LINK(&mDebugCList);
+#endif
 }
+
+#ifdef DEBUG_DUMP_URLS_AT_SHUTDOWN
+static void DumpLeakedURLs()
+{
+    if (!PR_CLIST_IS_EMPTY(&gAllURLs)) {
+        printf("Leaked URLs:\n");
+        for (PRCList *l = PR_LIST_HEAD(&gAllURLs); l != &gAllURLs; l = PR_NEXT_LINK(l)) {
+            nsStandardURL *url = reinterpret_cast<nsStandardURL*>(reinterpret_cast<char*>(l) - offsetof(nsStandardURL, mDebugCList));
+            url->PrintSpec();
+        }
+    }
+}
+#endif
 
 void
 nsStandardURL::InitGlobalObjects()
 {
     nsCOMPtr<nsIPrefBranch2> prefBranch( do_GetService(NS_PREFSERVICE_CONTRACTID) );
     if (prefBranch) {
         nsCOMPtr<nsIObserver> obs( new nsPrefObserver() );
         prefBranch->AddObserver(NS_NET_PREF_ESCAPEUTF8, obs.get(), PR_FALSE);
         prefBranch->AddObserver(NS_NET_PREF_ALWAYSENCODEINUTF8, obs.get(), PR_FALSE);
         prefBranch->AddObserver(NS_NET_PREF_ENCODEQUERYINUTF8, obs.get(), PR_FALSE);
         prefBranch->AddObserver(NS_NET_PREF_ENABLEIDN, obs.get(), PR_FALSE);
 
         PrefsChanged(prefBranch, nsnull);
     }
+
+#ifdef DEBUG_DUMP_URLS_AT_SHUTDOWN
+    PR_INIT_CLIST(&gAllURLs);
+    atexit(DumpLeakedURLs);
+#endif
 }
 
 void
 nsStandardURL::ShutdownGlobalObjects()
 {
     NS_IF_RELEASE(gIDN);
     NS_IF_RELEASE(gCharsetMgr);
 }
diff --git a/netwerk/base/src/nsStandardURL.h b/netwerk/base/src/nsStandardURL.h
--- a/netwerk/base/src/nsStandardURL.h
+++ b/netwerk/base/src/nsStandardURL.h
@@ -48,16 +48,21 @@
 #include "nsIFile.h"
 #include "nsIURLParser.h"
 #include "nsIUnicodeEncoder.h"
 #include "nsIObserver.h"
 #include "nsIIOService.h"
 #include "nsCOMPtr.h"
 #include "nsURLHelper.h"
 #include "nsIClassInfo.h"
+#include "prclist.h"
+
+#ifdef DEBUG_dbaron
+#define DEBUG_DUMP_URLS_AT_SHUTDOWN
+#endif
 
 class nsIBinaryInputStream;
 class nsIBinaryOutputStream;
 class nsIIDNService;
 class nsICharsetConverterManager;
 class nsIPrefBranch;
 
 //-----------------------------------------------------------------------------
@@ -266,16 +271,22 @@ private:
     // global objects.  don't use COMPtr as its destructor will cause a
     // coredump if we leak it.
     static nsIIDNService               *gIDN;
     static nsICharsetConverterManager  *gCharsetMgr;
     static PRBool                       gInitialized;
     static PRBool                       gEscapeUTF8;
     static PRBool                       gAlwaysEncodeInUTF8;
     static PRBool                       gEncodeQueryInUTF8;
+
+public:
+#ifdef DEBUG_DUMP_URLS_AT_SHUTDOWN
+    PRCList mDebugCList;
+    void PrintSpec() const { printf("  %s\n", mSpec.get()); }
+#endif
 };
 
 #define NS_THIS_STANDARDURL_IMPL_CID                 \
 { /* b8e3e97b-1ccd-4b45-af5a-79596770f5d7 */         \
     0xb8e3e97b,                                      \
     0x1ccd,                                          \
     0x4b45,                                          \
     {0xaf, 0x5a, 0x79, 0x59, 0x67, 0x70, 0xf5, 0xd7} \
diff --git a/netwerk/cache/src/nsCacheService.cpp b/netwerk/cache/src/nsCacheService.cpp
--- a/netwerk/cache/src/nsCacheService.cpp
+++ b/netwerk/cache/src/nsCacheService.cpp
@@ -62,16 +62,17 @@
 #include "nsIPrefBranch2.h"
 #include "nsILocalFile.h"
 #include "nsIOService.h"
 #include "nsDirectoryServiceDefs.h"
 #include "nsAppDirectoryServiceDefs.h"
 #include "nsThreadUtils.h"
 #include "nsProxyRelease.h"
 #include "nsVoidArray.h"
+#include "nsReadableUtils.h"
 #include "nsDeleteDir.h"
 #include "nsIPrivateBrowsingService.h"
 #include "nsNetCID.h"
 #include <math.h>  // for log()
 
 
 /******************************************************************************
  * nsCacheProfilePrefObserver
@@ -249,17 +250,19 @@ nsCacheProfilePrefObserver::Remove()
 
 
 NS_IMETHODIMP
 nsCacheProfilePrefObserver::Observe(nsISupports *     subject,
                                     const char *      topic,
                                     const PRUnichar * data_unicode)
 {
     nsresult rv;
-    NS_ConvertUTF16toUTF8 data(data_unicode);
+    nsCAutoString data;
+    if (data_unicode)
+        AppendUTF16toUTF8(data_unicode, data);
     CACHE_LOG_ALWAYS(("Observe [topic=%s data=%s]\n", topic, data.get()));
 
     if (!strcmp(NS_XPCOM_SHUTDOWN_OBSERVER_ID, topic)) {
         // xpcom going away, shutdown cache service
         if (nsCacheService::GlobalInstance())
             nsCacheService::GlobalInstance()->Shutdown();
     
     } else if (!strcmp("profile-before-change", topic)) {
diff --git a/netwerk/dns/src/nsDNSService2.cpp b/netwerk/dns/src/nsDNSService2.cpp
--- a/netwerk/dns/src/nsDNSService2.cpp
+++ b/netwerk/dns/src/nsDNSService2.cpp
@@ -213,17 +213,20 @@ public:
                       const nsACString &host,
                       nsIDNSListener   *listener,
                       PRUint16          flags,
                       PRUint16          af)
         : mResolver(res)
         , mHost(host)
         , mListener(listener)
         , mFlags(flags)
-        , mAF(af) {}
+        , mAF(af)
+    {
+        //printf("Looking up \"%s\".\n", PromiseFlatCString(host).get());
+    }
     ~nsDNSAsyncRequest() {}
 
     void OnLookupComplete(nsHostResolver *, nsHostRecord *, nsresult);
 
     nsRefPtr<nsHostResolver> mResolver;
     nsCString                mHost; // hostname we're resolving
     nsCOMPtr<nsIDNSListener> mListener;
     PRUint16                 mFlags;
diff --git a/netwerk/dns/src/nsIDNService.cpp b/netwerk/dns/src/nsIDNService.cpp
--- a/netwerk/dns/src/nsIDNService.cpp
+++ b/netwerk/dns/src/nsIDNService.cpp
@@ -113,17 +113,17 @@ void nsIDNService::prefsChanged(nsIPrefB
     PRBool val;
     if (NS_SUCCEEDED(prefBranch->GetBoolPref(NS_NET_PREF_IDNTESTBED, &val)))
       mMultilingualTestBed = val;
   }
   if (!pref || NS_LITERAL_STRING(NS_NET_PREF_IDNPREFIX).Equals(pref)) {
     nsXPIDLCString prefix;
     nsresult rv = prefBranch->GetCharPref(NS_NET_PREF_IDNPREFIX, getter_Copies(prefix));
     if (NS_SUCCEEDED(rv) && prefix.Length() <= kACEPrefixLen)
-      PL_strncpyz(nsIDNService::mACEPrefix, prefix.get(), kACEPrefixLen + 1);
+      PL_strncpyz(mACEPrefix, prefix.get(), sizeof(mACEPrefix));
   }
   if (!pref || NS_LITERAL_STRING(NS_NET_PREF_IDNBLACKLIST).Equals(pref)) {
     nsCOMPtr<nsISupportsString> blacklist;
     nsresult rv = prefBranch->GetComplexValue(NS_NET_PREF_IDNBLACKLIST,
                                               NS_GET_IID(nsISupportsString),
                                               getter_AddRefs(blacklist));
     if (NS_SUCCEEDED(rv))
       blacklist->ToString(getter_Copies(mIDNBlacklist));
@@ -137,16 +137,17 @@ void nsIDNService::prefsChanged(nsIPrefB
   }
 }
 
 nsIDNService::nsIDNService()
 {
   // initialize to the official prefix (RFC 3490 "5. ACE prefix")
   const char kIDNSPrefix[] = "xn--";
   strcpy(mACEPrefix, kIDNSPrefix);
+  NS_ASSERTION(sizeof(mACEPrefix) >= sizeof(kIDNSPrefix), "bad strcpy");
 
   mMultilingualTestBed = PR_FALSE;
 
   if (idn_success != idn_nameprep_create(NULL, &mNamePrepHandle))
     mNamePrepHandle = nsnull;
 
   mNormalizer = do_GetService(NS_UNICODE_NORMALIZER_CONTRACTID);
   /* member initializers and constructor code */
@@ -507,36 +508,36 @@ nsresult nsIDNService::stringPrep(const 
   NS_ENSURE_TRUE(idn_err == idn_success, NS_ERROR_FAILURE);
 
   nsAutoString namePrepStr;
   ucs4toUtf16(namePrepBuf, namePrepStr);
   if (namePrepStr.Length() >= kMaxDNSNodeLen)
     return NS_ERROR_FAILURE;
 
   // normalize
-  nsAutoString normlizedStr;
-  rv = mNormalizer->NormalizeUnicodeNFKC(namePrepStr, normlizedStr);
-  if (normlizedStr.Length() >= kMaxDNSNodeLen)
+  nsAutoString normalizedStr;
+  rv = mNormalizer->NormalizeUnicodeNFKC(namePrepStr, normalizedStr);
+  if (normalizedStr.Length() >= kMaxDNSNodeLen)
     return NS_ERROR_FAILURE;
 
   // prohibit
   const PRUint32 *found = nsnull;
   idn_err = idn_nameprep_isprohibited(mNamePrepHandle, 
                                       (const PRUint32 *) ucs4Buf, &found);
   if (idn_err != idn_success || found)
     return NS_ERROR_FAILURE;
 
   // check bidi
   idn_err = idn_nameprep_isvalidbidi(mNamePrepHandle, 
                                      (const PRUint32 *) ucs4Buf, &found);
   if (idn_err != idn_success || found)
     return NS_ERROR_FAILURE;
 
   // set the result string
-  out.Assign(normlizedStr);
+  out.Assign(normalizedStr);
 
   return rv;
 }
 
 nsresult nsIDNService::encodeToACE(const nsAString& in, nsACString& out)
 {
   // RACE encode is supported for existing testing environment
   if (!strcmp("bq--", mACEPrefix))
diff --git a/tools/jprof/stub/libmalloc.cpp b/tools/jprof/stub/libmalloc.cpp
--- a/tools/jprof/stub/libmalloc.cpp
+++ b/tools/jprof/stub/libmalloc.cpp
@@ -81,17 +81,78 @@ static pthread_t main_thread;
 static pthread_t main_thread;
 
 static void startSignalCounter(unsigned long millisec);
 static int enableRTCSignals(bool enable);
 
 
 //----------------------------------------------------------------------
 
-#if defined(i386) || defined(_i386) || defined(__x86_64__)
+//#if __GNUC__ >= 3
+#if 0
+
+#include <unwind.h>
+
+struct CrawlStackClosure {
+  malloc_log_entry *me;
+  void *stack_top;
+  void *top_instr_ptr;
+};
+
+extern "C" {
+static _Unwind_Reason_Code CrawlStackCallback(struct _Unwind_Context *cx, void *c);
+}
+
+/* static */ _Unwind_Reason_Code
+CrawlStackCallback(struct _Unwind_Context *cx, void *c)
+{
+  CrawlStackClosure *closure = (CrawlStackClosure*)c;
+  malloc_log_entry *me = closure->me;
+  if (me->numpcs >= MAX_STACK_CRAWL) {
+    printf("too many frames\n");
+    return _URC_END_OF_STACK;
+  }
+
+  void *sp = (void*)_Unwind_GetCFA(cx);
+  if (sp < closure->stack_top) {
+    printf("still in signal handling %p %p\n", sp, closure->stack_top);
+    // Still in the signal handling code.
+#if 0
+    // The unwind code doesn't know how to cross the signal handler, so
+    // we'll try to help it.
+    _Unwind_SetGR(cx, __builtin_dwarf_sp_column(),
+                  (_Unwind_Word) closure->stack_top);
+    _Unwind_SetIP(cx, (_Unwind_Ptr) closure->top_instr_ptr);
+#endif
+    return _URC_NO_REASON;
+  }
+
+  void *ip = (void*)_Unwind_GetIP(cx);
+  me->pcs[me->numpcs++] = (char*) ip;
+  printf("recording frame\n");
+
+  return _URC_NO_REASON;
+}
+
+static void CrawlStack(malloc_log_entry* me,
+                       void* stack_top, void* top_instr_ptr)
+{
+  CrawlStackClosure closure;
+  closure.me = me;
+  closure.stack_top = stack_top;
+  closure.top_instr_ptr = top_instr_ptr;
+  me->numpcs = 0;
+
+  me->pcs[me->numpcs++] = (char*) top_instr_ptr;
+
+  _Unwind_Backtrace(CrawlStackCallback, &closure);
+}
+
+#elif defined(i386) || defined(_i386) || defined(__x86_64__)
+
 static void CrawlStack(malloc_log_entry* me,
                        void* stack_top, void* top_instr_ptr)
 {
   void **bp;
 #if defined(__i386)
   __asm__( "movl %%ebp, %0" : "=g"(bp));
 #elif defined(__x86_64__)
   __asm__( "movq %%rbp, %0" : "=g"(bp));
diff --git a/widget/src/gtk2/nsWindow.cpp b/widget/src/gtk2/nsWindow.cpp
--- a/widget/src/gtk2/nsWindow.cpp
+++ b/widget/src/gtk2/nsWindow.cpp
@@ -1671,16 +1671,17 @@ nsWindow::InvalidateRegion(const nsIRegi
 
 NS_IMETHODIMP
 nsWindow::Update()
 {
     if (!mDrawingarea)
         return NS_OK;
 
     gdk_window_process_updates(mDrawingarea->inner_window, FALSE);
+    // XSync(GDK_DISPLAY(), False);
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsWindow::SetColorMap(nsColorMap *aColorMap)
 {
     return NS_ERROR_NOT_IMPLEMENTED;
 }
@@ -4287,16 +4288,20 @@ nsWindow::EnsureGrabs(void)
 nsWindow::EnsureGrabs(void)
 {
     if (mRetryPointerGrab)
         GrabPointer();
     if (mRetryKeyboardGrab)
         GrabKeyboard();
 }
 
+// Once people are reliably running compositing window managers, we
+// could get 8-bit alpha by using gdk_screen_get_rgba_visual.
+// See http://mail.gnome.org/archives/gtk-app-devel-list/2005-September/msg00124.html
+
 void
 nsWindow::SetTransparencyMode(nsTransparencyMode aMode)
 {
     if (!mShell) {
         // Pass the request to the toplevel window
         GtkWidget *topWidget = nsnull;
         GetToplevelWidget(&topWidget);
         if (!topWidget)
@@ -6414,16 +6419,17 @@ nsWindow::IMEGetOwningWindow(void)
 {
     nsWindow *window = IM_get_owning_window(this->mDrawingarea);
     return window;
 }
 
 void
 nsWindow::IMECreateContext(void)
 {
+    NS_ASSERTION(!mIMEData, "already have IME data");
     mIMEData = new nsIMEData(this);
     if (!mIMEData)
         return;
 
     mIMEData->mContext = gtk_im_multicontext_new();
     mIMEData->mSimpleContext = gtk_im_context_simple_new();
     mIMEData->mDummyContext = gtk_im_multicontext_new();
     if (!mIMEData->mContext || !mIMEData->mSimpleContext ||
@@ -6435,16 +6441,17 @@ nsWindow::IMECreateContext(void)
 
     gtk_im_context_set_client_window(mIMEData->mContext,
                                      GTK_WIDGET(mContainer)->window);
     gtk_im_context_set_client_window(mIMEData->mSimpleContext,
                                      GTK_WIDGET(mContainer)->window);
     gtk_im_context_set_client_window(mIMEData->mDummyContext,
                                      GTK_WIDGET(mContainer)->window);
 
+    // XXX Should we remove these signals before releasing the context?
     g_signal_connect(G_OBJECT(mIMEData->mContext), "preedit_changed",
                      G_CALLBACK(IM_preedit_changed_cb), this);
     g_signal_connect(G_OBJECT(mIMEData->mContext), "commit",
                      G_CALLBACK(IM_commit_cb), this);
     g_signal_connect(G_OBJECT(mIMEData->mSimpleContext), "preedit_changed",
                      G_CALLBACK(IM_preedit_changed_cb), this);
     g_signal_connect(G_OBJECT(mIMEData->mSimpleContext), "commit",
                      G_CALLBACK(IM_commit_cb), this);
diff --git a/widget/src/gtk2/nsWindow.h b/widget/src/gtk2/nsWindow.h
--- a/widget/src/gtk2/nsWindow.h
+++ b/widget/src/gtk2/nsWindow.h
@@ -373,16 +373,17 @@ public:
     /*
      *  |mIMEData| has all IME data for the window and its children widgets.
      *  Only stand-alone windows and child windows embedded in non-Mozilla GTK
      *  containers own IME contexts.
      *  But this is referred from all children after the widget gets focus.
      *  The children refers to its owning window's object.
      */
     struct nsIMEData {
+        // XXX Should this be refcounted?  I've seen it be a dangling pointer.
         // Actual context. This is used for handling the user's input.
         GtkIMContext       *mContext;
         // mSimpleContext is used for the password field and
         // the |ime-mode: disabled;| editors. These editors disable IME.
         // But dead keys should work. Fortunately, the simple IM context of
         // GTK2 support only them.
         GtkIMContext       *mSimpleContext;
         // mDummyContext is a dummy context and will be used in IMESetFocus()
diff --git a/xpcom/base/nsIWeakReference.idl b/xpcom/base/nsIWeakReference.idl
--- a/xpcom/base/nsIWeakReference.idl
+++ b/xpcom/base/nsIWeakReference.idl
@@ -44,16 +44,25 @@
  * An instance of |nsIWeakReference| is a proxy object that cooperates with
  * its referent to give clients a non-owning, non-dangling reference.  Clients
  * own the proxy, and should generally manage it with an |nsCOMPtr| (see the
  * type |nsWeakPtr| for a |typedef| name that stands out) as they would any
  * other XPCOM object.  The |QueryReferent| member function provides a
  * (hopefully short-lived) owning reference on demand, through which clients
  * can get useful access to the referent, while it still exists.
  *
+ * Thus this interface provides the following contract:  The result of
+ * calling QueryReferent on a given implementation of this interface
+ * with a given IID may change over time, but not more than twice:  it
+ * may change once from null to non-null (to account for aggregation)
+ * and it may change once from non-null to null.  This means that if
+ * a QueryReferent for an IID that once returned non-null (or was
+ * guaranteed by GetWeakReference to return non-null) at some time
+ * returns null, it will never again return non-null.
+ *
  * @status FROZEN
  * @version 1.0
  * @see nsISupportsWeakReference
  * @see nsWeakReference
  * @see nsWeakPtr
  */
 [scriptable, uuid(9188bc85-f92e-11d2-81ef-0060083a0bcf)]
 interface nsIWeakReference : nsISupports
@@ -81,16 +90,22 @@ interface nsIWeakReference : nsISupports
 [scriptable, uuid(9188bc86-f92e-11d2-81ef-0060083a0bcf)]
 interface nsISupportsWeakReference : nsISupports
   {
     /**
      * |GetWeakReference| produces an appropriate instance of |nsIWeakReference|.
      * As with all good XPCOM `getters', you own the resulting interface and should
      * manage it with an |nsCOMPtr|.
      *
+     * If this call is successful, the weak reference returned is (while
+     * the nsISupportsWeakReference object is held) guaranteed to return
+     * non-null for a QueryReferent to any interface that the
+     * nsISupportsWeakReference implementation is known to
+     * QueryInterface to.
+     *
      * @see nsIWeakReference
      * @see nsWeakPtr
      * @see nsCOMPtr
      */
     nsIWeakReference GetWeakReference();
   };
 
 
diff --git a/xpcom/components/nsComponentManager.cpp b/xpcom/components/nsComponentManager.cpp
--- a/xpcom/components/nsComponentManager.cpp
+++ b/xpcom/components/nsComponentManager.cpp
@@ -2474,17 +2474,19 @@ nsComponentManagerImpl::RegisterFactory(
                                                         (PL_DHashTableOperate(&mFactories,
                                                                                  &aClass,
                                                                                  PL_DHASH_ADD));
 
     if (!factoryTableEntry)
         return NS_ERROR_OUT_OF_MEMORY;
 
 
+    // XXX This is guaranteed to be true.
     if (PL_DHASH_ENTRY_IS_BUSY(factoryTableEntry)) {
+        // XXX I don't think entry is guaranteed to be null.
         entry = factoryTableEntry->mFactoryEntry;
     }
 
     if (entry && !aReplace)
     {
         // Already registered
         PR_LOG(nsComponentManagerLog, PR_LOG_ERROR,
                ("\t\tFactory already registered."));
@@ -3400,16 +3402,19 @@ nsComponentManagerImpl::AutoUnregister(n
 }
 
 NS_IMETHODIMP
 nsComponentManagerImpl::RegisterFactory(const nsCID & aClass,
                                         const char *aClassName,
                                         const char *aContractID,
                                         nsIFactory *aFactory)
 {
+    // XXX We really don't want to create a new factory entry for each
+    // CID/ContractID pair, since the same CID could be repeated and that's
+    // OK.  And it's really bad when they're services.
     return RegisterFactory(aClass,
                            aClassName,
                            aContractID,
                            aFactory,
                            PR_TRUE);
 }
 
 NS_IMETHODIMP
diff --git a/xpcom/io/nsEscape.cpp b/xpcom/io/nsEscape.cpp
--- a/xpcom/io/nsEscape.cpp
+++ b/xpcom/io/nsEscape.cpp
@@ -455,16 +455,17 @@ NS_COM PRBool NS_EscapeURL(const char *p
         }
         tempBuffer[tempBufferPos++] = HEX_ESCAPE;
         tempBuffer[tempBufferPos++] = hexChars[c >> 4];	/* high nibble */
         tempBuffer[tempBufferPos++] = hexChars[c & 0x0f]; /* low nibble */
       }
 
       if (tempBufferPos >= sizeof(tempBuffer) - 4)
       {
+        // XXXldb Why is this guaranteed not to fire?
         NS_ASSERTION(writing, "should be writing");
         tempBuffer[tempBufferPos] = '\0';
         result += tempBuffer;
         tempBufferPos = 0;
       }
 
       previousIsNonASCII = (c > 0x7f);
     }
diff --git a/xpcom/io/nsLocalFileWin.cpp b/xpcom/io/nsLocalFileWin.cpp
--- a/xpcom/io/nsLocalFileWin.cpp
+++ b/xpcom/io/nsLocalFileWin.cpp
@@ -2321,17 +2321,17 @@ nsLocalFile::IsExecutable(PRBool *_retva
     nsAutoString path;
     if (symLink)
         GetTarget(path);
     else
         GetPath(path);
 
     // kill trailing dots and spaces.
     PRInt32 filePathLen = path.Length() - 1;
-    while(filePathLen > 0 && (path[filePathLen] == L' ' || path[filePathLen] == L'.'))
+    while(filePathLen >= 0 && (path[filePathLen] == L' ' || path[filePathLen] == L'.'))
     {
         path.Truncate(filePathLen--);
     } 
 
     // Get extension.
     PRInt32 dotIdx = path.RFindChar(PRUnichar('.'));
     if ( dotIdx != kNotFound ) {
         // Convert extension to lower case.
diff --git a/xpcom/tests/TestCallTemplates.cpp b/xpcom/tests/TestCallTemplates.cpp
--- a/xpcom/tests/TestCallTemplates.cpp
+++ b/xpcom/tests/TestCallTemplates.cpp
@@ -73,18 +73,47 @@ NS_IMPL_ISUPPORTS2(nsTestService, nsITes
 NS_IMPL_ISUPPORTS2(nsTestService, nsITestService, nsISupportsWeakReference)
 
 #define NS_TEST_SERVICE_CONTRACTID "@mozilla.org/test/testservice;1"
 #define NS_TEST_SERVICE_CID \
   {0xa00c1406, 0x283a, 0x45c9, \
     {0xae, 0xd2, 0x1a, 0xb6, 0xdd, 0xba, 0xfe, 0x53}}
 static NS_DEFINE_CID(kTestServiceCID, NS_TEST_SERVICE_CID);
 
+#include "nsString.h"
+
 int main()
 {
+    nsCAutoString str;
+    str.AppendFloat(1.0/3.0);
+    str.Append(" ");
+    str.AppendFloat(2.0/3.0);
+    str.Append(" ");
+    str.AppendFloat(1.0/7.0);
+    str.Append(" ");
+    str.AppendFloat(-0.0);
+    str.Append(" ");
+    str.AppendFloat(-1073741824.0);
+    str.Append(" ");
+    str.AppendFloat(1073741824.0);
+    str.Append(" ");
+    str.AppendFloat(1024.0);
+    str.Append(" ");
+    str.AppendFloat(-1024.0);
+    printf("%s\n", str.get());
+
+#if 0
+    nsAutoString foo;
+    foo.AssignWithConversion("aosneuthasoenuhctsa oceuhsa oceush aoeu");
+    for (int i = 0; i < 10000000; ++i) {
+        NS_ConvertUCS2toUTF8 bar(foo.get());
+    }
+#endif
+
+#if 0
     /*
      * NOTE:  This does NOT demonstrate how these functions are
      * intended to be used.  They are intended for filling in out
      * parameters that need to be |AddRef|ed.  I'm just too lazy
      * to write lots of little getter functions for a test program
      * when I don't need to.
      */
 
@@ -119,11 +148,12 @@ int main()
     /* Test CallGetService */
     CallGetService(kTestServiceCID, &myITestService);
     CallGetService(NS_TEST_SERVICE_CONTRACTID, &myITestService);
 
     /* Test CallGetInterface */
     nsIInterfaceRequestor *myInterfaceRequestor =
         static_cast<nsIInterfaceRequestor*>(mySupportsPtr);
     CallGetInterface(myInterfaceRequestor, &myITestService);
+#endif
 
     return 0;
 }
diff --git a/xpfe/browser/src/nsBrowserStatusFilter.cpp b/xpfe/browser/src/nsBrowserStatusFilter.cpp
--- a/xpfe/browser/src/nsBrowserStatusFilter.cpp
+++ b/xpfe/browser/src/nsBrowserStatusFilter.cpp
@@ -90,16 +90,17 @@ nsBrowserStatusFilter::AddProgressListen
 {
     mListener = aListener;
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsBrowserStatusFilter::RemoveProgressListener(nsIWebProgressListener *aListener)
 {
+    NS_ASSERTION(aListener == mListener, "listener mismatch");
     if (aListener == mListener)
         mListener = nsnull;
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsBrowserStatusFilter::GetDOMWindow(nsIDOMWindow **aResult)
 {
