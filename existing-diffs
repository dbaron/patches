From: L. David Baron <dbaron@dbaron.org>

What remains of the changes in my CVS tree before I switched to mercurial.

diff --git a/content/base/src/nsAttrAndChildArray.cpp b/content/base/src/nsAttrAndChildArray.cpp
--- a/content/base/src/nsAttrAndChildArray.cpp
+++ b/content/base/src/nsAttrAndChildArray.cpp
@@ -741,16 +741,19 @@ nsAttrAndChildArray::MakeMappedUnique(ns
 
   if (!mImpl && !GrowBy(1)) {
     return NS_ERROR_OUT_OF_MEMORY;
   }
 
   if (!aAttributes->GetStyleSheet()) {
     // This doesn't currently happen, but it could if we do loading right
 
+    // XXXldb We shouldn't try to handle this gracefully, since it
+    // should never happen.  But it seems to.
+    //NS_NOTREACHED("no style sheet");
     nsRefPtr<nsMappedAttributes> mapped(aAttributes);
     mapped.swap(mImpl->mMappedAttrs);
 
     return NS_OK;
   }
 
   nsRefPtr<nsMappedAttributes> mapped =
     aAttributes->GetStyleSheet()->UniqueMappedAttributes(aAttributes);
diff --git a/content/base/src/nsDocument.cpp b/content/base/src/nsDocument.cpp
--- a/content/base/src/nsDocument.cpp
+++ b/content/base/src/nsDocument.cpp
@@ -6993,16 +6993,17 @@ nsDocument::CanSavePresentation(nsIReque
   }
 
   nsPIDOMWindow* win = GetInnerWindow();
   if (win && win->TimeoutSuspendCount()) {
     return PR_FALSE;
   }
 
   // Check our event listener manager for unload/beforeunload listeners.
+  // XXX What about listeners on the document rather than the window?
   nsCOMPtr<nsPIDOMEventTarget> piTarget = do_QueryInterface(mScriptGlobalObject);
   if (piTarget) {
     nsIEventListenerManager* manager =
       piTarget->GetListenerManager(PR_FALSE);
     if (manager && manager->HasUnloadListeners()) {
       return PR_FALSE;
     }
   }
diff --git a/content/base/src/nsFrameLoader.cpp b/content/base/src/nsFrameLoader.cpp
--- a/content/base/src/nsFrameLoader.cpp
+++ b/content/base/src/nsFrameLoader.cpp
@@ -548,16 +548,19 @@ AddTreeItemToTreeOwner(nsIDocShellTreeIt
   if (aParentNode) {
     aParentNode->AddChild(aItem);
   }
 
   PRBool retval = PR_FALSE;
   if (aParentType == nsIDocShellTreeItem::typeChrome && isContent) {
     retval = PR_TRUE;
 
+    // Old comment, is it still valid?
+    // XXXldb This is inconsistent with the conditions under which
+    // nsFrame
     PRBool is_primary = value.LowerCaseEqualsLiteral("content-primary");
 
     if (aOwner) {
       PRBool is_targetable = is_primary ||
         value.LowerCaseEqualsLiteral("content-targetable");
       aOwner->ContentShellAdded(aItem, is_primary, is_targetable, value);
     }
   }
diff --git a/content/html/content/src/nsHTMLSelectElement.cpp b/content/html/content/src/nsHTMLSelectElement.cpp
--- a/content/html/content/src/nsHTMLSelectElement.cpp
+++ b/content/html/content/src/nsHTMLSelectElement.cpp
@@ -1989,18 +1989,20 @@ VerifyOptionsRecurse(nsIContent* aRoot, 
       VerifyOptionsRecurse(child, aIndex, aArray);
     }
   }
 }
 
 void
 nsHTMLSelectElement::VerifyOptionsArray()
 {
+#ifndef DEBUG_dbaron // This is really really slow on long selects!
   PRInt32 aIndex = 0;
   VerifyOptionsRecurse(this, aIndex, mOptions);
+#endif
 }
 
 #endif
 
 //----------------------------------------------------------------------
 //
 // nsHTMLOptionCollection implementation
 //
diff --git a/content/xul/document/src/nsXULPrototypeCache.h b/content/xul/document/src/nsXULPrototypeCache.h
--- a/content/xul/document/src/nsXULPrototypeCache.h
+++ b/content/xul/document/src/nsXULPrototypeCache.h
@@ -66,17 +66,17 @@ struct CacheScriptEntry
  * The XUL prototype cache can be used to store and retrieve shared data for
  * XUL documents, style sheets, XBL, and scripts.
  *
  * The cache has two levels:
  *  1. In-memory hashtables
  *  2. The on-disk fastload file.
  */
 class nsXULPrototypeCache : public nsIXULPrototypeCache,
-                                   nsIObserver
+                            public nsIObserver
 {
 public:
     // nsISupports
     NS_DECL_ISUPPORTS
     NS_DECL_NSIOBSERVER
 
     // nsIXULPrototypeCache
     virtual PRBool IsCached(nsIURI* aURI) {
diff --git a/docshell/base/nsDocShell.cpp b/docshell/base/nsDocShell.cpp
--- a/docshell/base/nsDocShell.cpp
+++ b/docshell/base/nsDocShell.cpp
@@ -1183,16 +1183,24 @@ nsDocShell::LoadURI(nsIURI * aURI,
     PRBool ownerIsExplicit = PR_FALSE;
     PRBool sendReferrer = PR_TRUE;
     nsCOMPtr<nsISHEntry> shEntry;
     nsXPIDLString target;
     PRUint32 loadType = MAKE_LOAD_TYPE(LOAD_NORMAL, aLoadFlags);    
 
     NS_ENSURE_ARG(aURI);
 
+#ifdef DEBUG
+    {
+        nsCAutoString spec;
+        aURI->GetSpec(spec);
+        printf("nsDocShell(%p)::LoadURI(%s)\n", this, spec.get());
+    }
+#endif
+
     // Extract the info from the DocShellLoadInfo struct...
     if (aLoadInfo) {
         aLoadInfo->GetReferrer(getter_AddRefs(referrer));
 
         nsDocShellInfoLoadType lt = nsIDocShellLoadInfo::loadNormal;
         aLoadInfo->GetLoadType(&lt);
         // Get the appropriate loadType from nsIDocShellLoadInfo type
         loadType = ConvertDocShellLoadInfoToLoadType(lt);
diff --git a/dom/base/nsGlobalWindow.cpp b/dom/base/nsGlobalWindow.cpp
--- a/dom/base/nsGlobalWindow.cpp
+++ b/dom/base/nsGlobalWindow.cpp
@@ -2022,16 +2022,17 @@ nsGlobalWindow::SetNewDocument(nsIDocume
         }
 
         // Re-push our context.
         cxPusher.Push(cx);
       }
 
       // Don't clear scope on our current inner window if it's going to be
       // held in the bfcache.
+      // XXXldb Move this out of currentInner->mJSObject check!
       if (!currentInner->IsFrozen()) {
         // Skip the ClearScope if we set a termination function to do
         // it ourselves, later.
         currentInner->FreeInnerObjects(!termFuncSet);
       }
     }
 
     mInnerWindow = newInnerWindow;
diff --git a/extensions/pref/system-pref/src/gconf/nsSystemPrefService.cpp b/extensions/pref/system-pref/src/gconf/nsSystemPrefService.cpp
--- a/extensions/pref/system-pref/src/gconf/nsSystemPrefService.cpp
+++ b/extensions/pref/system-pref/src/gconf/nsSystemPrefService.cpp
@@ -595,20 +595,23 @@ gconfDeleteObserver(void *aElement, void
 
 GConfProxy::GConfProxy(nsSystemPrefService *aSysPrefService):
     mGConfClient(nsnull),
     mGConfLib(nsnull),
     mInitialized(PR_FALSE),
     mSysPrefService(aSysPrefService),
     mObservers(nsnull)
 {
+    MOZ_COUNT_CTOR(GConfProxy);
 }
 
 GConfProxy::~GConfProxy()
 {
+    MOZ_COUNT_DTOR(GConfProxy);
+
     if (mGConfClient)
         g_object_unref(G_OBJECT(mGConfClient));
 
     if (mObservers) {
         (void)mObservers->EnumerateForwards(gconfDeleteObserver, nsnull);
         delete mObservers;
     }
 
diff --git a/gfx/thebes/nsUnicodeRange.cpp b/gfx/thebes/nsUnicodeRange.cpp
--- a/gfx/thebes/nsUnicodeRange.cpp
+++ b/gfx/thebes/nsUnicodeRange.cpp
@@ -34,16 +34,18 @@
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "nsUnicodeRange.h"
 #include "nsIAtom.h"
 #include "gfxAtoms.h"
 
+// XXXldb Replace this with something generated from the Unicode database.
+
 // This table depends on unicode range definitions. 
 // Each item's index must correspond unicode range value
 // eg. x-cyrillic = LangGroupTable[kRangeCyrillic]
 static nsIAtom **gUnicodeRangeToLangGroupAtomTable[] =
 {
   &gfxAtoms::x_cyrillic,
   &gfxAtoms::el,
   &gfxAtoms::tr,
diff --git a/intl/uconv/native/nsNativeUConvService.cpp b/intl/uconv/native/nsNativeUConvService.cpp
--- a/intl/uconv/native/nsNativeUConvService.cpp
+++ b/intl/uconv/native/nsNativeUConvService.cpp
@@ -313,22 +313,22 @@ IConvAdaptor::ConvertInternal(void * aSr
                 break;
             }
             
             if (errno == EILSEQ) {
 
                 if (mReplaceOnError) {
                     if (aDestCharSize == 1) {
                         (*(char*)aDest) = (char)mReplaceChar;
-                        aDest = (char*)aDest + sizeof(char);
+                        aDest = (char*)aDest + 1;
                     }
                     else
                     {
                         (*(PRUnichar*)aDest) = (PRUnichar)mReplaceChar;
-                        aDest = (PRUnichar*)aDest + sizeof(PRUnichar);
+                        aDest = (PRUnichar*)aDest + 1;
                     
                     }
                     inLeft -= aSrcCharSize;
                     outLeft -= aDestCharSize;
 
 #ifdef DEBUG
                     printf(" * IConvAdaptor - replacing char in output  ( %s -> %s )\n", 
                            mFrom.get(), mTo.get());
diff --git a/intl/unicharutil/tools/gentransliterate.pl b/intl/unicharutil/tools/gentransliterate.pl
--- a/intl/unicharutil/tools/gentransliterate.pl
+++ b/intl/unicharutil/tools/gentransliterate.pl
@@ -72,16 +72,19 @@
 # the terms of any one of the MPL, the GPL or the LGPL.
 #
 # ***** END LICENSE BLOCK *****
 
 # 
 # THIS FILE IS GENERATED BY mozilla/intl/unicharutil/tools/gentransliterate.pl
 # PLEASE DO NOT MODIFY THIS FILE BY HAND
 #
+END_OF_HEADER
+
+$handcoded = <<END_OF_HANDCODED;
 entity.list.name=transliterate
 entity.169=(c)
 #
 #
 # Here are the windows-1252 characters from the range 0x80 - 0x9F
 #
 END_OF_HEADER
 
diff --git a/js/src/xpconnect/src/XPCDispInterface.cpp b/js/src/xpconnect/src/XPCDispInterface.cpp
--- a/js/src/xpconnect/src/XPCDispInterface.cpp
+++ b/js/src/xpconnect/src/XPCDispInterface.cpp
@@ -349,16 +349,18 @@ JSBool XPCDispInterface::Member::GetValu
         JSFunction *fun = JS_NewFunctionById(cx, callback, argc, 0, nsnull, mName);
         if(!fun)
             return JS_FALSE;
 
         JSObject* funobj = JS_GetFunctionObject(fun);
         if(!funobj)
             return JS_FALSE;
 
+        // XXXldb root funobj?
+
         // Store ourselves and our native interface within the JSObject
         if(!JS_SetReservedSlot(ccx, funobj, 0, PRIVATE_TO_JSVAL((void *) this)))
             return JS_FALSE;
 
         if(!JS_SetReservedSlot(ccx, funobj, 1, PRIVATE_TO_JSVAL(iface)))
             return JS_FALSE;
 
         {   // scoped lock
diff --git a/layout/base/nsBidi.cpp b/layout/base/nsBidi.cpp
--- a/layout/base/nsBidi.cpp
+++ b/layout/base/nsBidi.cpp
@@ -1,9 +1,9 @@
-/* -*- Mode: C; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
  *
  * ***** BEGIN LICENSE BLOCK *****
  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
  *
  * The contents of this file are subject to the Mozilla Public License Version
  * 1.1 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * http://www.mozilla.org/MPL/
diff --git a/layout/base/nsBidi.h b/layout/base/nsBidi.h
--- a/layout/base/nsBidi.h
+++ b/layout/base/nsBidi.h
@@ -262,17 +262,17 @@ typedef PRUint8 DirProp;
 #define IS_FIRST_SURROGATE(uchar) (((uchar)&0xfc00)==0xd800)
 #define IS_SECOND_SURROGATE(uchar) (((uchar)&0xfc00)==0xdc00)
 
 /* get the UTF-32 value directly from the surrogate pseudo-characters */
 #define SURROGATE_OFFSET ((0xd800<<10UL)+0xdc00-0x10000)
 #define GET_UTF_32(first, second) (((first)<<10UL)+(second)-SURROGATE_OFFSET)
 
 
-#define UTF_ERROR_VALUE 0xffff
+#define UTF_ERROR_VALUE 0xfffd
 /* definitions with forward iteration --------------------------------------- */
 
 /*
  * all the macros that go forward assume that
  * the initial offset is 0<=i<length;
  * they update the offset
  */
 
diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -5780,16 +5780,19 @@ nsCSSFrameConstructor::AppendFrames(nsFr
 
 #define UNSET_DISPLAY 255
 
 // This gets called to see if the frames corresponding to aSibling and aContent
 // should be siblings in the frame tree. Although (1) rows and cols, (2) row
 // groups and col groups, (3) row groups and captions, (4) legends and content
 // inside fieldsets, (5) popups and other kids of the menu are siblings from a
 // content perspective, they are not considered siblings in the frame tree.
+// XXXldb 307394 [Stir DOM] The way this is used seems completely bogus.
+// We should construct or grovel through pseudo-frames if this is false,
+// not skip content.
 PRBool
 nsCSSFrameConstructor::IsValidSibling(nsIFrame*              aSibling,
                                       nsIContent*            aContent,
                                       PRUint8&               aDisplay)
 {
   nsIFrame* parentFrame = aSibling->GetParent();
   nsIAtom* parentType = nsnull;
   nsIAtom* grandparentType = nsnull;
@@ -9153,16 +9156,19 @@ nsCSSFrameConstructor::GetFirstLineStyle
                                 nsCSSPseudoElements::ePseudo_firstLine,
                                 aStyleContext);
   }
   return nsnull;
 }
 
 // Predicate to see if a given content (block element) has
 // first-letter style applied to it.
+// XXXldb Bug 362901 This isn't necessarily going to work if changes are
+// batched, since removing the style rule at the same time as messing
+// with content that relies on this could break things pretty badly.
 PRBool
 nsCSSFrameConstructor::ShouldHaveFirstLetterStyle(nsIContent* aContent,
                                                   nsStyleContext* aStyleContext)
 {
   return nsLayoutUtils::HasPseudoStyle(aContent, aStyleContext,
                                        nsCSSPseudoElements::ePseudo_firstLetter,
                                        mPresShell->GetPresContext());
 }
@@ -10797,16 +10803,20 @@ nsCSSFrameConstructor::CreateIBSiblings(
                                         nsFrameItems& aChildItems,
                                         nsFrameItems& aSiblings)
 {
   nsIContent* content = aInitialInline->GetContent();
   nsStyleContext* styleContext = aInitialInline->GetStyleContext();
   nsIFrame* parentFrame = aInitialInline->GetParent();
 
   // Resolve the right style context for our anonymous blocks.
+  // The distinction in styles is needed because of CSS 2.1, section
+  // 9.2.1.1, which says:
+  //   When such an inline box is affected by relative positioning, the
+  //   relative positioning also affects the block-level box. 
   nsRefPtr<nsStyleContext> blockSC =
     mPresShell->StyleSet()->
       ResolveAnonymousBoxStyle(aIsPositioned ?
                                  nsCSSAnonBoxes::mozAnonymousPositionedBlock :
                                  nsCSSAnonBoxes::mozAnonymousBlock,
                                styleContext);
 
   nsIFrame* lastNewInline = aInitialInline->GetFirstContinuation();
diff --git a/layout/generic/nsBlockFrame.cpp b/layout/generic/nsBlockFrame.cpp
--- a/layout/generic/nsBlockFrame.cpp
+++ b/layout/generic/nsBlockFrame.cpp
@@ -5789,19 +5789,17 @@ nsBlockFrame::ReflowFloat(nsBlockReflowS
   if (aFloat->GetType() == nsGkAtoms::letterFrame) {
     // We never split floating first letters; an incomplete state for
     // such frames simply means that there is more content to be
     // reflowed on the line.
     if (NS_FRAME_IS_NOT_COMPLETE(aReflowStatus)) 
       aReflowStatus = NS_FRAME_COMPLETE;
   }
 
-  if (NS_FAILED(rv)) {
-    return rv;
-  }
+  NS_ENSURE_SUCCESS(rv, rv);
 
   // Capture the margin information for the caller
   aFloatMargin = floatRS.mComputedMargin; // float margins don't collapse
 
   const nsHTMLReflowMetrics& metrics = brc.GetMetrics();
 
   // Set the rect, make sure the view is properly sized and positioned,
   // and tell the frame we're done reflowing it
@@ -6457,19 +6455,17 @@ nsBlockFrame::SetInitialChildList(nsIAto
       !IsFrameOfType(eMathML) &&
       nsRefPtr<nsStyleContext>(GetFirstLetterStyle(presContext)) != nsnull;
     NS_ASSERTION(haveFirstLetterStyle ==
                  ((mState & NS_BLOCK_HAS_FIRST_LETTER_STYLE) != 0),
                  "NS_BLOCK_HAS_FIRST_LETTER_STYLE state out of sync");
 #endif
     
     rv = AddFrames(aChildList, nsnull);
-    if (NS_FAILED(rv)) {
-      return rv;
-    }
+    NS_ENSURE_SUCCESS(rv, rv);
 
     // Create a list bullet if this is a list-item. Note that this is
     // done here so that RenumberLists will work (it needs the bullets
     // to store the bullet numbers).  Also note that due to various
     // wrapper frames (scrollframes, columns) we want to use the
     // outermost (primary, ideally, but it's not set yet when we get
     // here) frame of our content for the display check.  On the other
     // hand, we look at ourselves for the GetPrevInFlow() check, since
diff --git a/layout/generic/nsFrame.cpp b/layout/generic/nsFrame.cpp
--- a/layout/generic/nsFrame.cpp
+++ b/layout/generic/nsFrame.cpp
@@ -364,17 +364,17 @@ nsFrame::Init(nsIContent*      aContent,
     // The frame gets reconstructed if we toggle the -moz-transform
     // property, so we can set this bit here and then ignore it.
     mState |= NS_FRAME_MAY_BE_TRANSFORMED;
   }
   
   DidSetStyleContext(nsnull);
 
   if (IsBoxWrapped())
-    InitBoxMetrics(PR_FALSE);
+    InitBoxMetrics(PR_FALSE); // XXX propagate allocation failure?
 
   return NS_OK;
 }
 
 NS_IMETHODIMP nsFrame::SetInitialChildList(nsIAtom*        aListName,
                                            nsFrameList&    aChildList)
 {
   // XXX This shouldn't be getting called at all, but currently is for backwards
@@ -6649,16 +6649,17 @@ nsFrame::RefreshSizeCache(nsBoxLayoutSta
       nsIFrame* firstFrame = nsnull;
       PRInt32 framesOnLine;
       nsRect lineBounds;
       PRUint32 lineFlags;
 
       do {
          lines->GetLine(count, &firstFrame, &framesOnLine, lineBounds, &lineFlags);
 
+         // XXX This should sum across forced breaks!
          if (lineBounds.height > metrics->mBlockMinSize.height)
            metrics->mBlockMinSize.height = lineBounds.height;
 
          count++;
       } while(firstFrame);
     } else {
       metrics->mBlockMinSize.height = desiredSize.height;
     }
diff --git a/layout/generic/nsSubDocumentFrame.cpp b/layout/generic/nsSubDocumentFrame.cpp
--- a/layout/generic/nsSubDocumentFrame.cpp
+++ b/layout/generic/nsSubDocumentFrame.cpp
@@ -749,16 +749,19 @@ nsSubDocumentFrame::AttributeChanged(PRI
       parentTreeOwner->ContentShellRemoved(docShellAsItem);
 
       if (value.LowerCaseEqualsLiteral("content") ||
           StringBeginsWith(value, NS_LITERAL_STRING("content-"),
                            nsCaseInsensitiveStringComparator())) {
         PRBool is_targetable = is_primary ||
           value.LowerCaseEqualsLiteral("content-targetable");
 
+        // Old comment, maybe still valid?
+        // XXXldb The conditions under which this call is made are
+        // different from the conditions under which nsFrameLoader does.
         parentTreeOwner->ContentShellAdded(docShellAsItem, is_primary,
                                            is_targetable, value);
       }
     }
   }
 
   return NS_OK;
 }
diff --git a/layout/style/ua.css b/layout/style/ua.css
--- a/layout/style/ua.css
+++ b/layout/style/ua.css
@@ -116,16 +116,17 @@
   outline: 1px dotted;
 }
 
 /* Miscellaneous */
 
 *|*::-moz-anonymous-block, *|*::-moz-cell-content {
   display: block !important;
   position: static !important;
+  /* XXX shouldn't unicode-bidi inherit? */
 }
 
 *|*::-moz-anonymous-block, *|*::-moz-anonymous-positioned-block {
   /* we currently inherit from the inline that is split */
   outline: inherit;
   outline-offset: inherit;
   clip-path: inherit;
   filter: inherit;
diff --git a/layout/tables/FixedTableLayoutStrategy.cpp b/layout/tables/FixedTableLayoutStrategy.cpp
--- a/layout/tables/FixedTableLayoutStrategy.cpp
+++ b/layout/tables/FixedTableLayoutStrategy.cpp
@@ -123,16 +123,18 @@ FixedTableLayoutStrategy::GetMinWidth(ns
                       styleWidth->GetIntValue() == NS_STYLE_WIDTH_MIN_CONTENT))) {
                     nscoord cellWidth = nsLayoutUtils::IntrinsicForContainer(
                         aRenderingContext, cellFrame, nsLayoutUtils::MIN_WIDTH);
                     if (colSpan > 1) {
                         // If a column-spanning cell is in the first
                         // row, split up the space evenly.  (XXX This
                         // isn't quite right if some of the columns it's
                         // in have specified widths.  Should we care?)
+                        // XXXldb This doesn't consider columns with no
+                        // cells originating.
                         cellWidth = ((cellWidth + spacing) / colSpan) - spacing;
                     }
                     result += cellWidth;
                 } else if (styleWidth->GetUnit() == eStyleUnit_Percent) {
                     if (colSpan > 1) {
                         // XXX Can this force columns to negative
                         // widths?
                         result -= spacing * (colSpan - 1);
diff --git a/layout/tables/nsTableFrame.cpp b/layout/tables/nsTableFrame.cpp
--- a/layout/tables/nsTableFrame.cpp
+++ b/layout/tables/nsTableFrame.cpp
@@ -338,16 +338,18 @@ nsTableFrame::SetInitialChildList(nsIAto
     const nsStyleDisplay* childDisplay = childFrame->GetStyleDisplay();
 
     if (NS_STYLE_DISPLAY_TABLE_COLUMN_GROUP == childDisplay->mDisplay) {
       NS_ASSERTION(nsGkAtoms::tableColGroupFrame == childFrame->GetType(),
                    "This is not a colgroup");
       mColGroups.AppendFrame(nsnull, childFrame);
     }
     else { // row groups and unknown frames go on the main list for now
+      NS_ASSERTION(IsRowGroup(childDisplay->mDisplay),
+                   "yikes, unknown frame type");
       mFrames.AppendFrame(nsnull, childFrame);
     }
   }
 
   // If we have a prev-in-flow, then we're a table that has been split and
   // so don't treat this like an append
   if (!GetPrevInFlow()) {
     // process col groups first so that real cols get constructed before
diff --git a/layout/xul/base/src/nsBoxFrame.cpp b/layout/xul/base/src/nsBoxFrame.cpp
--- a/layout/xul/base/src/nsBoxFrame.cpp
+++ b/layout/xul/base/src/nsBoxFrame.cpp
@@ -525,16 +525,17 @@ nsBoxFrame::GetInitialDirection(PRBool& 
 
   // Now check the style system to see if we should invert aIsNormal.
   const nsStyleXUL* boxInfo = GetStyleXUL();
   if (boxInfo->mBoxDirection == NS_STYLE_BOX_DIRECTION_REVERSE)
     aIsNormal = !aIsNormal; // Invert our direction.
   
   // Now see if we have an attribute.  The attribute overrides
   // the style system value.
+  // XXXldb This makes two reverses go back to normal!
   static nsIContent::AttrValuesArray strings[] =
     {&nsGkAtoms::reverse, &nsGkAtoms::ltr, &nsGkAtoms::rtl, nsnull};
   PRInt32 index = GetContent()->FindAttrValueIn(kNameSpaceID_None, nsGkAtoms::dir,
       strings, eCaseMatters);
   if (index >= 0) {
     PRPackedBool values[] = {!aIsNormal, PR_TRUE, PR_FALSE};
     aIsNormal = values[index];
   }
@@ -1889,20 +1890,21 @@ nsBoxFrame::CreateViewForFrame(nsPresCon
         parentView = aFrame->GetParent()->GetClosestView();
       }
 
       NS_ASSERTION(parentView, "no parent view");
 
       // Create a view
       nsIView *view = viewManager->CreateView(aFrame->GetRect(), parentView, visibility);
       if (view) {
-        viewManager->SetViewZIndex(view, autoZIndex, zIndex);
         // XXX put view last in document order until we can do better
         viewManager->InsertChild(parentView, view, nsnull, PR_TRUE);
       }
+        nsContainerFrame::SyncFrameViewProperties(aPresContext, aFrame,
+                                                  nsnull, view);
 
       // Remember our view
       aFrame->SetView(view);
 
       NS_FRAME_LOG(NS_FRAME_TRACE_CALLS,
         ("nsBoxFrame::CreateViewForFrame: frame=%p view=%p",
          aFrame));
       if (!view)
diff --git a/layout/xul/base/src/nsDeckFrame.cpp b/layout/xul/base/src/nsDeckFrame.cpp
--- a/layout/xul/base/src/nsDeckFrame.cpp
+++ b/layout/xul/base/src/nsDeckFrame.cpp
@@ -146,28 +146,34 @@ nsDeckFrame::InsertFrames(nsIAtom*      
 void
 nsDeckFrame::HideBox(nsPresContext* aPresContext, nsIBox* aBox)
 {
   nsIView* view = aBox->GetView();
 
   if (view) {
     nsIViewManager* viewManager = view->GetViewManager();
     viewManager->SetViewVisibility(view, nsViewVisibility_kHide);
+    // XXX This can go away when our notion of view visibility applies
+    // better to descendant views. (i.e., more callers use IsVisible
+    // rather than GetVisibility).
     viewManager->ResizeView(view, nsRect(0, 0, 0, 0));
   }
 }
 
 void
 nsDeckFrame::ShowBox(nsPresContext* aPresContext, nsIBox* aBox)
 {
   nsRect rect = aBox->GetRect();
   nsIView* view = aBox->GetView();
   if (view) {
     nsIViewManager* viewManager = view->GetViewManager();
     rect.x = rect.y = 0;
+    // XXX This can go away when our notion of view visibility applies
+    // better to descendant views. (i.e., more callers use IsVisible
+    // rather than GetVisibility).
     viewManager->ResizeView(view, rect);
     viewManager->SetViewVisibility(view, nsViewVisibility_kShow);
   }
 }
 
 void
 nsDeckFrame::IndexChanged(nsPresContext* aPresContext)
 {
diff --git a/layout/xul/base/src/nsSprocketLayout.cpp b/layout/xul/base/src/nsSprocketLayout.cpp
--- a/layout/xul/base/src/nsSprocketLayout.cpp
+++ b/layout/xul/base/src/nsSprocketLayout.cpp
@@ -244,19 +244,17 @@ nsSprocketLayout::Layout(nsIBox* aBox, n
   nscoord min = 0;
   nscoord max = 0;
   PRInt32 flexes = 0;
   PopulateBoxSizes(aBox, aState, boxSizes, min, max, flexes);
   
   // The |size| variable will hold the total size of children along the axis of
   // the box.  Continuing with the example begun in the comment above, size would
   // be 150 pixels.
-  nscoord size = clientRect.width;
-  if (!IsHorizontal(aBox))
-    size = clientRect.height;
+  nscoord size = IsHorizontal(aBox) ? clientRect.width : clientRect.height;
   ComputeChildSizes(aBox, aState, size, boxSizes, computedBoxSizes);
 
   // After the call to ComputeChildSizes, the |size| variable contains the
   // total required size of all the children.  We adjust our clientRect in the
   // appropriate dimension to match this size.  In our example, we now assign
   // 150 pixels into the clientRect.width.
   //
   // The variables |min| and |max| hold the minimum required size box must be 
diff --git a/modules/plugin/base/public/nsIPluginInstance.idl b/modules/plugin/base/public/nsIPluginInstance.idl
--- a/modules/plugin/base/public/nsIPluginInstance.idl
+++ b/modules/plugin/base/public/nsIPluginInstance.idl
@@ -199,16 +199,19 @@ interface nsIPluginInstance : nsISupport
      */
     void showStatus(in string aMessage);
 
     /**
      * Drop our reference to our owner.
      */
     void invalidateOwner();
 
+    /*
+     * The caller needs to root this object before making most JS API calls.
+     */
     JSObjectPtr GetJSObject(in JSContextPtr cx);
 
     readonly attribute AString formValue;
 
     void pushPopupsEnabledState(in boolean aEnabled);
     void popPopupsEnabledState();
 
     readonly attribute PRUint16 pluginAPIVersion;
diff --git a/modules/plugin/base/src/nsNPAPIPlugin.cpp b/modules/plugin/base/src/nsNPAPIPlugin.cpp
--- a/modules/plugin/base/src/nsNPAPIPlugin.cpp
+++ b/modules/plugin/base/src/nsNPAPIPlugin.cpp
@@ -2343,18 +2343,21 @@ _setvalue(NPP npp, NPPVariable variable,
         nsCOMPtr<nsIJSContextStack> contextStack =
           do_GetService("@mozilla.org/js/xpc/ContextStack;1", &rv);
         if (NS_SUCCEEDED(rv)) {
           NPBool bPushCaller = (result != nsnull);
           if (bPushCaller) {
             JSContext *cx;
             rv = inst->GetJSContext(&cx);
             if (NS_SUCCEEDED(rv))
+              // XXXldb Should assert that every push a plugin does
+              // is matched by a pop.
               rv = contextStack->Push(cx);
           } else {
+            // XXXldb Should assert that it's the right context!
             rv = contextStack->Pop(nsnull);
           }
         }
         return NS_SUCCEEDED(rv) ? NPERR_NO_ERROR : NPERR_GENERIC_ERROR;
       }
 
     case NPPVpluginKeepLibraryInMemory: {
       NPBool bCached = (result != nsnull);
diff --git a/netwerk/base/src/nsProtocolProxyService.h b/netwerk/base/src/nsProtocolProxyService.h
--- a/netwerk/base/src/nsProtocolProxyService.h
+++ b/netwerk/base/src/nsProtocolProxyService.h
@@ -307,16 +307,18 @@ public:
     struct HostInfoName {
         char    *host;
         PRUint32 host_len;
     };
 
 protected:
 
     // simplified array of filters defined by this struct
+    struct HostInfo;
+    friend struct HostInfo;
     struct HostInfo {
         PRBool  is_ipaddr;
         PRInt32 port;
         union {
             HostInfoIP   ip;
             HostInfoName name;
         };
 
diff --git a/netwerk/dns/nsIDNService.cpp b/netwerk/dns/nsIDNService.cpp
--- a/netwerk/dns/nsIDNService.cpp
+++ b/netwerk/dns/nsIDNService.cpp
@@ -117,17 +117,17 @@ void nsIDNService::prefsChanged(nsIPrefB
     PRBool val;
     if (NS_SUCCEEDED(prefBranch->GetBoolPref(NS_NET_PREF_IDNTESTBED, &val)))
       mMultilingualTestBed = val;
   }
   if (!pref || NS_LITERAL_STRING(NS_NET_PREF_IDNPREFIX).Equals(pref)) {
     nsXPIDLCString prefix;
     nsresult rv = prefBranch->GetCharPref(NS_NET_PREF_IDNPREFIX, getter_Copies(prefix));
     if (NS_SUCCEEDED(rv) && prefix.Length() <= kACEPrefixLen)
-      PL_strncpyz(nsIDNService::mACEPrefix, prefix.get(), kACEPrefixLen + 1);
+      PL_strncpyz(mACEPrefix, prefix.get(), sizeof(mACEPrefix));
   }
   if (!pref || NS_LITERAL_STRING(NS_NET_PREF_IDNBLACKLIST).Equals(pref)) {
     nsCOMPtr<nsISupportsString> blacklist;
     nsresult rv = prefBranch->GetComplexValue(NS_NET_PREF_IDNBLACKLIST,
                                               NS_GET_IID(nsISupportsString),
                                               getter_AddRefs(blacklist));
     if (NS_SUCCEEDED(rv))
       blacklist->ToString(getter_Copies(mIDNBlacklist));
@@ -141,16 +141,17 @@ void nsIDNService::prefsChanged(nsIPrefB
   }
 }
 
 nsIDNService::nsIDNService()
 {
   // initialize to the official prefix (RFC 3490 "5. ACE prefix")
   const char kIDNSPrefix[] = "xn--";
   strcpy(mACEPrefix, kIDNSPrefix);
+  NS_ASSERTION(sizeof(mACEPrefix) >= sizeof(kIDNSPrefix), "bad strcpy");
 
   mMultilingualTestBed = PR_FALSE;
 
   if (idn_success != idn_nameprep_create(NULL, &mNamePrepHandle))
     mNamePrepHandle = nsnull;
 
   mNormalizer = do_GetService(NS_UNICODE_NORMALIZER_CONTRACTID);
   /* member initializers and constructor code */
@@ -531,19 +532,19 @@ nsresult nsIDNService::stringPrep(const 
   NS_ENSURE_TRUE(idn_err == idn_success, NS_ERROR_FAILURE);
 
   nsAutoString namePrepStr;
   ucs4toUtf16(namePrepBuf, namePrepStr);
   if (namePrepStr.Length() >= kMaxDNSNodeLen)
     return NS_ERROR_FAILURE;
 
   // normalize
-  nsAutoString normlizedStr;
-  rv = mNormalizer->NormalizeUnicodeNFKC(namePrepStr, normlizedStr);
-  if (normlizedStr.Length() >= kMaxDNSNodeLen)
+  nsAutoString normalizedStr;
+  rv = mNormalizer->NormalizeUnicodeNFKC(namePrepStr, normalizedStr);
+  if (normalizedStr.Length() >= kMaxDNSNodeLen)
     return NS_ERROR_FAILURE;
 
   // prohibit
   const PRUint32 *found = nsnull;
   idn_err = idn_nameprep_isprohibited(mNamePrepHandle, 
                                       (const PRUint32 *) ucs4Buf, &found);
   if (idn_err != idn_success || found)
     return NS_ERROR_FAILURE;
@@ -558,17 +559,17 @@ nsresult nsIDNService::stringPrep(const 
     // check unassigned code points
     idn_err = idn_nameprep_isunassigned(mNamePrepHandle,
                                         (const PRUint32 *) ucs4Buf, &found);
     if (idn_err != idn_success || found)
       return NS_ERROR_FAILURE;
   }
 
   // set the result string
-  out.Assign(normlizedStr);
+  out.Assign(normalizedStr);
 
   return rv;
 }
 
 nsresult nsIDNService::encodeToACE(const nsAString& in, nsACString& out)
 {
   // RACE encode is supported for existing testing environment
   if (!strcmp("bq--", mACEPrefix))
diff --git a/toolkit/components/statusfilter/nsBrowserStatusFilter.cpp b/toolkit/components/statusfilter/nsBrowserStatusFilter.cpp
--- a/toolkit/components/statusfilter/nsBrowserStatusFilter.cpp
+++ b/toolkit/components/statusfilter/nsBrowserStatusFilter.cpp
@@ -90,16 +90,17 @@ nsBrowserStatusFilter::AddProgressListen
 {
     mListener = aListener;
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsBrowserStatusFilter::RemoveProgressListener(nsIWebProgressListener *aListener)
 {
+    NS_ASSERTION(aListener == mListener, "listener mismatch");
     if (aListener == mListener)
         mListener = nsnull;
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsBrowserStatusFilter::GetDOMWindow(nsIDOMWindow **aResult)
 {
diff --git a/tools/jprof/stub/libmalloc.cpp b/tools/jprof/stub/libmalloc.cpp
--- a/tools/jprof/stub/libmalloc.cpp
+++ b/tools/jprof/stub/libmalloc.cpp
@@ -81,17 +81,78 @@ static int gLogFD = -1;
 static pthread_t main_thread;
 
 static void startSignalCounter(unsigned long millisec);
 static int enableRTCSignals(bool enable);
 
 
 //----------------------------------------------------------------------
 
-#if defined(i386) || defined(_i386) || defined(__x86_64__)
+//#if __GNUC__ >= 3
+#if 0
+
+#include <unwind.h>
+
+struct CrawlStackClosure {
+  malloc_log_entry *me;
+  void *stack_top;
+  void *top_instr_ptr;
+};
+
+extern "C" {
+static _Unwind_Reason_Code CrawlStackCallback(struct _Unwind_Context *cx, void *c);
+}
+
+/* static */ _Unwind_Reason_Code
+CrawlStackCallback(struct _Unwind_Context *cx, void *c)
+{
+  CrawlStackClosure *closure = (CrawlStackClosure*)c;
+  malloc_log_entry *me = closure->me;
+  if (me->numpcs >= MAX_STACK_CRAWL) {
+    printf("too many frames\n");
+    return _URC_END_OF_STACK;
+  }
+
+  void *sp = (void*)_Unwind_GetCFA(cx);
+  if (sp < closure->stack_top) {
+    printf("still in signal handling %p %p\n", sp, closure->stack_top);
+    // Still in the signal handling code.
+#if 0
+    // The unwind code doesn't know how to cross the signal handler, so
+    // we'll try to help it.
+    _Unwind_SetGR(cx, __builtin_dwarf_sp_column(),
+                  (_Unwind_Word) closure->stack_top);
+    _Unwind_SetIP(cx, (_Unwind_Ptr) closure->top_instr_ptr);
+#endif
+    return _URC_NO_REASON;
+  }
+
+  void *ip = (void*)_Unwind_GetIP(cx);
+  me->pcs[me->numpcs++] = (char*) ip;
+  printf("recording frame\n");
+
+  return _URC_NO_REASON;
+}
+
+static void CrawlStack(malloc_log_entry* me,
+                       void* stack_top, void* top_instr_ptr)
+{
+  CrawlStackClosure closure;
+  closure.me = me;
+  closure.stack_top = stack_top;
+  closure.top_instr_ptr = top_instr_ptr;
+  me->numpcs = 0;
+
+  me->pcs[me->numpcs++] = (char*) top_instr_ptr;
+
+  _Unwind_Backtrace(CrawlStackCallback, &closure);
+}
+
+#elif defined(i386) || defined(_i386) || defined(__x86_64__)
+
 static void CrawlStack(malloc_log_entry* me,
                        void* stack_top, void* top_instr_ptr)
 {
   void **bp;
 #if defined(__i386)
   __asm__( "movl %%ebp, %0" : "=g"(bp));
 #elif defined(__x86_64__)
   __asm__( "movq %%rbp, %0" : "=g"(bp));
diff --git a/widget/src/gtk2/nsGtkIMModule.cpp b/widget/src/gtk2/nsGtkIMModule.cpp
--- a/widget/src/gtk2/nsGtkIMModule.cpp
+++ b/widget/src/gtk2/nsGtkIMModule.cpp
@@ -134,16 +134,17 @@ nsGtkIMModule::Init()
     GdkWindow* gdkWindow = GTK_WIDGET(container)->window;
 
     // NOTE: gtk_im_*_new() abort (kill) the whole process when it fails.
     //       So, we don't need to check the result.
 
     // Normal context.
     mContext = gtk_im_multicontext_new();
     gtk_im_context_set_client_window(mContext, gdkWindow);
+    // XXX Should we remove these signals before releasing the context?
     g_signal_connect(mContext, "preedit_changed",
                      G_CALLBACK(nsGtkIMModule::OnChangeCompositionCallback),
                      this);
     g_signal_connect(mContext, "retrieve_surrounding",
                      G_CALLBACK(nsGtkIMModule::OnRetrieveSurroundingCallback),
                      this);
     g_signal_connect(mContext, "delete_surrounding",
                      G_CALLBACK(nsGtkIMModule::OnDeleteSurroundingCallback),
diff --git a/widget/src/gtk2/nsWindow.cpp b/widget/src/gtk2/nsWindow.cpp
--- a/widget/src/gtk2/nsWindow.cpp
+++ b/widget/src/gtk2/nsWindow.cpp
@@ -1766,16 +1766,17 @@ nsWindow::Update()
     if (!mGdkWindow)
         return NS_OK;
 
     LOGDRAW(("Update [%p] %p\n", this, mGdkWindow));
 
     gdk_window_process_updates(mGdkWindow, FALSE);
     // Send the updates to the server.
     gdk_display_flush(gdk_drawable_get_display(GDK_DRAWABLE(mGdkWindow)));
+    // XSync(GDK_DISPLAY(), False);
     return NS_OK;
 }
 
 void*
 nsWindow::GetNativeData(PRUint32 aDataType)
 {
     switch (aDataType) {
     case NS_NATIVE_WINDOW:
@@ -4444,16 +4445,20 @@ void
 nsWindow::EnsureGrabs(void)
 {
     if (mRetryPointerGrab)
         GrabPointer();
     if (mRetryKeyboardGrab)
         GrabKeyboard();
 }
 
+// Once people are reliably running compositing window managers, we
+// could get 8-bit alpha by using gdk_screen_get_rgba_visual.
+// See http://mail.gnome.org/archives/gtk-app-devel-list/2005-September/msg00124.html
+
 void
 nsWindow::SetTransparencyMode(nsTransparencyMode aMode)
 {
     if (!mShell) {
         // Pass the request to the toplevel window
         GtkWidget *topWidget = nsnull;
         GetToplevelWidget(&topWidget);
         if (!topWidget)
diff --git a/xpcom/base/nsIWeakReference.idl b/xpcom/base/nsIWeakReference.idl
--- a/xpcom/base/nsIWeakReference.idl
+++ b/xpcom/base/nsIWeakReference.idl
@@ -44,16 +44,25 @@
  * An instance of |nsIWeakReference| is a proxy object that cooperates with
  * its referent to give clients a non-owning, non-dangling reference.  Clients
  * own the proxy, and should generally manage it with an |nsCOMPtr| (see the
  * type |nsWeakPtr| for a |typedef| name that stands out) as they would any
  * other XPCOM object.  The |QueryReferent| member function provides a
  * (hopefully short-lived) owning reference on demand, through which clients
  * can get useful access to the referent, while it still exists.
  *
+ * Thus this interface provides the following contract:  The result of
+ * calling QueryReferent on a given implementation of this interface
+ * with a given IID may change over time, but not more than twice:  it
+ * may change once from null to non-null (to account for aggregation)
+ * and it may change once from non-null to null.  This means that if
+ * a QueryReferent for an IID that once returned non-null (or was
+ * guaranteed by GetWeakReference to return non-null) at some time
+ * returns null, it will never again return non-null.
+ *
  * @version 1.0
  * @see nsISupportsWeakReference
  * @see nsWeakReference
  * @see nsWeakPtr
  */
 [scriptable, uuid(9188bc85-f92e-11d2-81ef-0060083a0bcf)]
 interface nsIWeakReference : nsISupports
   {
@@ -79,16 +88,22 @@ interface nsIWeakReference : nsISupports
 [scriptable, uuid(9188bc86-f92e-11d2-81ef-0060083a0bcf)]
 interface nsISupportsWeakReference : nsISupports
   {
     /**
      * |GetWeakReference| produces an appropriate instance of |nsIWeakReference|.
      * As with all good XPCOM `getters', you own the resulting interface and should
      * manage it with an |nsCOMPtr|.
      *
+     * If this call is successful, the weak reference returned is (while
+     * the nsISupportsWeakReference object is held) guaranteed to return
+     * non-null for a QueryReferent to any interface that the
+     * nsISupportsWeakReference implementation is known to
+     * QueryInterface to.
+     *
      * @see nsIWeakReference
      * @see nsWeakPtr
      * @see nsCOMPtr
      */
     nsIWeakReference GetWeakReference();
   };
 
 
diff --git a/xpcom/io/nsEscape.cpp b/xpcom/io/nsEscape.cpp
--- a/xpcom/io/nsEscape.cpp
+++ b/xpcom/io/nsEscape.cpp
@@ -455,16 +455,17 @@ NS_COM PRBool NS_EscapeURL(const char *p
         }
         tempBuffer[tempBufferPos++] = HEX_ESCAPE;
         tempBuffer[tempBufferPos++] = hexChars[c >> 4];	/* high nibble */
         tempBuffer[tempBufferPos++] = hexChars[c & 0x0f]; /* low nibble */
       }
 
       if (tempBufferPos >= sizeof(tempBuffer) - 4)
       {
+        // XXXldb Why is this guaranteed not to fire?
         NS_ASSERTION(writing, "should be writing");
         tempBuffer[tempBufferPos] = '\0';
         result += tempBuffer;
         tempBufferPos = 0;
       }
 
       previousIsNonASCII = (c > 0x7f);
     }
diff --git a/xpcom/io/nsLocalFileWin.cpp b/xpcom/io/nsLocalFileWin.cpp
--- a/xpcom/io/nsLocalFileWin.cpp
+++ b/xpcom/io/nsLocalFileWin.cpp
@@ -2358,17 +2358,17 @@ nsLocalFile::IsExecutable(PRBool *_retva
     nsAutoString path;
     if (symLink)
         GetTarget(path);
     else
         GetPath(path);
 
     // kill trailing dots and spaces.
     PRInt32 filePathLen = path.Length() - 1;
-    while(filePathLen > 0 && (path[filePathLen] == L' ' || path[filePathLen] == L'.'))
+    while(filePathLen >= 0 && (path[filePathLen] == L' ' || path[filePathLen] == L'.'))
     {
         path.Truncate(filePathLen--);
     } 
 
     // Get extension.
     PRInt32 dotIdx = path.RFindChar(PRUnichar('.'));
     if ( dotIdx != kNotFound ) {
         // Convert extension to lower case.
