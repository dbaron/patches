From: L. David Baron <dbaron@dbaron.org>

Make the StepEnd function use floor.

I think this may have been for
https://bugzilla.mozilla.org/show_bug.cgi?id=829168#c2
though
https://bugzilla.mozilla.org/show_bug.cgi?id=859018
suggests otherwise.

The commit message is no longer correct post
https://hg.mozilla.org/mozilla-central/rev/e624d16a7d8f

diff --git a/dom/animation/ComputedTimingFunction.cpp b/dom/animation/ComputedTimingFunction.cpp
--- a/dom/animation/ComputedTimingFunction.cpp
+++ b/dom/animation/ComputedTimingFunction.cpp
@@ -27,32 +27,32 @@ StepTiming(uint32_t aSteps,
            double aPortion,
            ComputedTimingFunction::BeforeFlag aBeforeFlag,
            nsTimingFunction::Type aType)
 {
   MOZ_ASSERT(aType == nsTimingFunction::Type::StepStart ||
              aType == nsTimingFunction::Type::StepEnd, "invalid type");
 
   // Calculate current step using step-end behavior
-  int32_t step = floor(aPortion * aSteps);
+  double step = floor(aPortion * aSteps);
 
   // step-start is one step ahead
   if (aType == nsTimingFunction::Type::StepStart) {
-    step++;
+    step += 1.0;
   }
 
   // If the "before flag" is set and we are at a transition point,
   // drop back a step
   if (aBeforeFlag == ComputedTimingFunction::BeforeFlag::Set &&
       fmod(aPortion * aSteps, 1) == 0) {
-    step--;
+    step -= 1.0;
   }
 
   // Convert to a progress value
-  double result = double(step) / double(aSteps);
+  double result = step / double(aSteps);
 
   // We should not produce a result outside [0, 1] unless we have an
   // input outside that range. This takes care of steps that would otherwise
   // occur at boundaries.
   if (result < 0.0 && aPortion >= 0.0) {
     return 0.0;
   }
   if (result > 1.0 && aPortion <= 1.0) {
