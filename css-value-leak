Fix (harmless?) leak of CSS value types.  b=382027

diff --git a/layout/style/nsCSSDataBlock.cpp b/layout/style/nsCSSDataBlock.cpp
--- a/layout/style/nsCSSDataBlock.cpp
+++ b/layout/style/nsCSSDataBlock.cpp
@@ -616,6 +616,7 @@ nsCSSExpandedDataBlock::DoExpand(nsCSSCo
             case eCSSType_Value: {
                 const nsCSSValue* val = ValueAtCursor(cursor);
                 NS_ASSERTION(val->GetUnit() != eCSSUnit_Null, "oops");
+                static_cast<nsCSSValue*>(prop)->~nsCSSValue();
                 memcpy(prop, val, sizeof(nsCSSValue));
                 cursor += CDBValueStorage_advance;
             } break;
@@ -623,6 +624,7 @@ nsCSSExpandedDataBlock::DoExpand(nsCSSCo
             case eCSSType_Rect: {
                 const nsCSSRect* val = RectAtCursor(cursor);
                 NS_ASSERTION(val->HasValue(), "oops");
+                static_cast<nsCSSRect*>(prop)->~nsCSSRect();
                 memcpy(prop, val, sizeof(nsCSSRect));
                 cursor += CDBRectStorage_advance;
             } break;
@@ -631,6 +633,7 @@ nsCSSExpandedDataBlock::DoExpand(nsCSSCo
                 const nsCSSValuePair* val = ValuePairAtCursor(cursor);
                 NS_ASSERTION(val->mXValue.GetUnit() != eCSSUnit_Null ||
                              val->mYValue.GetUnit() != eCSSUnit_Null, "oops");
+                static_cast<nsCSSValuePair*>(prop)->~nsCSSValuePair();
                 memcpy(prop, val, sizeof(nsCSSValuePair));
                 cursor += CDBValuePairStorage_advance;
             } break;
diff --git a/layout/style/nsCSSValue.cpp b/layout/style/nsCSSValue.cpp
--- a/layout/style/nsCSSValue.cpp
+++ b/layout/style/nsCSSValue.cpp
@@ -154,11 +154,6 @@ nsCSSValue::nsCSSValue(const nsCSSValue&
   }
 }
 
-nsCSSValue::~nsCSSValue()
-{
-  Reset();
-}
-
 nsCSSValue& nsCSSValue::operator=(const nsCSSValue& aCopy)
 {
   if (this != &aCopy) {
@@ -241,6 +236,20 @@ nscoord nsCSSValue::GetLengthTwips() con
   return 0;
 }
 
+void nsCSSValue::DoReset()
+{
+  if (eCSSUnit_String <= mUnit && mUnit <= eCSSUnit_Attr) {
+    mValue.mString->Release();
+  } else if (eCSSUnit_Array <= mUnit && mUnit <= eCSSUnit_Counters) {
+    mValue.mArray->Release();
+  } else if (eCSSUnit_URL == mUnit) {
+    mValue.mURL->Release();
+  } else if (eCSSUnit_Image == mUnit) {
+    mValue.mImage->Release();
+  }
+  mUnit = eCSSUnit_Null;
+}
+
 void nsCSSValue::SetIntValue(PRInt32 aValue, nsCSSUnit aUnit)
 {
   NS_ASSERTION((eCSSUnit_Integer == aUnit) ||
diff --git a/layout/style/nsCSSValue.h b/layout/style/nsCSSValue.h
--- a/layout/style/nsCSSValue.h
+++ b/layout/style/nsCSSValue.h
@@ -137,10 +137,6 @@ public:
     : mUnit(aUnit)
   {
     NS_ASSERTION(aUnit <= eCSSUnit_System_Font, "not a valueless unit");
-    if (aUnit > eCSSUnit_System_Font) {
-      mUnit = eCSSUnit_Null;
-    }
-    mValue.mInt = 0;
   }
 
   nsCSSValue(PRInt32 aValue, nsCSSUnit aUnit) NS_HIDDEN;
@@ -151,7 +147,7 @@ public:
   explicit nsCSSValue(URL* aValue) NS_HIDDEN;
   explicit nsCSSValue(Image* aValue) NS_HIDDEN;
   nsCSSValue(const nsCSSValue& aCopy) NS_HIDDEN;
-  NS_CONSTRUCTOR_FASTCALL ~nsCSSValue() NS_HIDDEN;
+  ~nsCSSValue() { Reset(); }
 
   NS_HIDDEN_(nsCSSValue&)  operator=(const nsCSSValue& aCopy);
   NS_HIDDEN_(PRBool)      operator==(const nsCSSValue& aOther) const;
@@ -258,19 +254,13 @@ public:
 
   NS_HIDDEN_(void)  Reset()  // sets to null
   {
-    if (eCSSUnit_String <= mUnit && mUnit <= eCSSUnit_Attr) {
-      mValue.mString->Release();
-    } else if (eCSSUnit_Array <= mUnit && mUnit <= eCSSUnit_Counters) {
-      mValue.mArray->Release();
-    } else if (eCSSUnit_URL == mUnit) {
-      mValue.mURL->Release();
-    } else if (eCSSUnit_Image == mUnit) {
-      mValue.mImage->Release();
-    }
-    mUnit = eCSSUnit_Null;
-    mValue.mInt = 0;
-  }
-
+    if (mUnit != eCSSUnit_Null)
+      DoReset();
+  }
+private:
+  NS_HIDDEN_(void)  DoReset();
+
+public:
   NS_HIDDEN_(void)  SetIntValue(PRInt32 aValue, nsCSSUnit aUnit);
   NS_HIDDEN_(void)  SetPercentValue(float aValue);
   NS_HIDDEN_(void)  SetFloatValue(float aValue, nsCSSUnit aUnit);
