From: L. David Baron <dbaron@dbaron.org>

Add mechanism for computation of calc() in the cases where the arguments are only lengths (i.e., where computed style can contain a simple result rather than a calc tree).

diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -72,16 +72,17 @@
 #include "nsIStyleRule.h"
 #include "nsBidiUtils.h"
 #include "nsStyleStructInlines.h"
 #include "nsStyleTransformMatrix.h"
 #include "nsCSSKeywords.h"
 #include "nsCSSProps.h"
 #include "nsTArray.h"
 #include "nsContentUtils.h"
+#include "CSSCalc.h"
 
 #define NS_SET_IMAGE_REQUEST(method_, context_, request_)                   \
   if ((context_)->PresContext()->IsDynamic()) {                               \
     method_(request_);                                                      \
   } else {                                                                  \
     nsCOMPtr<imgIRequest> req = nsContentUtils::GetStaticRequest(request_); \
     method_(req);                                                           \
   }
@@ -158,16 +159,73 @@ static void EnsureBlockDisplay(PRUint8& 
     break;
 
   default :
     // make it a block
     display = NS_STYLE_DISPLAY_BLOCK;
   }
 }
 
+static nscoord CalcLengthWith(const nsCSSValue& aValue,
+                              nscoord aFontSize,
+                              const nsStyleFont* aStyleFont,
+                              nsStyleContext* aStyleContext,
+                              nsPresContext* aPresContext,
+                              PRBool aUseProvidedRootEmSize,
+                              PRBool aUseUserFontSet,
+                              PRBool& aCanStoreInRuleTree);
+
+struct CalcLengthCalcOps
+{
+  typedef nscoord result_type;
+
+  struct ComputeData {
+    // All of the parameters to CalcLengthWith except aValue.
+    nscoord mFontSize;
+    const nsStyleFont* mStyleFont;
+    nsStyleContext* mStyleContext;
+    nsPresContext* mPresContext;
+    PRBool mUseProvidedRootEmSize;
+    PRBool mUseUserFontSet;
+    PRBool& mCanStoreInRuleTree;
+
+    ComputeData(nscoord aFontSize, const nsStyleFont* aStyleFont,
+                nsStyleContext* aStyleContext, nsPresContext* aPresContext,
+                PRBool aUseProvidedRootEmSize, PRBool aUseUserFontSet,
+                PRBool& aCanStoreInRuleTree)
+      : mFontSize(aFontSize),
+        mStyleFont(aStyleFont),
+        mStyleContext(aStyleContext),
+        mPresContext(aPresContext),
+        mUseProvidedRootEmSize(aUseProvidedRootEmSize),
+        mUseUserFontSet(aUseUserFontSet),
+        mCanStoreInRuleTree(aCanStoreInRuleTree)
+    {
+    }
+  };
+
+  static result_type ComputeLeaf(const nsCSSValue& aValue,
+                                 const ComputeData& aClosure)
+  {
+    return CalcLengthWith(aValue, aClosure.mFontSize, aClosure.mStyleFont,
+                          aClosure.mStyleContext, aClosure.mPresContext,
+                          aClosure.mUseProvidedRootEmSize,
+                          aClosure.mUseUserFontSet,
+                          aClosure.mCanStoreInRuleTree);
+  }
+
+  static result_type Merge(nsCSSUnit aCalcFunction,
+                           const result_type aValue1,
+                           const result_type aValue2)
+  {
+    return mozilla::css::
+             MergeCalcValues<result_type>(aCalcFunction, aValue1, aValue2);
+  }
+};
+
 static inline nscoord ScaleCoord(const nsCSSValue &aValue, float factor)
 {
   return NSToCoordRoundWithClamp(aValue.GetFloatValue() * factor);
 }
 
 static nscoord CalcLengthWith(const nsCSSValue& aValue,
                               nscoord aFontSize,
                               const nsStyleFont* aStyleFont,
@@ -256,16 +314,34 @@ static nscoord CalcLengthWith(const nsCS
         aPresContext->GetMetricsFor(font, aUseUserFontSet);
       nsCOMPtr<nsIThebesFontMetrics> tfm(do_QueryInterface(fm));
       gfxFloat zeroWidth = (tfm->GetThebesFontGroup()->GetFontAt(0)
                             ->GetMetrics().zeroOrAveCharWidth);
 
       return ScaleCoord(aValue, NS_ceil(aPresContext->AppUnitsPerDevPixel() *
                                         zeroWidth));
     }
+    // For properties for which lengths are the *only* units accepted in
+    // calc(), we can handle calc() here and just compute a final
+    // result.  We ensure that we don't get to this code for other
+    // properties by not calling CalcLength in those cases:  SetCoord
+    // only calls CalcLength for a calc when it is appropriate to do so.
+    case eCSSUnit_Calc:
+    case eCSSUnit_Calc_Plus:
+    case eCSSUnit_Calc_Minus:
+    case eCSSUnit_Calc_Times:
+    case eCSSUnit_Calc_Divided:
+    case eCSSUnit_Calc_Modulus:
+    case eCSSUnit_Calc_Minimum:
+    case eCSSUnit_Calc_Maximum: {
+      CalcLengthCalcOps::ComputeData
+        data(aFontSize, aStyleFont, aStyleContext, aPresContext,
+             aUseProvidedRootEmSize, aUseUserFontSet, aCanStoreInRuleTree);
+      return mozilla::css::ComputeCalc<CalcLengthCalcOps>(aValue, data);
+    }
     default:
       NS_NOTREACHED("unexpected unit");
       break;
   }
   return 0;
 }
 
 /* static */ nscoord
@@ -309,16 +385,17 @@ nsRuleNode::CalcLengthWithInitialFont(ns
 #define SETCOORD_INTEGER                0x40   // I
 #define SETCOORD_ENUMERATED             0x80   // E
 #define SETCOORD_NONE                   0x100  // O
 #define SETCOORD_INITIAL_ZERO           0x200
 #define SETCOORD_INITIAL_AUTO           0x400
 #define SETCOORD_INITIAL_NONE           0x800
 #define SETCOORD_INITIAL_NORMAL         0x1000
 #define SETCOORD_INITIAL_HALF           0x2000
+#define SETCOORD_CALC_LENGTH_ONLY       0x4000
 
 #define SETCOORD_LP     (SETCOORD_LENGTH | SETCOORD_PERCENT)
 #define SETCOORD_LH     (SETCOORD_LENGTH | SETCOORD_INHERIT)
 #define SETCOORD_AH     (SETCOORD_AUTO | SETCOORD_INHERIT)
 #define SETCOORD_LAH    (SETCOORD_AUTO | SETCOORD_LENGTH | SETCOORD_INHERIT)
 #define SETCOORD_LPH    (SETCOORD_LP | SETCOORD_INHERIT)
 #define SETCOORD_LPAH   (SETCOORD_LP | SETCOORD_AH)
 #define SETCOORD_LPEH   (SETCOORD_LP | SETCOORD_ENUMERATED | SETCOORD_INHERIT)
@@ -337,18 +414,20 @@ static PRBool SetCoord(const nsCSSValue&
                        PRInt32 aMask, nsStyleContext* aStyleContext,
                        nsPresContext* aPresContext,
                        PRBool& aCanStoreInRuleTree)
 {
   PRBool  result = PR_TRUE;
   if (aValue.GetUnit() == eCSSUnit_Null) {
     result = PR_FALSE;
   }
-  else if (((aMask & SETCOORD_LENGTH) != 0) &&
-           aValue.IsLengthUnit()) {
+  else if ((((aMask & SETCOORD_LENGTH) != 0) &&
+            aValue.IsLengthUnit()) ||
+           (((aMask & SETCOORD_CALC_LENGTH_ONLY) != 0) &&
+            aValue.IsCalcUnit())) {
     aCoord.SetCoordValue(CalcLength(aValue, aStyleContext, aPresContext,
                                     aCanStoreInRuleTree));
   }
   else if (((aMask & SETCOORD_PERCENT) != 0) &&
            (aValue.GetUnit() == eCSSUnit_Percent)) {
     aCoord.SetPercentValue(aValue.GetPercentValue());
   }
   else if (((aMask & SETCOORD_INTEGER) != 0) &&
