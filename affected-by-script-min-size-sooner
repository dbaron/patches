From: L. David Baron <dbaron@dbaron.org>

Bug 1186768 patch 3 - Compute affectedByScriptMinSize sooner to avoid asserting or doing extra work.

The assertion added in patch 1 caught a separate bug, which is that we
were computing whether we were affected by scriptMinSize too soon.
Prior to patch 1, this bug meant doing extra work (taking the slow
path).  With patch 1, this changes in documents without MathML to
hitting the assertion instead of taking the slow path.

diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -3841,24 +3841,29 @@ nsRuleNode::SetFont(nsPresContext* aPres
   // font-size: enum, length, percent, inherit
   nscoord scriptLevelAdjustedParentSize = aParentFont->mSize;
   nscoord scriptLevelAdjustedUnconstrainedParentSize;
   scriptLevelAdjustedParentSize =
     ComputeScriptLevelSize(aFont, aParentFont, aPresContext,
                            &scriptLevelAdjustedUnconstrainedParentSize);
   NS_ASSERTION(!aUsedStartStruct || aFont->mScriptUnconstrainedSize == aFont->mSize,
                "If we have a start struct, we should have reset everything coming in here");
+
+  // Compute whether we're affected by scriptMinSize *before* calling
+  // SetFontSize, since aParentFont might be the same as aFont.  If it
+  // is, calling SetFontSize might throw off our calculation.
+  bool affectedByScriptMinSize =
+    aParentFont->mSize != aParentFont->mScriptUnconstrainedSize ||
+    scriptLevelAdjustedParentSize !=
+      scriptLevelAdjustedUnconstrainedParentSize;
+
   SetFontSize(aPresContext, aRuleData, aFont, aParentFont,
               &aFont->mSize,
               systemFont, aParentFont->mSize, scriptLevelAdjustedParentSize,
               aUsedStartStruct, atRoot, aConditions);
-  bool affectedByScriptMinSize =
-    aParentFont->mSize != aParentFont->mScriptUnconstrainedSize ||
-    scriptLevelAdjustedParentSize !=
-      scriptLevelAdjustedUnconstrainedParentSize;
   if (!aPresContext->Document()->GetMathMLEnabled()) {
     MOZ_ASSERT(!affectedByScriptMinSize);
     // If MathML is not enabled, we don't need to mark this node as
     // uncacheable.  If it becomes enabled, code in
     // nsMathMLElementFactory will rebuild the rule tree and style data
     // when MathML is first enabled (see nsMathMLElement::BindToTree).
     aFont->mScriptUnconstrainedSize = aFont->mSize;
   } else if (!affectedByScriptMinSize) {
