Add support for -moz-intrinsic, -moz-min-intrinsic, -moz-shrink-wrap, and -moz-fill for width, min-width, and max-width.  b=311415

diff --git a/layout/base/nsLayoutUtils.cpp b/layout/base/nsLayoutUtils.cpp
--- a/layout/base/nsLayoutUtils.cpp
+++ b/layout/base/nsLayoutUtils.cpp
@@ -1279,9 +1279,9 @@ nsLayoutUtils::IntrinsicForContainer(nsI
 
   const nsStylePosition *stylePos = aFrame->GetStylePosition();
   const PRUint8 boxSizing = stylePos->mBoxSizing;
-  const nsStyleCoord &styleWidth = stylePos->mWidth;
-  const nsStyleCoord &styleMinWidth = stylePos->mMinWidth;
-  const nsStyleCoord &styleMaxWidth = stylePos->mMaxWidth;
+  const nsStyleCoord &styleWidth = stylePos->mTMPWidth;
+  const nsStyleCoord &styleMinWidth = stylePos->mTMPMinWidth;
+  const nsStyleCoord &styleMaxWidth = stylePos->mTMPMaxWidth;
 
   // We build up two values starting with the content box, and then
   // adding padding, border and margin.  The result is normally
@@ -1364,6 +1364,7 @@ nsLayoutUtils::IntrinsicForContainer(nsI
   pctTotal += pctOutsideWidth;
 
   nscoord w;
+  // XXX NEED TO HANDLE NEW VALUES HERE!
   if (GetAbsoluteCoord(styleWidth, aRenderingContext, aFrame, w)) {
     result = AddPercents(aType, w + coordOutsideWidth, pctOutsideWidth);
   }
@@ -1504,7 +1505,7 @@ nsLayoutUtils::ComputeSizeWithIntrinsicD
   // a * (b / c) because of its reduced accuracy relative to a * b / c
   // or (a * b) / c (which are equivalent).
 
-  PRBool isAutoWidth = stylePos->mWidth.GetUnit() == eStyleUnit_Auto;
+  PRBool isAutoWidth = stylePos->mTMPWidth.GetUnit() == eStyleUnit_Auto;
   PRBool isAutoHeight = IsAutoHeight(stylePos->mHeight, aCBSize.height);
 
   nsSize boxSizingAdjust(0,0);
@@ -1518,17 +1519,18 @@ nsLayoutUtils::ComputeSizeWithIntrinsicD
 
   nscoord width, minWidth, maxWidth, height, minHeight, maxHeight;
 
+  // XXX NEED TO HANDLE NEW WIDTH VALUES HERE!
   if (!isAutoWidth) {
     width = nsLayoutUtils::ComputeWidthDependentValue(aRenderingContext,
-              aFrame, aCBSize.width, stylePos->mWidth) -
+              aFrame, aCBSize.width, stylePos->mTMPWidth) -
             boxSizingAdjust.width;
     if (width < 0)
       width = 0;
   }
 
-  if (stylePos->mMaxWidth.GetUnit() != eStyleUnit_Null) {
+  if (stylePos->mTMPMaxWidth.GetUnit() != eStyleUnit_Null) {
     maxWidth = nsLayoutUtils::ComputeWidthDependentValue(aRenderingContext,
-                 aFrame, aCBSize.width, stylePos->mMaxWidth) -
+                 aFrame, aCBSize.width, stylePos->mTMPMaxWidth) -
                boxSizingAdjust.width;
     if (maxWidth < 0)
       maxWidth = 0;
@@ -1537,7 +1539,7 @@ nsLayoutUtils::ComputeSizeWithIntrinsicD
   }
 
   minWidth = nsLayoutUtils::ComputeWidthDependentValue(aRenderingContext,
-               aFrame, aCBSize.width, stylePos->mMinWidth) -
+               aFrame, aCBSize.width, stylePos->mTMPMinWidth) -
              boxSizingAdjust.width;
   if (minWidth < 0)
     minWidth = 0;
diff --git a/layout/base/nsStyleConsts.h b/layout/base/nsStyleConsts.h
--- a/layout/base/nsStyleConsts.h
+++ b/layout/base/nsStyleConsts.h
@@ -427,6 +427,12 @@
 #define NS_STYLE_FONT_PULL_DOWN_MENU						14
 #define NS_STYLE_FONT_LIST											15
 #define NS_STYLE_FONT_FIELD											16
+
+// See nsStylePosition::mWidth, mMinWidth, mMaxWidth
+#define NS_STYLE_WIDTH_INTRINSIC                0
+#define NS_STYLE_WIDTH_MIN_INTRINSIC            1
+#define NS_STYLE_WIDTH_SHRINK_WRAP              2
+#define NS_STYLE_WIDTH_FILL                     3
 
 // See nsStylePosition.mPosition
 #define NS_STYLE_POSITION_STATIC                0
diff --git a/layout/generic/nsAbsoluteContainingBlock.cpp b/layout/generic/nsAbsoluteContainingBlock.cpp
--- a/layout/generic/nsAbsoluteContainingBlock.cpp
+++ b/layout/generic/nsAbsoluteContainingBlock.cpp
@@ -229,9 +229,10 @@ nsAbsoluteContainingBlock::FrameDependsO
     // width, min-width, and max-width are all lengths, 'none', or enumerated,
     // then our frame width does not depend on the parent width.
     // Note that borders never depend on the parent width
-    if (pos->mWidth.GetUnit() != eStyleUnit_Coord ||
-        pos->mMinWidth.GetUnit() != eStyleUnit_Coord ||
-        !IsFixedMaxSize(pos->mMaxWidth.GetUnit()) ||
+    // XXX All of the enumerated values except -moz-fill are ok too.
+    if (pos->mTMPWidth.GetUnit() != eStyleUnit_Coord ||
+        pos->mTMPMinWidth.GetUnit() != eStyleUnit_Coord ||
+        !IsFixedMaxSize(pos->mTMPMaxWidth.GetUnit()) ||
         !IsFixedPaddingSize(padding->mPadding.GetLeftUnit()) ||
         !IsFixedPaddingSize(padding->mPadding.GetRightUnit())) {
       return PR_TRUE;
diff --git a/layout/generic/nsContainerFrame.cpp b/layout/generic/nsContainerFrame.cpp
--- a/layout/generic/nsContainerFrame.cpp
+++ b/layout/generic/nsContainerFrame.cpp
@@ -683,7 +683,7 @@ nsContainerFrame::ComputeAutoSize(nsIRen
   // replaced elements always shrink-wrap
   if (aShrinkWrap || IsFrameOfType(eReplaced)) {
     // don't bother setting it if the result won't be used
-    if (GetStylePosition()->mWidth.GetUnit() == eStyleUnit_Auto) {
+    if (GetStylePosition()->mTMPWidth.GetUnit() == eStyleUnit_Auto) {
       result.width = ShrinkWidthToFit(aRenderingContext, availBased);
     }
   } else {
diff --git a/layout/generic/nsFrame.cpp b/layout/generic/nsFrame.cpp
--- a/layout/generic/nsFrame.cpp
+++ b/layout/generic/nsFrame.cpp
@@ -3145,18 +3145,19 @@ nsFrame::ComputeSize(nsIRenderingContext
   }
 
   // Compute width
-
-  if (stylePos->mWidth.GetUnit() != eStyleUnit_Auto) {
+  // XXX Need to handle new values!
+
+  if (stylePos->mTMPWidth.GetUnit() != eStyleUnit_Auto) {
     result.width =
       nsLayoutUtils::ComputeWidthDependentValue(aRenderingContext, this,
-        aCBSize.width, stylePos->mWidth) -
+        aCBSize.width, stylePos->mTMPWidth) -
       boxSizingAdjust.width;
   }
 
-  if (stylePos->mMaxWidth.GetUnit() != eStyleUnit_Null) {
+  if (stylePos->mTMPMaxWidth.GetUnit() != eStyleUnit_Null) {
     nscoord maxWidth =
       nsLayoutUtils::ComputeWidthDependentValue(aRenderingContext, this,
-        aCBSize.width, stylePos->mMaxWidth) -
+        aCBSize.width, stylePos->mTMPMaxWidth) -
       boxSizingAdjust.width;
     if (maxWidth < result.width)
       result.width = maxWidth;
@@ -3164,7 +3165,7 @@ nsFrame::ComputeSize(nsIRenderingContext
 
   nscoord minWidth =
     nsLayoutUtils::ComputeWidthDependentValue(aRenderingContext, this,
-      aCBSize.width, stylePos->mMinWidth) -
+      aCBSize.width, stylePos->mTMPMinWidth) -
     boxSizingAdjust.width;
   if (minWidth > result.width)
     result.width = minWidth;
@@ -3239,7 +3240,7 @@ nsFrame::ComputeAutoSize(nsIRenderingCon
   nsSize result(0xdeadbeef, NS_UNCONSTRAINEDSIZE);
 
   // don't bother setting it if the result won't be used
-  if (GetStylePosition()->mWidth.GetUnit() == eStyleUnit_Auto) {
+  if (GetStylePosition()->mTMPWidth.GetUnit() == eStyleUnit_Auto) {
     nscoord availBased = aAvailableWidth - aMargin.width - aBorder.width -
                          aPadding.width;
     result.width = ShrinkWidthToFit(aRenderingContext, availBased);
diff --git a/layout/generic/nsHTMLReflowState.cpp b/layout/generic/nsHTMLReflowState.cpp
--- a/layout/generic/nsHTMLReflowState.cpp
+++ b/layout/generic/nsHTMLReflowState.cpp
@@ -721,6 +721,7 @@ nsHTMLReflowState::CalculateHypothetical
   // If it's a replaced element and it has a 'auto' value for 'width', see if we
   // can get the intrinsic size. This will allow us to exactly determine both the
   // left and right edges
+  // XXX NEED TO GO THROUGH WHOLE FILE!
   nsStyleUnit widthUnit = mStylePosition->mWidth.GetUnit();
   nsSize      intrinsicSize;
   PRBool      knowIntrinsicSize = PR_FALSE;
diff --git a/layout/generic/nsImageFrame.cpp b/layout/generic/nsImageFrame.cpp
--- a/layout/generic/nsImageFrame.cpp
+++ b/layout/generic/nsImageFrame.cpp
@@ -135,7 +135,7 @@ static PRBool HaveFixedSize(const nsStyl
   // check the width and height values in the reflow state's style struct
   // - if width and height are specified as either coord or percentage, then
   //   the size of the image frame is constrained
-  nsStyleUnit widthUnit = aStylePosition->mWidth.GetUnit();
+  nsStyleUnit widthUnit = aStylePosition->mTMPWidth.GetUnit();
   nsStyleUnit heightUnit = aStylePosition->mHeight.GetUnit();
 
   return ((widthUnit  == eStyleUnit_Coord ||
@@ -157,7 +157,7 @@ inline PRBool HaveFixedSize(const nsHTML
   // in pass 2 reflow, ComputedWidth() is 0, it also needs to return PR_FALSE
   // see bug 156731
   nsStyleUnit heightUnit = (*(aReflowState.mStylePosition)).mHeight.GetUnit();
-  nsStyleUnit widthUnit = (*(aReflowState.mStylePosition)).mWidth.GetUnit();
+  nsStyleUnit widthUnit = (*(aReflowState.mStylePosition)).mTMPWidth.GetUnit();
   return ((eStyleUnit_Percent == heightUnit && NS_UNCONSTRAINEDSIZE == aReflowState.mComputedHeight) ||
           (eStyleUnit_Percent == widthUnit && (NS_UNCONSTRAINEDSIZE == aReflowState.ComputedWidth() ||
            0 == aReflowState.ComputedWidth())))
diff --git a/layout/generic/nsLineLayout.cpp b/layout/generic/nsLineLayout.cpp
--- a/layout/generic/nsLineLayout.cpp
+++ b/layout/generic/nsLineLayout.cpp
@@ -702,6 +702,16 @@ HasPercentageUnitSide(const nsStyleSides
   return PR_FALSE;
 }
 
+inline PRBool
+WidthDependsOnContainer(const nsStyleCoord& aCoord)
+{
+  return aCoord.GetUnit() == eStyleUnit_Percent ||
+         (aCoord.GetUnit() == eStyleUnit_Enumerated &&
+          (aCoord.GetIntValue() == NS_STYLE_WIDTH_FILL ||
+          (aCoord.GetIntValue() == NS_STYLE_WIDTH_SHRINK_WRAP)));
+
+}
+
 static PRBool
 IsPercentageAware(const nsIFrame* aFrame)
 {
@@ -733,15 +743,15 @@ IsPercentageAware(const nsIFrame* aFrame
 
   const nsStylePosition* pos = aFrame->GetStylePosition();
 
-  if (eStyleUnit_Percent == pos->mWidth.GetUnit() ||
-      eStyleUnit_Percent == pos->mMaxWidth.GetUnit() ||
-      eStyleUnit_Percent == pos->mMinWidth.GetUnit() ||
+  if (WidthDependsOnContainer(pos->mTMPWidth) ||
+      WidthDependsOnContainer(pos->mTMPMaxWidth) ||
+      WidthDependsOnContainer(pos->mTMPMinWidth) ||
       eStyleUnit_Percent == pos->mOffset.GetRightUnit() ||
       eStyleUnit_Percent == pos->mOffset.GetLeftUnit()) {
     return PR_TRUE;
   }
 
-  if (eStyleUnit_Auto == pos->mWidth.GetUnit()) {
+  if (eStyleUnit_Auto == pos->mTMPWidth.GetUnit()) {
     // We need to check for frames that shrink-wrap when they're auto
     // width.
     const nsStyleDisplay* disp = aFrame->GetStyleDisplay();
diff --git a/layout/generic/nsSpacerFrame.cpp b/layout/generic/nsSpacerFrame.cpp
--- a/layout/generic/nsSpacerFrame.cpp
+++ b/layout/generic/nsSpacerFrame.cpp
@@ -109,6 +109,7 @@ SpacerFrame::Reflow(nsPresContext*      
   DISPLAY_REFLOW(aPresContext, this, aReflowState, aMetrics, aStatus);
   aStatus = NS_FRAME_COMPLETE;
 
+  // XXX Should use containing block size!
   nsSize percentBase(aReflowState.availableWidth, aReflowState.availableHeight);
   if (percentBase.width == NS_UNCONSTRAINEDSIZE)
     percentBase.width = 0;
@@ -145,14 +146,15 @@ SpacerFrame::GetDesiredSize(nsHTMLReflow
     break;
 
   case TYPE_IMAGE:
+    // XXX Need to handle new (and existing) values, and min/max!
     // width
-    nsStyleUnit unit = position->mWidth.GetUnit();
+    nsStyleUnit unit = position->mTMPWidth.GetUnit();
     if (eStyleUnit_Coord == unit) {
-      aMetrics.width = position->mWidth.GetCoordValue();
+      aMetrics.width = position->mTMPWidth.GetCoordValue();
     }
     else if (eStyleUnit_Percent == unit) 
     {
-      float factor = position->mWidth.GetPercentValue();
+      float factor = position->mTMPWidth.GetPercentValue();
       aMetrics.width = NSToCoordRound(factor * aPercentBase.width);
     }
 
diff --git a/layout/style/nsCSSKeywordList.h b/layout/style/nsCSSKeywordList.h
--- a/layout/style/nsCSSKeywordList.h
+++ b/layout/style/nsCSSKeywordList.h
@@ -102,6 +102,7 @@ CSS_KEY(-moz-ethiopic-halehame-ti-et, _m
 CSS_KEY(-moz-ethiopic-halehame-ti-et, _moz_ethiopic_halehame_ti_et)
 CSS_KEY(-moz-field, _moz_field)
 CSS_KEY(-moz-fieldtext, _moz_fieldtext)
+CSS_KEY(-moz-fill, _moz_fill)
 CSS_KEY(-moz-grabbing, _moz_grabbing)
 CSS_KEY(-moz-grab, _moz_grab)
 CSS_KEY(-moz-grid-group, _moz_grid_group)
@@ -119,6 +120,7 @@ CSS_KEY(-moz-inline-box, _moz_inline_box
 CSS_KEY(-moz-inline-box, _moz_inline_box)
 CSS_KEY(-moz-inline-grid, _moz_inline_grid)
 CSS_KEY(-moz-inline-stack, _moz_inline_stack)
+CSS_KEY(-moz-intrinsic, _moz_intrinsic)
 CSS_KEY(-moz-japanese-formal, _moz_japanese_formal)
 CSS_KEY(-moz-japanese-informal, _moz_japanese_informal)
 CSS_KEY(-moz-kannada, _moz_kannada)
@@ -146,6 +148,7 @@ CSS_KEY(-moz-menuhovertext, _moz_menuhov
 CSS_KEY(-moz-menuhovertext, _moz_menuhovertext)
 CSS_KEY(-moz-menubarhovertext, _moz_menubarhovertext)
 CSS_KEY(-moz-middle-with-baseline, _moz_middle_with_baseline)
+CSS_KEY(-moz-min-intrinsic, _moz_min_intrinsic)
 CSS_KEY(-moz-myanmar, _moz_myanmar)
 CSS_KEY(-moz-none, _moz_none)
 CSS_KEY(-moz-oriya, _moz_oriya)
@@ -159,6 +162,7 @@ CSS_KEY(-moz-scrollbars-none, _moz_scrol
 CSS_KEY(-moz-scrollbars-none, _moz_scrollbars_none)
 CSS_KEY(-moz-scrollbars-vertical, _moz_scrollbars_vertical)
 CSS_KEY(-moz-show-background, _moz_show_background)
+CSS_KEY(-moz-shrink-wrap, _moz_shrink_wrap)
 CSS_KEY(-moz-simp-chinese-formal, _moz_simp_chinese_formal)
 CSS_KEY(-moz-simp-chinese-informal, _moz_simp_chinese_informal)
 CSS_KEY(-moz-spinning, _moz_spinning)
diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -3516,6 +3516,7 @@ CSSParserImpl::DoTransferTempData(nsCSSD
 #define VARIANT_AHLP (VARIANT_AH | VARIANT_LP)
 #define VARIANT_AHI  (VARIANT_AH | VARIANT_INTEGER)
 #define VARIANT_AHK  (VARIANT_AH | VARIANT_KEYWORD)
+#define VARIANT_AHKLP (VARIANT_AHLP | VARIANT_KEYWORD)
 #define VARIANT_AUK  (VARIANT_AUTO | VARIANT_URL | VARIANT_KEYWORD)
 #define VARIANT_AHUK (VARIANT_AH | VARIANT_URL | VARIANT_KEYWORD)
 #define VARIANT_AHL  (VARIANT_AH | VARIANT_LENGTH)
@@ -3524,6 +3525,7 @@ CSSParserImpl::DoTransferTempData(nsCSSD
 #define VARIANT_HKF  (VARIANT_HK | VARIANT_FREQUENCY)
 #define VARIANT_HKL  (VARIANT_HK | VARIANT_LENGTH)
 #define VARIANT_HKLP (VARIANT_HK | VARIANT_LP)
+#define VARIANT_HKLPO (VARIANT_HKLP | VARIANT_NONE)
 #define VARIANT_HL   (VARIANT_INHERIT | VARIANT_LENGTH)
 #define VARIANT_HI   (VARIANT_INHERIT | VARIANT_INTEGER)
 #define VARIANT_HLP  (VARIANT_HL | VARIANT_PERCENT)
@@ -4574,8 +4576,10 @@ PRBool CSSParserImpl::ParseSingleValuePr
     return ParseVariant(aErrorCode, aValue, VARIANT_HK,
                         nsCSSProps::kBoxSizingKTable);
   case eCSSProperty_height:
+    return ParsePositiveVariant(aErrorCode, aValue, VARIANT_AHLP, nsnull);
   case eCSSProperty_width:
-    return ParsePositiveVariant(aErrorCode, aValue, VARIANT_AHLP, nsnull);
+    return ParsePositiveVariant(aErrorCode, aValue, VARIANT_AHKLP,
+                                nsCSSProps::kWidthKTable);
   case eCSSProperty_force_broken_image_icon:
     return ParsePositiveVariant(aErrorCode, aValue, VARIANT_HI, nsnull);
   case eCSSProperty_caption_side:
@@ -4659,11 +4663,15 @@ PRBool CSSParserImpl::ParseSingleValuePr
   case eCSSProperty_marks:
     return ParseMarks(aErrorCode, aValue);
   case eCSSProperty_max_height:
+    return ParsePositiveVariant(aErrorCode, aValue, VARIANT_HLPO, nsnull);
   case eCSSProperty_max_width:
-    return ParsePositiveVariant(aErrorCode, aValue, VARIANT_HLPO, nsnull);
+    return ParsePositiveVariant(aErrorCode, aValue, VARIANT_HKLPO,
+                                nsCSSProps::kWidthKTable);
   case eCSSProperty_min_height:
+    return ParsePositiveVariant(aErrorCode, aValue, VARIANT_HLP, nsnull);
   case eCSSProperty_min_width:
-    return ParsePositiveVariant(aErrorCode, aValue, VARIANT_HLP, nsnull);
+    return ParsePositiveVariant(aErrorCode, aValue, VARIANT_HKLP,
+                                nsCSSProps::kWidthKTable);
   case eCSSProperty_opacity:
     return ParseVariant(aErrorCode, aValue, VARIANT_HN, nsnull);
   case eCSSProperty_orphans:
diff --git a/layout/style/nsCSSPropList.h b/layout/style/nsCSSPropList.h
--- a/layout/style/nsCSSPropList.h
+++ b/layout/style/nsCSSPropList.h
@@ -372,9 +372,9 @@ CSS_PROP_CONTENT(marker-offset, marker_o
 CSS_PROP_CONTENT(marker-offset, marker_offset, MarkerOffset, Content, mMarkerOffset, eCSSType_Value, nsnull)
 CSS_PROP_BACKENDONLY(marks, marks, Marks, Page, mMarks, eCSSType_Value, kPageMarksKTable)
 CSS_PROP_POSITION(max-height, max_height, MaxHeight, Position, mMaxHeight, eCSSType_Value, nsnull)
-CSS_PROP_POSITION(max-width, max_width, MaxWidth, Position, mMaxWidth, eCSSType_Value, nsnull)
+CSS_PROP_POSITION(max-width, max_width, MaxWidth, Position, mMaxWidth, eCSSType_Value, kWidthKTable)
 CSS_PROP_POSITION(min-height, min_height, MinHeight, Position, mMinHeight, eCSSType_Value, nsnull)
-CSS_PROP_POSITION(min-width, min_width, MinWidth, Position, mMinWidth, eCSSType_Value, nsnull)
+CSS_PROP_POSITION(min-width, min_width, MinWidth, Position, mMinWidth, eCSSType_Value, kWidthKTable)
 CSS_PROP_DISPLAY(opacity, opacity, Opacity, Display, mOpacity, eCSSType_Value, nsnull) // XXX bug 3935
 CSS_PROP_BACKENDONLY(orphans, orphans, Orphans, Breaks, mOrphans, eCSSType_Value, nsnull)
 CSS_PROP_SHORTHAND(outline, outline, Outline)
@@ -446,7 +446,7 @@ CSS_PROP_BACKENDONLY(volume, volume, Vol
 CSS_PROP_BACKENDONLY(volume, volume, Volume, Aural, mVolume, eCSSType_Value, kVolumeKTable)
 CSS_PROP_TEXT(white-space, white_space, WhiteSpace, Text, mWhiteSpace, eCSSType_Value, kWhitespaceKTable)
 CSS_PROP_BACKENDONLY(widows, widows, Widows, Breaks, mWidows, eCSSType_Value, nsnull)
-CSS_PROP_POSITION(width, width, Width, Position, mWidth, eCSSType_Value, nsnull)
+CSS_PROP_POSITION(width, width, Width, Position, mWidth, eCSSType_Value, kWidthKTable)
 CSS_PROP_TEXT(word-spacing, word_spacing, WordSpacing, Text, mWordSpacing, eCSSType_Value, nsnull)
 CSS_PROP_POSITION(z-index, z_index, ZIndex, Position, mZIndex, eCSSType_Value, nsnull)
 
diff --git a/layout/style/nsCSSProps.cpp b/layout/style/nsCSSProps.cpp
--- a/layout/style/nsCSSProps.cpp
+++ b/layout/style/nsCSSProps.cpp
@@ -941,6 +941,14 @@ const PRInt32 nsCSSProps::kWhitespaceKTa
   eCSSKeyword_UNKNOWN,-1
 };
 
+const PRInt32 nsCSSProps::kWidthKTable[] = {
+  eCSSKeyword__moz_intrinsic, NS_STYLE_WIDTH_INTRINSIC,
+  eCSSKeyword__moz_min_intrinsic, NS_STYLE_WIDTH_MIN_INTRINSIC,
+  eCSSKeyword__moz_shrink_wrap, NS_STYLE_WIDTH_SHRINK_WRAP,
+  eCSSKeyword__moz_fill, NS_STYLE_WIDTH_FILL,
+  eCSSKeyword_UNKNOWN,-1
+};
+
 // Specific keyword tables for XUL.properties
 const PRInt32 nsCSSProps::kBoxAlignKTable[] = {
   eCSSKeyword_stretch,  NS_STYLE_BOX_ALIGN_STRETCH,
diff --git a/layout/style/nsCSSProps.h b/layout/style/nsCSSProps.h
--- a/layout/style/nsCSSProps.h
+++ b/layout/style/nsCSSProps.h
@@ -189,6 +189,7 @@ public:
   static const PRInt32 kVisibilityKTable[];
   static const PRInt32 kVolumeKTable[];
   static const PRInt32 kWhitespaceKTable[];
+  static const PRInt32 kWidthKTable[]; // also min-width, max-width
 };
 
 #endif /* nsCSSProps_h___ */
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -2221,16 +2221,16 @@ nsComputedDOMStyle::GetWidth(nsIDOMCSSVa
     const nsStylePosition *positionData = GetStylePosition();
 
     nscoord minWidth =
-      StyleCoordToNSCoord(positionData->mMinWidth,
+      StyleCoordToNSCoord(positionData->mTMPMinWidth,
                           &nsComputedDOMStyle::GetCBContentWidth, 0);
 
     nscoord maxWidth =
-      StyleCoordToNSCoord(positionData->mMaxWidth,
+      StyleCoordToNSCoord(positionData->mTMPMaxWidth,
                           &nsComputedDOMStyle::GetCBContentWidth,
                           nscoord_MAX);
     
-    SetValueToCoord(val, positionData->mWidth, nsnull, nsnull,
-                    minWidth, maxWidth);
+    SetValueToCoord(val, positionData->mTMPWidth, nsnull,
+                    nsCSSProps::kWidthKTable, minWidth, maxWidth);
   }
 
   return CallQueryInterface(val, aValue);
@@ -2254,8 +2254,9 @@ nsComputedDOMStyle::GetMaxWidth(nsIDOMCS
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  SetValueToCoord(val, GetStylePosition()->mMaxWidth,
-                  &nsComputedDOMStyle::GetCBContentWidth);
+  SetValueToCoord(val, GetStylePosition()->mTMPMaxWidth,
+                  &nsComputedDOMStyle::GetCBContentWidth,
+                  nsCSSProps::kWidthKTable);
 
   return CallQueryInterface(val, aValue);
 }
@@ -2278,8 +2279,9 @@ nsComputedDOMStyle::GetMinWidth(nsIDOMCS
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  SetValueToCoord(val, GetStylePosition()->mMinWidth,
-                  &nsComputedDOMStyle::GetCBContentWidth);
+  SetValueToCoord(val, GetStylePosition()->mTMPMinWidth,
+                  &nsComputedDOMStyle::GetCBContentWidth,
+                  nsCSSProps::kWidthKTable);
 
   return CallQueryInterface(val, aValue);
 }
diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -250,6 +250,7 @@ nscoord CalcLength(const nsCSSValue& aVa
 #define SETCOORD_LPH    (SETCOORD_LP | SETCOORD_INHERIT)
 #define SETCOORD_LPAH   (SETCOORD_LP | SETCOORD_AH)
 #define SETCOORD_LPEH   (SETCOORD_LP | SETCOORD_ENUMERATED | SETCOORD_INHERIT)
+#define SETCOORD_LPAEH  (SETCOORD_LPAH | SETCOORD_ENUMERATED)
 #define SETCOORD_LE     (SETCOORD_LENGTH | SETCOORD_ENUMERATED)
 #define SETCOORD_LEH    (SETCOORD_LE | SETCOORD_INHERIT)
 #define SETCOORD_IA     (SETCOORD_INTEGER | SETCOORD_AUTO)
@@ -3579,16 +3580,16 @@ nsRuleNode::ComputePositionData(nsStyleS
   }
 
   if (posData.mWidth.GetUnit() == eCSSUnit_Proportional)
-    pos->mWidth.SetIntValue((PRInt32)(posData.mWidth.GetFloatValue()), eStyleUnit_Proportional);
+    pos->mTMPWidth.SetIntValue((PRInt32)(posData.mWidth.GetFloatValue()), eStyleUnit_Proportional);
   else 
-    SetCoord(posData.mWidth, pos->mWidth, parentPos->mWidth,
-             SETCOORD_LPAH, aContext, mPresContext, inherited);
-  SetCoord(posData.mMinWidth, pos->mMinWidth, parentPos->mMinWidth,
-           SETCOORD_LPH, aContext, mPresContext, inherited);
-  if (! SetCoord(posData.mMaxWidth, pos->mMaxWidth, parentPos->mMaxWidth,
-                 SETCOORD_LPH, aContext, mPresContext, inherited)) {
+    SetCoord(posData.mWidth, pos->mTMPWidth, parentPos->mTMPWidth,
+             SETCOORD_LPAEH, aContext, mPresContext, inherited);
+  SetCoord(posData.mMinWidth, pos->mTMPMinWidth, parentPos->mTMPMinWidth,
+           SETCOORD_LPEH, aContext, mPresContext, inherited);
+  if (! SetCoord(posData.mMaxWidth, pos->mTMPMaxWidth, parentPos->mTMPMaxWidth,
+                 SETCOORD_LPEH, aContext, mPresContext, inherited)) {
     if (eCSSUnit_None == posData.mMaxWidth.GetUnit()) {
-      pos->mMaxWidth.Reset();
+      pos->mTMPMaxWidth.Reset();
     }
   }
 
diff --git a/layout/style/nsStyleContext.cpp b/layout/style/nsStyleContext.cpp
--- a/layout/style/nsStyleContext.cpp
+++ b/layout/style/nsStyleContext.cpp
@@ -691,11 +691,11 @@ void nsStyleContext::DumpRegressionData(
   fprintf(out, "<position data=\"");
   pos->mOffset.ToString(str);
   fprintf(out, "%s ", NS_ConvertUTF16toUTF8(str).get());
-  pos->mWidth.ToString(str);
-  fprintf(out, "%s ", NS_ConvertUTF16toUTF8(str).get());
-  pos->mMinWidth.ToString(str);
-  fprintf(out, "%s ", NS_ConvertUTF16toUTF8(str).get());
-  pos->mMaxWidth.ToString(str);
+  pos->mTMPWidth.ToString(str);
+  fprintf(out, "%s ", NS_ConvertUTF16toUTF8(str).get());
+  pos->mTMPMinWidth.ToString(str);
+  fprintf(out, "%s ", NS_ConvertUTF16toUTF8(str).get());
+  pos->mTMPMaxWidth.ToString(str);
   fprintf(out, "%s ", NS_ConvertUTF16toUTF8(str).get());
   pos->mHeight.ToString(str);
   fprintf(out, "%s ", NS_ConvertUTF16toUTF8(str).get());
diff --git a/layout/style/nsStyleStruct.cpp b/layout/style/nsStyleStruct.cpp
--- a/layout/style/nsStyleStruct.cpp
+++ b/layout/style/nsStyleStruct.cpp
@@ -856,9 +856,9 @@ nsStylePosition::nsStylePosition(void)
   mOffset.SetTop(autoCoord);
   mOffset.SetRight(autoCoord);
   mOffset.SetBottom(autoCoord);
-  mWidth.SetAutoValue();
-  mMinWidth.SetCoordValue(0);
-  mMaxWidth.Reset();
+  mTMPWidth.SetAutoValue();
+  mTMPMinWidth.SetCoordValue(0);
+  mTMPMaxWidth.Reset();
   mHeight.SetAutoValue();
   mMinHeight.SetCoordValue(0);
   mMaxHeight.Reset();
@@ -882,9 +882,9 @@ nsChangeHint nsStylePosition::CalcDiffer
   }
   
   if ((mOffset == aOther.mOffset) &&
-      (mWidth == aOther.mWidth) &&
-      (mMinWidth == aOther.mMinWidth) &&
-      (mMaxWidth == aOther.mMaxWidth) &&
+      (mTMPWidth == aOther.mTMPWidth) &&
+      (mTMPMinWidth == aOther.mTMPMinWidth) &&
+      (mTMPMaxWidth == aOther.mTMPMaxWidth) &&
       (mHeight == aOther.mHeight) &&
       (mMinHeight == aOther.mMinHeight) &&
       (mMaxHeight == aOther.mMaxHeight) &&
diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -650,9 +650,9 @@ struct nsStylePosition : public nsStyleS
 #endif
   
   nsStyleSides  mOffset;                // [reset] XXX WHICH TYPES?
-  nsStyleCoord  mWidth;                 // [reset] coord, percent, auto
-  nsStyleCoord  mMinWidth;              // [reset] coord, percent
-  nsStyleCoord  mMaxWidth;              // [reset] coord, percent, null
+  nsStyleCoord  mTMPWidth;                 // [reset] coord, percent, auto, enum
+  nsStyleCoord  mTMPMinWidth;              // [reset] coord, percent, enum
+  nsStyleCoord  mTMPMaxWidth;              // [reset] coord, percent, null, enum
   nsStyleCoord  mHeight;                // [reset] coord, percent, auto
   nsStyleCoord  mMinHeight;             // [reset] coord, percent
   nsStyleCoord  mMaxHeight;             // [reset] coord, percent, null
diff --git a/layout/style/test/property_database.js b/layout/style/test/property_database.js
--- a/layout/style/test/property_database.js
+++ b/layout/style/test/property_database.js
@@ -855,7 +855,7 @@ var gCSSProperties = {
 		initial_values: [ " auto" ],
 		/* XXX these have prerequisites */
 		other_values: [ "15px", "3em", "15%" ],
-		invalid_values: []
+		invalid_values: [ "none", "-moz-intrinsic", "-moz-min-intrinsic", "-moz-shrink-wrap", "-moz-fill" ]
 	},
 	"left": {
 		domProp: "left",
@@ -987,14 +987,14 @@ var gCSSProperties = {
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "none" ],
 		other_values: [ "30px", "50%", "0" ],
-		invalid_values: [ "auto" ]
+		invalid_values: [ "auto", "-moz-intrinsic", "-moz-min-intrinsic", "-moz-shrink-wrap", "-moz-fill" ]
 	},
 	"max-width": {
 		domProp: "maxWidth",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "none" ],
-		other_values: [ "30px", "50%", "0" ],
+		other_values: [ "30px", "50%", "0", "-moz-intrinsic", "-moz-min-intrinsic", "-moz-shrink-wrap", "-moz-fill" ],
 		invalid_values: [ "auto" ]
 	},
 	"min-height": {
@@ -1003,14 +1003,14 @@ var gCSSProperties = {
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "0" ],
 		other_values: [ "30px", "50%" ],
-		invalid_values: [ "auto", "none" ]
+		invalid_values: [ "auto", "none", "-moz-intrinsic", "-moz-min-intrinsic", "-moz-shrink-wrap", "-moz-fill" ]
 	},
 	"min-width": {
 		domProp: "minWidth",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "0" ],
-		other_values: [ "30px", "50%" ],
+		other_values: [ "30px", "50%", "-moz-intrinsic", "-moz-min-intrinsic", "-moz-shrink-wrap", "-moz-fill" ],
 		invalid_values: [ "auto", "none" ]
 	},
 	"opacity": {
@@ -1468,8 +1468,8 @@ var gCSSProperties = {
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ " auto" ],
 		/* XXX these have prerequisites */
-		other_values: [ "15px", "3em", "15%" ],
-		invalid_values: []
+		other_values: [ "15px", "3em", "15%", "-moz-intrinsic", "-moz-min-intrinsic", "-moz-shrink-wrap", "-moz-fill" ],
+		invalid_values: [ "none" ]
 	},
 	"word-spacing": {
 		domProp: "wordSpacing",
