From: L. David Baron <dbaron@dbaron.org>

Extract calc() values in nsStyleAnimation when needed.  (Bug 520234)  r=bzbarsky  a=blocking2.0:beta7

diff --git a/layout/style/nsStyleAnimation.cpp b/layout/style/nsStyleAnimation.cpp
--- a/layout/style/nsStyleAnimation.cpp
+++ b/layout/style/nsStyleAnimation.cpp
@@ -108,16 +108,23 @@ gcd(PRUint32 a, PRUint32 b)
 // Least Common Multiple
 static PRUint32
 lcm(PRUint32 a, PRUint32 b)
 {
   // Divide first to reduce overflow risk.
   return (a / gcd(a, b)) * b;
 }
 
+inline void
+nscoordToCSSValue(nscoord aCoord, nsCSSValue& aCSSValue)
+{
+  aCSSValue.SetFloatValue(nsPresContext::AppUnitsToFloatCSSPixels(aCoord),
+                          eCSSUnit_Pixel);
+}
+
 // Like nsStyleCoord::Calc, but with length in float pixels instead of nscoord.
 struct CalcValue {
   float mLength, mPercent;
   PRBool mHasPercent;
 };
 
 static CalcValue
 ExtractCalcValue(const nsStyleAnimation::Value& aValue)
@@ -146,16 +153,37 @@ ExtractCalcValue(const nsStyleAnimation:
     result.mLength = len.GetFloatValue();
     result.mPercent = pct.GetPercentValue();
     result.mHasPercent = PR_TRUE;
   }
 
   return result;
 }
 
+static bool
+SetCalcValue(const nsStyleCoord::Calc* aCalc, nsCSSValue& aValue)
+{
+  nsRefPtr<nsCSSValue::Array> arr = nsCSSValue::Array::Create(1);
+  if (!arr)
+    return false;
+  if (!aCalc->mHasPercent) {
+    nscoordToCSSValue(aCalc->mLength, arr->Item(0));
+  } else {
+    nsCSSValue::Array *arr2 = nsCSSValue::Array::Create(2);
+    if (!arr2)
+      return false;
+    arr->Item(0).SetArrayValue(arr2, eCSSUnit_Calc_Plus);
+    nscoordToCSSValue(aCalc->mLength, arr2->Item(0));
+    arr2->Item(1).SetPercentValue(aCalc->mPercent);
+  }
+
+  aValue.SetArrayValue(arr, eCSSUnit_Calc);
+  return true;
+}
+
 // CLASS METHODS
 // -------------
 
 PRBool
 nsStyleAnimation::ComputeDistance(nsCSSProperty aProperty,
                                   const Value& aStartValue,
                                   const Value& aEndValue,
                                   double& aDistance)
@@ -535,23 +563,16 @@ nsStyleAnimation::ComputeDistance(nsCSSP
       return PR_TRUE;
     }
   }
 
   NS_ABORT_IF_FALSE(false, "Can't compute distance using the given common unit");
   return PR_FALSE;
 }
 
-inline void
-nscoordToCSSValue(nscoord aCoord, nsCSSValue& aCSSValue)
-{
-  aCSSValue.SetFloatValue(nsPresContext::AppUnitsToFloatCSSPixels(aCoord),
-                          eCSSUnit_Pixel);
-}
-
 #define MAX_PACKED_COLOR_COMPONENT 255
 
 inline PRUint8 ClampColor(double aColor)
 {
   if (aColor >= MAX_PACKED_COLOR_COMPONENT)
     return MAX_PACKED_COLOR_COMPONENT;
   if (aColor <= 0.0)
     return 0;
@@ -1938,16 +1959,24 @@ StyleCoordToValue(const nsStyleCoord& aC
     case eStyleUnit_Enumerated:
       aValue.SetIntValue(aCoord.GetIntValue(),
                          nsStyleAnimation::eUnit_Enumerated);
       break;
     case eStyleUnit_Integer:
       aValue.SetIntValue(aCoord.GetIntValue(),
                          nsStyleAnimation::eUnit_Integer);
       break;
+    case eStyleUnit_Calc: {
+      nsAutoPtr<nsCSSValue> val(new nsCSSValue);
+      if (!SetCalcValue(aCoord.GetCalcValue(), *val))
+        return PR_FALSE;
+      aValue.SetAndAdoptCSSValueValue(val.forget(),
+                                      nsStyleAnimation::eUnit_Calc);
+      break;
+    }
     default:
       return PR_FALSE;
   }
   return PR_TRUE;
 }
 
 static void
 StyleCoordToCSSValue(const nsStyleCoord& aCoord, nsCSSValue& aCSSValue)
@@ -2261,26 +2290,34 @@ nsStyleAnimation::ExtractComputedValue(n
             resultTail = &item->mNext;
 
             const nsStyleBackground::Position &pos = bg->mLayers[i].mPosition;
             if (pos.mXPosition.mLength == 0) {
               item->mXValue.SetPercentValue(pos.mXPosition.mPercent);
             } else if (pos.mXPosition.mPercent == 0.0f) {
               nscoordToCSSValue(pos.mXPosition.mLength, item->mXValue);
             } else {
-              // FIXME: calc()
-              return PR_FALSE;
+              nsStyleCoord::Calc calc;
+              calc.mLength = pos.mXPosition.mLength;
+              calc.mPercent = pos.mXPosition.mPercent;
+              calc.mHasPercent = PR_TRUE;
+              if (!SetCalcValue(&calc, item->mXValue))
+                return PR_FALSE;
             }
             if (pos.mYPosition.mLength == 0) {
               item->mYValue.SetPercentValue(pos.mYPosition.mPercent);
             } else if (pos.mYPosition.mPercent == 0.0f) {
               nscoordToCSSValue(pos.mYPosition.mLength, item->mYValue);
             } else {
-              // FIXME: calc()
-              return PR_FALSE;
+              nsStyleCoord::Calc calc;
+              calc.mLength = pos.mYPosition.mLength;
+              calc.mPercent = pos.mYPosition.mPercent;
+              calc.mHasPercent = PR_TRUE;
+              if (!SetCalcValue(&calc, item->mYValue))
+                return PR_FALSE;
             }
           }
 
           aComputedValue.SetAndAdoptCSSValuePairListValue(result.forget());
           break;
         }
 
         case eCSSProperty_background_size: {
@@ -2305,18 +2342,22 @@ nsStyleAnimation::ExtractComputedValue(n
                 item->mXValue.SetAutoValue();
                 break;
               case nsStyleBackground::Size::eLengthPercentage:
                 if (size.mWidth.mLength == 0) {
                   item->mXValue.SetPercentValue(size.mWidth.mPercent);
                 } else if (size.mWidth.mPercent == 0.0f) {
                   nscoordToCSSValue(size.mWidth.mLength, item->mXValue);
                 } else {
-                  // FIXME: calc()
-                  return PR_FALSE;
+                  nsStyleCoord::Calc calc;
+                  calc.mLength = size.mWidth.mLength;
+                  calc.mPercent = size.mWidth.mPercent;
+                  calc.mHasPercent = PR_TRUE;
+                  if (!SetCalcValue(&calc, item->mXValue))
+                    return PR_FALSE;
                 }
                 break;
             }
 
             switch (size.mHeightType) {
               case nsStyleBackground::Size::eContain:
               case nsStyleBackground::Size::eCover:
                 // leave it null
@@ -2325,18 +2366,22 @@ nsStyleAnimation::ExtractComputedValue(n
                 item->mYValue.SetAutoValue();
                 break;
               case nsStyleBackground::Size::eLengthPercentage:
                 if (size.mHeight.mLength == 0) {
                   item->mYValue.SetPercentValue(size.mHeight.mPercent);
                 } else if (size.mHeight.mPercent == 0.0f) {
                   nscoordToCSSValue(size.mHeight.mLength, item->mYValue);
                 } else {
-                  // FIXME: calc()
-                  return PR_FALSE;
+                  nsStyleCoord::Calc calc;
+                  calc.mLength = size.mHeight.mLength;
+                  calc.mPercent = size.mHeight.mPercent;
+                  calc.mHasPercent = PR_TRUE;
+                  if (!SetCalcValue(&calc, item->mYValue))
+                    return PR_FALSE;
                 }
                 break;
             }
           }
 
           aComputedValue.SetAndAdoptCSSValuePairListValue(result.forget());
           break;
         }
