From: L. David Baron <dbaron@dbaron.org>

Implement animation of -moz-transform property.  (Bug 531344)

diff --git a/layout/style/nsCSSPropList.h b/layout/style/nsCSSPropList.h
--- a/layout/style/nsCSSPropList.h
+++ b/layout/style/nsCSSPropList.h
@@ -2362,18 +2362,18 @@ CSS_PROP_DISPLAY(
     -moz-transform,
     _moz_transform,
     MozTransform,
     0,
     Display,
     mTransform,
     eCSSType_ValueList,
     kDisplayKTable,
-    CSS_PROP_NO_OFFSET,
-    eStyleAnimType_None)
+    offsetof(nsStyleDisplay, mSpecifiedTransform),
+    eStyleAnimType_Custom)
 CSS_PROP_DISPLAY(
     -moz-transform-origin,
     _moz_transform_origin,
     MozTransformOrigin,
     0,
     Display,
     mTransformOrigin,
     eCSSType_ValuePair,
diff --git a/layout/style/nsStyleAnimation.cpp b/layout/style/nsStyleAnimation.cpp
--- a/layout/style/nsStyleAnimation.cpp
+++ b/layout/style/nsStyleAnimation.cpp
@@ -399,16 +399,20 @@ nsStyleAnimation::ComputeDistance(nsCSSP
 
         shadow1 = shadow1->mNext;
         shadow2 = shadow2->mNext;
         NS_ABORT_IF_FALSE(!shadow1 == !shadow2, "lists should be same length");
       }
       aDistance = sqrt(squareDistance);
       break;
     }
+    case eUnit_Transform: {
+      // FIXME: WRITE ME (or not?)
+      return PR_FALSE;
+    }
     case eUnit_CSSValuePairList: {
       const nsCSSValuePairList *list1 = aStartValue.GetCSSValuePairListValue();
       const nsCSSValuePairList *list2 = aEndValue.GetCSSValuePairListValue();
       double squareDistance = 0.0f;
       do {
         static nsCSSValue nsCSSValuePairList::* const pairListValues[] = {
           &nsCSSValuePairList::mXValue,
           &nsCSSValuePairList::mYValue,
@@ -508,16 +512,54 @@ AddCSSValuePercent(double aCoeff1, const
                    nsCSSValue &aResult)
 {
   NS_ABORT_IF_FALSE(aValue1.GetUnit() == eCSSUnit_Percent, "unexpected unit");
   NS_ABORT_IF_FALSE(aValue2.GetUnit() == eCSSUnit_Percent, "unexpected unit");
   aResult.SetPercentValue(aCoeff1 * aValue1.GetPercentValue() +
                           aCoeff2 * aValue2.GetPercentValue());
 }
 
+static void
+AddCSSValueCalc(double aCoeff1, const nsCSSValue &aValue1,
+                double aCoeff2, const nsCSSValue &aValue2,
+                nsCSSValue &aResult)
+{
+  NS_ABORT_IF_FALSE(aValue1.GetUnit() == eCSSUnit_Percent ||
+                    aValue1.GetUnit() == eCSSUnit_Pixel ||
+                    aValue1.IsCalcUnit(), "unexpected unit");
+  NS_ABORT_IF_FALSE(aValue2.GetUnit() == eCSSUnit_Percent ||
+                    aValue2.GetUnit() == eCSSUnit_Pixel ||
+                    aValue2.IsCalcUnit(), "unexpected unit");
+  nsRefPtr<nsCSSValue::Array> a1 = nsCSSValue::Array::Create(2),
+                              a2 = nsCSSValue::Array::Create(2),
+                              atop = nsCSSValue::Array::Create(2),
+                              acalc = nsCSSValue::Array::Create(1);
+  // Don't nest the eCSSUnit_Calc in our input inside any expressions.
+  a1->Item(0).SetFloatValue(aCoeff1, eCSSUnit_Number);
+  a1->Item(1) = aValue1.GetUnit() == eCSSUnit_Calc
+                  ? aValue1.GetArrayValue()->Item(0) : aValue1;
+  a2->Item(0).SetFloatValue(aCoeff2, eCSSUnit_Number);
+  a2->Item(1) = aValue2.GetUnit() == eCSSUnit_Calc
+                  ? aValue2.GetArrayValue()->Item(0) : aValue2;
+  atop->Item(0).SetArrayValue(a1, eCSSUnit_Calc_Times_L);
+  atop->Item(1).SetArrayValue(a2, eCSSUnit_Calc_Times_L);
+  acalc->Item(0).SetArrayValue(atop, eCSSUnit_Calc_Plus);
+  aResult.SetArrayValue(acalc, eCSSUnit_Calc);
+}
+
+static void
+AddCSSValueAngle(const nsCSSValue &aValue1, double aCoeff1,
+                 const nsCSSValue &aValue2, double aCoeff2,
+                 nsCSSValue &aResult)
+{
+  aResult.SetFloatValue(aCoeff1 * aValue1.GetAngleValueInRadians() +
+                        aCoeff2 * aValue2.GetAngleValueInRadians(),
+                        eCSSUnit_Radian);
+}
+
 static PRBool
 AddShadowItems(double aCoeff1, const nsCSSValue &aValue1,
                double aCoeff2, const nsCSSValue &aValue2,
                nsCSSValueList **&aResultTail)
 {
   // X, Y, Radius, Spread, Color, Inset
   NS_ABORT_IF_FALSE(aValue1.GetUnit() == eCSSUnit_Array,
                     "wrong unit");
@@ -569,16 +611,259 @@ AddShadowItems(double aCoeff1, const nsC
     return PR_FALSE;
   }
   resultItem->mValue.SetArrayValue(resultArray, eCSSUnit_Array);
   *aResultTail = resultItem;
   aResultTail = &resultItem->mNext;
   return PR_TRUE;
 }
 
+static void
+AddTransformTranslate(const nsCSSValue &aValue1, double aCoeff1,
+                      const nsCSSValue &aValue2, double aCoeff2,
+                      nsCSSValue &aResult)
+{
+  NS_ABORT_IF_FALSE(aValue1.GetUnit() == eCSSUnit_Percent ||
+                    aValue1.GetUnit() == eCSSUnit_Pixel ||
+                    aValue1.IsCalcUnit(),
+                    "unexpected unit");
+  NS_ABORT_IF_FALSE(aValue2.GetUnit() == eCSSUnit_Percent ||
+                    aValue2.GetUnit() == eCSSUnit_Pixel ||
+                    aValue2.IsCalcUnit(),
+                    "unexpected unit");
+
+  if (aValue1.GetUnit() != aValue2.GetUnit() || aValue1.IsCalcUnit()) {
+    // different units; create a calc() expression
+    AddCSSValueCalc(aCoeff1, aValue1, aCoeff2, aValue2, aResult);
+  } else if (aValue1.GetUnit() == eCSSUnit_Percent) {
+    // both percent
+    AddCSSValuePercent(aCoeff1, aValue1, aCoeff2, aValue2, aResult);
+  } else {
+    // both pixels
+    AddCSSValuePixel(aCoeff1, aValue1, aCoeff2, aValue2, aResult);
+  }
+}
+
+static void
+AddTransformScale(const nsCSSValue &aValue1, double aCoeff1,
+                  const nsCSSValue &aValue2, double aCoeff2,
+                  nsCSSValue &aResult)
+{
+  // Handle scale, and the two matrix components where identity is 1, by
+  // subtracting 1, multiplying by the coefficients, and then adding 1
+  // back.  This gets the right AddWeighted behavior and gets us the
+  // interpolation-against-identity behavior for free.
+  NS_ABORT_IF_FALSE(aValue1.GetUnit() == eCSSUnit_Number, "unexpected unit");
+  NS_ABORT_IF_FALSE(aValue2.GetUnit() == eCSSUnit_Number, "unexpected unit");
+
+  float v1 = aValue1.GetFloatValue() - 1.0f,
+        v2 = aValue2.GetFloatValue() - 1.0f;
+  float result = v1 * aCoeff1 + v2 * aCoeff2;
+  aResult.SetFloatValue(result + 1.0f, eCSSUnit_Number);
+}
+
+static nsCSSValueList*
+AddTransformLists(const nsCSSValueList* aList1, double aCoeff1,
+                  const nsCSSValueList* aList2, double aCoeff2)
+{
+  nsAutoPtr<nsCSSValueList> result;
+  nsCSSValueList **resultTail = getter_Transfers(result);
+
+  do {
+    nsCSSValueList *item = new nsCSSValueList;
+    if (!item) {
+      return nsnull;
+    }
+    *resultTail = item;
+    resultTail = &item->mNext;
+
+    const nsCSSValue::Array *a1 = aList1->mValue.GetArrayValue(),
+                            *a2 = aList2->mValue.GetArrayValue();
+    NS_ABORT_IF_FALSE(nsStyleTransformMatrix::TransformFunctionOf(a1) ==
+                      nsStyleTransformMatrix::TransformFunctionOf(a2),
+                      "transform function mismatch");
+
+    nsCSSKeyword tfunc = nsStyleTransformMatrix::TransformFunctionOf(a1);
+    PRUint32 nargs;
+    if (tfunc == eCSSKeyword_matrix) {
+      nargs = 6;
+    } else if (tfunc == eCSSKeyword_translate ||
+               tfunc == eCSSKeyword_skew ||
+               tfunc == eCSSKeyword_scale) {
+      nargs = 2;
+    } else {
+      nargs = 1;
+    }
+
+    nsRefPtr<nsCSSValue::Array> arr = nsCSSValue::Array::Create(nargs + 1);
+    if (!arr) {
+      return nsnull;
+    }
+    arr->Item(0).SetStringValue(
+      NS_ConvertUTF8toUTF16(nsCSSKeywords::GetStringValue(tfunc)),
+      eCSSUnit_Ident);
+
+    switch (tfunc) {
+      case eCSSKeyword_translate: {
+        NS_ABORT_IF_FALSE(a1->Count() == 2 || a1->Count() == 3,
+                          "unexpected count");
+        NS_ABORT_IF_FALSE(a2->Count() == 2 || a2->Count() == 3,
+                          "unexpected count");
+
+        // FIXME: SHARE THIS BETTER
+        nsCSSValue &resulty = arr->Item(2);
+        if (a1->Count() == 3) {
+          if (a2->Count() == 3) {
+            // both arrays have two values
+            AddTransformTranslate(a1->Item(2), aCoeff1, a2->Item(2), aCoeff2,
+                                  resulty);
+          } else {
+            // only first array has two values
+            AddTransformTranslate(a1->Item(2), aCoeff1, a1->Item(2), 0.0f,
+                                  resulty);
+          }
+        } else {
+          if (a2->Count() == 3) {
+            // only second array has two values
+            AddTransformTranslate(a2->Item(2), 0.0f, a2->Item(2), aCoeff2,
+                                  resulty);
+          } else {
+            // neither array has two values
+            resulty.SetFloatValue(0, eCSSUnit_Pixel);
+          }
+        }
+
+        AddTransformTranslate(a1->Item(1), aCoeff1, a2->Item(1), aCoeff2,
+                              arr->Item(1));
+        break;
+      }
+      case eCSSKeyword_translatex:
+      case eCSSKeyword_translatey: {
+        NS_ABORT_IF_FALSE(a1->Count() == 2, "unexpected count");
+        NS_ABORT_IF_FALSE(a2->Count() == 2, "unexpected count");
+        AddTransformTranslate(a1->Item(1), aCoeff1, a2->Item(1), aCoeff2,
+                              arr->Item(1));
+        break;
+      }
+      case eCSSKeyword_scale: {
+        NS_ABORT_IF_FALSE(a1->Count() == 2 || a1->Count() == 3,
+                          "unexpected count");
+        NS_ABORT_IF_FALSE(a2->Count() == 2 || a2->Count() == 3,
+                          "unexpected count");
+
+        // FIXME: SHARE THIS BETTER
+        nsCSSValue &resulty = arr->Item(2);
+        if (a1->Count() == 3) {
+          if (a2->Count() == 3) {
+            // both arrays have two values
+            AddTransformScale(a1->Item(2), aCoeff1, a2->Item(2), aCoeff2,
+                              resulty);
+          } else {
+            // only first array has two values
+            AddTransformScale(a1->Item(2), aCoeff1, a1->Item(2), 0.0f,
+                              resulty);
+          }
+        } else {
+          if (a2->Count() == 3) {
+            // only second array has two values
+            AddTransformScale(a2->Item(2), 0.0f, a2->Item(2), aCoeff2,
+                              resulty);
+          } else {
+            // neither array has two values
+            resulty.SetFloatValue(1, eCSSUnit_Number);
+          }
+        }
+
+        AddTransformScale(a1->Item(1), aCoeff1, a2->Item(1), aCoeff2,
+                          arr->Item(1));
+
+        break;
+      }
+      case eCSSKeyword_scalex:
+      case eCSSKeyword_scaley: {
+        NS_ABORT_IF_FALSE(a1->Count() == 2, "unexpected count");
+        NS_ABORT_IF_FALSE(a2->Count() == 2, "unexpected count");
+
+        AddTransformScale(a1->Item(1), aCoeff1, a2->Item(1), aCoeff2,
+                          arr->Item(1));
+
+        break;
+      }
+      case eCSSKeyword_skew: {
+        NS_ABORT_IF_FALSE(a1->Count() == 2 || a1->Count() == 3,
+                          "unexpected count");
+        NS_ABORT_IF_FALSE(a2->Count() == 2 || a2->Count() == 3,
+                          "unexpected count");
+
+        // FIXME: SHARE THIS BETTER
+        nsCSSValue &resulty = arr->Item(2);
+        if (a1->Count() == 3) {
+          if (a2->Count() == 3) {
+            // both arrays have two values
+            AddCSSValueAngle(a1->Item(2), aCoeff1, a2->Item(2), aCoeff2,
+                             resulty);
+          } else {
+            // only first array has two values
+            AddCSSValueAngle(a1->Item(2), aCoeff1, a1->Item(2), 0.0f,
+                             resulty);
+          }
+        } else {
+          if (a2->Count() == 3) {
+            // only second array has two values
+            AddCSSValueAngle(a2->Item(2), 0.0f, a2->Item(2), aCoeff2,
+                             resulty);
+          } else {
+            // neither array has two values
+            resulty.SetFloatValue(0, eCSSUnit_Radian);
+          }
+        }
+
+        AddCSSValueAngle(a1->Item(1), aCoeff1, a2->Item(1), aCoeff2,
+                         arr->Item(1));
+
+        break;
+      }
+      case eCSSKeyword_skewx:
+      case eCSSKeyword_skewy:
+      case eCSSKeyword_rotate: {
+        NS_ABORT_IF_FALSE(a1->Count() == 2, "unexpected count");
+        NS_ABORT_IF_FALSE(a2->Count() == 2, "unexpected count");
+
+        AddCSSValueAngle(a1->Item(1), aCoeff1, a2->Item(1), aCoeff2, arr->Item(1));
+
+        break;
+      }
+      case eCSSKeyword_matrix: {
+        NS_ABORT_IF_FALSE(a1->Count() == 7, "unexpected count");
+        NS_ABORT_IF_FALSE(a2->Count() == 7, "unexpected count");
+        // FIXME:  WRITE ME
+
+        // Handle scale, and the two matrix components where identity is
+        // 1, by subtracting 1, multiplying by the coefficients, and
+        // then adding 1 back.  This gets the right AddWeighted behavior
+        // and gets us the interpolation-against-identity behavior for
+        // free.
+
+        // When combining translates with % and length, need to keep
+        // them separate (same for relevant matrix components!).
+
+        break;
+      }
+      default:
+        NS_ABORT_IF_FALSE(PR_FALSE, "unknown transform function");
+    }
+
+    aList1 = aList1->mNext;
+    aList2 = aList2->mNext;
+  } while (aList1);
+  NS_ABORT_IF_FALSE(!aList2, "list length mismatch");
+
+  return result.forget();
+}
+
 PRBool
 nsStyleAnimation::AddWeighted(nsCSSProperty aProperty,
                               double aCoeff1, const Value& aValue1,
                               double aCoeff2, const Value& aValue2,
                               Value& aResultValue)
 {
   Unit commonUnit = GetCommonUnit(aValue1.GetUnit(), aValue2.GetUnit());
   // Maybe need a followup method to convert the inputs into the common
@@ -872,16 +1157,81 @@ nsStyleAnimation::AddWeighted(nsCSSPrope
           }
 
           longShadow = longShadow->mNext;
         }
       }
       aResultValue.SetAndAdoptCSSValueListValue(result.forget(), eUnit_Shadow);
       break;
     }
+    case eUnit_Transform: {
+      const nsCSSValueList *list1 = aValue1.GetCSSValueListValue();
+      const nsCSSValueList *list2 = aValue2.GetCSSValueListValue();
+
+      // We want to avoid the matrix decomposition when we can, since
+      // avoiding it can produce better results both for compound
+      // transforms and for skew and skewY (see below).  We can do this
+      // in two cases:
+      //   (1) if one of the transforms is 'none'
+      //   (2) if the lists have the same length and the transform
+      //       functions match
+      nsAutoPtr<nsCSSValueList> result;
+      if (list1->mValue.GetUnit() == eCSSUnit_None) {
+        if (list2->mValue.GetUnit() == eCSSUnit_None) {
+          result = new nsCSSValueList;
+          if (result) {
+            result->mValue.SetNoneValue();
+          }
+        } else {
+          result = AddTransformLists(list2, aCoeff2, list2, 0);
+        }
+      } else {
+        if (list2->mValue.GetUnit() == eCSSUnit_None) {
+          result = AddTransformLists(list1, aCoeff1, list1, 0);
+        } else {
+          PRBool match = PR_TRUE;
+
+          {
+            const nsCSSValueList *item1 = list1, *item2 = list2;
+            do {
+              nsCSSKeyword func1 = nsStyleTransformMatrix::TransformFunctionOf(
+                                     item1->mValue.GetArrayValue());
+              nsCSSKeyword func2 = nsStyleTransformMatrix::TransformFunctionOf(
+                                     item2->mValue.GetArrayValue());
+              if (func1 != func2) {
+                break;
+              }
+
+              item1 = item1->mNext;
+              item2 = item2->mNext;
+            } while (item1 && item2);
+            if (item1 || item2) {
+              // Either |break| above or length mismatch.
+              match = PR_FALSE;
+            }
+          }
+
+          if (match) {
+            result = AddTransformLists(list1, aCoeff1, list2, aCoeff2);
+          } else {
+            // FIXME: Pull in big comment from the bug (maybe into
+            // separate function)!
+            // FIXME: WRITE ME
+          }
+        }
+      }
+
+      if (!result) {
+        return PR_FALSE;
+      }
+
+      aResultValue.SetAndAdoptCSSValueListValue(result.forget(),
+                                                eUnit_Transform);
+      return PR_TRUE;
+    }
     case eUnit_CSSValuePairList: {
       const nsCSSValuePairList *list1 = aValue1.GetCSSValuePairListValue();
       const nsCSSValuePairList *list2 = aValue2.GetCSSValuePairListValue();
       nsAutoPtr<nsCSSValuePairList> result;
       nsCSSValuePairList **resultTail = getter_Transfers(result);
       do {
         nsCSSValuePairList *item = new nsCSSValuePairList;
         if (!item) {
@@ -1178,16 +1528,17 @@ nsStyleAnimation::UncomputeValue(nsCSSPr
     case eUnit_CSSRect:
       NS_ABORT_IF_FALSE(nsCSSProps::kTypeTable[aProperty] ==
                           eCSSType_Rect, "type mismatch");
       *static_cast<nsCSSRect*>(aSpecifiedValue) =
         *aComputedValue.GetCSSRectValue();
       break;
     case eUnit_Dasharray:
     case eUnit_Shadow:
+    case eUnit_Transform:
       NS_ABORT_IF_FALSE(nsCSSProps::kTypeTable[aProperty] ==
                           eCSSType_ValueList, "type mismatch");
       *static_cast<nsCSSValueList**>(aSpecifiedValue) =
         aComputedValue.GetCSSValueListValue();
       break;
     case eUnit_CSSValuePairList:
       NS_ABORT_IF_FALSE(nsCSSProps::kTypeTable[aProperty] ==
                           eCSSType_ValuePairList, "type mismatch");
@@ -1666,16 +2017,65 @@ nsStyleAnimation::ExtractComputedValue(n
                 break;
             }
           }
 
           aComputedValue.SetAndAdoptCSSValuePairListValue(result);
           break;
         }
 
+        case eCSSProperty__moz_transform: {
+          const nsStyleDisplay *display =
+            static_cast<const nsStyleDisplay*>(styleStruct);
+          nsAutoPtr<nsCSSValueList> result;
+          if (display->mSpecifiedTransform) {
+            // Clone, and convert all lengths (not percents) to pixels.
+            nsCSSValueList **resultTail = getter_Transfers(result);
+            for (const nsCSSValueList *l = display->mSpecifiedTransform;
+                 l; l = l->mNext) {
+              nsCSSValueList *clone = new nsCSSValueList;
+              if (!clone) {
+                result = nsnull;
+                break;
+              }
+              *resultTail = clone;
+              resultTail = &clone->mNext;
+
+              if (l->mValue.IsLengthUnit() &&
+                  l->mValue.GetUnit() != eCSSUnit_Pixel) {
+                PRBool canStoreInRuleTree = PR_TRUE;
+                nscoord len =
+                  nsRuleNode::CalcLength(l->mValue, aStyleContext,
+                                         aStyleContext->PresContext(),
+                                         canStoreInRuleTree);
+                clone->mValue.SetFloatValue(
+                                nsPresContext::AppUnitsToFloatCSSPixels(len),
+                                eCSSUnit_Pixel);
+              } else {
+                // FIXME: Need to clone calc trees too, and convert lengths
+                // inside them.
+                clone->mValue = l->mValue;
+              }
+            }
+          } else {
+            result = new nsCSSValueList();
+            if (result) {
+              result->mValue.SetNoneValue();
+            }
+          }
+          if (!result) {
+            NS_WARNING("out of memory");
+            return PR_FALSE;
+          }
+
+          aComputedValue.SetAndAdoptCSSValueListValue(result.forget(),
+                                                      eUnit_Transform);
+          break;
+        }
+
         default:
           NS_ABORT_IF_FALSE(PR_FALSE, "missing property implementation");
           return PR_FALSE;
       };
       return PR_TRUE;
     case eStyleAnimType_Coord:
       return StyleCoordToValue(*static_cast<const nsStyleCoord*>(
         StyleDataAtOffset(styleStruct, ssOffset)), aComputedValue);
@@ -1880,18 +2280,19 @@ nsStyleAnimation::Value::operator=(const
       NS_ABORT_IF_FALSE(aOther.mValue.mCSSRect, "rects may not be null");
       mValue.mCSSRect = new nsCSSRect(*aOther.mValue.mCSSRect);
       if (!mValue.mCSSRect) {
         mUnit = eUnit_Null;
       }
       break;
     case eUnit_Dasharray:
     case eUnit_Shadow:
-      NS_ABORT_IF_FALSE(mUnit != eUnit_Dasharray || aOther.mValue.mCSSValueList,
-                        "dasharrays may not be null");
+    case eUnit_Transform:
+      NS_ABORT_IF_FALSE(mUnit == eUnit_Shadow || aOther.mValue.mCSSValueList,
+                        "value lists other than shadows may not be null");
       if (aOther.mValue.mCSSValueList) {
         mValue.mCSSValueList = aOther.mValue.mCSSValueList->Clone();
         if (!mValue.mCSSValueList) {
           mUnit = eUnit_Null;
         }
       } else {
         mValue.mCSSValueList = nsnull;
       }
@@ -2074,16 +2475,17 @@ nsStyleAnimation::Value::operator==(cons
     case eUnit_Color:
       return mValue.mColor == aOther.mValue.mColor;
     case eUnit_CSSValuePair:
       return *mValue.mCSSValuePair == *aOther.mValue.mCSSValuePair;
     case eUnit_CSSRect:
       return *mValue.mCSSRect == *aOther.mValue.mCSSRect;
     case eUnit_Dasharray:
     case eUnit_Shadow:
+    case eUnit_Transform:
       return nsCSSValueList::Equal(mValue.mCSSValueList,
                                    aOther.mValue.mCSSValueList);
     case eUnit_CSSValuePairList:
       return nsCSSValuePairList::Equal(mValue.mCSSValuePairList,
                                        aOther.mValue.mCSSValuePairList);
     case eUnit_UnparsedString:
       return (NS_strcmp(GetStringBufferValue(),
                         aOther.GetStringBufferValue()) == 0);
diff --git a/layout/style/nsStyleAnimation.h b/layout/style/nsStyleAnimation.h
--- a/layout/style/nsStyleAnimation.h
+++ b/layout/style/nsStyleAnimation.h
@@ -233,16 +233,17 @@ public:
     eUnit_Coord,
     eUnit_Percent,
     eUnit_Float,
     eUnit_Color,
     eUnit_CSSValuePair, // nsCSSValuePair* (never null)
     eUnit_CSSRect, // nsCSSRect* (never null)
     eUnit_Dasharray, // nsCSSValueList* (never null)
     eUnit_Shadow, // nsCSSValueList* (may be null)
+    eUnit_Transform, // nsCSSValueList* (never null)
     eUnit_CSSValuePairList, // nsCSSValuePairList* (never null)
     eUnit_UnparsedString // nsStringBuffer* (never null)
   };
 
   class Value {
   private:
     Unit mUnit;
     union {
@@ -371,17 +372,18 @@ public:
     }
     static PRBool IsCSSValuePairUnit(Unit aUnit) {
       return aUnit == eUnit_CSSValuePair;
     }
     static PRBool IsCSSRectUnit(Unit aUnit) {
       return aUnit == eUnit_CSSRect;
     }
     static PRBool IsCSSValueListUnit(Unit aUnit) {
-      return aUnit == eUnit_Dasharray || aUnit == eUnit_Shadow;
+      return aUnit == eUnit_Dasharray || aUnit == eUnit_Shadow ||
+             aUnit == eUnit_Transform;
     }
     static PRBool IsCSSValuePairListUnit(Unit aUnit) {
       return aUnit == eUnit_CSSValuePairList;
     }
     static PRBool IsStringUnit(Unit aUnit) {
       return aUnit == eUnit_UnparsedString;
     }
   };
diff --git a/layout/style/nsStyleTransformMatrix.cpp b/layout/style/nsStyleTransformMatrix.cpp
--- a/layout/style/nsStyleTransformMatrix.cpp
+++ b/layout/style/nsStyleTransformMatrix.cpp
@@ -523,16 +523,28 @@ static void ProcessRotate(float aMain[4]
   float sinTheta = FlushToZero(sin(theta));
 
   aMain[0] = cosTheta;
   aMain[1] = sinTheta;
   aMain[2] = -sinTheta;
   aMain[3] = cosTheta;
 }
 
+  /**
+   * Return the transform function, as an nsCSSKeyword, for the given
+   * nsCSSValue::Array from a transform list.
+   */
+/* static */ nsCSSKeyword
+nsStyleTransformMatrix::TransformFunctionOf(const nsCSSValue::Array* aData)
+{
+  nsAutoString keyword;
+  aData->Item(0).GetStringValue(keyword);
+  return nsCSSKeywords::LookupKeyword(keyword);
+}
+
 /**
  * SetToTransformFunction is essentially a giant switch statement that fans
  * out to many smaller helper functions.
  */
 void
 nsStyleTransformMatrix::SetToTransformFunction(const nsCSSValue::Array * aData,
                                                nsStyleContext* aContext,
                                                nsPresContext* aPresContext,
@@ -543,19 +555,17 @@ nsStyleTransformMatrix::SetToTransformFu
   NS_PRECONDITION(aPresContext, "Need a context for unit conversion!");
   
   /* Reset the matrix to the identity so that each subfunction can just
    * worry about its own components.
    */
   SetToIdentity();
 
   /* Get the keyword for the transform. */
-  nsAutoString keyword;
-  aData->Item(0).GetStringValue(keyword);
-  switch (nsCSSKeywords::LookupKeyword(keyword)) {
+  switch (TransformFunctionOf(aData)) {
   case eCSSKeyword_translatex:
     ProcessTranslateX(mDelta, mX, aData, aContext, aPresContext,
                       aCanStoreInRuleTree);
     break;
   case eCSSKeyword_translatey:
     ProcessTranslateY(mDelta, mY, aData, aContext, aPresContext,
                       aCanStoreInRuleTree);
     break;
diff --git a/layout/style/nsStyleTransformMatrix.h b/layout/style/nsStyleTransformMatrix.h
--- a/layout/style/nsStyleTransformMatrix.h
+++ b/layout/style/nsStyleTransformMatrix.h
@@ -101,16 +101,22 @@ class nsStyleTransformMatrix
    * @param aOther The matrix to multiply this matrix by.
    * @return A new nsStyleTransformMatrix equal to this matrix multiplied
    *         by the other matrix.
    */
   const nsStyleTransformMatrix
     operator * (const nsStyleTransformMatrix &aOther) const;
 
   /**
+   * Return the transform function, as an nsCSSKeyword, for the given
+   * nsCSSValue::Array from a transform list.
+   */
+  static nsCSSKeyword TransformFunctionOf(const nsCSSValue::Array* aData);
+
+  /**
    * Given an nsCSSValue::Array* containing a -moz-transform function,
    * updates this matrix to hold the value of that function.
    *
    * @param aData The nsCSSValue::Array* containing the transform function.
    * @param aContext The style context, used for unit conversion.
    * @param aPresContext The presentation context, used for unit conversion.
    * @param aCanStoreInRuleTree Set to false if the result cannot be cached
    *                            in the rule tree, otherwise untouched.
diff --git a/layout/style/test/test_transitions_per_property.html b/layout/style/test/test_transitions_per_property.html
--- a/layout/style/test/test_transitions_per_property.html
+++ b/layout/style/test/test_transitions_per_property.html
@@ -60,16 +60,17 @@ var supported_properties = {
                                 test_border_color_transition ],
     "-moz-column-rule-width": [ test_length_transition ],
     "-moz-column-width": [ test_length_transition ],
     "-moz-image-region": [ test_rect_transition ],
     "-moz-outline-radius-bottomleft": [ test_radius_transition ],
     "-moz-outline-radius-bottomright": [ test_radius_transition ],
     "-moz-outline-radius-topleft": [ test_radius_transition ],
     "-moz-outline-radius-topright": [ test_radius_transition ],
+    "-moz-transform": [ test_transform_transition ],
     "-moz-transform-origin": [ test_length_pair_transition,
                                test_length_percent_pair_transition ],
     "background-color": [ test_color_transition ],
     "background-position": [ test_background_position_transition ],
     "background-size": [ test_background_size_transition ],
     "border-bottom-color": [ test_color_transition,
                              test_border_color_transition ],
     "border-bottom-width": [ test_length_transition ],
@@ -635,12 +636,16 @@ function test_background_position_size_c
   div.style.setProperty(prop, "10px 40%, 50% 50px, 30% 20%", "");
   is(cs.getPropertyValue(prop), "10px 40%, 50% 50px, 30% 20%",
      "property " + prop + ": computed value before transition");
   div.style.setProperty(prop, "50px 20%, 70% 50px, 30% 40%", "");
   is(cs.getPropertyValue(prop), "30px 30%, 60% 50px, 30% 30%",
      "property " + prop + ": interpolation of lists of lengths and percents");
 }
 
+function test_transform_transition(prop) {
+  ok(false, "FIXME: WRITE ME");
+}
+
 </script>
 </pre>
 </body>
 </html>
