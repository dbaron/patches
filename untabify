Convert tabs to spaces.

diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -6877,17 +6877,17 @@ CSSParserImpl::ParseFunction(const nsStr
   /* Now, convert this nsTArray into an nsCSSValue::Array object.
    * We'll need N + 1 spots, one for the function name and the rest for the
    * arguments.  In case the user has given us more than 2^16 - 2 arguments,
    * we'll truncate them at 2^16 - 2 arguments.
    */
   PRUint16 numElements = (foundValues.Length() <= MAX_ALLOWED_ELEMS ?
                           foundValues.Length() + 1 : MAX_ALLOWED_ELEMS);
   nsRefPtr<nsCSSValue::Array> convertedArray =
-	  nsCSSValue::Array::Create(numElements);
+    nsCSSValue::Array::Create(numElements);
   if (!convertedArray) {
     mScanner.SetLowLevelError(NS_ERROR_OUT_OF_MEMORY);
     return PR_FALSE;
   }
   
   /* Copy things over. */
   convertedArray->Item(0).SetStringValue(functionName, eCSSUnit_String);
   for (PRUint16 index = 0; index + 1 < numElements; ++index)
@@ -7037,17 +7037,17 @@ static PRBool GetFunctionParseInformatio
                                           
 
 /* Reads a single transform function from the tokenizer stream, reporting an
  * error if something goes wrong.
  */
 PRBool CSSParserImpl::ReadSingleTransform(nsCSSValueList **& aTail)
 {
   typedef nsTArray<nsCSSValue>::size_type arrlen_t;
-	
+
   if (!GetToken(PR_TRUE))
     return PR_FALSE;
   
   /* Check to make sure that we've read a function. */
   if (mToken.mType != eCSSToken_Function) {
     UngetToken();
     return PR_FALSE;
   }
diff --git a/layout/style/nsStyleTransformMatrix.cpp b/layout/style/nsStyleTransformMatrix.cpp
--- a/layout/style/nsStyleTransformMatrix.cpp
+++ b/layout/style/nsStyleTransformMatrix.cpp
@@ -229,30 +229,30 @@ const nsStyleTransformMatrix
 const nsStyleTransformMatrix
 nsStyleTransformMatrix::operator *(const nsStyleTransformMatrix &aOther) const
 {
   return nsStyleTransformMatrix(*this) *= aOther;
 }
 
 /* Helper function to fill in an nscoord with the specified nsCSSValue. */
 static void SetCoordToValue(const nsCSSValue &aValue,
-			    nsStyleContext* aContext,
-			    nsPresContext* aPresContext,
-			    PRBool &aInherited, nscoord &aOut)
+                            nsStyleContext* aContext,
+                            nsPresContext* aPresContext,
+                            PRBool &aInherited, nscoord &aOut)
 {
   aOut = nsRuleNode::CalcLength(aValue, aContext, aPresContext, aInherited);
 }
 
 /* Helper function to process a matrix entry. */
 static void ProcessMatrix(float aMain[4], nscoord aDelta[2],
-			  float aX[2], float aY[2],
-			  const nsCSSValue::Array* aData,
-			  nsStyleContext* aContext,
-			  nsPresContext* aPresContext,
-			  PRBool& aInherited)
+                          float aX[2], float aY[2],
+                          const nsCSSValue::Array* aData,
+                          nsStyleContext* aContext,
+                          nsPresContext* aPresContext,
+                          PRBool& aInherited)
 {
   NS_PRECONDITION(aData->Count() == 7, "Invalid array!");
 
   /* Take the first four elements out of the array as floats and store
    * them in aMain.
    */
   for (PRUint16 index = 1; index <= 4; ++index)
     aMain[index - 1] = aData->Item(index).GetFloatValue();
@@ -273,20 +273,20 @@ static void ProcessMatrix(float aMain[4]
     aY[1] = aData->Item(6).GetPercentValue();
   else
     SetCoordToValue(aData->Item(6), aContext, aPresContext, aInherited,
                     aDelta[1]);
 }
 
 /* Helper function to process a translatex function. */
 static void ProcessTranslateX(nscoord aDelta[2], float aX[2],
-			      const nsCSSValue::Array* aData,
-			      nsStyleContext* aContext,
-			      nsPresContext* aPresContext
-			      PRBool& aInherited)
+                              const nsCSSValue::Array* aData,
+                              nsStyleContext* aContext,
+                              nsPresContext* aPresContext
+                              PRBool& aInherited)
 {
   NS_PRECONDITION(aData->Count() == 2, "Invalid array!");
 
   /* There are two cases.  If we have a number, we want our matrix to look
    * like this:
    *
    * |  1  0 dx|
    * |  0  1  0|
@@ -300,20 +300,20 @@ static void ProcessTranslateX(nscoord aD
     SetCoordToValue(aData->Item(1), aContext, aPresContext, aInherited,
                     aDelta[0]);
   else
     aX[0] = aData->Item(1).GetPercentValue();
 }
 
 /* Helper function to process a translatey function. */
 static void ProcessTranslateY(nscoord aDelta[2], float aY[2],
-			      const nsCSSValue::Array* aData,
-			      nsStyleContext* aContext,
-			      nsPresContext* aPresContext,
-			      PRBool& aInherited)
+                              const nsCSSValue::Array* aData,
+                              nsStyleContext* aContext,
+                              nsPresContext* aPresContext,
+                              PRBool& aInherited)
 {
   NS_PRECONDITION(aData->Count() == 2, "Invalid array!");
 
   /* There are two cases.  If we have a number, we want our matrix to look
    * like this:
    *
    * |  1  0  0|
    * |  0  1 dy|
@@ -327,20 +327,20 @@ static void ProcessTranslateY(nscoord aD
     SetCoordToValue(aData->Item(1), aContext, aPresContext, aInherited,
                     aDelta[1]);
   else
     aY[1] = aData->Item(1).GetPercentValue();
 }
 
 /* Helper function to process a translate function. */
 static void ProcessTranslate(nscoord aDelta[2], float aX[2], float aY[2],
-			     const nsCSSValue::Array* aData,
-			     nsStyleContext* aContext,
-			     nsPresContext* aPresContext,
-			     PRBool& aInherited)
+                             const nsCSSValue::Array* aData,
+                             nsStyleContext* aContext,
+                             nsPresContext* aPresContext,
+                             PRBool& aInherited)
 {
   NS_PRECONDITION(aData->Count() == 2 || aData->Count() == 3, "Invalid array!");
 
   /* There are several cases to consider.
    * First, we might have one value, or we might have two.  If we have
    * two, we need to consider both dX and dY components.
    * Next, the values might be lengths, or they might be percents.  If they're
    * percents, store them in the dX and dY components.  Otherwise, store them in
@@ -394,20 +394,20 @@ static void ProcessScale(float aMain[4],
 static void ProcessScale(float aMain[4], const nsCSSValue::Array* aData)
 {
   NS_PRECONDITION(aData->Count() == 2 || aData->Count() == 3, "Bad array!");
   /* We either have one element or two.  If we have one, it's for both X and Y.
    * Otherwise it's one for each.
    */
   const nsCSSValue& scaleX = aData->Item(1);
   const nsCSSValue& scaleY = (aData->Count() == 2 ? scaleX :
-			      aData->Item(2));
+                              aData->Item(2));
 
   ProcessScaleHelper(scaleX.GetFloatValue(),
-		     scaleY.GetFloatValue(), aMain);
+                     scaleY.GetFloatValue(), aMain);
 }
 
 /* Helper function that, given a set of angles, constructs the appropriate
  * skew matrix.
  */
 static void ProcessSkewHelper(float aXAngle, float aYAngle, float aMain[4])
 {
   /* We want our matrix to look like this:
@@ -537,14 +537,14 @@ nsStyleTransformMatrix::operator ==(cons
 nsStyleTransformMatrix::operator ==(const nsStyleTransformMatrix &aOther) const
 {
   for (PRInt32 index = 0; index < 4; ++index)
     if (mMain[index] != aOther.mMain[index])
       return PR_FALSE;
 
   for (PRInt32 index = 0; index < 2; ++index)
     if (mDelta[index] != aOther.mDelta[index] ||
-	mX[index] != aOther.mX[index] ||
-	mY[index] != aOther.mY[index])
+        mX[index] != aOther.mX[index] ||
+        mY[index] != aOther.mY[index])
       return PR_FALSE;
 
   return PR_TRUE;
 }
diff --git a/layout/style/nsStyleUtil.cpp b/layout/style/nsStyleUtil.cpp
--- a/layout/style/nsStyleUtil.cpp
+++ b/layout/style/nsStyleUtil.cpp
@@ -220,21 +220,21 @@ nsStyleUtil::CalcFontPointSize(PRInt32 a
 
   // Make special call specifically for fonts (needed PrintPreview)
   PRInt32 fontSize = nsPresContext::AppUnitsToIntCSSPixels(aBasePointSize);
 
   if ((fontSize >= sFontSizeTableMin) && (fontSize <= sFontSizeTableMax))
   {
     PRInt32 row = fontSize - sFontSizeTableMin;
 
-	  if (aPresContext->CompatibilityMode() == eCompatibility_NavQuirks) {
-	    dFontSize = nsPresContext::CSSPixelsToAppUnits(sQuirksFontSizeTable[row][column[aHTMLSize]]);
-	  } else {
-	    dFontSize = nsPresContext::CSSPixelsToAppUnits(sStrictFontSizeTable[row][column[aHTMLSize]]);
-	  }
+    if (aPresContext->CompatibilityMode() == eCompatibility_NavQuirks) {
+      dFontSize = nsPresContext::CSSPixelsToAppUnits(sQuirksFontSizeTable[row][column[aHTMLSize]]);
+    } else {
+      dFontSize = nsPresContext::CSSPixelsToAppUnits(sStrictFontSizeTable[row][column[aHTMLSize]]);
+    }
   }
   else
   {
     PRInt32 factor = sFontSizeFactors[column[aHTMLSize]];
     dFontSize = (factor * aBasePointSize) / 100;
   }
 
   dFontSize *= aScalingFactor;
@@ -262,23 +262,23 @@ nscoord nsStyleUtil::FindNextSmallerFont
   nscoord indexFontSize = aFontSize; // XXX initialize to quell a spurious gcc3.2 warning
   nscoord smallestIndexFontSize;
   nscoord largestIndexFontSize;
   nscoord smallerIndexFontSize;
   nscoord largerIndexFontSize;
 
   nscoord onePx = nsPresContext::CSSPixelsToAppUnits(1);
 
-	if (aFontSizeType == eFontSize_HTML) {
-		indexMin = 1;
-		indexMax = 7;
-	} else {
-		indexMin = 0;
-		indexMax = 6;
-	}
+  if (aFontSizeType == eFontSize_HTML) {
+    indexMin = 1;
+    indexMax = 7;
+  } else {
+    indexMin = 0;
+    indexMax = 6;
+  }
   
   smallestIndexFontSize = CalcFontPointSize(indexMin, aBasePointSize, aScalingFactor, aPresContext, aFontSizeType);
   largestIndexFontSize = CalcFontPointSize(indexMax, aBasePointSize, aScalingFactor, aPresContext, aFontSizeType); 
   if (aFontSize > smallestIndexFontSize) {
     if (aFontSize < NSToCoordRound(float(largestIndexFontSize) * 1.5)) { // smaller will be in HTML table
       // find largest index smaller than current
       for (index = indexMax; index >= indexMin; index--) {
         indexFontSize = CalcFontPointSize(index, aBasePointSize, aScalingFactor, aPresContext, aFontSizeType);
@@ -327,23 +327,23 @@ nscoord nsStyleUtil::FindNextLargerFontS
   nscoord indexFontSize = aFontSize; // XXX initialize to quell a spurious gcc3.2 warning
   nscoord smallestIndexFontSize;
   nscoord largestIndexFontSize;
   nscoord smallerIndexFontSize;
   nscoord largerIndexFontSize;
 
   nscoord onePx = nsPresContext::CSSPixelsToAppUnits(1);
 
-	if (aFontSizeType == eFontSize_HTML) {
-		indexMin = 1;
-		indexMax = 7;
-	} else {
-		indexMin = 0;
-		indexMax = 6;
-	}
+  if (aFontSizeType == eFontSize_HTML) {
+    indexMin = 1;
+    indexMax = 7;
+  } else {
+    indexMin = 0;
+    indexMax = 6;
+  }
   
   smallestIndexFontSize = CalcFontPointSize(indexMin, aBasePointSize, aScalingFactor, aPresContext, aFontSizeType);
   largestIndexFontSize = CalcFontPointSize(indexMax, aBasePointSize, aScalingFactor, aPresContext, aFontSizeType); 
   if (aFontSize > (smallestIndexFontSize - onePx)) {
     if (aFontSize < largestIndexFontSize) { // larger will be in HTML table
       // find smallest index larger than current
       for (index = indexMin; index <= indexMax; index++) { 
         indexFontSize = CalcFontPointSize(index, aBasePointSize, aScalingFactor, aPresContext, aFontSizeType);
diff --git a/layout/style/nsStyleUtil.h b/layout/style/nsStyleUtil.h
--- a/layout/style/nsStyleUtil.h
+++ b/layout/style/nsStyleUtil.h
@@ -39,18 +39,18 @@
 
 #include "nsCoord.h"
 #include "nsPresContext.h"
 #include "nsILinkHandler.h" // for nsLinkState
 
 struct nsStyleBackground;
 
 enum nsFontSizeType {
-  eFontSize_HTML  	= 1,
-  eFontSize_CSS			= 2
+  eFontSize_HTML = 1,
+  eFontSize_CSS = 2
 };
 
 
 // Style utility functions
 class nsStyleUtil {
 public:
   
   static float GetScalingFactor(PRInt32 aScaler);
