Printfs of elapsed time for cycle collection and JS GC.

diff --git a/js/src/jsgc.c b/js/src/jsgc.c
--- a/js/src/jsgc.c
+++ b/js/src/jsgc.c
@@ -2154,6 +2154,7 @@ js_GC(JSContext *cx, JSGCInvocationKind 
     uint32 requestDebit;
     JSContext *acx, *iter;
 #endif
+    int64 start, diff;
 
     rt = cx->runtime;
 #ifdef JS_THREADSAFE
@@ -2345,6 +2346,9 @@ restart:
     rt->gcNumber++;
     JS_ASSERT(!rt->gcUnscannedArenaStackTop);
     JS_ASSERT(rt->gcUnscannedBagSize == 0);
+
+    printf("Doing JS GC...\n");
+    start = JS_Now();
 
 #ifdef DEBUG_dbaron_off
     printf("Doing JS GC.\n");
@@ -2544,6 +2548,9 @@ restart:
   }
 #endif
 
+    diff = (JS_Now() - start) / 1000;
+    printf("... JS_GC took %ld milliseconds.\n", (long)diff);
+
     JS_LOCK_GC(rt);
 
     /*
@@ -2554,6 +2561,7 @@ restart:
         rt->gcLevel = 1;
         rt->gcPoke = JS_FALSE;
         JS_UNLOCK_GC(rt);
+        printf("Restarting JS GC.\n");
         goto restart;
     }
     rt->gcLevel = 0;
@@ -2602,6 +2610,7 @@ restart:
              * On shutdown iterate until JSGC_END callback stops creating
              * garbage.
              */
+            printf("Restarting JS GC after callback.\n");
             goto restart_after_callback;
         }
     }
diff --git a/xpcom/base/nsCycleCollector.cpp b/xpcom/base/nsCycleCollector.cpp
--- a/xpcom/base/nsCycleCollector.cpp
+++ b/xpcom/base/nsCycleCollector.cpp
@@ -140,6 +140,7 @@
 #include "nsTArray.h"
 #include "nsIObserverService.h"
 #include "nsServiceManagerUtils.h"
+#include "prinrval.h"
 
 #include <stdio.h>
 #ifdef WIN32
@@ -2597,8 +2598,13 @@ void
 void 
 nsCycleCollector_collect()
 {
+    printf("Starting nsCycleCollector_collect\n");
+    PRIntervalTime start = PR_IntervalNow();
     if (sCollector)
         sCollector->Collect();
+    PRIntervalTime end = PR_IntervalNow();
+    printf("...nsCycleCollector_collect took %d milliseconds.\n",
+           PR_IntervalToMilliseconds(end - start));
 }
 
 nsresult 
