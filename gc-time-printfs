From: L. David Baron <dbaron@dbaron.org>

Printfs of elapsed time for cycle collection and JS GC.

diff --git a/js/src/jsgc.cpp b/js/src/jsgc.cpp
--- a/js/src/jsgc.cpp
+++ b/js/src/jsgc.cpp
@@ -2447,16 +2447,20 @@ GCUntilDone(JSContext *cx, JSGCInvocatio
     METER(rt->gcStats.poke++);
 
     bool firstRun = true;
     rt->gcMarkAndSweep = true;
 #ifdef JS_THREADSAFE
     JS_ASSERT(!cx->gcBackgroundFree);
 #endif
     do {
+#ifdef DEBUG_dbaron
+        fprintf(stderr, "  Doing JS GC iteration.\n");
+#endif
+
         rt->gcPoke = false;
 
         AutoUnlockGC unlock(rt);
         if (firstRun) {
             PreGCCleanup(cx, gckind);
             TIMESTAMP(startMark);
             firstRun = false;
         }
@@ -2503,16 +2507,20 @@ js_GC(JSContext *cx, JSGCInvocationKind 
                  JS_CHECK_STACK_SIZE(cx->stackLimit + 4096, &stackDummy));
 # else
     /* -4k because it is possible to perform a GC during an overrecursion report. */
     JS_ASSERT_IF(cx->stackLimit, JS_CHECK_STACK_SIZE(cx->stackLimit - 4096, &stackDummy));
 # endif
 #endif
 
     GCTIMER_BEGIN();
+#ifdef DEBUG_dbaron
+    fprintf(stderr, "Doing JS GC number %u...\n", unsigned(rt->gcNumber));
+    int64 start = JS_Now();
+#endif
 
     do {
         /*
          * Let the API user decide to defer a GC if it wants to (unless this
          * is the last context).  Invoke the callback regardless. Sample the
          * callback in case we are freely racing with a JS_SetGCCallback{,RT}
          * on another thread.
          */
@@ -2535,16 +2543,20 @@ js_GC(JSContext *cx, JSGCInvocationKind 
         /*
          * On shutdown, iterate until the JSGC_END callback stops creating
          * garbage.
          */
     } while (gckind == GC_LAST_CONTEXT && rt->gcPoke);
 #ifdef JS_GCMETER
     js_DumpGCStats(cx->runtime, stderr);
 #endif
+#ifdef DEBUG_dbaron
+    int64 diff = (JS_Now() - start) / 1000;
+    fprintf(stderr, "... JS_GC took %ld milliseconds.\n", (long)diff);
+#endif
     GCTIMER_END(gckind == GC_LAST_CONTEXT);
 }
 
 namespace js {
 namespace gc {
 
 bool
 SetProtoCheckingForCycles(JSContext *cx, JSObject *obj, JSObject *proto)
