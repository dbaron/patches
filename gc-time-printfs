Printfs of elapsed time for cycle collection and JS GC.

diff --git a/js/src/jsgc.c b/js/src/jsgc.c
--- a/js/src/jsgc.c
+++ b/js/src/jsgc.c
@@ -3013,6 +3013,7 @@ js_GC(JSContext *cx, JSGCInvocationKind 
 #ifdef JS_GCMETER
     uint32 nlivearenas, nkilledarenas, nthings;
 #endif
+    int64 start, diff;
 
     rt = cx->runtime;
 #ifdef JS_THREADSAFE
@@ -3193,6 +3194,7 @@ js_GC(JSContext *cx, JSGCInvocationKind 
         rt->requestCount += requestDebit;
 #endif
         gckind = GC_LOCK_HELD;
+        printf("Restarting JS GC\n");
         goto restart_at_beginning;
     }
 
@@ -3246,6 +3248,9 @@ js_GC(JSContext *cx, JSGCInvocationKind 
     rt->gcNumber++;
     JS_ASSERT(!rt->gcUntracedArenaStackTop);
     JS_ASSERT(rt->gcTraceLaterCount == 0);
+
+    printf("Doing JS GC...\n");
+    start = JS_Now();
 
     /* Reset the property cache's type id generator so we can compress ids. */
     rt->shapeGen = 0;
@@ -3502,6 +3507,9 @@ js_GC(JSContext *cx, JSGCInvocationKind 
   }
 #endif /* JS_SCOPE_DEPTH_METER */
 
+    diff = (JS_Now() - start) / 1000;
+    printf("... JS_GC took %ld milliseconds.\n", (long)diff);
+
     JS_LOCK_GC(rt);
 
     /*
@@ -3512,6 +3520,7 @@ js_GC(JSContext *cx, JSGCInvocationKind 
         rt->gcLevel = 1;
         rt->gcPoke = JS_FALSE;
         JS_UNLOCK_GC(rt);
+        printf("Restarting JS GC.\n");
         goto restart;
     }
 
@@ -3578,6 +3587,7 @@ js_GC(JSContext *cx, JSGCInvocationKind 
              * On shutdown iterate until JSGC_END callback stops creating
              * garbage.
              */
+            printf("Restarting JS GC for GC_LAST_CONTEXT.\n");
             goto restart_at_beginning;
         }
     }
diff --git a/xpcom/base/nsCycleCollector.cpp b/xpcom/base/nsCycleCollector.cpp
--- a/xpcom/base/nsCycleCollector.cpp
+++ b/xpcom/base/nsCycleCollector.cpp
@@ -143,6 +143,7 @@
 #include "nsServiceManagerUtils.h"
 #include "nsThreadUtils.h"
 #include "nsTPtrArray.h"
+#include "prinrval.h"
 
 #include <stdio.h>
 #ifdef WIN32
@@ -2813,7 +2814,13 @@ PRUint32
 PRUint32
 nsCycleCollector_collect()
 {
-    return sCollector ? sCollector->Collect() : 0;
+    printf("Starting nsCycleCollector_collect\n");
+    PRIntervalTime start = PR_IntervalNow();
+    PRUint32 result = sCollector ? sCollector->Collect() : 0;
+    PRIntervalTime end = PR_IntervalNow();
+    printf("...nsCycleCollector_collect took %d milliseconds.\n",
+           PR_IntervalToMilliseconds(end - start));
+    return result;
 }
 
 PRUint32
