From: L. David Baron <dbaron@dbaron.org>

Printfs of elapsed time for cycle collection and JS GC.

diff --git a/js/src/jsgc.cpp b/js/src/jsgc.cpp
--- a/js/src/jsgc.cpp
+++ b/js/src/jsgc.cpp
@@ -3171,16 +3171,21 @@ GC(JSContext *cx, JSGCInvocationKind gck
  */
 static void
 GCUntilDone(JSContext *cx, JSGCInvocationKind gckind  GCTIMER_PARAM)
 {
     JS_ASSERT_NOT_ON_TRACE(cx);
     JSRuntime *rt = cx->runtime;
     bool firstRun = true;
 
+#ifdef DEBUG_dbaron
+    fprintf(stderr, "Doing JS GC...\n");
+    int64 start = JS_Now();
+#endif
+
     do {
         rt->gcLevel = 1;
         rt->gcPoke = JS_FALSE;
 
         AutoUnlockGC unlock(rt);
         if (firstRun) {
             PreGCCleanup(cx, gckind);
             TIMESTAMP(gcTimer.startMark);
@@ -3188,16 +3193,21 @@ GCUntilDone(JSContext *cx, JSGCInvocatio
         }
         GC(cx, gckind  GCTIMER_ARG);
 
         // GC again if:
         //   - another thread, not in a request, called js_GC
         //   - js_GC was called recursively
         //   - a finalizer called js_RemoveRoot or js_UnlockGCThingRT.
     } while (rt->gcLevel > 1 || rt->gcPoke);
+
+#ifdef DEBUG_dbaron
+    int64 diff = (JS_Now() - start) / 1000;
+    fprintf(stderr, "... JS_GC took %ld milliseconds.\n", (long)diff);
+#endif
 }
 
 /*
  * Call the GC callback, if any, to signal that GC is starting. Return false if
  * the callback vetoes GC.
  */
 static bool
 FireGCBegin(JSContext *cx, JSGCInvocationKind gckind)
@@ -3266,16 +3276,20 @@ FireGCEnd(JSContext *cx, JSGCInvocationK
 void
 js_GC(JSContext *cx, JSGCInvocationKind gckind)
 {
     JSRuntime *rt;
 #ifdef JS_THREADSAFE
     size_t requestDebit;
 #endif
 
+#ifdef DEBUG_dbaron
+    fprintf(stderr, "  Doing JS GC iteration.\n");
+#endif
+
     JS_ASSERT_IF(gckind == GC_LAST_DITCH, !JS_ON_TRACE(cx));
     rt = cx->runtime;
 
 #ifdef JS_THREADSAFE
     /*
      * We allow js_GC calls outside a request but the context must be bound
      * to the current thread.
      */
diff --git a/xpcom/base/nsCycleCollector.cpp b/xpcom/base/nsCycleCollector.cpp
--- a/xpcom/base/nsCycleCollector.cpp
+++ b/xpcom/base/nsCycleCollector.cpp
@@ -139,16 +139,17 @@
 #include "nsPrintfCString.h"
 #include "nsTArray.h"
 #include "nsIObserverService.h"
 #include "nsIConsoleService.h"
 #include "nsServiceManagerUtils.h"
 #include "nsThreadUtils.h"
 #include "nsTPtrArray.h"
 #include "nsTArray.h"
+#include "prinrval.h"
 
 #include <stdio.h>
 #include <string.h>
 #ifdef WIN32
 #include <io.h>
 #include <process.h>
 #endif
 
@@ -3209,17 +3210,27 @@ NS_CycleCollectorForget2(nsPurpleBufferE
 {
     return sCollector ? sCollector->Forget2(e) : PR_TRUE;
 }
 
 
 PRUint32
 nsCycleCollector_collect()
 {
-    return sCollector ? sCollector->Collect() : 0;
+#ifdef DEBUG_dbaron
+    fprintf(stderr, "Starting nsCycleCollector_collect\n");
+    PRIntervalTime start = PR_IntervalNow();
+#endif
+    PRUint32 result = sCollector ? sCollector->Collect() : 0;
+#ifdef DEBUG_dbaron
+    PRIntervalTime end = PR_IntervalNow();
+    fprintf(stderr, "...nsCycleCollector_collect took %d milliseconds.\n",
+                    PR_IntervalToMilliseconds(end - start));
+#endif
+    return result;
 }
 
 PRUint32
 nsCycleCollector_suspectedCount()
 {
     return sCollector ? sCollector->SuspectedCount() : 0;
 }
 
