From: L. David Baron <dbaron@dbaron.org>

Printfs of elapsed time for cycle collection and JS GC.

diff --git a/js/src/jsgc.cpp b/js/src/jsgc.cpp
--- a/js/src/jsgc.cpp
+++ b/js/src/jsgc.cpp
@@ -3696,17 +3696,26 @@ Collect(JSContext *cx, JSCompartment *co
     RecordNativeStackTopForGC(cx);
 
     /* This is a heuristic to avoid resets. */
     if (rt->gcIncrementalState != NO_INCREMENTAL && !rt->gcIncrementalCompartment)
         comp = NULL;
 
     gcstats::AutoGCSlice agc(rt->gcStats, comp, reason);
 
+#ifdef DEBUG_dbaron
+    fprintf(stderr, "Doing JS GC number %u...\n", unsigned(rt->gcNumber));
+    int64_t start = JS_Now();
+#endif
+
     do {
+#ifdef DEBUG_dbaron
+        fprintf(stderr, "  Doing JS GC iteration.\n");
+#endif
+
         /*
          * Let the API user decide to defer a GC if it wants to (unless this
          * is the last context). Invoke the callback regardless.
          */
         if (rt->gcIncrementalState == NO_INCREMENTAL) {
             if (JSGCCallback callback = rt->gcCallback) {
                 if (!callback(cx, JSGC_BEGIN) && rt->hasContexts())
                     return;
@@ -3725,16 +3734,21 @@ Collect(JSContext *cx, JSCompartment *co
                 (void) callback(cx, JSGC_END);
         }
 
         /*
          * On shutdown, iterate until finalizers or the JSGC_END callback
          * stop creating garbage.
          */
     } while (!rt->hasContexts() && rt->gcPoke);
+
+#ifdef DEBUG_dbaron
+    int64_t diff = (JS_Now() - start) / 1000;
+    fprintf(stderr, "... JS_GC took %ld milliseconds.\n", (long)diff);
+#endif
 }
 
 namespace js {
 
 void
 GC(JSContext *cx, JSCompartment *comp, JSGCInvocationKind gckind, gcreason::Reason reason)
 {
     Collect(cx, comp, SliceBudget::Unlimited, gckind, reason);
