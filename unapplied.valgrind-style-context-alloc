From: L. David Baron <dbaron@dbaron.org>

Add valgrind annotations to teach valgrind about nsStyleContext's allocator.  (relative of, but not, bug 348798)

diff --git a/layout/style/nsStyleContext.cpp b/layout/style/nsStyleContext.cpp
--- a/layout/style/nsStyleContext.cpp
+++ b/layout/style/nsStyleContext.cpp
@@ -17,16 +17,27 @@
 #include "nsStyleSet.h"
 #include "nsIPresShell.h"
 
 #include "nsRuleNode.h"
 #include "nsStyleContext.h"
 #include "nsStyleAnimation.h"
 #include "GeckoProfiler.h"
 
+#ifdef MOZ_VALGRIND
+#  include <valgrind/valgrind.h>
+#else
+#  define VALGRIND_CREATE_MEMPOOL(pool, rzB, is_zeroed) \
+            PR_BEGIN_MACRO PR_END_MACRO
+#  define VALGRIND_DESTROY_MEMPOOL(pool) \
+            PR_BEGIN_MACRO PR_END_MACRO
+#  define VALGRIND_MEMPOOL_ALLOC(pool, addr, size) \
+            PR_BEGIN_MACRO PR_END_MACRO
+#endif
+
 #ifdef DEBUG
 // #define NOISY_DEBUG
 #endif
 
 using namespace mozilla;
 
 //----------------------------------------------------------------------
 
@@ -819,32 +830,46 @@ nsStyleContext::CombineVisitedColors(nsc
   nscolor alphaColor = aColors[set.alphaIndex];
   return NS_RGBA(NS_GET_R(colorColor), NS_GET_G(colorColor),
                  NS_GET_B(colorColor), NS_GET_A(alphaColor));
 }
 
 void*
 nsStyleContext::Alloc(size_t aSize)
 {
+#ifdef MOZ_VALGRIND
+  size_t origSize = aSize;
+#endif
+
+  if (!mAllocations) {
+    VALGRIND_CREATE_MEMPOOL(this, 0, false);
+  }
+
   nsIPresShell *shell = PresContext()->PresShell();
 
   aSize += offsetof(AllocationHeader, mStorageStart);
   AllocationHeader *alloc =
     static_cast<AllocationHeader*>(shell->AllocateMisc(aSize));
 
   alloc->mSize = aSize; // NOTE: inflated by header
 
   alloc->mNext = mAllocations;
   mAllocations = alloc;
 
+  VALGRIND_MEMPOOL_ALLOC(this, &alloc->mStorageStart, origSize);
+
   return static_cast<void*>(&alloc->mStorageStart);
 }
 
 void
 nsStyleContext::FreeAllocations(nsPresContext *aPresContext)
 {
+  if (mAllocations) {
+    VALGRIND_DESTROY_MEMPOOL(this);
+  }
+
   nsIPresShell *shell = aPresContext->PresShell();
 
   for (AllocationHeader *alloc = mAllocations, *next; alloc; alloc = next) {
     next = alloc->mNext;
     shell->FreeMisc(alloc->mSize, alloc);
   }
 }
