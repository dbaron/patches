From: Thomasy <thomas@thomasy.tw>

Bug 750388:  In an+b microsyntax in :nth-child() etc., allow starting with +n and allow comments at all token boundaries rather than requiring the strange tokens that result from lack of comments or spaces.  r=dbaron

diff -r b5ae446888f5 layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp	Thu Aug 09 23:30:46 2012 -0700
+++ b/layout/style/nsCSSParser.cpp	Sun Aug 12 18:45:02 2012 +0800
@@ -3617,116 +3617,157 @@ CSSParserImpl::ParsePseudoClassWithIdent
   return eSelectorParsingStatus_Continue;
 }
 
 CSSParserImpl::nsSelectorParsingStatus
 CSSParserImpl::ParsePseudoClassWithNthPairArg(nsCSSSelector& aSelector,
                                               nsCSSPseudoClasses::Type aType)
 {
   int32_t numbers[2] = { 0, 0 };
+  int32_t sign[2] = { 1, 1 };
+  bool hasSign[2] = { false, false };
   bool lookForB = true;
 
   // Follow the whitespace rules as proposed in
   // http://lists.w3.org/Archives/Public/www-style/2008Mar/0121.html
 
   if (! GetToken(true)) {
     REPORT_UNEXPECTED_EOF(PEPseudoClassArgEOF);
     return eSelectorParsingStatus_Error;
   }
 
+  if (mToken.IsSymbol('+') || mToken.IsSymbol('-')) {
+    hasSign[0] = true;
+    if (mToken.IsSymbol('-')) {
+      sign[0] = -1;
+    }
+    if (! GetToken(false)) {
+      REPORT_UNEXPECTED_EOF(PEPseudoClassArgEOF);
+      return eSelectorParsingStatus_Error;
+    }
+  }
+
   if (eCSSToken_Ident == mToken.mType || eCSSToken_Dimension == mToken.mType) {
     // The CSS tokenization doesn't handle :nth-child() containing - well:
     //   2n-1 is a dimension
     //   n-1 is an identifier
     // The easiest way to deal with that is to push everything from the
     // minus on back onto the scanner's pushback buffer.
     uint32_t truncAt = 0;
     if (StringBeginsWith(mToken.mIdent, NS_LITERAL_STRING("n-"))) {
       truncAt = 1;
-    } else if (StringBeginsWith(mToken.mIdent, NS_LITERAL_STRING("-n-"))) {
+    } else if (StringBeginsWith(mToken.mIdent, NS_LITERAL_STRING("-n-")) && !hasSign[0]) {
       truncAt = 2;
     }
     if (truncAt != 0) {
       for (uint32_t i = mToken.mIdent.Length() - 1; i >= truncAt; --i) {
         mScanner.Pushback(mToken.mIdent[i]);
       }
       mToken.mIdent.Truncate(truncAt);
     }
   }
 
   if (eCSSToken_Ident == mToken.mType) {
-    if (mToken.mIdent.LowerCaseEqualsLiteral("odd")) {
+    if (mToken.mIdent.LowerCaseEqualsLiteral("odd") && !hasSign[0]) {
       numbers[0] = 2;
       numbers[1] = 1;
       lookForB = false;
     }
-    else if (mToken.mIdent.LowerCaseEqualsLiteral("even")) {
+    else if (mToken.mIdent.LowerCaseEqualsLiteral("even") && !hasSign[0]) {
       numbers[0] = 2;
       numbers[1] = 0;
       lookForB = false;
     }
     else if (mToken.mIdent.LowerCaseEqualsLiteral("n")) {
-      numbers[0] = 1;
-    }
-    else if (mToken.mIdent.LowerCaseEqualsLiteral("-n")) {
+      numbers[0] = sign[0];
+    }
+    else if (mToken.mIdent.LowerCaseEqualsLiteral("-n") && !hasSign[0]) {
       numbers[0] = -1;
     }
     else {
       REPORT_UNEXPECTED_TOKEN(PEPseudoClassArgNotNth);
       return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
     }
   }
   else if (eCSSToken_Number == mToken.mType) {
     if (!mToken.mIntegerValid) {
       REPORT_UNEXPECTED_TOKEN(PEPseudoClassArgNotNth);
       return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
     }
-    numbers[1] = mToken.mInteger;
-    lookForB = false;
+    // for +-an case
+    if (mToken.mHasSign && hasSign[0]) {
+      REPORT_UNEXPECTED_TOKEN(PEPseudoClassArgNotNth);
+      return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
+    }
+    int32_t intValue = mToken.mInteger * sign[0];
+    // for -a/**/n case
+    if (! GetToken(false)) {
+      numbers[1] = intValue;
+      lookForB = false;
+    }
+    else {
+      if (eCSSToken_Ident == mToken.mType && mToken.mIdent.LowerCaseEqualsLiteral("n")) {
+        numbers[0] = intValue;
+      }
+      else if (eCSSToken_Ident == mToken.mType && StringBeginsWith(mToken.mIdent, NS_LITERAL_STRING("n-"))) {
+        numbers[0] = intValue;
+        for (uint32_t i = mToken.mIdent.Length() - 1; i >= 1; --i) {
+          mScanner.Pushback(mToken.mIdent[i]);
+        }
+      }
+      else {
+        UngetToken();
+        numbers[1] = intValue;
+        lookForB = false;
+      }
+    }
   }
   else if (eCSSToken_Dimension == mToken.mType) {
     if (!mToken.mIntegerValid || !mToken.mIdent.LowerCaseEqualsLiteral("n")) {
       REPORT_UNEXPECTED_TOKEN(PEPseudoClassArgNotNth);
       return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
     }
-    numbers[0] = mToken.mInteger;
+    // for +-an case
+    if ( mToken.mHasSign && hasSign[0] ) {
+      REPORT_UNEXPECTED_TOKEN(PEPseudoClassArgNotNth);
+      return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
+    }
+    numbers[0] = mToken.mInteger * sign[0];
   }
   // XXX If it's a ')', is that valid?  (as 0n+0)
   else {
     REPORT_UNEXPECTED_TOKEN(PEPseudoClassArgNotNth);
     UngetToken();
     return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
   }
 
   if (! GetToken(true)) {
     REPORT_UNEXPECTED_EOF(PEPseudoClassArgEOF);
     return eSelectorParsingStatus_Error;
   }
   if (lookForB && !mToken.IsSymbol(')')) {
     // The '+' or '-' sign can optionally be separated by whitespace.
     // If it is separated by whitespace from what follows it, it appears
     // as a separate token rather than part of the number token.
-    bool haveSign = false;
-    int32_t sign = 1;
     if (mToken.IsSymbol('+') || mToken.IsSymbol('-')) {
-      haveSign = true;
+      hasSign[1] = true;
       if (mToken.IsSymbol('-')) {
-        sign = -1;
+        sign[1] = -1;
       }
       if (! GetToken(true)) {
         REPORT_UNEXPECTED_EOF(PEPseudoClassArgEOF);
         return eSelectorParsingStatus_Error;
       }
     }
     if (eCSSToken_Number != mToken.mType ||
-        !mToken.mIntegerValid || mToken.mHasSign == haveSign) {
+        !mToken.mIntegerValid || mToken.mHasSign == hasSign[1]) {
       REPORT_UNEXPECTED_TOKEN(PEPseudoClassArgNotNth);
       return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
     }
-    numbers[1] = mToken.mInteger * sign;
+    numbers[1] = mToken.mInteger * sign[1];
     if (! GetToken(true)) {
       REPORT_UNEXPECTED_EOF(PEPseudoClassArgEOF);
       return eSelectorParsingStatus_Error;
     }
   }
   if (!mToken.IsSymbol(')')) {
     REPORT_UNEXPECTED_TOKEN(PEPseudoClassNoClose);
     return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
diff -r b5ae446888f5 layout/style/test/test_selectors.html
--- a/layout/style/test/test_selectors.html	Thu Aug 09 23:30:46 2012 -0700
+++ b/layout/style/test/test_selectors.html	Sun Aug 12 18:45:02 2012 +0800
@@ -447,16 +447,74 @@ function run() {
     test_parseable(":nth-child(-0n+0)");
     test_parseable(":nth-of-type(n+1)");
     test_parseable(":nth-last-child(n-1)");
     test_parseable(":nth-last-of-type(-n+1)");
     test_parseable(":nth-child(-n-1)");
     test_balanced_unparseable(":nth-child(2-n)");
     test_balanced_unparseable(":nth-child(2-n-1)");
     test_balanced_unparseable(":nth-child(n-2-1)");
+    // Bug 750388 
+    test_parseable(":nth-child(+n)");
+    test_balanced_unparseable(":nth-child(+ n)");
+    test_parseable(":nth-child(+n+2)"); 
+    test_parseable(":nth-child(+n-2)");
+    test_balanced_unparseable(":nth-child(+ n+2)");
+    test_parseable(":nth-child(+n-100)"); 
+    test_balanced_unparseable(":nth-child(+ n-100)"); 
+    test_balanced_unparseable(":nth-child(+-n+2)"); 
+    test_balanced_unparseable(":nth-child(+ -n+2)"); 
+    test_balanced_unparseable(":nth-child(+-n-100)"); 
+    test_balanced_unparseable(":nth-child(+ -n-100)"); 
+    test_balanced_unparseable(":nth-child(++n-100)"); 
+    test_balanced_unparseable(":nth-child(-+n-100)"); 
+    test_balanced_unparseable(":nth-child(-even)"); 
+    test_balanced_unparseable(":nth-child(-odd)"); 
+    test_balanced_unparseable(":nth-child(+even)"); 
+    test_balanced_unparseable(":nth-child(+odd)"); 
+    test_balanced_unparseable(":nth-child(+ even)"); 
+    test_balanced_unparseable(":nth-child(+ odd)"); 
+    test_balanced_unparseable(":nth-child(+-n)"); 
+    test_balanced_unparseable(":nth-child(+-n-)"); 
+    test_balanced_unparseable(":nth-child(-+n)"); 
+    test_balanced_unparseable(":nth-child(+n--)");
+    test_parseable(":nth-child(+/**/n+2)");
+    test_parseable(":nth-child(+n/**/+2)");
+    test_parseable(":nth-child(+n/**/+2)");
+    test_parseable(":nth-child(+n+/**/2)");
+    test_parseable(":nth-child(+n+2/**/)");
+    test_parseable(":nth-child(+1/**/n+2)");
+    test_parseable(":nth-child(+1n/**/+2)");
+    test_parseable(":nth-child(+1n/**/+2)");
+    test_parseable(":nth-child(+1n+/**/2)");
+    test_parseable(":nth-child(+1n+2/**/)");
+    test_parseable(":nth-child(-/**/n+2)");
+    test_parseable(":nth-child(-n/**/+2)");
+    test_parseable(":nth-child(-n/**/+2)");
+    test_parseable(":nth-child(-n+/**/2)");
+    test_parseable(":nth-child(-n+2/**/)");
+    test_parseable(":nth-child(-1/**/n+2)");
+    test_parseable(":nth-child(-1n/**/+2)");
+    test_parseable(":nth-child(-1n/**/+2)");
+    test_parseable(":nth-child(-1n+/**/2)");
+    test_parseable(":nth-child(-1n+2/**/)");
+    test_balanced_unparseable(":nth-child(-/**/ n+2)");
+    test_balanced_unparseable(":nth-child(- /**/n+2)");
+    test_balanced_unparseable(":nth-child(+/**/ n+2)");
+    test_balanced_unparseable(":nth-child(+ /**/n+2)");
+    test_parseable(":nth-child( +n + 1 )");
+    test_parseable(":nth-child( +/**/n + 1 )");
+    test_parseable(":nth-child( -/**/2/**/n/**/+/**/4 )");
+    test_balanced_unparseable(":nth-child( -/**/ 2/**/n/**/+/**/4 )");
+    test_balanced_unparseable(":nth-child( -/**/2 /**/n/**/+/**/4 )");
+    test_balanced_unparseable(":nth-child( -/**/2/**/ n/**/+/**/4 )");
+    test_parseable(":nth-child( -/**/2/**/n /**/+/**/4 )");
+    test_parseable(":nth-child( -/**/2/**/n/**/ +/**/4 )");
+    test_parseable(":nth-child(+1/**/n-1)");
+    test_parseable(":nth-child(1/**/n-1)");
 
     // exercise the an+b matching logic particularly hard for
     // :nth-child() (since we know we use the same code for all 4)
     var seven_ps = "<p></p><p></p><p></p><p></p><p></p><p></p><p></p>";
     function pset(indices) { // takes an array of 1-based indices
         return function pset_filter(doc) {
             var a = doc.getElementsByTagName("p");
             var result = [];
