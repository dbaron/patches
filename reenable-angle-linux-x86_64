From: L. David Baron <dbaron@dbaron.org>

Re-enable ANGLE on Linux x86_64, reverting changeset 42029b6d627e (with tweaks, including removing a useless if-0 chunk in content/canvas/src/Makefile.in).

diff --git a/content/canvas/src/Makefile.in b/content/canvas/src/Makefile.in
--- a/content/canvas/src/Makefile.in
+++ b/content/canvas/src/Makefile.in
@@ -73,34 +73,16 @@ ifdef MOZ_WEBGL
 
 CPPSRCS += \
 	WebGLContext.cpp \
 	WebGLContextGL.cpp \
 	WebGLContextUtils.cpp \
 	WebGLContextValidate.cpp \
 	$(NULL)
 
-# We can't build ANGLE on linux-64 until build bug 560894 and related
-# are fixed.
-ifneq ($(OS_ARCH)_$(OS_TEST),Linux_x86_64)
-DEFINES += -DUSE_ANGLE
-endif
-
-ifndef MOZ_ENABLE_LIBXUL
-
-ifdef USE_ANGLE
-
-SHARED_LIBRARY_LIBS += \
-	$(DEPTH)/gfx/angle/$(LIB_PREFIX)angle.$(LIB_SUFFIX) \
-	$(NULL)
-
-endif
-
-endif
-
 else
 
 CPPSRCS += WebGLContextNotSupported.cpp
 
 endif
 
 # we don't want the shared lib, but we want to force the creation of a static lib.
 FORCE_STATIC_LIB = 1
diff --git a/content/canvas/src/WebGLContextGL.cpp b/content/canvas/src/WebGLContextGL.cpp
--- a/content/canvas/src/WebGLContextGL.cpp
+++ b/content/canvas/src/WebGLContextGL.cpp
@@ -50,20 +50,18 @@
 #include "nsContentUtils.h"
 #include "nsDOMError.h"
 #include "nsLayoutUtils.h"
 
 #include "CanvasUtils.h"
 
 #include "jstypedarray.h"
 
-#if defined(USE_ANGLE)
 // shader translator
 #include "angle/ShaderLang.h"
-#endif
 
 using namespace mozilla;
 
 static PRBool BaseTypeAndSizeFromUniformType(WebGLenum uType, WebGLenum *baseType, WebGLint *unitSize);
 
 /* Helper macros for when we're just wrapping a gl method, so that
  * we can avoid having to type this 500 times.  Note that these MUST
  * NOT BE USED if we need to check any of the parameters.
@@ -3154,17 +3152,16 @@ NS_IMETHODIMP
 WebGLContext::CompileShader(nsIWebGLShader *sobj)
 {
     WebGLShader *shader;
     WebGLuint shadername;
     if (!GetConcreteObjectAndGLName("compileShader", sobj, &shader, &shadername))
         return NS_OK;
     MakeContextCurrent();
 
-#if defined(USE_ANGLE)
     if (shader->NeedsTranslation() && mShaderValidation) {
         ShHandle compiler = 0;
         int debugFlags = 0;
         EShLanguage lang = (shader->ShaderType() == LOCAL_GL_VERTEX_SHADER) ?
             EShLangVertex : EShLangFragment;
 
         TBuiltInResource resources;
 
@@ -3200,19 +3197,17 @@ WebGLContext::CompileShader(nsIWebGLShad
         if (!gl->IsGLES2()) {
             s = ShGetObjectCode(compiler);
         }
 
         gl->fShaderSource(shadername, 1, &s, NULL);
         shader->SetTranslationSuccess();
 
         ShDestruct(compiler);
-    } else
-#endif
-    {
+    } else {
         const char *s = nsDependentCString(shader->Source()).get();
         gl->fShaderSource(shadername, 1, &s, NULL);
         shader->SetTranslationSuccess();
     }
 
     gl->fCompileShader(shadername);
 
     return NS_OK;
diff --git a/content/canvas/src/WebGLContextValidate.cpp b/content/canvas/src/WebGLContextValidate.cpp
--- a/content/canvas/src/WebGLContextValidate.cpp
+++ b/content/canvas/src/WebGLContextValidate.cpp
@@ -39,19 +39,17 @@
 
 #include "WebGLContext.h"
 
 #include "nsIPrefService.h"
 #include "nsServiceManagerUtils.h"
 
 #include "CheckedInt.h"
 
-#if defined(USE_ANGLE)
 #include "angle/ShaderLang.h"
-#endif
 
 using namespace mozilla;
 
 /*
  * Pull all the data out of the program that will be used by validate later on
  */
 PRBool
 WebGLProgram::UpdateInfo(gl::GLContext *gl)
@@ -469,25 +467,23 @@ WebGLContext::InitAndValidateGL()
     }
 
     // Check the shader validator pref
     nsCOMPtr<nsIPrefBranch> prefService = do_GetService(NS_PREFSERVICE_CONTRACTID);
     NS_ENSURE_TRUE(prefService != nsnull, NS_ERROR_FAILURE);
 
     prefService->GetBoolPref("webgl.shader_validator", &mShaderValidation);
 
-#if defined(USE_ANGLE)
     // initialize shader translator
     if (mShaderValidation) {
         if (!ShInitialize()) {
             LogMessage("GLSL translator initialization failed!");
             return PR_FALSE;
         }
     }
-#endif
 
     // notice that the point of calling GetError here is not only to check for error,
     // it is also to reset the error flag so that a subsequent WebGL getError call will give the correct result.
     GLenum error = gl->fGetError();
     if (error != LOCAL_GL_NO_ERROR) {
         LogMessage("GL error 0x%x occurred during WebGL context initialization!", error);
         return PR_FALSE;
     }
diff --git a/gfx/Makefile.in b/gfx/Makefile.in
--- a/gfx/Makefile.in
+++ b/gfx/Makefile.in
@@ -51,19 +51,17 @@ endif
 # In static builds, ycbcr must appear after layers in
 # the link line on linux. This order is defined by the
 # order listed in DIRS. On shared builds ycbcr must
 # be built first so the order is reversed.
 ifndef BUILD_STATIC_LIBS
 DIRS		+= ycbcr
 endif
 
-ifneq ($(OS_ARCH)$(OS_TEST),Linuxx86_64)
 DIRS		+= angle
-endif
 
 DIRS		+= src qcms layers harfbuzz/src ots/src thebes src/thebes
 
 ifdef BUILD_STATIC_LIBS
 DIRS		+= ycbcr
 endif
 
 ifdef MOZ_IPC
diff --git a/layout/build/Makefile.in b/layout/build/Makefile.in
--- a/layout/build/Makefile.in
+++ b/layout/build/Makefile.in
@@ -54,22 +54,17 @@ MODULE		= layout
 LIBRARY_NAME	= gklayout
 EXPORT_LIBRARY = 1
 IS_COMPONENT	= 1
 MODULE_NAME	= nsLayoutModule
 GRE_MODULE	= 1
 LIBXUL_LIBRARY	= 1
 
 ifndef MOZ_ENABLE_LIBXUL
-EXTRA_DSO_LIBS	= gkgfx
-
-ifneq ($(OS_ARCH)_$(OS_TEST),Linux_x86_64)
-EXTRA_DSO_LIBS += angle
-endif
-
+EXTRA_DSO_LIBS	= gkgfx angle
 endif
 
 EXTRA_DSO_LIBS	+= thebes ycbcr
 
 
 CPPSRCS		= \
 		nsLayoutModule.cpp \
 		nsContentDLF.cpp \
diff --git a/toolkit/library/libxul-config.mk b/toolkit/library/libxul-config.mk
--- a/toolkit/library/libxul-config.mk
+++ b/toolkit/library/libxul-config.mk
@@ -297,22 +297,17 @@ ifneq (,$(filter beos windows os2 mac co
 DEFINES += -DICON_DECODER
 COMPONENT_LIBS += imgicon
 endif
 
 ifeq ($(MOZ_WIDGET_TOOLKIT),android)
 COMPONENT_LIBS += widget_android
 endif
 
-STATIC_LIBS += thebes ycbcr
-
-ifneq ($(OS_ARCH)_$(OS_TEST),Linux_x86_64)
-STATIC_LIBS += angle
-endif
-
+STATIC_LIBS += thebes ycbcr angle
 COMPONENT_LIBS += gkgfxthebes
 
 ifeq (windows,$(MOZ_WIDGET_TOOLKIT))
 COMPONENT_LIBS += gkwidget
 endif
 ifeq (beos,$(MOZ_WIDGET_TOOLKIT))
 COMPONENT_LIBS += widget_beos
 endif
