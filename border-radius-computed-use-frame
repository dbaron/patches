From: L. David Baron <dbaron@dbaron.org>

Fix border-radius computed style code to reflect clamping adjustments that we make to border radius.  (Bug 595651)  r=bzbarsky  a2.0=blocking2.0:betaN

diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -2078,38 +2078,38 @@ nsComputedDOMStyle::DoGetBorderTopColors
 {
   return GetBorderColorsFor(NS_SIDE_TOP, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::DoGetBorderBottomLeftRadius(nsIDOMCSSValue** aValue)
 {
   return GetEllipseRadii(GetStyleBorder()->mBorderRadius,
-                         NS_CORNER_BOTTOM_LEFT, aValue);
+                         NS_CORNER_BOTTOM_LEFT, PR_TRUE, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::DoGetBorderBottomRightRadius(nsIDOMCSSValue** aValue)
 {
   return GetEllipseRadii(GetStyleBorder()->mBorderRadius,
-                         NS_CORNER_BOTTOM_RIGHT, aValue);
+                         NS_CORNER_BOTTOM_RIGHT, PR_TRUE, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::DoGetBorderTopLeftRadius(nsIDOMCSSValue** aValue)
 {
   return GetEllipseRadii(GetStyleBorder()->mBorderRadius,
-                         NS_CORNER_TOP_LEFT, aValue);
+                         NS_CORNER_TOP_LEFT, PR_TRUE, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::DoGetBorderTopRightRadius(nsIDOMCSSValue** aValue)
 {
   return GetEllipseRadii(GetStyleBorder()->mBorderRadius,
-                         NS_CORNER_TOP_RIGHT, aValue);
+                         NS_CORNER_TOP_RIGHT, PR_TRUE, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::DoGetBorderWidth(nsIDOMCSSValue** aValue)
 {
   // return null per spec.
   *aValue = nsnull;
 
@@ -2269,38 +2269,38 @@ nsComputedDOMStyle::DoGetOutlineOffset(n
   NS_ADDREF(*aValue = val);
   return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::DoGetOutlineRadiusBottomLeft(nsIDOMCSSValue** aValue)
 {
   return GetEllipseRadii(GetStyleOutline()->mOutlineRadius,
-                         NS_CORNER_BOTTOM_LEFT, aValue);
+                         NS_CORNER_BOTTOM_LEFT, PR_FALSE, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::DoGetOutlineRadiusBottomRight(nsIDOMCSSValue** aValue)
 {
   return GetEllipseRadii(GetStyleOutline()->mOutlineRadius,
-                         NS_CORNER_BOTTOM_RIGHT, aValue);
+                         NS_CORNER_BOTTOM_RIGHT, PR_FALSE, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::DoGetOutlineRadiusTopLeft(nsIDOMCSSValue** aValue)
 {
   return GetEllipseRadii(GetStyleOutline()->mOutlineRadius,
-                         NS_CORNER_TOP_LEFT, aValue);
+                         NS_CORNER_TOP_LEFT, PR_FALSE, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::DoGetOutlineRadiusTopRight(nsIDOMCSSValue** aValue)
 {
   return GetEllipseRadii(GetStyleOutline()->mOutlineRadius,
-                         NS_CORNER_TOP_RIGHT, aValue);
+                         NS_CORNER_TOP_RIGHT, PR_FALSE, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::DoGetOutlineColor(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
@@ -2320,37 +2320,44 @@ nsComputedDOMStyle::DoGetOutlineColor(ns
 
   NS_ADDREF(*aValue = val);
   return NS_OK;
 }
 
 nsresult
 nsComputedDOMStyle::GetEllipseRadii(const nsStyleCorners& aRadius,
                                     PRUint8 aFullCorner,
+                                    PRBool aIsBorder, // else outline
                                     nsIDOMCSSValue** aValue)
 {
-  nsStyleCoord radiusX
-    = aRadius.Get(NS_FULL_TO_HALF_CORNER(aFullCorner, PR_FALSE));
-  nsStyleCoord radiusY
-    = aRadius.Get(NS_FULL_TO_HALF_CORNER(aFullCorner, PR_TRUE));
-
-  if (mInnerFrame) {
-    // We need to convert to absolute coordinates before doing the
-    // equality check below.
-    nscoord v;
-
-    v = StyleCoordToNSCoord(radiusX,
-                            &nsComputedDOMStyle::GetFrameBorderRectWidth,
-                            0, PR_TRUE);
-    radiusX.SetCoordValue(v);
-
-    v = StyleCoordToNSCoord(radiusY,
-                            &nsComputedDOMStyle::GetFrameBorderRectHeight,
-                            0, PR_TRUE);
-    radiusY.SetCoordValue(v);
+  nsStyleCoord radiusX, radiusY;
+  if (mInnerFrame && aIsBorder) {
+    nscoord radii[8];
+    mInnerFrame->GetBorderRadii(radii);
+    radiusX.SetCoordValue(radii[NS_FULL_TO_HALF_CORNER(aFullCorner, PR_FALSE)]);
+    radiusY.SetCoordValue(radii[NS_FULL_TO_HALF_CORNER(aFullCorner, PR_TRUE)]);
+  } else {
+    radiusX = aRadius.Get(NS_FULL_TO_HALF_CORNER(aFullCorner, PR_FALSE));
+    radiusY = aRadius.Get(NS_FULL_TO_HALF_CORNER(aFullCorner, PR_TRUE));
+
+    if (mInnerFrame) {
+      // We need to convert to absolute coordinates before doing the
+      // equality check below.
+      nscoord v;
+
+      v = StyleCoordToNSCoord(radiusX,
+                              &nsComputedDOMStyle::GetFrameBorderRectWidth,
+                              0, PR_TRUE);
+      radiusX.SetCoordValue(v);
+
+      v = StyleCoordToNSCoord(radiusY,
+                              &nsComputedDOMStyle::GetFrameBorderRectHeight,
+                              0, PR_TRUE);
+      radiusY.SetCoordValue(v);
+    }
   }
 
   // for compatibility, return a single value if X and Y are equal
   if (radiusX == radiusY) {
     nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
     NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
     SetValueToCoord(val, radiusX, PR_TRUE);
diff --git a/layout/style/nsComputedDOMStyle.h b/layout/style/nsComputedDOMStyle.h
--- a/layout/style/nsComputedDOMStyle.h
+++ b/layout/style/nsComputedDOMStyle.h
@@ -120,16 +120,17 @@ private:
   const nsStyle##name_ * GetStyle##name_() {                            \
     return mStyleContextHolder->GetStyle##name_();                      \
   }
 #include "nsStyleStructList.h"
 #undef STYLE_STRUCT
 
   nsresult GetEllipseRadii(const nsStyleCorners& aRadius,
                            PRUint8 aFullCorner,
+                           PRBool aIsBorder, // else outline
                            nsIDOMCSSValue** aValue);
 
   nsresult GetOffsetWidthFor(mozilla::css::Side aSide, nsIDOMCSSValue** aValue);
 
   nsresult GetAbsoluteOffset(mozilla::css::Side aSide, nsIDOMCSSValue** aValue);
 
   nsresult GetRelativeOffset(mozilla::css::Side aSide, nsIDOMCSSValue** aValue);
 
diff --git a/layout/style/test/test_computed_style.html b/layout/style/test/test_computed_style.html
--- a/layout/style/test/test_computed_style.html
+++ b/layout/style/test/test_computed_style.html
@@ -69,12 +69,53 @@ var noframe_container = document.getElem
   is(cs.MozOutlineRadiusBottomright, "5px 3px",
      "computed value of px outline-radius, without frame");
   is(cs.MozOutlineRadiusBottomleft, "1.5625% 3.125%",
      "computed value of % outline-radius, without frame");
 
   p.parentNode.removeChild(p);
 })();
 
+(function test_bug_595651() {
+  // Test that clamping of border-radius is reflected in computed style.
+  var p = document.createElement("p");
+  p.setAttribute("style", "width: 190px; height: 90px; border: 5px solid;");
+  p.style.borderRadius = "1000px";
+  var cs = getComputedStyle(p, "");
+
+  frame_container.appendChild(p);
+  is(cs.borderTopLeftRadius, "50px",
+     "computed value of clamped border radius (top left)");
+  is(cs.borderTopRightRadius, "50px",
+     "computed value of clamped border radius (top right)");
+  is(cs.borderBottomRightRadius, "50px",
+     "computed value of clamped border radius (bottom right)");
+  is(cs.borderBottomLeftRadius, "50px",
+     "computed value of clamped border radius (bottom left)");
+
+  p.style.overflowY = "scroll";
+  is(cs.borderTopLeftRadius, "50px",
+     "computed value of clamped border radius (top left, overflow-y)");
+  is(cs.borderTopRightRadius, "5px",
+     "computed value of clamped border radius (top right, overflow-y)");
+  is(cs.borderBottomRightRadius, "5px",
+     "computed value of clamped border radius (bottom right, overflow-y)");
+  is(cs.borderBottomLeftRadius, "50px",
+     "computed value of clamped border radius (bottom left, overflow-y)");
+
+  p.style.overflowY = "hidden";
+  p.style.overflowX = "scroll";
+  is(cs.borderTopLeftRadius, "50px",
+     "computed value of clamped border radius (top left, overflow-x)");
+  is(cs.borderTopRightRadius, "50px",
+     "computed value of clamped border radius (top right, overflow-x)");
+  is(cs.borderBottomRightRadius, "5px",
+     "computed value of clamped border radius (bottom right, overflow-x)");
+  is(cs.borderBottomLeftRadius, "5px",
+     "computed value of clamped border radius (bottom left, overflow-x)");
+
+  p.parentNode.removeChild(p);
+})();
+
 </script>
 </pre>
 </body>
 </html>
diff --git a/layout/style/test/test_transitions_per_property.html b/layout/style/test/test_transitions_per_property.html
--- a/layout/style/test/test_transitions_per_property.html
+++ b/layout/style/test/test_transitions_per_property.html
@@ -352,36 +352,36 @@ function test_length_percent_calc_transi
   div.style.setProperty("-moz-transition-property", prop, "");
   div.style.setProperty(prop, "200px", "");
   var v2v = cs.getPropertyValue(prop);
   is(any_unit_to_num(v2v) * 8, 5*a + 3*b + 4*c,
      "interpolation between length and percent for " + prop + ": '"
      + v2v + "'");
 
   div.style.setProperty("-moz-transition-property", "none", "");
-  div.style.setProperty(prop, "-moz-calc(100% + 200px)", "");
+  div.style.setProperty(prop, "-moz-calc(25% + 100px)", "");
   v1v = cs.getPropertyValue(prop);
-  is(any_unit_to_num(v1v), b + 2*c,
+  is(any_unit_to_num(v1v) * 4, b + 4*c,
      "computed value before transition for " + prop + ": '" + v1v + "'");
   div.style.setProperty("-moz-transition-property", prop, "");
-  div.style.setProperty(prop, "300%", "");
+  div.style.setProperty(prop, "75%", "");
   v2v = cs.getPropertyValue(prop);
-  is(any_unit_to_num(v2v) * 2, -1*a + 3*b + 3*c,
+  is(any_unit_to_num(v2v) * 8, 5*a + 3*b + 6*c,
      "interpolation between calc() and percent for " + prop + ": '" +
      v2v + "'");
 
   div.style.setProperty("-moz-transition-property", "none", "");
-  div.style.setProperty(prop, "400px", "");
+  div.style.setProperty(prop, "50px", "");
   v1v = cs.getPropertyValue(prop);
-  is(any_unit_to_num(v1v), 4*c,
+  is(any_unit_to_num(v1v) * 2, c,
      "computed value before transition for " + prop + ": '" + v1v + "'");
   div.style.setProperty("-moz-transition-property", prop, "");
-  div.style.setProperty(prop, "-moz-calc(200% + 200px)", "");
+  div.style.setProperty(prop, "-moz-calc(25% + 25px)", "");
   v2v = cs.getPropertyValue(prop);
-  is(any_unit_to_num(v2v) * 2, a + b + 7*c,
+  is(any_unit_to_num(v2v) * 16, 15 * a + b + 7*c,
      "interpolation between length and calc() for " + prop + ": '" +
      v2v + "'");
 }
 
 function test_color_transition(prop) {
   div.style.setProperty("-moz-transition-property", "none", "");
   div.style.setProperty(prop, "rgb(255, 28, 0)", "");
   is(cs.getPropertyValue(prop), "rgb(255, 28, 0)",
