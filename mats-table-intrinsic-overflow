From: Mats Palmgren <mats@mozilla.com>, L. David Baron <dbaron@dbaron.org>

Bug 1227493 - Handle nscoord overflow more reliably (but less frequently) in auto-layout table intrtinsic width calculation.

diff --git a/layout/generic/crashtests/crashtests.list b/layout/generic/crashtests/crashtests.list
--- a/layout/generic/crashtests/crashtests.list
+++ b/layout/generic/crashtests/crashtests.list
@@ -600,17 +600,17 @@ load 1221112-2.html
 load 1221874-1.html
 load 1222783.xhtml
 load 1223568-1.html
 load 1223568-2.html
 load 1224230-1.html
 pref(layout.css.grid.enabled,true) load 1225118.html
 pref(layout.css.grid.enabled,true) load 1225376.html
 pref(layout.css.grid.enabled,true) load 1225592.html
-asserts(4) load 1227493-1.html
+asserts(1) load 1227493-1.html
 load 1229437-1.html
 load 1229437-2.html
 load details-containing-only-text.html
 load details-display-none-summary-1.html
 load details-display-none-summary-2.html
 load details-display-none-summary-3.html
 load details-open-overflow-auto.html
 load details-open-overflow-hidden.html
diff --git a/layout/tables/BasicTableLayoutStrategy.cpp b/layout/tables/BasicTableLayoutStrategy.cpp
--- a/layout/tables/BasicTableLayoutStrategy.cpp
+++ b/layout/tables/BasicTableLayoutStrategy.cpp
@@ -441,33 +441,32 @@ BasicTableLayoutStrategy::ComputeIntrins
         if (!colFrame) {
             NS_ERROR("column frames out of sync with cell map");
             continue;
         }
         if (mTableFrame->ColumnHasCellSpacingBefore(col)) {
             add += mTableFrame->GetColSpacing(col - 1);
         }
         min += colFrame->GetMinCoord();
-        pref = NSCoordSaturatingAdd(pref, colFrame->GetPrefCoord());
+        pref += colFrame->GetPrefCoord();
 
         // Percentages are of the table, so we have to reverse them for
         // intrinsic isizes.
         float p = colFrame->GetPrefPercent();
         if (p > 0.0f) {
             nscoord colPref = colFrame->GetPrefCoord();
             nscoord new_small_pct_expand = 
                 (colPref == nscoord_MAX ?
                  nscoord_MAX : nscoord(float(colPref) / p));
             if (new_small_pct_expand > max_small_pct_pref) {
                 max_small_pct_pref = new_small_pct_expand;
             }
             pct_total += p;
         } else {
-            nonpct_pref_total = NSCoordSaturatingAdd(nonpct_pref_total, 
-                                                     colFrame->GetPrefCoord());
+            nonpct_pref_total += colFrame->GetPrefCoord();
         }
     }
 
     nscoord pref_pct_expand = pref;
 
     // Account for small percentages expanding the preferred isize of
     // *other* columns.
     if (max_small_pct_pref > pref_pct_expand) {
@@ -493,23 +492,23 @@ BasicTableLayoutStrategy::ComputeIntrins
              nscoord(float(nonpct_pref_total) / (1.0f - pct_total)));
         if (large_pct_pref > pref_pct_expand)
             pref_pct_expand = large_pct_pref;
     }
 
     // border-spacing isn't part of the basis for percentages
     if (colCount > 0) {
         min += add;
-        pref = NSCoordSaturatingAdd(pref, add);
-        pref_pct_expand = NSCoordSaturatingAdd(pref_pct_expand, add);
+        pref += add;
+        pref_pct_expand += add;
     }
 
-    mMinISize = min;
-    mPrefISize = pref;
-    mPrefISizePctExpand = pref_pct_expand;
+    mMinISize = std::max(0, std::min(min, nscoord_MAX));
+    mPrefISize = std::max(0, std::min(pref, nscoord_MAX));
+    mPrefISizePctExpand = std::max(0, std::min(pref_pct_expand, nscoord_MAX));
 }
 
 /* virtual */ void
 BasicTableLayoutStrategy::MarkIntrinsicISizesDirty()
 {
     mMinISize = NS_INTRINSIC_WIDTH_UNKNOWN;
     mPrefISize = NS_INTRINSIC_WIDTH_UNKNOWN;
     mPrefISizePctExpand = NS_INTRINSIC_WIDTH_UNKNOWN;
