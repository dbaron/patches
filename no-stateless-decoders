From: L. David Baron <dbaron@dbaron.org>

Remove the concept of stateless unicode decoders since they now all have state.  (Bug 530328)

diff --git a/intl/uconv/src/nsCharsetConverterManager.cpp b/intl/uconv/src/nsCharsetConverterManager.cpp
--- a/intl/uconv/src/nsCharsetConverterManager.cpp
+++ b/intl/uconv/src/nsCharsetConverterManager.cpp
@@ -58,48 +58,36 @@
 
 // just for CONTRACTIDs
 #include "nsCharsetConverterManager.h"
 
 #ifdef MOZ_USE_NATIVE_UCONV
 #include "nsNativeUConvService.h"
 #endif
 
-// Pattern of cached, commonly used, single byte decoder
-#define NS_1BYTE_CODER_PATTERN "ISO-8859"
-#define NS_1BYTE_CODER_PATTERN_LEN 8
-
 // Class nsCharsetConverterManager [implementation]
 
 NS_IMPL_THREADSAFE_ISUPPORTS1(nsCharsetConverterManager,
                               nsICharsetConverterManager)
 
 nsCharsetConverterManager::nsCharsetConverterManager() 
   : mDataBundle(NULL)
   , mTitleBundle(NULL)
-  , mDecoderHashMutex("nsCharsetConverterManager mDecoderHashMutex")
 {
 #ifdef MOZ_USE_NATIVE_UCONV
   mNativeUC = do_GetService(NS_NATIVE_UCONV_SERVICE_CONTRACT_ID);
 #endif
 }
 
 nsCharsetConverterManager::~nsCharsetConverterManager() 
 {
   NS_IF_RELEASE(mDataBundle);
   NS_IF_RELEASE(mTitleBundle);
 }
 
-nsresult nsCharsetConverterManager::Init()
-{
-  if (!mDecoderHash.Init())
-    return NS_ERROR_OUT_OF_MEMORY;
-  return NS_OK;
-}
-
 nsresult nsCharsetConverterManager::RegisterConverterManagerData()
 {
   nsresult rv;
   nsCOMPtr<nsICategoryManager> catman = do_GetService(NS_CATEGORYMANAGER_CONTRACTID, &rv);
   if (NS_FAILED(rv))
     return rv;
 
   RegisterConverterCategory(catman, NS_TITLE_BUNDLE_CATEGORY,
@@ -260,33 +248,18 @@ nsCharsetConverterManager::GetUnicodeDec
     }
   }
 #endif
   nsresult rv = NS_OK;
 
   NS_NAMED_LITERAL_CSTRING(contractbase, NS_UNICODEDECODER_CONTRACTID_BASE);
   nsDependentCString src(aSrc);
   
-  if (!strncmp(aSrc, NS_1BYTE_CODER_PATTERN, NS_1BYTE_CODER_PATTERN_LEN))
-  {
-    mozilla::MutexAutoLock autoLock(mDecoderHashMutex);
-    // Single byte decoders don't hold state. Optimize by using a service, and
-    // cache it in our hash to avoid repeated trips through the service manager.
-    if (!mDecoderHash.Get(aSrc, getter_AddRefs(decoder))) {
-      decoder = do_GetService(PromiseFlatCString(contractbase + src).get(),
+  decoder = do_CreateInstance(PromiseFlatCString(contractbase + src).get(),
                               &rv);
-      if (NS_SUCCEEDED(rv))
-        mDecoderHash.Put(aSrc, decoder);
-    }
-  }
-  else
-  {
-    decoder = do_CreateInstance(PromiseFlatCString(contractbase + src).get(),
-                                &rv);
-  }
   NS_ENSURE_SUCCESS(rv, NS_ERROR_UCONV_NOCONV);
 
   decoder.forget(aResult);
   return rv;
 }
 
 nsresult 
 nsCharsetConverterManager::GetList(const nsACString& aCategory,
diff --git a/intl/uconv/src/nsCharsetConverterManager.h b/intl/uconv/src/nsCharsetConverterManager.h
--- a/intl/uconv/src/nsCharsetConverterManager.h
+++ b/intl/uconv/src/nsCharsetConverterManager.h
@@ -52,30 +52,25 @@ class nsCharsetConverterManager : public
   NS_DECL_ISUPPORTS
   NS_DECL_NSICHARSETCONVERTERMANAGER
 
 public:
 
   nsCharsetConverterManager();
   virtual ~nsCharsetConverterManager();
 
-  nsresult Init();
-
 private:
 
   nsIStringBundle * mDataBundle;
   nsIStringBundle * mTitleBundle;
 
 #ifdef MOZ_USE_NATIVE_UCONV
   nsCOMPtr<nsINativeUConvService> mNativeUC;
 #endif
 
-  nsInterfaceHashtable<nsCharPtrHashKey, nsIUnicodeDecoder> mDecoderHash;
-  mozilla::Mutex                                            mDecoderHashMutex;
-
   nsresult LoadExtensibleBundle(const char * aRegistryKey, 
       nsIStringBundle ** aResult);
 
   static nsresult RegisterConverterCategory(nsICategoryManager*,
                                             const char* aCategory,
                                             const char* aURL);
 
   nsresult GetBundleValue(nsIStringBundle * aBundle,
diff --git a/intl/uconv/src/nsUConvModule.cpp b/intl/uconv/src/nsUConvModule.cpp
--- a/intl/uconv/src/nsUConvModule.cpp
+++ b/intl/uconv/src/nsUConvModule.cpp
@@ -605,17 +605,17 @@ nsConverterManagerDataRegister(nsICompon
                                 nsIFile* aPath,
                                 const char *aLocation,
                                 const char *aType,
                                 const nsModuleComponentInfo* aInfo)
 {
   return nsCharsetConverterManager::RegisterConverterManagerData();
 }
 
-NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsCharsetConverterManager, Init)
+NS_GENERIC_FACTORY_CONSTRUCTOR(nsCharsetConverterManager)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsTextToSubURI)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsUTF8ConverterService)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsCharsetAlias2)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsConverterInputStream)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsConverterOutputStream)
 NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsPlatformCharset, Init)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsScriptableUnicodeConverter)
 
