From: L. David Baron <dbaron@dbaron.org>

Remove separate font size preferences for monospace and non-monospace fonts.

diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -1909,14 +1909,63 @@ nsRuleNode::AdjustLogicalBoxProp(nsStyle
   }                                                                           \
                                                                               \
   return data_;
-  
-/* static */ void
-nsRuleNode::SetFont(nsPresContext* aPresContext, nsStyleContext* aContext,
-                    nscoord aMinFontSize,
-                    PRBool aIsGeneric, const nsRuleDataFont& aFontData,
-                    const nsFont& aDefaultFont, const nsStyleFont* aParentFont,
-                    nsStyleFont* aFont, PRBool& aInherited)
-{
+
+
+static PRBool ExtractGeneric(const nsString& aFamily, PRBool aGeneric,
+                             void *aData)
+{
+  nsAutoString *data = static_cast<nsAutoString*>(aData);
+
+  if (aGeneric) {
+    *data = aFamily;
+    return PR_FALSE; // stop enumeration
+  }
+  return PR_TRUE;
+}
+
+const nsStyleStruct* 
+nsRuleNode::ComputeFontData(nsStyleStruct* aStartStruct,
+                            const nsRuleDataStruct& aData, 
+                            nsStyleContext* aContext, 
+                            nsRuleNode* aHighestNode,
+                            const RuleDetail aRuleDetail, PRBool aInherited)
+{
+  COMPUTE_START_INHERITED(Font, (mPresContext), font, parentFont,
+                          Font, fontData)
+
+  // NOTE:  The |aRuleDetail| passed in is a little bit conservative due
+  // to the -moz-system-font property.  We really don't need to consider
+  // it here in determining whether to cache in the rule tree.  However,
+  // we do need to consider it in WalkRuleTree when deciding whether to
+  // walk further up the tree.  So this means that when the font struct
+  // is fully specified using *longhand* properties (excluding
+  // -moz-system-font), we won't cache in the rule tree even though we
+  // could.  However, it's pretty unlikely authors will do that
+  // (although there is a pretty good chance they'll fully specify it
+  // using the 'font' shorthand).
+
+  // See if there is a minimum font-size constraint to honor
+  nscoord minimumFontSize = 
+    mPresContext->GetCachedIntPref(kPresContext_MinimumFontSize);
+
+  if (minimumFontSize < 0)
+    minimumFontSize = 0;
+
+  PRBool useDocumentFonts =
+    mPresContext->GetCachedBoolPref(kPresContext_UseDocumentFonts);
+
+  // See if we are in the chrome
+  // We only need to know this to determine if we have to use the
+  // document fonts (overriding the useDocumentFonts flag), or to
+  // determine if we have to override the minimum font-size constraint.
+  if ((!useDocumentFonts || minimumFontSize > 0) && mPresContext->IsChrome()) {
+    // if we are not using document fonts, but this is a XUL document,
+    // then we use the document fonts anyway
+    useDocumentFonts = PR_TRUE;
+    minimumFontSize = 0;
+  }
+
+
   const nsFont* defaultVariableFont =
     aPresContext->GetDefaultFont(kPresContext_DefaultVariableFont_ID);
 
@@ -1984,11 +2033,63 @@ nsRuleNode::SetFont(nsPresContext* aPres
     systemFont = *defaultVariableFont;
   }
 
-
   // font-family: string list, enum, inherit
   NS_ASSERTION(eCSSUnit_Enumerated != aFontData.mFamily.GetUnit(),
                "system fonts should not be in mFamily anymore");
   if (eCSSUnit_String == aFontData.mFamily.GetUnit()) {
+    // Figure out if we are a generic font
+    PRUint8 generic = kGenericFont_NONE;
+    fontData.mFamily.GetStringValue(font->mFont.name);
+    // XXXldb Do we want to extract the generic for this if it's not only a
+    // generic?
+    nsFont::GetGenericID(font->mFont.name, &generic);
+
+    // If we aren't allowed to use document fonts, then we are only entitled
+    // to use the user's default variable-width font and fixed-width font
+    if (!useDocumentFonts) {
+      // Extract the generic from the specified font family...
+      nsAutoString genericName;
+      if (!font->mFont.EnumerateFamilies(ExtractGeneric, &genericName)) {
+        // The specified font had a generic family.
+        font->mFont.name = genericName;
+        nsFont::GetGenericID(genericName, &generic);
+
+        // ... and only use it if it's -moz-fixed or monospace
+        if (generic != kGenericFont_moz_fixed &&
+            generic != kGenericFont_monospace) {
+          font->mFont.name.Truncate();
+          generic = kGenericFont_NONE;
+        }
+      } else {
+        // The specified font did not have a generic family.
+        font->mFont.name.Truncate();
+        generic = kGenericFont_NONE;
+      }
+    }
+
+
+    // Now compute our font struct
+    const nsFont* defaultFont;
+    if (generic == kGenericFont_NONE) {
+      // continue the normal processing
+      // our default font is the user's default (serif or sans-serif)
+      defaultFont =
+        mPresContext->GetDefaultFont(kPresContext_DefaultVariableFont_ID);
+    }
+    else {
+      // re-calculate the font as a generic font
+      defaultFont = aPresContext->GetDefaultFont(aGenericFontID);
+    }
+    font->mFlags &= ~NS_STYLE_FONT_FACE_MASK;
+    if (generic != kGenericFont_NONE)
+      font->mFlags |= generic;
+
+
+
+
+
+
+
     // set the correct font if we are using DocumentFonts OR we are overriding for XUL
     // MJA: bug 31816
     if (!aIsGeneric) {
@@ -2007,17 +2108,22 @@ nsRuleNode::SetFont(nsPresContext* aPres
     aFont->mFont.name = systemFont.name;
     aFont->mFont.familyNameQuirks = PR_FALSE;
     aFont->mFont.systemFont = PR_TRUE;
+    aFont->mFlags &= ~NS_STYLE_FONT_FACE_MASK;
   }
   else if (eCSSUnit_Inherit == aFontData.mFamily.GetUnit()) {
     aInherited = PR_TRUE;
     aFont->mFont.name = aParentFont->mFont.name;
     aFont->mFont.familyNameQuirks = aParentFont->mFont.familyNameQuirks;
     aFont->mFont.systemFont = aParentFont->mFont.systemFont;
+    aFont->mFlags &= ~NS_STYLE_FONT_FACE_MASK;
+    aFont->mFlags |= aParentFont->mFlags;
   }
   else if (eCSSUnit_Initial == aFontData.mFamily.GetUnit()) {
     aFont->mFont.name = defaultVariableFont->name;
     aFont->mFont.familyNameQuirks = PR_FALSE;
     aFont->mFont.systemFont = defaultVariableFont->systemFont;
+    aFont->mFlags &= ~NS_STYLE_FONT_FACE_MASK;
+    // XXX Set mFlags correctly!
   }
 
   // font-style: enum, normal, inherit
@@ -2182,203 +2288,6 @@ nsRuleNode::SetFont(nsPresContext* aPres
   else if (eCSSUnit_Initial == aFontData.mSizeAdjust.GetUnit()) {
     aFont->mFont.sizeAdjust = 0.0f;
   }
-}
-
-// SetGenericFont:
-//  - backtrack to an ancestor with the same generic font name (possibly
-//    up to the root where default values come from the presentation context)
-//  - re-apply cascading rules from there without caching intermediate values
-/* static */ void
-nsRuleNode::SetGenericFont(nsPresContext* aPresContext,
-                           nsStyleContext* aContext,
-                           PRUint8 aGenericFontID, nscoord aMinFontSize,
-                           nsStyleFont* aFont)
-{
-  // walk up the contexts until a context with the desired generic font
-  nsAutoVoidArray contextPath;
-  contextPath.AppendElement(aContext);
-  nsStyleContext* higherContext = aContext->GetParent();
-  while (higherContext) {
-    if (higherContext->GetStyleFont()->mFlags & aGenericFontID) {
-      // done walking up the higher contexts
-      break;
-    }
-    contextPath.AppendElement(higherContext);
-    higherContext = higherContext->GetParent();
-  }
-
-  // re-apply the cascading rules, starting from the higher context
-
-  // If we stopped earlier because we reached the root of the style tree,
-  // we will start with the default generic font from the presentation
-  // context. Otherwise we start with the higher context.
-  const nsFont* defaultFont = aPresContext->GetDefaultFont(aGenericFontID);
-  nsStyleFont parentFont(*defaultFont);
-  parentFont.mSize = parentFont.mFont.size
-      = nsStyleFont::ZoomText(aPresContext, parentFont.mSize);
-  if (higherContext) {
-    const nsStyleFont* tmpFont = higherContext->GetStyleFont();
-    parentFont.mFlags = tmpFont->mFlags;
-    parentFont.mFont = tmpFont->mFont;
-    parentFont.mSize = tmpFont->mSize;
-  }
-  aFont->mFlags = parentFont.mFlags;
-  aFont->mFont = parentFont.mFont;
-  aFont->mSize = parentFont.mSize;
-
-  PRBool dummy;
-  PRUint32 fontBit = nsCachedStyleData::GetBitForSID(eStyleStruct_Font);
-  
-  for (PRInt32 i = contextPath.Count() - 1; i >= 0; --i) {
-    nsStyleContext* context = (nsStyleContext*)contextPath[i];
-    nsRuleDataFont fontData; // Declare a struct with null CSS values.
-    nsRuleData ruleData(eStyleStruct_Font, aPresContext, context);
-    ruleData.mFontData = &fontData;
-
-    // Trimmed down version of ::WalkRuleTree() to re-apply the style rules
-    // Note that we *do* need to do this for our own data, since what is
-    // in |fontData| in ComputeFontData is only for the rules below
-    // aStartStruct.
-    for (nsRuleNode* ruleNode = context->GetRuleNode(); ruleNode;
-         ruleNode = ruleNode->GetParent()) {
-      if (ruleNode->mNoneBits & fontBit)
-        // no more font rules on this branch, get out
-        break;
-
-      nsIStyleRule *rule = ruleNode->GetRule();
-      if (rule) {
-        ruleData.mLevel = ruleNode->GetLevel();
-        ruleData.mIsImportantRule = ruleNode->IsImportantRule();
-        rule->MapRuleInfoInto(&ruleData);
-      }
-    }
-
-    // Compute the delta from the information that the rules specified
-    if (i != 0)
-      fontData.mFamily.Reset(); // avoid unnecessary operations in SetFont()
-
-    nsRuleNode::SetFont(aPresContext, context, aMinFontSize,
-                        PR_TRUE, fontData, *defaultFont,
-                        &parentFont, aFont, dummy);
-
-    // XXX Not sure if we need to do this here
-    // If we have a post-resolve callback, handle that now.
-    if (ruleData.mPostResolveCallback)
-      (ruleData.mPostResolveCallback)((nsStyleStruct*)aFont, &ruleData);
-
-    parentFont.mFlags = aFont->mFlags;
-    parentFont.mFont = aFont->mFont;
-    parentFont.mSize = aFont->mSize;
-  }
-}
-
-static PRBool ExtractGeneric(const nsString& aFamily, PRBool aGeneric,
-                             void *aData)
-{
-  nsAutoString *data = static_cast<nsAutoString*>(aData);
-
-  if (aGeneric) {
-    *data = aFamily;
-    return PR_FALSE; // stop enumeration
-  }
-  return PR_TRUE;
-}
-
-const nsStyleStruct* 
-nsRuleNode::ComputeFontData(nsStyleStruct* aStartStruct,
-                            const nsRuleDataStruct& aData, 
-                            nsStyleContext* aContext, 
-                            nsRuleNode* aHighestNode,
-                            const RuleDetail aRuleDetail, PRBool aInherited)
-{
-  COMPUTE_START_INHERITED(Font, (mPresContext), font, parentFont,
-                          Font, fontData)
-
-  // NOTE:  The |aRuleDetail| passed in is a little bit conservative due
-  // to the -moz-system-font property.  We really don't need to consider
-  // it here in determining whether to cache in the rule tree.  However,
-  // we do need to consider it in WalkRuleTree when deciding whether to
-  // walk further up the tree.  So this means that when the font struct
-  // is fully specified using *longhand* properties (excluding
-  // -moz-system-font), we won't cache in the rule tree even though we
-  // could.  However, it's pretty unlikely authors will do that
-  // (although there is a pretty good chance they'll fully specify it
-  // using the 'font' shorthand).
-
-  // See if there is a minimum font-size constraint to honor
-  nscoord minimumFontSize = 
-    mPresContext->GetCachedIntPref(kPresContext_MinimumFontSize);
-
-  if (minimumFontSize < 0)
-    minimumFontSize = 0;
-
-  PRBool useDocumentFonts =
-    mPresContext->GetCachedBoolPref(kPresContext_UseDocumentFonts);
-
-  // See if we are in the chrome
-  // We only need to know this to determine if we have to use the
-  // document fonts (overriding the useDocumentFonts flag), or to
-  // determine if we have to override the minimum font-size constraint.
-  if ((!useDocumentFonts || minimumFontSize > 0) && mPresContext->IsChrome()) {
-    // if we are not using document fonts, but this is a XUL document,
-    // then we use the document fonts anyway
-    useDocumentFonts = PR_TRUE;
-    minimumFontSize = 0;
-  }
-
-  // Figure out if we are a generic font
-  PRUint8 generic = kGenericFont_NONE;
-  // XXXldb What if we would have had a string if we hadn't been doing
-  // the optimization with a non-null aStartStruct?
-  if (eCSSUnit_String == fontData.mFamily.GetUnit()) {
-    fontData.mFamily.GetStringValue(font->mFont.name);
-    // XXXldb Do we want to extract the generic for this if it's not only a
-    // generic?
-    nsFont::GetGenericID(font->mFont.name, &generic);
-
-    // If we aren't allowed to use document fonts, then we are only entitled
-    // to use the user's default variable-width font and fixed-width font
-    if (!useDocumentFonts) {
-      // Extract the generic from the specified font family...
-      nsAutoString genericName;
-      if (!font->mFont.EnumerateFamilies(ExtractGeneric, &genericName)) {
-        // The specified font had a generic family.
-        font->mFont.name = genericName;
-        nsFont::GetGenericID(genericName, &generic);
-
-        // ... and only use it if it's -moz-fixed or monospace
-        if (generic != kGenericFont_moz_fixed &&
-            generic != kGenericFont_monospace) {
-          font->mFont.name.Truncate();
-          generic = kGenericFont_NONE;
-        }
-      } else {
-        // The specified font did not have a generic family.
-        font->mFont.name.Truncate();
-        generic = kGenericFont_NONE;
-      }
-    }
-  }
-
-  // Now compute our font struct
-  if (generic == kGenericFont_NONE) {
-    // continue the normal processing
-    // our default font is the user's default (serif or sans-serif)
-    const nsFont* defaultFont =
-      mPresContext->GetDefaultFont(kPresContext_DefaultVariableFont_ID);
-
-    nsRuleNode::SetFont(mPresContext, aContext, minimumFontSize, PR_FALSE,
-                        fontData, *defaultFont, parentFont, font, inherited);
-  }
-  else {
-    // re-calculate the font as a generic font
-    inherited = PR_TRUE;
-    nsRuleNode::SetGenericFont(mPresContext, aContext, generic,
-                               minimumFontSize, font);
-  }
-  // Set our generic font's bit to inform our descendants
-  font->mFlags &= ~NS_STYLE_FONT_FACE_MASK;
-  font->mFlags |= generic;
 
   COMPUTE_END_INHERITED(Font, font)
 }
