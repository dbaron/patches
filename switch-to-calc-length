From: L. David Baron <dbaron@dbaron.org>

Fix weird SetCoordToValue signature.

diff --git a/layout/style/nsStyleTransformMatrix.cpp b/layout/style/nsStyleTransformMatrix.cpp
--- a/layout/style/nsStyleTransformMatrix.cpp
+++ b/layout/style/nsStyleTransformMatrix.cpp
@@ -203,22 +203,22 @@ nsStyleTransformMatrix::operator *= (con
 /* op* is implemented in terms of op*=. */
 const nsStyleTransformMatrix
 nsStyleTransformMatrix::operator *(const nsStyleTransformMatrix &aOther) const
 {
   return nsStyleTransformMatrix(*this) *= aOther;
 }
 
 /* Helper function to fill in an nscoord with the specified nsCSSValue. */
-static void SetCoordToValue(const nsCSSValue &aValue,
-                            nsStyleContext* aContext,
-                            nsPresContext* aPresContext,
-                            PRBool &aCanStoreInRuleTree, nscoord &aOut)
+static nscoord CalcLength(const nsCSSValue &aValue,
+                          nsStyleContext* aContext,
+                          nsPresContext* aPresContext,
+                          PRBool &aCanStoreInRuleTree)
 {
-  aOut = nsRuleNode::CalcLength(aValue, aContext, aPresContext,
+  return nsRuleNode::CalcLength(aValue, aContext, aPresContext,
                                 aCanStoreInRuleTree);
 }
 
 /* Helper function to process a matrix entry. */
 static void ProcessMatrix(float aMain[4], nscoord aDelta[2],
                           float aX[2], float aY[2],
                           const nsCSSValue::Array* aData,
                           nsStyleContext* aContext,
@@ -234,40 +234,40 @@ static void ProcessMatrix(float aMain[4]
     aMain[index - 1] = aData->Item(index).GetFloatValue();
 
   /* For the fifth element, if it's a percentage, store it in aX[0].
    * Otherwise, it's a length that needs to go in aDelta[0]
    */
   if (aData->Item(5).GetUnit() == eCSSUnit_Percent)
     aX[0] = aData->Item(5).GetPercentValue();
   else
-    SetCoordToValue(aData->Item(5), aContext, aPresContext, aCanStoreInRuleTree,
-                    aDelta[0]);
+    aDelta[0] = CalcLength(aData->Item(5), aContext, aPresContext,
+                           aCanStoreInRuleTree);
 
   /* For the final element, if it's a percentage, store it in aY[1].
    * Otherwise, it's a length that needs to go in aDelta[1].
    */
   if (aData->Item(6).GetUnit() == eCSSUnit_Percent)
     aY[1] = aData->Item(6).GetPercentValue();
   else
-    SetCoordToValue(aData->Item(6), aContext, aPresContext, aCanStoreInRuleTree,
-                    aDelta[1]);
+    aDelta[1] = CalcLength(aData->Item(6), aContext, aPresContext,
+                           aCanStoreInRuleTree);
 }
 
 static void ProcessTranslatePart(nscoord& aOffset, float& aPercent,
                                  const nsCSSValue& aValue,
                                  nsStyleContext* aContext,
                                  nsPresContext* aPresContext,
                                  PRBool& aCanStoreInRuleTree)
 {
   if (aValue.GetUnit() == eCSSUnit_Percent) {
     aPercent = aValue.GetPercentValue();
   } else {
-    SetCoordToValue(aValue, aContext, aPresContext, aCanStoreInRuleTree,
-                    aOffset);
+    aOffset = CalcLength(aValue, aContext, aPresContext,
+                         aCanStoreInRuleTree);
   }
 }
 
 /* Helper function to process a translatex function. */
 static void ProcessTranslateX(nscoord aDelta[2], float aX[2],
                               const nsCSSValue::Array* aData,
                               nsStyleContext* aContext,
                               nsPresContext* aPresContext,
