From: L. David Baron <dbaron@dbaron.org>

Track whether nsStyleVisibility::mLanguage came from explicit information in the document.  (Bug 702121, patch 1)

diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -2936,16 +2936,17 @@ nsRuleNode::SetFont(nsPresContext* aPres
   // This is not a real CSS property, it is an HTML attribute mapped to CSS.
   const nsCSSValue* langValue = aRuleData->ValueForLang();
   if (eCSSUnit_Ident == langValue->GetUnit()) {
     nsAutoString lang;
     langValue->GetStringValue(lang);
 
     nsContentUtils::ASCIIToLower(lang);
     aFont->mLanguage = do_GetAtom(lang);
+    aFont->mExplicitLanguage = true;
   }
 
   const nsFont* defaultVariableFont =
     aPresContext->GetDefaultFont(kPresContext_DefaultVariableFont_ID,
                                  aFont->mLanguage);
 
   // -moz-system-font: enum (never inherit!)
   MOZ_STATIC_ASSERT(
diff --git a/layout/style/nsStyleStruct.cpp b/layout/style/nsStyleStruct.cpp
--- a/layout/style/nsStyleStruct.cpp
+++ b/layout/style/nsStyleStruct.cpp
@@ -84,40 +84,44 @@ static int safe_strcmp(const PRUnichar* 
 
 static nsChangeHint CalcShadowDifference(nsCSSShadowArray* lhs,
                                          nsCSSShadowArray* rhs);
 
 // --------------------
 // nsStyleFont
 //
 nsStyleFont::nsStyleFont(const nsFont& aFont, nsPresContext *aPresContext)
-  : mFont(aFont),
-    mGenericID(kGenericFont_NONE)
+  : mFont(aFont)
+  , mGenericID(kGenericFont_NONE)
+  , mExplicitLanguage(false)
 {
   MOZ_COUNT_CTOR(nsStyleFont);
   Init(aPresContext);
 }
 
 nsStyleFont::nsStyleFont(const nsStyleFont& aSrc)
   : mFont(aSrc.mFont)
   , mSize(aSrc.mSize)
   , mGenericID(aSrc.mGenericID)
   , mScriptLevel(aSrc.mScriptLevel)
+  , mExplicitLanguage(aSrc.mExplicitLanguage)
   , mScriptUnconstrainedSize(aSrc.mScriptUnconstrainedSize)
   , mScriptMinSize(aSrc.mScriptMinSize)
   , mScriptSizeMultiplier(aSrc.mScriptSizeMultiplier)
   , mLanguage(aSrc.mLanguage)
 {
   MOZ_COUNT_CTOR(nsStyleFont);
 }
 
 nsStyleFont::nsStyleFont(nsPresContext* aPresContext)
   // passing nullptr to GetDefaultFont make it use the doc language
-  : mFont(*(aPresContext->GetDefaultFont(kPresContext_DefaultVariableFont_ID, nullptr))),
-    mGenericID(kGenericFont_NONE)
+  : mFont(*(aPresContext->GetDefaultFont(kPresContext_DefaultVariableFont_ID,
+                                         nullptr)))
+  , mGenericID(kGenericFont_NONE)
+  , mExplicitLanguage(false)
 {
   MOZ_COUNT_CTOR(nsStyleFont);
   Init(aPresContext);
 }
 
 void
 nsStyleFont::Init(nsPresContext* aPresContext)
 {
@@ -132,16 +136,18 @@ nsStyleFont::Init(nsPresContext* aPresCo
   aPresContext->Document()->GetContentLanguage(language);
   language.StripWhitespace();
 
   // Content-Language may be a comma-separated list of language codes,
   // in which case the HTML5 spec says to treat it as unknown
   if (!language.IsEmpty() &&
       language.FindChar(PRUnichar(',')) == kNotFound) {
     mLanguage = do_GetAtom(language);
+    // NOTE:  This does *not* count as an explicit language; in other
+    // words, it doesn't trigger language-specific hyphenation.
   } else {
     // we didn't find a (usable) Content-Language, so we fall back
     // to whatever the presContext guessed from the charset
     mLanguage = aPresContext->GetLanguageFromCharset();
   }
 }
 
 void* 
@@ -156,17 +162,18 @@ void
 nsStyleFont::Destroy(nsPresContext* aContext) {
   this->~nsStyleFont();
   aContext->FreeToShell(sizeof(nsStyleFont), this);
 }
 
 nsChangeHint nsStyleFont::CalcDifference(const nsStyleFont& aOther) const
 {
   if (mSize != aOther.mSize ||
-      mLanguage != aOther.mLanguage) {
+      mLanguage != aOther.mLanguage ||
+      mExplicitLanguage != aOther.mExplicitLanguage) {
     return NS_STYLE_HINT_REFLOW;
   }
   return CalcFontDifference(mFont, aOther.mFont);
 }
 
 #ifdef DEBUG
 /* static */
 nsChangeHint nsStyleFont::MaxDifference()
diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -103,16 +103,20 @@ public:
                         // mFont.size should be used for display purposes
                         // while mSize is the value to return in
                         // getComputedStyle() for example.
   PRUint8 mGenericID;   // [inherited] generic CSS font family, if any;
                         // value is a kGenericFont_* constant, see nsFont.h.
 
   // MathML scriptlevel support
   PRInt8  mScriptLevel;          // [inherited]
+
+  // was mLanguage set based on a lang attribute in the document?
+  bool mExplicitLanguage;        // [inherited]
+
   // The value mSize would have had if scriptminsize had never been applied
   nscoord mScriptUnconstrainedSize;
   nscoord mScriptMinSize;        // [inherited] length
   float   mScriptSizeMultiplier; // [inherited]
   nsCOMPtr<nsIAtom> mLanguage;   // [inherited]
 };
 
 struct nsStyleGradientStop {
