From: L. David Baron <dbaron@dbaron.org>
Bug 1100741 - Add AutoAndroidLogFile class to produce a FILE* that goes to logcat on Android or Firefox OS.

diff --git a/xpcom/glue/nsCRTGlue.cpp b/xpcom/glue/nsCRTGlue.cpp
--- a/xpcom/glue/nsCRTGlue.cpp
+++ b/xpcom/glue/nsCRTGlue.cpp
@@ -16,16 +16,21 @@
 
 #ifdef XP_WIN
 #include <io.h>
 #include <windows.h>
 #endif
 
 #ifdef ANDROID
 #include <android/log.h>
+#include <unistd.h>
+#endif
+
+#ifdef MOZILLA_INTERNAL_API
+#include "nsString.h"
 #endif
 
 const char*
 NS_strspnp(const char* aDelims, const char* aStr)
 {
   const char* d;
   do {
     for (d = aDelims; *d != '\0'; ++d) {
@@ -378,9 +383,83 @@ fprintf_stderr(FILE* aFile, const char* 
   if (aFile == stderr) {
     vprintf_stderr(aFmt, args);
   } else {
     vfprintf(aFile, aFmt, args);
   }
   va_end(args);
 }
 
+#if defined(MOZILLA_INTERNAL_API) && defined(ANDROID)
 
+namespace mozilla {
+
+AutoAndroidLogFile::AutoAndroidLogFile(FILE* aFile)
+  : mFile(aFile)
+  , mReadPipe(-1)
+{
+  if (mFile != stderr) {
+    return;
+  }
+
+  int pipefd[2]; // read from [0], write to [1]
+  int success = pipe(pipefd);
+  if (success != 0) {
+    // Error: just give up write to stderr.
+    return;
+  }
+
+  MOZ_ASSERT(pipefd[0] != -1);
+  MOZ_ASSERT(pipefd[1] != -1);
+
+  FILE* writeFile = fdopen(pipefd[1], "w");
+  if (!writeFile) {
+    // Error: just give up write to stderr.
+    close(pipefd[0]);
+    close(pipefd[1]);
+    return;
+  }
+
+  mFile = writeFile;
+  mReadPipe = pipefd[0];
+}
+
+AutoAndroidLogFile::~AutoAndroidLogFile()
+{
+  if (mReadPipe == -1) {
+    return;
+  }
+
+  // Since mReadPipe is not -1, we know we own mFile.  We need to close
+  // it now so that we can read all of the data in the pipe.
+  fclose(mFile);
+
+  // |str| is both to carry over from one read to the next, and to
+  // have a separate buffer to which we add the null-terminator.
+  nsAutoCString str;
+  char buf[4096];
+  while (ssize_t bytes_read = read(mReadPipe, buf, sizeof(buf))) {
+    if (bytes_read == -1) {
+      // Error.
+      break;
+    }
+
+    char* cur = buf;
+    char* end = buf + bytes_read;
+
+    while (char* newline = static_cast<char*>(memchr(cur, '\n', end - cur))) {
+      char* next = newline + 1;
+      str.Append(Substring(cur, next));
+      fprintf_stderr(stderr, "%s", str.get());
+      str.Truncate();
+      cur = next;
+    }
+
+    str.Append(Substring(cur, end));
+  }
+  fprintf_stderr(stderr, "%s", str.get());
+
+  close(mReadPipe);
+}
+
+} // namespace mozilla
+
+#endif /* defined(MOZILLA_INTERNAL_API) && defined(ANDROID) */
diff --git a/xpcom/glue/nsDebug.h b/xpcom/glue/nsDebug.h
--- a/xpcom/glue/nsDebug.h
+++ b/xpcom/glue/nsDebug.h
@@ -430,11 +430,62 @@ void vprintf_stderr(const char* aFmt, va
 void fprintf_stderr(FILE* aFile, const char* aFmt, ...) MOZ_FORMAT_PRINTF(2, 3);
 
 // used by the profiler to log stderr in the profiler for more
 // advanced performance debugging and display/layers visualization.
 void set_stderr_callback(StderrCallback aCallback);
 
 #ifdef __cplusplus
 }
+
+#ifdef MOZILLA_INTERNAL_API
+
+namespace mozilla {
+
+/**
+ * AutoAndroidLogFile is an RAII class that provides a FILE* to which
+ * logs can be written.  It can be used to make existing logging code
+ * that takes a FILE* argument, but does not use fprintf_stderr (above,
+ * which is preferable), appear in the logcat on Firefox OS and Android.
+ *
+ * On Android and Firefox OS, it works by constructing a pipe and
+ * providing a FILE* that writes to that pipe, and in its destructor,
+ * closing that FILE* and printing the output using printf_stderr.
+ *
+ * Note that this means that when redirection to __android_log_print is
+ * happening, the output is delayed until the destructor of
+ * AutoAndroidLogFile.
+ *
+ * Note also that the amount of output is presumably limited by the
+ * system's pipe buffer size (probably 4096 bytes).  Presumably a hang
+ * will result if you write more than the pipe's buffer size, since no
+ * reading occurs until after writing is complete.
+ */
+class AutoAndroidLogFile {
+public:
+  FILE* file() const {
+    return mFile;
+  }
+
+#ifdef ANDROID
+  AutoAndroidLogFile(FILE* aFile = stderr);
+  ~AutoAndroidLogFile();
+#else
+  AutoAndroidLogFile(FILE* aFile = stderr)
+    : mFile(aFile)
+  {
+  }
+#endif
+
+private:
+  FILE* mFile;
+#ifdef ANDROID
+  int mReadPipe; // -1 means no pipe
+#endif
+};
+
+} // namespace mozilla
+
+#endif /* defined(MOZILLA_INTERNAL_API) */
+
 #endif
 
 #endif /* nsDebug_h___ */
