Remove aRequestor from nsIGridPart::GetGrid by pulling part of GetGrid out into a separate IndexOfChild method.  (Originally thought this was needed for bug 413027, but now not related.  Turns out it broke things pretty badly, and I didn't bother debugging since I'd realized by that point it wasn't needed for what I thought I was going to have to write on top of it.)

diff --git a/layout/xul/base/src/grid/nsGridLayout2.cpp b/layout/xul/base/src/grid/nsGridLayout2.cpp
--- a/layout/xul/base/src/grid/nsGridLayout2.cpp
+++ b/layout/xul/base/src/grid/nsGridLayout2.cpp
@@ -94,7 +94,7 @@ nsGridLayout2::IntrinsicWidthsDirty(nsIB
 }
 
 nsGrid*
-nsGridLayout2::GetGrid(nsIBox* aBox, PRInt32* aIndex, nsGridRowLayout* aRequestor)
+nsGridLayout2::GetGrid(nsIBox* aBox, PRInt32* aIndex)
 {
   // XXX This should be set a better way!
   mGrid.SetBox(aBox);
@@ -107,6 +107,12 @@ nsGridLayout2::GetGrid(nsIBox* aBox, PRI
 #endif
 
   return &mGrid;
+}
+
+PRInt32
+nsGridLayout2::IndexOfChild(nsIBox* aBox, nsGridRowLayout* aChildLayout)
+{
+  return 0;
 }
 
 void
diff --git a/layout/xul/base/src/grid/nsGridLayout2.h b/layout/xul/base/src/grid/nsGridLayout2.h
--- a/layout/xul/base/src/grid/nsGridLayout2.h
+++ b/layout/xul/base/src/grid/nsGridLayout2.h
@@ -69,7 +69,8 @@ public:
 
   virtual nsGridRowGroupLayout* CastToRowGroupLayout() { return nsnull; }
   virtual nsGridLayout2* CastToGridLayout() { return this; }
-  virtual nsGrid* GetGrid(nsIBox* aBox, PRInt32* aIndex, nsGridRowLayout* aRequestor=nsnull);
+  virtual nsGrid* GetGrid(nsIBox* aBox, PRInt32* aIndex);
+  virtual PRInt32 IndexOfChild(nsIBox* aBox, nsGridRowLayout* aChildLayout);
   virtual void GetParentGridPart(nsIBox* aBox, nsIBox** aParentBox, nsIGridPart** aParentGridPart) { NS_NOTREACHED("Should not be called"); }
   virtual nsSize GetMinSize(nsIBox* aBox, nsBoxLayoutState& aBoxLayoutState);
   virtual nsSize GetMaxSize(nsIBox* aBox, nsBoxLayoutState& aBoxLayoutState);
diff --git a/layout/xul/base/src/grid/nsGridRowLayout.cpp b/layout/xul/base/src/grid/nsGridRowLayout.cpp
--- a/layout/xul/base/src/grid/nsGridRowLayout.cpp
+++ b/layout/xul/base/src/grid/nsGridRowLayout.cpp
@@ -106,21 +106,26 @@ nsGridRowLayout::GetParentGridPart(nsIBo
 
 
 nsGrid*
-nsGridRowLayout::GetGrid(nsIBox* aBox, PRInt32* aIndex, nsGridRowLayout* aRequestor)
+nsGridRowLayout::GetGrid(nsIBox* aBox, PRInt32* aIndex)
 {
+  nsCOMPtr<nsIGridPart> parent;
+  nsIBox* parentBox; // nsIBox is implemented by nsIFrame and is not refcounted.
+  GetParentGridPart(aBox, &parentBox, getter_AddRefs(parent));
+  if (!parent)
+    return nsnull;
+  PRInt32 parentIndex;
+  nsGrid *result = parent->GetGrid(parentBox, &parentIndex);
+  PRInt32 boxIndex = parent->IndexOfChild(parentBox, this);
+  if (boxIndex == -1 || parentIndex == -1)
+    *aIndex = -1;
+  else
+    *aIndex = parentIndex + boxIndex;
+  return result;
+}
 
-   if (aRequestor == nsnull)
-   {
-      nsCOMPtr<nsIGridPart> parent;
-      nsIBox* parentBox; // nsIBox is implemented by nsIFrame and is not refcounted.
-      GetParentGridPart(aBox, &parentBox, getter_AddRefs(parent));
-      if (parent)
-         return parent->GetGrid(parentBox, aIndex, this);
-      return nsnull;
-   }
-
-   nsresult rv = NS_OK;
-
+PRInt32
+nsGridRowLayout::IndexOfChild(nsIBox* aBox, nsGridRowLayout* aChildLayout)
+{
    PRInt32 index = -1;
    nsIBox* child = aBox->GetChildBox();
    PRInt32 count = 0;
@@ -132,11 +137,11 @@ nsGridRowLayout::GetGrid(nsIBox* aBox, P
      nsCOMPtr<nsIBoxLayout> layout;
      childBox->GetLayoutManager(getter_AddRefs(layout));
      
-     // find our requester
-     nsCOMPtr<nsIGridPart> gridRow = do_QueryInterface(layout, &rv);
-     if (NS_SUCCEEDED(rv) && gridRow) 
+     // find our child
+     nsCOMPtr<nsIGridPart> gridRow = do_QueryInterface(layout);
+     if (gridRow) 
      {
-       if (layout == aRequestor) {
+       if (layout == aChildLayout) {
           index = count;
           break;
        }
@@ -150,21 +155,7 @@ nsGridRowLayout::GetGrid(nsIBox* aBox, P
    // if we didn't find ourselves then the tree isn't properly formed yet
    // this could happen during initial construction so lets just
    // fail.
-   if (index == -1) {
-     *aIndex = -1;
-     return nsnull;
-   }
-
-   (*aIndex) += index;
-
-   nsCOMPtr<nsIGridPart> parent;
-   nsIBox* parentBox; // nsIBox is implemented by nsIFrame and is not refcounted.
-   GetParentGridPart(aBox, &parentBox, getter_AddRefs(parent));
-
-   if (parent)
-     return parent->GetGrid(parentBox, aIndex, this);
-
-   return nsnull;
+   return index;
 }
 
 nsMargin
diff --git a/layout/xul/base/src/grid/nsGridRowLayout.h b/layout/xul/base/src/grid/nsGridRowLayout.h
--- a/layout/xul/base/src/grid/nsGridRowLayout.h
+++ b/layout/xul/base/src/grid/nsGridRowLayout.h
@@ -68,7 +68,8 @@ public:
 
   virtual nsGridRowGroupLayout* CastToRowGroupLayout() { return nsnull; }
   virtual nsGridLayout2* CastToGridLayout() { return nsnull; }
-  virtual nsGrid* GetGrid(nsIBox* aBox, PRInt32* aIndex, nsGridRowLayout* aRequestor=nsnull);
+  virtual nsGrid* GetGrid(nsIBox* aBox, PRInt32* aIndex);
+  virtual PRInt32 IndexOfChild(nsIBox* aBox, nsGridRowLayout* aChildLayout);
   virtual void GetParentGridPart(nsIBox* aBox, nsIBox** aParentBox, nsIGridPart** aParentGridRow);
   virtual void ChildrenInserted(nsIBox* aBox, nsBoxLayoutState& aState, nsIBox* aPrevBox, nsIBox* aChildList);
   virtual void ChildrenAppended(nsIBox* aBox, nsBoxLayoutState& aState, nsIBox* aChildList);
diff --git a/layout/xul/base/src/grid/nsIGridPart.h b/layout/xul/base/src/grid/nsIGridPart.h
--- a/layout/xul/base/src/grid/nsIGridPart.h
+++ b/layout/xul/base/src/grid/nsIGridPart.h
@@ -68,21 +68,20 @@ public:
   /**
    * @param aBox [IN] The other half of the |this| parameter, i.e., the box
    *                  whose layout manager is |this|.
-   * @param aIndex [INOUT] For callers not setting aRequestor, the value
-   *                       pointed to by aIndex is incremented by the index
-   *                       of the row (aBox) within its row group; if aBox
-   *                       is not a row/column, it is untouched.
-   *                       The implementation does this by doing the aIndex
-   *                       incrementing in the call to the parent row group
-   *                       when aRequestor is non-null.
-   * @param aRequestor [IN] Non-null if and only if this is a recursive
-   *                   call from the GetGrid method on a child grid part,
-   *                   in which case it is a pointer to that grid part.
-   *                   (This may only be non-null for row groups and
-   *                   grids.)
+   * @param aIndex [OUT] aBox's row index within the grid (its index, if
+   *                     a row, or the index of its first row, if a row
+   *                     group)
    * @return The grid of which aBox (a row, row group, or grid) is a part.
    */
-  virtual nsGrid* GetGrid(nsIBox* aBox, PRInt32* aIndex, nsGridRowLayout* aRequestor=nsnull)=0;
+  virtual nsGrid* GetGrid(nsIBox* aBox, PRInt32* aIndex)=0;
+
+  /**
+   * @param aBox [IN] The other half of the |this| parameter, i.e., the
+   *                  box whose layout manager is |this|.
+   *        aChildBox [IN] A child (grid-wise) of aParentBox.
+   * @return The row offset of aChildBox within aBox, or -1 if not in it.
+   */
+  virtual PRInt32 IndexOfChild(nsIBox* aBox, nsGridRowLayout* aChildLayout)=0;
 
   /**
    * @param aBox [IN] The other half of the |this| parameter, i.e., the box
