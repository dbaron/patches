From: L. David Baron <dbaron@dbaron.org>

Now that JSTracer's debug members are no longer conditional, remove the DEBUG-guarding of the good JS property names for cycle collector tracing.  (It's still guarded by WantDebugInfo.)  (Bug 652056)

TODO:  Figure out if this does anything useful (and if not, why not).  In a brief test, I didn't notice a difference.

diff --git a/js/xpconnect/src/nsXPConnect.cpp b/js/xpconnect/src/nsXPConnect.cpp
--- a/js/xpconnect/src/nsXPConnect.cpp
+++ b/js/xpconnect/src/nsXPConnect.cpp
@@ -813,34 +813,33 @@ NoteJSChild(JSTracer *trc, void **thingp
      * This function needs to be careful to avoid stack overflow. Normally, when
      * AddToCCKind is true, the recursion terminates immediately as we just add
      * |thing| to the CC graph. So overflow is only possible when there are long
      * chains of non-AddToCCKind GC things. Currently, this only can happen via
      * shape parent pointers. The special JSTRACE_SHAPE case below handles
      * parent pointers iteratively, rather than recursively, to avoid overflow.
      */
     if (AddToCCKind(kind)) {
-#if defined(DEBUG)
         if (NS_UNLIKELY(tracer->cb.WantDebugInfo())) {
             // based on DumpNotify in jsapi.c
             if (tracer->debugPrinter) {
                 char buffer[200];
                 tracer->debugPrinter(trc, buffer, sizeof(buffer));
                 tracer->cb.NoteNextEdgeName(buffer);
             } else if (tracer->debugPrintIndex != (size_t)-1) {
                 char buffer[200];
                 JS_snprintf(buffer, sizeof(buffer), "%s[%lu]",
                             static_cast<const char *>(tracer->debugPrintArg),
                             tracer->debugPrintIndex);
                 tracer->cb.NoteNextEdgeName(buffer);
             } else {
                 tracer->cb.NoteNextEdgeName(static_cast<const char*>(tracer->debugPrintArg));
             }
         }
-#endif
+
         tracer->cb.NoteScriptChild(nsIProgrammingLanguage::JAVASCRIPT, thing);
     } else if (kind == JSTRACE_SHAPE) {
         JS_TraceShapeCycleCollectorChildren(trc, thing);
     } else if (kind != JSTRACE_STRING) {
         JS_TraceChildren(trc, thing, kind);
     }
 }
 
