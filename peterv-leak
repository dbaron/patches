From: Peter Van der Beken <peterv@propagandism.org>

Fix for bug 571159 (Leak nsGlobalWindow with unknown-content-type dialog). r=sdwilsh.

diff --git a/toolkit/mozapps/downloads/nsHelperAppDlg.js b/toolkit/mozapps/downloads/nsHelperAppDlg.js
--- a/toolkit/mozapps/downloads/nsHelperAppDlg.js
+++ b/toolkit/mozapps/downloads/nsHelperAppDlg.js
@@ -56,16 +56,74 @@
  * @returns true if we can use the directory, false otherwise.
  */
 function isUsableDirectory(aDirectory)
 {
   return aDirectory.exists() && aDirectory.isDirectory() &&
          aDirectory.isWritable();
 }
 
+// Web progress listener so we can detect errors while mLauncher is
+// streaming the data to a temporary file.
+function nsUnkownContentTypeDialogProgressListener(aHelperAppDialog) {
+  this.helperAppDlg = aHelperAppDialog;
+}
+
+nsUnkownContentTypeDialogProgressListener.prototype = {
+  // nsIWebProgressListener methods.
+  // Look for error notifications and display alert to user.
+  onStatusChange: function( aWebProgress, aRequest, aStatus, aMessage ) {
+    if ( aStatus != Components.results.NS_OK ) {
+      // Get prompt service.
+      var prompter = Components.classes[ "@mozilla.org/embedcomp/prompt-service;1" ]
+                               .getService( Components.interfaces.nsIPromptService );
+      // Display error alert (using text supplied by back-end).
+      // FIXME this.dialog is undefined?
+      prompter.alert( this.dialog, this.helperAppDlg.mTitle, aMessage );
+      // Close the dialog.
+      this.helperAppDlg.onCancel();
+      if ( this.helperAppDlg.mDialog ) {
+        this.helperAppDlg.mDialog.close();
+      }
+    }
+  },
+
+  // Ignore onProgressChange, onProgressChange64, onStateChange, onLocationChange, onSecurityChange, and onRefreshAttempted notifications.
+  onProgressChange: function( aWebProgress,
+                              aRequest,
+                              aCurSelfProgress,
+                              aMaxSelfProgress,
+                              aCurTotalProgress,
+                              aMaxTotalProgress ) {
+  },
+
+  onProgressChange64: function( aWebProgress,
+                                aRequest,
+                                aCurSelfProgress,
+                                aMaxSelfProgress,
+                                aCurTotalProgress,
+                                aMaxTotalProgress ) {
+  },
+
+
+
+  onStateChange: function( aWebProgress, aRequest, aStateFlags, aStatus ) {
+  },
+
+  onLocationChange: function( aWebProgress, aRequest, aLocation ) {
+  },
+
+  onSecurityChange: function( aWebProgress, aRequest, state ) {
+  },
+
+  onRefreshAttempted: function( aWebProgress, aURI, aDelay, aSameURI ) {
+    return true;
+  }
+};
+
 ///////////////////////////////////////////////////////////////////////////////
 //// nsUnkownContentTypeDialog
 
 /* This file implements the nsIHelperAppLauncherDialog interface.
  *
  * The implementation consists of a JavaScript "class" named nsUnknownContentTypeDialog,
  * comprised of:
  *   - a JS constructor function
@@ -146,18 +204,18 @@ nsUnknownContentTypeDialog.prototype = {
 
     // Hook this object to the dialog.
     this.mDialog.dialog = this;
 
     // Hook up utility functions.
     this.getSpecialFolderKey = this.mDialog.getSpecialFolderKey;
 
     // Watch for error notifications.
-    this.progressListener.helperAppDlg = this;
-    this.mLauncher.setWebProgressListener(this.progressListener);
+    var progressListener = new nsUnkownContentTypeDialogProgressListener(this);
+    this.mLauncher.setWebProgressListener(progressListener);
   },
 
   // promptForSaveToFile:  Display file picker dialog and return selected file.
   //                       This is called by the External Helper App Service
   //                       after the ucth dialog calls |saveToDisk| with a null
   //                       target filename (no target, therefore user must pick).
   //
   //                       Alternatively, if the user has selected to have all
@@ -334,73 +392,16 @@ nsUnknownContentTypeDialog.prototype = {
     }
 #endif
 
     return createdFile;
   },
 
   // ---------- implementation methods ----------
 
-  // Web progress listener so we can detect errors while mLauncher is
-  // streaming the data to a temporary file.
-  progressListener: {
-    // Implementation properties.
-    helperAppDlg: null,
-
-    // nsIWebProgressListener methods.
-    // Look for error notifications and display alert to user.
-    onStatusChange: function( aWebProgress, aRequest, aStatus, aMessage ) {
-      if ( aStatus != Components.results.NS_OK ) {
-        // Get prompt service.
-        var prompter = Components.classes[ "@mozilla.org/embedcomp/prompt-service;1" ]
-                                 .getService( Components.interfaces.nsIPromptService );
-        // Display error alert (using text supplied by back-end).
-        prompter.alert( this.dialog, this.helperAppDlg.mTitle, aMessage );
-
-        // Close the dialog.
-        this.helperAppDlg.onCancel();
-        if ( this.helperAppDlg.mDialog ) {
-          this.helperAppDlg.mDialog.close();
-        }
-      }
-    },
-
-    // Ignore onProgressChange, onProgressChange64, onStateChange, onLocationChange, onSecurityChange, and onRefreshAttempted notifications.
-    onProgressChange: function( aWebProgress,
-                                aRequest,
-                                aCurSelfProgress,
-                                aMaxSelfProgress,
-                                aCurTotalProgress,
-                                aMaxTotalProgress ) {
-    },
-
-    onProgressChange64: function( aWebProgress,
-                                  aRequest,
-                                  aCurSelfProgress,
-                                  aMaxSelfProgress,
-                                  aCurTotalProgress,
-                                  aMaxTotalProgress ) {
-    },
-
-
-
-    onStateChange: function( aWebProgress, aRequest, aStateFlags, aStatus ) {
-    },
-
-    onLocationChange: function( aWebProgress, aRequest, aLocation ) {
-    },
-
-    onSecurityChange: function( aWebProgress, aRequest, state ) {
-    },
-
-    onRefreshAttempted: function( aWebProgress, aURI, aDelay, aSameURI ) {
-      return true;
-    }
-  },
-
   // initDialog:  Fill various dialog fields with initial content.
   initDialog : function() {
     // Put file name in window title.
     var suggestedFileName = this.mLauncher.suggestedFileName;
 
     // Some URIs do not implement nsIURL, so we can't just QI.
     var url   = this.mLauncher.source;
     var fname = "";
