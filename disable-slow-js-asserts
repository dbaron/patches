From: L. David Baron <dbaron@dbaron.org>

NOT FOR CHECKIN:  Comment out slow js assertions.

Can I use JitOptions.fullDebugChecks instead?

diff --git a/js/src/gc/Cell.h b/js/src/gc/Cell.h
--- a/js/src/gc/Cell.h
+++ b/js/src/gc/Cell.h
@@ -360,17 +360,19 @@ void
 TenuredCell::unmark()
 {
     chunk()->bitmap.unmark(this);
 }
 
 inline Arena*
 TenuredCell::arena() const
 {
+#if 0
     MOZ_ASSERT(isTenured());
+#endif
     uintptr_t addr = address();
     addr &= ~ArenaMask;
     return reinterpret_cast<Arena*>(addr);
 }
 
 AllocKind
 TenuredCell::getAllocKind() const
 {
diff --git a/js/src/gc/Marking.cpp b/js/src/gc/Marking.cpp
--- a/js/src/gc/Marking.cpp
+++ b/js/src/gc/Marking.cpp
@@ -350,35 +350,41 @@ static bool
 ShouldTraceCrossCompartment(JSTracer* trc, JSObject* src, const Value& val)
 {
     return val.isGCThing() && ShouldTraceCrossCompartment(trc, src, val.toGCThing());
 }
 
 static void
 AssertShouldMarkInZone(Cell* thing)
 {
+#if 0
     MOZ_ASSERT(thing->asTenured().zone()->shouldMarkInZone());
+#endif
 }
 
 static void
 AssertShouldMarkInZone(JSString* str)
 {
 #ifdef DEBUG
+#if 0
     Zone* zone = str->zone();
     MOZ_ASSERT(zone->shouldMarkInZone() || zone->isAtomsZone());
 #endif
+#endif
 }
 
 static void
 AssertShouldMarkInZone(JS::Symbol* sym)
 {
 #ifdef DEBUG
+#if 0
     Zone* zone = sym->asTenured().zone();
     MOZ_ASSERT(zone->shouldMarkInZone() || zone->isAtomsZone());
 #endif
+#endif
 }
 
 #ifdef DEBUG
 void
 js::gc::AssertRootMarkingPhase(JSTracer* trc)
 {
     MOZ_ASSERT_IF(trc->isMarkingTracer(),
                   trc->runtime()->gc.state() == State::NotActive ||
diff --git a/js/src/jit/CodeGenerator.cpp b/js/src/jit/CodeGenerator.cpp
--- a/js/src/jit/CodeGenerator.cpp
+++ b/js/src/jit/CodeGenerator.cpp
@@ -6010,17 +6010,17 @@ CodeGenerator::generateBody()
               default:
                 MOZ_CRASH("Invalid LIR op");
             }
 
             // Track the end native offset of optimizations.
             if (iter->mirRaw() && iter->mirRaw()->trackedOptimizations())
                 extendTrackedOptimizationsEntry(iter->mirRaw()->trackedOptimizations());
 
-#ifdef DEBUG
+#if 0
             if (!counts)
                 emitDebugResultChecks(*iter);
 #endif
         }
         if (masm.oom())
             return false;
 
 #if defined(JS_ION_PERF)
diff --git a/xpcom/base/CycleCollectedJSRuntime.cpp b/xpcom/base/CycleCollectedJSRuntime.cpp
--- a/xpcom/base/CycleCollectedJSRuntime.cpp
+++ b/xpcom/base/CycleCollectedJSRuntime.cpp
@@ -1229,17 +1229,17 @@ CycleCollectedJSRuntime::FixWeakMappingG
 }
 
 void
 CycleCollectedJSRuntime::CheckGrayBits() const
 {
   MOZ_ASSERT(!JS::IsIncrementalGCInProgress(mJSRuntime),
              "Don't call CheckGrayBits during a GC.");
 
-#ifndef ANDROID
+#if 0
   // Bug 1346874 - The gray state check is expensive. Android tests are already
   // slow enough that this check can easily push them over the threshold to a
   // timeout.
 
   MOZ_ASSERT(js::CheckGrayMarkingState(mJSRuntime));
   MOZ_ASSERT(CheckWeakMappingGrayBitsTracer::Check(mJSRuntime));
 #endif
 }
