From: L. David Baron <dbaron@dbaron.org>

NOT FOR CHECKIN:  Comment out slow js assertions.

diff --git a/js/src/gc/Heap.h b/js/src/gc/Heap.h
--- a/js/src/gc/Heap.h
+++ b/js/src/gc/Heap.h
@@ -1235,17 +1235,19 @@ TenuredCell::copyMarkBitsFrom(const Tenu
     ChunkBitmap& bitmap = chunk()->bitmap;
     bitmap.copyMarkBit(this, src, BLACK);
     bitmap.copyMarkBit(this, src, GRAY);
 }
 
 inline Arena*
 TenuredCell::arena() const
 {
+#if 0
     MOZ_ASSERT(isTenured());
+#endif
     uintptr_t addr = address();
     addr &= ~ArenaMask;
     return reinterpret_cast<Arena*>(addr);
 }
 
 AllocKind
 TenuredCell::getAllocKind() const
 {
diff --git a/js/src/gc/Marking.cpp b/js/src/gc/Marking.cpp
--- a/js/src/gc/Marking.cpp
+++ b/js/src/gc/Marking.cpp
@@ -317,35 +317,41 @@ static bool
 ShouldMarkCrossCompartment(JSTracer* trc, JSObject* src, Value val)
 {
     return val.isMarkable() && ShouldMarkCrossCompartment(trc, src, (Cell*)val.toGCThing());
 }
 
 static void
 AssertZoneIsMarking(Cell* thing)
 {
+#if 0
     MOZ_ASSERT(TenuredCell::fromPointer(thing)->zone()->isGCMarking());
+#endif
 }
 
 static void
 AssertZoneIsMarking(JSString* str)
 {
 #ifdef DEBUG
+#if 0
     Zone* zone = TenuredCell::fromPointer(str)->zone();
     MOZ_ASSERT(zone->isGCMarking() || zone->isAtomsZone());
 #endif
+#endif
 }
 
 static void
 AssertZoneIsMarking(JS::Symbol* sym)
 {
 #ifdef DEBUG
+#if 0
     Zone* zone = TenuredCell::fromPointer(sym)->zone();
     MOZ_ASSERT(zone->isGCMarking() || zone->isAtomsZone());
 #endif
+#endif
 }
 
 static void
 AssertRootMarkingPhase(JSTracer* trc)
 {
     MOZ_ASSERT_IF(trc->isMarkingTracer(),
                   trc->runtime()->gc.state() == State::NotActive ||
                   trc->runtime()->gc.state() == State::MarkRoots);
diff --git a/js/src/jit/CodeGenerator.cpp b/js/src/jit/CodeGenerator.cpp
--- a/js/src/jit/CodeGenerator.cpp
+++ b/js/src/jit/CodeGenerator.cpp
@@ -5144,17 +5144,17 @@ CodeGenerator::generateBody()
 #endif
 
             iter->accept(this);
 
             // Track the end native offset of optimizations.
             if (iter->mirRaw() && iter->mirRaw()->trackedOptimizations())
                 extendTrackedOptimizationsEntry(iter->mirRaw()->trackedOptimizations());
 
-#ifdef DEBUG
+#if 0
             if (!counts)
                 emitDebugResultChecks(*iter);
 #endif
         }
         if (masm.oom())
             return false;
 
 #if defined(JS_ION_PERF)
