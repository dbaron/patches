From: L. David Baron <dbaron@dbaron.org>

Remove tracking of whether the font family comes from HTML, since we no longer use the information.  (Bug 636040)  r=jdaggett  (NOTE: passed try builder on linux-32,mac-64,win-32.)

diff --git a/content/html/content/src/nsHTMLFontElement.cpp b/content/html/content/src/nsHTMLFontElement.cpp
--- a/content/html/content/src/nsHTMLFontElement.cpp
+++ b/content/html/content/src/nsHTMLFontElement.cpp
@@ -189,17 +189,16 @@ MapAttributesIntoRule(const nsMappedAttr
     nsRuleDataFont& font = *(aData->mFontData);
     
     // face: string list
     if (font.mFamily.GetUnit() == eCSSUnit_Null) {
       const nsAttrValue* value = aAttributes->GetAttr(nsGkAtoms::face);
       if (value && value->Type() == nsAttrValue::eString &&
           !value->IsEmptyString()) {
         font.mFamily.SetStringValue(value->GetStringValue(), eCSSUnit_Families);
-        font.mFamilyFromHTML = PR_TRUE;
       }
     }
 
     // pointSize: int
     if (font.mSize.GetUnit() == eCSSUnit_Null) {
       const nsAttrValue* value = aAttributes->GetAttr(nsGkAtoms::pointSize);
       if (value && value->Type() == nsAttrValue::eInteger)
         font.mSize.SetFloatValue((float)value->GetIntegerValue(), eCSSUnit_Point);
diff --git a/content/mathml/content/src/nsMathMLElement.cpp b/content/mathml/content/src/nsMathMLElement.cpp
--- a/content/mathml/content/src/nsMathMLElement.cpp
+++ b/content/mathml/content/src/nsMathMLElement.cpp
@@ -398,17 +398,16 @@ nsMathMLElement::MapMathMLAttributesInto
       }
     }
 
     value = aAttributes->GetAttr(nsGkAtoms::fontfamily_);
     if (value && value->Type() == nsAttrValue::eString &&
         aData->mFontData->mFamily.GetUnit() == eCSSUnit_Null) {
       aData->mFontData->mFamily.SetStringValue(value->GetStringValue(),
                                                eCSSUnit_Families);
-      aData->mFontData->mFamilyFromHTML = PR_FALSE;
     }
   }
 
   if (aData->mSIDs & NS_STYLE_INHERIT_BIT(Background)) {
     const nsAttrValue* value =
       aAttributes->GetAttr(nsGkAtoms::mathbackground_);
     if (!value) {
       value = aAttributes->GetAttr(nsGkAtoms::background);
diff --git a/layout/style/nsCSSDataBlock.cpp b/layout/style/nsCSSDataBlock.cpp
--- a/layout/style/nsCSSDataBlock.cpp
+++ b/layout/style/nsCSSDataBlock.cpp
@@ -185,20 +185,16 @@ nsCSSCompressedDataBlock::MapRuleInfoInt
             nsCSSValue* target = aRuleData->ValueFor(iProp);
             if (target->GetUnit() == eCSSUnit_Null) {
                 const nsCSSValue *val = ValueAtCursor(cursor);
                 NS_ABORT_IF_FALSE(val->GetUnit() != eCSSUnit_Null, "oops");
                 if (ShouldStartImageLoads(aRuleData, iProp)) {
                     TryToStartImageLoad(*val, doc, iProp);
                 }
                 *target = *val;
-                if (iProp == eCSSProperty_font_family) {
-                    // XXX Are there other things like this?
-                    aRuleData->mFontData->mFamilyFromHTML = PR_FALSE;
-                }
                 if (nsCSSProps::PropHasFlags(iProp,
                         CSS_PROPERTY_IGNORED_WHEN_COLORS_DISABLED) &&
                     ShouldIgnoreColors(aRuleData))
                 {
                     if (iProp == eCSSProperty_background_color) {
                         // Force non-'transparent' background
                         // colors to the user's default.
                         if (target->IsNonTransparentColor()) {
diff --git a/layout/style/nsCSSStruct.h b/layout/style/nsCSSStruct.h
--- a/layout/style/nsCSSStruct.h
+++ b/layout/style/nsCSSStruct.h
@@ -135,17 +135,16 @@ struct nsCSSFont : public nsCSSStruct {
   nsCSSValue mScriptMinSize;
 #endif
 
 private:
   nsCSSFont(const nsCSSFont& aOther); // NOT IMPLEMENTED
 };
 
 struct nsRuleDataFont : public nsCSSFont {
-  PRBool mFamilyFromHTML; // Is the family from an HTML FONT element
   nsRuleDataFont() {}
 private:
   nsRuleDataFont(const nsRuleDataFont& aOther); // NOT IMPLEMENTED
 };
 
 struct nsCSSColor : public nsCSSStruct  {
   nsCSSColor(void);
   ~nsCSSColor(void);
