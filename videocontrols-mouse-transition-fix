Handle mouseover/mouseout when the mouse transitions between the video element and its videocontrols child (which covers its entire content area).  (Bug 470596)

diff --git a/toolkit/content/widgets/videocontrols.xml b/toolkit/content/widgets/videocontrols.xml
--- a/toolkit/content/widgets/videocontrols.xml
+++ b/toolkit/content/widgets/videocontrols.xml
@@ -70,16 +70,17 @@
             this.init();
             ]]>
         </constructor>
 
         <field name="Utils">
             <![CDATA[ ({
                 debug : false,
                 video : null,
+                videocontrols : null,
                 controlBar : null,
                 playButton : null,
                 muteButton : null,
 
                 FADE_TIME_MAX  : 200, // ms
                 FADE_TIME_STEP : 30,  // ms
 
                 fadeTime : 0,         // duration of active fade animation
@@ -118,18 +119,22 @@
 
                 onMouseInOut : function (event) {
                     if (!this.dynamicControls)
                         return;
 
                     var isMouseOver = (event.type == "mouseover");
 
                     // Ignore events caused by transitions between child nodes.
-                    if (this.isChildNode(event.target) &&
-                        this.isChildNode(event.relatedTarget))
+                    // Note that the videocontrols element is the same
+                    // size as the *content area* of the video element,
+                    // but this is not the same as the video element's
+                    // border area if the video has border or padding.
+                    if (this.isControlsOrDescendant(event.target) &&
+                        this.isControlsOrDescendant(event.relatedTarget))
                         return;
 
                     // Don't show controls when they're disabled, but do allow a
                     // mouseout to hide controls that were disabled after being shown.
                     if (!this.video.controls && (isMouseOver || !this.controlsVisible))
                         return;
 
                     this.log("Fading controls " + (isMouseOver ? "in" : "out"));
@@ -197,37 +202,38 @@
                 toggleMute : function () {
                     this.video.muted = !this.video.muted;
 
                     // We'll handle style changes in the event listener for
                     // the "volumechange" event, same as if content script was
                     // controlling volume.
                 },
 
-                isChildNode : function (node) {
+                isControlsOrDescendant : function (node) {
                     while (node) {
-                        if (node == this.video)
-                            break;
+                        if (node == this.videocontrols)
+                            return true;
                         node = node.parentNode;
                     }
-                    return (node == this.video);
+                    return false;
                 },
 
                 log : function (msg) {
                     if (this.debug)
                         dump("videoctl: " + msg + "\n");
                 }
             }) ]]>
         </field>
 
         <method name="init">
             <body>
             <![CDATA[
             var video = this.parentNode;
             this.Utils.video = video;
+            this.Utils.videocontrols = this;
 
             this.Utils.controlBar = document.getAnonymousElementByAttribute(this, "class", "controlBar");
             this.Utils.playButton = document.getAnonymousElementByAttribute(this, "class", "playButton");
             this.Utils.muteButton = document.getAnonymousElementByAttribute(this, "class", "muteButton");
 
             // Set initial state of play/pause button.
             this.Utils.playButton.setAttribute("paused", video.paused);
             // Controls are initially faded out and hidden (to ignore mouse clicks)
