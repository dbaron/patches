From: L. David Baron <dbaron@dbaron.org>

Bug 1479859 patch 1 - Make inline frames be abs-pos containing blocks for reasons other than being relatively positioned.  r=emilio

The basic change here is making nsCSSFrameConstructor::ConstructInline
use the function nsIFrame::IsAbsPosContainingBlock rather than testing
for only one of the conditions in it (being relatively or absolutely
positioned).  The rest of the code changes follow from that change.

I tested locally that the added test fails without the patch and passes
with it (either with or without the next patch).

Note that this causes a regression of three web-platform-test reftests:
  testing/web-platform/tests/css/css-contain/contain-paint-002.html
  testing/web-platform/tests/css/css-contain/contain-paint-011.html
  testing/web-platform/tests/css/css-contain/contain-paint-012.html
which will be fixed in patch 4, since that fix is easier to write after
patch 2.

Differential Revision: https://phabricator.services.mozilla.com/D2813

diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -6242,19 +6242,19 @@ nsCSSFrameConstructor::AppendFramesToPar
     FindFirstBlock(firstBlockEnumerator);
 
     nsFrameList inlineKids = aFrameList.ExtractHead(firstBlockEnumerator);
     if (!inlineKids.IsEmpty()) {
       AppendFrames(aParentFrame, kPrincipalList, inlineKids);
     }
 
     if (!aFrameList.IsEmpty()) {
-      bool positioned = aParentFrame->IsRelativelyPositioned();
       nsFrameItems ibSiblings;
-      CreateIBSiblings(aState, aParentFrame, positioned, aFrameList,
+      CreateIBSiblings(aState, aParentFrame,
+                       aParentFrame->IsAbsPosContainingBlock(), aFrameList,
                        ibSiblings);
 
       // Make sure to trigger reflow of the inline that used to be our
       // last one and now isn't anymore, since its GetSkipSides() has
       // changed.
       mPresShell->FrameNeedsReflow(aParentFrame,
                                    nsIPresShell::eTreeChange,
                                    NS_FRAME_HAS_DIRTY_CHILDREN);
@@ -11113,32 +11113,28 @@ nsCSSFrameConstructor::ConstructInline(n
   //   Block (div)
   //     Text("e")
   // Inline (outer span)
   //   Text("f")
 
   nsIContent* const content = aItem.mContent;
   ComputedStyle* const computedStyle = aItem.mComputedStyle;
 
-  bool positioned =
-    StyleDisplay::Inline == aDisplay->mDisplay &&
-    aDisplay->IsRelativelyPositionedStyle() &&
-    !nsSVGUtils::IsInSVGTextSubtree(aParentFrame);
-
   nsInlineFrame* newFrame = NS_NewInlineFrame(mPresShell, computedStyle);
 
   // Initialize the frame
   InitAndRestoreFrame(aState, content, aParentFrame, newFrame);
 
   nsFrameConstructorSaveState absoluteSaveState;  // definition cannot be inside next block
                                                   // because the object's destructor is significant
                                                   // this is part of the fix for bug 42372
 
+  bool isAbsPosCB = newFrame->IsAbsPosContainingBlock();
   newFrame->AddStateBits(NS_FRAME_CAN_HAVE_ABSPOS_CHILDREN);
-  if (positioned) {
+  if (isAbsPosCB) {
     // Relatively positioned frames becomes a container for child
     // frames that are positioned
     aState.PushAbsoluteContainingBlock(newFrame, newFrame, absoluteSaveState);
   }
 
   // Process the child content
   nsFrameItems childItems;
   ConstructFramesFromItemList(aState, aItem.mChildItems, newFrame,
@@ -11167,28 +11163,30 @@ nsCSSFrameConstructor::ConstructInline(n
 
   // Grab the first inline's kids
   nsFrameList firstInlineKids = childItems.ExtractHead(firstBlockEnumerator);
   newFrame->SetInitialChildList(kPrincipalList, firstInlineKids);
 
   aFrameItems.AddChild(newFrame);
 
   newFrame->AddStateBits(NS_FRAME_OWNS_ANON_BOXES);
-  CreateIBSiblings(aState, newFrame, positioned, childItems, aFrameItems);
+  CreateIBSiblings(aState, newFrame, isAbsPosCB, childItems, aFrameItems);
 
   return newFrame;
 }
 
 void
 nsCSSFrameConstructor::CreateIBSiblings(nsFrameConstructorState& aState,
                                         nsContainerFrame* aInitialInline,
-                                        bool aIsPositioned,
+                                        bool aIsAbsPosCB,
                                         nsFrameItems& aChildItems,
                                         nsFrameItems& aSiblings)
 {
+  MOZ_ASSERT(aIsAbsPosCB == aInitialInline->IsAbsPosContainingBlock());
+
   nsIContent* content = aInitialInline->GetContent();
   ComputedStyle* computedStyle = aInitialInline->Style();
   nsContainerFrame* parentFrame = aInitialInline->GetParent();
 
   // Resolve the right style for our anonymous blocks.
   //
   // The distinction in styles is needed because of CSS 2.1, section
   // 9.2.1.1, which says:
@@ -11226,17 +11224,17 @@ nsCSSFrameConstructor::CreateIBSiblings(
     SetFrameIsIBSplit(lastNewInline, blockFrame);
     aSiblings.AddChild(blockFrame);
 
     // Now grab the initial inlines in aChildItems and put them into an inline
     // frame.
     nsInlineFrame* inlineFrame = NS_NewInlineFrame(mPresShell, computedStyle);
     InitAndRestoreFrame(aState, content, parentFrame, inlineFrame, false);
     inlineFrame->AddStateBits(NS_FRAME_CAN_HAVE_ABSPOS_CHILDREN);
-    if (aIsPositioned) {
+    if (aIsAbsPosCB) {
       inlineFrame->MarkAsAbsoluteContainingBlock();
     }
 
     if (aChildItems.NotEmpty()) {
       nsFrameList::FrameLinkEnumerator firstBlock(aChildItems);
       FindFirstBlock(firstBlock);
       nsFrameList inlineKids = aChildItems.ExtractHead(firstBlock);
 
diff --git a/testing/web-platform/meta/MANIFEST.json b/testing/web-platform/meta/MANIFEST.json
--- a/testing/web-platform/meta/MANIFEST.json
+++ b/testing/web-platform/meta/MANIFEST.json
@@ -163676,16 +163676,28 @@
       [
        "/css/filter-effects/fecolormatrix-type-ref.html",
        "=="
       ]
      ],
      {}
     ]
    ],
+   "css/filter-effects/filter-cb-abspos-inline-001.html": [
+    [
+     "/css/filter-effects/filter-cb-abspos-inline-001.html",
+     [
+      [
+       "/css/filter-effects/filter-cb-abspos-inline-001-ref.html",
+       "=="
+      ]
+     ],
+     {}
+    ]
+   ],
    "css/filter-effects/filter-contrast-001.html": [
     [
      "/css/filter-effects/filter-contrast-001.html",
      [
       [
        "/css/filter-effects/filter-contrast-001-ref.html",
        "=="
       ]
@@ -266002,16 +266014,21 @@
      {}
     ]
    ],
    "css/filter-effects/fecolormatrix-type-ref.html": [
     [
      {}
     ]
    ],
+   "css/filter-effects/filter-cb-abspos-inline-001-ref.html": [
+    [
+     {}
+    ]
+   ],
    "css/filter-effects/filter-contrast-001-ref.html": [
     [
      {}
     ]
    ],
    "css/filter-effects/filter-contrast-002-ref.html": [
     [
      {}
@@ -563599,16 +563616,24 @@
   "css/filter-effects/fecolormatrix-type-ref.html": [
    "bba0c091a29d94615609d11eb23ce28bf8d57b87",
    "support"
   ],
   "css/filter-effects/fecolormatrix-type.html": [
    "8caaede02f27a120278d9d1512084e6fd57ab27f",
    "reftest"
   ],
+  "css/filter-effects/filter-cb-abspos-inline-001-ref.html": [
+   "6ebe4635511242cd0f5965a778a5a491cc406436",
+   "support"
+  ],
+  "css/filter-effects/filter-cb-abspos-inline-001.html": [
+   "6f99c48d5f34761ba1bc1ce7dbdfd927469ac65a",
+   "reftest"
+  ],
   "css/filter-effects/filter-contrast-001-ref.html": [
    "1be00e8bba72ed3203819cb51586947535ac5096",
    "support"
   ],
   "css/filter-effects/filter-contrast-001.html": [
    "14031ed78c52bb6bf78f6de62434183723bfc0ab",
    "reftest"
   ],
@@ -637368,17 +637393,17 @@
    "ad2bb513a6a801b29a791a6d65b7b730b86e9a64",
    "support"
   ],
   "tools/wptrunner/wptrunner/browsers/fennec.py": [
    "5e8ed28e2ee0e10acaa3e4ddf1e79164e795a2b2",
    "support"
   ],
   "tools/wptrunner/wptrunner/browsers/firefox.py": [
-   "14813b55fd5fae2b42a32eefd7a08a852913f4d4",
+   "04f2ce84a41619a23e29d5436430b11fa2b6d7c5",
    "support"
   ],
   "tools/wptrunner/wptrunner/browsers/ie.py": [
    "a0730f8ba29ea8b65b56709a4f96ac5894078d94",
    "support"
   ],
   "tools/wptrunner/wptrunner/browsers/opera.py": [
    "5c0109832be2da6fdbf224b64a9f8fc3b98045da",
diff --git a/testing/web-platform/meta/css/css-filter/filtered-inline-is-container.html.ini b/testing/web-platform/meta/css/css-filter/filtered-inline-is-container.html.ini
deleted file mode 100644
--- a/testing/web-platform/meta/css/css-filter/filtered-inline-is-container.html.ini
+++ /dev/null
@@ -1,2 +0,0 @@
-[filtered-inline-is-container.html]
-  expected: FAIL
diff --git a/testing/web-platform/tests/css/filter-effects/filter-cb-abspos-inline-001-ref.html b/testing/web-platform/tests/css/filter-effects/filter-cb-abspos-inline-001-ref.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/css/filter-effects/filter-cb-abspos-inline-001-ref.html
@@ -0,0 +1,28 @@
+<!DOCTYPE html>
+<meta charset=UTF-8>
+<title>CSS Filter: Establishing containing block for absolutely-positioned elements, on an inline element</title>
+<link rel="author" title="L. David Baron" href="https://dbaron.org/">
+<link rel="author" title="Mozilla Corporation" href="http://mozilla.com/">
+<meta name="flags" content="">
+<style>
+
+#cb {
+    position: relative;
+}
+
+#abspos {
+    position: absolute;
+    top: 0;
+    left: 0;
+    width: 10px;
+    height: 10px;
+    background: blue;
+}
+
+</style>
+
+<p>Filler text.</p>
+
+<div>
+    <span id="cb">Blue box should cover top-left corner of this sentence.<span id="abspos"></span></span>
+</div>
diff --git a/testing/web-platform/tests/css/filter-effects/filter-cb-abspos-inline-001.html b/testing/web-platform/tests/css/filter-effects/filter-cb-abspos-inline-001.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/css/filter-effects/filter-cb-abspos-inline-001.html
@@ -0,0 +1,33 @@
+<!DOCTYPE html>
+<meta charset=UTF-8>
+<title>CSS Filter: Establishing containing block for absolutely-positioned elements, on an inline element</title>
+<link rel="author" title="L. David Baron" href="https://dbaron.org/">
+<link rel="author" title="Mozilla Corporation" href="http://mozilla.com/">
+<link rel="match" href="filter-cb-abspos-inline-001-ref.html">
+<link rel="help" href="https://drafts.fxtf.org/filter-effects-1/#FilterProperty">
+<link rel="help" href="https://drafts.fxtf.org/filter-effects-1/#supported-filter-functions">
+<meta name="flags" content="">
+<meta name="assert" content="A value other than none for the filter property results in the creation of a containing block for absolute and fixed positioned descendants unless the element it applies to is a document root element in the current browsing context.">
+<meta name="assert" content="A value of 100% leaves the input unchanged.">
+<style>
+
+#cb {
+    filter: brightness(100%);
+}
+
+#abspos {
+    position: absolute;
+    top: 0;
+    left: 0;
+    width: 10px;
+    height: 10px;
+    background: blue;
+}
+
+</style>
+
+<p>Filler text.</p>
+
+<div>
+    <span id="cb">Blue box should cover top-left corner of this sentence.<span id="abspos"></span></span>
+</div>
