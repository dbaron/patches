From: L. David Baron <dbaron@dbaron.org>

Propagate whether we have a relevant link out of selector matching.  (Bug 147777)

diff --git a/layout/style/nsCSSRuleProcessor.cpp b/layout/style/nsCSSRuleProcessor.cpp
--- a/layout/style/nsCSSRuleProcessor.cpp
+++ b/layout/style/nsCSSRuleProcessor.cpp
@@ -1210,18 +1210,23 @@ RuleProcessorData::GetNthIndex(PRBool aI
  * contains both input to and output from the matching.
  */
 struct TreeMatchContext {
   // Is this matching operation for the creation of a style context?
   // (If it is, we need to set slow selector bits on nodes indicating
   // that certain restyling needs to happen.)
   const PRBool mForStyling;
 
+  // Did this matching operation find a relevant link?  (If so, we'll
+  // need to construct a StyleIfVisited().)
+  PRBool mHaveRelevantLink;
+
   TreeMatchContext(PRBool aForStyling)
     : mForStyling(aForStyling)
+    , mHaveRelevantLink(PR_FALSE)
   {
   }
 };
 
 /**
  * A |NodeMatchContext| has data about matching a selector (without
  * combinators) against a single node.  It contains only input to the
  * matching.
@@ -1240,18 +1245,26 @@ struct NodeMatchContext {
   // NOTE: For |aStateMask| to work correctly, it's important that any
   // change that changes multiple state bits include all those state
   // bits in the notification.  Otherwise, if multiple states change but
   // we do separate notifications then we might determine the style is
   // not state-dependent when it really is (e.g., determining that a
   // :hover:active rule no longer matches when both states are unset).
   const PRInt32 mStateMask;
 
+  // FIXME: WRITE COMMENT HERE
+  const PRBool mLookForRelevantLink;
+
+  // FIXME: WRITE COMMENT HERE
+  const PRBool mIsRelevantLink;
+
   NodeMatchContext(PRInt32 aStateMask)
     : mStateMask(aStateMask)
+    , mLookForRelevantLink(PR_FALSE /* FIXME */)
+    , mIsRelevantLink(PR_FALSE /* FIXME */)
   {
   }
 };
 
 static PRBool ValueIncludes(const nsSubstring& aValueList,
                             const nsSubstring& aValue,
                             const nsStringComparator& aComparator)
 {
