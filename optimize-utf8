From: L. David Baron <dbaron@dbaron.org>

Optimize UTF8 to UTF16 conversion.  (Bug 506430)

diff --git a/intl/uconv/src/nsUTF8ToUnicode.cpp b/intl/uconv/src/nsUTF8ToUnicode.cpp
--- a/intl/uconv/src/nsUTF8ToUnicode.cpp
+++ b/intl/uconv/src/nsUTF8ToUnicode.cpp
@@ -131,28 +131,38 @@ NS_IMETHODIMP nsUTF8ToUnicode::Convert(c
   const char *in, *inend;
   inend = aSrc + aSrcLen;
 
   PRUnichar *out, *outend;
   outend = aDest + aDestLen;
 
   nsresult res = NS_OK; // conversion result
 
+  PRInt32 mUcs4 = this->mUcs4;
+  PRUint8 mState = this->mState;
+  PRUint8 mBytes = this->mBytes;
+  PRUint8 mFirst = this->mFirst;
+
   // Set mFirst to PR_FALSE now so we don't have to every time through the ASCII
   // branch within the loop.
   if (mFirst && aSrcLen && (0 == (0x80 & (*aSrc))))
     mFirst = PR_FALSE;
 
   for (in = aSrc, out = aDest; ((in < inend) && (out < outend)); ++in) {
     if (0 == mState) {
       // When mState is zero we expect either a US-ASCII character or a
       // multi-octet sequence.
       if (0 == (0x80 & (*in))) {
         // US-ASCII, pass straight through.
-        *out++ = (PRUnichar)*in;
+        PRUint32 max_loops = PR_MIN(inend - in, outend - out);
+        do {
+          // Fast inner loop for the common case, runs of ASCII.
+          *out++ = (PRUnichar)*in++;
+        } while (--max_loops != 0 && 0 == (0x80 & *in));
+        --in; // match the rest of the cases
         mBytes = 1;
       } else if (0xC0 == (0xE0 & (*in))) {
         // First octet of 2 octet sequence
         mUcs4 = (PRUint32)(*in);
         mUcs4 = (mUcs4 & 0x1F) << 6;
         mState = 1;
         mBytes = 2;
       } else if (0xE0 == (0xF0 & (*in))) {
@@ -261,10 +271,15 @@ NS_IMETHODIMP nsUTF8ToUnicode::Convert(c
   // last UCS4 is incomplete, make sure the caller
   // returns with properly aligned continuation of the buffer
   if ((NS_OK == res) && (mState != 0))
     res = NS_OK_UDEC_MOREINPUT;
 
   *aSrcLength = in - aSrc;
   *aDestLength = out - aDest;
 
+  this->mUcs4 = mUcs4;
+  this->mState = mState;
+  this->mBytes = mBytes;
+  this->mFirst = mFirst;
+
   return(res);
 }
