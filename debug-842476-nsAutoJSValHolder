From: L. David Baron <dbaron@dbaron.org>

Bug 842476 debugging:  Debugging code to isolate correct nsAutoJSValHolder.

diff --git a/js/ipc/ContextWrapperParent.h b/js/ipc/ContextWrapperParent.h
--- a/js/ipc/ContextWrapperParent.h
+++ b/js/ipc/ContextWrapperParent.h
@@ -25,16 +25,17 @@ using mozilla::dom::ContentParent;
 class ContextWrapperParent
     : public PContextWrapperParent
 {
 public:
 
     ContextWrapperParent(ContentParent* cpp)
         : mContent(cpp)
         , mGlobal(NULL)
+        , mGlobalHolder("nsAutoJSValHolder for ContextWrapperParent::mGlobalHolder")
     {}
 
     JSBool GetGlobalJSObject(JSContext* cx, JSObject** globalp) {
         if (!mGlobal)
             return JS_FALSE;
         mGlobalHolder.Hold(cx);
         mGlobalHolder = *globalp = mGlobal->GetJSObject(cx);
         return JS_TRUE;
diff --git a/js/xpconnect/public/nsAutoJSValHolder.h b/js/xpconnect/public/nsAutoJSValHolder.h
--- a/js/xpconnect/public/nsAutoJSValHolder.h
+++ b/js/xpconnect/public/nsAutoJSValHolder.h
@@ -13,18 +13,18 @@
 /**
  * Simple class that looks and acts like a jsval except that it unroots
  * itself automatically if Root() is ever called. Designed to be rooted on the
  * context or runtime (but not both!).
  */
 class nsAutoJSValHolder
 {
 public:
-  nsAutoJSValHolder()
-    : mVal(JSVAL_NULL), mRt(nullptr)
+  nsAutoJSValHolder(const char *aName = nullptr)
+    : mVal(JSVAL_NULL), mRt(nullptr), mName(aName)
   {
     // nothing to do
   }
 
   /**
    * Always release on destruction.
    */
   virtual ~nsAutoJSValHolder() {
@@ -64,17 +64,17 @@ public:
    */
   bool Hold(JSRuntime* aRt) {
     // Do we really care about different runtimes?
     if (mRt && aRt != mRt) {
       js_RemoveRoot(mRt, &mVal);
       mRt = nullptr;
     }
 
-    if (!mRt && JS_AddNamedValueRootRT(aRt, &mVal, "nsAutoJSValHolder")) {
+    if (!mRt && JS_AddNamedValueRootRT(aRt, &mVal, mName ? mName : "nsAutoJSValHolder")) {
       mRt = aRt;
     }
 
     return !!mRt;
   }
 
   /**
    * Manually release, nullifying mVal, and mRt, but returning
@@ -130,11 +130,12 @@ public:
 #endif
     mVal = aOther;
     return *this;
   }
 
 private:
   jsval mVal;
   JSRuntime* mRt;
+  const char* mName;
 };
 
 #endif /* __NSAUTOJSVALHOLDER_H__ */
diff --git a/js/xpconnect/src/XPCException.cpp b/js/xpconnect/src/XPCException.cpp
--- a/js/xpconnect/src/XPCException.cpp
+++ b/js/xpconnect/src/XPCException.cpp
@@ -100,17 +100,18 @@ nsXPCException::nsXPCException()
     : mMessage(nullptr),
       mResult(NS_OK),
       mName(nullptr),
       mLocation(nullptr),
       mData(nullptr),
       mFilename(nullptr),
       mLineNumber(0),
       mInner(nullptr),
-      mInitialized(false)
+      mInitialized(false),
+      mThrownJSVal("nsAutoJSValHolder for nsXPCException::mThrownJSVal")
 {
     MOZ_COUNT_CTOR(nsXPCException);
 }
 
 nsXPCException::~nsXPCException()
 {
     MOZ_COUNT_DTOR(nsXPCException);
     Reset();
