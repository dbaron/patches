From: L. David Baron <dbaron@dbaron.org>

Make nsBox more careful about accepting XUL attributes only on XUL elements.  (Bug 644514)

diff --git a/browser/base/content/urlbarBindings.xml b/browser/base/content/urlbarBindings.xml
--- a/browser/base/content/urlbarBindings.xml
+++ b/browser/base/content/urlbarBindings.xml
@@ -59,17 +59,17 @@
           <xul:image class="autocomplete-icon" allowevents="true"/>
         </children>
         <xul:hbox anonid="textbox-input-box"
                   class="textbox-input-box urlbar-input-box"
                   flex="1" xbl:inherits="tooltiptext=inputtooltiptext">
           <children/>
           <html:input anonid="input"
                       class="autocomplete-textbox urlbar-input textbox-input uri-element-right-align"
-                      flex="1" allowevents="true"
+                      style="-moz-box-flex: 1" allowevents="true"
                       xbl:inherits="tooltiptext=inputtooltiptext,onfocus,onblur,value,type,maxlength,disabled,size,readonly,placeholder,tabindex,accesskey"/>
         </xul:hbox>
         <children includes="hbox"/>
       </xul:hbox>
       <xul:dropmarker anonid="historydropmarker"
                       class="autocomplete-history-dropmarker urlbar-history-dropmarker"
                       allowevents="true"
                       xbl:inherits="open,enablehistory,parentfocused=focused"/>
diff --git a/layout/xul/base/src/nsBox.cpp b/layout/xul/base/src/nsBox.cpp
--- a/layout/xul/base/src/nsBox.cpp
+++ b/layout/xul/base/src/nsBox.cpp
@@ -513,17 +513,17 @@ nsBox::GetFlex(nsBoxLayoutState& aState)
 
 PRUint32
 nsIFrame::GetOrdinal(nsBoxLayoutState& aState)
 {
   PRUint32 ordinal = GetStyleXUL()->mBoxOrdinal;
 
   // When present, attribute value overrides CSS.
   nsIContent* content = GetContent();
-  if (content) {
+  if (content && content->IsXUL()) {
     PRInt32 error;
     nsAutoString value;
 
     content->GetAttr(kNameSpaceID_None, nsGkAtoms::ordinal, value);
     if (!value.IsEmpty()) {
       ordinal = value.ToInteger(&error);
     }
   }
@@ -807,17 +807,17 @@ nsIBox::AddCSSMinSize(nsBoxLayoutState& 
           "Non-zero percentage values not currently supported");
         aSize.height = 0;
         aHeightSet = PR_TRUE; // FIXME: should we really do this for
                               // nonzero values?
     }
     // calc() with percentage is treated like '0' (unset)
 
     nsIContent* content = aBox->GetContent();
-    if (content) {
+    if (content && content->IsXUL()) {
         nsAutoString value;
         PRInt32 error;
 
         content->GetAttr(kNameSpaceID_None, nsGkAtoms::minwidth, value);
         if (!value.IsEmpty())
         {
             value.Trim("%");
 
@@ -870,17 +870,17 @@ nsIBox::AddCSSMaxSize(nsIBox* aBox, nsSi
     const nsStyleCoord &maxHeight = position->mMaxHeight;
     if (maxHeight.ConvertsToLength()) {
         aSize.height = nsRuleNode::ComputeCoordPercentCalc(maxHeight, 0);
         aHeightSet = PR_TRUE;
     }
     // percentages and calc() with percentages are treated like 'none'
 
     nsIContent* content = aBox->GetContent();
-    if (content) {
+    if (content && content->IsXUL()) {
         nsAutoString value;
         PRInt32 error;
 
         content->GetAttr(kNameSpaceID_None, nsGkAtoms::maxwidth, value);
         if (!value.IsEmpty()) {
             value.Trim("%");
 
             nscoord val =
@@ -905,44 +905,38 @@ nsIBox::AddCSSMaxSize(nsIBox* aBox, nsSi
 }
 
 PRBool
 nsIBox::AddCSSFlex(nsBoxLayoutState& aState, nsIBox* aBox, nscoord& aFlex)
 {
     PRBool flexSet = PR_FALSE;
 
     // get the flexibility
+    aFlex = aBox->GetStyleXUL()->mBoxFlex;
+
+    // attribute value overrides CSS
     nsIContent* content = aBox->GetContent();
-    if (content) {
+    if (content && content->IsXUL()) {
         PRInt32 error;
         nsAutoString value;
 
         content->GetAttr(kNameSpaceID_None, nsGkAtoms::flex, value);
         if (!value.IsEmpty()) {
             value.Trim("%");
             aFlex = value.ToInteger(&error);
             flexSet = PR_TRUE;
         }
-        else {
-          // No attribute value.  Check CSS.
-          const nsStyleXUL* boxInfo = aBox->GetStyleXUL();
-          if (boxInfo->mBoxFlex > 0.0f) {
-            // The flex was defined in CSS.
-            aFlex = (nscoord)boxInfo->mBoxFlex;
-            flexSet = PR_TRUE;
-          }
-        }
     }
 
     if (aFlex < 0)
       aFlex = 0;
     if (aFlex >= nscoord_MAX)
       aFlex = nscoord_MAX - 1;
 
-    return flexSet;
+    return flexSet || aFlex > 0;
 }
 
 void
 nsBox::AddBorderAndPadding(nsSize& aSize)
 {
   AddBorderAndPadding(this, aSize);
 }
 
