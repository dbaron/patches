From: L. David Baron <dbaron@dbaron.org>

Keep reset and inherited style struct IDs separate.  (Bug 636039, at least for now)

diff --git a/layout/style/nsStyleStructFwd.h b/layout/style/nsStyleStructFwd.h
--- a/layout/style/nsStyleStructFwd.h
+++ b/layout/style/nsStyleStructFwd.h
@@ -45,25 +45,50 @@
 
 enum nsStyleStructID {
 
 /*
  * Define the constants eStyleStruct_Font, etc.
  *
  * The C++ standard, section 7.2, guarantees that enums begin with 0 and
  * increase by 1.
+ *
+ * We separate the IDs of Reset and Inherited structs so that we can use
+ * the IDs as indices (offset by nsStyleStructID_*_Start) into arrays of
+ * one type or the other.
  */
 
-#define STYLE_STRUCT(name, checkdata_cb, ctor_args) eStyleStruct_##name,
+nsStyleStructID_Inherited_Start = 0,
+nsStyleStructID_DUMMY1 = nsStyleStructID_Inherited_Start - 1,
+
+#define STYLE_STRUCT_INHERITED(name, checkdata_cb, ctor_args) \
+  eStyleStruct_##name,
+#define STYLE_STRUCT_RESET(name, checkdata_cb, ctor_args)
 #include "nsStyleStructList.h"
-#undef STYLE_STRUCT
+#undef STYLE_STRUCT_INHERITED
+#undef STYLE_STRUCT_RESET
+
+nsStyleStructID_Reset_Start,
+nsStyleStructID_DUMMY2 = nsStyleStructID_Reset_Start - 1,
+
+#define STYLE_STRUCT_RESET(name, checkdata_cb, ctor_args) \
+  eStyleStruct_##name,
+#define STYLE_STRUCT_INHERITED(name, checkdata_cb, ctor_args)
+#include "nsStyleStructList.h"
+#undef STYLE_STRUCT_INHERITED
+#undef STYLE_STRUCT_RESET
 
 // one past the end; length of 0-based list
 nsStyleStructID_Length,
 
+nsStyleStructID_Inherited_Count =
+  nsStyleStructID_Reset_Start - nsStyleStructID_Inherited_Start,
+nsStyleStructID_Reset_Count =
+  nsStyleStructID_Length - nsStyleStructID_Reset_Start,
+
 // An ID used for properties that are not in style structs.  This is
 // used only in some users of nsStyleStructID, such as
 // nsCSSProps::kSIDTable, including some that store SIDs in a bitfield,
 // such as nsCSSCompressedDataBlock::mStyleBits.
 eStyleStruct_BackendOnly = nsStyleStructID_Length
 
 };
 
diff --git a/layout/style/nsStyleStructList.h b/layout/style/nsStyleStructList.h
--- a/layout/style/nsStyleStructList.h
+++ b/layout/style/nsStyleStructList.h
@@ -61,93 +61,98 @@
 #endif
 
 #ifdef STYLE_STRUCT_TEST
 #define STYLE_STRUCT_TEST_CODE(c) c
 #else
 #define STYLE_STRUCT_TEST_CODE(c)
 #endif
 
+// The inherited structs must be listed before the Reset structs.
+// nsStyleStructID assumes this is the case, and callers other than
+// nsStyleStructFwd.h that want the structs in id-order just define
+// STYLE_STRUCT rather than including the file twice.
+
   STYLE_STRUCT_TEST_CODE(if (STYLE_STRUCT_TEST < 8) {)
   STYLE_STRUCT_TEST_CODE(  if (STYLE_STRUCT_TEST < 4) {)
   STYLE_STRUCT_TEST_CODE(    if (STYLE_STRUCT_TEST < 2) {)
   STYLE_STRUCT_TEST_CODE(      if (STYLE_STRUCT_TEST == 0) {)
 STYLE_STRUCT_INHERITED(Font, CheckFontCallback, (SSARG_PRESCONTEXT))
   STYLE_STRUCT_TEST_CODE(      } else {)
 STYLE_STRUCT_INHERITED(Color, CheckColorCallback, (SSARG_PRESCONTEXT))
   STYLE_STRUCT_TEST_CODE(      })
   STYLE_STRUCT_TEST_CODE(    } else {)
   STYLE_STRUCT_TEST_CODE(      if (STYLE_STRUCT_TEST == 2) {)
-STYLE_STRUCT_RESET(Background, nsnull, ())
+STYLE_STRUCT_INHERITED(List, nsnull, ())
   STYLE_STRUCT_TEST_CODE(      } else {)
-STYLE_STRUCT_INHERITED(List, nsnull, ())
+STYLE_STRUCT_INHERITED(Text, CheckTextCallback, ())
   STYLE_STRUCT_TEST_CODE(      })
   STYLE_STRUCT_TEST_CODE(    })
   STYLE_STRUCT_TEST_CODE(  } else {)
   STYLE_STRUCT_TEST_CODE(    if (STYLE_STRUCT_TEST < 6) {)
   STYLE_STRUCT_TEST_CODE(      if (STYLE_STRUCT_TEST == 4) {)
-STYLE_STRUCT_RESET(Position, nsnull, ())
+STYLE_STRUCT_INHERITED(Visibility, nsnull, (SSARG_PRESCONTEXT))
   STYLE_STRUCT_TEST_CODE(      } else {)
-STYLE_STRUCT_INHERITED(Text, CheckTextCallback, ())
+STYLE_STRUCT_INHERITED(Quotes, nsnull, ())
   STYLE_STRUCT_TEST_CODE(      })
   STYLE_STRUCT_TEST_CODE(    } else {)
   STYLE_STRUCT_TEST_CODE(      if (STYLE_STRUCT_TEST == 6) {)
-STYLE_STRUCT_RESET(TextReset, nsnull, ())
+STYLE_STRUCT_INHERITED(UserInterface, nsnull, ())
   STYLE_STRUCT_TEST_CODE(      } else {)
-STYLE_STRUCT_RESET(Display, nsnull, ())
+STYLE_STRUCT_INHERITED(TableBorder, nsnull, (SSARG_PRESCONTEXT))
   STYLE_STRUCT_TEST_CODE(      })
   STYLE_STRUCT_TEST_CODE(    })
   STYLE_STRUCT_TEST_CODE(  })
   STYLE_STRUCT_TEST_CODE(} else if (STYLE_STRUCT_TEST < 16) {)
   STYLE_STRUCT_TEST_CODE(  if (STYLE_STRUCT_TEST < 12) {)
   STYLE_STRUCT_TEST_CODE(    if (STYLE_STRUCT_TEST < 10) {)
   STYLE_STRUCT_TEST_CODE(      if (STYLE_STRUCT_TEST == 8) {)
-STYLE_STRUCT_INHERITED(Visibility, nsnull, (SSARG_PRESCONTEXT))
+STYLE_STRUCT_INHERITED(SVG, nsnull, ())
   STYLE_STRUCT_TEST_CODE(      } else {)
-STYLE_STRUCT_RESET(Content, nsnull, ())
+STYLE_STRUCT_RESET(Background, nsnull, ())
   STYLE_STRUCT_TEST_CODE(      })
   STYLE_STRUCT_TEST_CODE(    } else {)
   STYLE_STRUCT_TEST_CODE(      if (STYLE_STRUCT_TEST == 10) {)
-STYLE_STRUCT_INHERITED(Quotes, nsnull, ())
+STYLE_STRUCT_RESET(Position, nsnull, ())
   STYLE_STRUCT_TEST_CODE(      } else {)
-STYLE_STRUCT_INHERITED(UserInterface, nsnull, ())
+STYLE_STRUCT_RESET(TextReset, nsnull, ())
   STYLE_STRUCT_TEST_CODE(      })
   STYLE_STRUCT_TEST_CODE(    })
   STYLE_STRUCT_TEST_CODE(  } else {)
   STYLE_STRUCT_TEST_CODE(    if (STYLE_STRUCT_TEST < 14) {)
   STYLE_STRUCT_TEST_CODE(      if (STYLE_STRUCT_TEST == 12) {)
+STYLE_STRUCT_RESET(Display, nsnull, ())
+  STYLE_STRUCT_TEST_CODE(      } else {)
+STYLE_STRUCT_RESET(Content, nsnull, ())
+  STYLE_STRUCT_TEST_CODE(      })
+  STYLE_STRUCT_TEST_CODE(    } else {)
+  STYLE_STRUCT_TEST_CODE(      if (STYLE_STRUCT_TEST == 14) {)
 STYLE_STRUCT_RESET(UIReset, nsnull, ())
   STYLE_STRUCT_TEST_CODE(      } else {)
 STYLE_STRUCT_RESET(Table, nsnull, ())
   STYLE_STRUCT_TEST_CODE(      })
-  STYLE_STRUCT_TEST_CODE(    } else {)
-  STYLE_STRUCT_TEST_CODE(      if (STYLE_STRUCT_TEST == 14) {)
-STYLE_STRUCT_INHERITED(TableBorder, nsnull, (SSARG_PRESCONTEXT))
-  STYLE_STRUCT_TEST_CODE(      } else {)
-STYLE_STRUCT_RESET(Margin, nsnull, ())
-  STYLE_STRUCT_TEST_CODE(      })
   STYLE_STRUCT_TEST_CODE(    })
   STYLE_STRUCT_TEST_CODE(  })
   STYLE_STRUCT_TEST_CODE(} else if (STYLE_STRUCT_TEST < 20) {)
   STYLE_STRUCT_TEST_CODE(  if (STYLE_STRUCT_TEST < 18) {)
   STYLE_STRUCT_TEST_CODE(    if (STYLE_STRUCT_TEST == 16) {)
+STYLE_STRUCT_RESET(Margin, nsnull, ())
+  STYLE_STRUCT_TEST_CODE(    } else {)
 STYLE_STRUCT_RESET(Padding, nsnull, ())
-  STYLE_STRUCT_TEST_CODE(    } else {)
-STYLE_STRUCT_RESET(Border, nsnull, (SSARG_PRESCONTEXT))
   STYLE_STRUCT_TEST_CODE(    })
   STYLE_STRUCT_TEST_CODE(  } else {)
   STYLE_STRUCT_TEST_CODE(    if (STYLE_STRUCT_TEST == 18) {)
+STYLE_STRUCT_RESET(Border, nsnull, (SSARG_PRESCONTEXT))
+  STYLE_STRUCT_TEST_CODE(    } else {)
 STYLE_STRUCT_RESET(Outline, nsnull, (SSARG_PRESCONTEXT))
-  STYLE_STRUCT_TEST_CODE(    } else {)
-STYLE_STRUCT_RESET(XUL, nsnull, ())
   STYLE_STRUCT_TEST_CODE(    })
   STYLE_STRUCT_TEST_CODE(  })
   STYLE_STRUCT_TEST_CODE(} else if (STYLE_STRUCT_TEST < 22) {)
   STYLE_STRUCT_TEST_CODE(  if (STYLE_STRUCT_TEST == 20) {)
-STYLE_STRUCT_INHERITED(SVG, nsnull, ())
+STYLE_STRUCT_RESET(XUL, nsnull, ())
   STYLE_STRUCT_TEST_CODE(  } else {)
 STYLE_STRUCT_RESET(SVGReset,nsnull, ())
   STYLE_STRUCT_TEST_CODE(  })
   STYLE_STRUCT_TEST_CODE(} else {)
   STYLE_STRUCT_TEST_CODE(  NS_ASSERTION(STYLE_STRUCT_TEST == 22, "out of range");)
   STYLE_STRUCT_RESET(Column, nsnull, (SSARG_PRESCONTEXT))
 STYLE_STRUCT_TEST_CODE(})
       
