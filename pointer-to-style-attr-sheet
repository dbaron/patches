From: L. David Baron <dbaron@dbaron.org>

Bug 1221436 patch 1 - Have a pointer back from the css::Declaration for style attributes to the nsHTMLCSSStyleSheet.

diff --git a/dom/base/nsAttrValue.cpp b/dom/base/nsAttrValue.cpp
--- a/dom/base/nsAttrValue.cpp
+++ b/dom/base/nsAttrValue.cpp
@@ -1691,16 +1691,17 @@ nsAttrValue::ParseStyleAttribute(const n
   nsCSSParser cssParser(cssLoader);
 
   RefPtr<css::StyleRule> rule;
   cssParser.ParseStyleAttribute(aString, docURI, baseURI,
                                 aElement->NodePrincipal(),
                                 getter_AddRefs(rule));
   if (rule) {
     rule->SetHTMLCSSStyleSheet(sheet);
+    rule->GetDeclaration()->SetHTMLCSSStyleSheet(sheet);
     SetTo(rule, &aString);
     if (cachingAllowed) {
       MiscContainer* cont = GetMiscContainer();
       cont->Cache();
     }
 
     return true;
   }
diff --git a/layout/style/Declaration.h b/layout/style/Declaration.h
--- a/layout/style/Declaration.h
+++ b/layout/style/Declaration.h
@@ -28,16 +28,18 @@
 #include "nsTArray.h"
 #include <stdio.h>
 
 // feec07b8-3fe6-491e-90d5-cc93f853e048
 #define NS_CSS_DECLARATION_IMPL_CID \
 { 0xfeec07b8, 0x3fe6, 0x491e, \
   { 0x90, 0xd5, 0xcc, 0x93, 0xf8, 0x53, 0xe0, 0x48 } }
 
+class nsHTMLCSSStyleSheet;
+
 namespace mozilla {
 namespace css {
 
 class Rule;
 class Declaration;
 
 /**
  * ImportantStyleData is the implementation of nsIStyleRule (a source of
@@ -315,16 +317,24 @@ public:
   void SetOwningRule(Rule* aRule) {
     MOZ_ASSERT(!mOwningRule || !aRule,
                "should never overwrite one rule with another");
     mOwningRule = aRule;
   }
 
   Rule* GetOwningRule() { return mOwningRule; }
 
+  void SetHTMLCSSStyleSheet(nsHTMLCSSStyleSheet* aHTMLCSSStyleSheet) {
+    MOZ_ASSERT(!mHTMLCSSStyleSheet || !aHTMLCSSStyleSheet,
+               "should never overwrite one sheet with another");
+    mHTMLCSSStyleSheet = aHTMLCSSStyleSheet;
+  }
+
+  nsHTMLCSSStyleSheet* GetHTMLCSSStyleSheet() { return mHTMLCSSStyleSheet; }
+
   ImportantStyleData* GetImportantStyleData() {
     if (HasImportantData()) {
       return &mImportantStyleData;
     }
     return nullptr;
   }
 
 private:
@@ -400,16 +410,20 @@ private:
   nsAutoPtr<CSSVariableDeclarations> mVariables;
 
   // may be null
   nsAutoPtr<CSSVariableDeclarations> mImportantVariables;
 
   // The style rule that owns this declaration.  May be null.
   Rule* mOwningRule;
 
+  // The nsHTMLCSSStyleSheet that is responsible for this declaration.
+  // Only non-null for style attributes.
+  nsHTMLCSSStyleSheet* mHTMLCSSStyleSheet;
+
   friend class ImportantStyleData;
   ImportantStyleData mImportantStyleData;
 
   // set when declaration put in the rule tree;
   // also by ToString (hence the 'mutable').
   mutable bool mImmutable;
 };
 
diff --git a/layout/style/nsHTMLCSSStyleSheet.cpp b/layout/style/nsHTMLCSSStyleSheet.cpp
--- a/layout/style/nsHTMLCSSStyleSheet.cpp
+++ b/layout/style/nsHTMLCSSStyleSheet.cpp
@@ -26,17 +26,22 @@ namespace {
 
 PLDHashOperator
 ClearAttrCache(const nsAString& aKey, MiscContainer*& aValue, void*)
 {
   // Ideally we'd just call MiscContainer::Evict, but we can't do that since
   // we're iterating the hashtable.
   MOZ_ASSERT(aValue->mType == nsAttrValue::eCSSStyleRule);
 
-  aValue->mValue.mCSSStyleRule->SetHTMLCSSStyleSheet(nullptr);
+  css::StyleRule* styleRule = aValue->mValue.mCSSStyleRule;
+  styleRule->SetHTMLCSSStyleSheet(nullptr);
+  css::Declaration* declaration = styleRule->GetDeclaration();
+  if (declaration) {
+    declaration->SetHTMLCSSStyleSheet(nullptr);
+  }
   aValue->mValue.mCached = 0;
 
   return PL_DHASH_REMOVE;
 }
 
 } // namespace
 
 nsHTMLCSSStyleSheet::nsHTMLCSSStyleSheet()
