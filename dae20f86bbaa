
# HG changeset patch
# User Jan de Mooij <jdemooij@mozilla.com>
# Date 1445414977 -7200
# Node ID dae20f86bbaad1e8b432afd01f925e9890757378
# Parent  a286c89173e5352fc8831015d7e286fb513fc427
Bug 1216151 - Ensure the object has a non-lazy group in SetPropertyIC::tryAttachStub. r=efaust

diff --git a/js/src/jit-test/tests/ion/bug1216151.js b/js/src/jit-test/tests/ion/bug1216151.js
new file mode 100644
--- /dev/null
+++ b/js/src/jit-test/tests/ion/bug1216151.js
@@ -0,0 +1,6 @@
+new function() {
+    var x = {};
+    (function() {
+        return x;
+    })();
+}
diff --git a/js/src/jit/IonCaches.cpp b/js/src/jit/IonCaches.cpp
--- a/js/src/jit/IonCaches.cpp
+++ b/js/src/jit/IonCaches.cpp
@@ -3093,16 +3093,19 @@ CanInlineSetPropTypeCheck(JSObject* obj,
     *checkTypeset = shouldCheck;
     return true;
 }
 
 static bool
 IsPropertySetInlineable(NativeObject* obj, HandleId id, MutableHandleShape pshape,
                         ConstantOrRegister val, bool needsTypeBarrier, bool* checkTypeset)
 {
+    // CanInlineSetPropTypeCheck assumes obj has a non-lazy group.
+    MOZ_ASSERT(!obj->hasLazyGroup());
+
     // Do a pure non-proto chain climbing lookup. See note in
     // CanAttachNativeGetProp.
     pshape.set(obj->lookupPure(id));
 
     if (!pshape)
         return false;
 
     if (!pshape->hasSlot())
@@ -3528,37 +3531,39 @@ bool
 SetPropertyIC::update(JSContext* cx, HandleScript outerScript, size_t cacheIndex, HandleObject obj,
                       HandleValue value)
 {
     IonScript* ion = outerScript->ionScript();
     SetPropertyIC& cache = ion->getCache(cacheIndex).toSetProperty();
     RootedPropertyName name(cx, cache.name());
     RootedId id(cx, AtomToId(name));
 
-    bool emitted = false;
-    bool tryNativeAddSlot = false;
-    if (!cache.tryAttachStub(cx, outerScript, ion, obj, id, &emitted, &tryNativeAddSlot))
-        return false;
-
     // Remember the old group and shape if we may attach an add-property stub.
+    // Also, some code under tryAttachStub depends on obj having a non-lazy
+    // group, see for instance CanInlineSetPropTypeCheck.
     RootedObjectGroup oldGroup(cx);
     RootedShape oldShape(cx);
-    if (!emitted) {
+    if (cache.canAttachStub()) {
         oldGroup = obj->getGroup(cx);
         if (!oldGroup)
             return false;
 
         oldShape = obj->maybeShape();
         if (obj->is<UnboxedPlainObject>()) {
             MOZ_ASSERT(!oldShape);
             if (UnboxedExpandoObject* expando = obj->as<UnboxedPlainObject>().maybeExpando())
                 oldShape = expando->lastProperty();
         }
     }
 
+    bool emitted = false;
+    bool tryNativeAddSlot = false;
+    if (!cache.tryAttachStub(cx, outerScript, ion, obj, id, &emitted, &tryNativeAddSlot))
+        return false;
+
     // Set/Add the property on the object, the inlined cache are setup for the next execution.
     if (JSOp(*cache.pc()) == JSOP_INITGLEXICAL) {
         RootedScript script(cx);
         jsbytecode* pc;
         cache.getScriptedLocation(&script, &pc);
         MOZ_ASSERT(!script->hasNonSyntacticScope());
         InitGlobalLexicalOperation(cx, &cx->global()->lexicalScope(), script, pc, value);
     } else {
