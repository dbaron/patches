# HG changeset patch
# User Boris Zbarsky <bzbarsky@mit.edu>
# Date 1308979307 14400
# Parent  0e41d07a703f19224f60b01577b2cbb5708046c9
Bug 667079.  Make sure to set the right containing block size for inner tables no matter what.  r=dbaron

diff --git a/layout/generic/ReflowInput.cpp b/layout/generic/ReflowInput.cpp
--- a/layout/generic/ReflowInput.cpp
+++ b/layout/generic/ReflowInput.cpp
@@ -2125,17 +2125,20 @@ ReflowInput::ComputeContainingBlockRecta
   } else {
     // an element in quirks mode gets a containing block based on looking for a
     // parent with a non-auto height if the element has a percent height
     // Note: We don't emulate this quirk for percents in calc() or in
     // vertical writing modes.
     if (!wm.IsVertical() &&
         NS_AUTOHEIGHT == cbSize.BSize(wm)) {
       if (eCompatibility_NavQuirks == aPresContext->CompatibilityMode() &&
-          mStylePosition->mHeight.GetUnit() == eStyleUnit_Percent) {
+          (mStylePosition->mHeight.GetUnit() == eStyleUnit_Percent ||
+           (frame->GetType() == nsGkAtoms::tableOuterFrame &&
+            frame->PrincipalChildList().FirstChild()->StylePosition()->
+              mHeight.GetUnit() == eStyleUnit_Percent))) {
         cbSize.BSize(wm) = CalcQuirkContainingBlockHeight(aContainingBlockRI);
       }
     }
   }
 
   return cbSize.ConvertTo(GetWritingMode(), wm);
 }
 
@@ -2506,16 +2509,20 @@ ReflowInput::InitConstraints(nsPresConte
       // margin calculations.
       if (isBlock && !IsSideCaption(mFrame, mStyleDisplay, cbwm) &&
           mStyleDisplay->mDisplay != StyleDisplay::InlineTable &&
           !alignCB->IsFlexOrGridContainer()) {
         CalculateBlockSideMargins(aFrameType);
       }
     }
   }
+
+  // Save our containing block dimensions
+  mContainingBlockWidth = aContainingBlockWidth;
+  mContainingBlockHeight = aContainingBlockHeight;
 }
 
 static void
 UpdateProp(nsIFrame* aFrame,
            const FramePropertyDescriptor<nsMargin>* aProperty,
            bool aNeeded,
            nsMargin& aNewValue)
 {
diff --git a/layout/generic/ReflowInput.h b/layout/generic/ReflowInput.h
--- a/layout/generic/ReflowInput.h
+++ b/layout/generic/ReflowInput.h
@@ -587,16 +587,20 @@ private:
   // XXXldb The width ones here should go; they should be needed only
   // internally.
   MOZ_INIT_OUTSIDE_CTOR
   nscoord          mComputedMinWidth, mComputedMaxWidth;
   MOZ_INIT_OUTSIDE_CTOR
   nscoord          mComputedMinHeight, mComputedMaxHeight;
 
 public:
+  // Our saved containing block dimensions.
+  MOZ_INIT_OUTSIDE_CTOR
+  nscoord          mContainingBlockWidth, mContainingBlockHeight;
+
   // Cached pointers to the various style structs used during intialization
   MOZ_INIT_OUTSIDE_CTOR
   const nsStyleDisplay*    mStyleDisplay;
   MOZ_INIT_OUTSIDE_CTOR
   const nsStyleVisibility* mStyleVisibility;
   MOZ_INIT_OUTSIDE_CTOR
   const nsStylePosition*   mStylePosition;
   MOZ_INIT_OUTSIDE_CTOR
diff --git a/layout/reftests/bugs/10209-1.html b/layout/reftests/bugs/10209-1.html
--- a/layout/reftests/bugs/10209-1.html
+++ b/layout/reftests/bugs/10209-1.html
@@ -3,14 +3,14 @@
 @font-face {
   font-family: Ahem;
   src: url(../fonts/Ahem.ttf);
 }
 * {
   font-family: Ahem;
 }
 </style>
-<body style="font-size: 100px; padding-top: 5px">
-  <div style="position: relative; display: inline;">
-    <table style="height: 50%; position: absolute; width: 50px; background: green">
+<body style="font-size: 100px; line-height: 1">
+  <div style="position: relative; display: inline; color: white">x
+    <table style="height: 50%; position: absolute; width: 50px; background: green; top: 0; left: 0">
     </table>
   </div>
 </body>
diff --git a/layout/reftests/bugs/667079-1-ref.html b/layout/reftests/bugs/667079-1-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/667079-1-ref.html
@@ -0,0 +1,4 @@
+<!DOCTYPE HTML>
+<body style="font-size: 100px;">
+  <div style="position: relative; display: inline; background: red;">X<table style="height: 100%; position: absolute; width: 100%; background: green; top: 0; left: 0"></table></div>
+</body>
diff --git a/layout/reftests/bugs/667079-1.html b/layout/reftests/bugs/667079-1.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/667079-1.html
@@ -0,0 +1,5 @@
+<!DOCTYPE HTML>
+<body onload="document.body.style.fontSize = '100px'"
+      style="font-size: 50px;">
+  <div style="position: relative; display: inline; background: red;">X<table style="height: 100%; position: absolute; width: 100%; background: green; top: 0; left: 0"></table></div>
+</body>
diff --git a/layout/reftests/bugs/reftest.list b/layout/reftests/bugs/reftest.list
--- a/layout/reftests/bugs/reftest.list
+++ b/layout/reftests/bugs/reftest.list
@@ -12,19 +12,19 @@
 == 9458-width-2a.html 9458-width-2-ref.html
 == 9458-width-2b.html 9458-width-2-ref.html
 == 9458-zorder-1.html 9458-zorder-ref.html
 == 9458-zorder-2.html 9458-zorder-ref.html
 == 9458-zorder-3.html 9458-zorder-ref-inline.html
 == 9458-zorder-4.html 9458-zorder-ref-inline-block.html
 == 9458-zorder-5.html 9458-zorder-ref-inline-block.html
 == 10036-1.html 10036-1-ref.html
-skip-if(!cocoaWidget) fails-if(styloVsGecko) HTTP(..) == 10209-1.html 10209-ref.html # Bug 667079
+HTTP(..) == 10209-1.html 10209-ref.html
 HTTP(..) == 10209-2.html 10209-ref.html
-asserts(2) skip-if(!cocoaWidget) HTTP(..) == 10209-3.html 10209-3-ref.html # Assertions: bug 666606, skip because of bug 667079
+HTTP(..) == 10209-3.html 10209-3-ref.html
 == 18217-basic-1.html 18217-basic-1-ref.html
 == 18217-basic-2a.html 18217-basic-2-ref.html
 == 18217-basic-2b.html 18217-basic-2-ref.html
 == 18217-valign-1.html 18217-valign-1-ref.html
 == 18217-height-1.html 18217-height-1-ref.html
 == 18217-height-2.html 18217-height-2-ref.html
 == 18217-width-1a.html 18217-width-1-ref.html
 == 18217-width-1b.html 18217-width-1-ref.html
@@ -1686,16 +1686,17 @@ fuzzy-if(skiaContent,1,4500) == 654950-1
 == 655549-1.html 655549-1-ref.html
 == 655836-1.html 655836-1-ref.html
 != 656875.html about:blank
 == 658952.html 658952-ref.html
 fuzzy-if(skiaContent,1,3500) == 660682-1.html 660682-1-ref.html
 fuzzy-if(d2d,1,256) skip-if(Android) fuzzy-if(skiaContent,1,68000) == 664127-1.xul 664127-1-ref.xul # Android: Intermittent failures - bug 1019131
 == 665597-1.html 665597-1-ref.html
 == 665597-2.html 665597-2-ref.html
+== 667079-1.html 667079-1-ref.html
 == 668319-1.xul about:blank
 != 669015-1.xul 669015-1-notref.xul
 skip-if(azureSkiaGL) == 670442-1.html 670442-1-ref.html
 == 670467-1.html 670467-1-ref.html
 fails-if(styloVsGecko) == 670467-2.html 670467-2-ref.html
 == 690164-1.html 690164-1-ref.html
 == 690643-1.html 690643-1-ref.html
 != 691087-1.html 691087-1-ref.html
diff --git a/layout/tables/nsTableWrapperFrame.cpp b/layout/tables/nsTableWrapperFrame.cpp
--- a/layout/tables/nsTableWrapperFrame.cpp
+++ b/layout/tables/nsTableWrapperFrame.cpp
@@ -228,16 +228,17 @@ nsTableWrapperFrame::GetParentStyleConte
 
   return (*aProviderFrame = InnerTableFrame())->StyleContext();
 }
 
 // INCREMENTAL REFLOW HELPER FUNCTIONS
 
 void
 nsTableWrapperFrame::InitChildReflowInput(nsPresContext& aPresContext,
+                                          const ReflowInput& aOuterRI,
                                           ReflowInput&   aReflowInput)
 {
   nsMargin collapseBorder;
   nsMargin collapsePadding(0,0,0,0);
   nsMargin* pCollapseBorder  = nullptr;
   nsMargin* pCollapsePadding = nullptr;
   Maybe<LogicalSize> cbSize;
   if (aReflowInput.mFrame == InnerTableFrame()) {
@@ -251,16 +252,23 @@ nsTableWrapperFrame::InitChildReflowInpu
     // Propagate our stored CB size if present, minus any margins.
     if (!HasAnyStateBits(NS_FRAME_OUT_OF_FLOW)) {
       LogicalSize* cb = GetProperty(GridItemCBSizeProperty());
       if (cb) {
         cbSize.emplace(*cb);
         *cbSize -= aReflowInput.ComputedLogicalMargin().Size(wm);
       }
     }
+    if (!cbSize) {
+      // For inner table frames, the containing block is the same as for
+      // the outer table frame.
+      cbSize.emplace(LogicalSize(aOuterRI.mWritingMode,
+                                 nsSize(aOuterRI.mContainingBlockWidth,
+                                        aOuterRI.mContainingBlockHeight)));
+    }
   }
   aReflowInput.Init(&aPresContext, cbSize.ptrOr(nullptr), pCollapseBorder,
                     pCollapsePadding);
 }
 
 // get the margin and padding data. ReflowInput doesn't handle the
 // case of auto margins
 void
@@ -277,17 +285,17 @@ nsTableWrapperFrame::GetChildMargin(nsPr
   // will not be computed at this time.
 
   // create and init the child reflow state
   // XXX We really shouldn't construct a reflow state to do this.
   WritingMode wm = aOuterRI.GetWritingMode();
   LogicalSize availSize(wm, aAvailISize, aOuterRI.AvailableSize(wm).BSize(wm));
   ReflowInput childRI(aPresContext, aOuterRI, aChildFrame, availSize,
                             nullptr, ReflowInput::CALLER_WILL_INIT);
-  InitChildReflowInput(*aPresContext, childRI);
+  InitChildReflowInput(*aPresContext, aOuterRI, childRI);
 
   aMargin = childRI.ComputedLogicalMargin();
 }
 
 static nsSize
 GetContainingBlockSize(const ReflowInput& aOuterRI)
 {
   nsSize size(0,0);
@@ -787,17 +795,17 @@ nsTableWrapperFrame::OuterBeginReflowChi
       availBSize -= margin.BEnd(wm);
     }
   }
   LogicalSize availSize(wm, aAvailISize, availBSize);
   // create and init the child reflow state, using passed-in Maybe<>,
   // so that caller can use it after we return.
   aChildRI.emplace(aPresContext, aOuterRI, aChildFrame, availSize,
                   nullptr, ReflowInput::CALLER_WILL_INIT);
-  InitChildReflowInput(*aPresContext, *aChildRI);
+  InitChildReflowInput(*aPresContext, aOuterRI, *aChildRI);
 
   // see if we need to reset top-of-page due to a caption
   if (aChildRI->mFlags.mIsTopOfPage &&
       mCaptionFrames.FirstChild() == aChildFrame) {
     uint8_t captionSide = GetCaptionSide();
     if (captionSide == NS_STYLE_CAPTION_SIDE_BOTTOM ||
         captionSide == NS_STYLE_CAPTION_SIDE_BOTTOM_OUTSIDE) {
       aChildRI->mFlags.mIsTopOfPage = false;
diff --git a/layout/tables/nsTableWrapperFrame.h b/layout/tables/nsTableWrapperFrame.h
--- a/layout/tables/nsTableWrapperFrame.h
+++ b/layout/tables/nsTableWrapperFrame.h
@@ -195,16 +195,17 @@ public:
   NS_DECLARE_FRAME_PROPERTY_DELETABLE(GridItemCBSizeProperty, mozilla::LogicalSize);
 
 protected:
 
   explicit nsTableWrapperFrame(nsStyleContext* aContext, ClassID aID = kClassID);
   virtual ~nsTableWrapperFrame();
 
   void InitChildReflowInput(nsPresContext&     aPresContext,
+                            const ReflowInput& aOuterRS,
                             ReflowInput& aReflowInput);
 
   // Get a NS_STYLE_CAPTION_SIDE_* value, or NO_SIDE if no caption is present.
   // (Remember that caption-side values are interpreted logically, despite
   // having "physical" names.)
   uint8_t GetCaptionSide();
 
   bool HasSideCaption() {
