From: L. David Baron <dbaron@dbaron.org>

Existing callers call IsCSS2PseudoElement on non-pseudo-elements (in particular, anon boxes), so we need to make that not assert and be deterministic.  (Bug 521044)  r=bzbarsky

diff --git a/layout/style/nsCSSPseudoElements.cpp b/layout/style/nsCSSPseudoElements.cpp
--- a/layout/style/nsCSSPseudoElements.cpp
+++ b/layout/style/nsCSSPseudoElements.cpp
@@ -37,16 +37,17 @@
  * ***** END LICENSE BLOCK ***** */
 
 /* atom list for CSS pseudo-elements */
 
 #include "nsCSSPseudoElements.h"
 #include "nsAtomListUtils.h"
 #include "nsStaticAtom.h"
 #include "nsMemory.h"
+#include "nsCSSAnonBoxes.h"
 
 // define storage for all atoms
 #define CSS_PSEUDO_ELEMENT(name_, value_, flags_) \
   nsICSSPseudoElement* nsCSSPseudoElements::name_;
 #include "nsCSSPseudoElementList.h"
 #undef CSS_PSEUDO_ELEMENT
 
 static const nsStaticAtom CSSPseudoElements_info[] = {
@@ -75,16 +76,35 @@ void nsCSSPseudoElements::AddRefAtoms()
 }
 
 PRBool nsCSSPseudoElements::IsPseudoElement(nsIAtom *aAtom)
 {
   return nsAtomListUtils::IsMember(aAtom, CSSPseudoElements_info,
                                    NS_ARRAY_LENGTH(CSSPseudoElements_info));
 }
 
+/* static */ PRBool
+nsCSSPseudoElements::IsCSS2PseudoElement(nsIAtom *aAtom)
+{
+  // We don't implement this using PseudoElementHasFlags because callers
+  // want to pass things that could be anon boxes.
+  NS_ASSERTION(nsCSSPseudoElements::IsPseudoElement(aAtom) ||
+               nsCSSAnonBoxes::IsAnonBox(aAtom),
+               "must be pseudo element or anon box");
+  PRBool result = aAtom == nsCSSPseudoElements::after ||
+                  aAtom == nsCSSPseudoElements::before ||
+                  aAtom == nsCSSPseudoElements::firstLetter ||
+                  aAtom == nsCSSPseudoElements::firstLine;
+  NS_ASSERTION(nsCSSAnonBoxes::IsAnonBox(aAtom) ||
+               result ==
+                 PseudoElementHasFlags(aAtom, CSS_PSEUDO_ELEMENT_IS_CSS2),
+               "result doesn't match flags");
+  return result;
+}
+
 /* static */ PRUint32
 nsCSSPseudoElements::FlagsForPseudoElement(nsIAtom *aAtom)
 {
   PRUint32 i;
   for (i = 0; i < NS_ARRAY_LENGTH(CSSPseudoElements_info); ++i) {
     if (*CSSPseudoElements_info[i].mAtom == aAtom) {
       break;
     }
diff --git a/layout/style/nsCSSPseudoElements.h b/layout/style/nsCSSPseudoElements.h
--- a/layout/style/nsCSSPseudoElements.h
+++ b/layout/style/nsCSSPseudoElements.h
@@ -63,19 +63,17 @@ class nsICSSPseudoElement : public nsIAt
 
 class nsCSSPseudoElements {
 public:
 
   static void AddRefAtoms();
 
   static PRBool IsPseudoElement(nsIAtom *aAtom);
 
-  static PRBool IsCSS2PseudoElement(nsIAtom *aAtom) {
-    return PseudoElementHasFlags(aAtom, CSS_PSEUDO_ELEMENT_IS_CSS2);
-  }
+  static PRBool IsCSS2PseudoElement(nsIAtom *aAtom);
 
   static PRBool PseudoElementContainsElements(nsIAtom *aAtom) {
     return PseudoElementHasFlags(aAtom, CSS_PSEUDO_ELEMENT_CONTAINS_ELEMENTS);
   }
 
 #define CSS_PSEUDO_ELEMENT(_name, _value, _flags) \
   static nsICSSPseudoElement* _name;
 #include "nsCSSPseudoElementList.h"
