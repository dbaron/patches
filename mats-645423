From: Mats Palmgren <matspal@gmail.com>

Bug 645423 - Initialize the poison value also for DEBUG_TRACEMALLOC_PRESARENA builds.  r=dbaron

diff --git a/layout/base/nsPresArena.cpp b/layout/base/nsPresArena.cpp
--- a/layout/base/nsPresArena.cpp
+++ b/layout/base/nsPresArena.cpp
@@ -77,18 +77,16 @@
 #  ifdef MAP_ANONYMOUS
 #   define MAP_ANON MAP_ANONYMOUS
 #  else
 #   error "Don't know how to get anonymous memory"
 #  endif
 # endif
 #endif
 
-#ifndef DEBUG_TRACEMALLOC_PRESARENA
-
 // Size to use for PLArena block allocations.
 static const size_t ARENA_PAGE_SIZE = 4096;
 
 // Freed memory is filled with a poison value, which we arrange to
 // form a pointer either to an always-unmapped region of the address
 // space, or to a page that has been reserved and rendered
 // inaccessible via OS primitives.  See tests/TestPoisonArea.cpp for
 // extensive discussion of the requirements for this page.  The code
@@ -270,16 +268,17 @@ ARENA_POISON_init()
                             nsPrintfCString(17, "%.16llx", PRUint64(rgnbase)));
     cr->AnnotateCrashReport(NS_LITERAL_CSTRING("FramePoisonSize"),
                             nsPrintfCString("%lu", PRUint32(rgnsize)));
   }
 #endif
   return PR_SUCCESS;
 }
 
+#ifndef DEBUG_TRACEMALLOC_PRESARENA
 
 // All keys to this hash table fit in 32 bits (see below) so we do not
 // bother actually hashing them.
 
 namespace {
 
 class FreeList : public PLDHashEntryHdr
 {
@@ -400,20 +399,27 @@ nsPresArena::Size()
     arena = arena->next;
   }
 
   return result;
 }
 
 #else
 // Stub implementation that forwards everything to malloc and does not
-// poison.
+// poison allocations (it still initializes the poison value though,
+// for external use through GetPoisonValue()).
 
 struct nsPresArena::State
 {
+
+  State()
+  {
+    PR_CallOnce(&ARENA_POISON_guard, ARENA_POISON_init);
+  }
+
   void* Allocate(PRUint32 /* unused */, size_t aSize)
   {
     return PR_Malloc(aSize);
   }
 
   void Free(PRUint32 /* unused */, void* aPtr)
   {
     PR_Free(aPtr);
