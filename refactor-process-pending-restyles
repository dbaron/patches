From: L. David Baron <dbaron@dbaron.org>

Bug 896138 patch 10:  Move beginning and ending of ProcessPendingRestyles into helper functions on the RestyleManager.

diff --git a/layout/base/RestyleManager.cpp b/layout/base/RestyleManager.cpp
--- a/layout/base/RestyleManager.cpp
+++ b/layout/base/RestyleManager.cpp
@@ -1394,16 +1394,42 @@ RestyleManager::ProcessPendingRestyles()
     // We probably wasted a lot of work up above, but this seems safest
     // and it should be rarely used.
     // This might add us as a refresh observer again; that's ok.
     RebuildAllStyleData(nsChangeHint(0));
   }
 }
 
 void
+RestyleManager::BeginProcessingRestyles()
+{
+  // Make sure to not rebuild quote or counter lists while we're
+  // processing restyles
+  mPresContext->FrameConstructor()->BeginUpdate();
+
+  mInStyleRefresh = true;
+}
+
+void
+RestyleManager::EndProcessingRestyles()
+{
+  FlushOverflowChangedTracker();
+
+  // Set mInStyleRefresh to false now, since the EndUpdate call might
+  // add more restyles.
+  mInStyleRefresh = false;
+
+  mPresContext->FrameConstructor()->EndUpdate();
+
+#ifdef DEBUG
+  mPresContext->PresShell()->VerifyStyleTree();
+#endif
+}
+
+void
 RestyleManager::PostRestyleEventCommon(Element* aElement,
                                        nsRestyleHint aRestyleHint,
                                        nsChangeHint aMinChangeHint,
                                        bool aForAnimation)
 {
   if (MOZ_UNLIKELY(mPresContext->PresShell()->IsDestroying())) {
     return;
   }
diff --git a/layout/base/RestyleManager.h b/layout/base/RestyleManager.h
--- a/layout/base/RestyleManager.h
+++ b/layout/base/RestyleManager.h
@@ -140,16 +140,22 @@ public:
   // CreateNeededFrames.
   // Note: It's the caller's responsibility to make sure to wrap a
   // ProcessPendingRestyles call in a view update batch and a script blocker.
   // This function does not call ProcessAttachedQueue() on the binding manager.
   // If the caller wants that to happen synchronously, it needs to handle that
   // itself.
   void ProcessPendingRestyles();
 
+  // ProcessPendingRestyles calls into one of our RestyleTracker
+  // objects.  It then calls back to these functions at the beginning
+  // and end of its work.
+  void BeginProcessingRestyles();
+  void EndProcessingRestyles();
+
   // Rebuilds all style data by throwing out the old rule tree and
   // building a new one, and additionally applying aExtraHint (which
   // must not contain nsChangeHint_ReconstructFrame) to the root frame.
   void RebuildAllStyleData(nsChangeHint aExtraHint);
 
   // Helper that does part of the work of RebuildAllStyleData, shared by
   // RestyleElement for 'rem' handling.
   void DoRebuildAllStyleData(RestyleTracker& aRestyleTracker,
@@ -174,21 +180,16 @@ public:
     PostRestyleEventCommon(aElement, aRestyleHint, aMinChangeHint, true);
   }
 
   void PostRestyleEventForLazyConstruction()
   {
     PostRestyleEventInternal(true);
   }
 
-  void SetInStyleRefresh(bool aInStyleRefresh)
-  {
-    mInStyleRefresh = aInStyleRefresh;
-  }
-
   void FlushOverflowChangedTracker()
   {
     mOverflowChangedTracker.Flush();
   }
 
 private:
   enum DesiredA11yNotifications {
     eSkipNotifications,
diff --git a/layout/base/RestyleTracker.cpp b/layout/base/RestyleTracker.cpp
--- a/layout/base/RestyleTracker.cpp
+++ b/layout/base/RestyleTracker.cpp
@@ -130,21 +130,18 @@ RestyleTracker::ProcessOneRestyle(Elemen
     mRestyleManager->ProcessRestyledFrames(changeList);
   }
 }
 
 void
 RestyleTracker::DoProcessRestyles()
 {
   PROFILER_LABEL("CSS", "ProcessRestyles");
-  // Make sure to not rebuild quote or counter lists while we're
-  // processing restyles
-  mRestyleManager->PresContext()->FrameConstructor()->BeginUpdate();
 
-  mRestyleManager->SetInStyleRefresh(true);
+  mRestyleManager->BeginProcessingRestyles();
 
   // loop so that we process any restyle events generated by processing
   while (mPendingRestyles.Count()) {
     if (mHaveLaterSiblingRestyles) {
       // Convert them to individual restyles on all the later siblings
       nsAutoTArray<nsRefPtr<Element>, RESTYLE_ARRAY_STACKSIZE> laterSiblingArr;
       LaterSiblingCollector siblingCollector = { this, &laterSiblingArr };
       mPendingRestyles.Enumerate(CollectLaterSiblings, &siblingCollector);
@@ -234,27 +231,17 @@ RestyleTracker::DoProcessRestyles()
            ++currentRestyle) {
         ProcessOneRestyle(currentRestyle->mElement,
                           currentRestyle->mRestyleHint,
                           currentRestyle->mChangeHint);
       }
     }
   }
 
-  mRestyleManager->FlushOverflowChangedTracker();
-
-  // SetInStyleRefresh(false) now, since the EndUpdate call might
-  // add more restyles.
-  mRestyleManager->SetInStyleRefresh(false);
-
-  mRestyleManager->PresContext()->FrameConstructor()->EndUpdate();
-
-#ifdef DEBUG
-  mRestyleManager->PresContext()->PresShell()->VerifyStyleTree();
-#endif
+  mRestyleManager->EndProcessingRestyles();
 }
 
 bool
 RestyleTracker::GetRestyleData(Element* aElement, RestyleData* aData)
 {
   NS_PRECONDITION(aElement->GetCurrentDoc() == Document(),
                   "Unexpected document; this will lead to incorrect behavior!");
 
