From: Zack Weinberg <zweinberg@mozilla.com>

Bug 510651:  Fold nsIFrameDebug into nsFrame.  r=dbaron  sr=mrbkap

diff --git a/accessible/src/base/nsAccessible.cpp b/accessible/src/base/nsAccessible.cpp
--- a/accessible/src/base/nsAccessible.cpp
+++ b/accessible/src/base/nsAccessible.cpp
@@ -89,17 +89,16 @@
 #include "nsIMutableArray.h"
 #include "nsIObserverService.h"
 #include "nsIServiceManager.h"
 #include "nsWhitespaceTokenizer.h"
 #include "nsAttrName.h"
 #include "nsNetUtil.h"
 
 #ifdef NS_DEBUG
-#include "nsIFrameDebug.h"
 #include "nsIDOMCharacterData.h"
 #endif
 
 /**
  * nsAccessibleDOMStringList implementation
  */
 nsAccessibleDOMStringList::nsAccessibleDOMStringList()
 {
diff --git a/extensions/layout-debug/src/nsLayoutDebuggingTools.cpp b/extensions/layout-debug/src/nsLayoutDebuggingTools.cpp
--- a/extensions/layout-debug/src/nsLayoutDebuggingTools.cpp
+++ b/extensions/layout-debug/src/nsLayoutDebuggingTools.cpp
@@ -53,17 +53,16 @@
 
 #include "nsIContent.h"
 #include "nsIDocument.h"
 #include "nsIDOMDocument.h"
 
 #include "nsIPresShell.h"
 #include "nsIViewManager.h"
 #include "nsIFrame.h"
-#include "nsIFrameDebug.h"
 
 #include "nsILayoutDebugger.h"
 #include "nsLayoutCID.h"
 static NS_DEFINE_CID(kLayoutDebuggerCID, NS_LAYOUT_DEBUGGER_CID);
 
 #include "nsISelectionController.h"
 
 static already_AddRefed<nsIContentViewer>
@@ -429,20 +428,17 @@ nsLayoutDebuggingTools::DumpContent()
 static void
 DumpFramesRecur(nsIDocShell* aDocShell, FILE* out)
 {
     fprintf(out, "webshell=%p \n", static_cast<void*>(aDocShell));
     nsCOMPtr<nsIPresShell> shell(pres_shell(aDocShell));
     if (shell) {
         nsIFrame* root = shell->GetRootFrame();
         if (root) {
-            nsIFrameDebug* fdbg = do_QueryFrame(root);
-            if (fdbg) {
-                fdbg->List(out, 0);
-            }
+            root->List(out, 0);
         }
     }
     else {
         fputs("null pres shell\n", out);
     }
 
     // dump the frames of the sub documents
     PRInt32 i, n;
diff --git a/extensions/layout-debug/src/nsRegressionTester.cpp b/extensions/layout-debug/src/nsRegressionTester.cpp
--- a/extensions/layout-debug/src/nsRegressionTester.cpp
+++ b/extensions/layout-debug/src/nsRegressionTester.cpp
@@ -50,17 +50,16 @@
 #include "nsIDocument.h"
 #include "nsIDOMDocument.h"
 #include "nsIURI.h"
 #include "nsIDOMHTMLDocument.h"
 #include "nsISimpleEnumerator.h"
 #include "nsIDocShell.h"
 #include "nsIContentViewer.h"
 #include "nsIContentViewerFile.h"
-#include "nsIFrameDebug.h"
 #include "nsIFrame.h"
 #include "nsStyleStruct.h"
 #include "nsIFrameUtil.h"
 #include "nsLayoutCID.h"
 #include "nsNetUtil.h"
 #include "nsILocalFile.h"
 #include "nsIPrefService.h"
 #include "nsIViewManager.h"
@@ -100,25 +99,22 @@ nsRegressionTester::DumpFrameModel(nsIDO
   // find out if the document is loaded
   docShell->GetBusyFlags(&busyFlags);
   stillLoading = busyFlags && (nsIDocShell::BUSY_FLAGS_BUSY | nsIDocShell::BUSY_FLAGS_PAGE_LOADING);
   if (stillLoading)
   {
     *aResult = DUMP_RESULT_LOADING;
     return NS_OK;
   }
-  
+
   nsCOMPtr<nsIPresShell> presShell;
   docShell->GetPresShell(getter_AddRefs(presShell));
 
   nsIFrame* root = presShell->GetRootFrame();
 
-  nsIFrameDebug*  fdbg = do_QueryFrame(root);
-  if (NS_FAILED(rv)) return rv;
-
   FILE* fp = stdout;
   if (aDestFile)
   {
     rv = aDestFile->OpenANSIFileDesc("w", &fp);
     if (NS_FAILED(rv)) return rv;
   }
   if (aFlagsMask & DUMP_FLAGS_MASK_PRINT_MODE) {
     nsCOMPtr <nsIContentViewer> viewer;
@@ -126,17 +122,17 @@ nsRegressionTester::DumpFrameModel(nsIDO
     if (viewer){
       nsCOMPtr<nsIContentViewerFile> viewerFile = do_QueryInterface(viewer);
       if (viewerFile) {
          viewerFile->Print(PR_TRUE, fp, nsnull);
       }
     }
   }
   else {
-    fdbg->DumpRegressionData(presShell->GetPresContext(), fp, 0);
+    root->DumpRegressionData(presShell->GetPresContext(), fp, 0);
   }
   if (fp != stdout)
     fclose(fp);
   *aResult = DUMP_RESULT_COMPLETED;
   return NS_OK;
 }
 
 NS_IMETHODIMP
diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -6453,21 +6453,18 @@ nsCSSFrameConstructor::ContentAppended(n
 
   // Recover first-letter frames
   if (haveFirstLetterStyle) {
     RecoverLetterFrames(containingBlock);
   }
 
 #ifdef DEBUG
   if (gReallyNoisyContentUpdates) {
-    nsIFrameDebug* fdbg = do_QueryFrame(parentFrame);
-    if (fdbg) {
-      printf("nsCSSFrameConstructor::ContentAppended: resulting frame model:\n");
-      fdbg->List(stdout, 0);
-    }
+    printf("nsCSSFrameConstructor::ContentAppended: resulting frame model:\n");
+    parentFrame->List(stdout, 0);
   }
 #endif
 
   return NS_OK;
 }
 
 #ifdef MOZ_XUL
 
@@ -6564,22 +6561,19 @@ nsCSSFrameConstructor::ContentInserted(n
     // Create frames for the document element and its child elements
     nsIFrame*               docElementFrame;
     rv = ConstructDocElementFrame(docElement, aFrameState, &docElementFrame);
 
     if (NS_SUCCEEDED(rv) && docElementFrame) {
       InvalidateCanvasIfNeeded(mPresShell, aChild);
 #ifdef DEBUG
       if (gReallyNoisyContentUpdates) {
-        nsIFrameDebug* fdbg = do_QueryFrame(mFixedContainingBlock);
-        if (fdbg) {
-          printf("nsCSSFrameConstructor::ContentInserted: resulting frame "
-                 "model:\n");
-          fdbg->List(stdout, 0);
-        }
+        printf("nsCSSFrameConstructor::ContentInserted: resulting frame "
+               "model:\n");
+        mFixedContainingBlock->List(stdout, 0);
       }
 #endif
     }
 
     return NS_OK;
   }
 
   // Otherwise, we've got parent content. Find its frame.
@@ -6878,21 +6872,18 @@ nsCSSFrameConstructor::ContentInserted(n
   if (haveFirstLetterStyle) {
     // Recover the letter frames for the containing block when
     // it has first-letter style.
     RecoverLetterFrames(state.mFloatedItems.containingBlock);
   }
 
 #ifdef DEBUG
   if (gReallyNoisyContentUpdates && parentFrame) {
-    nsIFrameDebug* fdbg = do_QueryFrame(parentFrame);
-    if (fdbg) {
-      printf("nsCSSFrameConstructor::ContentInserted: resulting frame model:\n");
-      fdbg->List(stdout, 0);
-    }
+    printf("nsCSSFrameConstructor::ContentInserted: resulting frame model:\n");
+    parentFrame->List(stdout, 0);
   }
 #endif
 
   return NS_OK;
 }
 
 static void
 DoDeletingFrameSubtree(nsFrameManager*      aFrameManager,
@@ -7274,21 +7265,18 @@ nsCSSFrameConstructor::ContentRemoved(ns
       printf("\n");
 #endif
     }
 
 #ifdef DEBUG
     if (gReallyNoisyContentUpdates) {
       printf("nsCSSFrameConstructor::ContentRemoved: childFrame=");
       nsFrame::ListTag(stdout, childFrame);
-      printf("\n");
-
-      nsIFrameDebug* fdbg = do_QueryFrame(parentFrame);
-      if (fdbg)
-        fdbg->List(stdout, 0);
+      putchar('\n');
+      parentFrame->List(stdout, 0);
     }
 #endif
 
     // Walk the frame subtree deleting any out-of-flow frames, and
     // remove the mapping from content objects to frames
     ::DeletingFrameSubtree(frameManager, childFrame);
 
     // See if the child frame is an out-of-flow
@@ -7376,21 +7364,18 @@ nsCSSFrameConstructor::ContentRemoved(ns
         LAYOUT_PHASE_TEMP_EXIT();
         ReframeTextIfNeeded(aContainer, aIndexInContainer);
         LAYOUT_PHASE_TEMP_REENTER();
       }
     }
 
 #ifdef DEBUG
     if (gReallyNoisyContentUpdates && parentFrame) {
-      nsIFrameDebug* fdbg = do_QueryFrame(parentFrame);
-      if (fdbg) {
-        printf("nsCSSFrameConstructor::ContentRemoved: resulting frame model:\n");
-        fdbg->List(stdout, 0);
-      }
+      printf("nsCSSFrameConstructor::ContentRemoved: resulting frame model:\n");
+      parentFrame->List(stdout, 0);
     }
 #endif
   }
 
   return rv;
 }
 
 #ifdef DEBUG
@@ -10825,32 +10810,30 @@ nsCSSFrameConstructor::ConstructInline(n
   // methods try to fiddle with the children, the containing block will be
   // reframed instead.
   SetFrameIsSpecial(newFrame, blockFrame);
   SetFrameIsSpecial(blockFrame, inlineFrame);
   SetFrameIsSpecial(inlineFrame, nsnull);
   MarkIBSpecialPrevSibling(blockFrame, newFrame);
   MarkIBSpecialPrevSibling(inlineFrame, blockFrame);
 
-  #ifdef DEBUG
+#ifdef DEBUG
   if (gNoisyInlineConstruction) {
-    nsIFrameDebug*  frameDebug;
-
     printf("nsCSSFrameConstructor::ConstructInline:\n");
-    if ( (frameDebug = do_QueryFrame(*aNewFrame)) ) {
+    if (*aNewFrame) {
       printf("  ==> leading inline frame:\n");
-      frameDebug->List(stdout, 2);
-    }
-    if ( (frameDebug = do_QueryFrame(blockFrame)) ) {
+      (*aNewFrame)->List(stdout, 2);
+    }
+    if (blockFrame) {
       printf("  ==> block frame:\n");
-      frameDebug->List(stdout, 2);
-    }
-    if ( (frameDebug = do_QueryFrame(inlineFrame)) ) {
+      blockFrame->List(stdout, 2);
+    }
+    if (inlineFrame) {
       printf("  ==> trailing inline frame:\n");
-      frameDebug->List(stdout, 2);
+      inlineFrame->List(stdout, 2);
     }
   }
 #endif
 
   if (NS_SUCCEEDED(rv)) {
     aState.AddChild(newFrame, aFrameItems, content, styleContext, aParentFrame);
     *aNewFrame = newFrame;
   }
diff --git a/layout/base/nsDisplayList.h b/layout/base/nsDisplayList.h
--- a/layout/base/nsDisplayList.h
+++ b/layout/base/nsDisplayList.h
@@ -939,17 +939,17 @@ protected:
 #ifdef DEBUG
   const char*   mName;
 #endif
 };
 
 #if defined(MOZ_REFLOW_PERF_DSP) && defined(MOZ_REFLOW_PERF)
 /**
  * This class implements painting of reflow counts.  Ideally, we would simply
- * make all the frame names be those returned by nsIFrameDebug::GetFrameName
+ * make all the frame names be those returned by nsFrame::GetFrameName
  * (except that tosses in the content tag name!)  and support only one color
  * and eliminate this class altogether in favor of nsDisplayGeneric, but for
  * the time being we can't pass args to a PaintCallback, so just have a
  * separate class to do the right thing.  Sadly, this alsmo means we need to
  * hack all leaf frame classes to handle this.
  *
  * XXXbz the color thing is a bit of a mess, but 0 basically means "not set"
  * here...  I could switch it all to nscolor, but why bother?
diff --git a/layout/base/nsDocumentViewer.cpp b/layout/base/nsDocumentViewer.cpp
--- a/layout/base/nsDocumentViewer.cpp
+++ b/layout/base/nsDocumentViewer.cpp
@@ -93,17 +93,16 @@
 #include "nsIMarkupDocumentViewer.h"
 #include "nsIInterfaceRequestor.h"
 #include "nsIInterfaceRequestorUtils.h"
 #include "nsIDocShellTreeItem.h"
 #include "nsIDocShellTreeNode.h"
 #include "nsIDocShellTreeOwner.h"
 #include "nsIDocShell.h"
 #include "nsIBaseWindow.h"
-#include "nsIFrameDebug.h"
 #include "nsILayoutHistoryState.h"
 #include "nsIParser.h"
 #include "nsGUIEvent.h"
 #include "nsHTMLReflowState.h"
 #include "nsIDOMHTMLAnchorElement.h"
 #include "nsIDOMHTMLAreaElement.h"
 #include "nsIDOMHTMLLinkElement.h"
 #include "nsIImageLoadingContent.h"
diff --git a/layout/base/nsFrameManager.cpp b/layout/base/nsFrameManager.cpp
--- a/layout/base/nsFrameManager.cpp
+++ b/layout/base/nsFrameManager.cpp
@@ -761,21 +761,18 @@ nsFrameManager::NotifyDestroyingFrame(ns
 
 #ifdef NS_DEBUG
 static void
 DumpContext(nsIFrame* aFrame, nsStyleContext* aContext)
 {
   if (aFrame) {
     fputs("frame: ", stdout);
     nsAutoString  name;
-    nsIFrameDebug *frameDebug = do_QueryFrame(aFrame);
-    if (frameDebug) {
-      frameDebug->GetFrameName(name);
-      fputs(NS_LossyConvertUTF16toASCII(name).get(), stdout);
-    }
+    aFrame->GetFrameName(name);
+    fputs(NS_LossyConvertUTF16toASCII(name).get(), stdout);
     fprintf(stdout, " (%p)", static_cast<void*>(aFrame));
   }
   if (aContext) {
     fprintf(stdout, " style: %p ", static_cast<void*>(aContext));
 
     nsIAtom* pseudoTag = aContext->GetPseudoType();
     if (pseudoTag) {
       nsAutoString  buffer;
diff --git a/layout/base/nsLayoutDebugger.cpp b/layout/base/nsLayoutDebugger.cpp
--- a/layout/base/nsLayoutDebugger.cpp
+++ b/layout/base/nsLayoutDebugger.cpp
@@ -36,18 +36,17 @@
  * ***** END LICENSE BLOCK ***** */
 
 /*
  * implementation of interface that allows layout-debug extension access
  * to some internals of layout
  */
 
 #include "nsILayoutDebugger.h"
-#include "nsIFrame.h"
-#include "nsIFrameDebug.h"
+#include "nsFrame.h"
 #include "nsDisplayList.h"
 
 #include <stdio.h>
 
 #ifdef NS_DEBUG
 class nsLayoutDebugger : public nsILayoutDebugger {
 public:
   nsLayoutDebugger();
@@ -96,38 +95,38 @@ nsLayoutDebugger::~nsLayoutDebugger()
 {
 }
 
 NS_IMPL_ISUPPORTS1(nsLayoutDebugger, nsILayoutDebugger)
 
 NS_IMETHODIMP
 nsLayoutDebugger::SetShowFrameBorders(PRBool aEnable)
 {
-  nsIFrameDebug::ShowFrameBorders(aEnable);
+  nsFrame::ShowFrameBorders(aEnable);
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsLayoutDebugger::GetShowFrameBorders(PRBool* aResult)
 {
-  *aResult = nsIFrameDebug::GetShowFrameBorders();
+  *aResult = nsFrame::GetShowFrameBorders();
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsLayoutDebugger::SetShowEventTargetFrameBorder(PRBool aEnable)
 {
-  nsIFrameDebug::ShowEventTargetFrameBorder(aEnable);
+  nsFrame::ShowEventTargetFrameBorder(aEnable);
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsLayoutDebugger::GetShowEventTargetFrameBorder(PRBool* aResult)
 {
-  *aResult = nsIFrameDebug::GetShowEventTargetFrameBorder();
+  *aResult = nsFrame::GetShowEventTargetFrameBorder();
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsLayoutDebugger::GetContentSize(nsIDocument* aDocument,
                                  PRInt32* aSizeInBytesResult)
 {
   *aSizeInBytesResult = 0;
@@ -154,20 +153,19 @@ static void
 PrintDisplayListTo(nsDisplayListBuilder* aBuilder, const nsDisplayList& aList,
                    PRInt32 aIndent, FILE* aOutput)
 {
   for (nsDisplayItem* i = aList.GetBottom(); i != nsnull; i = i->GetAbove()) {
     for (PRInt32 j = 0; j < aIndent; ++j) {
       fputc(' ', aOutput);
     }
     nsIFrame* f = i->GetUnderlyingFrame();
-    nsIFrameDebug* fDebug = do_QueryFrame(f);
     nsAutoString fName;
-    if (fDebug) {
-      fDebug->GetFrameName(fName);
+    if (f) {
+      f->GetFrameName(fName);
     }
     nsRect rect = i->GetBounds(aBuilder);
     switch (i->GetType()) {
       case nsDisplayItem::TYPE_CLIP: {
         nsDisplayClip* c = static_cast<nsDisplayClip*>(i);
         rect = c->GetClipRect();
         break;
       }
@@ -189,14 +187,15 @@ PrintDisplayListTo(nsDisplayListBuilder*
     if (i->GetType() == nsDisplayItem::TYPE_TRANSFORM) {
       nsDisplayTransform* t = static_cast<nsDisplayTransform*>(i);
       PrintDisplayListTo(aBuilder, *(t->GetStoredList()->GetList()), aIndent + 4, aOutput);
     }
   }
 }
 
 void
-nsIFrameDebug::PrintDisplayList(nsDisplayListBuilder* aBuilder, const nsDisplayList& aList)
+nsFrame::PrintDisplayList(nsDisplayListBuilder* aBuilder,
+                          const nsDisplayList& aList)
 {
   PrintDisplayListTo(aBuilder, aList, 0, stderr);
 }
 
 #endif
diff --git a/layout/base/nsLayoutUtils.cpp b/layout/base/nsLayoutUtils.cpp
--- a/layout/base/nsLayoutUtils.cpp
+++ b/layout/base/nsLayoutUtils.cpp
@@ -937,20 +937,20 @@ nsLayoutUtils::GetFrameForPoint(nsIFrame
     aFrame->BuildDisplayListForStackingContext(&builder, target, &list);
 
   builder.LeavePresShell(aFrame, target);
   NS_ENSURE_SUCCESS(rv, nsnull);
 
 #ifdef DEBUG
   if (gDumpEventList) {
     fprintf(stderr, "Event handling --- (%d,%d):\n", aPt.x, aPt.y);
-    nsIFrameDebug::PrintDisplayList(&builder, list);
+    nsFrame::PrintDisplayList(&builder, list);
   }
 #endif
-  
+
   nsDisplayItem::HitTestState hitTestState;
   nsIFrame* result = list.HitTest(&builder, aPt, &hitTestState);
   list.DeleteAll();
   return result;
 }
 
 /**
  * Remove all leaf display items that are not for descendants of
@@ -1109,30 +1109,30 @@ nsLayoutUtils::PaintFrame(nsIRenderingCo
 
   builder.LeavePresShell(aFrame, dirtyRect);
   NS_ENSURE_SUCCESS(rv, rv);
 
 #ifdef DEBUG
   if (gDumpPaintList) {
     fprintf(stderr, "Painting --- before optimization (dirty %d,%d,%d,%d):\n",
             dirtyRect.x, dirtyRect.y, dirtyRect.width, dirtyRect.height);
-    nsIFrameDebug::PrintDisplayList(&builder, list);
+    nsFrame::PrintDisplayList(&builder, list);
   }
 #endif
-  
+
   nsRegion visibleRegion = aDirtyRegion;
   list.OptimizeVisibility(&builder, &visibleRegion);
 
 #ifdef DEBUG
   if (gDumpPaintList) {
     fprintf(stderr, "Painting --- after optimization:\n");
-    nsIFrameDebug::PrintDisplayList(&builder, list);
+    nsFrame::PrintDisplayList(&builder, list);
   }
 #endif
-  
+
   list.Paint(&builder, aRenderingContext, aDirtyRegion.GetBounds());
   // Flush the list so we don't trigger the IsEmpty-on-destruction assertion
   list.DeleteAll();
   return NS_OK;
 }
 
 static void
 AccumulateItemInRegion(nsRegion* aRegion, const nsRect& aUpdateRect,
@@ -1274,30 +1274,30 @@ nsLayoutUtils::ComputeRepaintRegionForCo
   builder.LeavePresShell(aRootFrame, rect);
   NS_ENSURE_SUCCESS(rv, rv);
 
 #ifdef DEBUG
   if (gDumpRepaintRegionForCopy) {
     fprintf(stderr,
             "Repaint region for copy --- before optimization (area %d,%d,%d,%d, frame %p):\n",
             rect.x, rect.y, rect.width, rect.height, (void*)aMovingFrame);
-    nsIFrameDebug::PrintDisplayList(&builder, list);
+    nsFrame::PrintDisplayList(&builder, list);
   }
 #endif
 
   // Optimize for visibility, but frames under aMovingFrame will not be
   // considered opaque, so they don't cover non-moving frames.
   nsRegion visibleRegion(aUpdateRect);
   visibleRegion.Or(visibleRegion, aUpdateRect - aDelta);
   list.OptimizeVisibility(&builder, &visibleRegion);
 
 #ifdef DEBUG
   if (gDumpRepaintRegionForCopy) {
     fprintf(stderr, "Repaint region for copy --- after optimization:\n");
-    nsIFrameDebug::PrintDisplayList(&builder, list);
+    nsFrame::PrintDisplayList(&builder, list);
   }
 #endif
 
   aRepaintRegion->SetEmpty();
   // Any visible non-moving display items get added to the repaint region
   // a) at their current location and b) offset by -aPt (their position in
   // the 'before' display list) (unless they're uniform and we can exclude them).
   // Also, any visible position-varying display items get added to the
diff --git a/layout/base/nsPresContext.cpp b/layout/base/nsPresContext.cpp
--- a/layout/base/nsPresContext.cpp
+++ b/layout/base/nsPresContext.cpp
@@ -2294,27 +2294,27 @@ nsRootPresContext::GetPluginGeometryUpda
     closure.mRootFrame->BuildDisplayListForStackingContext(
         &builder, bounds, &list);
     builder.LeavePresShell(closure.mRootFrame, bounds);
 
 #ifdef DEBUG
     if (gDumpPluginList) {
       fprintf(stderr, "Plugins --- before optimization (bounds %d,%d,%d,%d):\n",
           bounds.x, bounds.y, bounds.width, bounds.height);
-      nsIFrameDebug::PrintDisplayList(&builder, list);
+      nsFrame::PrintDisplayList(&builder, list);
     }
 #endif
-  
+
     nsRegion visibleRegion(bounds);
     list.OptimizeVisibility(&builder, &visibleRegion);
 
 #ifdef DEBUG
     if (gDumpPluginList) {
       fprintf(stderr, "Plugins --- after optimization:\n");
-      nsIFrameDebug::PrintDisplayList(&builder, list);
+      nsFrame::PrintDisplayList(&builder, list);
     }
 #endif
 
     RecoverPluginGeometry(&builder, &list, &closure);
     list.DeleteAll();
   }
 
   // Plugins that we didn't find in the display list are not visible
diff --git a/layout/base/nsPresShell.cpp b/layout/base/nsPresShell.cpp
--- a/layout/base/nsPresShell.cpp
+++ b/layout/base/nsPresShell.cpp
@@ -126,19 +126,16 @@
 #include "pldhash.h"
 #include "nsIObserverService.h"
 #include "nsIObserver.h"
 #include "nsIDocShell.h"        // for reflow observation
 #include "nsIBaseWindow.h"
 #include "nsLayoutErrors.h"
 #include "nsLayoutUtils.h"
 #include "nsCSSRendering.h"
-#ifdef NS_DEBUG
-#include "nsIFrameDebug.h"
-#endif
   // for |#ifdef DEBUG| code
 #include "prenv.h"
 #include "nsIAttribute.h"
 #include "nsIGlobalHistory2.h"
 #include "nsDisplayList.h"
 #include "nsIRegion.h"
 #include "nsRegion.h"
 
@@ -1450,17 +1447,17 @@ PRBool PresShell::sDontRetargetEvents = 
 #ifdef PR_LOGGING
 PRLogModuleInfo* PresShell::gLog;
 #endif
 
 #ifdef NS_DEBUG
 static void
 VerifyStyleTree(nsPresContext* aPresContext, nsFrameManager* aFrameManager)
 {
-  if (nsIFrameDebug::GetVerifyStyleTreeEnable()) {
+  if (nsFrame::GetVerifyStyleTreeEnable()) {
     nsIFrame* rootFrame = aFrameManager->GetRootFrame();
     aFrameManager->DebugVerifyStyleTree(rootFrame);
   }
 }
 #define VERIFY_STYLE_TREE ::VerifyStyleTree(mPresContext, FrameManager())
 #else
 #define VERIFY_STYLE_TREE
 #endif
@@ -6137,17 +6134,17 @@ PresShell::HandleEvent(nsIView         *
 
   return rv;
 }
 
 #ifdef NS_DEBUG
 void
 PresShell::ShowEventTargetDebug()
 {
-  if (nsIFrameDebug::GetShowEventTargetFrameBorder() &&
+  if (nsFrame::GetShowEventTargetFrameBorder() &&
       GetCurrentEventFrame()) {
     if (mDrawEventTargetFrame) {
       mDrawEventTargetFrame->Invalidate(
           nsRect(nsPoint(0, 0), mDrawEventTargetFrame->GetSize()));
     }
 
     mDrawEventTargetFrame = mCurrentEventFrame;
     mDrawEventTargetFrame->Invalidate(
@@ -7489,105 +7486,74 @@ PresShell::EnumeratePlugins(nsIDOMDocume
 #include "nsILinkHandler.h"
 
 static NS_DEFINE_CID(kViewManagerCID, NS_VIEW_MANAGER_CID);
 static NS_DEFINE_CID(kWidgetCID, NS_CHILD_CID);
 
 static void
 LogVerifyMessage(nsIFrame* k1, nsIFrame* k2, const char* aMsg)
 {
-  printf("verifyreflow: ");
-  nsAutoString name;
-  if (nsnull != k1) {
-    nsIFrameDebug *frameDebug = do_QueryFrame(k1);
-    if (frameDebug) {
-     frameDebug->GetFrameName(name);
-    }
-  }
-  else {
-    name.Assign(NS_LITERAL_STRING("(null)"));
-  }
-  fputs(NS_LossyConvertUTF16toASCII(name).get(), stdout);
-
-  fprintf(stdout, " %p ", (void*)k1);
-
-  printf(" != ");
-
-  if (nsnull != k2) {
-    nsIFrameDebug *frameDebug = do_QueryFrame(k2);
-    if (frameDebug) {
-      frameDebug->GetFrameName(name);
-    }
-  }
-  else {
-    name.Assign(NS_LITERAL_STRING("(null)"));
-  }
-  fputs(NS_LossyConvertUTF16toASCII(name).get(), stdout);
-
-  fprintf(stdout, " %p ", (void*)k2);
-
-  printf(" %s", aMsg);
+  nsAutoString n1, n2;
+  if (k1) {
+    k1->GetFrameName(n1);
+  } else {
+    n1.Assign(NS_LITERAL_STRING("(null)"));
+  }
+
+  if (k2) {
+    k2->GetFrameName(n2);
+  } else {
+    n2.Assign(NS_LITERAL_STRING("(null)"));
+  }
+
+  printf("verifyreflow: %s %p != %s %p  %s\n",
+         NS_LossyConvertUTF16toASCII(n1).get(), (void*)k1,
+         NS_LossyConvertUTF16toASCII(n2).get(), (void*)k2, aMsg);
 }
 
 static void
 LogVerifyMessage(nsIFrame* k1, nsIFrame* k2, const char* aMsg,
                  const nsRect& r1, const nsRect& r2)
 {
   printf("VerifyReflow Error:\n");
   nsAutoString name;
-  nsIFrameDebug *frameDebug = do_QueryFrame(k1);
-  if (frameDebug) {
-    fprintf(stdout, "  ");
-    frameDebug->GetFrameName(name);
-    fputs(NS_LossyConvertUTF16toASCII(name).get(), stdout);
-    fprintf(stdout, " %p ", (void*)k1);
-  }
-  printf("{%d, %d, %d, %d}", r1.x, r1.y, r1.width, r1.height);
-
-  printf(" != \n");
-
-  frameDebug = do_QueryFrame(k2);
-  if (frameDebug) {
-    fprintf(stdout, "  ");
-    frameDebug->GetFrameName(name);
-    fputs(NS_LossyConvertUTF16toASCII(name).get(), stdout);
-    fprintf(stdout, " %p ", (void*)k2);
-  }
-  printf("{%d, %d, %d, %d}\n", r2.x, r2.y, r2.width, r2.height);
-
-  printf("  %s\n", aMsg);
+
+  if (k1) {
+    k1->GetFrameName(name);
+    printf("  %s %p ", NS_LossyConvertUTF16toASCII(name).get(), (void*)k1);
+  }
+  printf("{%d, %d, %d, %d} != \n", r1.x, r1.y, r1.width, r1.height);
+
+  if (k2) {
+    k2->GetFrameName(name);
+    printf("  %s %p ", NS_LossyConvertUTF16toASCII(name).get(), (void*)k2);
+  }
+  printf("{%d, %d, %d, %d}\n  %s\n",
+         r2.x, r2.y, r2.width, r2.height, aMsg);
 }
 
 static void
 LogVerifyMessage(nsIFrame* k1, nsIFrame* k2, const char* aMsg,
                  const nsIntRect& r1, const nsIntRect& r2)
 {
   printf("VerifyReflow Error:\n");
   nsAutoString name;
-  nsIFrameDebug *frameDebug = do_QueryFrame(k1);
-  if (frameDebug) {
-    fprintf(stdout, "  ");
-    frameDebug->GetFrameName(name);
-    fputs(NS_LossyConvertUTF16toASCII(name).get(), stdout);
-    fprintf(stdout, " %p ", (void*)k1);
-  }
-  printf("{%d, %d, %d, %d}", r1.x, r1.y, r1.width, r1.height);
-
-  printf(" != \n");
-
-  frameDebug = do_QueryFrame(k2);
-  if (frameDebug) {
-    fprintf(stdout, "  ");
-    frameDebug->GetFrameName(name);
-    fputs(NS_LossyConvertUTF16toASCII(name).get(), stdout);
-    fprintf(stdout, " %p ", (void*)k2);
-  }
-  printf("{%d, %d, %d, %d}\n", r2.x, r2.y, r2.width, r2.height);
-
-  printf("  %s\n", aMsg);
+
+  if (k1) {
+    k1->GetFrameName(name);
+    printf("  %s %p ", NS_LossyConvertUTF16toASCII(name).get(), (void*)k1);
+  }
+  printf("{%d, %d, %d, %d} != \n", r1.x, r1.y, r1.width, r1.height);
+
+  if (k2) {
+    k2->GetFrameName(name);
+    printf("  %s %p ", NS_LossyConvertUTF16toASCII(name).get(), (void*)k2);
+  }
+  printf("{%d, %d, %d, %d}\n  %s\n",
+         r2.x, r2.y, r2.width, r2.height, aMsg);
 }
 
 static PRBool
 CompareTrees(nsPresContext* aFirstPresContext, nsIFrame* aFirstFrame, 
              nsPresContext* aSecondPresContext, nsIFrame* aSecondFrame)
 {
   if (!aFirstPresContext || !aFirstFrame || !aSecondPresContext || !aSecondFrame)
     return PR_TRUE;
@@ -7930,25 +7896,19 @@ PresShell::VerifyIncrementalReflow()
 
   // Now that the document has been reflowed, use its frame tree to
   // compare against our frame tree.
   nsIFrame* root1 = FrameManager()->GetRootFrame();
   nsIFrame* root2 = sh->FrameManager()->GetRootFrame();
   PRBool ok = CompareTrees(mPresContext, root1, cx, root2);
   if (!ok && (VERIFY_REFLOW_NOISY & gVerifyReflowFlags)) {
     printf("Verify reflow failed, primary tree:\n");
-    nsIFrameDebug*  frameDebug = do_QueryFrame(root1);
-    if (frameDebug) {
-      frameDebug->List(stdout, 0);
-    }
+    root1->List(stdout, 0);
     printf("Verification tree:\n");
-    frameDebug = do_QueryFrame(root2);
-    if (frameDebug) {
-      frameDebug->List(stdout, 0);
-    }
+    root2->List(stdout, 0);
   }
 
 #ifdef DEBUG_Eli
   // Sample code for dumping page to png
   // XXX Needs to be made more flexible
   if (!ok) {
     nsString stra;
     static int num = 0;
diff --git a/layout/forms/nsListControlFrame.h b/layout/forms/nsListControlFrame.h
--- a/layout/forms/nsListControlFrame.h
+++ b/layout/forms/nsListControlFrame.h
@@ -125,17 +125,16 @@ public:
 
   virtual PRBool IsContainingBlock() const;
 
   virtual void InvalidateInternal(const nsRect& aDamageRect,
                                   nscoord aX, nscoord aY, nsIFrame* aForChild,
                                   PRUint32 aFlags);
 
 #ifdef DEBUG
-    // nsIFrameDebug
   NS_IMETHOD GetFrameName(nsAString& aResult) const;
 #endif
 
     // nsIFormControlFrame
   virtual nsresult SetFormProperty(nsIAtom* aName, const nsAString& aValue);
   virtual nsresult GetFormProperty(nsIAtom* aName, nsAString& aValue) const; 
   virtual void SetFocus(PRBool aOn = PR_TRUE, PRBool aRepaint = PR_FALSE);
 
diff --git a/layout/generic/Makefile.in b/layout/generic/Makefile.in
--- a/layout/generic/Makefile.in
+++ b/layout/generic/Makefile.in
@@ -85,17 +85,16 @@ EXPORTS		= \
 		nsQueryFrame.h \
 		nsFrameList.h \
 		nsHTMLParts.h \
 		nsHTMLReflowMetrics.h \
 		nsHTMLReflowState.h \
 		nsIAnonymousContentCreator.h \
 		nsICanvasFrame.h \
 		nsIFrame.h \
-		nsIFrameDebug.h \
 		nsIFrameFrame.h \
 		nsIFrameUtil.h \
 		nsIImageFrame.h \
 		nsILineIterator.h \
 		nsIObjectFrame.h \
 		nsIPageSequenceFrame.h \
 		nsIScrollableFrame.h \
 		nsIScrollableViewProvider.h \
diff --git a/layout/generic/nsAbsoluteContainingBlock.cpp b/layout/generic/nsAbsoluteContainingBlock.cpp
--- a/layout/generic/nsAbsoluteContainingBlock.cpp
+++ b/layout/generic/nsAbsoluteContainingBlock.cpp
@@ -398,23 +398,20 @@ nsAbsoluteContainingBlock::ReflowAbsolut
                                                nsIFrame*                aKidFrame,
                                                nsReflowStatus&          aStatus,
                                                nsRect*                  aChildBounds)
 {
 #ifdef DEBUG
   if (nsBlockFrame::gNoisyReflow) {
     nsFrame::IndentBy(stdout,nsBlockFrame::gNoiseIndent);
     printf("abs pos ");
-    if (nsnull != aKidFrame) {
-      nsIFrameDebug *frameDebug = do_QueryFrame(aKidFrame);
-      if (frameDebug) {
-        nsAutoString name;
-        frameDebug->GetFrameName(name);
-        printf("%s ", NS_LossyConvertUTF16toASCII(name).get());
-      }
+    if (aKidFrame) {
+      nsAutoString name;
+      aKidFrame->GetFrameName(name);
+      printf("%s ", NS_LossyConvertUTF16toASCII(name).get());
     }
 
     char width[16];
     char height[16];
     PrettyUC(aReflowState.availableWidth, width);
     PrettyUC(aReflowState.availableHeight, height);
     printf(" a=%s,%s ", width, height);
     PrettyUC(aReflowState.ComputedWidth(), width);
@@ -542,26 +539,23 @@ nsAbsoluteContainingBlock::ReflowAbsolut
         nsRect(rect.x, rect.y + innerHeight, outerWidth, outerHeight - innerHeight));
   }
   aKidFrame->DidReflow(aPresContext, &kidReflowState, NS_FRAME_REFLOW_FINISHED);
 
 #ifdef DEBUG
   if (nsBlockFrame::gNoisyReflow) {
     nsFrame::IndentBy(stdout,nsBlockFrame::gNoiseIndent - 1);
     printf("abs pos ");
-    if (nsnull != aKidFrame) {
-      nsIFrameDebug *frameDebug = do_QueryFrame(aKidFrame);
-      if (frameDebug) {
-        nsAutoString name;
-        frameDebug->GetFrameName(name);
-        printf("%s ", NS_LossyConvertUTF16toASCII(name).get());
-      }
+    if (aKidFrame) {
+      nsAutoString name;
+      aKidFrame->GetFrameName(name);
+      printf("%s ", NS_LossyConvertUTF16toASCII(name).get());
     }
-    printf("%p rect=%d,%d,%d,%d", aKidFrame, rect.x, rect.y, rect.width, rect.height);
-    printf("\n");
+    printf("%p rect=%d,%d,%d,%d\n", (void*)aKidFrame,
+           rect.x, rect.y, rect.width, rect.height);
   }
 #endif
 
   if (aChildBounds)
     aChildBounds->UnionRect(*aChildBounds, kidDesiredSize.mOverflowArea +
                                            rect.TopLeft());
 
   return rv;
diff --git a/layout/generic/nsBlockFrame.cpp b/layout/generic/nsBlockFrame.cpp
--- a/layout/generic/nsBlockFrame.cpp
+++ b/layout/generic/nsBlockFrame.cpp
@@ -434,20 +434,17 @@ nsBlockFrame::List(FILE* out, PRInt32 aI
       IndentBy(out, aIndent);
       nsAutoString tmp;
       if (nsnull != listName) {
         listName->ToString(tmp);
         fputs(NS_LossyConvertUTF16toASCII(tmp).get(), out);
       }
       fputs("<\n", out);
       while (kid) {
-        nsIFrameDebug *frameDebug = do_QueryFrame(kid);
-        if (frameDebug) {
-          frameDebug->List(out, aIndent + 1);
-        }
+        kid->List(out, aIndent + 1);
         kid = kid->GetNextSibling();
       }
       IndentBy(out, aIndent);
       fputs(">\n", out);
     }
   }
 
   aIndent--;
@@ -6840,17 +6837,17 @@ nsBlockFrame::CheckFloats(nsBlockReflowS
       equal = PR_FALSE;
     }
     ++i;
   }
 
   if ((!equal || lineFloats.Length() != storedFloats.Length()) && !anyLineDirty) {
     NS_WARNING("nsBlockFrame::CheckFloats: Explicit float list is out of sync with float cache");
 #if defined(DEBUG_roc)
-    nsIFrameDebug::RootFrameList(PresContext(), stdout, 0);
+    nsFrame::RootFrameList(PresContext(), stdout, 0);
     for (i = 0; i < lineFloats.Length(); ++i) {
       printf("Line float: %p\n", lineFloats.ElementAt(i));
     }
     for (i = 0; i < storedFloats.Length(); ++i) {
       printf("Stored float: %p\n", storedFloats.ElementAt(i));
     }
 #endif
   }
diff --git a/layout/generic/nsContainerFrame.cpp b/layout/generic/nsContainerFrame.cpp
--- a/layout/generic/nsContainerFrame.cpp
+++ b/layout/generic/nsContainerFrame.cpp
@@ -1624,20 +1624,17 @@ nsContainerFrame::List(FILE* out, PRInt3
         fputs(NS_LossyConvertUTF16toASCII(tmp).get(), out);
       }
       fputs("<\n", out);
       while (nsnull != kid) {
         // Verify the child frame's parent frame pointer is correct
         NS_ASSERTION(kid->GetParent() == (nsIFrame*)this, "bad parent frame pointer");
 
         // Have the child frame list
-        nsIFrameDebug *frameDebug = do_QueryFrame(kid);
-        if (frameDebug) {
-          frameDebug->List(out, aIndent + 1);
-        }
+        kid->List(out, aIndent + 1);
         kid = kid->GetNextSibling();
       }
       IndentBy(out, aIndent);
       fputs(">\n", out);
     }
     listName = GetAdditionalChildListName(listIndex++);
   } while(nsnull != listName);
 
diff --git a/layout/generic/nsFrame.cpp b/layout/generic/nsFrame.cpp
--- a/layout/generic/nsFrame.cpp
+++ b/layout/generic/nsFrame.cpp
@@ -163,104 +163,101 @@ struct nsContentAndOffset
 
 //non Hack prototypes
 #if 0
 static void RefreshContentFrames(nsPresContext* aPresContext, nsIContent * aStartContent, nsIContent * aEndContent);
 #endif
 
 #include "prenv.h"
 
-// start nsIFrameDebug
+// Formerly the nsIFrameDebug interface
 
 #ifdef NS_DEBUG
 static PRBool gShowFrameBorders = PR_FALSE;
 
-void nsIFrameDebug::ShowFrameBorders(PRBool aEnable)
+void nsFrame::ShowFrameBorders(PRBool aEnable)
 {
   gShowFrameBorders = aEnable;
 }
 
-PRBool nsIFrameDebug::GetShowFrameBorders()
+PRBool nsFrame::GetShowFrameBorders()
 {
   return gShowFrameBorders;
 }
 
 static PRBool gShowEventTargetFrameBorder = PR_FALSE;
 
-void nsIFrameDebug::ShowEventTargetFrameBorder(PRBool aEnable)
+void nsFrame::ShowEventTargetFrameBorder(PRBool aEnable)
 {
   gShowEventTargetFrameBorder = aEnable;
 }
 
-PRBool nsIFrameDebug::GetShowEventTargetFrameBorder()
+PRBool nsFrame::GetShowEventTargetFrameBorder()
 {
   return gShowEventTargetFrameBorder;
 }
 
 /**
  * Note: the log module is created during library initialization which
  * means that you cannot perform logging before then.
  */
 static PRLogModuleInfo* gLogModule;
 
 static PRLogModuleInfo* gStyleVerifyTreeLogModuleInfo;
 
 static PRBool gStyleVerifyTreeEnable = PRBool(0x55);
 
 PRBool
-nsIFrameDebug::GetVerifyStyleTreeEnable()
+nsFrame::GetVerifyStyleTreeEnable()
 {
   if (gStyleVerifyTreeEnable == PRBool(0x55)) {
     if (nsnull == gStyleVerifyTreeLogModuleInfo) {
       gStyleVerifyTreeLogModuleInfo = PR_NewLogModule("styleverifytree");
       gStyleVerifyTreeEnable = 0 != gStyleVerifyTreeLogModuleInfo->level;
     }
   }
   return gStyleVerifyTreeEnable;
 }
 
 void
-nsIFrameDebug::SetVerifyStyleTreeEnable(PRBool aEnabled)
+nsFrame::SetVerifyStyleTreeEnable(PRBool aEnabled)
 {
   gStyleVerifyTreeEnable = aEnabled;
 }
 
 PRLogModuleInfo*
-nsIFrameDebug::GetLogModuleInfo()
+nsFrame::GetLogModuleInfo()
 {
   if (nsnull == gLogModule) {
     gLogModule = PR_NewLogModule("frame");
   }
   return gLogModule;
 }
 
 void
-nsIFrameDebug::DumpFrameTree(nsIFrame* aFrame)
+nsFrame::DumpFrameTree(nsIFrame* aFrame)
 {
     RootFrameList(aFrame->PresContext(), stdout, 0);
 }
 
 void
-nsIFrameDebug::RootFrameList(nsPresContext* aPresContext, FILE* out, PRInt32 aIndent)
-{
-  if((nsnull == aPresContext) || (nsnull == out))
+nsFrame::RootFrameList(nsPresContext* aPresContext, FILE* out, PRInt32 aIndent)
+{
+  if (!aPresContext || !out)
     return;
 
   nsIPresShell *shell = aPresContext->GetPresShell();
-  if (nsnull != shell) {
+  if (shell) {
     nsIFrame* frame = shell->FrameManager()->GetRootFrame();
-    if(nsnull != frame) {
-      nsIFrameDebug* debugFrame = do_QueryFrame(frame);
-      if (debugFrame)
-        debugFrame->List(out, aIndent);
-    }
-  }
-}
-#endif
-// end nsIFrameDebug
+    if(frame) {
+      frame->List(out, aIndent);
+    }
+  }
+}
+#endif
 
 void
 NS_MergeReflowStatusInto(nsReflowStatus* aPrimary, nsReflowStatus aSecondary)
 {
   *aPrimary |= aSecondary &
     (NS_FRAME_NOT_COMPLETE | NS_FRAME_OVERFLOW_INCOMPLETE |
      NS_FRAME_TRUNCATED | NS_FRAME_REFLOW_NEXTINFLOW);
   if (*aPrimary & NS_FRAME_NOT_COMPLETE) {
@@ -329,19 +326,16 @@ nsFrame::~nsFrame()
 
   NS_IF_RELEASE(mContent);
   if (mStyleContext)
     mStyleContext->Release();
 }
 
 NS_QUERYFRAME_HEAD(nsFrame)
   NS_QUERYFRAME_ENTRY(nsIFrame)
-#ifdef DEBUG
-  NS_QUERYFRAME_ENTRY(nsIFrameDebug)
-#endif
 NS_QUERYFRAME_TAIL
 
 /////////////////////////////////////////////////////////////////////////////
 // nsIFrame
 
 NS_IMETHODIMP
 nsFrame::Init(nsIContent*      aContent,
               nsIFrame*        aParent,
@@ -1207,22 +1201,22 @@ static void PaintEventTargetBorder(nsIFr
   aCtx->DrawRect(r);
 }
 
 static void
 DisplayDebugBorders(nsDisplayListBuilder* aBuilder, nsIFrame* aFrame,
                     const nsDisplayListSet& aLists) {
   // Draw a border around the child
   // REVIEW: From nsContainerFrame::PaintChild
-  if (nsIFrameDebug::GetShowFrameBorders() && !aFrame->GetRect().IsEmpty()) {
+  if (nsFrame::GetShowFrameBorders() && !aFrame->GetRect().IsEmpty()) {
     aLists.Outlines()->AppendNewToTop(new (aBuilder)
         nsDisplayGeneric(aFrame, PaintDebugBorder, "DebugBorder"));
   }
   // Draw a border around the current event target
-  if (nsIFrameDebug::GetShowEventTargetFrameBorder() &&
+  if (nsFrame::GetShowEventTargetFrameBorder() &&
       aFrame->PresContext()->PresShell()->GetDrawEventTargetFrame() == aFrame) {
     aLists.Outlines()->AppendNewToTop(new (aBuilder)
         nsDisplayGeneric(aFrame, PaintEventTargetBorder, "EventTargetBorder"));
   }
 }
 #endif
 
 nsresult
@@ -4386,20 +4380,17 @@ nsFrame::DumpBaseRegressionData(nsPresCo
         fputs(NS_LossyConvertUTF16toASCII(listName).get(), out);
         fprintf(out, "\">\n");
       }
       else {
         fprintf(out, "<child-list>\n");
       }
       aIndent++;
       while (kid) {
-        nsIFrameDebug* frameDebug = do_QueryFrame(kid);
-        if (kid) {
-          frameDebug->DumpRegressionData(aPresContext, out, aIndent);
-        }
+        kid->DumpRegressionData(aPresContext, out, aIndent);
         kid = kid->GetNextSibling();
       }
       aIndent--;
       IndentBy(out, aIndent);
       fprintf(out, "</child-list>\n");
     }
     list = GetAdditionalChildListName(listIndex++);
   } while (nsnull != list);
@@ -6737,23 +6728,17 @@ nsAdaptorPrintReason(nsHTMLReflowState& 
     printf("%s",reflowReasonString);
 }
 
 #endif
 #ifdef DEBUG_LAYOUT
 void
 nsFrame::GetBoxName(nsAutoString& aName)
 {
-   nsIFrameDebug*  frameDebug;
-   nsAutoString name;
-   if (NS_SUCCEEDED(QueryInterface(NS_GET_IID(nsIFrameDebug), (void**)&frameDebug))) {
-      frameDebug->GetFrameName(name);
-   }
-
-  aName = name;
+  GetFrameName(aName);
 }
 #endif
 
 #ifdef NS_DEBUG
 static void
 GetTagName(nsFrame* aFrame, nsIContent* aContent, PRIntn aResultSize,
            char* aResult)
 {
@@ -7283,20 +7268,19 @@ void DR_State::DisplayFrameTypeInfo(nsIF
                                     PRInt32   aIndent)
 { 
   DR_FrameTypeInfo* frameTypeInfo = GetFrameTypeInfo(aFrame->GetType());
   if (frameTypeInfo) {
     for (PRInt32 i = 0; i < aIndent; i++) {
       printf(" ");
     }
     if(!strcmp(frameTypeInfo->mNameAbbrev, "unknown")) {
-      nsAutoString  name;
-      nsIFrameDebug* frameDebug = do_QueryFrame(aFrame);
-      if (frameDebug) {
-       frameDebug->GetFrameName(name);
+      if (aFrame) {
+       nsAutoString  name;
+       aFrame->GetFrameName(name);
        printf("%s %p ", NS_LossyConvertUTF16toASCII(name).get(), (void*)aFrame);
       }
       else {
         printf("%s %p ", frameTypeInfo->mNameAbbrev, (void*)aFrame);
       }
     }
     else {
       printf("%s %p ", frameTypeInfo->mNameAbbrev, (void*)aFrame);
diff --git a/layout/generic/nsFrame.h b/layout/generic/nsFrame.h
--- a/layout/generic/nsFrame.h
+++ b/layout/generic/nsFrame.h
@@ -40,19 +40,16 @@
 
 #ifndef nsFrame_h___
 #define nsFrame_h___
 
 #include "nsBox.h"
 #include "nsRect.h"
 #include "nsString.h"
 #include "prlog.h"
-#ifdef NS_DEBUG
-#include "nsIFrameDebug.h"
-#endif
 
 #include "nsIPresShell.h"
 #include "nsFrameSelection.h"
 #include "nsHTMLReflowState.h"
 #include "nsHTMLReflowMetrics.h"
 
 /**
  * nsFrame logging constants. We redefine the nspr
@@ -65,41 +62,41 @@
 #define NS_FRAME_TRACE_CHILD_REFLOW 0x4
 #define NS_FRAME_TRACE_NEW_FRAMES   0x8
 
 #define NS_FRAME_LOG_TEST(_lm,_bit) (PRIntn((_lm)->level) & (_bit))
 
 #ifdef NS_DEBUG
 #define NS_FRAME_LOG(_bit,_args)                                \
   PR_BEGIN_MACRO                                                \
-    if (NS_FRAME_LOG_TEST(nsIFrameDebug::GetLogModuleInfo(),_bit)) { \
+    if (NS_FRAME_LOG_TEST(nsFrame::GetLogModuleInfo(),_bit)) {  \
       PR_LogPrint _args;                                        \
     }                                                           \
   PR_END_MACRO
 #else
 #define NS_FRAME_LOG(_bit,_args)
 #endif
 
 // XXX Need to rework this so that logging is free when it's off
 #ifdef NS_DEBUG
 #define NS_FRAME_TRACE_IN(_method) Trace(_method, PR_TRUE)
 
 #define NS_FRAME_TRACE_OUT(_method) Trace(_method, PR_FALSE)
 
 // XXX remove me
 #define NS_FRAME_TRACE_MSG(_bit,_args)                          \
   PR_BEGIN_MACRO                                                \
-    if (NS_FRAME_LOG_TEST(nsIFrameDebug::GetLogModuleInfo(),_bit)) { \
+    if (NS_FRAME_LOG_TEST(nsFrame::GetLogModuleInfo(),_bit)) {  \
       TraceMsg _args;                                           \
     }                                                           \
   PR_END_MACRO
 
 #define NS_FRAME_TRACE(_bit,_args)                              \
   PR_BEGIN_MACRO                                                \
-    if (NS_FRAME_LOG_TEST(nsIFrameDebug::GetLogModuleInfo(),_bit)) { \
+    if (NS_FRAME_LOG_TEST(nsFrame::GetLogModuleInfo(),_bit)) {  \
       TraceMsg _args;                                           \
     }                                                           \
   PR_END_MACRO
 
 #define NS_FRAME_TRACE_REFLOW_IN(_method) Trace(_method, PR_TRUE)
 
 #define NS_FRAME_TRACE_REFLOW_OUT(_method, _status) \
   Trace(_method, PR_FALSE, _status)
@@ -120,19 +117,16 @@ struct nsBoxLayoutMetrics;
 /**
  * Implementation of a simple frame that's not splittable and has no
  * child frames.
  *
  * Sets the NS_FRAME_SYNCHRONIZE_FRAME_AND_VIEW bit, so the default
  * behavior is to keep the frame and view position and size in sync.
  */
 class nsFrame : public nsBox
-#ifdef NS_DEBUG
-  , public nsIFrameDebug
-#endif
 {
 public:
   /**
    * Create a new "empty" frame that maps a given piece of content into a
    * 0,0 area.
    */
   friend nsIFrame* NS_NewEmptyFrame(nsIPresShell* aShell,
                                     nsStyleContext* aContext);
@@ -227,22 +221,16 @@ public:
   NS_IMETHOD  SetNextContinuation(nsIFrame*);
   virtual nsIFrame* GetPrevInFlowVirtual() const;
   NS_IMETHOD  SetPrevInFlow(nsIFrame*);
   virtual nsIFrame* GetNextInFlowVirtual() const;
   NS_IMETHOD  SetNextInFlow(nsIFrame*);
   NS_IMETHOD  GetOffsetFromView(nsPoint& aOffset, nsIView** aView) const;
   virtual nsIAtom* GetType() const;
   virtual PRBool IsContainingBlock() const;
-#ifdef NS_DEBUG
-  NS_IMETHOD  List(FILE* out, PRInt32 aIndent) const;
-  NS_IMETHOD  GetFrameName(nsAString& aResult) const;
-  NS_IMETHOD_(nsFrameState) GetDebugStateBits() const;
-  NS_IMETHOD  DumpRegressionData(nsPresContext* aPresContext, FILE* out, PRInt32 aIndent);
-#endif
 
   NS_IMETHOD  GetSelected(PRBool *aSelected) const;
   NS_IMETHOD  IsSelectable(PRBool* aIsSelectable, PRUint8* aSelectStyle) const;
 
   NS_IMETHOD  GetSelectionController(nsPresContext *aPresContext, nsISelectionController **aSelCon);
 
   virtual PRBool PeekOffsetNoAmount(PRBool aForward, PRInt32* aOffset);
   virtual PRBool PeekOffsetCharacter(PRBool aForward, PRInt32* aOffset);
@@ -440,27 +428,24 @@ public:
   // object. Returns -1 on error or if the frame doesn't have a content object
   static PRInt32 ContentIndexInContainer(const nsIFrame* aFrame);
 
   static void IndentBy(FILE* out, PRInt32 aIndent) {
     while (--aIndent >= 0) fputs("  ", out);
   }
   
   void ListTag(FILE* out) const {
-    ListTag(out, (nsIFrame*)this);
+    ListTag(out, this);
   }
 
-  static void ListTag(FILE* out, nsIFrame* aFrame) {
+  static void ListTag(FILE* out, const nsIFrame* aFrame) {
     nsAutoString tmp;
-    nsIFrameDebug*  frameDebug = do_QueryFrame(aFrame);
-    if (frameDebug) {
-      frameDebug->GetFrameName(tmp);
-    }
+    aFrame->GetFrameName(tmp);
     fputs(NS_LossyConvertUTF16toASCII(tmp).get(), out);
-    fprintf(out, "@%p", static_cast<void*>(aFrame));
+    fprintf(out, "@%p", static_cast<const void*>(aFrame));
   }
 
   static void XMLQuote(nsString& aString);
 
   /**
    * Dump out the "base classes" regression data. This should dump
    * out the interior data, not the "frame" XML container. And it
    * should call the base classes same named method before doing
@@ -626,16 +611,86 @@ private:
                      nscoord aY,
                      nscoord aWidth,
                      nscoord aHeight,
                      PRBool aMoveFrame = PR_TRUE);
 
   NS_IMETHODIMP RefreshSizeCache(nsBoxLayoutState& aState);
 
   virtual nsILineIterator* GetLineIterator();
+
+#ifdef NS_DEBUG
+public:
+  // Formerly the nsIFrameDebug interface
+
+  NS_IMETHOD  List(FILE* out, PRInt32 aIndent) const;
+  /**
+   * lists the frames beginning from the root frame
+   * - calls root frame's List(...)
+   */
+  static void RootFrameList(nsPresContext* aPresContext,
+                            FILE* out, PRInt32 aIndent);
+
+  static void DumpFrameTree(nsIFrame* aFrame);
+
+  /**
+   * Get a printable from of the name of the frame type.
+   * XXX This should be eliminated and we use GetType() instead...
+   */
+  NS_IMETHOD  GetFrameName(nsAString& aResult) const;
+  /**
+   * Return the state bits that are relevant to regression tests (that
+   * is, those bits which indicate a real difference when they differ
+   */
+  NS_IMETHOD_(nsFrameState)  GetDebugStateBits() const;
+  /**
+   * Called to dump out regression data that describes the layout
+   * of the frame and its children, and so on. The format of the
+   * data is dictated to be XML (using a specific DTD); the
+   * specific kind of data dumped is up to the frame itself, with
+   * the caveat that some base types are defined.
+   * For more information, see XXX.
+   */
+  NS_IMETHOD  DumpRegressionData(nsPresContext* aPresContext,
+                                 FILE* out, PRInt32 aIndent);
+
+  /**
+   * See if style tree verification is enabled. To enable style tree
+   * verification add "styleverifytree:1" to your NSPR_LOG_MODULES
+   * environment variable (any non-zero debug level will work). Or,
+   * call SetVerifyStyleTreeEnable with PR_TRUE.
+   */
+  static PRBool GetVerifyStyleTreeEnable();
+
+  /**
+   * Set the verify-style-tree enable flag.
+   */
+  static void SetVerifyStyleTreeEnable(PRBool aEnabled);
+
+  /**
+   * The frame class and related classes share an nspr log module
+   * for logging frame activity.
+   *
+   * Note: the log module is created during library initialization which
+   * means that you cannot perform logging before then.
+   */
+  static PRLogModuleInfo* GetLogModuleInfo();
+
+  // Show frame borders when rendering
+  static void ShowFrameBorders(PRBool aEnable);
+  static PRBool GetShowFrameBorders();
+
+  // Show frame border of event target
+  static void ShowEventTargetFrameBorder(PRBool aEnable);
+  static PRBool GetShowEventTargetFrameBorder();
+
+  static void PrintDisplayList(nsDisplayListBuilder* aBuilder,
+                               const nsDisplayList& aList);
+
+#endif
 };
 
 // Start Display Reflow Debugging
 #ifdef DEBUG
 
   struct DR_cookie {
     DR_cookie(nsPresContext*          aPresContext,
               nsIFrame*                aFrame, 
diff --git a/layout/generic/nsFrameList.cpp b/layout/generic/nsFrameList.cpp
--- a/layout/generic/nsFrameList.cpp
+++ b/layout/generic/nsFrameList.cpp
@@ -35,19 +35,16 @@
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 /* class for maintaining a linked list of child frames */
 
 #include "nsFrameList.h"
 #include "nsIFrame.h"
-#ifdef DEBUG
-#include "nsIFrameDebug.h"
-#endif
 #include "nsLayoutUtils.h"
 
 #ifdef IBMBIDI
 #include "nsCOMPtr.h"
 #include "nsGkAtoms.h"
 #include "nsILineIterator.h"
 #include "nsBidiPresUtils.h"
 #endif // IBMBIDI
@@ -419,20 +416,17 @@ nsFrameList::GetPrevSiblingFor(nsIFrame*
 
 #ifdef DEBUG
 void
 nsFrameList::List(FILE* out) const
 {
   fputs("<\n", out);
   for (nsIFrame* frame = mFirstChild; frame;
        frame = frame->GetNextSibling()) {
-    nsIFrameDebug *frameDebug = do_QueryFrame(frame);
-    if (frameDebug) {
-      frameDebug->List(out, 1);
-    }
+    frame->List(out, 1);
   }
   fputs(">\n", out);
 }
 #endif
 
 #ifdef IBMBIDI
 nsIFrame*
 nsFrameList::GetPrevVisualFor(nsIFrame* aFrame) const
diff --git a/layout/generic/nsGfxScrollFrame.cpp b/layout/generic/nsGfxScrollFrame.cpp
--- a/layout/generic/nsGfxScrollFrame.cpp
+++ b/layout/generic/nsGfxScrollFrame.cpp
@@ -930,19 +930,16 @@ nsHTMLScrollFrame::CurPosAttributeChange
   mInner.CurPosAttributeChanged(aChild);
 }
 
 NS_QUERYFRAME_HEAD(nsHTMLScrollFrame)
   NS_QUERYFRAME_ENTRY(nsIAnonymousContentCreator)
   NS_QUERYFRAME_ENTRY(nsIScrollableFrame)
   NS_QUERYFRAME_ENTRY(nsIScrollableViewProvider)
   NS_QUERYFRAME_ENTRY(nsIStatefulFrame)
-#ifdef DEBUG
-  NS_QUERYFRAME_ENTRY(nsIFrameDebug)
-#endif
 NS_QUERYFRAME_TAIL_INHERITING(nsHTMLContainerFrame)
 
 //----------nsXULScrollFrame-------------------------------------------
 
 nsIFrame*
 NS_NewXULScrollFrame(nsIPresShell* aPresShell, nsStyleContext* aContext, PRBool aIsRoot)
 {
   return new (aPresShell) nsXULScrollFrame(aPresShell, aContext, aIsRoot);
@@ -1273,19 +1270,16 @@ nsXULScrollFrame::DoLayout(nsBoxLayoutSt
   return rv;
 }
 
 NS_QUERYFRAME_HEAD(nsXULScrollFrame)
   NS_QUERYFRAME_ENTRY(nsIAnonymousContentCreator)
   NS_QUERYFRAME_ENTRY(nsIScrollableFrame)
   NS_QUERYFRAME_ENTRY(nsIScrollableViewProvider)
   NS_QUERYFRAME_ENTRY(nsIStatefulFrame)
-#ifdef DEBUG
-  NS_QUERYFRAME_ENTRY(nsIFrameDebug)
-#endif
 NS_QUERYFRAME_TAIL_INHERITING(nsBoxFrame)
  
 //-------------------- Inner ----------------------
 
 nsGfxScrollFrameInner::nsGfxScrollFrameInner(nsContainerFrame* aOuter,
                                              PRBool aIsRoot,
                                              PRBool aIsXUL)
   : mScrollableView(nsnull),
diff --git a/layout/generic/nsIFrame.h b/layout/generic/nsIFrame.h
--- a/layout/generic/nsIFrame.h
+++ b/layout/generic/nsIFrame.h
@@ -2462,16 +2462,26 @@ protected:
    *              Input: mDirection
    *              Output: mResultContent, mContentOffset
    */
    nsresult PeekOffsetParagraph(nsPeekOffsetStruct *aPos);
 
 private:
   nsRect* GetOverflowAreaProperty(PRBool aCreateIfNecessary = PR_FALSE);
   void SetOverflowRect(const nsRect& aRect);
+
+#ifdef NS_DEBUG
+public:
+  // Formerly nsIFrameDebug
+  NS_IMETHOD  List(FILE* out, PRInt32 aIndent) const = 0;
+  NS_IMETHOD  GetFrameName(nsAString& aResult) const = 0;
+  NS_IMETHOD_(nsFrameState)  GetDebugStateBits() const = 0;
+  NS_IMETHOD  DumpRegressionData(nsPresContext* aPresContext,
+                                 FILE* out, PRInt32 aIndent) = 0;
+#endif
 };
 
 //----------------------------------------------------------------------
 
 /**
  * nsWeakFrame can be used to keep a reference to a nsIFrame in a safe way.
  * Whenever an nsIFrame object is deleted, the nsWeakFrames pointing
  * to it will be cleared.
diff --git a/layout/generic/nsIFrameDebug.h b/layout/generic/nsIFrameDebug.h
deleted file mode 100644
--- a/layout/generic/nsIFrameDebug.h
+++ /dev/null
@@ -1,116 +0,0 @@
-/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: MPL 1.1/GPL 2.0/LGPL 2.1
- *
- * The contents of this file are subject to the Mozilla Public License Version
- * 1.1 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * http://www.mozilla.org/MPL/
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- *
- * The Original Code is mozilla.org code.
- *
- * The Initial Developer of the Original Code is
- * Netscape Communications Corporation.
- * Portions created by the Initial Developer are Copyright (C) 1998
- * the Initial Developer. All Rights Reserved.
- *
- * Contributor(s):
- *
- * Alternatively, the contents of this file may be used under the terms of
- * either of the GNU General Public License Version 2 or later (the "GPL"),
- * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
- * in which case the provisions of the GPL or the LGPL are applicable instead
- * of those above. If you wish to allow use of your version of this file only
- * under the terms of either the GPL or the LGPL, and not to allow others to
- * use your version of this file under the terms of the MPL, indicate your
- * decision by deleting the provisions above and replace them with the notice
- * and other provisions required by the GPL or the LGPL. If you do not delete
- * the provisions above, a recipient may use your version of this file under
- * the terms of any one of the MPL, the GPL or the LGPL.
- *
- * ***** END LICENSE BLOCK ***** */
-
-/* debugging interface for all rendering objects */
-
-#ifndef nsIFrameDebug_h___
-#define nsIFrameDebug_h___
-
-#include "nsIFrame.h"
-
-class nsPresContext;
-struct PRLogModuleInfo;
-
-/**
- * Debug related functions
- */
-class nsIFrameDebug {
-public:
-  NS_DECLARE_FRAME_ACCESSOR(nsIFrameDebug)
-  
-  NS_IMETHOD  List(FILE* out, PRInt32 aIndent) const = 0;
-  /**
-   * lists the frames beginning from the root frame
-   * - calls root frame's List(...)
-   */
-  static void RootFrameList(nsPresContext* aPresContext, FILE* out, PRInt32 aIndent);
-
-  static void DumpFrameTree(nsIFrame* aFrame);
-
-  /**
-   * Get a printable from of the name of the frame type.
-   * XXX This should be eliminated and we use GetType() instead...
-   */
-  NS_IMETHOD  GetFrameName(nsAString& aResult) const = 0;
-  /**
-   * Return the state bits that are relevant to regression tests (that is, those bits which indicate a real difference when they differ
-   */
-  NS_IMETHOD_(nsFrameState)  GetDebugStateBits() const = 0;
-  /**
-   * Called to dump out regression data that describes the layout
-   * of the frame and its children, and so on. The format of the
-   * data is dictated to be XML (using a specific DTD); the
-   * specific kind of data dumped is up to the frame itself, with
-   * the caveat that some base types are defined.
-   * For more information, see XXX.
-   */
-  NS_IMETHOD  DumpRegressionData(nsPresContext* aPresContext, FILE* out, PRInt32 aIndent) = 0;
-
-  /**
-   * See if style tree verification is enabled. To enable style tree 
-   * verification add "styleverifytree:1" to your NSPR_LOG_MODULES 
-   * environment variable (any non-zero debug level will work). Or, 
-   * call SetVerifyStyleTreeEnable with PR_TRUE.
-   */
-  static PRBool GetVerifyStyleTreeEnable();
-
-  /**
-   * Set the verify-style-tree enable flag.
-   */
-  static void SetVerifyStyleTreeEnable(PRBool aEnabled);
-
-  /**
-   * The frame class and related classes share an nspr log module
-   * for logging frame activity.
-   *
-   * Note: the log module is created during library initialization which
-   * means that you cannot perform logging before then.
-   */
-  static PRLogModuleInfo* GetLogModuleInfo();
-
-  // Show frame borders when rendering
-  static void ShowFrameBorders(PRBool aEnable);
-  static PRBool GetShowFrameBorders();
-
-  // Show frame border of event target
-  static void ShowEventTargetFrameBorder(PRBool aEnable);
-  static PRBool GetShowEventTargetFrameBorder();
-  
-  static void PrintDisplayList(nsDisplayListBuilder* aBuilder, const nsDisplayList& aList);
-};
-
-#endif /* nsIFrameDebug_h___ */
diff --git a/layout/generic/nsLineBox.cpp b/layout/generic/nsLineBox.cpp
--- a/layout/generic/nsLineBox.cpp
+++ b/layout/generic/nsLineBox.cpp
@@ -132,30 +132,27 @@ nsLineBox::Cleanup()
     mData = nsnull;
   }
 }
 
 #ifdef DEBUG
 static void
 ListFloats(FILE* out, PRInt32 aIndent, const nsFloatCacheList& aFloats)
 {
-  nsAutoString frameName;
   nsFloatCache* fc = aFloats.Head();
   while (fc) {
     nsFrame::IndentBy(out, aIndent);
     nsPlaceholderFrame* ph = fc->mPlaceholder;
     if (ph) {
       fprintf(out, "placeholder@%p ", static_cast<void*>(ph));
       nsIFrame* frame = ph->GetOutOfFlowFrame();
       if (frame) {
-        nsIFrameDebug* frameDebug = do_QueryFrame(frame);
-        if (frameDebug) {
-          frameDebug->GetFrameName(frameName);
-          fputs(NS_LossyConvertUTF16toASCII(frameName).get(), out);
-        }
+        nsAutoString frameName;
+        frame->GetFrameName(frameName);
+        fputs(NS_LossyConvertUTF16toASCII(frameName).get(), out);
       }
 
       if (!frame) {
         fputs("\n###!!! NULL out-of-flow frame", out);
       }
       fprintf(out, "\n");
     }
     fc = fc->Next();
@@ -217,20 +214,17 @@ nsLineBox::List(FILE* out, PRInt32 aInde
             mData->mCombinedArea.x, mData->mCombinedArea.y,
             mData->mCombinedArea.width, mData->mCombinedArea.height);
   }
   fprintf(out, "<\n");
 
   nsIFrame* frame = mFirstChild;
   PRInt32 n = GetChildCount();
   while (--n >= 0) {
-    nsIFrameDebug* frameDebug = do_QueryFrame(frame);
-    if (frameDebug) {
-      frameDebug->List(out, aIndent + 1);
-    }
+    frame->List(out, aIndent + 1);
     frame = frame->GetNextSibling();
   }
 
   for (i = aIndent; --i >= 0; ) fputs("  ", out);
   if (HasFloats()) {
     fputs("> floats <\n", out);
     ListFloats(out, aIndent + 1, mInlineData->mFloats);
     for (i = aIndent; --i >= 0; ) fputs("  ", out);
diff --git a/layout/generic/nsQueryFrame.h b/layout/generic/nsQueryFrame.h
--- a/layout/generic/nsQueryFrame.h
+++ b/layout/generic/nsQueryFrame.h
@@ -101,17 +101,16 @@ public:
     nsHTMLScrollFrame_id,
     nsIAnonymousContentCreator_id,
     nsICSSPseudoComparator_id,
     nsICanvasFrame_id,
     nsICheckboxControlFrame_id,
     nsIComboboxControlFrame_id,
     nsIFormControlFrame_id,
     nsIFrame_id,
-    nsIFrameDebug_id,
     nsIFrameFrame_id,
     nsIImageFrame_id,
     nsIListControlFrame_id,
     nsIMathMLFrame_id,
     nsIMenuFrame_id,
     nsIObjectFrame_id,
     nsIPageSequenceFrame_id,
     nsIPercentHeightObserver_id,
diff --git a/layout/generic/nsVideoFrame.cpp b/layout/generic/nsVideoFrame.cpp
--- a/layout/generic/nsVideoFrame.cpp
+++ b/layout/generic/nsVideoFrame.cpp
@@ -76,19 +76,16 @@ nsVideoFrame::nsVideoFrame(nsStyleContex
 }
 
 nsVideoFrame::~nsVideoFrame()
 {
 }
 
 NS_QUERYFRAME_HEAD(nsVideoFrame)
   NS_QUERYFRAME_ENTRY(nsIAnonymousContentCreator)
-#ifdef DEBUG
-  NS_QUERYFRAME_ENTRY(nsIFrameDebug)
-#endif
 NS_QUERYFRAME_TAIL_INHERITING(nsContainerFrame)
 
 nsresult
 nsVideoFrame::CreateAnonymousContent(nsTArray<nsIContent*>& aElements)
 {
   nsNodeInfoManager *nodeInfoManager = GetContent()->GetCurrentDoc()->NodeInfoManager();
   nsCOMPtr<nsINodeInfo> nodeInfo;
   if (HasVideoElement()) {
diff --git a/layout/mathml/nsMathMLmtableFrame.cpp b/layout/mathml/nsMathMLmtableFrame.cpp
--- a/layout/mathml/nsMathMLmtableFrame.cpp
+++ b/layout/mathml/nsMathMLmtableFrame.cpp
@@ -335,19 +335,17 @@ ListMathMLTree(nsIFrame* atLeast)
   // climb up to <math> or <body> if <math> isn't there
   nsIFrame* f = atLeast;
   for ( ; f; f = f->GetParent()) {
     nsIContent* c = f->GetContent();
     if (!c || c->Tag() == nsGkAtoms::math || c->Tag() == nsGkAtoms::body)
       break;
   }
   if (!f) f = atLeast;
-  nsIFrameDebug* fdbg;
-  CallQueryInterface(f, &fdbg);
-  fdbg->List(stdout, 0);
+  f->List(stdout, 0);
 }
 #endif
 
 // --------
 // implementation of nsMathMLmtableOuterFrame
 
 NS_QUERYFRAME_HEAD(nsMathMLmtableOuterFrame)
   NS_QUERYFRAME_ENTRY(nsIMathMLFrame)
diff --git a/layout/printing/nsPrintEngine.cpp b/layout/printing/nsPrintEngine.cpp
--- a/layout/printing/nsPrintEngine.cpp
+++ b/layout/printing/nsPrintEngine.cpp
@@ -138,17 +138,16 @@ static const char kPrintingPromptService
 #include "nsIInterfaceRequestor.h"
 #include "nsIInterfaceRequestorUtils.h"
 #include "nsIDocShellTreeItem.h"
 #include "nsIDocShellTreeNode.h"
 #include "nsIDocShellTreeOwner.h"
 #include "nsIWebBrowserChrome.h"
 #include "nsIDocShell.h"
 #include "nsIBaseWindow.h"
-#include "nsIFrameDebug.h"
 #include "nsILayoutHistoryState.h"
 #include "nsFrameManager.h"
 #include "nsIParser.h"
 #include "nsGUIEvent.h"
 #include "nsHTMLReflowState.h"
 #include "nsIDOMHTMLAnchorElement.h"
 #include "nsIDOMHTMLAreaElement.h"
 #include "nsIDOMHTMLLinkElement.h"
@@ -2171,20 +2170,17 @@ nsPrintEngine::DoPrint(nsPrintObject * a
     // We are done preparing for printing, so we can turn this off
     mPrt->mPreparingForPrint = PR_FALSE;
 
     // mPrt->mDebugFilePtr this is onlu non-null when compiled for debugging
     if (nsnull != mPrt->mDebugFilePtr) {
 #ifdef NS_DEBUG
       // output the regression test
       nsIFrame* root = poPresShell->FrameManager()->GetRootFrame();
-      nsIFrameDebug* fdbg = do_QueryFrame(root);
-      if (fdbg) {
-        fdbg->DumpRegressionData(poPresContext, mPrt->mDebugFilePtr, 0);
-      }
+      root->DumpRegressionData(poPresContext, mPrt->mDebugFilePtr, 0);
       fclose(mPrt->mDebugFilePtr);
       SetIsPrinting(PR_FALSE);
 #endif
     } else {
 #ifdef EXTENDED_DEBUG_PRINTING
       nsIFrame* rootFrame = poPresShell->FrameManager()->GetRootFrame();
       if (aPO->IsPrintable()) {
         char * docStr;
@@ -3333,19 +3329,17 @@ static void RootFrameList(nsPresContext*
 {
   if (!aPresContext || !out)
     return;
 
   nsIPresShell *shell = aPresContext->GetPresShell();
   if (shell) {
     nsIFrame* frame = shell->FrameManager()->GetRootFrame();
     if (frame) {
-      nsIFrameDebug* debugFrame = do_QueryFrame(frame);
-      if (debugFrame)
-        debugFrame->List(aPresContext, out, aIndent);
+      frame->List(aPresContext, out, aIndent);
     }
   }
 }
 
 /** ---------------------------------------------------
  *  Dumps Frames for Printing
  */
 static void DumpFrames(FILE*                 out,
@@ -3360,21 +3354,17 @@ static void DumpFrames(FILE*            
   NS_ASSERTION(aFrame, "Pointer is null!");
 
   nsIFrame* child = aFrame->GetFirstChild(nsnull);
   while (child != nsnull) {
     for (PRInt32 i=0;i<aLevel;i++) {
      fprintf(out, "  ");
     }
     nsAutoString tmp;
-
-    nsIFrameDebug* frameDebug = do_QueryFrame(child);
-    if (frameDebug) {
-      frameDebug->GetFrameName(tmp);
-    }
+    child->GetFrameName(tmp);
     fputs(NS_LossyConvertUTF16toASCII(tmp).get(), out);
     PRBool isSelected;
     if (NS_SUCCEEDED(child->IsVisibleForPainting(aPresContext, *aRendContext, PR_TRUE, &isSelected))) {
       fprintf(out, " %p %s", child, isSelected?"VIS":"UVS");
       nsRect rect = child->GetRect();
       fprintf(out, "[%d,%d,%d,%d] ", rect.x, rect.y, rect.width, rect.height);
       fprintf(out, "v: %p ", (void*)child->GetView());
       fprintf(out, "\n");
diff --git a/layout/svg/base/src/nsSVGGradientFrame.h b/layout/svg/base/src/nsSVGGradientFrame.h
--- a/layout/svg/base/src/nsSVGGradientFrame.h
+++ b/layout/svg/base/src/nsSVGGradientFrame.h
@@ -66,17 +66,16 @@ public:
   // nsIFrame interface:
   virtual void DidSetStyleContext(nsStyleContext* aOldStyleContext);
 
   NS_IMETHOD AttributeChanged(PRInt32         aNameSpaceID,
                               nsIAtom*        aAttribute,
                               PRInt32         aModType);
 
 #ifdef DEBUG
-  // nsIFrameDebug interface:
   NS_IMETHOD GetFrameName(nsAString& aResult) const
   {
     return MakeFrameName(NS_LITERAL_STRING("SVGGradient"), aResult);
   }
 #endif // DEBUG
 
 private:
 
@@ -163,17 +162,16 @@ public:
 
   virtual nsIAtom* GetType() const;  // frame type: nsGkAtoms::svgLinearGradientFrame
 
   NS_IMETHOD AttributeChanged(PRInt32         aNameSpaceID,
                               nsIAtom*        aAttribute,
                               PRInt32         aModType);
 
 #ifdef DEBUG
-  // nsIFrameDebug interface:
   NS_IMETHOD GetFrameName(nsAString& aResult) const
   {
     return MakeFrameName(NS_LITERAL_STRING("SVGLinearGradient"), aResult);
   }
 #endif // DEBUG
 
 protected:
   float GradientLookupAttribute(nsIAtom *aAtomName, PRUint16 aEnumName);
@@ -204,17 +202,16 @@ public:
 
   virtual nsIAtom* GetType() const;  // frame type: nsGkAtoms::svgRadialGradientFrame
 
   NS_IMETHOD AttributeChanged(PRInt32         aNameSpaceID,
                               nsIAtom*        aAttribute,
                               PRInt32         aModType);
 
 #ifdef DEBUG
-  // nsIFrameDebug interface:
   NS_IMETHOD GetFrameName(nsAString& aResult) const
   {
     return MakeFrameName(NS_LITERAL_STRING("SVGRadialGradient"), aResult);
   }
 #endif // DEBUG
 
 protected:
   float GradientLookupAttribute(nsIAtom *aAtomName, PRUint16 aEnumName,
diff --git a/layout/svg/base/src/nsSVGPatternFrame.h b/layout/svg/base/src/nsSVGPatternFrame.h
--- a/layout/svg/base/src/nsSVGPatternFrame.h
+++ b/layout/svg/base/src/nsSVGPatternFrame.h
@@ -94,17 +94,16 @@ public:
   /**
    * Get the "type" of the frame
    *
    * @see nsGkAtoms::svgPatternFrame
    */
   virtual nsIAtom* GetType() const;
 
 #ifdef DEBUG
-  // nsIFrameDebug interface:
   NS_IMETHOD GetFrameName(nsAString& aResult) const
   {
     return MakeFrameName(NS_LITERAL_STRING("SVGPattern"), aResult);
   }
 #endif // DEBUG
 
 protected:
   // Internal methods for handling referenced patterns
diff --git a/layout/svg/base/src/nsSVGStopFrame.cpp b/layout/svg/base/src/nsSVGStopFrame.cpp
--- a/layout/svg/base/src/nsSVGStopFrame.cpp
+++ b/layout/svg/base/src/nsSVGStopFrame.cpp
@@ -77,17 +77,16 @@ public:
   virtual nsIAtom* GetType() const;
 
   virtual PRBool IsFrameOfType(PRUint32 aFlags) const
   {
     return nsSVGStopFrameBase::IsFrameOfType(aFlags & ~(nsIFrame::eSVG));
   }
 
 #ifdef DEBUG
-  // nsIFrameDebug interface:
   NS_IMETHOD GetFrameName(nsAString& aResult) const
   {
     return MakeFrameName(NS_LITERAL_STRING("SVGStop"), aResult);
   }
 #endif
 };
 
 //----------------------------------------------------------------------
diff --git a/layout/xul/base/src/nsPopupSetFrame.cpp b/layout/xul/base/src/nsPopupSetFrame.cpp
--- a/layout/xul/base/src/nsPopupSetFrame.cpp
+++ b/layout/xul/base/src/nsPopupSetFrame.cpp
@@ -361,20 +361,17 @@ nsPopupSetFrame::List(FILE* out, PRInt32
         fputs(NS_LossyConvertUTF16toASCII(tmp).get(), out);
       }
       fputs("<\n", out);
       while (nsnull != kid) {
         // Verify the child frame's parent frame pointer is correct
         NS_ASSERTION(kid->GetParent() == (nsIFrame*)this, "bad parent frame pointer");
 
         // Have the child frame list
-        nsIFrameDebug*  frameDebug = do_QueryFrame(kid);
-        if (frameDebug) {
-          frameDebug->List(out, aIndent + 1);
-        }
+        kid->List(out, aIndent + 1);
         kid = kid->GetNextSibling();
       }
       IndentBy(out, aIndent);
       fputs(">\n", out);
     }
     listName = GetAdditionalChildListName(listIndex++);
   } while(nsnull != listName);
 
@@ -388,20 +385,17 @@ nsPopupSetFrame::List(FILE* out, PRInt32
     nsAutoString tmp;
     nsGkAtoms::popupList->ToString(tmp);
     fputs(NS_LossyConvertUTF16toASCII(tmp).get(), out);
     fputs(" for ", out);
     ListTag(out);
     fputs(" <\n", out);
     ++aIndent;
     for (nsPopupFrameList* l = mPopupList; l; l = l->mNextPopup) {
-      nsIFrameDebug* frameDebug = do_QueryFrame(l->mPopupFrame);
-      if (frameDebug) {
-        frameDebug->List(out, aIndent);
-      }
+      l->mPopupFrame->List(out, aIndent);
     }
     --aIndent;
     IndentBy(out, aIndent);
     fputs(">\n", out);
     --aIndent;
     IndentBy(out, aIndent);
     fputs(">\n", out);
     outputOneList = PR_TRUE;
