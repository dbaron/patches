Avoid crashing on fontFaceRule.style.getPropertyValue('font-family') when there's no font-family descriptor.  (Bug 482148)

diff --git a/layout/style/nsCSSRules.cpp b/layout/style/nsCSSRules.cpp
--- a/layout/style/nsCSSRules.cpp
+++ b/layout/style/nsCSSRules.cpp
@@ -1484,22 +1484,19 @@ CSSNameSpaceRuleImpl::GetParentRule(nsID
 // A src: descriptor is represented as an array value; each entry in
 // the array can be eCSSUnit_URL, eCSSUnit_Local_Font, or
 // eCSSUnit_Font_Format.  Blocks of eCSSUnit_Font_Format may appear
 // only after one of the first two.  (css3-fonts only contemplates
 // annotating URLs with formats, but we handle the general case.)
 static void
 SerializeFontSrc(const nsCSSValue& src, nsAString & aResult NS_OUTPARAM)
 {
-  NS_PRECONDITION(src.GetUnit() == eCSSUnit_Null ||
-                  src.GetUnit() == eCSSUnit_Array,
+  NS_PRECONDITION(src.GetUnit() == eCSSUnit_Array,
                   "improper value unit for src:");
   aResult.Truncate();
-  if (src.GetUnit() != eCSSUnit_Array)
-    return;
 
   const nsCSSValue::Array& sources = *src.GetArrayValue();
   PRUint32 i = 0;
 
   while (i < sources.Count()) {
     nsAutoString formats;
 
     if (sources[i].GetUnit() == eCSSUnit_URL) {
@@ -1569,16 +1566,21 @@ nsCSSFontFaceStyleDecl::GetPropertyValue
                       eCSSFontDesc_COUNT - 1);
 
   aResult.Truncate();
   if (aFontDescID == eCSSFontDesc_UNKNOWN)
     return NS_OK;
 
   const nsCSSValue& val = this->*nsCSSFontFaceStyleDecl::Fields[aFontDescID];
 
+  if (val.GetUnit() == eCSSUnit_Null) {
+    // Avoid having to check no-value in the Family and Src cases below.
+    return NS_OK;
+  }
+
   switch (aFontDescID) {
   case eCSSFontDesc_Family: {
       // we don't use AppendCSSValueToString here because it doesn't
       // canonicalize the way we want, and anyway it's overkill when
       // we know we have eCSSUnit_String
       NS_ASSERTION(val.GetUnit() == eCSSUnit_String, "unexpected unit");
       nsDependentString family(val.GetStringBufferValue());
       nsStyleUtil::AppendEscapedCSSString(family, aResult);
