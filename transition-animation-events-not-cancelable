From: L. David Baron <dbaron@dbaron.org>

Transition events and animation events are not cancelable.

diff --git a/content/events/test/test_eventctors.html b/content/events/test/test_eventctors.html
--- a/content/events/test/test_eventctors.html
+++ b/content/events/test/test_eventctors.html
@@ -55,17 +55,17 @@ try {
 } catch(exp) {
   ex = true;
 }
 ok(ex, "2nd parameter should be an object!");
 ex = false;
 
 
 e = new Event("hello");
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 e.isTrusted = true;
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 
 try {
   e.__defineGetter__("isTrusted", function() { return true });
 } catch (exp) {
   ex = true;
@@ -79,47 +79,47 @@ ok(!("isTrusted" in Object.getPrototypeO
 ok(!e.bubbles, "Event shouldn't bubble!");
 ok(!e.cancelable, "Event shouldn't be cancelable!");
 is(e.eventPhase, Event.NONE, "Wrong event phase");
 document.dispatchEvent(e);
 is(e.eventPhase, Event.NONE, "Wrong event phase");
 is(receivedEvent, e, "Wrong event!");
 
 e = new Event("hello", null);
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(!e.bubbles, "Event shouldn't bubble!");
 ok(!e.cancelable, "Event shouldn't be cancelable!");
 is(e.eventPhase, Event.NONE, "Wrong event phase");
 document.dispatchEvent(e);
 is(e.eventPhase, Event.NONE, "Wrong event phase");
 is(receivedEvent, e, "Wrong event!");
 
 e = new Event("hello", undefined);
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(!e.bubbles, "Event shouldn't bubble!");
 ok(!e.cancelable, "Event shouldn't be cancelable!");
 is(e.eventPhase, Event.NONE, "Wrong event phase");
 document.dispatchEvent(e);
 is(e.eventPhase, Event.NONE, "Wrong event phase");
 is(receivedEvent, e, "Wrong event!");
 
 e = new Event("hello", {});
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(!e.bubbles, "Event shouldn't bubble!");
 ok(!e.cancelable, "Event shouldn't be cancelable!");
 is(e.eventPhase, Event.NONE, "Wrong event phase");
 document.dispatchEvent(e);
 is(e.eventPhase, Event.NONE, "Wrong event phase");
 is(receivedEvent, e, "Wrong event!");
 
 e = new Event("hello", { bubbles: true, cancelable: true });
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(e.bubbles, "Event should bubble!");
 ok(e.cancelable, "Event should be cancelable!");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 // CustomEvent
 
@@ -127,34 +127,34 @@ try {
   e = new CustomEvent();
 } catch(exp) {
   ex = true;
 }
 ok(ex, "First parameter is required!");
 ex = false;
 
 e = new CustomEvent("hello");
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(!e.bubbles, "Event shouldn't bubble!");
 ok(!e.cancelable, "Event shouldn't be cancelable!");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 e = new CustomEvent("hello", { bubbles: true, cancelable: true, detail: window });
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(e.bubbles, "Event should bubble!");
 ok(e.cancelable, "Event should be cancelable!");
 is(e.detail, window , "Wrong event.detail!");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 e = new CustomEvent("hello", { cancelable: true, detail: window });
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(!e.bubbles, "Event shouldn't bubble!");
 ok(e.cancelable, "Event should be cancelable!");
 is(e.detail, window , "Wrong event.detail!");
 
 e = new CustomEvent("hello", { detail: 123 });
 is(e.detail, 123, "Wrong event.detail!");
 ok(!e.bubbles, "Event shouldn't bubble!");
@@ -182,17 +182,17 @@ try {
   e = new BlobEvent();
 } catch(exp) {
   ex = true;
 }
 ok(ex, "First parameter is required!");
 ex = false;
 
 e = new BlobEvent("hello");
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 try {
   e.__defineGetter__("isTrusted", function() { return true });
 } catch (exp) {
   ex = true;
 }
 ok(ex, "Shouldn't be able to re-define the getter for isTrusted.");
 ex = false;
@@ -200,27 +200,27 @@ ok(!e.isTrusted, "BlobEvent shouldn't be
 
 ok(!e.bubbles, "Event shouldn't bubble!");
 ok(!e.cancelable, "Event shouldn't be cancelable!");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 var blob = Blob();
 e = new BlobEvent("hello", { bubbles: true, cancelable: true, data: blob });
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(e.bubbles, "Event should bubble!");
 ok(e.cancelable, "Event should be cancelable!");
 is(e.data, blob , "Wrong event.data!");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 
 e = new BlobEvent("hello", {data: blob});
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(!e.bubbles, "Event shouldn't bubble!");
 ok(!e.cancelable, "Event should be cancelable1!");
 is(e.data, blob , "Wrong event.data!");
 
 e = new BlobEvent("hello", { data: null });
 is(e.data, null, "Wrong event.data!");
 ok(!e.bubbles, "Event shouldn't bubble!");
@@ -232,41 +232,41 @@ try {
   e = new CloseEvent();
 } catch(exp) {
   ex = true;
 }
 ok(ex, "First parameter is required!");
 ex = false;
 
 e = new CloseEvent("hello");
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(!e.bubbles, "Event shouldn't bubble!");
 ok(!e.cancelable, "Event shouldn't be cancelable!");
 is(e.wasClean, false, "wasClean should be false!");
 is(e.code, 0, "code should be 0!");
 is(e.reason, "", "reason should be ''!");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 e = new CloseEvent("hello",
   { bubbles: true, cancelable: true, wasClean: true, code: 1, reason: "foo" });
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(e.bubbles, "Event should bubble!");
 ok(e.cancelable, "Event should be cancelable!");
 is(e.wasClean, true, "wasClean should be true!");
 is(e.code, 1, "code should be 1!");
 is(e.reason, "foo", "reason should be 'foo'!");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 e = new CloseEvent("hello",
   { bubbles: true, cancelable: true, wasClean: true, code: 1 });
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(e.bubbles, "Event should bubble!");
 ok(e.cancelable, "Event should be cancelable!");
 is(e.wasClean, true, "wasClean should be true!");
 is(e.code, 1, "code should be 1!");
 is(e.reason, "", "reason should be ''!");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
@@ -278,39 +278,39 @@ try {
   e = new HashChangeEvent();
 } catch(exp) {
   ex = true;
 }
 ok(ex, "First parameter is required!");
 ex = false;
 
 e = new HashChangeEvent("hello");
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(!e.bubbles, "Event shouldn't bubble!");
 ok(!e.cancelable, "Event shouldn't be cancelable!");
 is(e.oldURL, "", "oldURL should be ''");
 is(e.newURL, "", "newURL should be ''");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 e = new HashChangeEvent("hello",
   { bubbles: true, cancelable: true, oldURL: "old", newURL: "new" });
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(e.bubbles, "Event should bubble!");
 ok(e.cancelable, "Event should be cancelable!");
 is(e.oldURL, "old", "oldURL should be 'old'");
 is(e.newURL, "new", "newURL should be 'new'");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 e = new HashChangeEvent("hello",
   { bubbles: true, cancelable: true, newURL: "new" });
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(e.bubbles, "Event should bubble!");
 ok(e.cancelable, "Event should be cancelable!");
 is(e.oldURL, "", "oldURL should be ''");
 is(e.newURL, "new", "newURL should be 'new'");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
@@ -320,36 +320,36 @@ try {
   e = new PageTransitionEvent();
 } catch(exp) {
   ex = true;
 }
 ok(ex, "First parameter is required!");
 ex = false;
 
 e = new PageTransitionEvent("hello");
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(!e.bubbles, "Event shouldn't bubble!");
 ok(!e.cancelable, "Event shouldn't be cancelable!");
 is(e.persisted, false, "persisted should be false");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 e = new PageTransitionEvent("hello",
   { bubbles: true, cancelable: true, persisted: true});
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(e.bubbles, "Event should bubble!");
 ok(e.cancelable, "Event should be cancelable!");
 is(e.persisted, true, "persisted should be true");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 e = new PageTransitionEvent("hello", { persisted: true});
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(!e.bubbles, "Event shouldn't bubble!");
 ok(!e.cancelable, "Event shouldn't be cancelable!");
 is(e.persisted, true, "persisted should be true");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 // PopStateEvent
@@ -358,37 +358,37 @@ try {
   e = new PopStateEvent();
 } catch(exp) {
   ex = true;
 }
 ok(ex, "First parameter is required!");
 ex = false;
 
 e = new PopStateEvent("hello");
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(!e.bubbles, "Event shouldn't bubble!");
 ok(!e.cancelable, "Event shouldn't be cancelable!");
 is(e.state, null, "persisted should be null");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 e = new PopStateEvent("hello",
   { bubbles: true, cancelable: true, state: window});
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(e.bubbles, "Event should bubble!");
 ok(e.cancelable, "Event should be cancelable!");
 is(e.state, window, "persisted should be window");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 
 e = new PopStateEvent("hello", { state: window});
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(!e.bubbles, "Event shouldn't bubble!");
 ok(!e.cancelable, "Event shouldn't be cancelable!");
 is(e.state, window, "persisted should be window");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 // UIEvent
@@ -415,28 +415,28 @@ try {
 } catch(exp) {
   ex = true;
 }
 ok(!ex, "null is a valid value.");
 is(e.view, null);
 ex = false;
 
 e = new UIEvent("hello");
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(!e.bubbles, "Event shouldn't bubble!");
 ok(!e.cancelable, "Event shouldn't be cancelable!");
 is(e.detail, 0, "detail should be 0");
 is(e.view, null, "view should be null");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 e = new UIEvent("hello",
   { bubbles: true, cancelable: true, view: window, detail: 1});
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(e.bubbles, "Event should bubble!");
 ok(e.cancelable, "Event should be cancelable!");
 is(e.detail, 1, "detail should be 1");
 is(e.view, window, "view should be window");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
@@ -449,84 +449,84 @@ try {
   e = new StorageEvent();
 } catch(exp) {
   ex = true;
 }
 ok(ex, "First parameter is required!");
 ex = false;
 
 e = new StorageEvent("hello");
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(!e.bubbles, "Event shouldn't bubble!");
 ok(!e.cancelable, "Event shouldn't be cancelable!");
 is(e.key, null, "key should be null");
 is(e.oldValue, null, "oldValue should be null");
 is(e.newValue, null, "newValue should be null");
 is(e.url, "", "url should be ''");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 e = new StorageEvent("hello",
   { bubbles: true, cancelable: true, key: "key",
     oldValue: "oldValue", newValue: "newValue", url: "url",
     storageArea: localStorage });
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event shouldn't be trusted!");
 ok(e.bubbles, "Event should bubble!");
 ok(e.cancelable, "Event should be cancelable!");
 is(e.key, "key", "Wrong value");
 is(e.oldValue, "oldValue", "Wrong value");
 is(e.newValue, "newValue", "Wrong value");
 is(e.url, "url", "Wrong value");
 is(e.storageArea, localStorage, "Wrong value");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 // DeviceProximityEvent
 e = new DeviceProximityEvent("hello", {min: 0, value: 1, max: 2});
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event should not be trusted");
 is(e.value, 1, "value should be 1");
 is(e.min, 0, "min should be 0");
 is(e.max, 2, "max should be 2");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 e = new DeviceProximityEvent("hello");
 is(e.value, Infinity, "Uninitialized value should be infinity");
 is(e.min, -Infinity, "Uninitialized min should be -infinity");
 is(e.max, Infinity, "Uninitialized max should be infinity");
 
 // UserProximityEvent
 e = new UserProximityEvent("hello", {near: true});
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event should not be trusted");
 is(e.near, true, "near should be true");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 // DeviceLightEvent
 e = new DeviceLightEvent("hello", {value: 1} );
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event should not be trusted");
 is(e.value, 1, "value should be 1");
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
 // DeviceOrientationEvent
 e = new DeviceOrientationEvent("hello");
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event should not be trusted");
 is(e.alpha, 0);
 is(e.beta, 0);
 is(e.gamma, 0);
 is(e.absolute, false);
 
 e = new DeviceOrientationEvent("hello", { alpha: 1, beta: 2, gamma: 3, absolute: true } );
-ok(e.type, "hello", "Wrong event type!");
+is(e.type, "hello", "Wrong event type!");
 ok(!e.isTrusted, "Event should not be trusted");
 is(e.alpha, 1);
 is(e.beta, 2);
 is(e.gamma, 3);
 is(e.absolute, true);
 document.dispatchEvent(e);
 is(receivedEvent, e, "Wrong event!");
 
@@ -536,17 +536,17 @@ try {
   e = new MouseEvent();
 } catch(exp) {
   ex = true;
 }
 ok(ex, "MouseEvent: First parameter is required!");
 ex = false;
 
 e = new MouseEvent("hello");
-ok(e.type, "hello", "MouseEvent: Wrong event type!");
+is(e.type, "hello", "MouseEvent: Wrong event type!");
 ok(!e.isTrusted, "MouseEvent: Event shouldn't be trusted!");
 ok(!e.bubbles, "MouseEvent: Event shouldn't bubble!");
 ok(!e.cancelable, "MouseEvent: Event shouldn't be cancelable!");
 document.dispatchEvent(e);
 is(receivedEvent, e, "MouseEvent: Wrong event!");
 
 var mouseEventProps =
 [ { screenX: 0 },
@@ -604,17 +604,17 @@ try {
   e = new PopupBlockedEvent();
 } catch(exp) {
   ex = true;
 }
 ok(ex, "PopupBlockedEvent: First parameter is required!");
 ex = false;
 
 e = new PopupBlockedEvent("hello");
-ok(e.type, "hello", "PopupBlockedEvent: Wrong event type!");
+is(e.type, "hello", "PopupBlockedEvent: Wrong event type!");
 ok(!e.isTrusted, "PopupBlockedEvent: Event shouldn't be trusted!");
 ok(!e.bubbles, "PopupBlockedEvent: Event shouldn't bubble!");
 ok(!e.cancelable, "PopupBlockedEvent: Event shouldn't be cancelable!");
 document.dispatchEvent(e);
 is(receivedEvent, e, "PopupBlockedEvent: Wrong event!");
 
 e = new PopupBlockedEvent("hello",
                           { requestingWindow: window,
@@ -632,17 +632,17 @@ try {
   e = new SmartCardEvent();
 } catch(exp) {
   ex = true;
 }
 ok(ex, "SmartCardEvent: First parameter is required!");
 ex = false;
 
 e = new SmartCardEvent("hello");
-ok(e.type, "hello", "SmartCardEvent: Wrong event type!");
+is(e.type, "hello", "SmartCardEvent: Wrong event type!");
 ok(!e.isTrusted, "SmartCardEvent: Event shouldn't be trusted!");
 ok(!e.bubbles, "SmartCardEvent: Event shouldn't bubble!");
 ok(!e.cancelable, "SmartCardEvent: Event shouldn't be cancelable!");
 is(e.tokenName, "");
 document.dispatchEvent(e);
 is(receivedEvent, e, "SmartCardEvent: Wrong event!");
 
 e = new SmartCardEvent("hello", { tokenName: "foo" });
@@ -654,17 +654,17 @@ try {
   e = new WheelEvent();
 } catch(exp) {
   ex = true;
 }
 ok(ex, "WheelEvent: First parameter is required!");
 ex = false;
 
 e = new WheelEvent("hello");
-ok(e.type, "hello", "WheelEvent: Wrong event type!");
+is(e.type, "hello", "WheelEvent: Wrong event type!");
 ok(!e.isTrusted, "WheelEvent: Event shouldn't be trusted!");
 ok(!e.bubbles, "WheelEvent: Event shouldn't bubble!");
 ok(!e.cancelable, "WheelEvent: Event shouldn't be cancelable!");
 document.dispatchEvent(e);
 is(receivedEvent, e, "WheelEvent: Wrong event!");
 
 var wheelEventProps =
 [ { screenX: 0 },
@@ -719,12 +719,38 @@ while (testWheelProps.length) {
       is(e[def], defaultWheelEventValues[def],
          "WheelEvent: Wrong default value for " + def + "!");
     } else {
       is(e[def], p[def], "WheelEvent: Wrong event init value for " + def + "!");
     }
   }
 }
 
+// TransitionEvent
+e = new TransitionEvent("hello", { propertyName: "color", elapsedTime: 3.5, pseudoElement: "", foobar: "baz" })
+is("propertyName" in e, true, "Transition events have propertyName property");
+is("foobar" in e, false, "Transition events do not copy random properties from event init");
+is(e.propertyName, "color", "Transition event copies propertyName from TransitionEventInit");
+is(e.elapsedTime, 3.5, "Transition event copies elapsedTime from TransitionEventInit");
+is(e.pseudoElement, "", "Transition event copies pseudoElement from TransitionEventInit");
+is(e.bubbles, false, "Lack of bubbles property in TransitionEventInit");
+is(e.cancelable, false, "Lack of cancelable property in TransitionEventInit");
+is(e.type, "hello", "Wrong event type!");
+is(e.isTrusted, false, "Event shouldn't be trusted!");
+is(e.eventPhase, Event.NONE, "Wrong event phase");
+
+// AnimationEvent
+e = new AnimationEvent("hello", { animationName: "bounce3", elapsedTime: 3.5, pseudoElement: "", foobar: "baz" })
+is("animationName" in e, true, "Animation events have animationName property");
+is("foobar" in e, false, "Animation events do not copy random properties from event init");
+is(e.animationName, "bounce3", "Animation event copies animationName from AnimationEventInit");
+is(e.elapsedTime, 3.5, "Animation event copies elapsedTime from AnimationEventInit");
+is(e.pseudoElement, "", "Animation event copies pseudoElement from AnimationEventInit");
+is(e.bubbles, false, "Lack of bubbles property in AnimationEventInit");
+is(e.cancelable, false, "Lack of cancelable property in AnimationEventInit");
+is(e.type, "hello", "Wrong event type!");
+is(e.isTrusted, false, "Event shouldn't be trusted!");
+is(e.eventPhase, Event.NONE, "Wrong event phase");
+
 </script>
 </pre>
 </body>
 </html>
diff --git a/layout/style/test/test_animations.html b/layout/style/test/test_animations.html
--- a/layout/style/test/test_animations.html
+++ b/layout/style/test/test_animations.html
@@ -250,17 +250,17 @@ function test_fill_mode(fill_mode, fills
   advance_clock(2000);
   if (fills_backwards)
     is(cs.marginLeft, "0px", desc + "does affect value during delay (2s)");
   else
     is(cs.marginLeft, "30px", desc + "doesn't affect value during delay (2s)");
   check_events([], "before start in test_fill_mode");
   advance_clock(1000);
   check_events([{ type: 'animationstart', target: div,
-                  bubbles: true, cancelable: true,
+                  bubbles: true, cancelable: false,
                   animationName: 'anim1', elapsedTime: 0.0,
                   pseudoElement: "" }],
                "right after start in test_fill_mode");
   if (fills_backwards)
     is(cs.marginLeft, "0px", desc + "affects value at start of animation");
   advance_clock(125);
   is(cs.marginLeft, "2px", desc + "affects value during animation");
   advance_clock(2375);
@@ -269,17 +269,17 @@ function test_fill_mode(fill_mode, fills
   is(cs.marginLeft, "80px", desc + "affects value during animation");
   advance_clock(2500);
   is(cs.marginLeft, "90px", desc + "affects value during animation");
   advance_clock(2375);
   is(cs.marginLeft, "99.5px", desc + "affects value during animation");
   check_events([], "before end in test_fill_mode");
   advance_clock(125);
   check_events([{ type: 'animationend', target: div,
-                  bubbles: true, cancelable: true,
+                  bubbles: true, cancelable: false,
                   animationName: 'anim1', elapsedTime: 10.0,
                   pseudoElement: "" }],
                "right after end in test_fill_mode");
   if (fills_forwards)
     is(cs.marginLeft, "100px", desc + "affects value at end of animation");
   advance_clock(10);
   if (fills_forwards)
     is(cs.marginLeft, "100px", desc + "does affect value after animation");
diff --git a/layout/style/test/test_transitions_events.html b/layout/style/test/test_transitions_events.html
--- a/layout/style/test/test_transitions_events.html
+++ b/layout/style/test/test_transitions_events.html
@@ -207,16 +207,20 @@ started_test();
   function(event) {
     event.stopPropagation();
 
     ok(!got_two_target, "transitionend on two on target");
     is(event.propertyName, "margin-left",
        "propertyName for transitionend on two");
     is(event.elapsedTime, 1,
        "elapsedTime for transitionend on two");
+    is(event.bubbles, true,
+       "transitionend events should bubble");
+    is(event.cancelable, false,
+       "transitionend events should not be cancelable");
     is(cs("two").marginLeft, "10px",
        "computed style for transitionend on two");
     got_two_target = true;
     finished_test();
   }, false);
 
 started_test();
 $("two").className = "bar";
diff --git a/widget/ContentEvents.h b/widget/ContentEvents.h
--- a/widget/ContentEvents.h
+++ b/widget/ContentEvents.h
@@ -223,16 +223,17 @@ public:
 
   InternalTransitionEvent(bool aIsTrusted, uint32_t aMessage,
                           const nsAString& aPropertyName, float aElapsedTime,
                           const nsAString& aPseudoElement) :
     WidgetEvent(aIsTrusted, aMessage, NS_TRANSITION_EVENT),
     propertyName(aPropertyName), elapsedTime(aElapsedTime),
     pseudoElement(aPseudoElement)
   {
+    mFlags.mCancelable = false;
   }
 
   nsString propertyName;
   float elapsedTime;
   nsString pseudoElement;
 
   void AssignTransitionEventData(const InternalTransitionEvent& aEvent,
                                  bool aCopyTargets)
@@ -258,16 +259,17 @@ public:
 
   InternalAnimationEvent(bool aIsTrusted, uint32_t aMessage,
                          const nsAString& aAnimationName, float aElapsedTime,
                          const nsAString& aPseudoElement) :
     WidgetEvent(aIsTrusted, aMessage, NS_ANIMATION_EVENT),
     animationName(aAnimationName), elapsedTime(aElapsedTime),
     pseudoElement(aPseudoElement)
   {
+    mFlags.mCancelable = false;
   }
 
   nsString animationName;
   float elapsedTime;
   nsString pseudoElement;
 
   void AssignAnimationEventData(const InternalAnimationEvent& aEvent,
                                 bool aCopyTargets)
