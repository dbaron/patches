Backout previous fix and remove setTimeout so that we don't call focus on a window that's no longer active once the timeout runs.  b=330006  r=gavin

diff -r ac40a8d784bf toolkit/content/widgets/tabbrowser.xml
--- a/toolkit/content/widgets/tabbrowser.xml	Tue Jan 23 12:28:32 2007 -0800
+++ b/toolkit/content/widgets/tabbrowser.xml	Tue Jan 23 13:01:36 2007 -0800
@@ -768,35 +768,30 @@
               whatToFocus = newBrowser.focusedWindow;
             }
  
-            // Change focus for this window to |aElement|, without focusing the
-            // window itself.
-            function setFocus(aElement) {
-              var cmdDispatcher = document.commandDispatcher;
-
-              var ww =
-                Components.classes["@mozilla.org/embedcomp/window-watcher;1"]
-                          .getService(Components.interfaces.nsIWindowWatcher);
-              if (ww.activeWindow == window) {
-                cmdDispatcher.suppressFocusScroll = true;
-                aElement.focus();
-                cmdDispatcher.suppressFocusScroll = false;
+            // Change focus for this window to |whatToFocus|, without
+            // focusing the window itself.
+            var cmdDispatcher = document.commandDispatcher;
+
+            var ww =
+              Components.classes["@mozilla.org/embedcomp/window-watcher;1"]
+                        .getService(Components.interfaces.nsIWindowWatcher);
+            if (ww.activeWindow == window) {
+              cmdDispatcher.suppressFocusScroll = true;
+              whatToFocus.focus();
+              cmdDispatcher.suppressFocusScroll = false;
+            }
+            else {
+              // set the element in command dispatcher so focus will restore
+              // properly when the window does become active
+              if (whatToFocus instanceof Window) {
+                cmdDispatcher.focusedWindow = whatToFocus;
+                cmdDispatcher.focusedElement = null;
               }
               else {
-                // set the element in command dispatcher so focus will restore
-                // properly when the window does become active
-                if (aElement instanceof Window) {
-                  cmdDispatcher.focusedWindow = aElement;
-                  cmdDispatcher.focusedElement = null;
-                }
-                else {
-                  cmdDispatcher.focusedWindow = aElement.ownerDocument.defaultView;
-                  cmdDispatcher.focusedElement = aElement;
-                }
-              }
-            }
-
-            // Use setTimeout to avoid focus outline ghosting.
-            setTimeout(setFocus, 0, whatToFocus);
+                cmdDispatcher.focusedWindow = whatToFocus.ownerDocument.defaultView;
+                cmdDispatcher.focusedElement = whatToFocus;
+              }
+            }
           ]]>
         </body>
       </method>
diff -r ac40a8d784bf widget/src/gtk2/nsWindow.cpp
--- a/widget/src/gtk2/nsWindow.cpp	Tue Jan 23 12:28:32 2007 -0800
+++ b/widget/src/gtk2/nsWindow.cpp	Tue Jan 23 12:43:42 2007 -0800
@@ -741,9 +741,6 @@ nsWindow::SetFocus(PRBool aRaise)
         // Set focus to the window
         if (gRaiseWindows && aRaise && toplevelWidget &&
             !GTK_WIDGET_HAS_FOCUS(toplevelWidget) &&
-            // If we're really a child of owningWindow
-            gdk_window_get_parent(mDrawingarea->clip_window) ==
-              owningWindow->mDrawingarea->inner_window &&
             owningWindow->mIsShown && GTK_IS_WINDOW(owningWindow->mShell))
           gtk_window_present(GTK_WINDOW(owningWindow->mShell));
         
