From: L. David Baron <dbaron@dbaron.org>

diff --git a/layout/generic/nsLineLayout.cpp b/layout/generic/nsLineLayout.cpp
--- a/layout/generic/nsLineLayout.cpp
+++ b/layout/generic/nsLineLayout.cpp
@@ -491,7 +491,8 @@ nsLineLayout::EndSpan(nsIFrame* aFrame, 
       if (NS_UNCONSTRAINEDSIZE != psd->mRightEdge ||  // it's not an unconstrained reflow
           pfd->mNext ||                               // or it's not the last frame in the span
           !pfd->GetFlag(PFD_ISTEXTFRAME) ||           // or it's not a text frame
-          pfd->GetFlag(PFD_ISNONWHITESPACETEXTFRAME)  // or it contains something other than whitespace
+          pfd->GetFlag(PFD_ISNONWHITESPACETEXTFRAME) ||// or it contains something other than whitespace
+          pfd->mFrame->GetStyleText()->WhiteSpaceIsSignificant()      // or it's 'pre' or 'pre-wrap'
          ) {
         if (pfd->mBounds.height > maxHeight) maxHeight = pfd->mBounds.height;
 
@@ -1199,10 +1200,6 @@ nsLineLayout::CanPlaceFrame(PerFrameData
   }
 
   PerSpanData* psd = mCurrentSpan;
-  if (psd->mNoWrap) {
-    // When wrapping is off, everything fits.
-    return PR_TRUE;
-  }
 
   bool ltr = NS_STYLE_DIRECTION_LTR == aReflowState.mStyleVisibility->mDirection;
   nscoord endMargin = ltr ? pfd->mMargin.right : pfd->mMargin.left;
@@ -1291,9 +1288,9 @@ nsLineLayout::CanPlaceFrame(PerFrameData
     // set on them and contain a float and are placed where they
     // don't naturally fit.
     return PR_TRUE;
- }
-
-  if (aFrameCanContinueTextRun) {
+  }
+
+  if (aFrameCanContinueTextRun || psd->mNoWrap) {
     // Let it fit, but we reserve the right to roll back
     // to before the text run! Note that we usually won't get here because
     // a text frame will break itself to avoid exceeding the available width.
@@ -1350,7 +1347,8 @@ nsLineLayout::PlaceFrame(PerFrameData* p
   // Advance to next X coordinate
   psd->mX = pfd->mBounds.XMost() + (ltr ? pfd->mMargin.right : pfd->mMargin.left);
 
-  // If the frame is a not aware of white-space and it takes up some
+  // If the frame is not aware of white-space (nor has descendants
+  // within the line that are aware of whitespace) and it takes up some
   // width, disable leading white-space compression for the next frame
   // to be reflowed.
   if ((!GetFlag(LL_UNDERSTANDSNWHITESPACE)) && pfd->mBounds.width) {
@@ -1631,9 +1629,6 @@ nsLineLayout::VerticalAlignFrames(PerSpa
   nsCOMPtr<nsIFontMetrics> fm;
   rc->GetFontMetrics(*getter_AddRefs(fm));
 
-  bool preMode = (mStyleText->mWhiteSpace == NS_STYLE_WHITESPACE_PRE) ||
-    (mStyleText->mWhiteSpace == NS_STYLE_WHITESPACE_MOZ_PRE_WRAP);
-
   // See if the span is an empty continuation. It's an empty continuation iff:
   // - it has a prev-in-flow
   // - it has no next in flow
@@ -1646,8 +1641,7 @@ nsLineLayout::VerticalAlignFrames(PerSpa
 #ifdef NOISY_VERTICAL_ALIGN
   printf("[%sSpan]", (psd == mRootSpan)?"Root":"");
   nsFrame::ListTag(stdout, spanFrame);
-  printf(": preMode=%s strictMode=%s w/h=%d,%d emptyContinuation=%s",
-         preMode ? "yes" : "no",
+  printf(": strictMode=%s w/h=%d,%d emptyContinuation=%s",
          InStrictMode() ? "yes" : "no",
          spanFramePFD->mBounds.width, spanFramePFD->mBounds.height,
          emptyContinuation ? "yes" : "no");
@@ -1685,9 +1679,10 @@ nsLineLayout::VerticalAlignFrames(PerSpa
   // document author is intending css2 behavior then we act as if strict
   // mode is set.
   //
-  // This code works correctly for preMode, because a blank line
-  // in PRE mode is encoded as a text node with a LF in it, since
-  // text nodes with only whitespace are considered in preMode.
+  // This code works correctly when preserving whitespace, because a
+  // blank line in PRE mode is encoded as a text node with a LF in it,
+  // since text nodes with only whitespace are considered for those
+  // values of 'white-space'.
   //
   // Much of this logic is shared with the various implementations of
   // nsIFrame::IsEmpty since they need to duplicate the way it makes
@@ -1727,7 +1722,8 @@ nsLineLayout::VerticalAlignFrames(PerSpa
     zeroEffectiveSpanBox = PR_TRUE;
     for (PerFrameData* pfd = psd->mFirstFrame; pfd; pfd = pfd->mNext) {
       if (pfd->GetFlag(PFD_ISTEXTFRAME) &&
-          (pfd->GetFlag(PFD_ISNONWHITESPACETEXTFRAME) || preMode ||
+          (pfd->GetFlag(PFD_ISNONWHITESPACETEXTFRAME) ||
+           pfd->mFrame->GetStyleText()->WhiteSpaceIsSignificant() ||
            pfd->mBounds.width != 0)) {
         zeroEffectiveSpanBox = PR_FALSE;
         break;
@@ -2038,7 +2034,7 @@ nsLineLayout::VerticalAlignFrames(PerSpa
           yTop = pfd->mBounds.y - pfd->mMargin.top;
           yBottom = yTop + logicalHeight;
         }
-        if (!preMode &&
+        if (!frame->GetStyleText()->WhiteSpaceIsSignificant() &&
             GetCompatMode() != eCompatibility_FullStandards &&
             !logicalHeight) {
           // Check if it's a BR frame that is not alone on its line (it
@@ -2112,6 +2108,8 @@ nsLineLayout::VerticalAlignFrames(PerSpa
       }
     }
     if (applyMinLH) {
+      bool preMode = mStyleText->WhiteSpaceIsSignificant();
+      // XXXldb Why do we need this test?
       if ((psd->mX != psd->mLeftEdge) || preMode || foundLI) {
 #ifdef NOISY_VERTICAL_ALIGN
         printf("  [span]==> adjusting min/maxY: currentValues: %d,%d", minY, maxY);
@@ -2135,7 +2133,7 @@ nsLineLayout::VerticalAlignFrames(PerSpa
         // XXX issues:
         // [1] BR's on empty lines stop working
         // [2] May not honor css2's notion of handling empty elements
-        // [3] blank lines in a pre-section ("\n") (handled with preMode)
+        // [3] blank lines in a pre-section ("\n")
 
         // XXX Are there other problems with this?
 #ifdef NOISY_VERTICAL_ALIGN
diff --git a/layout/generic/nsTextFrame.cpp b/layout/generic/nsTextFrame.cpp
--- a/layout/generic/nsTextFrame.cpp
+++ b/layout/generic/nsTextFrame.cpp
@@ -946,8 +946,7 @@ nsTextStyle::nsTextStyle(nsPresContext* 
   mNumJustifiableCharacterToMeasure = 0;
   mNumJustifiableCharacterReceivingExtraJot = 0;
   mExtraSpacePerJustifiableCharacter = 0;
-  mPreformatted = (NS_STYLE_WHITESPACE_PRE == mText->mWhiteSpace) ||
-    (NS_STYLE_WHITESPACE_MOZ_PRE_WRAP == mText->mWhiteSpace);
+  mPreformatted = mText->WhiteSpaceIsSignificant();
   
   mJustifying = (NS_STYLE_TEXT_ALIGN_JUSTIFY == mText->mTextAlign) &&
     !mPreformatted;
@@ -5618,8 +5617,10 @@ nsTextFrame::MeasureText(nsPresContext* 
   lineLayout.SetUnderstandsWhiteSpace(PR_TRUE);
   if (0 != aTextData.mX) {
     lineLayout.SetTrailingTextFrame(this, aTextData.mWrapping);
-    lineLayout.SetEndsInWhiteSpace(endsInWhitespace);
-    lineLayout.SetInWord(!endsInWhitespace);
+    // XXX This should be called SetEndsInCollapsableWhiteSpace
+    lineLayout.SetEndsInWhiteSpace(endsInWhitespace &&
+                                   !aTs.mPreformatted);
+    lineLayout.SetInWord(!endsInWhitespace || !aTs.mText->WhiteSpaceCanWrap());
   } else {
     // Don't allow subsequent text frame to break-before. All our text is
     // being skipped (usually whitespace, could be discarded Unicode control
