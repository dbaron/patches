From: L. David Baron <dbaron@dbaron.org>

Fix processing of matrix() transform functions to handle calc() rather than asserting.  (Bug 584569)  r=bzbarsky

diff --git a/layout/style/nsStyleTransformMatrix.cpp b/layout/style/nsStyleTransformMatrix.cpp
--- a/layout/style/nsStyleTransformMatrix.cpp
+++ b/layout/style/nsStyleTransformMatrix.cpp
@@ -224,51 +224,16 @@ static nscoord CalcLength(const nsCSSVal
     // nsStyleAnimation does) that all lengths within the transform
     // function have already been computed to pixels and percents.
     return nsPresContext::CSSPixelsToAppUnits(aValue.GetFloatValue());
   }
   return nsRuleNode::CalcLength(aValue, aContext, aPresContext,
                                 aCanStoreInRuleTree);
 }
 
-/* Helper function to process a matrix entry. */
-static void ProcessMatrix(float aMain[4], nscoord aDelta[2],
-                          float aX[2], float aY[2],
-                          const nsCSSValue::Array* aData,
-                          nsStyleContext* aContext,
-                          nsPresContext* aPresContext,
-                          PRBool& aCanStoreInRuleTree)
-{
-  NS_PRECONDITION(aData->Count() == 7, "Invalid array!");
-
-  /* Take the first four elements out of the array as floats and store
-   * them in aMain.
-   */
-  for (PRUint16 index = 1; index <= 4; ++index)
-    aMain[index - 1] = aData->Item(index).GetFloatValue();
-
-  /* For the fifth element, if it's a percentage, store it in aX[0].
-   * Otherwise, it's a length that needs to go in aDelta[0]
-   */
-  if (aData->Item(5).GetUnit() == eCSSUnit_Percent)
-    aX[0] = aData->Item(5).GetPercentValue();
-  else
-    aDelta[0] = CalcLength(aData->Item(5), aContext, aPresContext,
-                           aCanStoreInRuleTree);
-
-  /* For the final element, if it's a percentage, store it in aY[1].
-   * Otherwise, it's a length that needs to go in aDelta[1].
-   */
-  if (aData->Item(6).GetUnit() == eCSSUnit_Percent)
-    aY[1] = aData->Item(6).GetPercentValue();
-  else
-    aDelta[1] = CalcLength(aData->Item(6), aContext, aPresContext,
-                           aCanStoreInRuleTree);
-}
-
 struct LengthPercentPairCalcOps : public css::NumbersAlreadyNormalizedOps
 {
   struct result_type {
     nscoord mLength;
     float mPercent;
 
     result_type(nscoord aLength, float aPercent)
       : mLength(aLength), mPercent(aPercent) {}
@@ -354,16 +319,41 @@ static void ProcessTranslatePart(nscoord
     aPercent = result.mPercent;
     aOffset = result.mLength;
   } else {
     aOffset = CalcLength(aValue, aContext, aPresContext,
                          aCanStoreInRuleTree);
   }
 }
 
+/* Helper function to process a matrix entry. */
+static void ProcessMatrix(float aMain[4], nscoord aDelta[2],
+                          float aX[2], float aY[2],
+                          const nsCSSValue::Array* aData,
+                          nsStyleContext* aContext,
+                          nsPresContext* aPresContext,
+                          PRBool& aCanStoreInRuleTree)
+{
+  NS_PRECONDITION(aData->Count() == 7, "Invalid array!");
+
+  /* Take the first four elements out of the array as floats and store
+   * them in aMain.
+   */
+  for (PRUint16 index = 1; index <= 4; ++index)
+    aMain[index - 1] = aData->Item(index).GetFloatValue();
+
+  /* The last two elements have their length parts stored in aDelta
+   * and their percent parts stored in aX[0] and aY[1].
+   */
+  ProcessTranslatePart(aDelta[0], aX[0], aData->Item(5),
+                       aContext, aPresContext, aCanStoreInRuleTree);
+  ProcessTranslatePart(aDelta[1], aY[1], aData->Item(6),
+                       aContext, aPresContext, aCanStoreInRuleTree);
+}
+
 /* Helper function to process a translatex function. */
 static void ProcessTranslateX(nscoord aDelta[2], float aX[2],
                               const nsCSSValue::Array* aData,
                               nsStyleContext* aContext,
                               nsPresContext* aPresContext,
                               PRBool& aCanStoreInRuleTree)
 {
   NS_PRECONDITION(aData->Count() == 2, "Invalid array!");
