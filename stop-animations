From: L. David Baron <dbaron@dbaron.org>

Bug 651506 - Stop animations in the same cases we stop animated images.

diff --git a/layout/base/nsPresContext.cpp b/layout/base/nsPresContext.cpp
--- a/layout/base/nsPresContext.cpp
+++ b/layout/base/nsPresContext.cpp
@@ -1383,16 +1383,24 @@ nsPresContext::SetImageAnimationModeInte
       Element *rootElement = doc->GetRootElement();
       if (rootElement) {
         SetImgAnimations(rootElement, aMode);
       }
       SetSMILAnimations(doc, aMode, mImageAnimationMode);
     }
   }
 
+#ifdef MOZ_CSS_ANIMATIONS
+  // FIXME: Handle kLoopOnceAnimMode, and also changes back to
+  // animating.
+  if (mAnimationManager && aMode == imgIContainer::kDontAnimMode) {
+    mAnimationManager->StopAllAnimations();
+  }
+#endif
+
   mImageAnimationMode = aMode;
 }
 
 void
 nsPresContext::SetImageAnimationModeExternal(uint16_t aMode)
 {
   SetImageAnimationModeInternal(aMode);
 }
diff --git a/layout/style/AnimationCommon.h b/layout/style/AnimationCommon.h
--- a/layout/style/AnimationCommon.h
+++ b/layout/style/AnimationCommon.h
@@ -276,32 +276,34 @@ struct ComputedTiming
 
 /**
  * Data about one animation (i.e., one of the values of
  * 'animation-name') running on an element.
  */
 struct ElementAnimation
 {
   ElementAnimation()
-    : mIsRunningOnCompositor(false)
+    : mForcedPause(false)
+    , mIsRunningOnCompositor(false)
     , mLastNotification(LAST_NOTIFICATION_NONE)
   {
   }
 
   // FIXME: If we succeed in moving transition-specific code to a type of
   // AnimationEffect (as per the Web Animations API) we should remove these
   // virtual methods.
   virtual ~ElementAnimation() { }
   virtual ElementPropertyTransition* AsTransition() { return nullptr; }
   virtual const ElementPropertyTransition* AsTransition() const {
     return nullptr;
   }
 
   bool IsPaused() const {
-    return mPlayState == NS_STYLE_ANIMATION_PLAY_STATE_PAUSED;
+    return mPlayState == NS_STYLE_ANIMATION_PLAY_STATE_PAUSED ||
+           mForcedPause;
   }
 
   bool HasAnimationOfProperty(nsCSSProperty aProperty) const;
   bool IsRunningAt(mozilla::TimeStamp aTime) const;
 
   // Return the duration, at aTime (or, if paused, mPauseStart), since
   // the *end* of the delay period.  May be negative.
   mozilla::TimeDuration ElapsedDurationAt(mozilla::TimeStamp aTime) const {
@@ -336,16 +338,17 @@ struct ElementAnimation
   AnimationTiming mTiming;
   // The beginning of the delay period.  This is also used by
   // ElementPropertyTransition in its IsRemovedSentinel and
   // SetRemovedSentinel methods.
   mozilla::TimeStamp mStartTime;
   mozilla::TimeStamp mPauseStart;
   mozilla::TimeDuration mDelay;
   uint8_t mPlayState;
+  bool mForcedPause;
   bool mIsRunningOnCompositor;
 
   enum {
     LAST_NOTIFICATION_NONE = uint64_t(-1),
     LAST_NOTIFICATION_END = uint64_t(-2)
   };
   // One of the above constants, or an integer for the iteration
   // whose start we last notified on.
diff --git a/layout/style/nsAnimationManager.cpp b/layout/style/nsAnimationManager.cpp
--- a/layout/style/nsAnimationManager.cpp
+++ b/layout/style/nsAnimationManager.cpp
@@ -562,16 +562,17 @@ nsAnimationManager::CheckAnimationRule(n
             }
           }
           if (!oldAnim) {
             continue;
           }
 
           newAnim->mStartTime = oldAnim->mStartTime;
           newAnim->mLastNotification = oldAnim->mLastNotification;
+          newAnim->mForcedPause = oldAnim->mForcedPause;
 
           if (oldAnim->IsPaused()) {
             if (newAnim->IsPaused()) {
               // Copy pause start just like start time.
               newAnim->mPauseStart = oldAnim->mPauseStart;
             } else {
               // Handle change in pause state by adjusting start
               // time to unpause.
@@ -1045,16 +1046,59 @@ nsAnimationManager::DoDispatchEvents()
 
     if (!mPresContext) {
       break;
     }
   }
 }
 
 void
+nsAnimationManager::StopAllAnimations()
+{
+  for (PRCList *l = PR_LIST_HEAD(&mElementData); l != &mElementData;
+       l = PR_NEXT_LINK(l)) {
+    ElementAnimations *ea = static_cast<ElementAnimations*>(l);
+    bool needsRestyle = false;
+    for (uint32_t animIdx = 0, animEnd = ea->mAnimations.Length();
+         animIdx != animEnd; ++animIdx) {
+      ElementAnimation* anim = ea->mAnimations[animIdx];
+      if (anim->IsPaused()) {
+        continue;
+      }
+      TimeStamp now = mPresContext->RefreshDriver()->MostRecentRefresh();
+      if (anim->mTiming.mIterationCount == NS_IEEEPositiveInfinity()) {
+        // Pause animations with an 'infinite'
+        // animation-iteration-count.  (Should we consider forcing them
+        // to the beginning or end of an iteration?)
+        anim->mForcedPause = true;
+        anim->mPauseStart = now;
+        if (ea->mStyleRuleRefreshTime.IsNull() ||
+            ea->mStyleRuleRefreshTime != now) {
+          needsRestyle = true;
+        }
+      } else {
+        // Push animations that complete, but have not completed yet, to
+        // their completed state by adjusting their start time.
+        TimeDuration durationToEnd = TimeDuration::FromSeconds(
+            anim->mTiming.mIterationDuration.ToSeconds() *
+            anim->mTiming.mIterationCount) +
+          anim->mDelay;
+        if (now < anim->mStartTime + durationToEnd) {
+          anim->mStartTime = now - durationToEnd;
+          needsRestyle = true;
+        }
+      }
+    }
+    if (needsRestyle) {
+      ea->PostRestyleForAnimation(mPresContext);
+    }
+  }
+}
+
+void
 nsAnimationManager::UpdateThrottledStylesForSubtree(nsIContent* aContent,
                                                 nsStyleContext* aParentStyle,
                                                 nsStyleChangeList& aChangeList)
 {
   dom::Element* element;
   if (aContent->IsElement()) {
     element = aContent->AsElement();
   } else {
diff --git a/layout/style/nsAnimationManager.h b/layout/style/nsAnimationManager.h
--- a/layout/style/nsAnimationManager.h
+++ b/layout/style/nsAnimationManager.h
@@ -205,16 +205,29 @@ protected:
   }
   virtual void AddElementData(mozilla::css::CommonElementAnimationData* aData) MOZ_OVERRIDE;
 
   /**
    * Check to see if we should stop or start observing the refresh driver
    */
   void CheckNeedsRefresh();
 
+  /**
+   * A hook for user interface (such as the stop button or escape key)
+   * that stops animations.
+   *
+   * This goes through all currently running animations, and:
+   *  + for those with a non-'infinite' animation-iteration-count,
+   *    advances them to their end time by moving their start time
+   *    backwards, and
+   *  + for those with an 'infinite' animation-iteration-count,
+   *    pauses them.
+   */
+  void StopAllAnimations();
+
 private:
   void BuildAnimations(nsStyleContext* aStyleContext,
                        mozilla::ElementAnimationPtrArray& aAnimations);
   bool BuildSegment(InfallibleTArray<mozilla::AnimationPropertySegment>&
                       aSegments,
                     nsCSSProperty aProperty, const nsAnimation& aAnimation,
                     float aFromKey, nsStyleContext* aFromContext,
                     mozilla::css::Declaration* aFromDeclaration,
