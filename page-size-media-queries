Make 'width', 'height', and 'aspect-ratio' features use the page size when printing.  (Bug 466559)

diff --git a/layout/style/nsMediaFeatures.cpp b/layout/style/nsMediaFeatures.cpp
--- a/layout/style/nsMediaFeatures.cpp
+++ b/layout/style/nsMediaFeatures.cpp
@@ -57,26 +57,36 @@ static const PRInt32 kScanKeywords[] = {
   eCSSKeyword_progressive,              NS_STYLE_SCAN_PROGRESSIVE,
   eCSSKeyword_interlace,                NS_STYLE_SCAN_INTERLACE,
   eCSSKeyword_UNKNOWN,                  -1
 };
 
 static nsresult
 GetWidth(nsPresContext* aPresContext, nsCSSValue& aResult)
 {
-    nscoord width = aPresContext->GetVisibleArea().width;
+    nscoord width;
+    if (aPresContext->IsRootPaginatedDocument())
+        // We want the page size, including unprintable areas and margins.
+        width = aPresContext->GetPageSize().width;
+    else
+        width = aPresContext->GetVisibleArea().width;
     float pixelWidth = aPresContext->AppUnitsToFloatCSSPixels(width);
     aResult.SetFloatValue(pixelWidth, eCSSUnit_Pixel);
     return NS_OK;
 }
 
 static nsresult
 GetHeight(nsPresContext* aPresContext, nsCSSValue& aResult)
 {
-    nscoord height = aPresContext->GetVisibleArea().height;
+    nscoord height;
+    if (aPresContext->IsRootPaginatedDocument())
+        // We want the page size, including unprintable areas and margins.
+        height = aPresContext->GetPageSize().height;
+    else
+        height = aPresContext->GetVisibleArea().height;
     float pixelHeight = aPresContext->AppUnitsToFloatCSSPixels(height);
     aResult.SetFloatValue(pixelHeight, eCSSUnit_Pixel);
     return NS_OK;
 }
 
 static nsIDeviceContext*
 GetDeviceContextFor(nsPresContext* aPresContext)
 {
@@ -91,34 +101,42 @@ GetDeviceContextFor(nsPresContext* aPres
     ctx = aPresContext->DeviceContext();
   }
   return ctx;
 }
 
 static nsresult
 GetDeviceWidth(nsPresContext* aPresContext, nsCSSValue& aResult)
 {
-    // XXX: I'm not sure if this is really the right thing for print:
-    // do we want to include unprintable areas / page margins?
     nsIDeviceContext *dx = GetDeviceContextFor(aPresContext);
     nscoord width, height;
-    dx->GetDeviceSurfaceDimensions(width, height);
+    if (aPresContext->IsRootPaginatedDocument())
+        // We want the page size, including unprintable areas and margins.
+        // XXX The spec actually says we want the "page sheet size", but
+        // how is that different?
+        width = aPresContext->GetPageSize().width;
+    else
+        dx->GetDeviceSurfaceDimensions(width, height);
     float pixelWidth = aPresContext->AppUnitsToFloatCSSPixels(width);
     aResult.SetFloatValue(pixelWidth, eCSSUnit_Pixel);
     return NS_OK;
 }
 
 static nsresult
 GetDeviceHeight(nsPresContext* aPresContext, nsCSSValue& aResult)
 {
-    // XXX: I'm not sure if this is really the right thing for print:
-    // do we want to include unprintable areas / page margins?
     nsIDeviceContext *dx = GetDeviceContextFor(aPresContext);
     nscoord width, height;
-    dx->GetDeviceSurfaceDimensions(width, height);
+    if (aPresContext->IsRootPaginatedDocument())
+        // We want the page size, including unprintable areas and margins.
+        // XXX The spec actually says we want the "page sheet size", but
+        // how is that different?
+        height = aPresContext->GetPageSize().height;
+    else
+        dx->GetDeviceSurfaceDimensions(width, height);
     float pixelHeight = aPresContext->AppUnitsToFloatCSSPixels(height);
     aResult.SetFloatValue(pixelHeight, eCSSUnit_Pixel);
     return NS_OK;
 }
 
 static nsresult
 GetOrientation(nsPresContext* aPresContext, nsCSSValue& aResult)
 {
@@ -136,37 +154,46 @@ GetOrientation(nsPresContext* aPresConte
 }
 
 static nsresult
 GetAspectRatio(nsPresContext* aPresContext, nsCSSValue& aResult)
 {
     nsRefPtr<nsCSSValue::Array> a = nsCSSValue::Array::Create(2);
     NS_ENSURE_TRUE(a, NS_ERROR_OUT_OF_MEMORY);
 
-    nsSize size = aPresContext->GetVisibleArea().Size();
+    nsSize size;
+    if (aPresContext->IsRootPaginatedDocument())
+        // We want the page size, including unprintable areas and margins.
+        size = aPresContext->GetPageSize();
+    else
+        size = aPresContext->GetVisibleArea().Size();
     a->Item(0).SetIntValue(size.width, eCSSUnit_Integer);
     a->Item(1).SetIntValue(size.height, eCSSUnit_Integer);
 
     aResult.SetArrayValue(a, eCSSUnit_Array);
     return NS_OK;
 }
 
 static nsresult
 GetDeviceAspectRatio(nsPresContext* aPresContext, nsCSSValue& aResult)
 {
     nsRefPtr<nsCSSValue::Array> a = nsCSSValue::Array::Create(2);
     NS_ENSURE_TRUE(a, NS_ERROR_OUT_OF_MEMORY);
 
-    // XXX: I'm not sure if this is really the right thing for print:
-    // do we want to include unprintable areas / page margins?
     nsIDeviceContext *dx = GetDeviceContextFor(aPresContext);
-    nscoord width, height;
-    dx->GetDeviceSurfaceDimensions(width, height);
-    a->Item(0).SetIntValue(width, eCSSUnit_Integer);
-    a->Item(1).SetIntValue(height, eCSSUnit_Integer);
+    nsSize size;
+    if (aPresContext->IsRootPaginatedDocument())
+        // We want the page size, including unprintable areas and margins.
+        // XXX The spec actually says we want the "page sheet size", but
+        // how is that different?
+        size = aPresContext->GetPageSize();
+    else
+        dx->GetDeviceSurfaceDimensions(size.width, size.height);
+    a->Item(0).SetIntValue(size.width, eCSSUnit_Integer);
+    a->Item(1).SetIntValue(size.height, eCSSUnit_Integer);
 
     aResult.SetArrayValue(a, eCSSUnit_Array);
     return NS_OK;
 }
 
 
 static nsresult
 GetColor(nsPresContext* aPresContext, nsCSSValue& aResult)
