Eliminate nsCSSDeclaration::GetValueOrImportantValue.  (Bug 475214)  r+sr=bzbarsky

diff --git a/layout/style/nsCSSDeclaration.cpp b/layout/style/nsCSSDeclaration.cpp
--- a/layout/style/nsCSSDeclaration.cpp
+++ b/layout/style/nsCSSDeclaration.cpp
@@ -129,37 +129,16 @@ nsCSSDeclaration::RemoveProperty(nsCSSPr
 }
 
 nsresult
 nsCSSDeclaration::AppendComment(const nsAString& aComment)
 {
   return /* NS_ERROR_NOT_IMPLEMENTED, or not any longer that is */ NS_OK;
 }
 
-nsresult
-nsCSSDeclaration::GetValueOrImportantValue(nsCSSProperty aProperty, nsCSSValue& aValue) const
-{
-  aValue.Reset();
-
-  NS_ASSERTION(aProperty >= 0, "out of range");
-  if (aProperty >= eCSSProperty_COUNT_no_shorthands ||
-      nsCSSProps::kTypeTable[aProperty] != eCSSType_Value) {
-    NS_ERROR("can't query for shorthand properties");
-    return NS_ERROR_ILLEGAL_VALUE;
-  }
-
-  nsCSSCompressedDataBlock *data = GetValueIsImportant(aProperty)
-                                     ? mImportantData : mData;
-  const void *storage = data->StorageFor(aProperty);
-  if (!storage)
-    return NS_OK;
-  aValue = *static_cast<const nsCSSValue*>(storage);
-  return NS_OK;
-}
-
 PRBool nsCSSDeclaration::AppendValueToString(nsCSSProperty aProperty, nsAString& aResult) const
 {
   nsCSSCompressedDataBlock *data = GetValueIsImportant(aProperty)
                                       ? mImportantData : mData;
   const void *storage = data->StorageFor(aProperty);
   if (storage) {
     switch (nsCSSProps::kTypeTable[aProperty]) {
       case eCSSType_Value: {
@@ -966,37 +945,40 @@ nsCSSDeclaration::GetValue(nsCSSProperty
     case eCSSProperty_list_style:
       if (AppendValueToString(eCSSProperty_list_style_type, aValue))
         aValue.Append(PRUnichar(' '));
       if (AppendValueToString(eCSSProperty_list_style_position, aValue))
         aValue.Append(PRUnichar(' '));
       AppendValueToString(eCSSProperty_list_style_image, aValue);
       break;
     case eCSSProperty_overflow: {
-      nsCSSValue xValue, yValue;
-      GetValueOrImportantValue(eCSSProperty_overflow_x, xValue);
-      GetValueOrImportantValue(eCSSProperty_overflow_y, yValue);
+      const nsCSSValue &xValue = *static_cast<const nsCSSValue*>(
+        data->StorageFor(eCSSProperty_overflow_x));
+      const nsCSSValue &yValue = *static_cast<const nsCSSValue*>(
+        data->StorageFor(eCSSProperty_overflow_y));
       if (xValue == yValue)
         AppendCSSValueToString(eCSSProperty_overflow_x, xValue, aValue);
       break;
     }
     case eCSSProperty_pause: {
       if (AppendValueToString(eCSSProperty_pause_before, aValue)) {
         aValue.Append(PRUnichar(' '));
         if (!AppendValueToString(eCSSProperty_pause_after, aValue))
           aValue.Truncate();
       }
       break;
     }
 #ifdef MOZ_SVG
     case eCSSProperty_marker: {
-      nsCSSValue endValue, midValue, startValue;
-      GetValueOrImportantValue(eCSSProperty_marker_end, endValue);
-      GetValueOrImportantValue(eCSSProperty_marker_mid, midValue);
-      GetValueOrImportantValue(eCSSProperty_marker_start, startValue);
+      const nsCSSValue &endValue = *static_cast<const nsCSSValue*>(
+        data->StorageFor(eCSSProperty_marker_end));
+      const nsCSSValue &midValue = *static_cast<const nsCSSValue*>(
+        data->StorageFor(eCSSProperty_marker_mid));
+      const nsCSSValue &startValue = *static_cast<const nsCSSValue*>(
+        data->StorageFor(eCSSProperty_marker_start));
       if (endValue == midValue && midValue == startValue)
         AppendValueToString(eCSSProperty_marker_end, aValue);
       break;
     }
 #endif
     default:
       NS_NOTREACHED("no other shorthands");
       break;
diff --git a/layout/style/nsCSSDeclaration.h b/layout/style/nsCSSDeclaration.h
--- a/layout/style/nsCSSDeclaration.h
+++ b/layout/style/nsCSSDeclaration.h
@@ -157,19 +157,16 @@ public:
 private:
   // Not implemented, and not supported.
   nsCSSDeclaration& operator=(const nsCSSDeclaration& aCopy);
   PRBool operator==(const nsCSSDeclaration& aCopy) const;
 
   static void AppendImportanceToString(PRBool aIsImportant, nsAString& aString);
   // return whether there was a value in |aValue| (i.e., it had a non-null unit)
   PRBool   AppendValueToString(nsCSSProperty aProperty, nsAString& aResult) const;
-  // May be called only for properties whose type is eCSSType_Value.
-  nsresult GetValueOrImportantValue(nsCSSProperty aProperty, nsCSSValue& aValue) const;
-
   // Helper for ToString with strange semantics regarding aValue.
   void     AppendPropertyAndValueToString(nsCSSProperty aProperty,
                                           nsAutoString& aValue,
                                           nsAString& aResult) const;
 
 private:
     //
     // Specialized ref counting.
