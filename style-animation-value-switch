From: L. David Baron <dbaron@dbaron.org>

Switch nsStyleAnimation from using nsStyleCoord to using its own nsStyleAnimation::Value, so we don't have to add nontrivial destructors to nsStyleCoord.

diff --git a/layout/style/nsStyleAnimation.cpp b/layout/style/nsStyleAnimation.cpp
--- a/layout/style/nsStyleAnimation.cpp
+++ b/layout/style/nsStyleAnimation.cpp
@@ -672,8 +672,46 @@ nsStyleAnimation::ExtractComputedValue(n
       }
       return PR_FALSE;
     }
     case eStyleAnimType_None:
       NS_NOTREACHED("shouldn't use on non-animatable properties");
   }
   return PR_FALSE;
 }
+
+void nsStyleAnimation::Value::SetNoneValue()
+{
+  FreeValue();
+  mUnit = eUnit_None;
+}
+
+void nsStyleAnimation::Value::SetLengthValue(nscoord aLength)
+{
+  FreeValue();
+  mUnit = eUnit_Length;
+  mValue.mCoord = aLength;
+}
+
+void nsStyleAnimation::Value::SetPercentValue(float aPercent)
+{
+  FreeValue();
+  mUnit = eUnit_Percent;
+  mValue.mFloat = aPercent;
+}
+
+void nsStyleAnimation::Value::SetFloatValue(float aFloat)
+{
+  FreeValue();
+  mUnit = eUnit_Float;
+  mValue.mFloat = aPercent;
+}
+
+void nsStyleAnimation::Value::SetColorValue(nscolor aColor)
+{
+  FreeValue();
+  mUnit = eUnit_Color;
+  mValue.mColor = aColor;
+}
+
+void nsStyleAnimation::Value::FreeValue()
+{
+}
diff --git a/layout/style/nsStyleAnimation.h b/layout/style/nsStyleAnimation.h
--- a/layout/style/nsStyleAnimation.h
+++ b/layout/style/nsStyleAnimation.h
@@ -173,11 +173,64 @@ public:
    * @param aProperty     The property whose value we're looking up.
    * @param aStyleContext The style context to check for the computed value.
    * @param [out] aComputedValue The resulting computed value.
    * @return PR_TRUE on success, PR_FALSE on failure.
    */
   static PRBool ExtractComputedValue(nsCSSProperty aProperty,
                                      nsStyleContext* aStyleContext,
                                      nsStyleCoord& aComputedValue);
+
+  /**
+   * The types and values for the values that we extract and animate.
+   */
+  enum Unit {
+    eUnit_Null, // not initialized
+    eUnit_None,
+    eUnit_Length,
+    eUnit_Percent,
+    eUnit_Float,
+    eUnit_Color,
+  };
+
+  class Value {
+  private:
+    Unit mUnit;
+    union {
+      nscoord mCoord;
+      float mFloat;
+      nscolor mColor;
+    } mValue;
+  public:
+    Unit GetUnit() const {
+      NS_ASSERTION(mUnit != eUnit_Null, "uninitialized");
+      return mUnit;
+    }
+
+    nscoord GetLengthValue() const {
+      NS_ASSERTION(mUnit == eUnit_Length, "unit mismatch");
+      return mValue.mCoord;
+    }
+    float GetPercentValue() const {
+      NS_ASSERTION(mUnit == eUnit_Percent, "unit mismatch");
+      return mValue.mFloat;
+    }
+    float GetFloatValue() const {
+      NS_ASSERTION(mUnit == eUnit_Float, "unit mismatch");
+      return mValue.mFloat;
+    }
+    nscolor GetColorValue() const {
+      NS_ASSERTION(mUnit == eUnit_Color, "unit mismatch");
+      return mValue.mColor;
+    }
+
+    void SetNoneValue();
+    void SetLengthValue(nscoord aLength);
+    void SetPercentValue(float aPercent);
+    void SetFloatValue(float aFloat);
+    void SetColorValue(nscolor aColor);
+
+  private:
+    void FreeValue();
+  };
 };
 
 #endif
