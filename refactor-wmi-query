From: L. David Baron <dbaron@dbaron.org>

Refactor WMI query code so that it can be used for something else.

diff --git a/toolkit/xre/nsAppRunner.cpp b/toolkit/xre/nsAppRunner.cpp
--- a/toolkit/xre/nsAppRunner.cpp
+++ b/toolkit/xre/nsAppRunner.cpp
@@ -3665,16 +3665,49 @@ XREMain::XRE_mainInit(bool* aExitFlag)
     *aExitFlag = true;
     return 0;
   }
 
   return 0;
 }
 
 #ifdef XP_WIN
+static bool QueryOneWMIProperty(IWbemServices aServices,
+                                const wchar_t* aWMIClass,
+                                const wchar_t* aProperty,
+                                VARIANT* aResult)
+{
+  RefPtr<IEnumWbemClassObject> enumerator;
+
+  _bstr_t query(L"SELECT * FROM ");
+  query += _bstr_t(aWMIClass);
+
+  HRESULT hr = aServices->ExecQuery(_bstr_t(L"WQL"), query,
+                                    WBEM_FLAG_FORWARD_ONLY |
+                                      WBEM_FLAG_RETURN_IMMEDIATELY,
+                                    nullptr, getter_AddRefs(enumerator));
+
+  if (FAILED(hr) || !enumerator) {
+    return false;
+  }
+
+  RefPtr<IWbemClassObject> classObject;
+  ULONG results;
+
+  hr = enumerator->Next(WBEM_INFINITE, 1, getter_AddRefs(classObject), &results);
+
+  if (FAILED(hr) || results == 0) {
+    return false;
+  }
+
+  hr = classObject->Get(aProperty, 0, &value, 0, 0);
+
+  return SUCCEEDED(hr);
+}
+
 /**
  * Uses WMI to read some information that may be useful for diagnosing
  * crashes. This function is best-effort; failures shouldn't burden the
  * caller. COM must be initialized before calling.
  */
 static void AnnotateWMIData()
 {
   RefPtr<IWbemLocator> locator;
@@ -3698,43 +3731,23 @@ static void AnnotateWMIData()
   hr = CoSetProxyBlanket(services, RPC_C_AUTHN_WINNT, RPC_C_AUTHZ_NONE, nullptr,
                          RPC_C_AUTHN_LEVEL_CALL, RPC_C_IMP_LEVEL_IMPERSONATE,
                          nullptr, EOAC_NONE);
 
   if (FAILED(hr)) {
     return;
   }
 
-  // Annotate information about the system manufacturer.
-
-  RefPtr<IEnumWbemClassObject> enumerator;
-
-  hr = services->ExecQuery(_bstr_t(L"WQL"), _bstr_t(L"SELECT * FROM Win32_BIOS"),
-                           WBEM_FLAG_FORWARD_ONLY | WBEM_FLAG_RETURN_IMMEDIATELY,
-                           nullptr, getter_AddRefs(enumerator));
-
-  if (FAILED(hr) || !enumerator) {
-    return;
-  }
-
-  RefPtr<IWbemClassObject> classObject;
-  ULONG results;
-
-  hr = enumerator->Next(WBEM_INFINITE, 1, getter_AddRefs(classObject), &results);
-
-  if (FAILED(hr) || results == 0) {
-    return;
-  }
 
   VARIANT value;
   VariantInit(&value);
 
-  hr = classObject->Get(L"Manufacturer", 0, &value, 0, 0);
-
-  if (SUCCEEDED(hr) && V_VT(&value) == VT_BSTR) {
+  // Annotate information about the system manufacturer.
+  if (QueryOneWMIProperty(services, L"Win32_BIOS", L"Manufacturer", &value) &&
+      V_VT(&value) == VT_BSTR) {
     CrashReporter::AnnotateCrashReport(
       CrashReporter::Annotation::BIOS_Manufacturer,
       NS_ConvertUTF16toUTF8(V_BSTR(&value)));
   }
 
   VariantClear(&value);
 }
 
