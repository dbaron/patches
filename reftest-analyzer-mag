From: Cameron McCormack <cam@mcc.id.au>

Give reftest-analyzer the ability to zoom and show pixel value differences.  (Bug 612505)  r=dbaron

diff --git a/layout/tools/reftest/reftest-analyzer.xhtml b/layout/tools/reftest/reftest-analyzer.xhtml
--- a/layout/tools/reftest/reftest-analyzer.xhtml
+++ b/layout/tools/reftest/reftest-analyzer.xhtml
@@ -64,34 +64,80 @@ Features to add:
 	#itemlist > table { border-collapse: collapse; }
 	#itemlist > table > tbody > tr > td { border: 1px solid; padding: 1px; }
 
 	/*
 	#itemlist > table > tbody > tr.pass > td.url { background: lime; }
 	#itemlist > table > tbody > tr.fail > td.url { background: red; }
 	*/
 
+	#hint { background: #ffc; color: #444; font: small sans-serif; position: absolute; padding: 4px; border: 1px solid #444; -moz-border-radius: 4px; box-shadow: 2px 2px rgba(0, 0, 0, 0.25); z-index: 1 }
+	#hint table { border-collapse: collapse; }
+	#hint table td, #hint table th { padding: 0 6px 2px 0; text-align: left }
+	#hint table td { font-family: monospace }
 	]]></style>
 	<script type="text/javascript"><![CDATA[
 
 var XLINK_NS = "http://www.w3.org/1999/xlink";
 var SVG_NS = "http://www.w3.org/2000/svg";
 
 var gPhases = null;
 
 var gIDCache = {};
 
+var gMagPixPaths = [];     // 2D array of array-of-two <path> objects used in the pixel magnifier
+var gMagWidth = 5;         // number of zoomed in pixels to show horizontally
+var gMagHeight = 5;        // number of zoomed in pixels to show vertically
+var gMagZoom = 16;         // size of the zoomed in pixels
+var gImage1Data;           // ImageData object for the reference image
+var gImage2Data;           // ImageData object for the test output image
+var gFlashingPixels = [];  // array of <path> objects that should be flashed due to pixel color mismatch
+var gFlashInterval;        // interval ID for the flashing
+
 function ID(id) {
 	if (!(id in gIDCache))
 		gIDCache[id] = document.getElementById(id);
 	return gIDCache[id];
 }
 
 function load() {
 	gPhases = [ ID("entry"), ID("loading"), ID("viewer") ];
+	build_mag();
+}
+
+function build_mag() {
+	var mag = ID('mag');
+
+	var r = document.createElementNS(SVG_NS, 'rect');
+	r.setAttribute('x', gMagZoom * -gMagWidth / 2);
+	r.setAttribute('y', gMagZoom * -gMagHeight / 2);
+	r.setAttribute('width', gMagZoom * gMagWidth);
+	r.setAttribute('height', gMagZoom * gMagHeight);
+	mag.appendChild(r);
+
+	for (var x = 0; x < gMagWidth; x++) {
+		gMagPixPaths[x] = [];
+		for (var y = 0; y < gMagHeight; y++) {
+			var p1 = document.createElementNS(SVG_NS, 'path');
+			p1.setAttribute('d', 'M' + ((x - gMagWidth / 2) + 1) * gMagZoom + ',' + (y - gMagHeight / 2) * gMagZoom + 'h' + -gMagZoom + 'v' + gMagZoom);
+			p1.setAttribute('stroke', 'black');
+			p1.setAttribute('stroke-width', '1px');
+			p1.setAttribute('fill', 'lime');
+
+			var p2 = document.createElementNS(SVG_NS, 'path');
+			p2.setAttribute('d', 'M' + ((x - gMagWidth / 2) + 1) * gMagZoom + ',' + (y - gMagHeight / 2) * gMagZoom + 'v' + gMagZoom + 'h' + -gMagZoom);
+			p2.setAttribute('stroke', 'black');
+			p2.setAttribute('stroke-width', '1px');
+			p2.setAttribute('fill', 'green');
+
+			mag.appendChild(p1);
+			mag.appendChild(p2);
+			gMagPixPaths[x][y] = [p1, p2];
+		}
+	}
 }
 
 function show_phase(phaseid) {
 	for (var i in gPhases) {
 		var phase = gPhases[i];
 		phase.style.display = (phase.id == phaseid) ? "" : "none";
 	}
 
@@ -221,16 +267,31 @@ function build_viewer() {
 		tbody.appendChild(tr);
 	}
 
 	cell.appendChild(table);
 
 	show_phase("viewer");
 }
 
+function get_image_data(src, whenReady) {
+	var img = new Image();
+	img.onload = function() {
+		var canvas = document.createElement('canvas');
+		canvas.width = 800;
+		canvas.height = 1000;
+
+		var ctx = canvas.getContext('2d');
+		ctx.drawImage(img, 0, 0);
+
+		whenReady(ctx.getImageData(0, 0, 800, 1000));
+	};
+	img.src = src;
+}
+
 function show_images(i) {
 	var item = gTestItems[i];
 	var cell = ID("images");
 
 	ID("image1").style.display = "";
 	ID("image2").style.display = "none";
 	ID("diffrect").style.display = "none";
 	ID("imgcontrols").reset();
@@ -244,32 +305,135 @@ function show_images(i) {
 		ID("imgcontrols").style.display = "";
 
 		ID("image2").setAttributeNS(XLINK_NS, "xlink:href", item.images[1]);
 		// Making the href be #image2 doesn't seem to work
 		ID("feimage2").setAttributeNS(XLINK_NS, "xlink:href", item.images[1]);
 	}
 
 	cell.style.display = "";
+
+	get_image_data(item.images[0], function(data) { gImage1Data = data });
+	get_image_data(item.images[1], function(data) { gImage2Data = data });
 }
 
 function show_image(i) {
 	if (i == 1) {
 		ID("image1").style.display = "";
 		ID("image2").style.display = "none";
 	} else {
 		ID("image1").style.display = "none";
 		ID("image2").style.display = "";
 	}
 }
 
 function show_differences(cb) {
 	ID("diffrect").style.display = cb.checked ? "" : "none";
 }
 
+function flash_pixels(on) {
+	var stroke = on ? 'red' : 'black';
+	var strokeWidth = on ? '2px' : '1px';
+	for (var i = 0; i < gFlashingPixels.length; i++) {
+		gFlashingPixels[i].setAttribute('stroke', stroke);
+		gFlashingPixels[i].setAttribute('stroke-width', strokeWidth);
+	}
+}
+
+function cursor_point(evt) {
+	var m = evt.target.getScreenCTM().inverse();
+	var p = ID('svg').createSVGPoint();
+	p.x = evt.clientX;
+	p.y = evt.clientY;
+	p = p.matrixTransform(m);
+	return { x: Math.floor(p.x), y: Math.floor(p.y) };
+}
+
+function hex2(i) {
+	return (i < 16 ? '0' : '') + i.toString(16);
+}
+
+function canvas_pixel_as_hex(data, x, y) {
+	var offset = (y * data.width + x) * 4;
+	var r = data.data[offset];
+	var g = data.data[offset + 1];
+	var b = data.data[offset + 2];
+	return '#' + hex2(r) + hex2(g) + hex2(b);
+}
+
+function hex_as_rgb(hex) {
+	return 'rgb(' + [parseInt(hex.substring(1, 2), 16), parseInt(hex.substring(3, 5), 16), parseInt(hex.substring(5, 7), 16)] + ')';
+}
+
+function magnify(evt) {
+	var { x: x, y: y } = cursor_point(evt);
+	var centerPixelColor1, centerPixelColor2;
+
+	var dx_lo = -Math.floor(gMagWidth / 2);
+	var dx_hi = Math.floor(gMagWidth / 2);
+	var dy_lo = -Math.floor(gMagHeight / 2);
+	var dy_hi = Math.floor(gMagHeight / 2);
+
+	flash_pixels(false);
+	gFlashingPixels = [];
+	for (var j = dy_lo; j <= dy_hi; j++) {
+		for (var i = dx_lo; i <= dx_hi; i++) {
+			var px = x + i;
+			var py = y + j;
+			var p1 = gMagPixPaths[i + dx_hi][j + dy_hi][0];
+			var p2 = gMagPixPaths[i + dx_hi][j + dy_hi][1];
+			var color1 = canvas_pixel_as_hex(gImage1Data, x + i, y + j);
+			var color2 = canvas_pixel_as_hex(gImage2Data, x + i, y + j);
+			p1.setAttribute('fill', color1);
+			p2.setAttribute('fill', color2);
+			if (color1 != color2) {
+				gFlashingPixels.push(p1, p2);
+				p1.parentNode.appendChild(p1);
+				p2.parentNode.appendChild(p2);
+			}
+			if (i == 0 && j == 0) {
+				centerPixelColor1 = color1;
+				centerPixelColor2 = color2;
+			}
+		}
+	}
+	flash_pixels(true);
+	ID('mag').setAttribute('transform', 'translate(' + x + ',' + y + ')');
+	show_hint('<b>(' + [x, y] + ')</b><br/><br/><table><tr><th>Reference:</th><td>' + centerPixelColor1 + '</td><td>' + hex_as_rgb(centerPixelColor1) + '</td></tr><tr><th>Test output:</th><td>' + centerPixelColor2 + '</td><td>' + hex_as_rgb(centerPixelColor2) + '</td></tr></table>', x, y + gMagHeight * gMagZoom + 8);
+}
+
+function show_mag(b) {
+	if (b) {
+		ID('mag').setAttribute('display', 'inline');
+		var flashedOn = false;
+		gFlashInterval = setInterval(function() {
+			flashedOn = !flashedOn;
+			flash_pixels(flashedOn);
+		}, 500);
+	} else {
+		ID('mag').setAttribute('display', 'none');
+		flash_pixels(false);
+		clearInterval(gFlashInterval);
+		hide_hint();
+	}
+}
+
+function hide_hint() {
+	ID('hint').style.display = 'none';
+}
+
+function show_hint(content, x, y) {
+	var hint = ID('hint');
+	hint.style.display = 'none';
+	hint.innerHTML = content;
+	hint.style.top = y + 'px';
+	hint.style.left = x + 'px';
+	hint.style.display = 'inline-block';
+}
+
 	]]></script>
 
 </head>
 <body onload="load()">
 
 <div id="entry">
 
 <h1>Reftest analyzer: load reftest log</h1>
@@ -288,17 +452,17 @@ function show_differences(cb) {
 <div id="viewer" style="display:none">
   <div id="itemlist"></div>
   <div id="images" style="display:none">
     <form id="imgcontrols">
     <label><input type="radio" name="which" value="0" onchange="show_image(1)" checked="checked" />Image 1</label>
     <label><input type="radio" name="which" value="1" onchange="show_image(2)" />Image 2</label>
     <label><input type="checkbox" onchange="show_differences(this)" />Circle differences</label>
     </form>
-    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="800px" height="1000px" viewbox="0 0 800 1000" id="svg">
+    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="800px" height="1000px" viewbox="0 0 800 1000" id="svg" overflow='visible' onmouseover='show_mag(true)' onmouseout='show_mag(false)'>
       <defs>
 	<!-- use sRGB to avoid loss of data -->
 	<filter id="showDifferences" x="0%" y="0%" width="100%" height="100%"
 	        style="color-interpolation-filters: sRGB">
 	  <feImage id="feimage1" result="img1" xlink:href="#image1" />
 	  <feImage id="feimage2" result="img2" xlink:href="#image2" />
 	  <!-- inv1 and inv2 are the images with RGB inverted -->
 	  <feComponentTransfer result="inv1" in="img1">
@@ -348,17 +512,21 @@ function show_differences(cb) {
 	  <feComposite result="redhighlight" in="red" in2="highlight" operator="in" />
 	  <feFlood result="black" flood-color="black" flood-opacity="0.5" />
 	  <feMerge>
 	    <feMergeNode in="black" />
 	    <feMergeNode in="redhighlight" />
 	  </feMerge>
 	</filter>
       </defs>
-      <image x="0" y="0" width="100%" height="100%" id="image1" />
-      <image x="0" y="0" width="100%" height="100%" id="image2" />
-      <rect id="diffrect" filter="url(#showDifferences)" x="0" y="0" width="100%" height="100%" />
+      <g onmousemove='magnify(evt)' cursor='crosshair'>
+        <image x="0" y="0" width="100%" height="100%" id="image1" />
+        <image x="0" y="0" width="100%" height="100%" id="image2" />
+      </g>
+      <rect id="diffrect" filter="url(#showDifferences)" pointer-events="none" x="0" y="0" width="100%" height="100%" />
+      <g id="mag" display='none' pointer-events='none' transform='translate(100,100)'/>
     </svg>
+    <div id='hint' style='display: none'>This is the hint.</div>
   </div>
 </div>
 
 </body>
 </html>
