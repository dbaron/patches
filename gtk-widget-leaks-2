Fix some leaks of GTK widgets

diff --git a/widget/src/gtk2/nsLookAndFeel.cpp b/widget/src/gtk2/nsLookAndFeel.cpp
--- a/widget/src/gtk2/nsLookAndFeel.cpp
+++ b/widget/src/gtk2/nsLookAndFeel.cpp
@@ -65,16 +65,17 @@ float     nsLookAndFeel::sCaretRatio = 0
 
 //-------------------------------------------------------------------------
 //
 // Query interface implementation
 //
 //-------------------------------------------------------------------------
 nsLookAndFeel::nsLookAndFeel() : nsXPLookAndFeel()
 {
+    mStyle = nsnull;
     InitWidget();
 
     static PRBool sInitialized = PR_FALSE;
 
     if (!sInitialized) {
         sInitialized = PR_TRUE;
         InitLookAndFeel();
     }
@@ -784,39 +785,41 @@ nsLookAndFeel::InitLookAndFeel()
     } else {
         sNativeHyperLinkText = NS_RGB(0x00,0x00,0xEE);
     }
 
     gtk_widget_destroy(window);
 
     // invisible character styles
     GtkWidget *entry = gtk_entry_new();
+    gtk_widget_ref(entry);
+    gtk_object_sink(GTK_OBJECT(entry));
     guint value;
     g_object_get (entry, "invisible-char", &value, NULL);
     sInvisibleCharacter = PRUnichar(value);
-
     // caret styles
     gtk_widget_style_get(entry,
                          "cursor-aspect-ratio", &sCaretRatio,
                          NULL);
 
-    gtk_widget_destroy(entry);
+    gtk_widget_unref(entry);
 }
 
 // virtual
 PRUnichar
 nsLookAndFeel::GetPasswordCharacter()
 {
     return sInvisibleCharacter;
 }
 
 NS_IMETHODIMP
 nsLookAndFeel::LookAndFeelChanged()
 {
     nsXPLookAndFeel::LookAndFeelChanged();
 
     g_object_unref(mStyle);
+    mStyle = nsnull;
  
     InitWidget();
     InitLookAndFeel();
 
     return NS_OK;
 }
diff --git a/widget/src/gtk2/nsLookAndFeel.h b/widget/src/gtk2/nsLookAndFeel.h
--- a/widget/src/gtk2/nsLookAndFeel.h
+++ b/widget/src/gtk2/nsLookAndFeel.h
@@ -74,17 +74,22 @@ protected:
     static nscolor sNativeHyperLinkText;
     static nscolor sComboBoxText;
     static nscolor sComboBoxBackground;
     static PRUnichar sInvisibleCharacter;
     static float   sCaretRatio;
 
     static void InitLookAndFeel();
     void InitWidget() {
+        NS_ASSERTION(!mStyle, "already initialized");
+        // GtkInvisibles come with a refcount that is not floating (so
+        // we don't want to gtk_widget_sink) and they crash if they are
+        // unref'd enough to actually be destroyed, unless we call
+        // gtk_widget_destroy rather than gtk_widget_unref.  (If we use
+        // an hbox here instead it breaks some of the colors.)
         GtkWidget *widget = gtk_invisible_new();
-        g_object_ref_sink(GTK_OBJECT(widget));
         gtk_widget_ensure_style(widget);
         mStyle = gtk_style_copy(gtk_widget_get_style(widget));
-        gtk_widget_unref(widget);
+        gtk_widget_destroy(widget);
     }
 };
 
 #endif
