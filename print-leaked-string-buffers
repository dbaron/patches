From: L. David Baron <dbaron@dbaron.org>

Debugging patch to print out contents of leaked string buffers.

No longer compiles now that the MT hash table variants were removed.

diff --git a/xpcom/string/nsSubstring.cpp b/xpcom/string/nsSubstring.cpp
--- a/xpcom/string/nsSubstring.cpp
+++ b/xpcom/string/nsSubstring.cpp
@@ -18,16 +18,18 @@
 #include <stdlib.h>
 #include "nsSubstring.h"
 #include "nsString.h"
 #include "nsStringBuffer.h"
 #include "nsDependentString.h"
 #include "nsMemory.h"
 #include "prprf.h"
 #include "nsStaticAtom.h"
+#include "nsHashSet.h"
+#include "nsHashKeys.h"
 #include "nsCOMPtr.h"
 
 #include "mozilla/IntegerPrintfMacros.h"
 #ifdef XP_WIN
 #include <windows.h>
 #include <process.h>
 #define getpid() _getpid()
 #define pthread_self() GetCurrentThreadId()
@@ -45,25 +47,44 @@ static const char16_t gNullChar = 0;
 char* const nsCharTraits<char>::sEmptyBuffer =
   (char*)const_cast<char16_t*>(&gNullChar);
 char16_t* const nsCharTraits<char16_t>::sEmptyBuffer =
   const_cast<char16_t*>(&gNullChar);
 
 // ---------------------------------------------------------------------------
 
 #ifdef ENABLE_STRING_STATS
+
+static PLDHashOperator
+PrintLeakedString(nsStringBuffer* aBuffer, void* userArg)
+{
+  uint32_t size = aBuffer->StorageSize();
+  const char *data = static_cast<char*>(aBuffer->Data());
+  printf("Leaked string aBuffer %p, storage size %u:\n",
+         static_cast<void*>(aBuffer), size);
+  for (uint32_t i = 0; i < size; ++i) {
+    printf("  string[%u] = 0x%02X", i, unsigned(data[i]));
+    if (' ' <= data[i] && data[i] <= '~') {
+      printf(" (%c)", data[i]);
+    }
+    printf("\n");
+  }
+  return PL_DHASH_NEXT;
+}
+
 class nsStringStats
 {
 public:
   nsStringStats()
     : mAllocCount(0)
     , mReallocCount(0)
     , mFreeCount(0)
     , mShareCount(0)
   {
+    mLiveStringBuffers.Init(1024);
   }
 
   ~nsStringStats()
   {
     // this is a hack to suppress duplicate string stats printing
     // in seamonkey as a result of the string code being linked
     // into seamonkey and libxpcom! :-(
     if (!mAllocCount && !mAdoptCount) {
@@ -74,16 +95,17 @@ public:
     printf(" => mAllocCount:     % 10d\n", int(mAllocCount));
     printf(" => mReallocCount:   % 10d\n", int(mReallocCount));
     printf(" => mFreeCount:      % 10d", int(mFreeCount));
     if (mAllocCount > mFreeCount) {
       printf("  --  LEAKED %d !!!\n", mAllocCount - mFreeCount);
     } else {
       printf("\n");
     }
+    mLiveStringBuffers.EnumerateRead(PrintLeakedString, nullptr);
     printf(" => mShareCount:     % 10d\n", int(mShareCount));
     printf(" => mAdoptCount:     % 10d\n", int(mAdoptCount));
     printf(" => mAdoptFreeCount: % 10d", int(mAdoptFreeCount));
     if (mAdoptCount > mAdoptFreeCount) {
       printf("  --  LEAKED %d !!!\n", mAdoptCount - mAdoptFreeCount);
     } else {
       printf("\n");
     }
@@ -92,16 +114,17 @@ public:
   }
 
   Atomic<int32_t> mAllocCount;
   Atomic<int32_t> mReallocCount;
   Atomic<int32_t> mFreeCount;
   Atomic<int32_t> mShareCount;
   Atomic<int32_t> mAdoptCount;
   Atomic<int32_t> mAdoptFreeCount;
+  nsHashSetMT< nsPtrHashKey<nsStringBuffer> > mLiveStringBuffers;
 };
 static nsStringStats gStringStats;
 #define STRING_STAT_INCREMENT(_s) (gStringStats.m ## _s ## Count)++
 #else
 #define STRING_STAT_INCREMENT(_s)
 #endif
 
 // ---------------------------------------------------------------------------
@@ -218,16 +241,19 @@ nsStringBuffer::Release()
   if (count == 0) {
     // We're going to destroy the object on this thread, so we need
     // acquire semantics to synchronize with the memory released by
     // the last release on other threads, that is, to ensure that
     // writes prior to that release are now visible on this thread.
     count = mRefCount.load(std::memory_order_acquire);
 
     STRING_STAT_INCREMENT(Free);
+#ifdef ENABLE_STRING_STATS
+    gStringStats.mLiveStringBuffers.Remove(this);
+#endif
     free(this); // we were allocated with |malloc|
   }
 }
 
 /**
  * Alloc returns a pointer to a new string header with set capacity.
  */
 already_AddRefed<nsStringBuffer>
@@ -237,16 +263,19 @@ nsStringBuffer::Alloc(size_t aSize)
   NS_ASSERTION(sizeof(nsStringBuffer) + aSize <= size_t(uint32_t(-1)) &&
                sizeof(nsStringBuffer) + aSize > aSize,
                "mStorageSize will truncate");
 
   nsStringBuffer* hdr =
     (nsStringBuffer*)malloc(sizeof(nsStringBuffer) + aSize);
   if (hdr) {
     STRING_STAT_INCREMENT(Alloc);
+#ifdef ENABLE_STRING_STATS
+    gStringStats.mLiveStringBuffers.Add(hdr);
+#endif
 
     hdr->mRefCount = 1;
     hdr->mStorageSize = aSize;
     NS_LOG_ADDREF(hdr, 1, "nsStringBuffer", sizeof(*hdr));
   }
   return dont_AddRef(hdr);
 }
 
@@ -263,23 +292,28 @@ nsStringBuffer::Realloc(nsStringBuffer* 
   // no point in trying to save ourselves if we hit this assertion
   NS_ASSERTION(!aHdr->IsReadonly(), "|Realloc| attempted on readonly string");
 
   // Treat this as a release and addref for refcounting purposes, since we
   // just asserted that the refcount is 1.  If we don't do that, refcount
   // logging will claim we've leaked all sorts of stuff.
   NS_LOG_RELEASE(aHdr, 0, "nsStringBuffer");
 
-  aHdr = (nsStringBuffer*)realloc(aHdr, sizeof(nsStringBuffer) + aSize);
-  if (aHdr) {
-    NS_LOG_ADDREF(aHdr, 1, "nsStringBuffer", sizeof(*aHdr));
-    aHdr->mStorageSize = aSize;
+  nsStringBuffer* newHdr =
+    (nsStringBuffer*)realloc(aHdr, sizeof(nsStringBuffer) + aSize);
+  if (newHdr) {
+    NS_LOG_ADDREF(newHdr, 1, "nsStringBuffer", sizeof(*newHdr));
+    newHdr->mStorageSize = aSize;
+#ifdef ENABLE_STRING_STATS
+    gStringStats.mLiveStringBuffers.Remove(aHdr);
+    gStringStats.mLiveStringBuffers.Add(newHdr);
+#endif
   }
 
-  return aHdr;
+  return newHdr;
 }
 
 nsStringBuffer*
 nsStringBuffer::FromString(const nsAString& aStr)
 {
   const nsAStringAccessor* accessor =
     static_cast<const nsAStringAccessor*>(&aStr);
 
