From: L. David Baron <dbaron@dbaron.org>

Call History::NotifyVisited whether or not the link is visited.  (Bug 557579)  r=bzbarsky  r=sdwilsh  a2.0=blocking

diff --git a/content/base/src/Link.cpp b/content/base/src/Link.cpp
--- a/content/base/src/Link.cpp
+++ b/content/base/src/Link.cpp
@@ -73,40 +73,40 @@ Link::GetLinkState() const
   NS_ASSERTION(mLinkState != eLinkState_Unknown,
                "Getting the link state with an unknown value!");
   return mLinkState;
 }
 
 void
 Link::SetLinkState(nsLinkState aState)
 {
+  NS_ASSERTION(aState == eLinkState_Visited || aState == eLinkState_Unvisited,
+               "unexpected link state");
   NS_ASSERTION(mRegistered,
                "Setting the link state of an unregistered Link!");
-  NS_ASSERTION(mLinkState != aState,
-               "Setting state to the currently set state!");
-
-  // Remember our old link state for when we notify.
-  nsEventStates oldLinkState = LinkState();
 
   // Set our current state as appropriate.
   mLinkState = aState;
 
-  // Per IHistory interface documentation, we are no longer registered.
-  mRegistered = false;
+  if (aState == eLinkState_Visited) {
+    // Per IHistory interface documentation, we are no longer registered.
+    mRegistered = false;
+  }
 
   // Notify the document that our visited state has changed.
   nsIContent *content = Content();
   nsIDocument *doc = content->GetCurrentDoc();
   NS_ASSERTION(doc, "Registered but we have no document?!");
-  nsEventStates newLinkState = LinkState();
-  NS_ASSERTION(newLinkState == NS_EVENT_STATE_VISITED ||
-               newLinkState == NS_EVENT_STATE_UNVISITED,
-               "Unexpected state obtained from LinkState()!");
   mozAutoDocUpdate update(doc, UPDATE_CONTENT_STATE, PR_TRUE);
-  doc->ContentStatesChanged(content, nsnull, oldLinkState ^ newLinkState);
+  // Always send notification for both VISITED and UNVISITED states so
+  // that we do the same amount of work no matter what the state of the
+  // link (including when we get the initial asynchronous notification
+  // that a lookup has been completed and the link is unvisited).
+  doc->ContentStatesChanged(content, nsnull,
+                            NS_EVENT_STATE_VISITED | NS_EVENT_STATE_UNVISITED);
 }
 
 nsEventStates
 Link::LinkState() const
 {
   // We are a constant method, but we are just lazily doing things and have to
   // track that state.  Cast away that constness!
   Link *self = const_cast<Link *>(this);
diff --git a/docshell/base/IHistory.h b/docshell/base/IHistory.h
--- a/docshell/base/IHistory.h
+++ b/docshell/base/IHistory.h
@@ -46,31 +46,35 @@ class nsIURI;
 class nsString;
 
 namespace mozilla {
 
     namespace dom {
         class Link;
     }
 
+// 677a591b-62b9-4862-8191-3d80f7feb9fc
 #define IHISTORY_IID \
-  {0x6f733924, 0x6321, 0x4384, {0x01, 0xee, 0x8e, 0x7d, 0xfb, 0xde, 0xe7, 0xa8}}
+{ 0x677a591b, 0x62b9, 0x4862, \
+  { 0x81, 0x91, 0x3d, 0x80, 0xf7, 0xfe, 0xb9, 0xfc } }
 
 class IHistory : public nsISupports
 {
 public:
     NS_DECLARE_STATIC_IID_ACCESSOR(IHISTORY_IID)
 
     /**
      * Registers the Link for notifications about the visited-ness of aURI.
-     * Consumers should assume that the URI is unvisited after calling this, and
-     * they will be notified if that state (unvisited) changes by having
-     * SetLinkState called on themselves.  This function is guaranteed to run to
-     * completion before aLink is notified.  After the node is notified, it will
-     * be unregistered.
+     * They will be notified once soon after calling this function that the
+     * link is either visited or unvisited.  Then, at some future point, if
+     * the link becomes visited, they will be notified again.  This
+     * function is guaranteed to run to completion before aLink is
+     * notified.  After the node is notified that it is *visited*, it will
+     * be unregistered, but if it is notified that it is *unvisited* it
+     * will remain registered.
      *
      * @note SetLinkState must not call RegisterVisitedCallback or
      *       UnregisterVisitedCallback.
      *
      * @pre aURI must not be null.
      * @pre aLink may be null only in the MOZ_IPC parent process.
      *
      * @param aURI
diff --git a/dom/ipc/ContentChild.cpp b/dom/ipc/ContentChild.cpp
--- a/dom/ipc/ContentChild.cpp
+++ b/dom/ipc/ContentChild.cpp
@@ -451,20 +451,20 @@ ContentChild::RecvNotifyAlertsObserver(c
             }
         }
         ++i;
     }
     return true;
 }
 
 bool
-ContentChild::RecvNotifyVisited(const IPC::URI& aURI)
+ContentChild::RecvNotifyVisited(const IPC::URI& aURI, const bool& aIsVisited)
 {
     nsCOMPtr<nsIURI> newURI(aURI);
-    History::GetService()->NotifyVisited(newURI);
+    History::GetService()->NotifyVisited(newURI, aIsVisited);
     return true;
 }
 
 
 bool
 ContentChild::RecvAsyncMessage(const nsString& aMsg, const nsString& aJSON)
 {
   nsRefPtr<nsFrameMessageManager> cpm = nsFrameMessageManager::sChildProcessManager;
diff --git a/dom/ipc/ContentChild.h b/dom/ipc/ContentChild.h
--- a/dom/ipc/ContentChild.h
+++ b/dom/ipc/ContentChild.h
@@ -100,17 +100,18 @@ public:
     virtual bool DeallocPExternalHelperApp(PExternalHelperAppChild *aService);
 
     virtual bool RecvRegisterChrome(const InfallibleTArray<ChromePackage>& packages,
                                     const InfallibleTArray<ResourceMapping>& resources,
                                     const InfallibleTArray<OverrideMapping>& overrides);
 
     virtual bool RecvSetOffline(const PRBool& offline);
 
-    virtual bool RecvNotifyVisited(const IPC::URI& aURI);
+    virtual bool RecvNotifyVisited(const IPC::URI& aURI,
+                                   const bool& aIsVisited);
     // auto remove when alertfinished is received.
     nsresult AddRemoteAlertObserver(const nsString& aData, nsIObserver* aObserver);
 
     virtual bool RecvPreferenceUpdate(const PrefTuple& aPref);
 
     virtual bool RecvNotifyAlertsObserver(const nsCString& aType, const nsString& aData);
 
     virtual bool RecvAsyncMessage(const nsString& aMsg, const nsString& aJSON);
diff --git a/dom/ipc/PContent.ipdl b/dom/ipc/PContent.ipdl
--- a/dom/ipc/PContent.ipdl
+++ b/dom/ipc/PContent.ipdl
@@ -73,17 +73,17 @@ child:
 
     PTestShell();
 
     RegisterChrome(ChromePackage[] packages, ResourceMapping[] resources,
                    OverrideMapping[] overrides);
 
     async SetOffline(PRBool offline);
 
-    async NotifyVisited(URI uri);
+    async NotifyVisited(URI uri, bool aIsVisited);
 
     PreferenceUpdate(PrefTuple pref);
 
     NotifyAlertsObserver(nsCString topic, nsString data);
 
     GeolocationUpdate(GeoPosition somewhere);
 
     // nsIPermissionManager messages
diff --git a/toolkit/components/places/src/History.cpp b/toolkit/components/places/src/History.cpp
--- a/toolkit/components/places/src/History.cpp
+++ b/toolkit/components/places/src/History.cpp
@@ -212,19 +212,17 @@ public:
   }
 
   NS_IMETHOD HandleCompletion(PRUint16 aReason)
   {
     if (aReason != mozIStorageStatementCallback::REASON_FINISHED) {
       return NS_OK;
     }
 
-    if (mIsVisited) {
-      History::GetService()->NotifyVisited(mURI);
-    }
+    History::GetService()->NotifyVisited(mURI, mIsVisited);
 
     // Notify any observers about that we have resolved the visited state of
     // this URI.
     nsCOMPtr<nsIObserverService> observerService =
       mozilla::services::GetObserverService();
     if (observerService) {
       nsAutoString status;
       if (mIsVisited) {
@@ -365,17 +363,17 @@ public:
 
     nsCOMPtr<nsIObserverService> obsService =
       mozilla::services::GetObserverService();
     if (obsService) {
       nsresult rv = obsService->NotifyObservers(mData->uri, URI_VISIT_SAVED, nsnull);
       NS_WARN_IF_FALSE(NS_SUCCEEDED(rv), "Could not notify observers");
     }
 
-    History::GetService()->NotifyVisited(mData->uri);
+    History::GetService()->NotifyVisited(mData->uri, true);
 
     return NS_OK;
   }
 
 protected:
   nsAutoPtr<VisitURIData> mData;
 };
 NS_IMPL_ISUPPORTS1(
@@ -976,26 +974,27 @@ History::CurrentTaskFinished()
   NS_ASSERTION(mPendingVisits.PeekFront(), "Tried to finish task not on the queue");
 
   nsCOMPtr<Step> deadTaskWalking =
     dont_AddRef(static_cast<Step*>(mPendingVisits.PopFront()));
   StartNextTask();
 }
 
 void
-History::NotifyVisited(nsIURI* aURI)
+History::NotifyVisited(nsIURI* aURI,
+                       bool aIsVisited)
 {
   NS_ASSERTION(aURI, "Ruh-roh!  A NULL URI was passed to us!");
 
 #ifdef MOZ_IPC
   if (XRE_GetProcessType() == GeckoProcessType_Default) {
     mozilla::dom::ContentParent* cpp = 
       mozilla::dom::ContentParent::GetSingleton(PR_FALSE);
     if (cpp)
-      (void)cpp->SendNotifyVisited(aURI);
+      (void)cpp->SendNotifyVisited(aURI, aIsVisited);
   }
 #endif
 
   // If the hash table has not been initialized, then we have nothing to notify
   // about.
   if (!mObservers.IsInitialized()) {
     return;
   }
@@ -1007,23 +1006,25 @@ History::NotifyVisited(nsIURI* aURI)
     return;
   }
 
   // Walk through the array, and update each Link node.
   const ObserverArray& observers = key->array;
   ObserverArray::index_type len = observers.Length();
   for (ObserverArray::index_type i = 0; i < len; i++) {
     Link* link = observers[i];
-    link->SetLinkState(eLinkState_Visited);
+    link->SetLinkState(aIsVisited ? eLinkState_Visited : eLinkState_Unvisited);
     NS_ASSERTION(len == observers.Length(),
                  "Calling SetLinkState added or removed an observer!");
   }
 
-  // All the registered nodes can now be removed for this URI.
-  mObservers.RemoveEntry(aURI);
+  if (aIsVisited) {
+    // All the registered nodes can now be removed for this URI.
+    mObservers.RemoveEntry(aURI);
+  }
 }
 
 /* static */
 History*
 History::GetService()
 {
   if (gService) {
     return gService;
diff --git a/toolkit/components/places/src/History.h b/toolkit/components/places/src/History.h
--- a/toolkit/components/places/src/History.h
+++ b/toolkit/components/places/src/History.h
@@ -65,18 +65,20 @@ public:
 
   History();
 
   /**
    * Notifies about the visited status of a given URI.
    *
    * @param aURI
    *        The URI to notify about.
+   * @param aIsVisited
+   *        Whether the URI is visited.
    */
-  void NotifyVisited(nsIURI *aURI);
+  void NotifyVisited(nsIURI *aURI, bool aIsVisited);
 
   /**
    * Append a task to the queue for SQL queries that need to happen
    * atomically.
    *
    * @pre aTask is not null
    *
    * @param aTask
diff --git a/toolkit/components/places/src/nsNavHistory.cpp b/toolkit/components/places/src/nsNavHistory.cpp
--- a/toolkit/components/places/src/nsNavHistory.cpp
+++ b/toolkit/components/places/src/nsNavHistory.cpp
@@ -2941,17 +2941,17 @@ nsNavHistory::AddVisit(nsIURI* aURI, PRT
   if (newItem && (aIsRedirect || aTransitionType == TRANSITION_DOWNLOAD)) {
     nsCOMPtr<nsIObserverService> obsService =
       do_GetService(NS_OBSERVERSERVICE_CONTRACTID);
     if (obsService)
       obsService->NotifyObservers(aURI, NS_LINK_VISITED_EVENT_TOPIC, nsnull);
   }
 
   // Because we implement IHistory, we always have to notify about the visit.
-  History::GetService()->NotifyVisited(aURI);
+  History::GetService()->NotifyVisited(aURI, true);
 
   return NS_OK;
 }
 
 
 // nsNavHistory::GetNewQuery
 
 NS_IMETHODIMP
diff --git a/toolkit/components/places/tests/cpp/test_IHistory.cpp b/toolkit/components/places/tests/cpp/test_IHistory.cpp
--- a/toolkit/components/places/tests/cpp/test_IHistory.cpp
+++ b/toolkit/components/places/tests/cpp/test_IHistory.cpp
@@ -124,44 +124,45 @@ NS_IMPL_ISUPPORTS1(
   nsIObserver
 )
 
 ////////////////////////////////////////////////////////////////////////////////
 //// Test Functions
 
 // These variables are shared between part 1 and part 2 of the test.  Part 2
 // sets the nsCOMPtr's to nsnull, freeing the reference.
-namespace test_unvisited_does_not_notify {
+namespace test_unvisited_notifies {
   nsCOMPtr<nsIURI> testURI;
   nsCOMPtr<Link> testLink;
 }
 void
-test_unvisted_does_not_notify_part1()
+test_unvisited_notifies_part1()
 {
-  using namespace test_unvisited_does_not_notify;
+  using namespace test_unvisited_notifies;
 
   // This test is done in two parts.  The first part registers for a URI that
   // should not be visited.  We then run another test that will also do a
   // lookup and will be notified.  Since requests are answered in the order they
   // are requested (at least as long as the same URI isn't asked for later), we
   // will know that the Link was not notified.
 
   // First, we need a test URI.
   testURI = new_test_uri();
 
   // Create our test Link.
   testLink = new mock_Link(expect_no_visit);
+  // And add a reference for the callback function to release.
+  NS_ADDREF(testLink);
 
   // Now, register our Link to be notified.
   nsCOMPtr<IHistory> history(do_get_IHistory());
   nsresult rv = history->RegisterVisitedCallback(testURI, testLink);
   do_check_success(rv);
 
-  // Run the next test.
-  run_next_test();
+  // Note: test will continue upon notification.
 }
 
 void
 test_visited_notifies()
 {
   // First, we add our test URI to history.
   nsCOMPtr<nsIURI> testURI(new_test_uri());
   addURI(testURI);
@@ -174,22 +175,22 @@ test_visited_notifies()
   // Now, register our Link to be notified.
   nsCOMPtr<IHistory> history(do_get_IHistory());
   nsresult rv = history->RegisterVisitedCallback(testURI, link);
   do_check_success(rv);
   // Note: test will continue upon notification.
 }
 
 void
-test_unvisted_does_not_notify_part2()
+test_unvisited_notifies_part2()
 {
-  using namespace test_unvisited_does_not_notify;
+  using namespace test_unvisited_notifies;
 
-  // We would have had a failure at this point had the content node been told it
-  // was visited.  Therefore, it is safe to unregister our content node.
+  // Because we were notified that the link is *unvisited*, we're still
+  // registered.  So unregister now.
   nsCOMPtr<IHistory> history(do_get_IHistory());
   nsresult rv = history->UnregisterVisitedCallback(testURI, testLink);
   do_check_success(rv);
 
   // Clear the stored variables now.
   testURI = nsnull;
   testLink = nsnull;
 
@@ -377,24 +378,25 @@ test_observer_topic_dispatched()
   nsresult rv = visitedURI->Equals(notVisitedURI, &urisEqual);
   do_check_success(rv);
   do_check_false(urisEqual);
   addURI(visitedURI);
 
   // Need two Link objects as well - one for each URI.
   nsCOMPtr<Link> visitedLink(new mock_Link(expect_visit, false));
   NS_ADDREF(visitedLink); // It will release itself when notified.
-  nsCOMPtr<Link> notVisitedLink(new mock_Link(expect_no_visit));
+  nsCOMPtr<Link> notVisitedLink(new mock_Link(expect_no_visit, false));
+  NS_ADDREF(notVisitedLink); // It will release itself when notified.
 
   // Add the right observers for the URIs to check results.
   bool visitedNotified = false;
   nsCOMPtr<nsIObserver> vistedObs =
     new statusObserver(visitedURI, true, visitedNotified);
   bool notVisitedNotified = false;
-  nsCOMPtr<nsIObserver> unvistedObs =
+  nsCOMPtr<nsIObserver> unvisitedObs =
     new statusObserver(notVisitedURI, false, notVisitedNotified);
 
   // Register our Links to be notified.
   nsCOMPtr<IHistory> history(do_get_IHistory());
   rv = history->RegisterVisitedCallback(visitedURI, visitedLink);
   do_check_success(rv);
   rv = history->RegisterVisitedCallback(notVisitedURI, notVisitedLink);
   do_check_success(rv);
@@ -580,19 +582,19 @@ test_two_null_links_same_uri()
 
 ////////////////////////////////////////////////////////////////////////////////
 //// Test Harness
 
 /**
  * Note: for tests marked "Order Important!", please see the test for details.
  */
 Test gTests[] = {
-  TEST(test_unvisted_does_not_notify_part1), // Order Important!
+  TEST(test_unvisited_notifies_part1), // Order Important!
   TEST(test_visited_notifies),
-  TEST(test_unvisted_does_not_notify_part2), // Order Important!
+  TEST(test_unvisited_notifies_part2), // Order Important!
   TEST(test_same_uri_notifies_both),
   TEST(test_unregistered_visited_does_not_notify), // Order Important!
   TEST(test_new_visit_notifies_waiting_Link),
   TEST(test_RegisterVisitedCallback_returns_before_notifying),
   TEST(test_observer_topic_dispatched),
   TEST(test_visituri_inserts),
   TEST(test_visituri_updates),
   TEST(test_visituri_preserves_shown_and_typed),
