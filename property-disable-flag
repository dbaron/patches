From: L. David Baron <dbaron@dbaron.org>

Bug 837211 patch 3 - Add flag to control whether CSS properties are enabled (applicable to aliases as well), so that properties can be disabled without substantive code change.  r=bzbarsky

diff --git a/dom/bindings/GenerateCSS2PropertiesWebIDL.py b/dom/bindings/GenerateCSS2PropertiesWebIDL.py
--- a/dom/bindings/GenerateCSS2PropertiesWebIDL.py
+++ b/dom/bindings/GenerateCSS2PropertiesWebIDL.py
@@ -1,30 +1,48 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this file,
 # You can obtain one at http://mozilla.org/MPL/2.0/.
 
 import sys
 import string
+import re
+
+flagRE = re.compile("^[A-Z0-9_]+$")
+
+def hasFlag(flagsList, flagToFind):
+    flagsList = flagsList.strip()
+    if flagsList == "0":
+        return False
+    flagsArr = [flag.strip() for flag in flagsList.split("|")]
+    found = False
+    for flag in flagsArr:
+        if not flagRE.match(flag):
+            raise StandardError("unexpected flag " + flag)
+        if flag == flagToFind:
+           found = True # but keep validating the flags
+    return found
 
 propList = eval(sys.stdin.read())
 props = ""
 for [name, prop, id, flags, pref] in propList:
     extendedAttrs = ["Throws", "TreatNullAs=EmptyString"]
     # To limit the overhead of Func= annotations, we only generate them when
     # necessary, which is when the
     # CSS_PROPERTY_ALWAYS_ENABLED_IN_CHROME_OR_CERTIFIED_APP flag is set.
     # Otherwise, we try to get by with just a Pref= annotation or no annotation
     # at all.
     if "CSS_PROPERTY_ALWAYS_ENABLED_IN_CHROME_OR_CERTIFIED_APP" in flags:
         extendedAttrs.append('Func="IsCSSPropertyExposedToJS<eCSSProperty_%s>"' % id)
     # The following is an 'elif' because it is the responsibility of
     # IsCSSPropertyExposedToJS to handle the pref if there is one.
     elif pref is not "":
         extendedAttrs.append('Pref="%s"' % pref)
+    elif hasFlag(flags, "CSS_PROPERTY_DISABLED_BY_DEFAULT"):
+        continue
     if not prop.startswith("Moz"):
         prop = prop[0].lower() + prop[1:]
     # Unfortunately, even some of the getters here are fallible
     # (e.g. on nsComputedDOMStyle).
     props += "  [%s] attribute DOMString %s;\n" % (", ".join(extendedAttrs),
                                                    prop)
     # Per spec, what's actually supposed to happen here is that we're supposed
     # to have properties for:
diff --git a/layout/style/nsCSSPropAliasList.h b/layout/style/nsCSSPropAliasList.h
--- a/layout/style/nsCSSPropAliasList.h
+++ b/layout/style/nsCSSPropAliasList.h
@@ -29,18 +29,20 @@
   nsCSSPropList.h, prefixes should just be included in this file (rather
   than needing the CSS_PROP_DOMPROP_PREFIXED(prop) macro).
 
   -. 'flags' is a flags word, as for properties.  Currently only
   CSS_PROPERTY_DISABLED_BY_DEFAULT is supported, and the flags are
   not otherwise available for aliases.
 
   -. 'pref' is the name of a pref that controls whether the property
-  is enabled.  The property is enabled if 'pref' is an empty string,
-  or if the boolean property whose name is 'pref' is set to true.
+  is enabled.  If 'pref' is a non-empty string, then the property is
+  enabled if a boolean preference with that name exists and is true.
+  Otherwise is it enabled iff the CSS_PROPERTY_DISABLED_BY_DEFAULT
+  property flag is not set.
 
  ******/
 
 CSS_PROP_ALIAS(-moz-transform-origin,
                transform_origin,
                MozTransformOrigin,
                0,
                "layout.css.prefixes.transforms")
diff --git a/layout/style/nsCSSPropList.h b/layout/style/nsCSSPropList.h
--- a/layout/style/nsCSSPropList.h
+++ b/layout/style/nsCSSPropList.h
@@ -37,18 +37,20 @@
   The names differ in that publicname_ has Moz prefixes where they are
   used, and also in CssFloat vs. Float.  The caller's choice depends on
   whether the use is for internal use such as eCSSProperty_* or
   nsRuleData::ValueFor* or external use such as exposing DOM properties.
 
   -. 'flags', a bitfield containing CSS_PROPERTY_* flags.
 
   -. 'pref' is the name of a pref that controls whether the property
-  is enabled.  The property is enabled if 'pref' is an empty string,
-  or if the boolean property whose name is 'pref' is set to true.
+  is enabled.  If 'pref' is a non-empty string, then the property is
+  enabled if a boolean preference with that name exists and is true.
+  Otherwise is it enabled iff the CSS_PROPERTY_DISABLED_BY_DEFAULT
+  property flag is not set.
 
   -. 'parsevariant', to be passed to ParseVariant in the parser.
 
   -. 'kwtable', which is either nullptr or the name of the appropriate
   keyword table member of class nsCSSProps, for use in
   nsCSSProps::LookupPropertyValue.
 
   -. 'group_' [used only for CSS_PROP_LOGICAL] is the name of
diff --git a/layout/style/nsCSSProps.cpp b/layout/style/nsCSSProps.cpp
--- a/layout/style/nsCSSProps.cpp
+++ b/layout/style/nsCSSProps.cpp
@@ -2915,29 +2915,29 @@ nsCSSProps::gPropertyIndexInStruct[eCSSP
   #undef CSS_PROP_BACKENDONLY
 
 };
 
 /* static */ bool
 nsCSSProps::gPropertyEnabled[eCSSProperty_COUNT_with_aliases] = {
   #define CSS_PROP(name_, id_, method_, flags_, pref_, parsevariant_,     \
                    kwtable_, stylestruct_, stylestructoffset_, animtype_) \
-    true,
+    !(pref_)[0] && !((flags_) & CSS_PROPERTY_DISABLED_BY_DEFAULT),
   #define CSS_PROP_LIST_INCLUDE_LOGICAL
   #include "nsCSSPropList.h"
   #undef CSS_PROP_LIST_INCLUDE_LOGICAL
   #undef CSS_PROP
 
   #define  CSS_PROP_SHORTHAND(name_, id_, method_, flags_, pref_) \
-    true,
+    !(pref_)[0] && !((flags_) & CSS_PROPERTY_DISABLED_BY_DEFAULT),
   #include "nsCSSPropList.h"
   #undef CSS_PROP_SHORTHAND
 
   #define CSS_PROP_ALIAS(aliasname_, propid_, aliasmethod_, flags_, pref_) \
-    true,
+    !(pref_)[0] && !((flags_) & CSS_PROPERTY_DISABLED_BY_DEFAULT),
   #include "nsCSSPropAliasList.h"
   #undef CSS_PROP_ALIAS
 };
 
 // Check that all logical property flags are used appropriately.
 #define CSS_PROP(name_, id_, method_, flags_, pref_, parsevariant_,         \
                  kwtable_, stylestruct_, stylestructoffset_, animtype_)     \
   static_assert(!((flags_) & CSS_PROPERTY_LOGICAL),                         \
diff --git a/layout/style/nsCSSProps.h b/layout/style/nsCSSProps.h
--- a/layout/style/nsCSSProps.h
+++ b/layout/style/nsCSSProps.h
@@ -233,16 +233,22 @@ static_assert((CSS_PROPERTY_PARSE_PROPER
 // margin-inline-end).  Must only be set if CSS_PROPERTY_LOGICAL is set.
 // When not set, the logical property is for the "start" edge (such as
 // margin-block-start or margin-inline-start).
 #define CSS_PROPERTY_LOGICAL_END_EDGE             (1<<26)
 
 // This property can be animated on the compositor.
 #define CSS_PROPERTY_CAN_ANIMATE_ON_COMPOSITOR    (1<<27)
 
+// This property is disabled by default (see also pref field in
+// nsCSSPropList.h and nsCSSPropAliasList.h).
+// WARNING:  The bindings generation code checks this value as a
+// *string*, after preprocessing nsCSSPropList.h into python!
+#define CSS_PROPERTY_DISABLED_BY_DEFAULT          (1<<28)
+
 /**
  * Types of animatable values.
  */
 enum nsStyleAnimType {
   // requires a custom implementation in
   // StyleAnimationValue::ExtractComputedValue
   eStyleAnimType_Custom,
 
