From: L. David Baron <dbaron@dbaron.org>

Bug 837211 patch 3:  Add flag to control whether CSS properties are enabled (applicable to aliases as well), so that properties can be disabled without substantive code change.  r=bzbarsky

diff --git a/dom/bindings/GenerateCSS2PropertiesWebIDL.py b/dom/bindings/GenerateCSS2PropertiesWebIDL.py
--- a/dom/bindings/GenerateCSS2PropertiesWebIDL.py
+++ b/dom/bindings/GenerateCSS2PropertiesWebIDL.py
@@ -1,21 +1,39 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this file,
 # You can obtain one at http://mozilla.org/MPL/2.0/.
 
 import sys
 import string
+import re
+
+flagRE = re.compile("^[A-Z0-9_]+$")
+
+def hasFlag(flagsList, flagToFind):
+    flagsList = flagsList.strip()
+    if flagsList == "0":
+        return false
+    flagsArr = [flag.strip() for flag in flagsList.split("|")]
+    found = False
+    for flag in flagsArr:
+        if not flagRE.match(flag):
+            raise StandardError("unexpected flag " + flag)
+        if flag == flagToFind:
+           found = True # but keep validating the flags
+    return found
 
 propList = eval(sys.stdin.read())
 props = ""
-for [prop, pref] in propList:
+for [prop, pref, flags] in propList:
     extendedAttrs = ["Throws", "TreatNullAs=EmptyString"]
     if pref is not "":
         extendedAttrs.append('Pref="%s"' % pref)
+    elif hasFlag(flags, "CSS_PROPERTY_DISABLED_BY_DEFAULT"):
+        continue
     if not prop.startswith("Moz"):
         prop = prop[0].lower() + prop[1:]
     # Unfortunately, even some of the getters here are fallible
     # (e.g. on nsComputedDOMStyle).
     props += "  [%s] attribute DOMString %s;\n" % (", ".join(extendedAttrs),
                                                    prop)
 
 idlFile = open(sys.argv[1], "r");
diff --git a/dom/webidl/CSS2PropertiesProps.h b/dom/webidl/CSS2PropertiesProps.h
--- a/dom/webidl/CSS2PropertiesProps.h
+++ b/dom/webidl/CSS2PropertiesProps.h
@@ -1,34 +1,34 @@
 /* A file meant as input to the preprocessor only */
 
 /* DO_PROP serves as an extra level of indirection to allow expansion
    of CSS_PROP_DOMPROP_PREFIXED */
 
 [
 
-#define DO_PROP(method, pref) \
-  [ #method, pref ],
+#define DO_PROP(method, pref, flags) \
+  [ #method, pref, #flags ],
 #define CSS_PROP(name, id, method, flags, pref, parsevariant, kwtable, \
 		 stylestruct, stylestructofset, animtype) \
-  DO_PROP(method, pref)
+  DO_PROP(method, pref, flags)
 #define CSS_PROP_SHORTHAND(name, id, method, flags, pref) \
-  DO_PROP(method, pref)
+  DO_PROP(method, pref, flags)
 #define CSS_PROP_PUBLIC_OR_PRIVATE(publicname_, privatename_) publicname_
 #define CSS_PROP_LIST_EXCLUDE_INTERNAL
 
 #include "nsCSSPropList.h"
 
 #undef CSS_PROP_LIST_EXCLUDE_INTERNAL
 #undef CSS_PROP_PUBLIC_OR_PRIVATE
 #undef CSS_PROP_SHORTHAND
 #undef CSS_PROP
 
 #define CSS_PROP_ALIAS(name, id, method, flags, pref) \
-  DO_PROP(method, pref)
+  DO_PROP(method, pref, flags)
 
 #include "nsCSSPropAliasList.h"
 
 #undef CSS_PROP_ALIAS
 
 #undef DO_PROP
 
 ]
diff --git a/layout/style/nsCSSPropAliasList.h b/layout/style/nsCSSPropAliasList.h
--- a/layout/style/nsCSSPropAliasList.h
+++ b/layout/style/nsCSSPropAliasList.h
@@ -29,18 +29,20 @@
   nsCSSPropList.h, prefixes should just be included in this file (rather
   than needing the CSS_PROP_DOMPROP_PREFIXED(prop) macro).
 
   -. 'flags' is a flags word, as for properties.  Currently only
   CSS_PROPERTY_DISABLED_BY_DEFAULT is supported, and the flags are
   not otherwise available for aliases.
 
   -. 'pref' is the name of a pref that controls whether the property
-  is enabled.  The property is enabled if 'pref' is an empty string,
-  or if the boolean property whose name is 'pref' is set to true.
+  is enabled.  If 'pref' is a non-empty string, then the property is
+  enabled if a boolean preference with that name exists and is true.
+  Otherwise is it enabled iff the CSS_PROPERTY_DISABLED_BY_DEFAULT
+  property flag is not set.
 
  ******/
 
 CSS_PROP_ALIAS(-moz-transform-origin,
                transform_origin,
                MozTransformOrigin,
                0,
               "layout.css.prefixes.transforms")
diff --git a/layout/style/nsCSSPropList.h b/layout/style/nsCSSPropList.h
--- a/layout/style/nsCSSPropList.h
+++ b/layout/style/nsCSSPropList.h
@@ -35,18 +35,20 @@
   parameter must also define the CSS_PROP_PUBLIC_OR_PRIVATE(publicname_,
   privatename_) macro to yield either publicname_ or privatename_.
   The names differ in that publicname_ has Moz prefixes where they are
   used, and also in CssFloat vs. Float.  The caller's choice depends on
   whether the use is for internal use such as eCSSProperty_* or
   nsRuleData::ValueFor* or external use such as exposing DOM properties.
 
   -. 'pref' is the name of a pref that controls whether the property
-  is enabled.  The property is enabled if 'pref' is an empty string,
-  or if the boolean property whose name is 'pref' is set to true.
+  is enabled.  If 'pref' is a non-empty string, then the property is
+  enabled if a boolean preference with that name exists and is true.
+  Otherwise is it enabled iff the CSS_PROPERTY_DISABLED_BY_DEFAULT
+  property flag is not set.
 
   -. 'flags', a bitfield containing CSS_PROPERTY_* flags.
 
   -. 'parsevariant', to be passed to ParseVariant in the parser.
 
   -. 'kwtable', which is either nullptr or the name of the appropriate
   keyword table member of class nsCSSProps, for use in
   nsCSSProps::LookupPropertyValue.
diff --git a/layout/style/nsCSSProps.cpp b/layout/style/nsCSSProps.cpp
--- a/layout/style/nsCSSProps.cpp
+++ b/layout/style/nsCSSProps.cpp
@@ -2707,22 +2707,22 @@ nsCSSProps::gPropertyIndexInStruct[eCSSP
   #undef CSS_PROP_BACKENDONLY
 
 };
 
 /* static */ bool
 nsCSSProps::gPropertyEnabled[eCSSProperty_COUNT_with_aliases] = {
   #define CSS_PROP(name_, id_, method_, flags_, pref_, parsevariant_,     \
                    kwtable_, stylestruct_, stylestructoffset_, animtype_) \
-    true,
+    !(pref_)[0] && !((flags_) & CSS_PROPERTY_DISABLED_BY_DEFAULT),
   #include "nsCSSPropList.h"
   #undef CSS_PROP
 
   #define  CSS_PROP_SHORTHAND(name_, id_, method_, flags_, pref_) \
-    true,
+    !(pref_)[0] && !((flags_) & CSS_PROPERTY_DISABLED_BY_DEFAULT),
   #include "nsCSSPropList.h"
   #undef CSS_PROP_SHORTHAND
 
   #define CSS_PROP_ALIAS(aliasname_, propid_, aliasmethod_, flags_, pref_) \
-    true,
+    !(pref_)[0] && !((flags_) & CSS_PROPERTY_DISABLED_BY_DEFAULT),
   #include "nsCSSPropAliasList.h"
   #undef CSS_PROP_ALIAS
 };
diff --git a/layout/style/nsCSSProps.h b/layout/style/nsCSSProps.h
--- a/layout/style/nsCSSProps.h
+++ b/layout/style/nsCSSProps.h
@@ -189,16 +189,22 @@ static_assert((CSS_PROPERTY_PARSE_PROPER
 
 // This property is allowed in an @page rule.
 #define CSS_PROPERTY_APPLIES_TO_PAGE_RULE         (1<<19)
 
 // This property's getComputedStyle implementation requires layout to be
 // flushed.
 #define CSS_PROPERTY_GETCS_NEEDS_LAYOUT_FLUSH     (1<<20)
 
+// This property is disabled by default (see also pref field in
+// nsCSSPropList.h and nsCSSPropAliasList.h).
+// WARNING:  The bindings generation code checks this value as a
+// *string*, after preprocessing nsCSSPropList.h into python!
+#define CSS_PROPERTY_DISABLED_BY_DEFAULT          (1<<21)
+
 /**
  * Types of animatable values.
  */
 enum nsStyleAnimType {
   // requires a custom implementation in
   // nsStyleAnimation::ExtractComputedValue
   eStyleAnimType_Custom,
 
