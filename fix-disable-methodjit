From: L. David Baron <dbaron@dbaron.org>

Fix --disable-methodjit bustage from changeset 9ca3d16d575c.

diff --git a/js/src/jsinfer.cpp b/js/src/jsinfer.cpp
--- a/js/src/jsinfer.cpp
+++ b/js/src/jsinfer.cpp
@@ -6020,30 +6020,30 @@ TypeScript::Sweep(JSContext *cx, JSScrip
      * If the script has nesting state with a most recent activation, we do not
      * need either to mark the call object or clear it if not live. Even with
      * a dead pointer in the nesting, we can't get a spurious match while
      * testing for reentrancy: if previous activations are still live, they
      * cannot alias the most recent one, and future activations will overwrite
      * activeCall on creation.
      */
 
+#ifdef JS_METHODJIT
     /*
      * Method JIT code depends on the type inference data which is about to
      * be purged, so purge the jitcode as well.
      */
-#ifdef JS_METHODJIT
     mjit::ReleaseScriptCode(cx, script);
-#endif
 
     /*
      * Use counts for scripts are reset on GC. After discarding code we need to
      * let it warm back up to get information like which opcodes are setting
      * array holes or accessing getter properties.
      */
     script->resetUseCount();
+#endif
 }
 
 void
 TypeScript::destroy()
 {
     while (dynamicList) {
         TypeResult *next = dynamicList->next;
         Foreground::delete_(dynamicList);
