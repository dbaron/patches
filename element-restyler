From: L. David Baron <dbaron@dbaron.org>

Add ElementRestyler class to begin refactoring ReResolveStyleContext.

diff --git a/layout/base/RestyleManager.cpp b/layout/base/RestyleManager.cpp
--- a/layout/base/RestyleManager.cpp
+++ b/layout/base/RestyleManager.cpp
@@ -2700,9 +2700,104 @@ RestyleManager::ComputeStyleChangeFor(ns
     }
 
     frame2 = static_cast<nsIFrame*>
       (propTable->Get(frame2, nsIFrame::IBSplitSpecialSibling()));
     frame = frame2;
   } while (frame2);
 }
 
+
+ElementRestyler::ElementRestyler(nsIFrame* aFrame, nsIContent* aParentContent,
+                                 TreeMatchContext& aTreeMatchContext,
+                                 nsRestyleHint aRestyleHint,
+                                 nsChangeHint aMinChange,
+                                 RestyleTracker& aRestyleTracker,
+                                 nsTArray<nsIContent*>&
+                                   aVisibleKidsOfHiddenElement,
+                                 nsStyleChangeList* aChangeList)
+  : mFrame(aFrame)
+  , mParentContent(aParentContent)
+  , mContent(...)
+  , mTreeMatchContext(aTreeMatchContext)
+  , mRestyleHint(aRestyleHint)
+  , mMinChange(aMinChange)
+  , mParentHintsNotHandledForDescendants(...)
+  , mHintsNotHandledForDescendants(...)
+  , mDesiredA11yNotifications(...)
+  , mKidsDesiredA11yNotifications(...)
+  , mVisibleKidsOfHiddenElement(...)
+{
+}
+
+ElementRestyler::ElementRestyler(const ElementRestyler& aParentRestyler,
+                                 nsIFrame* aFrame)
+  : mFrame(aFrame)
+  , mParentContent(aParentRestyler.mContent)
+  , mContent(...)
+  , mTreeMatchContext(aParentRestyler.mTreeMatchContext)
+  , mRestyleHint(aParentRestyler.mRestyleHint)
+  , mMinChange(aParentRestyler.mMinChange)
+  , mParentHintsNotHandledForDescendants(aParentRestyler.mHintsNotHandledForDescendants)
+  , mHintsNotHandledForDescendants(...)
+  , mDesiredA11yNotifications(aParentRestyler.mDesiredA11yNotifications)
+  , mKidsDesiredA11yNotifications(...)
+  , mVisibleKidsOfHiddenElement(aParentRestyler.mVisibleKidsOfHiddenElement)
+{
+}
+
+void
+ElementRestyler::Restyle()
+{
+  RestyleSelf();
+  RestyleChildren();
+}
+
+void
+ElementRestyler::RestyleSelf()
+{
+}
+
+void
+ElementRestyler::RestyleChildren()
+{
+  InitializeAccessibilityNotifications();
+  RestyleBeforeChild();
+  RestyleAfterChild();
+  RestyleContentChildren();
+  SendAccessibilityNotifications();
+}
+
+void
+ElementRestyler::CaptureChange(nsStyleContext* aOldContext,
+                               nsStyleContext* aNewContext,
+                               nsChangeHint aChangeToAssume)
+{
+}
+
+void
+ElementRestyler::RestyleBeforeChild()
+{
+}
+
+void
+ElementRestyler::RestyleAfterChild()
+{
+}
+
+void
+ElementRestyler::RestyleContentChildren()
+{
+}
+
+void
+ElementRestyler::InitializeAccessibilityNotifications()
+{
+}
+
+void
+ElementRestyler::SendAccessibilityNotifications()
+{
+}
+
+}
+
 } // namespace mozilla
diff --git a/layout/base/RestyleManager.h b/layout/base/RestyleManager.h
--- a/layout/base/RestyleManager.h
+++ b/layout/base/RestyleManager.h
@@ -21,17 +21,17 @@ class nsIFrame;
 struct TreeMatchContext;
 
 namespace mozilla {
 
 namespace dom {
   class Element;
 } // namespace dom
 
-class RestyleManager {
+class RestyleManager MOZ_FINAL {
 public:
   friend class ::nsRefreshDriver;
   friend class RestyleTracker;
 
   typedef mozilla::dom::Element Element;
 
   RestyleManager(nsPresContext* aPresContext);
 
@@ -186,22 +186,24 @@ public:
   }
 
   void FlushOverflowChangedTracker()
   {
     mOverflowChangedTracker.Flush();
   }
 
 private:
+  // FIXME: REMOVE THIS
   enum DesiredA11yNotifications {
     eSkipNotifications,
     eSendAllNotifications,
     eNotifyIfShown
   };
 
+  // FIXME: REMOVE THIS
   enum A11yNotificationType {
     eDontNotify,
     eNotifyShown,
     eNotifyHidden
   };
 
   // Use eRestyle_Self for the aRestyleHint argument to mean
   // "reresolve our style context but not kids", use eRestyle_Subtree
@@ -293,11 +295,87 @@ private:
   // The total number of animation flushes by this frame constructor.
   // Used to keep the layer and animation manager in sync.
   uint64_t mAnimationGeneration;
 
   RestyleTracker mPendingRestyles;
   RestyleTracker mPendingAnimationRestyles;
 };
 
+/**
+ * An ElementRestyler is created for *each* element in a subtree that we
+ * recompute styles for.
+ */
+class ElementRestyler MOZ_FINAL {
+public:
+  // Construct for the root of the subtree that we're restyling.
+  ElementRestyler(nsIFrame* aFrame, nsIContent* aParentContent,
+                  TreeMatchContext& aTreeMatchContext,
+                  nsRestyleHint aRestyleHint, nsChangeHint aMinChange,
+                  RestyleTracker& aRestyleTracker,
+                  nsTArray<nsIContent*>& aVisibleKidsOfHiddenElement,
+                  nsStyleChangeList* aChangeList);
+
+  // Construct for an element whose parent is being restyled.
+  ElementRestyler(const ElementRestyler& aParentRestyler, nsIFrame* aFrame);
+
+  /**
+   * Restyle our frame's element and its subtree.
+   */
+  void Restyle();
+
+private:
+  /**
+   * First half of Restyle().
+   */
+  void RestyleSelf();
+
+  /**
+   * Restyle the children of this frame (and, in turn, their children).
+   *
+   * Second half of Restyle().
+   */
+  void RestyleChildren();
+
+  /**
+   * Helpers for RestyleSelf().
+   */
+  void CaptureChange(nsStyleContext* aOldContext, nsStyleContext* aNewContext,
+                     nsChangeHint aChangeToAssume);
+
+  /**
+   * Helpers for RestyleChildren().
+   */
+  void RestyleBeforeChild();
+  void RestyleAfterChild();
+  void RestyleContentChildren();
+  void InitializeAccessibilityNotifications();
+  void SendAccessibilityNotifications();
+
+  enum DesiredA11yNotifications {
+    eSkipNotifications,
+    eSendAllNotifications,
+    eNotifyIfShown
+  };
+
+  enum A11yNotificationType {
+    eDontNotify,
+    eNotifyShown,
+    eNotifyHidden
+  };
+
+private:
+  nsIFrame* const mFrame;
+  nsIContent* const mParentContent;
+  nsIContent* const mContent;
+  TreeMatchContext& mTreeMatchContext;
+  nsRestyleHint const mRestyleHint;
+  nsChangeHint mMinChange;
+  nsChangeHint mParentHintsNotHandledForDescendants;
+  nsChangeHint mHintsNotHandledForDescendants;
+  DesiredA11yNotifications mDesiredA11yNotifications;
+  DesiredA11yNotifications mKidsDesiredA11yNotifications;
+  nsTArray<nsIContent*>& mVisibleKidsOfHiddenElement;
+};
+
 } // namespace mozilla
 
 #endif /* mozilla_RestyleManager_h */
