From: L. David Baron <dbaron@dbaron.org>

Pass nsCSSValue::URL objects through the style system so that we can send correct Referer headers.

diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -3801,17 +3801,17 @@ nsComputedDOMStyle::GetSVGPaintFor(PRBoo
 
     nsROCSSPrimitiveValue* fallback = GetROCSSPrimitiveValue();
     if (!fallback || !valueList->AppendCSSValue(fallback)) {
       delete valueList;
       delete fallback;
       return NS_ERROR_OUT_OF_MEMORY;
     }
 
-    val->SetURI(paint->mPaint.mPaintServer);
+    val->SetURI(paint->mPaint.mPaintServer->mURI);
     nsresult rv = SetToRGBAColor(fallback, paint->mFallbackColor);
     if (NS_FAILED(rv)) {
       delete valueList;
       return rv;
     }
 
     return CallQueryInterface(valueList, aValue);
   }
@@ -3836,49 +3836,49 @@ nsresult
 nsComputedDOMStyle::GetMarkerEnd(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVG* svg = GetStyleSVG();
 
   if (svg->mMarkerEnd)
-    val->SetURI(svg->mMarkerEnd);
+    val->SetURI(svg->mMarkerEnd->mURI);
   else
     val->SetIdent(eCSSKeyword_none);
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetMarkerMid(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVG* svg = GetStyleSVG();
 
   if (svg->mMarkerMid)
-    val->SetURI(svg->mMarkerMid);
+    val->SetURI(svg->mMarkerMid->mURI);
   else
     val->SetIdent(eCSSKeyword_none);
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetMarkerStart(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVG* svg = GetStyleSVG();
 
   if (svg->mMarkerStart)
-    val->SetURI(svg->mMarkerStart);
+    val->SetURI(svg->mMarkerStart->mURI);
   else
     val->SetIdent(eCSSKeyword_none);
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetStrokeDasharray(nsIDOMCSSValue** aValue)
@@ -4176,49 +4176,49 @@ nsresult
 nsComputedDOMStyle::GetClipPath(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVGReset* svg = GetStyleSVGReset();
 
   if (svg->mClipPath)
-    val->SetURI(svg->mClipPath);
+    val->SetURI(svg->mClipPath->mURI);
   else
     val->SetIdent(eCSSKeyword_none);
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetFilter(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVGReset* svg = GetStyleSVGReset();
 
   if (svg->mFilter)
-    val->SetURI(svg->mFilter);
+    val->SetURI(svg->mFilter->mURI);
   else
     val->SetIdent(eCSSKeyword_none);
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetMask(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStyleSVGReset* svg = GetStyleSVGReset();
 
   if (svg->mMask)
-    val->SetURI(svg->mMask);
+    val->SetURI(svg->mMask->mURI);
   else
     val->SetIdent(eCSSKeyword_none);
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetTransitionDelay(nsIDOMCSSValue** aValue)
diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -5729,18 +5729,18 @@ SetSVGPaint(const nsCSSValuePair& aValue
   } else if (aValue.mXValue.GetUnit() == eCSSUnit_None) {
     aResult.SetType(eStyleSVGPaintType_None);
   } else if (aValue.mXValue.GetUnit() == eCSSUnit_Initial) {
     aResult.SetType(aInitialPaintType);
     aResult.mPaint.mColor = NS_RGB(0, 0, 0);
     aResult.mFallbackColor = NS_RGB(0, 0, 0);
   } else if (aValue.mXValue.GetUnit() == eCSSUnit_URL) {
     aResult.SetType(eStyleSVGPaintType_Server);
-    aResult.mPaint.mPaintServer = aValue.mXValue.GetURLValue();
-    NS_IF_ADDREF(aResult.mPaint.mPaintServer);
+    aResult.mPaint.mPaintServer = aValue.mXValue.GetURLStructValue();
+    aResult.mPaint.mPaintServer->AddRef();
     if (aValue.mYValue.GetUnit() == eCSSUnit_None) {
       aResult.mFallbackColor = NS_RGBA(0, 0, 0, 0);
     } else {
       NS_ASSERTION(aValue.mYValue.GetUnit() != eCSSUnit_Inherit, "cannot inherit fallback colour");
       SetColor(aValue.mYValue, NS_RGB(0, 0, 0), aPresContext, aContext,
                aResult.mFallbackColor, aCanStoreInRuleTree);
     }
   } else if (SetColor(aValue.mXValue, parentPaint.mPaint.mColor, aPresContext,
@@ -5792,39 +5792,39 @@ nsRuleNode::ComputeSVGData(void* aStartS
 
   // image-rendering: enum, inherit
   SetDiscrete(SVGData.mImageRendering, svg->mImageRendering, canStoreInRuleTree,
               SETDSC_ENUMERATED, parentSVG->mImageRendering,
               NS_STYLE_IMAGE_RENDERING_AUTO, 0, 0, 0, 0);
 
   // marker-end: url, none, inherit
   if (eCSSUnit_URL == SVGData.mMarkerEnd.GetUnit()) {
-    svg->mMarkerEnd = SVGData.mMarkerEnd.GetURLValue();
+    svg->mMarkerEnd = SVGData.mMarkerEnd.GetURLStructValue();
   } else if (eCSSUnit_None == SVGData.mMarkerEnd.GetUnit() ||
              eCSSUnit_Initial == SVGData.mMarkerEnd.GetUnit()) {
     svg->mMarkerEnd = nsnull;
   } else if (eCSSUnit_Inherit == SVGData.mMarkerEnd.GetUnit()) {
     canStoreInRuleTree = PR_FALSE;
     svg->mMarkerEnd = parentSVG->mMarkerEnd;
   }
 
   // marker-mid: url, none, inherit
   if (eCSSUnit_URL == SVGData.mMarkerMid.GetUnit()) {
-    svg->mMarkerMid = SVGData.mMarkerMid.GetURLValue();
+    svg->mMarkerMid = SVGData.mMarkerMid.GetURLStructValue();
   } else if (eCSSUnit_None == SVGData.mMarkerMid.GetUnit() ||
              eCSSUnit_Initial == SVGData.mMarkerMid.GetUnit()) {
     svg->mMarkerMid = nsnull;
   } else if (eCSSUnit_Inherit == SVGData.mMarkerMid.GetUnit()) {
     canStoreInRuleTree = PR_FALSE;
     svg->mMarkerMid = parentSVG->mMarkerMid;
   }
 
   // marker-start: url, none, inherit
   if (eCSSUnit_URL == SVGData.mMarkerStart.GetUnit()) {
-    svg->mMarkerStart = SVGData.mMarkerStart.GetURLValue();
+    svg->mMarkerStart = SVGData.mMarkerStart.GetURLStructValue();
   } else if (eCSSUnit_None == SVGData.mMarkerStart.GetUnit() ||
              eCSSUnit_Initial == SVGData.mMarkerStart.GetUnit()) {
     svg->mMarkerStart = nsnull;
   } else if (eCSSUnit_Inherit == SVGData.mMarkerStart.GetUnit()) {
     canStoreInRuleTree = PR_FALSE;
     svg->mMarkerStart = parentSVG->mMarkerStart;
   }
 
@@ -5970,17 +5970,17 @@ nsRuleNode::ComputeSVGResetData(void* aS
   } else {
     SetColor(SVGData.mLightingColor, parentSVGReset->mLightingColor,
              mPresContext, aContext, svgReset->mLightingColor,
              canStoreInRuleTree);
   }
 
   // clip-path: url, none, inherit
   if (eCSSUnit_URL == SVGData.mClipPath.GetUnit()) {
-    svgReset->mClipPath = SVGData.mClipPath.GetURLValue();
+    svgReset->mClipPath = SVGData.mClipPath.GetURLStructValue();
   } else if (eCSSUnit_None == SVGData.mClipPath.GetUnit() ||
              eCSSUnit_Initial == SVGData.mClipPath.GetUnit()) {
     svgReset->mClipPath = nsnull;
   } else if (eCSSUnit_Inherit == SVGData.mClipPath.GetUnit()) {
     canStoreInRuleTree = PR_FALSE;
     svgReset->mClipPath = parentSVGReset->mClipPath;
   }
 
@@ -5995,28 +5995,28 @@ nsRuleNode::ComputeSVGResetData(void* aS
   // dominant-baseline: enum, inherit, initial
   SetDiscrete(SVGData.mDominantBaseline, svgReset->mDominantBaseline,
               canStoreInRuleTree, SETDSC_ENUMERATED,
               parentSVGReset->mDominantBaseline,
               NS_STYLE_DOMINANT_BASELINE_AUTO, 0, 0, 0, 0);
 
   // filter: url, none, inherit
   if (eCSSUnit_URL == SVGData.mFilter.GetUnit()) {
-    svgReset->mFilter = SVGData.mFilter.GetURLValue();
+    svgReset->mFilter = SVGData.mFilter.GetURLStructValue();
   } else if (eCSSUnit_None == SVGData.mFilter.GetUnit() ||
              eCSSUnit_Initial == SVGData.mFilter.GetUnit()) {
     svgReset->mFilter = nsnull;
   } else if (eCSSUnit_Inherit == SVGData.mFilter.GetUnit()) {
     canStoreInRuleTree = PR_FALSE;
     svgReset->mFilter = parentSVGReset->mFilter;
   }
 
   // mask: url, none, inherit
   if (eCSSUnit_URL == SVGData.mMask.GetUnit()) {
-    svgReset->mMask = SVGData.mMask.GetURLValue();
+    svgReset->mMask = SVGData.mMask.GetURLStructValue();
   } else if (eCSSUnit_None == SVGData.mMask.GetUnit() ||
              eCSSUnit_Initial == SVGData.mMask.GetUnit()) {
     svgReset->mMask = nsnull;
   } else if (eCSSUnit_Inherit == SVGData.mMask.GetUnit()) {
     canStoreInRuleTree = PR_FALSE;
     svgReset->mMask = parentSVGReset->mMask;
   }
 
diff --git a/layout/style/nsStyleStruct.cpp b/layout/style/nsStyleStruct.cpp
--- a/layout/style/nsStyleStruct.cpp
+++ b/layout/style/nsStyleStruct.cpp
@@ -1011,17 +1011,17 @@ nsChangeHint nsStyleSVGReset::MaxDiffere
                                        nsChangeHint_RepaintFrame);
 }
 #endif
 
 // nsStyleSVGPaint implementation
 nsStyleSVGPaint::~nsStyleSVGPaint()
 {
   if (mType == eStyleSVGPaintType_Server) {
-    NS_IF_RELEASE(mPaint.mPaintServer);
+    mPaint.mPaintServer->Release();
   }
 }
 
 void
 nsStyleSVGPaint::SetType(nsStyleSVGPaintType aType)
 {
   if (mType == eStyleSVGPaintType_Server) {
     this->~nsStyleSVGPaint();
@@ -1035,17 +1035,17 @@ nsStyleSVGPaint& nsStyleSVGPaint::operat
   if (this == &aOther)
     return *this;
 
   SetType(aOther.mType);
 
   mFallbackColor = aOther.mFallbackColor;
   if (mType == eStyleSVGPaintType_Server) {
     mPaint.mPaintServer = aOther.mPaint.mPaintServer;
-    NS_IF_ADDREF(mPaint.mPaintServer);
+    mPaint.mPaintServer->AddRef();
   } else {
     mPaint.mColor = aOther.mPaint.mColor;
   }
   return *this;
 }
 
 PRBool nsStyleSVGPaint::operator==(const nsStyleSVGPaint& aOther) const
 {
diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -57,17 +57,16 @@
 #include "nsStyleConsts.h"
 #include "nsChangeHint.h"
 #include "nsPresContext.h"
 #include "nsIPresShell.h"
 #include "nsCOMPtr.h"
 #include "nsCOMArray.h"
 #include "nsTArray.h"
 #include "nsIAtom.h"
-#include "nsIURI.h"
 #include "nsCSSValue.h"
 #include "nsStyleTransformMatrix.h"
 #include "nsAlgorithm.h"
 #include "imgIRequest.h"
 
 class nsIFrame;
 class imgIRequest;
 class imgIContainer;
@@ -1817,17 +1816,17 @@ enum nsStyleSVGPaintType {
   eStyleSVGPaintType_Color,
   eStyleSVGPaintType_Server
 };
 
 struct nsStyleSVGPaint
 {
   union {
     nscolor mColor;
-    nsIURI *mPaintServer;
+    nsCSSValue::URL *mPaintServer;
   } mPaint;
   nsStyleSVGPaintType mType;
   nscolor mFallbackColor;
 
   nsStyleSVGPaint() : mType(nsStyleSVGPaintType(0)) { mPaint.mPaintServer = nsnull; }
   ~nsStyleSVGPaint();
   void SetType(nsStyleSVGPaintType aType);
   nsStyleSVGPaint& operator=(const nsStyleSVGPaint& aOther);
@@ -1854,19 +1853,19 @@ struct nsStyleSVG {
   nsChangeHint CalcDifference(const nsStyleSVG& aOther) const;
 #ifdef DEBUG
   static nsChangeHint MaxDifference();
 #endif
   static PRBool ForceCompare() { return PR_FALSE; }
 
   nsStyleSVGPaint  mFill;             // [inherited]
   nsStyleSVGPaint  mStroke;           // [inherited]
-  nsCOMPtr<nsIURI> mMarkerEnd;        // [inherited]
-  nsCOMPtr<nsIURI> mMarkerMid;        // [inherited]
-  nsCOMPtr<nsIURI> mMarkerStart;      // [inherited]
+  nsRefPtr<nsCSSValue::URL> mMarkerEnd; // [inherited]
+  nsRefPtr<nsCSSValue::URL> mMarkerMid; // [inherited]
+  nsRefPtr<nsCSSValue::URL> mMarkerStart; // [inherited]
   nsStyleCoord    *mStrokeDasharray;  // [inherited] coord, percent, factor
 
   nsStyleCoord     mStrokeDashoffset; // [inherited] coord, percent, factor
   nsStyleCoord     mStrokeWidth;      // [inherited] coord, percent, factor
 
   float            mFillOpacity;      // [inherited]
   float            mStrokeMiterlimit; // [inherited]
   float            mStrokeOpacity;    // [inherited]
@@ -1898,19 +1897,19 @@ struct nsStyleSVGReset {
   }
 
   nsChangeHint CalcDifference(const nsStyleSVGReset& aOther) const;
 #ifdef DEBUG
   static nsChangeHint MaxDifference();
 #endif
   static PRBool ForceCompare() { return PR_FALSE; }
 
-  nsCOMPtr<nsIURI> mClipPath;         // [reset]
-  nsCOMPtr<nsIURI> mFilter;           // [reset]
-  nsCOMPtr<nsIURI> mMask;             // [reset]
+  nsRefPtr<nsCSSValue::URL> mClipPath;// [reset]
+  nsRefPtr<nsCSSValue::URL> mFilter;  // [reset]
+  nsRefPtr<nsCSSValue::URL> mMask;    // [reset]
   nscolor          mStopColor;        // [reset]
   nscolor          mFloodColor;       // [reset]
   nscolor          mLightingColor;    // [reset]
 
   float            mStopOpacity;      // [reset]
   float            mFloodOpacity;     // [reset]
 
   PRUint8          mDominantBaseline; // [reset] see nsStyleConsts.h
diff --git a/layout/svg/base/src/nsSVGEffects.cpp b/layout/svg/base/src/nsSVGEffects.cpp
--- a/layout/svg/base/src/nsSVGEffects.cpp
+++ b/layout/svg/base/src/nsSVGEffects.cpp
@@ -43,25 +43,26 @@
 #include "nsSVGClipPathFrame.h"
 #include "nsSVGMaskFrame.h"
 #include "nsSVGTextPathFrame.h"
 #include "nsCSSFrameConstructor.h"
 #include "nsFrameManager.h"
 
 NS_IMPL_ISUPPORTS1(nsSVGRenderingObserver, nsIMutationObserver)
 
-nsSVGRenderingObserver::nsSVGRenderingObserver(nsIURI *aURI,
+nsSVGRenderingObserver::nsSVGRenderingObserver(nsCSSValue::URL *aURI,
                                                nsIFrame *aFrame)
   : mElement(this), mFrame(aFrame),
     mFramePresShell(aFrame->PresContext()->PresShell()),
     mReferencedFrame(nsnull),
     mReferencedFramePresShell(nsnull)
 {
   // Start watching the target element
-  mElement.Reset(aFrame->GetContent(), aURI);
+  // FIXME: Should pass more information from nsCSSValue::URL.
+  mElement.Reset(aFrame->GetContent(), aURI ? aURI->mURI : nsnull);
   if (mElement.get()) {
     mElement.get()->AddMutationObserver(this);
   }
 }
 
 nsSVGRenderingObserver::~nsSVGRenderingObserver()
 {
   if (mElement.get()) {
@@ -259,34 +260,35 @@ nsSVGPaintingProperty::DoUpdate()
   if (mFrame->IsFrameOfType(nsIFrame::eSVG)) {
     nsSVGUtils::InvalidateCoveredRegion(mFrame);
   } else {
     InvalidateAllContinuations(mFrame);
   }
 }
 
 static nsSVGRenderingObserver *
-CreateFilterProperty(nsIURI *aURI, nsIFrame *aFrame)
+CreateFilterProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame)
 { return new nsSVGFilterProperty(aURI, aFrame); }
 
 static nsSVGRenderingObserver *
-CreateMarkerProperty(nsIURI *aURI, nsIFrame *aFrame)
+CreateMarkerProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame)
 { return new nsSVGMarkerProperty(aURI, aFrame); }
 
 static nsSVGRenderingObserver *
-CreateTextPathProperty(nsIURI *aURI, nsIFrame *aFrame)
+CreateTextPathProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame)
 { return new nsSVGTextPathProperty(aURI, aFrame); }
 
 static nsSVGRenderingObserver *
-CreatePaintingProperty(nsIURI *aURI, nsIFrame *aFrame)
+CreatePaintingProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame)
 { return new nsSVGPaintingProperty(aURI, aFrame); }
 
 static nsSVGRenderingObserver *
-GetEffectProperty(nsIURI *aURI, nsIFrame *aFrame, nsIAtom *aProp,
-                  nsSVGRenderingObserver * (* aCreate)(nsIURI *, nsIFrame *))
+GetEffectProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame, nsIAtom *aProp,
+                  nsSVGRenderingObserver * (* aCreate)(nsCSSValue::URL *,
+                                                       nsIFrame *))
 {
   if (!aURI)
     return nsnull;
   nsSVGRenderingObserver *prop =
     static_cast<nsSVGRenderingObserver*>(aFrame->GetProperty(aProp));
   if (prop)
     return prop;
   prop = aCreate(aURI, aFrame);
@@ -295,31 +297,34 @@ GetEffectProperty(nsIURI *aURI, nsIFrame
   NS_ADDREF(prop);
   aFrame->SetProperty(aProp,
                       static_cast<nsISupports*>(prop),
                       nsPropertyTable::SupportsDtorFunc);
   return prop;
 }
 
 nsSVGMarkerProperty *
-nsSVGEffects::GetMarkerProperty(nsIURI *aURI, nsIFrame *aFrame, nsIAtom *aProp)
+nsSVGEffects::GetMarkerProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame,
+                                nsIAtom *aProp)
 {
   return static_cast<nsSVGMarkerProperty*>(
           GetEffectProperty(aURI, aFrame, aProp, CreateMarkerProperty));
 }
 
 nsSVGTextPathProperty *
-nsSVGEffects::GetTextPathProperty(nsIURI *aURI, nsIFrame *aFrame, nsIAtom *aProp)
+nsSVGEffects::GetTextPathProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame,
+                                  nsIAtom *aProp)
 {
   return static_cast<nsSVGTextPathProperty*>(
           GetEffectProperty(aURI, aFrame, aProp, CreateTextPathProperty));
 }
 
 nsSVGPaintingProperty *
-nsSVGEffects::GetPaintingProperty(nsIURI *aURI, nsIFrame *aFrame, nsIAtom *aProp)
+nsSVGEffects::GetPaintingProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame,
+                                  nsIAtom *aProp)
 {
   return static_cast<nsSVGPaintingProperty*>(
           GetEffectProperty(aURI, aFrame, aProp, CreatePaintingProperty));
 }
 
 nsSVGEffects::EffectProperties
 nsSVGEffects::GetEffectProperties(nsIFrame *aFrame)
 {
diff --git a/layout/svg/base/src/nsSVGEffects.h b/layout/svg/base/src/nsSVGEffects.h
--- a/layout/svg/base/src/nsSVGEffects.h
+++ b/layout/svg/base/src/nsSVGEffects.h
@@ -39,16 +39,17 @@
 #define NSSVGEFFECTS_H_
 
 #include "nsIContent.h"
 #include "nsIFrame.h"
 #include "nsReferencedElement.h"
 #include "nsStubMutationObserver.h"
 #include "nsSVGUtils.h"
 #include "nsTHashtable.h"
+#include "nsCSSValue.h"
 
 class nsSVGClipPathFrame;
 class nsSVGFilterFrame;
 class nsSVGMaskFrame;
 
 /*
  * SVG elements reference supporting resources by element ID. We need to
  * track when those resources change and when the DOM changes in ways
@@ -56,17 +57,17 @@ class nsSVGMaskFrame;
  * element IDs change). The code here is responsible for that.
  * 
  * When a frame references a supporting resource, we create a property
  * object derived from nsSVGRenderingObserver to manage the relationship. The
  * property object is attached to the referencing frame.
  */
 class nsSVGRenderingObserver : public nsStubMutationObserver {
 public:
-  nsSVGRenderingObserver(nsIURI* aURI, nsIFrame *aFrame);
+  nsSVGRenderingObserver(nsCSSValue::URL* aURI, nsIFrame *aFrame);
   virtual ~nsSVGRenderingObserver();
 
   // nsISupports
   NS_DECL_ISUPPORTS
 
   // nsIMutationObserver
   NS_DECL_NSIMUTATIONOBSERVER_ATTRIBUTECHANGED
   NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED
@@ -120,17 +121,17 @@ protected:
   nsIPresShell *mFramePresShell;
   nsIFrame *mReferencedFrame;
   nsIPresShell *mReferencedFramePresShell;
 };
 
 class nsSVGFilterProperty :
   public nsSVGRenderingObserver, public nsISVGFilterProperty {
 public:
-  nsSVGFilterProperty(nsIURI *aURI, nsIFrame *aFilteredFrame)
+  nsSVGFilterProperty(nsCSSValue::URL *aURI, nsIFrame *aFilteredFrame)
     : nsSVGRenderingObserver(aURI, aFilteredFrame) {}
 
   /**
    * @return the filter frame, or null if there is no filter frame
    */
   nsSVGFilterFrame *GetFilterFrame();
 
   // nsISupports
@@ -141,35 +142,35 @@ public:
 
 private:
   // nsSVGRenderingObserver
   virtual void DoUpdate();
 };
 
 class nsSVGMarkerProperty : public nsSVGRenderingObserver {
 public:
-  nsSVGMarkerProperty(nsIURI *aURI, nsIFrame *aFrame)
+  nsSVGMarkerProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame)
     : nsSVGRenderingObserver(aURI, aFrame) {}
 
 protected:
   virtual void DoUpdate();
 };
 
 class nsSVGTextPathProperty : public nsSVGRenderingObserver {
 public:
-  nsSVGTextPathProperty(nsIURI *aURI, nsIFrame *aFrame)
+  nsSVGTextPathProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame)
     : nsSVGRenderingObserver(aURI, aFrame) {}
 
 protected:
   virtual void DoUpdate();
 };
  
 class nsSVGPaintingProperty : public nsSVGRenderingObserver {
 public:
-  nsSVGPaintingProperty(nsIURI *aURI, nsIFrame *aFrame)
+  nsSVGPaintingProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame)
     : nsSVGRenderingObserver(aURI, aFrame) {}
 
 protected:
   virtual void DoUpdate();
 };
 
 /**
  * A manager for one-shot nsSVGRenderingObserver tracking.
@@ -282,22 +283,22 @@ public:
    * of this frame are all invalidated.
    */
   static void InvalidateDirectRenderingObservers(nsIFrame *aFrame);
 
   /**
    * Get an nsSVGMarkerProperty for the frame, creating a fresh one if necessary
    */
   static nsSVGMarkerProperty *
-  GetMarkerProperty(nsIURI *aURI, nsIFrame *aFrame, nsIAtom *aProp);
+  GetMarkerProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame, nsIAtom *aProp);
   /**
    * Get an nsSVGTextPathProperty for the frame, creating a fresh one if necessary
    */
   static nsSVGTextPathProperty *
-  GetTextPathProperty(nsIURI *aURI, nsIFrame *aFrame, nsIAtom *aProp);
+  GetTextPathProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame, nsIAtom *aProp);
   /**
    * Get an nsSVGPaintingProperty for the frame, creating a fresh one if necessary
    */
   static nsSVGPaintingProperty *
-  GetPaintingProperty(nsIURI *aURI, nsIFrame *aFrame, nsIAtom *aProp);
+  GetPaintingProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame, nsIAtom *aProp);
 };
 
 #endif /*NSSVGEFFECTS_H_*/
diff --git a/layout/svg/base/src/nsSVGGradientFrame.cpp b/layout/svg/base/src/nsSVGGradientFrame.cpp
--- a/layout/svg/base/src/nsSVGGradientFrame.cpp
+++ b/layout/svg/base/src/nsSVGGradientFrame.cpp
@@ -281,20 +281,26 @@ nsSVGGradientFrame::GetReferencedGradien
     if (href.IsEmpty()) {
       mNoHRefURI = PR_TRUE;
       return nsnull; // no URL
     }
 
     // Convert href to an nsIURI
     nsCOMPtr<nsIURI> targetURI;
     nsCOMPtr<nsIURI> base = mContent->GetBaseURI();
+    nsIDocument *doc = mContent->GetOwnerDoc(); // REVIEW: was GetCurrentDoc
     nsContentUtils::NewURIWithDocumentCharset(getter_AddRefs(targetURI), href,
-                                              mContent->GetCurrentDoc(), base);
+                                              doc, base);
+    nsRefPtr<nsCSSValue::URL> url =
+      new nsCSSValue::URL(targetURI,
+                          nsCSSValue::BufferFromString(href),
+                          doc->GetDocumentURI(),
+                          mContent->NodePrincipal());
 
-    property = nsSVGEffects::GetPaintingProperty(targetURI, this, nsGkAtoms::href);
+    property = nsSVGEffects::GetPaintingProperty(url, this, nsGkAtoms::href);
     if (!property)
       return nsnull;
   }
 
   nsIFrame *result = property->GetReferencedFrame();
   if (!result)
     return nsnull;
 
diff --git a/layout/svg/base/src/nsSVGPatternFrame.cpp b/layout/svg/base/src/nsSVGPatternFrame.cpp
--- a/layout/svg/base/src/nsSVGPatternFrame.cpp
+++ b/layout/svg/base/src/nsSVGPatternFrame.cpp
@@ -430,20 +430,26 @@ nsSVGPatternFrame::GetReferencedPattern(
     if (href.IsEmpty()) {
       mNoHRefURI = PR_TRUE;
       return nsnull; // no URL
     }
 
     // Convert href to an nsIURI
     nsCOMPtr<nsIURI> targetURI;
     nsCOMPtr<nsIURI> base = mContent->GetBaseURI();
+    nsIDocument *doc = mContent->GetOwnerDoc(); // REVIEW: was GetCurrentDoc
     nsContentUtils::NewURIWithDocumentCharset(getter_AddRefs(targetURI), href,
-                                              mContent->GetCurrentDoc(), base);
+                                              doc, base);
+    nsRefPtr<nsCSSValue::URL> url =
+      new nsCSSValue::URL(targetURI,
+                          nsCSSValue::BufferFromString(href),
+                          doc->GetDocumentURI(),
+                          mContent->NodePrincipal());
 
-    property = nsSVGEffects::GetPaintingProperty(targetURI, this, nsGkAtoms::href);
+    property = nsSVGEffects::GetPaintingProperty(url, this, nsGkAtoms::href);
     if (!property)
       return nsnull;
   }
 
   nsIFrame *result = property->GetReferencedFrame();
   if (!result)
     return nsnull;
 
diff --git a/layout/svg/base/src/nsSVGTextPathFrame.cpp b/layout/svg/base/src/nsSVGTextPathFrame.cpp
--- a/layout/svg/base/src/nsSVGTextPathFrame.cpp
+++ b/layout/svg/base/src/nsSVGTextPathFrame.cpp
@@ -122,21 +122,26 @@ nsSVGTextPathFrame::GetPathFrame()
     nsAutoString href;
     tp->mStringAttributes[nsSVGTextPathElement::HREF].GetAnimValue(href, tp);
     if (href.IsEmpty()) {
       return nsnull; // no URL
     }
 
     nsCOMPtr<nsIURI> targetURI;
     nsCOMPtr<nsIURI> base = mContent->GetBaseURI();
+    nsIDocument *doc = mContent->GetOwnerDoc(); // REVIEW: was GetCurrentDoc
     nsContentUtils::NewURIWithDocumentCharset(getter_AddRefs(targetURI), href,
-                                              mContent->GetCurrentDoc(), base);
+                                              doc, base);
+    nsRefPtr<nsCSSValue::URL> url =
+      new nsCSSValue::URL(targetURI,
+                          nsCSSValue::BufferFromString(href),
+                          doc->GetDocumentURI(),
+                          mContent->NodePrincipal());
 
-    property = nsSVGEffects::GetTextPathProperty(
-                               targetURI, this, nsGkAtoms::href);
+    property = nsSVGEffects::GetTextPathProperty(url, this, nsGkAtoms::href);
     if (!property)
       return nsnull;
   }
 
   nsIFrame *result = property->GetReferencedFrame();
   if (!result || result->GetType() != nsGkAtoms::svgPathGeometryFrame)
     return nsnull;
 
