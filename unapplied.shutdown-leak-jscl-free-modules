From: L. David Baron <dbaron@dbaron.org>

Don't leak the modules in the JS component loader.

diff --git a/js/xpconnect/loader/mozJSComponentLoader.cpp b/js/xpconnect/loader/mozJSComponentLoader.cpp
--- a/js/xpconnect/loader/mozJSComponentLoader.cpp
+++ b/js/xpconnect/loader/mozJSComponentLoader.cpp
@@ -959,23 +959,16 @@ mozJSComponentLoader::ObjectForLocation(
         aObject.set(nullptr);
         aTableScript.set(nullptr);
         return NS_ERROR_OUT_OF_MEMORY;
     }
 
     return NS_OK;
 }
 
-/* static */ PLDHashOperator
-mozJSComponentLoader::ClearModules(const nsACString& key, ModuleEntry*& entry, void* cx)
-{
-    entry->Clear();
-    return PL_DHASH_REMOVE;
-}
-
 void
 mozJSComponentLoader::UnloadModules()
 {
     mInitialized = false;
 
     if (mLoaderGlobal) {
         MOZ_ASSERT(mReuseLoaderGlobal, "How did this happen?");
 
@@ -995,17 +988,17 @@ mozJSComponentLoader::UnloadModules()
         }
 
         mLoaderGlobal = nullptr;
     }
 
     mInProgressImports.Clear();
     mImports.Clear();
 
-    mModules.Enumerate(ClearModules, nullptr);
+    mModules.Clear();
 }
 
 NS_IMETHODIMP
 mozJSComponentLoader::Import(const nsACString& registryLocation,
                              HandleValue targetValArg,
                              JSContext* cx,
                              uint8_t optionalArgc,
                              MutableHandleValue retval)
diff --git a/js/xpconnect/loader/mozJSComponentLoader.h b/js/xpconnect/loader/mozJSComponentLoader.h
--- a/js/xpconnect/loader/mozJSComponentLoader.h
+++ b/js/xpconnect/loader/mozJSComponentLoader.h
@@ -142,19 +142,17 @@ class mozJSComponentLoader : public mozi
     friend class ModuleEntry;
 
     static size_t DataEntrySizeOfExcludingThis(const nsACString& aKey, ModuleEntry* const& aData,
                                                mozilla::MallocSizeOf aMallocSizeOf, void* arg);
     static size_t ClassEntrySizeOfExcludingThis(const nsACString& aKey,
                                                 const nsAutoPtr<ModuleEntry>& aData,
                                                 mozilla::MallocSizeOf aMallocSizeOf, void* arg);
 
-    // Modules are intentionally leaked, but still cleared.
-    static PLDHashOperator ClearModules(const nsACString& key, ModuleEntry*& entry, void* cx);
-    nsDataHashtable<nsCStringHashKey, ModuleEntry*> mModules;
+    nsClassHashtable<nsCStringHashKey, ModuleEntry> mModules;
 
     nsClassHashtable<nsCStringHashKey, ModuleEntry> mImports;
     nsDataHashtable<nsCStringHashKey, ModuleEntry*> mInProgressImports;
 
     bool mInitialized;
     bool mReuseLoaderGlobal;
 };
 
