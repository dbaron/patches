From: L. David Baron <dbaron@dbaron.org>

Bug 992077 patch 4 - Stop using OverflowChangedTracker::CHILDREN_AND_PARENT_CHANGED for the overflow area updates dealing with absolutely positioned elements contained by relatively positioned table parts.  r=mats

The old code here was also updating overflow areas on more frames than
needed.  (Using CHILDREN_CHANGED on positionedPart itself causes test
failures because positionedPart's overflow area doesn't change in the
overflow updating process, so no overflow change is propagated to the
parent; it's the parent that actually needs the update.)

diff --git a/layout/tables/nsTableFrame.cpp b/layout/tables/nsTableFrame.cpp
--- a/layout/tables/nsTableFrame.cpp
+++ b/layout/tables/nsTableFrame.cpp
@@ -1946,24 +1946,31 @@ nsTableFrame::FixupPositionedTableParts(
                                   aReflowState.rendContext, availSize,
                                   nsHTMLReflowState::DUMMY_PARENT_REFLOW_STATE);
     nsReflowStatus reflowStatus = NS_FRAME_COMPLETE;
 
     // Reflow absolutely-positioned descendants of the positioned part.
     // FIXME: Unconditionally using NS_UNCONSTRAINEDSIZE for the height and
     // ignoring any change to the reflow status aren't correct. We'll never
     // paginate absolutely positioned frames.
-    overflowTracker.AddFrame(positionedPart,
-      OverflowChangedTracker::CHILDREN_AND_PARENT_CHANGED);
     nsFrame* positionedFrame = static_cast<nsFrame*>(positionedPart);
     positionedFrame->FinishReflowWithAbsoluteFrames(PresContext(),
                                                     desiredSize,
                                                     reflowState,
                                                     reflowStatus,
                                                     true);
+
+    // FinishReflowWithAbsoluteFrames has updated overflow on
+    // |positionedPart|.  We need to make sure that update propagates
+    // through the intermediate frames between it and this frame.
+    nsIFrame* positionedFrameParent = positionedPart->GetParent();
+    if (positionedFrameParent != this) {
+      overflowTracker.AddFrame(positionedFrameParent,
+        OverflowChangedTracker::CHILDREN_CHANGED);
+    }
   }
 
   // Propagate updated overflow areas up the tree.
   overflowTracker.Flush();
 
   // Update our own overflow areas. (OverflowChangedTracker doesn't update the
   // subtree root itself.)
   aDesiredSize.SetOverflowAreasToDesiredBounds();
