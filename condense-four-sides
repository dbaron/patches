Condense box property four side shorthands in value getters, just as in serialization.  (Bug 376075)
diff --git a/layout/style/nsCSSDeclaration.cpp b/layout/style/nsCSSDeclaration.cpp
--- a/layout/style/nsCSSDeclaration.cpp
+++ b/layout/style/nsCSSDeclaration.cpp
@@ -643,24 +643,47 @@ nsCSSDeclaration::GetValue(nsCSSProperty
     case eCSSProperty_border_width: {
       const nsCSSProperty* subprops =
         nsCSSProps::SubpropertyEntryFor(aProperty);
       NS_ASSERTION(nsCSSProps::kTypeTable[subprops[0]] == eCSSType_Value &&
                    nsCSSProps::kTypeTable[subprops[1]] == eCSSType_Value &&
                    nsCSSProps::kTypeTable[subprops[2]] == eCSSType_Value &&
                    nsCSSProps::kTypeTable[subprops[3]] == eCSSType_Value,
                    "type mismatch");
-      if (!AppendValueToString(subprops[0], aValue) ||
-          !(aValue.Append(PRUnichar(' ')),
-            AppendValueToString(subprops[1], aValue)) ||
-          !(aValue.Append(PRUnichar(' ')),
-            AppendValueToString(subprops[2], aValue)) ||
-          !(aValue.Append(PRUnichar(' ')),
-            AppendValueToString(subprops[3], aValue))) {
-        aValue.Truncate();
+      NS_ASSERTION(nsCSSProps::GetStringValue(subprops[0]).Find("-top") !=
+                     kNotFound, "first subprop must be top");
+      NS_ASSERTION(nsCSSProps::GetStringValue(subprops[1]).Find("-right") !=
+                     kNotFound, "second subprop must be right");
+      NS_ASSERTION(nsCSSProps::GetStringValue(subprops[2]).Find("-bottom") !=
+                     kNotFound, "third subprop must be bottom");
+      NS_ASSERTION(nsCSSProps::GetStringValue(subprops[3]).Find("-left") !=
+                     kNotFound, "fourth subprop must be left");
+      nsCSSValue topValue, rightValue, bottomValue, leftValue;
+      GetValueOrImportantValue(subprops[0], topValue);
+      GetValueOrImportantValue(subprops[1], rightValue);
+      GetValueOrImportantValue(subprops[2], bottomValue);
+      GetValueOrImportantValue(subprops[3], leftValue);
+      PRBool haveValue;
+      haveValue = AppendCSSValueToString(subprops[0], topValue, aString);
+      NS_ASSERTION(haveValue, "should have bailed before");
+      if (topValue != rightValue || topValue != leftValue ||
+          topValue != bottomValue) {
+        aString.Append(PRUnichar(' '));
+        haveValue = AppendCSSValueToString(subprops[1], rightValue, aString);
+        NS_ASSERTION(haveValue, "should have bailed before");
+        if (topValue != bottomValue || rightValue != leftValue) {
+          aString.Append(PRUnichar(' '));
+          haveValue = AppendCSSValueToString(subprops[2], bottomValue, aString);
+          NS_ASSERTION(haveValue, "should have bailed before");
+          if (rightValue != leftValue) {
+            aString.Append(PRUnichar(' '));
+            haveValue = AppendCSSValueToString(subprops[3], leftValue, aString);
+            NS_ASSERTION(haveValue, "should have bailed before");
+          }
+        }
       }
       break;
     }
     case eCSSProperty__moz_border_radius: 
     case eCSSProperty__moz_outline_radius: {
       const nsCSSProperty* subprops =
         nsCSSProps::SubpropertyEntryFor(aProperty);
       NS_ASSERTION(nsCSSProps::kTypeTable[subprops[0]] == eCSSType_ValuePair &&
@@ -935,17 +958,17 @@ nsCSSDeclaration::GetValue(nsCSSProperty
         aValue.Append(PRUnichar(' '));
       AppendValueToString(eCSSProperty_list_style_image, aValue);
       break;
     case eCSSProperty_overflow: {
       nsCSSValue xValue, yValue;
       GetValueOrImportantValue(eCSSProperty_overflow_x, xValue);
       GetValueOrImportantValue(eCSSProperty_overflow_y, yValue);
       if (xValue == yValue)
-        AppendValueToString(eCSSProperty_overflow_x, aValue);
+        AppendCSSValueToString(eCSSProperty_overflow_x, xValue, aValue);
       break;
     }
     case eCSSProperty_pause: {
       if (AppendValueToString(eCSSProperty_pause_before, aValue)) {
         aValue.Append(PRUnichar(' '));
         if (!AppendValueToString(eCSSProperty_pause_after, aValue))
           aValue.Truncate();
       }
diff --git a/layout/style/test/test_shorthand_property_getters.html b/layout/style/test/test_shorthand_property_getters.html
--- a/layout/style/test/test_shorthand_property_getters.html
+++ b/layout/style/test/test_shorthand_property_getters.html
@@ -59,13 +59,38 @@ ok(e.style.borderRight == "medium solid"
    "implied default color omitted serializing border-right");
 ok(e.style.borderRight == "medium solid" ||
    e.style.borderRight == "solid medium",
    "implied default color omitted serializing border-right");
 ok(e.style.cssText == "border: medium solid" ||
    e.style.cssText == "border: solid medium",
    "implied default color omitted serializing declaration");
 
+// Test that we shorten box properties to the shortest possible.
+e.setAttribute("style", "margin: 7px");
+is(e.style.margin, "7px", "should condense to shortest possible");
+is(e.style.cssText, "margin: 7px", "should condense to shortest possible");
+e.setAttribute("style", "padding: 7px 7px 7px");
+is(e.style.padding, "7px", "should condense to shortest possible");
+is(e.style.cssText, "padding: 7px", "should condense to shortest possible");
+e.setAttribute("style", "border-width: 7px 7px 7px 7px");
+is(e.style.borderWidth, "7px", "should condense to shortest possible");
+is(e.style.cssText, "border-width: 7px", "should condense to shortest possible");
+e.setAttribute("style", "margin: 7px 7px 7px 6px");
+is(e.style.margin, "7px 7px 7px 6px", "should not condense");
+is(e.style.cssText, "margin: 7px 7px 7px 6px", "should not condense");
+e.setAttribute("style", "border-style: solid dotted none dotted");
+is(e.style.borderStyle, "solid dotted none", "should condense");
+is(e.style.cssText, "border-style: solid dotted none", "should condense");
+e.setAttribute("style", "border-color: green blue");
+is(e.style.borderColor, "green blue", "should condense");
+is(e.style.cssText, "border-color: green blue", "should condense");
+e.setAttribute("style", "border-color: green blue green");
+is(e.style.borderColor, "green blue", "should condense");
+is(e.style.cssText, "border-color: green blue", "should condense");
+e.setAttribute("style", "border-color: green blue green blue");
+is(e.style.borderColor, "green blue", "should condense");
+is(e.style.cssText, "border-color: green blue", "should condense");
 
 </script>
 </pre>
 </body>
 </html>
diff --git a/layout/style/test/test_value_storage.html b/layout/style/test/test_value_storage.html
--- a/layout/style/test/test_value_storage.html
+++ b/layout/style/test/test_value_storage.html
@@ -71,21 +71,16 @@ var gSystemFont = {
   "status-bar": true,
 };
 
 var gBadCompute = {
   // output wrapped around to positive, in exponential notation
   "-moz-box-ordinal-group": [ "-1", "-1000" ],
 };
 
-var gShortenableValues = {
-  "border-color": [ "currentColor currentColor currentcolor CURRENTcolor" ],
-  "border-style": [ "none none none none", "groove none none none", "none none double none" ],
-};
-
 function xfail_accepted(property, value)
 {
   if (property in gNotAccepted &&
       gNotAccepted[property].indexOf(value) != -1)
     return true;
 
   return false;
 }
@@ -104,25 +99,16 @@ function xfail_ser_val(property, value)
   if (property != "font" && xfail_accepted(property, value))
     // We already failed the first test, which will make us always pass this
     // one.
     return false;
 
   if (property in gShorthandsWithoutCondensingSerialize)
     return true;
 
-  // We condense multiple values in the serialization, but not in the
-  // value getter.
-  if (property.match(/^(border-(color|style|width)|margin|padding)$/) &&
-      value.split(" ").length != 4)
-    return true;
-  if (property in gShortenableValues &&
-      gShortenableValues[property].indexOf(value) != -1)
-    return true;
-
   return false;
 }
 
 function xfail_idparseser(property, value)
 {
   if (property != "font" && xfail_accepted(property, value))
     // We already failed the first test, which will make us always pass this
     // one.
