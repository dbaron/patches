From: L. David Baron <dbaron@dbaron.org>

Use GatherURL in ParseNameSpaceRule and ParseImageRect, and rename GatherURL to ParseURLOrString for clarity.  (Bug 604179, patch 1)  r=bzbarsky

Note that this adds a missing UngetToken(), which affects the other
consumer of GatherURL, parsing of @import rules.

diff --git a/layout/reftests/css-parsing/at-rule-error-handling-import-1.html b/layout/reftests/css-parsing/at-rule-error-handling-import-1.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/css-parsing/at-rule-error-handling-import-1.html
@@ -0,0 +1,5 @@
+<!DOCTYPE HTML>
+<title>Test for unexpected end of @import</title>
+<style>div { color: red }</style>
+<style>@import ; div { color: green; }</style>
+<div>This should be green</div>
diff --git a/layout/reftests/css-parsing/at-rule-error-handling-media-1.html b/layout/reftests/css-parsing/at-rule-error-handling-media-1.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/css-parsing/at-rule-error-handling-media-1.html
@@ -0,0 +1,5 @@
+<!DOCTYPE HTML>
+<title>Test for unexpected end of @import</title>
+<style>div { color: red }</style>
+<style>@media ; div { color: green; }</style>
+<div>This should be green</div>
diff --git a/layout/reftests/css-parsing/at-rule-error-handling-ref.html b/layout/reftests/css-parsing/at-rule-error-handling-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/css-parsing/at-rule-error-handling-ref.html
@@ -0,0 +1,3 @@
+<!DOCTYPE HTML>
+<title>Test for unexpected end of @import (reference)</title>
+<div style="color: green">This should be green</div>
diff --git a/layout/reftests/css-parsing/reftest.list b/layout/reftests/css-parsing/reftest.list
--- a/layout/reftests/css-parsing/reftest.list
+++ b/layout/reftests/css-parsing/reftest.list
@@ -1,4 +1,6 @@
 == at-rule-013.html at-rule-013-ref.html
 == invalid-url-handling.xhtml invalid-url-handling-ref.xhtml
 == pseudo-elements-1.html pseudo-elements-1-ref.html
 == invalid-attr-1.html invalid-attr-1-ref.html
+== at-rule-error-handling-import-1.html at-rule-error-handling-ref.html
+== at-rule-error-handling-media-1.html at-rule-error-handling-ref.html
diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -327,17 +327,17 @@ protected:
   PRBool PushGroup(nsICSSGroupRule* aRule);
   void PopGroup(void);
 
   PRBool ParseRuleSet(RuleAppendFunc aAppendFunc, void* aProcessData,
                       PRBool aInsideBraces = PR_FALSE);
   PRBool ParseAtRule(RuleAppendFunc aAppendFunc, void* aProcessData);
   PRBool ParseCharsetRule(RuleAppendFunc aAppendFunc, void* aProcessData);
   PRBool ParseImportRule(RuleAppendFunc aAppendFunc, void* aProcessData);
-  PRBool GatherURL(nsString& aURL);
+  PRBool ParseURLOrString(nsString& aURL);
   PRBool GatherMedia(nsMediaList* aMedia,
                      PRBool aInAtRule);
   PRBool ParseMediaQuery(PRBool aInAtRule, nsMediaQuery **aQuery,
                          PRBool *aParsedSomething, PRBool *aHitStop);
   PRBool ParseMediaQueryExpression(nsMediaQuery* aQuery);
   void ProcessImport(const nsString& aURLSpec,
                      nsMediaList* aMedia,
                      RuleAppendFunc aAppendFunc,
@@ -1566,30 +1566,31 @@ CSSParserImpl::ParseCharsetRule(RuleAppe
   if (rule) {
     (*aAppendFunc)(rule, aData);
   }
 
   return PR_TRUE;
 }
 
 PRBool
-CSSParserImpl::GatherURL(nsString& aURL)
+CSSParserImpl::ParseURLOrString(nsString& aURL)
 {
   if (!GetToken(PR_TRUE)) {
     return PR_FALSE;
   }
   if (eCSSToken_String == mToken.mType) {
     aURL = mToken.mIdent;
     return PR_TRUE;
   }
   else if (eCSSToken_Function == mToken.mType &&
            mToken.mIdent.LowerCaseEqualsLiteral("url") &&
            GetURLInParens(aURL)) {
     return PR_TRUE;
   }
+  UngetToken();
   return PR_FALSE;
 }
 
 PRBool
 CSSParserImpl::ParseMediaQuery(PRBool aInAtRule,
                                nsMediaQuery **aQuery,
                                PRBool *aParsedSomething,
                                PRBool *aHitStop)
@@ -1899,17 +1900,17 @@ CSSParserImpl::ParseImportRule(RuleAppen
 {
   nsRefPtr<nsMediaList> media = new nsMediaList();
   if (!media) {
     mScanner.SetLowLevelError(NS_ERROR_OUT_OF_MEMORY);
     return PR_FALSE;
   }
 
   nsAutoString url;
-  if (!GatherURL(url)) {
+  if (!ParseURLOrString(url)) {
     REPORT_UNEXPECTED_TOKEN(PEImportNotURI);
     return PR_FALSE;
   }
 
   if (!ExpectSymbol(';', PR_TRUE)) {
     if (!GatherMedia(media, PR_TRUE) ||
         !ExpectSymbol(';', PR_TRUE)) {
       REPORT_UNEXPECTED_TOKEN(PEImportUnexpected);
@@ -2100,43 +2101,31 @@ CSSParserImpl::ParseNameSpaceRule(RuleAp
   }
 
   nsAutoString  prefix;
   nsAutoString  url;
 
   if (eCSSToken_Ident == mToken.mType) {
     prefix = mToken.mIdent;
     // user-specified identifiers are case-sensitive (bug 416106)
-    if (! GetToken(PR_TRUE)) {
+  } else {
+    UngetToken();
+  }
+
+  if (!ParseURLOrString(url) || !ExpectSymbol(';', PR_TRUE)) {
+    if (mHavePushBack) {
+      REPORT_UNEXPECTED_TOKEN(PEAtNSUnexpected);
+    } else {
       REPORT_UNEXPECTED_EOF(PEAtNSURIEOF);
-      return PR_FALSE;
-    }
-  }
-
-  if (eCSSToken_String == mToken.mType) {
-    url = mToken.mIdent;
-    if (ExpectSymbol(';', PR_TRUE)) {
-      ProcessNameSpace(prefix, url, aAppendFunc, aData);
-      return PR_TRUE;
-    }
-  }
-  else if ((eCSSToken_Function == mToken.mType) &&
-           (mToken.mIdent.LowerCaseEqualsLiteral("url"))) {
-    if (GetURLInParens(url) &&
-        ExpectSymbol(';', PR_TRUE)) {
-      ProcessNameSpace(prefix, url, aAppendFunc, aData);
-      return PR_TRUE;
-    }
-  }
-  else {
-    UngetToken();
-  }
-  REPORT_UNEXPECTED_TOKEN(PEAtNSUnexpected);
-
-  return PR_FALSE;
+    }
+    return PR_FALSE;
+  }
+
+  ProcessNameSpace(prefix, url, aAppendFunc, aData);
+  return PR_TRUE;
 }
 
 void
 CSSParserImpl::ProcessNameSpace(const nsString& aPrefix,
                                 const nsString& aURLSpec,
                                 RuleAppendFunc aAppendFunc,
                                 void* aData)
 {
@@ -4747,31 +4736,22 @@ CSSParserImpl::ParseImageRect(nsCSSValue
 
     // func->Item(0) is reserved for the function name.
     nsCSSValue& url    = func->Item(1);
     nsCSSValue& top    = func->Item(2);
     nsCSSValue& right  = func->Item(3);
     nsCSSValue& bottom = func->Item(4);
     nsCSSValue& left   = func->Item(5);
 
-    if (!GetToken(PR_TRUE))
+    nsAutoString urlString;
+    if (!ParseURLOrString(urlString) ||
+        !SetValuetoURL(url, urlString) ||
+        !ExpectSymbol(',', PR_TRUE)) {
       break;
-    if (mToken.mType == eCSSToken_String) {
-      if (!SetValueToURL(url, mToken.mIdent))
-        break;
-    } else if (mToken.mType == eCSSToken_Function &&
-               mToken.mIdent.LowerCaseEqualsLiteral("url")) {
-      if (!ParseURL(url))
-        break;
-    } else {
-      UngetToken();
-      break;
-    }
-    if (!ExpectSymbol(',', PR_TRUE))
-      break;
+    }
 
     static const PRInt32 VARIANT_SIDE = VARIANT_NUMBER | VARIANT_PERCENT;
     if (!ParseNonNegativeVariant(top, VARIANT_SIDE, nsnull) ||
         !ExpectSymbol(',', PR_TRUE) ||
         !ParseNonNegativeVariant(right, VARIANT_SIDE, nsnull) ||
         !ExpectSymbol(',', PR_TRUE) ||
         !ParseNonNegativeVariant(bottom, VARIANT_SIDE, nsnull) ||
         !ExpectSymbol(',', PR_TRUE) ||
diff --git a/layout/style/test/test_unclosed_parentheses.html b/layout/style/test/test_unclosed_parentheses.html
--- a/layout/style/test/test_unclosed_parentheses.html
+++ b/layout/style/test/test_unclosed_parentheses.html
@@ -19,16 +19,26 @@ https://bugzilla.mozilla.org/show_bug.cg
 <div id="content" style="display: none">
   
 </div>
 <pre id="test">
 <script type="application/javascript">
 
 /** Test for unclosed parentheses in CSS values. **/
 
+// Each of the following semicolon-terminated @-rules should have a
+// single missing ')' in the value.
+var semirules = [
+  "@import (",
+  "@import url(",
+  "@import url(foo",
+  "@import url('foo'",
+  "@import foo(",
+];
+
 // Each of the following declarations should have a single missing ')'
 // in the value.
 var declarations = [
   "content: url(",
   "content: url( ",
   "content: url(http://www.foo.com",
   "content: url('http://www.foo.com'",
   "background-image: -moz-linear-gradient(",
@@ -149,16 +159,26 @@ var selectors = [
   ":not(div >",
   ":not(div > ",
 ];
 
 var textNode = document.createTextNode("");
 document.getElementById("style").appendChild(textNode);
 var cs = getComputedStyle(document.getElementById("display"), "");
 
+for (var i = 0; i < semirules.length; ++i) {
+  var sheet = semirules[i] +
+              "p#display { color: red } ) ; p { color: green; z-index: " + (i + 1) + " }";
+  textNode.data = sheet;
+  is(cs.color, "rgb(0, 128, 0)",
+     "color for rule '" + semirules[i] + "'");
+  is(cs.zIndex, i+1,
+     "z-index for rule '" + semirules[i] + "'");
+}
+
 for (var i = 0; i < declarations.length; ++i) {
   var sheet = "@namespace html url(http://www.w3.org/1999/xhtml);\n" +
               "#display { color: green; " + declarations[i] +
               " x x x x x x x ; color: red; ) ; z-index: " + (i + 1) + " }";
   textNode.data = sheet;
   is(cs.color, "rgb(0, 128, 0)",
      "color for declaration '" + declarations[i] + "'");
   is(cs.zIndex, i+1,
