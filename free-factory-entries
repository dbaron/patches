From: L. David Baron <dbaron@dbaron.org>

Don't leak all the nsFactoryEntry in the component manager.

diff --git a/xpcom/components/nsComponentManager.cpp b/xpcom/components/nsComponentManager.cpp
--- a/xpcom/components/nsComponentManager.cpp
+++ b/xpcom/components/nsComponentManager.cpp
@@ -994,17 +994,17 @@ nsresult nsComponentManagerImpl::Shutdow
 
     mStatus = SHUTDOWN_IN_PROGRESS;
 
     // Shutdown the component manager
     PR_LOG(nsComponentManagerLog, PR_LOG_DEBUG, ("nsComponentManager: Beginning Shutdown."));
 
     // Release all cached factories
     mContractIDs.Clear();
-    mFactories.Clear(); // XXX release the objects, don't just clear
+    mFactories.Clear();
     mLoaderMap.Clear();
     mKnownJARModules.Clear();
     mKnownFileModules.Clear();
     mKnownStaticModules.Clear();
 
     mLoaderData.Clear();
 
     delete sStaticModules;
@@ -1745,23 +1745,24 @@ nsComponentManagerImpl::UnregisterFactor
     nsCOMPtr<nsISupports> dyingServiceObject;
 
     {
         nsAutoMonitor mon(mMon);
         nsFactoryEntry* f = mFactories.Get(aClass);
         if (!f || f->mFactory != aFactory)
             return NS_ERROR_FACTORY_NOT_REGISTERED;
 
-        mFactories.Remove(aClass);
-
         // This might leave a stale contractid -> factory mapping in
         // place, so null out the factory entry (see
         // nsFactoryEntry::GetFactory)
         f->mFactory.swap(dyingFactory);
         f->mServiceObject.swap(dyingServiceObject);
+
+        mFactories.Remove(aClass);
+        // FIXME: Need to clean up dangling pointers!
     }
 
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsComponentManagerImpl::AutoRegister(nsIFile* aLocation)
 {
diff --git a/xpcom/components/nsComponentManager.h b/xpcom/components/nsComponentManager.h
--- a/xpcom/components/nsComponentManager.h
+++ b/xpcom/components/nsComponentManager.h
@@ -142,17 +142,17 @@ public:
                                              PRUint32 aContractIDLen);
 
     already_AddRefed<nsIFactory> LoadFactory(nsFactoryEntry *aEntry);
 
     nsFactoryEntry *GetFactoryEntry(const char *aContractID,
                                     PRUint32 aContractIDLen);
     nsFactoryEntry *GetFactoryEntry(const nsCID &aClass);
 
-    nsDataHashtable<nsIDHashKey, nsFactoryEntry*> mFactories;
+    nsClassHashtable<nsIDHashKey, nsFactoryEntry> mFactories;
     nsDataHashtable<nsCStringHashKey, nsFactoryEntry*> mContractIDs;
 
     PRMonitor*          mMon;
 
     static void InitializeStaticModules();
     static void InitializeModuleLocations();
 
     struct ComponentLocation
