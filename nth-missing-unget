From: L. David Baron <dbaron@dbaron.org>

Add missing UngetToken() call in an+b microsyntax parsing.

diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -4171,16 +4171,17 @@ CSSParserImpl::ParsePseudoClassWithNthPa
       }
       if (! GetToken(true)) {
         REPORT_UNEXPECTED_EOF(PEPseudoClassArgEOF);
         return eSelectorParsingStatus_Error;
       }
     }
     if (eCSSToken_Number != mToken.mType ||
         !mToken.mIntegerValid || mToken.mHasSign == hasSign[1]) {
+      UngetToken();
       REPORT_UNEXPECTED_TOKEN(PEPseudoClassArgNotNth);
       return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
     }
     numbers[1] = mToken.mInteger * sign[1];
     if (! GetToken(true)) {
       REPORT_UNEXPECTED_EOF(PEPseudoClassArgEOF);
       return eSelectorParsingStatus_Error;
     }
diff --git a/layout/style/test/test_selectors.html b/layout/style/test/test_selectors.html
--- a/layout/style/test/test_selectors.html
+++ b/layout/style/test/test_selectors.html
@@ -623,16 +623,29 @@ function run() {
     test_parseable(":nth-child( -/**/2/**/n/**/+/**/4 )");
     test_balanced_unparseable(":nth-child( -/**/ 2/**/n/**/+/**/4 )");
     test_balanced_unparseable(":nth-child( -/**/2 /**/n/**/+/**/4 )");
     test_balanced_unparseable(":nth-child( -/**/2/**/ n/**/+/**/4 )");
     test_parseable(":nth-child( -/**/2/**/n /**/+/**/4 )");
     test_parseable(":nth-child( -/**/2/**/n/**/ +/**/4 )");
     test_parseable(":nth-child(+1/**/n-1)");
     test_parseable(":nth-child(1/**/n-1)");
+    // bug ......
+    test_balanced_unparseable(":nth-child(+2n-)");
+    test_balanced_unparseable(":nth-child(+n-)");
+    test_balanced_unparseable(":nth-child(-2n-)");
+    test_balanced_unparseable(":nth-child(-n-)");
+    test_balanced_unparseable(":nth-child(2n-)");
+    test_balanced_unparseable(":nth-child(n-)");
+    test_balanced_unparseable(":nth-child(+2n+)");
+    test_balanced_unparseable(":nth-child(+n+)");
+    test_balanced_unparseable(":nth-child(-2n+)");
+    test_balanced_unparseable(":nth-child(-n+)");
+    test_balanced_unparseable(":nth-child(2n+)");
+    test_balanced_unparseable(":nth-child(n+)");
 
     // exercise the an+b matching logic particularly hard for
     // :nth-child() (since we know we use the same code for all 4)
     var seven_ps = "<p></p><p></p><p></p><p></p><p></p><p></p><p></p>";
     function pset(indices) { // takes an array of 1-based indices
         return function pset_filter(doc) {
             var a = doc.getElementsByTagName("p");
             var result = [];
