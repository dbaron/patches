Correctly handle window resizes when one dimension is zero.  (Bug 453759)

diff --git a/layout/style/test/test_media_queries.html b/layout/style/test/test_media_queries.html
--- a/layout/style/test/test_media_queries.html
+++ b/layout/style/test/test_media_queries.html
@@ -37,24 +37,16 @@ function run() {
   }
 
   function should_apply(q) {
     ok(query_applies(q), q + " should apply");
   }
 
   function should_not_apply(q) {
     ok(!query_applies(q), q + " should not apply");
-  }
-
-  function todo_should_apply(q) {
-    todo(query_applies(q), q + " should apply");
-  }
-
-  function todo_should_not_apply(q) {
-    todo(!query_applies(q), q + " should not apply");
   }
 
   /*
    * Functions to test whether a query is parseable at all.  (Should not
    * be used for parse errors within expressions.)
    */
   var parse_test_style_element = document.createElement("style");
   parse_test_style_element.type = "text/css";
@@ -164,29 +156,27 @@ function run() {
     should_apply("all and (min-" + feature + ": " +
                  (Math.floor(value/em_size) - 1) + "em)");
     should_apply("all and (max-" + feature + ": " +
                  (Math.ceil(value/em_size) + 1) + "em)");
     should_not_apply("all and (max-" + feature + ": " +
                      (Math.floor(value/em_size) - 1) + "em)");
   }
 
-  // TODO:  There are a bunch of todos here because of a bug related
-  // to dynamic changes not going into effect once one dimension is 0.
   iframe_style.width = "0";
   should_apply("all and (height)");
   should_not_apply("all and (width)");
   iframe_style.height = "0";
-  todo_should_not_apply("all and (height)");
+  should_not_apply("all and (height)");
   should_not_apply("all and (width)");
   should_apply("all and (device-height)");
   should_apply("all and (device-width)");
   iframe_style.width = width_val + "px";
-  todo_should_not_apply("all and (height)");
-  todo_should_apply("all and (width)");
+  should_not_apply("all and (height)");
+  should_apply("all and (width)");
   iframe_style.height = height_val + "px";
   should_apply("all and (height)");
   should_apply("all and (width)");
 
   // ratio that reduces to 59/40
   iframe_style.width = "236px";
   iframe_style.height = "160px";
   expression_should_be_parseable("orientation");
diff --git a/view/src/nsViewManager.h b/view/src/nsViewManager.h
--- a/view/src/nsViewManager.h
+++ b/view/src/nsViewManager.h
@@ -313,17 +313,18 @@ private:
 
   nsresult GetVisibleRect(nsRect& aVisibleRect);
 
   void DoSetWindowDimensions(nscoord aWidth, nscoord aHeight)
   {
     nsRect oldDim;
     nsRect newDim(0, 0, aWidth, aHeight);
     mRootView->GetDimensions(oldDim);
-    if (oldDim != newDim) {
+    // We care about resizes even when one dimension is already zero.
+    if (!oldDim.IsExactEqual(newDim)) {
       // Don't resize the widget. It is already being set elsewhere.
       mRootView->SetDimensions(newDim, PR_TRUE, PR_FALSE);
       if (mObserver)
         mObserver->ResizeReflow(mRootView, aWidth, aHeight);
     }
   }
 
   // Safety helpers
