From: L. David Baron <dbaron@dbaron.org>

Convert custom style rules to property getters instead of accessing struct members.

diff --git a/content/html/content/src/nsHTMLBodyElement.cpp b/content/html/content/src/nsHTMLBodyElement.cpp
--- a/content/html/content/src/nsHTMLBodyElement.cpp
+++ b/content/html/content/src/nsHTMLBodyElement.cpp
@@ -153,72 +153,74 @@ BodyRule::MapRuleInfoInto(nsRuleData* aD
 
   const nsAttrValue* value;
   if (mPart->GetAttrCount() > 0) {
     // if marginwidth/marginheight are set, reflect them as 'margin'
     value = mPart->GetParsedAttr(nsGkAtoms::marginwidth);
     if (value && value->Type() == nsAttrValue::eInteger) {
       bodyMarginWidth = value->GetIntegerValue();
       if (bodyMarginWidth < 0) bodyMarginWidth = 0;
-      nsCSSRect& margin = aData->mMarginData->mMargin;
-      if (margin.mLeft.GetUnit() == eCSSUnit_Null)
-        margin.mLeft.SetFloatValue((float)bodyMarginWidth, eCSSUnit_Pixel);
-      if (margin.mRight.GetUnit() == eCSSUnit_Null)
-        margin.mRight.SetFloatValue((float)bodyMarginWidth, eCSSUnit_Pixel);
+      nsCSSValue* marginLeft = aData->ValueForMarginLeft();
+      if (marginLeft->GetUnit() == eCSSUnit_Null)
+        marginLeft->SetFloatValue((float)bodyMarginWidth, eCSSUnit_Pixel);
+      nsCSSValue* marginRight = aData->ValueForMarginRight();
+      if (marginRight->GetUnit() == eCSSUnit_Null)
+        marginRight->SetFloatValue((float)bodyMarginWidth, eCSSUnit_Pixel);
     }
 
     value = mPart->GetParsedAttr(nsGkAtoms::marginheight);
     if (value && value->Type() == nsAttrValue::eInteger) {
       bodyMarginHeight = value->GetIntegerValue();
       if (bodyMarginHeight < 0) bodyMarginHeight = 0;
-      nsCSSRect& margin = aData->mMarginData->mMargin;
-      if (margin.mTop.GetUnit() == eCSSUnit_Null)
-        margin.mTop.SetFloatValue((float)bodyMarginHeight, eCSSUnit_Pixel);
-      if (margin.mBottom.GetUnit() == eCSSUnit_Null)
-        margin.mBottom.SetFloatValue((float)bodyMarginHeight, eCSSUnit_Pixel);
+      nsCSSValue* marginTop = aData->ValueForMarginTop();
+      if (marginTop->GetUnit() == eCSSUnit_Null)
+        marginTop->SetFloatValue((float)bodyMarginHeight, eCSSUnit_Pixel);
+      nsCSSValue* marginBottom = aData->ValueForMarginBottom();
+      if (marginBottom->GetUnit() == eCSSUnit_Null)
+        marginBottom->SetFloatValue((float)bodyMarginHeight, eCSSUnit_Pixel);
     }
 
     if (eCompatibility_NavQuirks == mode){
       // topmargin (IE-attribute)
       value = mPart->GetParsedAttr(nsGkAtoms::topmargin);
       if (value && value->Type() == nsAttrValue::eInteger) {
         bodyTopMargin = value->GetIntegerValue();
         if (bodyTopMargin < 0) bodyTopMargin = 0;
-        nsCSSRect& margin = aData->mMarginData->mMargin;
-        if (margin.mTop.GetUnit() == eCSSUnit_Null)
-          margin.mTop.SetFloatValue((float)bodyTopMargin, eCSSUnit_Pixel);
+        nsCSSValue* marginTop = aData->ValueForMarginTop();
+        if (marginTop->GetUnit() == eCSSUnit_Null)
+          marginTop->SetFloatValue((float)bodyTopMargin, eCSSUnit_Pixel);
       }
 
       // bottommargin (IE-attribute)
       value = mPart->GetParsedAttr(nsGkAtoms::bottommargin);
       if (value && value->Type() == nsAttrValue::eInteger) {
         bodyBottomMargin = value->GetIntegerValue();
         if (bodyBottomMargin < 0) bodyBottomMargin = 0;
-        nsCSSRect& margin = aData->mMarginData->mMargin;
-        if (margin.mBottom.GetUnit() == eCSSUnit_Null)
-          margin.mBottom.SetFloatValue((float)bodyBottomMargin, eCSSUnit_Pixel);
+        nsCSSValue* marginBottom = aData->ValueForMarginBottom();
+        if (marginBottom->GetUnit() == eCSSUnit_Null)
+          marginBottom->SetFloatValue((float)bodyBottomMargin, eCSSUnit_Pixel);
       }
 
       // leftmargin (IE-attribute)
       value = mPart->GetParsedAttr(nsGkAtoms::leftmargin);
       if (value && value->Type() == nsAttrValue::eInteger) {
         bodyLeftMargin = value->GetIntegerValue();
         if (bodyLeftMargin < 0) bodyLeftMargin = 0;
-        nsCSSRect& margin = aData->mMarginData->mMargin;
-        if (margin.mLeft.GetUnit() == eCSSUnit_Null)
-          margin.mLeft.SetFloatValue((float)bodyLeftMargin, eCSSUnit_Pixel);
+        nsCSSValue* marginLeft = aData->ValueForMarginLeft();
+        if (marginLeft->GetUnit() == eCSSUnit_Null)
+          marginLeft->SetFloatValue((float)bodyLeftMargin, eCSSUnit_Pixel);
       }
 
       // rightmargin (IE-attribute)
       value = mPart->GetParsedAttr(nsGkAtoms::rightmargin);
       if (value && value->Type() == nsAttrValue::eInteger) {
         bodyRightMargin = value->GetIntegerValue();
         if (bodyRightMargin < 0) bodyRightMargin = 0;
-        nsCSSRect& margin = aData->mMarginData->mMargin;
-        if (margin.mRight.GetUnit() == eCSSUnit_Null)
+        nsCSSValue* marginRight = aData->ValueForMarginRight();
+        if (marginRight->GetUnit() == eCSSUnit_Null)
           margin.mRight.SetFloatValue((float)bodyRightMargin, eCSSUnit_Pixel);
       }
     }
 
   }
 
   // if marginwidth or marginheight is set in the <frame> and not set in the <body>
   // reflect them as margin in the <body>
@@ -240,29 +242,31 @@ BodyRule::MapRuleInfoInto(nsRuleData* aD
         if ((frameMarginHeight >= 0) && (bodyMarginHeight == -1)) { // set in <frame> & not in <body> 
           if (eCompatibility_NavQuirks == mode) {
             if ((bodyMarginWidth == -1) && (0 > frameMarginWidth)) // nav quirk
               frameMarginWidth = 0;
           }
         }
 
         if ((bodyMarginWidth == -1) && (frameMarginWidth >= 0)) {
-          nsCSSRect& margin = aData->mMarginData->mMargin;
-          if (margin.mLeft.GetUnit() == eCSSUnit_Null)
-            margin.mLeft.SetFloatValue((float)frameMarginWidth, eCSSUnit_Pixel);
-          if (margin.mRight.GetUnit() == eCSSUnit_Null)
-            margin.mRight.SetFloatValue((float)frameMarginWidth, eCSSUnit_Pixel);
+          nsCSSValue* marginLeft = aData->ValueForMarginLeft();
+          if (marginLeft->GetUnit() == eCSSUnit_Null)
+            marginLeft->SetFloatValue((float)frameMarginWidth, eCSSUnit_Pixel);
+          nsCSSValue* marginRight = aData->ValueForMarginRight();
+          if (marginRight->GetUnit() == eCSSUnit_Null)
+            marginRight->SetFloatValue((float)frameMarginWidth, eCSSUnit_Pixel);
         }
 
         if ((bodyMarginHeight == -1) && (frameMarginHeight >= 0)) {
-          nsCSSRect& margin = aData->mMarginData->mMargin;
-          if (margin.mTop.GetUnit() == eCSSUnit_Null)
-            margin.mTop.SetFloatValue((float)frameMarginHeight, eCSSUnit_Pixel);
-          if (margin.mBottom.GetUnit() == eCSSUnit_Null)
-            margin.mBottom.SetFloatValue((float)frameMarginHeight, eCSSUnit_Pixel);
+          nsCSSValue* marginTop = aData->ValueForMarginTop();
+          if (marginTop->GetUnit() == eCSSUnit_Null)
+            marginTop->SetFloatValue((float)frameMarginHeight, eCSSUnit_Pixel);
+          nsCSSValue* marginBottom = aData->ValueForMarginBottom();
+          if (marginBottom->GetUnit() == eCSSUnit_Null)
+            marginBottom->SetFloatValue((float)frameMarginHeight, eCSSUnit_Pixel);
         }
       }
     }
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
