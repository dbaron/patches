Use a local stack rather than the call stack in SkipUntil to avoid excessive recursion.  (Bug 432561)  r+sr=bzbarsky

diff --git a/layout/style/crashtests/432561-1.html b/layout/style/crashtests/432561-1.html
new file mode 100644
--- /dev/null
+++ b/layout/style/crashtests/432561-1.html
@@ -0,0 +1,17 @@
+<html>
+<head>
+<title>Testcase, Bug 432561</title>
+</head>
+<body>
+<script>
+var str = '{';
+for (var i=0;i<22;i++)
+ str+=str;
+document.write('<style type="text/css">div '+str+'</style>');
+str = '{{[('
+for (var i=0;i<20;i++)
+ str+=str;
+document.write('<style type="text/css">div '+str+'</style>');
+</script>
+</body>
+</html>
diff --git a/layout/style/crashtests/crashtests.list b/layout/style/crashtests/crashtests.list
--- a/layout/style/crashtests/crashtests.list
+++ b/layout/style/crashtests/crashtests.list
@@ -7,16 +7,17 @@ load 383979-2.html
 load 383979-2.html
 load 386939-1.html
 load 391034-1.xhtml
 load 397022-1.html
 load 399289-1.svg
 load 404470-1.html
 load 411603-1.html
 load 413274-1.xhtml
+load 432561-1.html
 load 437170-1.html
 skip load 439184-1.html # skip until we figure out how to test this
 load 444237-1.html
 load 444848-1.html 
 load 447776-1.html
 load 447783-1.html
 load 448161-1.html
 load 448161-2.html
diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -2167,30 +2167,39 @@ CSSParserImpl::ParsePageRule(RuleAppendF
   // XXX not yet implemented
   return PR_FALSE;
 }
 
 void
 CSSParserImpl::SkipUntil(PRUnichar aStopSymbol)
 {
   nsCSSToken* tk = &mToken;
+  nsAutoTArray<PRUnichar, 16> stack;
+  stack.AppendElement(aStopSymbol);
   for (;;) {
     if (!GetToken(PR_TRUE)) {
       break;
     }
     if (eCSSToken_Symbol == tk->mType) {
       PRUnichar symbol = tk->mSymbol;
-      if (symbol == aStopSymbol) {
-        break;
+      PRUint32 stackTopIndex = stack.Length() - 1;
+      if (symbol == stack.ElementAt(stackTopIndex)) {
+        stack.RemoveElementAt(stackTopIndex);
+        if (stackTopIndex == 0) {
+          break;
+        }
       } else if ('{' == symbol) {
-        SkipUntil('}');
+        // In this case and the two below, just handle out-of-memory by
+        // parsing incorrectly.  It's highly unlikely we're dealing with
+        // a legitimate style sheet anyway.
+        stack.AppendElement('}');
       } else if ('[' == symbol) {
-        SkipUntil(']');
+        stack.AppendElement(']');
       } else if ('(' == symbol) {
-        SkipUntil(')');
+        stack.AppendElement(')');
       }
     }
   }
 }
 
 void
 CSSParserImpl::SkipUntilOneOf(const PRUnichar* aStopSymbolChars)
 {
