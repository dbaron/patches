From: L. David Baron <dbaron@dbaron.org>

Bug 978833 patch 6 - Move ImportantStyleData from StyleRule.{h,cpp} to Declaration.{h,cpp}  r?heycam

This is needed for patch 7.

Note that this removes an unused "friend class StyleRule;" declaration.

diff --git a/layout/style/Declaration.cpp b/layout/style/Declaration.cpp
--- a/layout/style/Declaration.cpp
+++ b/layout/style/Declaration.cpp
@@ -14,16 +14,48 @@
 #include "mozilla/css/Declaration.h"
 #include "nsPrintfCString.h"
 #include "gfxFontConstants.h"
 #include "nsStyleUtil.h"
 
 namespace mozilla {
 namespace css {
 
+ImportantStyleData::ImportantStyleData(Declaration* aDeclaration)
+  : mDeclaration(aDeclaration)
+{
+}
+
+ImportantStyleData::~ImportantStyleData()
+{
+}
+
+NS_IMPL_ISUPPORTS(ImportantStyleData, nsIStyleRule)
+
+/* virtual */ void
+ImportantStyleData::MapRuleInfoInto(nsRuleData* aRuleData)
+{
+  mDeclaration->MapImportantRuleInfoInto(aRuleData);
+}
+
+#ifdef DEBUG
+/* virtual */ void
+ImportantStyleData::List(FILE* out, int32_t aIndent) const
+{
+  // Indent
+  nsAutoCString str;
+  for (int32_t index = aIndent; --index >= 0; ) {
+    str.AppendLiteral("  ");
+  }
+
+  str.AppendLiteral("! important rule\n");
+  fprintf_stderr(out, "%s", str.get());
+}
+#endif
+
 Declaration::Declaration()
   : mOwningRule(nullptr)
   , mImmutable(false)
 {
 }
 
 Declaration::Declaration(const Declaration& aCopy)
   : mOrder(aCopy.mOrder),
diff --git a/layout/style/Declaration.h b/layout/style/Declaration.h
--- a/layout/style/Declaration.h
+++ b/layout/style/Declaration.h
@@ -32,16 +32,36 @@
 #define NS_CSS_DECLARATION_IMPL_CID \
 { 0xfeec07b8, 0x3fe6, 0x491e, \
   { 0x90, 0xd5, 0xcc, 0x93, 0xf8, 0x53, 0xe0, 0x48 } }
 
 namespace mozilla {
 namespace css {
 
 class Rule;
+class Declaration;
+
+class ImportantStyleData final : public nsIStyleRule
+{
+public:
+  explicit ImportantStyleData(Declaration* aDeclaration);
+
+  NS_DECL_ISUPPORTS
+
+  // nsIStyleRule interface
+  virtual void MapRuleInfoInto(nsRuleData* aRuleData) override;
+#ifdef DEBUG
+  virtual void List(FILE* out = stdout, int32_t aIndent = 0) const override;
+#endif
+
+protected:
+  virtual ~ImportantStyleData();
+
+  RefPtr<Declaration> mDeclaration;
+};
 
 // Declaration objects have unusual lifetime rules.  Every declaration
 // begins life in an invalid state which ends when InitializeEmpty or
 // CompressFrom is called upon it.  After that, it can be attached to
 // exactly one style rule, and will be destroyed when that style rule
 // is destroyed.  A declaration becomes immutable when its style rule's
 // |RuleMatched| method is called; after that, it must be copied before
 // it can be modified, which is taken care of by |EnsureMutable|.
diff --git a/layout/style/StyleRule.cpp b/layout/style/StyleRule.cpp
--- a/layout/style/StyleRule.cpp
+++ b/layout/style/StyleRule.cpp
@@ -1033,56 +1033,16 @@ nsCSSSelectorList::SizeOfIncludingThis(m
   while (s) {
     n += aMallocSizeOf(s);
     n += s->mSelectors ? s->mSelectors->SizeOfIncludingThis(aMallocSizeOf) : 0;
     s = s->mNext;
   }
   return n;
 }
 
-// -- ImportantStyleData ----------------------------------
-
-namespace mozilla {
-namespace css {
-
-ImportantStyleData::ImportantStyleData(Declaration* aDeclaration)
-  : mDeclaration(aDeclaration)
-{
-}
-
-ImportantStyleData::~ImportantStyleData()
-{
-}
-
-NS_IMPL_ISUPPORTS(ImportantStyleData, nsIStyleRule)
-
-/* virtual */ void
-ImportantStyleData::MapRuleInfoInto(nsRuleData* aRuleData)
-{
-  mDeclaration->MapImportantRuleInfoInto(aRuleData);
-}
-
-#ifdef DEBUG
-/* virtual */ void
-ImportantStyleData::List(FILE* out, int32_t aIndent) const
-{
-  // Indent
-  nsAutoCString str;
-  for (int32_t index = aIndent; --index >= 0; ) {
-    str.AppendLiteral("  ");
-  }
-
-  str.AppendLiteral("! important rule\n");
-  fprintf_stderr(out, "%s", str.get());
-}
-#endif
-
-} // namespace css
-} // namespace mozilla
-
 // --------------------------------------------------------
 
 namespace mozilla {
 namespace css {
 class DOMCSSStyleRule;
 } // namespace css
 } // namespace mozilla
 
diff --git a/layout/style/StyleRule.h b/layout/style/StyleRule.h
--- a/layout/style/StyleRule.h
+++ b/layout/style/StyleRule.h
@@ -287,39 +287,16 @@ private:
   { 0xab, 0x44, 0xb7, 0xa5, 0xf3, 0xaa, 0xe5, 0x7d } }
 
 namespace mozilla {
 namespace css {
 
 class Declaration;
 class DOMCSSStyleRule;
 
-class StyleRule;
-
-class ImportantStyleData final : public nsIStyleRule
-{
-public:
-  explicit ImportantStyleData(Declaration* aDeclaration);
-
-  NS_DECL_ISUPPORTS
-
-  // nsIStyleRule interface
-  virtual void MapRuleInfoInto(nsRuleData* aRuleData) override;
-#ifdef DEBUG
-  virtual void List(FILE* out = stdout, int32_t aIndent = 0) const override;
-#endif
-
-protected:
-  virtual ~ImportantStyleData();
-
-  RefPtr<Declaration> mDeclaration;
-
-  friend class StyleRule;
-};
-
 class StyleRule final : public Rule
 {
  public:
   StyleRule(nsCSSSelectorList* aSelector,
             Declaration *aDeclaration,
             uint32_t aLineNumber, uint32_t aColumnNumber);
 private:
   // for |Clone|
