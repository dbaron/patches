From: L. David Baron <dbaron@dbaron.org>

Share IsPaddingZero between nsBlockFrame and nsInlineFrame by putting it in nsLayoutUtils.  (Bug 585715)  r=bzbarsky  a2.0=blocking:beta6+

diff --git a/layout/base/nsLayoutUtils.h b/layout/base/nsLayoutUtils.h
--- a/layout/base/nsLayoutUtils.h
+++ b/layout/base/nsLayoutUtils.h
@@ -793,16 +793,27 @@ public:
   static PRBool IsAutoHeight(const nsStyleCoord &aCoord, nscoord aCBHeight)
   {
     nsStyleUnit unit = aCoord.GetUnit();
     return unit == eStyleUnit_Auto ||  // only for 'height'
            unit == eStyleUnit_None ||  // only for 'max-height'
            (aCBHeight == NS_AUTOHEIGHT && aCoord.HasPercent());
   }
 
+  static PRBool IsPaddingZero(const nsStyleCoord &aCoord)
+  {
+    return (aCoord.GetUnit() == eStyleUnit_Coord &&
+            aCoord.GetCoordValue() == 0) ||
+           (aCoord.GetUnit() == eStyleUnit_Percent &&
+            aCoord.GetPercentValue() == 0.0) ||
+           (aCoord.IsCalcUnit() &&
+            nsRuleNode::ComputeCoordPercentCalc(aCoord, nscoord_MAX) == 0 &&
+            nsRuleNode::ComputeCoordPercentCalc(aCoord, 0) == 0);
+  }
+
   /*
    * Calculate the used values for 'width' and 'height' for a replaced element.
    *
    *   http://www.w3.org/TR/CSS21/visudet.html#min-max-widths
    */
   static nsSize ComputeSizeWithIntrinsicDimensions(
                     nsIRenderingContext* aRenderingContext, nsIFrame* aFrame,
                     const nsIFrame::IntrinsicSize& aIntrinsicSize,
diff --git a/layout/generic/nsBlockFrame.cpp b/layout/generic/nsBlockFrame.cpp
--- a/layout/generic/nsBlockFrame.cpp
+++ b/layout/generic/nsBlockFrame.cpp
@@ -2749,28 +2749,16 @@ nsBlockFrame::AttributeChanged(PRInt32  
       }
     }
   }
 
   return rv;
 }
 
 static inline PRBool
-IsPaddingZero(const nsStyleCoord &aCoord)
-{
-  return (aCoord.GetUnit() == eStyleUnit_Coord &&
-          aCoord.GetCoordValue() == 0) ||
-         (aCoord.GetUnit() == eStyleUnit_Percent &&
-          aCoord.GetPercentValue() == 0.0) ||
-         (aCoord.IsCalcUnit() &&
-          nsRuleNode::ComputeCoordPercentCalc(aCoord, nscoord_MAX) == 0 &&
-          nsRuleNode::ComputeCoordPercentCalc(aCoord, 0) == 0);
-}
-
-static inline PRBool
 IsNonAutoNonZeroHeight(const nsStyleCoord& aCoord)
 {
   if (aCoord.GetUnit() == eStyleUnit_Auto)
     return PR_FALSE;
   if (aCoord.IsCoordPercentCalcUnit()) {
     // If we evaluate the length/percent/calc at a percentage basis of
     // both nscoord_MAX and 0, and it's zero both ways, then it's a zero
     // length, percent, or combination thereof.  Test > 0 so we clamp
@@ -2796,18 +2784,18 @@ nsBlockFrame::IsSelfEmpty()
   if (IsNonAutoNonZeroHeight(position->mMinHeight) ||
       IsNonAutoNonZeroHeight(position->mHeight))
     return PR_FALSE;
 
   const nsStyleBorder* border = GetStyleBorder();
   const nsStylePadding* padding = GetStylePadding();
   if (border->GetActualBorderWidth(NS_SIDE_TOP) != 0 ||
       border->GetActualBorderWidth(NS_SIDE_BOTTOM) != 0 ||
-      !IsPaddingZero(padding->mPadding.GetTop()) ||
-      !IsPaddingZero(padding->mPadding.GetBottom())) {
+      !nsLayoutUtils::IsPaddingZero(padding->mPadding.GetTop()) ||
+      !nsLayoutUtils::IsPaddingZero(padding->mPadding.GetBottom())) {
     return PR_FALSE;
   }
 
   if (HaveOutsideBullet() && !BulletIsEmpty()) {
     return PR_FALSE;
   }
 
   return PR_TRUE;
diff --git a/layout/generic/nsInlineFrame.cpp b/layout/generic/nsInlineFrame.cpp
--- a/layout/generic/nsInlineFrame.cpp
+++ b/layout/generic/nsInlineFrame.cpp
@@ -89,31 +89,20 @@ nsInlineFrame::GetFrameName(nsAString& a
 
 nsIAtom*
 nsInlineFrame::GetType() const
 {
   return nsGkAtoms::inlineFrame;
 }
 
 static inline PRBool
-IsPaddingZero(const nsStyleCoord &aCoord)
-{
-  return (aCoord.GetUnit() == eStyleUnit_Coord &&
-          aCoord.GetCoordValue() == 0) ||
-         (aCoord.GetUnit() == eStyleUnit_Percent &&
-          aCoord.GetPercentValue() == 0.0) ||
-         (aCoord.IsCalcUnit() &&
-          nsRuleNode::ComputeCoordPercentCalc(aCoord, nscoord_MAX) == 0 &&
-          nsRuleNode::ComputeCoordPercentCalc(aCoord, 0) == 0);
-}
-
-static inline PRBool
 IsMarginZero(const nsStyleCoord &aCoord)
 {
-  return aCoord.GetUnit() == eStyleUnit_Auto || IsPaddingZero(aCoord);
+  return aCoord.GetUnit() == eStyleUnit_Auto ||
+         nsLayoutUtils::IsPaddingZero(aCoord);
 }
 
 /* virtual */ PRBool
 nsInlineFrame::IsSelfEmpty()
 {
 #if 0
   // I used to think inline frames worked this way, but it seems they
   // don't.  At least not in our codebase.
@@ -124,21 +113,21 @@ nsInlineFrame::IsSelfEmpty()
   const nsStyleMargin* margin = GetStyleMargin();
   const nsStyleBorder* border = GetStyleBorder();
   const nsStylePadding* padding = GetStylePadding();
   // XXX Top and bottom removed, since they shouldn't affect things, but this
   // doesn't really match with nsLineLayout.cpp's setting of
   // ZeroEffectiveSpanBox, anymore, so what should this really be?
   PRBool haveRight =
     border->GetActualBorderWidth(NS_SIDE_RIGHT) != 0 ||
-    !IsPaddingZero(padding->mPadding.GetRight()) ||
+    !nsLayoutUtils::IsPaddingZero(padding->mPadding.GetRight()) ||
     !IsMarginZero(margin->mMargin.GetRight());
   PRBool haveLeft =
     border->GetActualBorderWidth(NS_SIDE_LEFT) != 0 ||
-    !IsPaddingZero(padding->mPadding.GetLeft()) ||
+    !nsLayoutUtils::IsPaddingZero(padding->mPadding.GetLeft()) ||
     !IsMarginZero(margin->mMargin.GetLeft());
   if (haveLeft || haveRight) {
     if (GetStateBits() & NS_FRAME_IS_SPECIAL) {
       PRBool haveStart, haveEnd;
       if (NS_STYLE_DIRECTION_LTR == GetStyleVisibility()->mDirection) {
         haveStart = haveLeft;
         haveEnd = haveRight;
       } else {
