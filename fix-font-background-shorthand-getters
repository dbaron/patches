Don't say that the font or background shorthands are present when the properties that they reset but can't otherwise specify are not their initial values.  (Bug 376075)  r+sr=bzbarsky

diff --git a/layout/style/nsCSSDeclaration.cpp b/layout/style/nsCSSDeclaration.cpp
--- a/layout/style/nsCSSDeclaration.cpp
+++ b/layout/style/nsCSSDeclaration.cpp
@@ -800,16 +800,36 @@ nsCSSDeclaration::GetValue(nsCSSProperty
       const nsCSSProperty* subprops =
         nsCSSProps::SubpropertyEntryFor(aProperty);
       NS_ASSERTION(subprops[3] == eCSSProperty_UNKNOWN,
                    "not box property with physical vs. logical cascading");
       AppendValueToString(subprops[0], aValue);
       break;
     }
     case eCSSProperty_background: {
+      // The -moz-background-clip, -moz-background-origin, and
+      // -moz-background-inline-policy properties are reset by this
+      // shorthand property to their initial values, but can't be
+      // represented in its syntax.
+      const nsCSSValue *clipValue = static_cast<const nsCSSValue*>(
+        data->StorageFor(eCSSProperty__moz_background_clip));
+      const nsCSSValue *originValue = static_cast<const nsCSSValue*>(
+        data->StorageFor(eCSSProperty__moz_background_origin));
+      const nsCSSValue *inlinePolicyValue = static_cast<const nsCSSValue*>(
+        data->StorageFor(eCSSProperty__moz_background_inline_policy));
+      if (*clipValue !=
+            nsCSSValue(NS_STYLE_BG_CLIP_BORDER, eCSSUnit_Enumerated) ||
+          *originValue !=
+            nsCSSValue(NS_STYLE_BG_ORIGIN_PADDING, eCSSUnit_Enumerated) ||
+          *inlinePolicyValue !=
+            nsCSSValue(NS_STYLE_BG_INLINE_POLICY_CONTINUOUS,
+                       eCSSUnit_Enumerated)) {
+        return NS_OK;
+      }
+      
       PRBool appendedSomething = PR_FALSE;
       if (AppendValueToString(eCSSProperty_background_color, aValue)) {
         appendedSomething = PR_TRUE;
         aValue.Append(PRUnichar(' '));
       }
       if (AppendValueToString(eCSSProperty_background_image, aValue)) {
         aValue.Append(PRUnichar(' '));
         appendedSomething = PR_TRUE;
@@ -848,16 +868,28 @@ nsCSSDeclaration::GetValue(nsCSSProperty
       GetValueOrImportantValue(eCSSProperty_font_size, size);
       GetValueOrImportantValue(eCSSProperty_line_height, lh);
       GetValueOrImportantValue(eCSSProperty_font_family, family);
 
       if (systemFont.GetUnit() != eCSSUnit_None &&
           systemFont.GetUnit() != eCSSUnit_Null) {
         AppendCSSValueToString(eCSSProperty__x_system_font, systemFont, aValue);
       } else {
+        // The font-stretch and font-size-adjust
+        // properties are reset by this shorthand property to their
+        // initial values, but can't be represented in its syntax.
+        const nsCSSValue *stretchValue = static_cast<const nsCSSValue*>(
+          data->StorageFor(eCSSProperty_font_stretch));
+        const nsCSSValue *sizeAdjustValue = static_cast<const nsCSSValue*>(
+          data->StorageFor(eCSSProperty_font_size_adjust));
+        if (*stretchValue != nsCSSValue(eCSSUnit_Normal) ||
+            *sizeAdjustValue != nsCSSValue(eCSSUnit_None)) {
+          return NS_OK;
+        }
+
         if (style.GetUnit() != eCSSUnit_Normal) {
           AppendCSSValueToString(eCSSProperty_font_style, style, aValue);
           aValue.Append(PRUnichar(' '));
         }
         if (variant.GetUnit() != eCSSUnit_Normal) {
           AppendCSSValueToString(eCSSProperty_font_variant, variant, aValue);
           aValue.Append(PRUnichar(' '));
         }
diff --git a/layout/style/test/test_bug377947.html b/layout/style/test/test_bug377947.html
--- a/layout/style/test/test_bug377947.html
+++ b/layout/style/test/test_bug377947.html
@@ -52,27 +52,33 @@ is(s.getPropertyValue("list-style"), "",
 is(s.getPropertyValue("font"), "",
    "font shorthand should start off empty");
 var all_but_one = {
   "font-family": "serif",
   "font-style": "normal",
   "font-variant": "normal",
   "font-weight": "bold",
   "font-size": "small",
-  "font-size-adjust": "0.45",
-  "font-stretch": "normal"
+  "font-size-adjust": "none", // has to be default value
+  "font-stretch": "normal" // has to be default value
 };
 for (var prop in all_but_one) {
   s.setProperty(prop, all_but_one[prop], "");
 }
 is(s.getPropertyValue("font"), "",
    "font shorthand should be empty when some subproperties specified");
 s.setProperty("line-height", "1.5", "");
 isnot(s.getPropertyValue("font"), "",
       "font shorthand should produce value when all subproperties set");
+s.setProperty("font-stretch", "condensed", "");
+is(s.getPropertyValue("font"), "",
+   "font shorthand should be empty when font-stretch is non-default");
+s.setProperty("font-stretch", "normal", "");
+isnot(s.getPropertyValue("font"), "",
+      "font shorthand should produce value when all subproperties set");
 s.removeProperty("font");
 is(s.getPropertyValue("font"), "",
    "font shorthand be empty after removal");
 s.font="medium serif";
 isnot(s.getPropertyValue("font"), "",
       "font shorthand should produce value when shorthand set");
 s.removeProperty("font");
 is(s.getPropertyValue("font"), "",
diff --git a/layout/style/test/test_shorthand_property_getters.html b/layout/style/test/test_shorthand_property_getters.html
--- a/layout/style/test/test_shorthand_property_getters.html
+++ b/layout/style/test/test_shorthand_property_getters.html
@@ -91,12 +91,31 @@ is(e.style.borderColor, "green blue", "s
 is(e.style.cssText, "border-color: green blue;", "should condense");
 e.setAttribute("style", "border-color: currentColor currentColor currentcolor CURRENTcolor");
 is(e.style.borderColor, "currentcolor", "should condense to canonical case");
 is(e.style.cssText, "border-color: currentcolor;", "should condense to canonical case");
 e.setAttribute("style", "border-style: ridge none none none");
 is(e.style.borderStyle, "ridge none none", "should condense");
 is(e.style.cssText, "border-style: ridge none none;", "should condense");
 
+// Test that we refuse to serialize the 'background' and 'font'
+// shorthands when some subproperties that can't be expressed in the
+// shorthand syntax are present.
+e.setAttribute("style", "font: medium serif");
+isnot(e.style.font, "", "should have font shorthand");
+e.setAttribute("style", "font: medium serif; font-size-adjust: 0.45");
+is(e.style.font, "", "should not have font shorthand");
+e.setAttribute("style", "font: medium serif; font-stretch: condensed");
+is(e.style.font, "", "should not have font shorthand");
+
+e.setAttribute("style", "background: red");
+isnot(e.style.background, "", "should have background shorthand");
+e.setAttribute("style", "background: red; -moz-background-origin: border");
+is(e.style.background, "", "should not have background shorthand");
+e.setAttribute("style", "background: red; -moz-background-clip: padding");
+is(e.style.background, "", "should not have background shorthand");
+e.setAttribute("style", "background: red; -moz-background-inline-policy: each-box");
+is(e.style.background, "", "should not have background shorthand");
+
 </script>
 </pre>
 </body>
 </html>
