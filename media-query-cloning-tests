From: L. David Baron <dbaron@dbaron.org>

Add tests for cloning of media queries.

diff --git a/layout/style/test/test_media_queries.html b/layout/style/test/test_media_queries.html
--- a/layout/style/test/test_media_queries.html
+++ b/layout/style/test/test_media_queries.html
@@ -147,18 +147,20 @@ function run() {
   var content_div = document.getElementById("content");
   content_div.style.font = "-moz-initial";
   var em_size =
     getComputedStyle(content_div, "").fontSize.match(/^(\d+)px$/)[1];
 
   // in this test, assume the common underlying implementation is correct
   var width_val = 117; // pick two not-too-round numbers
   var height_val = 76;
-  iframe_style.width = width_val + "px";
-  iframe_style.height = height_val + "px";
+  change_state(function() {
+    iframe_style.width = width_val + "px";
+    iframe_style.height = height_val + "px";
+  });
   var device_width = window.screen.width;
   var device_height = window.screen.height;
   features = { "width": width_val,
                     "height": height_val,
                     "device-width": device_width,
                     "device-height": device_height };
   for (feature in features) {
     var value = features[feature];
@@ -176,49 +178,61 @@ function run() {
     should_apply("all and (min-" + feature + ": " +
                  (Math.floor(value/em_size) - 1) + "em)");
     should_apply("all and (max-" + feature + ": " +
                  (Math.ceil(value/em_size) + 1) + "em)");
     should_not_apply("all and (max-" + feature + ": " +
                      (Math.floor(value/em_size) - 1) + "em)");
   }
 
-  iframe_style.width = "0";
+  change_state(function() {
+    iframe_style.width = "0";
+  });
   should_apply("all and (height)");
   should_not_apply("all and (width)");
-  iframe_style.height = "0";
+  change_state(function() {
+    iframe_style.height = "0";
+  });
   should_not_apply("all and (height)");
   should_not_apply("all and (width)");
   should_apply("all and (device-height)");
   should_apply("all and (device-width)");
-  iframe_style.width = width_val + "px";
+  change_state(function() {
+    iframe_style.width = width_val + "px";
+  });
   should_not_apply("all and (height)");
   should_apply("all and (width)");
-  iframe_style.height = height_val + "px";
+  change_state(function() {
+    iframe_style.height = height_val + "px";
+  });
   should_apply("all and (height)");
   should_apply("all and (width)");
 
   // ratio that reduces to 59/40
-  iframe_style.width = "236px";
-  iframe_style.height = "160px";
+  change_state(function() {
+    iframe_style.width = "236px";
+    iframe_style.height = "160px";
+  });
   expression_should_be_parseable("orientation");
   expression_should_be_parseable("orientation: portrait");
   expression_should_be_parseable("orientation: landscape");
   expression_should_not_be_parseable("min-orientation");
   expression_should_not_be_parseable("min-orientation: portrait");
   expression_should_not_be_parseable("min-orientation: landscape");
   expression_should_not_be_parseable("max-orientation");
   expression_should_not_be_parseable("max-orientation: portrait");
   expression_should_not_be_parseable("max-orientation: landscape");
   should_apply("(orientation)");
   should_apply("(orientation: landscape)");
   should_not_apply("(orientation: portrait)");
   should_apply("not all and (orientation: portrait)");
   // ratio that reduces to 59/80
-  iframe_style.height = "320px";
+  change_state(function() {
+    iframe_style.height = "320px";
+  });
   should_apply("(orientation)");
   should_not_apply("(orientation: landscape)");
   should_apply("not all and (orientation: landscape)");
   should_apply("(orientation: portrait)");
 
   should_apply("(aspect-ratio: 59/80)");
   should_not_apply("(aspect-ratio: 58/80)");
   should_not_apply("(aspect-ratio: 59/81)");
@@ -462,14 +476,19 @@ function run() {
   should_apply("all,[badsyntax]");
   should_apply("[badsyntax],all");
   should_not_apply("badmedium,[badsyntax]");
   should_not_apply("[badsyntax],badmedium");
 
   SimpleTest.finish();
 }
 
+function change_state(func)
+{
+  func();
+}
+
 </script>
 </pre>
 </body>
 </html>
 
 
