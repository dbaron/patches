From: L. David Baron <dbaron@dbaron.org>

Assert that we destroy ElementAnimations/ElementTransitions through its Destroy() method.  (Bug 653644)  r=bzbarsky

diff --git a/layout/style/AnimationCommon.h b/layout/style/AnimationCommon.h
--- a/layout/style/AnimationCommon.h
+++ b/layout/style/AnimationCommon.h
@@ -143,22 +143,27 @@ private:
 
 struct CommonElementAnimationData : public PRCList
 {
   CommonElementAnimationData(dom::Element *aElement, nsIAtom *aElementProperty,
                              CommonAnimationManager *aManager)
     : mElement(aElement)
     , mElementProperty(aElementProperty)
     , mManager(aManager)
+#ifdef DEBUG
+    , mCalledPropertyDtor(false)
+#endif
   {
     MOZ_COUNT_CTOR(CommonElementAnimationData);
     PR_INIT_CLIST(this);
   }
   ~CommonElementAnimationData()
   {
+    NS_ABORT_IF_FALSE(mCalledPropertyDtor,
+                      "must call destructor through element property dtor");
     MOZ_COUNT_DTOR(CommonElementAnimationData);
     PR_REMOVE_LINK(this);
     mManager->ElementDataRemoved();
   }
 
   void Destroy()
   {
     // This will call our destructor.
@@ -167,14 +172,18 @@ struct CommonElementAnimationData : publ
 
   dom::Element *mElement;
 
   // the atom we use in mElement's prop table (must be a static atom,
   // i.e., in an atom list)
   nsIAtom *mElementProperty;
 
   CommonAnimationManager *mManager;
+
+#ifdef DEBUG
+  bool mCalledPropertyDtor;
+#endif
 };
 
 }
 }
 
 #endif /* !defined(mozilla_css_AnimationCommon_h) */
diff --git a/layout/style/nsAnimationManager.cpp b/layout/style/nsAnimationManager.cpp
--- a/layout/style/nsAnimationManager.cpp
+++ b/layout/style/nsAnimationManager.cpp
@@ -154,16 +154,20 @@ struct ElementAnimations : public mozill
 
 static void
 ElementAnimationsPropertyDtor(void           *aObject,
                               nsIAtom        *aPropertyName,
                               void           *aPropertyValue,
                               void           *aData)
 {
   ElementAnimations *ea = static_cast<ElementAnimations*>(aPropertyValue);
+#ifdef DEBUG
+  NS_ABORT_IF_FALSE(!ea->mCalledPropertyDtor, "can't call dtor twice");
+  ea->mCalledPropertyDtor = true;
+#endif
   delete ea;
 }
 
 void
 ElementAnimations::EnsureStyleRuleFor(TimeStamp aRefreshTime,
                                       EventArray& aEventsToDispatch)
 {
   if (!mNeedsRefreshes) {
diff --git a/layout/style/nsTransitionManager.cpp b/layout/style/nsTransitionManager.cpp
--- a/layout/style/nsTransitionManager.cpp
+++ b/layout/style/nsTransitionManager.cpp
@@ -165,16 +165,20 @@ struct ElementTransitions : public mozil
 
 static void
 ElementTransitionsPropertyDtor(void           *aObject,
                                nsIAtom        *aPropertyName,
                                void           *aPropertyValue,
                                void           *aData)
 {
   ElementTransitions *et = static_cast<ElementTransitions*>(aPropertyValue);
+#ifdef DEBUG
+  NS_ABORT_IF_FALSE(!et->mCalledPropertyDtor, "can't call dtor twice");
+  et->mCalledPropertyDtor = true;
+#endif
   delete et;
 }
 
 void
 ElementTransitions::EnsureStyleRuleFor(TimeStamp aRefreshTime)
 {
   if (!mStyleRule || mStyleRuleRefreshTime != aRefreshTime) {
     mStyleRule = new css::AnimValuesStyleRule();
