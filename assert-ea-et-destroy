From: L. David Baron <dbaron@dbaron.org>

Assert that we destroy ElementAnimations/ElementTransitions through its Destroy() method.

diff --git a/layout/style/AnimationCommon.h b/layout/style/AnimationCommon.h
--- a/layout/style/AnimationCommon.h
+++ b/layout/style/AnimationCommon.h
@@ -143,38 +143,50 @@ private:
 
 struct CommonElementAnimationData : public PRCList
 {
   CommonElementAnimationData(dom::Element *aElement, nsIAtom *aElementProperty,
                              CommonAnimationManager *aManager)
     : mElement(aElement)
     , mElementProperty(aElementProperty)
     , mManager(aManager)
+#ifdef DEBUG
+    , mCalledDestroy(false)
+#endif
   {
     MOZ_COUNT_CTOR(CommonElementAnimationData);
     PR_INIT_CLIST(this);
   }
   ~CommonElementAnimationData()
   {
+    NS_ABORT_IF_FALSE(mCalledDestroy, "must call destructor through Destroy");
     MOZ_COUNT_DTOR(CommonElementAnimationData);
     PR_REMOVE_LINK(this);
     mManager->ElementDataRemoved();
   }
 
   void Destroy()
   {
+#ifdef DEBUG
+    NS_ABORT_IF_FALSE(!mCalledDestroy, "can't call Destroy twice");
+    mCalledDestroy = true;
+#endif
     // This will call our destructor.
     mElement->DeleteProperty(mElementProperty);
   }
 
   dom::Element *mElement;
 
   // the atom we use in mElement's prop table (must be a static atom,
   // i.e., in an atom list)
   nsIAtom *mElementProperty;
 
   CommonAnimationManager *mManager;
+
+#ifdef DEBUG
+  bool mCalledDestroy;
+#endif
 };
 
 }
 }
 
 #endif /* !defined(mozilla_css_AnimationCommon_h) */
