From: L. David Baron <dbaron@dbaron.org>

Add --debugger-args option to reftest mach commands.

This allows useful argument combinations such as:
  --debugger valgrind
  --debugger-args "--tool=memcheck --leak-check=no --trace-children=yes --num-callers=50"

diff --git a/layout/tools/reftest/mach_commands.py b/layout/tools/reftest/mach_commands.py
--- a/layout/tools/reftest/mach_commands.py
+++ b/layout/tools/reftest/mach_commands.py
@@ -209,33 +209,35 @@ class ReftestRunner(MozbuildObject):
 
         # Don't enable oop for crashtest until they run oop in automation
         if suite == 'reftest':
             options.oop = True
 
         return reftest.run_remote_reftests(parser, options, args)
 
     def run_desktop_test(self, test_file=None, filter=None, suite=None,
-            debugger=None, parallel=False, shuffle=False,
+            debugger=None, debugger_args=None, parallel=False, shuffle=False,
             e10s=False, extraPrefs=None, this_chunk=None, total_chunks=None):
         """Runs a reftest.
 
         test_file is a path to a test file. It can be a relative path from the
         top source directory, an absolute filename, or a directory containing
         test files.
 
         filter is a regular expression (in JS syntax, as could be passed to the
         RegExp constructor) to select which reftests to run from the manifest.
 
         suite is the type of reftest to run. It can be one of ('reftest',
         'crashtest', 'jstestbrowser').
 
         debugger is the program name (in $PATH) or the full path of the
         debugger to run.
 
+        debugger_args are the arguments passed to the debugger.
+
         parallel indicates whether tests should be run in parallel or not.
 
         shuffle indicates whether to run tests in random order.
         """
 
         if suite not in ('reftest', 'reftest-ipc', 'crashtest', 'crashtest-ipc', 'jstestbrowser'):
             raise Exception('None or unrecognized reftest suite type.')
 
@@ -250,16 +252,27 @@ class ReftestRunner(MozbuildObject):
         if filter:
             extra_args.extend(['--filter', self._make_shell_string(filter)])
 
         pass_thru = False
 
         if debugger:
             extra_args.append('--debugger=%s' % debugger)
             pass_thru = True
+            if debugger_args:
+                # Since we stringify extra_args into an environment
+                # variable below, we need to quote in order to allow
+                # multiple args to be passed to the debugger (although
+                # this doesn't work for args that themselves contain
+                # quotes).
+                extra_args.append('--debugger-args="%s"' % debugger_args)
+        else:
+            if debugger_args:
+                print("--debugger-args passed, but no debugger specified.")
+                return 1
 
         if parallel:
             extra_args.append('--run-tests-in-parallel')
 
         if shuffle:
             extra_args.append('--shuffle')
 
         if e10s:
@@ -271,32 +284,39 @@ class ReftestRunner(MozbuildObject):
 
         if this_chunk:
             extra_args.append('--this-chunk=%s' % this_chunk)
 
         if total_chunks:
             extra_args.append('--total-chunks=%s' % total_chunks)
 
         if extra_args:
+            # If we switch to using extra_args as an array rather than
+            # stringifying it into an environment variable, we should
+            # probably stop quoting the value of --debugger-args above.
             args = [os.environ.get(b'EXTRA_TEST_ARGS', '')]
             args.extend(extra_args)
             env[b'EXTRA_TEST_ARGS'] = ' '.join(args)
 
         # TODO hook up harness via native Python
         return self._run_make(directory='.', target=suite, append_env=env,
             pass_thru=pass_thru, ensure_exit_code=False)
 
 
 def ReftestCommand(func):
     """Decorator that adds shared command arguments to reftest commands."""
 
     debugger = CommandArgument('--debugger', metavar='DEBUGGER',
         help=DEBUGGER_HELP)
     func = debugger(func)
 
+    debugger_args = CommandArgument('--debugger-args', metavar='DEBUGGER_ARGS',
+        help='Arguments to pass to the debugger.')
+    func = debugger_args(func)
+
     flter = CommandArgument('--filter', metavar='REGEX',
         help='A JS regular expression to match test URLs against, to select '
              'a subset of tests to run.')
     func = flter(func)
 
     path = CommandArgument('test_file', nargs='?', metavar='MANIFEST',
         help='Reftest manifest file, or a directory in which to select '
              'reftest.list. If omitted, the entire test suite is executed.')
