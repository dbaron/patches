From: L. David Baron <dbaron@dbaron.org>

Add more parameters to nsStyleSet::ResolveStyleForRules.  (Bug 435441)

diff --git a/content/canvas/src/nsCanvasRenderingContext2D.cpp b/content/canvas/src/nsCanvasRenderingContext2D.cpp
--- a/content/canvas/src/nsCanvasRenderingContext2D.cpp
+++ b/content/canvas/src/nsCanvasRenderingContext2D.cpp
@@ -1911,23 +1911,25 @@ nsCanvasRenderingContext2D::SetFont(cons
         rv = CreateFontStyleRule(NS_LITERAL_STRING("10px sans-serif"),
                                  mCSSParser.get(),
                                  content.get(),
                                  getter_AddRefs(parentRule));
         if (NS_FAILED(rv))
             return rv;
         nsCOMArray<nsIStyleRule> parentRules;
         parentRules.AppendObject(parentRule);
-        parentContext = styleSet->ResolveStyleForRules(nsnull, parentRules);
+        parentContext = styleSet->ResolveStyleForRules(nsnull, nsnull,
+                                                       nsnull, parentRules);
     }
 
     if (!parentContext)
         return NS_ERROR_FAILURE;
 
-    nsRefPtr<nsStyleContext> sc = styleSet->ResolveStyleForRules(parentContext, rules);
+    nsRefPtr<nsStyleContext> sc =
+        styleSet->ResolveStyleForRules(parentContext, nsnull, nsnull, rules);
     if (!sc)
         return NS_ERROR_FAILURE;
     const nsStyleFont* fontStyle = sc->GetStyleFont();
 
     NS_ASSERTION(fontStyle, "Could not obtain font style");
 
     // use CSS pixels instead of dev pixels to avoid being affected by page zoom
     const PRUint32 aupcp = nsPresContext::AppUnitsPerCSSPixel();
diff --git a/layout/style/nsStyleSet.cpp b/layout/style/nsStyleSet.cpp
--- a/layout/style/nsStyleSet.cpp
+++ b/layout/style/nsStyleSet.cpp
@@ -696,29 +696,36 @@ nsStyleSet::ResolveStyleFor(nsIContent* 
     // Now reset the walker back to the root of the tree.
     mRuleWalker->Reset();
   }
 
   return result;
 }
 
 already_AddRefed<nsStyleContext>
-nsStyleSet::ResolveStyleForRules(nsStyleContext* aParentContext, const nsCOMArray<nsIStyleRule> &rules)
+nsStyleSet::ResolveStyleForRules(nsStyleContext* aParentContext,
+                                 nsIAtom* aPseudoTag,
+                                 nsRuleNode *aRuleNode,
+                                 const nsCOMArray<nsIStyleRule> &aRules)
 {
   NS_ENSURE_FALSE(mInShutdown, nsnull);
   nsStyleContext* result = nsnull;
   nsPresContext *presContext = PresContext();
 
   if (presContext) {
     NS_ASSERTION(mRuleWalker->AtRoot(), "rule walker must be at root");
+    if (aRuleNode)
+      mRuleWalker->SetCurrentNode(aRuleNode);
+    // FIXME: Perhaps this should be passed in, but it probably doesn't
+    // matter.
     mRuleWalker->SetLevel(eDocSheet, PR_FALSE);
-    for (PRInt32 i = 0; i < rules.Count(); i++) {
-      mRuleWalker->Forward(rules.ObjectAt(i));
+    for (PRInt32 i = 0; i < aRules.Count(); i++) {
+      mRuleWalker->Forward(aRules.ObjectAt(i));
     }
-    result = GetContext(presContext, aParentContext, nsnull).get();
+    result = GetContext(presContext, aParentContext, aPseudoTag).get();
 
     // Now reset the walker back to the root of the tree.
     mRuleWalker->Reset();
   }
   return result;
 }
 
 already_AddRefed<nsStyleContext>
diff --git a/layout/style/nsStyleSet.h b/layout/style/nsStyleSet.h
--- a/layout/style/nsStyleSet.h
+++ b/layout/style/nsStyleSet.h
@@ -92,19 +92,24 @@ class nsStyleSet
 
   // enable / disable the Quirk style sheet
   void EnableQuirkStyleSheet(PRBool aEnable);
 
   // get a style context for a non-pseudo frame.
   already_AddRefed<nsStyleContext>
   ResolveStyleFor(nsIContent* aContent, nsStyleContext* aParentContext);
 
-  // get a style context from some rules
+  // get a style context for a set of style rules consisting of the rule
+  // list represented by aRuleNode (if null, the empty list) followed by the
+  // rules in the |aRules| array.
   already_AddRefed<nsStyleContext>
-  ResolveStyleForRules(nsStyleContext* aParentContext, const nsCOMArray<nsIStyleRule> &rules);
+  ResolveStyleForRules(nsStyleContext* aParentContext,
+                       nsIAtom* aPseudoTag,
+                       nsRuleNode *aRuleNode,
+                       const nsCOMArray<nsIStyleRule> &aRules);
 
   // Get a style context for a non-element (which no rules will match),
   // such as text nodes, placeholder frames, and the nsFirstLetterFrame
   // for everything after the first letter.
   //
   // Perhaps this should go away and we shouldn't even create style
   // contexts for such content nodes.  However, not doing any rule
   // matching for them is a first step.
