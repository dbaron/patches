From: L. David Baron <dbaron@dbaron.org>

Bug 1489297 patch 1 - Rename function that gets system manufacturer data from WMI in preparation for using it for memory error correction as well.

Differential Revision: https://phabricator.services.mozilla.com/D5199

diff --git a/toolkit/xre/nsAppRunner.cpp b/toolkit/xre/nsAppRunner.cpp
--- a/toolkit/xre/nsAppRunner.cpp
+++ b/toolkit/xre/nsAppRunner.cpp
@@ -3666,21 +3666,21 @@ XREMain::XRE_mainInit(bool* aExitFlag)
     return 0;
   }
 
   return 0;
 }
 
 #ifdef XP_WIN
 /**
- * Uses WMI to read some manufacturer information that may be useful for
- * diagnosing hardware-specific crashes. This function is best-effort; failures
- * shouldn't burden the caller. COM must be initialized before calling.
+ * Uses WMI to read some information that may be useful for diagnosing
+ * crashes. This function is best-effort; failures shouldn't burden the
+ * caller. COM must be initialized before calling.
  */
-static void AnnotateSystemManufacturer()
+static void AnnotateWMIData()
 {
   RefPtr<IWbemLocator> locator;
 
   HRESULT hr = CoCreateInstance(CLSID_WbemLocator, nullptr, CLSCTX_INPROC_SERVER,
                                 IID_IWbemLocator, getter_AddRefs(locator));
 
   if (FAILED(hr)) {
     return;
@@ -3698,16 +3698,18 @@ static void AnnotateSystemManufacturer()
   hr = CoSetProxyBlanket(services, RPC_C_AUTHN_WINNT, RPC_C_AUTHZ_NONE, nullptr,
                          RPC_C_AUTHN_LEVEL_CALL, RPC_C_IMP_LEVEL_IMPERSONATE,
                          nullptr, EOAC_NONE);
 
   if (FAILED(hr)) {
     return;
   }
 
+  // Annotate information about the system manufacturer.
+
   RefPtr<IEnumWbemClassObject> enumerator;
 
   hr = services->ExecQuery(_bstr_t(L"WQL"), _bstr_t(L"SELECT * FROM Win32_BIOS"),
                            WBEM_FLAG_FORWARD_ONLY | WBEM_FLAG_RETURN_IMMEDIATELY,
                            nullptr, getter_AddRefs(enumerator));
 
   if (FAILED(hr) || !enumerator) {
     return;
@@ -3731,25 +3733,25 @@ static void AnnotateSystemManufacturer()
     CrashReporter::AnnotateCrashReport(
       CrashReporter::Annotation::BIOS_Manufacturer,
       NS_ConvertUTF16toUTF8(V_BSTR(&value)));
   }
 
   VariantClear(&value);
 }
 
-static void PR_CALLBACK AnnotateSystemManufacturer_ThreadStart(void*)
+static void PR_CALLBACK AnnotateWMIData_ThreadStart(void*)
 {
   HRESULT hr = CoInitialize(nullptr);
 
   if (FAILED(hr)) {
     return;
   }
 
-  AnnotateSystemManufacturer();
+  AnnotateWMIData();
 
   CoUninitialize();
 }
 #endif // XP_WIN
 
 #if defined(XP_LINUX) && !defined(ANDROID)
 
 static void
@@ -4460,17 +4462,17 @@ XREMain::XRE_mainRun()
     CrashReporter::Annotation::FramePoisonSize,
     uint32_t(gMozillaPoisonSize));
 
   bool includeContextHeap =
     Preferences::GetBool("toolkit.crashreporter.include_context_heap", false);
   CrashReporter::SetIncludeContextHeap(includeContextHeap);
 
 #ifdef XP_WIN
-  PR_CreateThread(PR_USER_THREAD, AnnotateSystemManufacturer_ThreadStart, 0,
+  PR_CreateThread(PR_USER_THREAD, AnnotateWMIData_ThreadStart, 0,
                   PR_PRIORITY_LOW, PR_GLOBAL_THREAD, PR_UNJOINABLE_THREAD, 0);
 #endif
 
 #if defined(XP_LINUX) && !defined(ANDROID)
   PR_CreateThread(PR_USER_THREAD, AnnotateLSBRelease, 0, PR_PRIORITY_LOW,
                   PR_GLOBAL_THREAD, PR_UNJOINABLE_THREAD, 0);
 #endif
 
