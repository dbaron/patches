From: Brian Hackett <bhackett1024@gmail.com>

Bug 685186

diff --git a/js/src/jsinfer.cpp b/js/src/jsinfer.cpp
--- a/js/src/jsinfer.cpp
+++ b/js/src/jsinfer.cpp
@@ -803,16 +803,20 @@ ScriptAnalysis::pruneTypeBarriers(JSCont
  * :FIXME: this heuristic sucks, and doesn't handle calls.
  */
 static const uint32 BARRIER_OBJECT_LIMIT = 10;
 
 void ScriptAnalysis::breakTypeBarriers(JSContext *cx, uint32 offset, bool all)
 {
     pruneTypeBarriers(cx, offset);
 
+    bool resetResolving = !cx->compartment->types.resolving;
+    if (resetResolving)
+        cx->compartment->types.resolving = true;
+
     TypeBarrier **pbarrier = &getCode(offset).typeBarriers;
     while (*pbarrier) {
         TypeBarrier *barrier = *pbarrier;
         if (barrier->target->hasType(barrier->type) ) {
             /*
              * Barrier is now obsolete, it can be removed. This is not
              * redundant with the pruneTypeBarriers() call above, as breaking
              * previous type barriers may have modified the target type set.
@@ -828,16 +832,21 @@ void ScriptAnalysis::breakTypeBarriers(J
                    barrier->target->getObjectCount() >= BARRIER_OBJECT_LIMIT) {
             /* Maximum number of objects in the set exceeded. */
             barrier->target->addType(cx, barrier->type);
             *pbarrier = barrier->next;
         } else {
             pbarrier = &barrier->next;
         }
     }
+
+    if (resetResolving) {
+        cx->compartment->types.resolving = false;
+        cx->compartment->types.resolvePending(cx);
+    }
 }
 
 void ScriptAnalysis::breakTypeBarriersSSA(JSContext *cx, const SSAValue &v)
 {
     if (v.kind() != SSAValue::PUSHED)
         return;
 
     uint32 offset = v.pushedOffset();
