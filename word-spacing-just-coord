Make 'word-spacing: normal' just compute to '0', since that's what CSS 2.1 says to do, and thus change nsStyleText::mWordSpacing from nsStyleCoord to nscoord.  (Bug 470705)  r+sr=roc

diff --git a/layout/generic/nsTextFrameThebes.cpp b/layout/generic/nsTextFrameThebes.cpp
--- a/layout/generic/nsTextFrameThebes.cpp
+++ b/layout/generic/nsTextFrameThebes.cpp
@@ -1354,19 +1354,18 @@ BuildTextRunsScanner::GetNextBreakBefore
   PRUint32 index = *aIndex;
   if (index >= mLineBreakBeforeFrames.Length())
     return nsnull;
   *aIndex = index + 1;
   return static_cast<nsTextFrame*>(mLineBreakBeforeFrames.ElementAt(index));
 }
 
 static PRUint32
-GetSpacingFlags(const nsStyleCoord& aStyleCoord)
-{
-  nscoord spacing = StyleToCoord(aStyleCoord);
+GetSpacingFlags(nscoord spacing)
+{
   if (!spacing)
     return 0;
   if (spacing > 0)
     return gfxTextRunFactory::TEXT_ENABLE_SPACING;
   return gfxTextRunFactory::TEXT_ENABLE_SPACING |
          gfxTextRunFactory::TEXT_ENABLE_NEGATIVE_SPACING;
 }
 
@@ -1524,17 +1523,17 @@ BuildTextRunsScanner::BuildTextRunForFra
     nsTextFrame* f = mappedFlow->mStartFrame;
 
     lastStyleContext = f->GetStyleContext();
     // Detect use of text-transform or font-variant anywhere in the run
     textStyle = f->GetStyleText();
     if (NS_STYLE_TEXT_TRANSFORM_NONE != textStyle->mTextTransform) {
       anyTextTransformStyle = PR_TRUE;
     }
-    textFlags |= GetSpacingFlags(textStyle->mLetterSpacing);
+    textFlags |= GetSpacingFlags(StyleToCoord(textStyle->mLetterSpacing));
     textFlags |= GetSpacingFlags(textStyle->mWordSpacing);
     nsTextFrameUtils::CompressionMode compression =
       CSSWhitespaceToCompressionMode[textStyle->mWhiteSpace];
     if (enabledJustification && !textStyle->WhiteSpaceIsSignificant()) {
       textFlags |= gfxTextRunFactory::TEXT_ENABLE_SPACING;
     }
     fontStyle = f->GetStyleFont();
     if (NS_STYLE_FONT_VARIANT_SMALL_CAPS == fontStyle->mFont.variant) {
@@ -2135,17 +2134,17 @@ public:
                    const gfxSkipCharsIterator& aStart, PRInt32 aLength,
                    nsIFrame* aLineContainer,
                    nscoord aOffsetFromBlockOriginForTabs)
     : mTextRun(aTextRun), mFontGroup(nsnull),
       mTextStyle(aTextStyle), mFrag(aFrag),
       mLineContainer(aLineContainer),
       mFrame(aFrame), mStart(aStart), mTempIterator(aStart),
       mTabWidths(nsnull), mLength(aLength),
-      mWordSpacing(StyleToCoord(mTextStyle->mWordSpacing)),
+      mWordSpacing(mTextStyle->mWordSpacing),
       mLetterSpacing(StyleToCoord(mTextStyle->mLetterSpacing)),
       mJustificationSpacing(0),
       mHyphenWidth(-1),
       mOffsetFromBlockOriginForTabs(aOffsetFromBlockOriginForTabs),
       mReflowing(PR_TRUE)
   {
     NS_ASSERTION(mStart.IsInitialized(), "Start not initialized?");
   }
@@ -2158,17 +2157,17 @@ public:
   PropertyProvider(nsTextFrame* aFrame, const gfxSkipCharsIterator& aStart)
     : mTextRun(aFrame->GetTextRun()), mFontGroup(nsnull),
       mTextStyle(aFrame->GetStyleText()),
       mFrag(aFrame->GetContent()->GetText()),
       mLineContainer(nsnull),
       mFrame(aFrame), mStart(aStart), mTempIterator(aStart),
       mTabWidths(nsnull),
       mLength(aFrame->GetContentLength()),
-      mWordSpacing(StyleToCoord(mTextStyle->mWordSpacing)),
+      mWordSpacing(mTextStyle->mWordSpacing),
       mLetterSpacing(StyleToCoord(mTextStyle->mLetterSpacing)),
       mJustificationSpacing(0),
       mHyphenWidth(-1),
       mOffsetFromBlockOriginForTabs(0),
       mReflowing(PR_FALSE)
   {
     NS_ASSERTION(mTextRun, "Textrun not initialized!");
   }
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -2200,17 +2200,17 @@ nsComputedDOMStyle::GetLetterSpacing(nsI
 }
 
 nsresult
 nsComputedDOMStyle::GetWordSpacing(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
-  SetValueToCoord(val, GetStyleText()->mWordSpacing);
+  val->SetAppUnits(GetStyleText()->mWordSpacing);
 
   return CallQueryInterface(val, aValue);
 }
 
 nsresult
 nsComputedDOMStyle::GetWhiteSpace(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue *val = GetROCSSPrimitiveValue();
diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -3034,19 +3034,32 @@ nsRuleNode::ComputeTextData(void* aStart
 
   // white-space: enum, normal, inherit, initial
   SetDiscrete(textData.mWhiteSpace, text->mWhiteSpace, inherited,
               SETDSC_ENUMERATED | SETDSC_NORMAL, parentText->mWhiteSpace,
               NS_STYLE_WHITESPACE_NORMAL, 0, 0,
               NS_STYLE_WHITESPACE_NORMAL, 0);
  
   // word-spacing: normal, length, inherit
-  SetCoord(textData.mWordSpacing, text->mWordSpacing, parentText->mWordSpacing,
-           SETCOORD_LH | SETCOORD_NORMAL | SETCOORD_INITIAL_NORMAL,
-           aContext, mPresContext, inherited);
+  nsStyleCoord tempCoord;
+  if (SetCoord(textData.mWordSpacing, tempCoord,
+               nsStyleCoord(parentText->mWordSpacing),
+               SETCOORD_LH | SETCOORD_NORMAL | SETCOORD_INITIAL_NORMAL,
+               aContext, mPresContext, inherited)) {
+    if (tempCoord.GetUnit() == eStyleUnit_Coord) {
+      text->mWordSpacing = tempCoord.GetCoordValue();
+    } else if (tempCoord.GetUnit() == eStyleUnit_Normal) {
+      text->mWordSpacing = 0;
+    } else {
+      NS_NOTREACHED("unexpected unit");
+    }
+  } else {
+    NS_ASSERTION(textData.mWordSpacing.GetUnit() == eCSSUnit_Null,
+                 "unexpected unit");
+  }
 
   // word-wrap: enum, normal, inherit, initial
   SetDiscrete(textData.mWordWrap, text->mWordWrap, inherited,
               SETDSC_ENUMERATED | SETDSC_NORMAL, parentText->mWordWrap,
               NS_STYLE_WORDWRAP_NORMAL, 0, 0,
               NS_STYLE_WORDWRAP_NORMAL, 0);
 
   COMPUTE_END_INHERITED(Text, text)
diff --git a/layout/style/nsStyleContext.cpp b/layout/style/nsStyleContext.cpp
--- a/layout/style/nsStyleContext.cpp
+++ b/layout/style/nsStyleContext.cpp
@@ -691,19 +691,18 @@ void nsStyleContext::DumpRegressionData(
     (int)text->mTextTransform,
     (int)text->mWhiteSpace,
     (int)text->mWordWrap);
   text->mLetterSpacing.ToString(str);
   fprintf(out, "%s ", NS_ConvertUTF16toUTF8(str).get());
   text->mLineHeight.ToString(str);
   fprintf(out, "%s ", NS_ConvertUTF16toUTF8(str).get());
   text->mTextIndent.ToString(str);
-  fprintf(out, "%s ", NS_ConvertUTF16toUTF8(str).get());
-  text->mWordSpacing.ToString(str);
-  fprintf(out, "%s ", NS_ConvertUTF16toUTF8(str).get());
+  fprintf(out, "%s %d", NS_ConvertUTF16toUTF8(str).get(),
+                        (int)text->mWordSpacing);
   fprintf(out, "\" />\n");
   
   // TEXT RESET
   IndentBy(out,aIndent);
   const nsStyleTextReset* textReset = GetStyleTextReset();
   fprintf(out, "<textreset data=\"%d ",
     (int)textReset->mTextDecoration);
   textReset->mVerticalAlign.ToString(str);
diff --git a/layout/style/nsStyleStruct.cpp b/layout/style/nsStyleStruct.cpp
--- a/layout/style/nsStyleStruct.cpp
+++ b/layout/style/nsStyleStruct.cpp
@@ -1879,17 +1879,17 @@ nsStyleText::nsStyleText(void)
   mTextAlign = NS_STYLE_TEXT_ALIGN_DEFAULT;
   mTextTransform = NS_STYLE_TEXT_TRANSFORM_NONE;
   mWhiteSpace = NS_STYLE_WHITESPACE_NORMAL;
   mWordWrap = NS_STYLE_WORDWRAP_NORMAL;
 
   mLetterSpacing.SetNormalValue();
   mLineHeight.SetNormalValue();
   mTextIndent.SetCoordValue(0);
-  mWordSpacing.SetNormalValue();
+  mWordSpacing = 0;
 
   mTextShadow = nsnull;
 }
 
 nsStyleText::nsStyleText(const nsStyleText& aSource)
   : mTextAlign(aSource.mTextAlign),
     mTextTransform(aSource.mTextTransform),
     mWhiteSpace(aSource.mWhiteSpace),
diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -845,17 +845,17 @@ struct nsStyleText {
   PRUint8 mTextAlign;                   // [inherited] see nsStyleConsts.h
   PRUint8 mTextTransform;               // [inherited] see nsStyleConsts.h
   PRUint8 mWhiteSpace;                  // [inherited] see nsStyleConsts.h
   PRUint8 mWordWrap;                    // [inherited] see nsStyleConsts.h
 
   nsStyleCoord  mLetterSpacing;         // [inherited] coord, normal
   nsStyleCoord  mLineHeight;            // [inherited] coord, factor, normal
   nsStyleCoord  mTextIndent;            // [inherited] coord, percent
-  nsStyleCoord  mWordSpacing;           // [inherited] coord, normal
+  nscoord mWordSpacing;                 // [inherited]
 
   nsRefPtr<nsCSSShadowArray> mTextShadow; // [inherited] NULL in case of a zero-length
   
   PRBool WhiteSpaceIsSignificant() const {
     return mWhiteSpace == NS_STYLE_WHITESPACE_PRE ||
            mWhiteSpace == NS_STYLE_WHITESPACE_PRE_WRAP;
   }
 
diff --git a/layout/style/test/test_value_computation.html b/layout/style/test/test_value_computation.html
--- a/layout/style/test/test_value_computation.html
+++ b/layout/style/test/test_value_computation.html
@@ -44,19 +44,16 @@ var gBadComputed = {
   // NS_STYLE_COLUMN_COUNT_AUTO is 0
   "-moz-column-count": [ "0" ],
 
   "clip": [ "rect(auto,auto,auto,auto)" ],
 
   // The 'medium' keyword should be computing to '3px', not 'medium'.
   "outline-width": [ "3px" ],
 
-  // 'normal' should compute to 0
-  "word-spacing": [ "0", "0px", "-0em" ],
-
   // These values are treated as auto.
   "page-break-after": [ "avoid" ],
   "page-break-before": [ "avoid" ],
 
   // These are probably bogus tests...
   "-moz-outline-radius": [ "0%" ],
   "-moz-outline-radius-bottomleft": [ "0%" ],
   "-moz-outline-radius-bottomright": [ "0%" ],
