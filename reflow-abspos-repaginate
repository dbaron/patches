From: L. David Baron <dbaron@dbaron.org>

Bug 1365449 - Reflow absolutely positioned children when they need to be repaginated.  r?mats

This fixes the failure of
layout/reftests/pagination/dynamic-abspos-overflow-01-cols.xhtml with
the primary patch in bug 1308876.

Since it is an independently testable failure, I'm posting it as a
separate bug.

Without the patch, both reftests fail to rewrap in response to the
dynamic change, and the inner dark blue absolutely positioned element
remains wrapped at the wrong position when the inner light blue
relatively positioned element rewraps.  (I tested this only outside of
the reftest harness, but that should be sufficient.)

I verified manually that the height conditions were correct by modifying
both reftests to add some padding and border to #relpos and margin to
#abspos, changing the height of #abspos so that it was either exactly at
or just above the threshold where reflow was needed, and using
GECKO_DISPLAY_REFLOW_RULES_FILE debugging to verify that the reflow of
the absolutely positioned element did or didn't happen as expected.

MozReview-Commit-ID: 6ISgSEYyMiN

diff --git a/layout/generic/nsAbsoluteContainingBlock.cpp b/layout/generic/nsAbsoluteContainingBlock.cpp
--- a/layout/generic/nsAbsoluteContainingBlock.cpp
+++ b/layout/generic/nsAbsoluteContainingBlock.cpp
@@ -108,38 +108,65 @@ nsAbsoluteContainingBlock::RemoveFrame(n
   }
 
   mAbsoluteFrames.DestroyFrame(aOldFrame);
 }
 
 void
 nsAbsoluteContainingBlock::Reflow(nsContainerFrame*        aDelegatingFrame,
                                   nsPresContext*           aPresContext,
-                                  const ReflowInput& aReflowInput,
+                                  const ReflowInput&       aReflowInput,
                                   nsReflowStatus&          aReflowStatus,
                                   const nsRect&            aContainingBlock,
                                   AbsPosReflowFlags        aFlags,
                                   nsOverflowAreas*         aOverflowAreas)
 {
   nsReflowStatus reflowStatus;
 
   const bool reflowAll = aReflowInput.ShouldReflowAllKids();
   const bool isGrid = !!(aFlags & AbsPosReflowFlags::eIsGridContainerCB);
   nsIFrame* kidFrame;
   nsOverflowContinuationTracker tracker(aDelegatingFrame, true);
   for (kidFrame = mAbsoluteFrames.FirstChild(); kidFrame; kidFrame = kidFrame->GetNextSibling()) {
     bool kidNeedsReflow = reflowAll || NS_SUBTREE_DIRTY(kidFrame) ||
       FrameDependsOnContainer(kidFrame,
                               !!(aFlags & AbsPosReflowFlags::eCBWidthChanged),
                               !!(aFlags & AbsPosReflowFlags::eCBHeightChanged));
+    nscoord availBSize = aReflowInput.AvailableBSize();
+    const nsRect& cb = isGrid ? nsGridContainerFrame::GridItemCB(kidFrame)
+                              : aContainingBlock;
+    WritingMode containerWM = aReflowInput.GetWritingMode();
+    if (!kidNeedsReflow && availBSize != NS_UNCONSTRAINEDSIZE) {
+      // If we need to redo pagination on the kid, we need to reflow it.
+      // This can happen either if the available height shrunk and the
+      // kid (or its overflow that creates overflow containers) is now
+      // too large to fit in the available height, or if the available
+      // height has increased and the kid has a next-in-flow that we
+      // might need to pull from.
+      // Note that this always reflows kids that have 
+      WritingMode kidWM = kidFrame->GetWritingMode();
+      if (containerWM.GetBlockDir() != kidWM.GetBlockDir()) {
+        // Not sure what the right test would be here.
+        kidNeedsReflow = true;
+      } else {
+        nscoord kidBEnd = kidFrame->GetLogicalRect(cb.Size()).BEnd(kidWM);
+        nscoord kidOverflowBEnd =
+          LogicalRect(containerWM,
+                      kidFrame->GetScrollableOverflowRectRelativeToParent(),
+                      aContainingBlock.Size()).BEnd(containerWM);
+        MOZ_ASSERT(kidOverflowBEnd >= kidBEnd);
+        if (kidOverflowBEnd > availBSize ||
+            (kidBEnd < availBSize && kidFrame->GetNextInFlow())) {
+          kidNeedsReflow = true;
+        }
+      }
+    }
     if (kidNeedsReflow && !aPresContext->HasPendingInterrupt()) {
       // Reflow the frame
       nsReflowStatus kidStatus;
-      const nsRect& cb = isGrid ? nsGridContainerFrame::GridItemCB(kidFrame)
-                                : aContainingBlock;
       ReflowAbsoluteFrame(aDelegatingFrame, aPresContext, aReflowInput, cb,
                           aFlags, kidFrame, kidStatus, aOverflowAreas);
       nsIFrame* nextFrame = kidFrame->GetNextInFlow();
       if (!kidStatus.IsFullyComplete() &&
           aDelegatingFrame->IsFrameOfType(nsIFrame::eCanContainOverflowContainers)) {
         // Need a continuation
         if (!nextFrame) {
           nextFrame =
diff --git a/layout/reftests/pagination/abspos-breaking-dynamic-001-ref.html b/layout/reftests/pagination/abspos-breaking-dynamic-001-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/pagination/abspos-breaking-dynamic-001-ref.html
@@ -0,0 +1,41 @@
+<!DOCTYPE HTML>
+<title>Test for dynamic re-pagination of absolutely positioned elements</title>
+<link rel="author" title="L. David Baron" href="https://dbaron.org/">
+<style>
+
+#multicol {
+  height: 100px;
+  width: 300px;
+  background: yellow;
+  position: relative;
+}
+
+#relpos {
+  position: absolute;
+  background: aqua;
+  height: 100px;
+  width: 90px;
+  top: 0;
+  left: 0;
+}
+
+#abspos {
+  position: absolute;
+  right: 0;
+  height: 80px;
+  width: 50px;
+  background: blue;
+}
+
+</style>
+
+<div id="multicol">
+  <div id="relpos" style="left: 0">
+    <div id="abspos" style="top: 80px; height: 20px"></div>
+  </div>
+  <div id="relpos" style="left: 105px">
+    <div id="abspos" style="top: 0px; height: 60px"></div>
+  </div>
+  <div id="relpos" style="left: 210px; height: 50px">
+  </div>
+</div>
diff --git a/layout/reftests/pagination/abspos-breaking-dynamic-001.html b/layout/reftests/pagination/abspos-breaking-dynamic-001.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/pagination/abspos-breaking-dynamic-001.html
@@ -0,0 +1,44 @@
+<!DOCTYPE HTML>
+<title>Test for dynamic re-pagination of absolutely positioned elements</title>
+<link rel="author" title="L. David Baron" href="https://dbaron.org/">
+<style>
+
+#multicol {
+  columns: 3;
+  column-fill: auto;
+  column-gap: 15px;
+  height: 150px;
+  width: 300px;
+  background: yellow;
+}
+
+#relpos {
+  position: relative;
+  background: aqua;
+  height: 250px;
+}
+
+#abspos {
+  position: absolute;
+  top: 80px;
+  right: 0;
+  height: 80px;
+  width: 50px;
+  background: blue;
+}
+
+</style>
+
+<div id="multicol">
+  <div id="relpos">
+    <div id="abspos"></div>
+  </div>
+</div>
+
+<script>
+
+var mc = document.getElementById("multicol");
+mc.offsetHeight; // flush layout
+mc.style.height = "100px";
+
+</script>
diff --git a/layout/reftests/pagination/abspos-breaking-dynamic-002-ref.html b/layout/reftests/pagination/abspos-breaking-dynamic-002-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/pagination/abspos-breaking-dynamic-002-ref.html
@@ -0,0 +1,39 @@
+<!DOCTYPE HTML>
+<title>Test for dynamic re-pagination of absolutely positioned elements</title>
+<link rel="author" title="L. David Baron" href="https://dbaron.org/">
+<style>
+
+#multicol {
+  height: 150px;
+  width: 300px;
+  background: yellow;
+  position: relative;
+}
+
+#relpos {
+  position: absolute;
+  background: aqua;
+  height: 150px;
+  width: 90px;
+  top: 0;
+  left: 0;
+}
+
+#abspos {
+  position: absolute;
+  right: 0;
+  height: 80px;
+  width: 50px;
+  background: blue;
+}
+
+</style>
+
+<div id="multicol">
+  <div id="relpos" style="left: 0">
+    <div id="abspos" style="top: 80px; height: 70px"></div>
+  </div>
+  <div id="relpos" style="left: 105px; height: 100px;">
+    <div id="abspos" style="top: 0px; height: 10px"></div>
+  </div>
+</div>
diff --git a/layout/reftests/pagination/abspos-breaking-dynamic-002.html b/layout/reftests/pagination/abspos-breaking-dynamic-002.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/pagination/abspos-breaking-dynamic-002.html
@@ -0,0 +1,44 @@
+<!DOCTYPE HTML>
+<title>Test for dynamic re-pagination of absolutely positioned elements</title>
+<link rel="author" title="L. David Baron" href="https://dbaron.org/">
+<style>
+
+#multicol {
+  columns: 3;
+  column-fill: auto;
+  column-gap: 15px;
+  height: 100px;
+  width: 300px;
+  background: yellow;
+}
+
+#relpos {
+  position: relative;
+  background: aqua;
+  height: 250px;
+}
+
+#abspos {
+  position: absolute;
+  top: 80px;
+  right: 0;
+  height: 80px;
+  width: 50px;
+  background: blue;
+}
+
+</style>
+
+<div id="multicol">
+  <div id="relpos">
+    <div id="abspos"></div>
+  </div>
+</div>
+
+<script>
+
+var mc = document.getElementById("multicol");
+mc.offsetHeight; // flush layout
+mc.style.height = "150px";
+
+</script>
diff --git a/layout/reftests/pagination/abspos-breaking-dynamic-003-ref.html b/layout/reftests/pagination/abspos-breaking-dynamic-003-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/pagination/abspos-breaking-dynamic-003-ref.html
@@ -0,0 +1,49 @@
+<!DOCTYPE HTML>
+<title>Test for dynamic re-pagination of absolutely positioned elements</title>
+<link rel="author" title="L. David Baron" href="https://dbaron.org/">
+<style>
+
+#multicol {
+  height: 140px;
+  width: 300px;
+  background: yellow;
+  position: relative;
+}
+
+#relpos {
+  position: absolute;
+  background: aqua;
+  height: 140px;
+  width: 90px;
+  top: 0;
+  left: 0;
+}
+
+#abspos {
+  position: absolute;
+  right: 0;
+  height: 80px;
+  width: 50px;
+  background: blue;
+}
+
+#overflow {
+  position: absolute;
+  width: 30px;
+  background: grey;
+}
+
+</style>
+
+<div id="multicol">
+  <div id="relpos" style="left: 0">
+    <div id="abspos" style="top: 60px; height: 80px">
+      <div id="overflow" style="height: 80px"></div>
+    </div>
+  </div>
+  <div id="relpos" style="left: 105px; height: 110px;">
+    <div id="abspos" style="top: 0px; height: 0px">
+      <div id="overflow" style="height: 20px"></div>
+    </div>
+  </div>
+</div>
diff --git a/layout/reftests/pagination/abspos-breaking-dynamic-003.html b/layout/reftests/pagination/abspos-breaking-dynamic-003.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/pagination/abspos-breaking-dynamic-003.html
@@ -0,0 +1,49 @@
+<!DOCTYPE HTML>
+<title>Test for dynamic re-pagination of absolutely positioned elements</title>
+<link rel="author" title="Mats Palmgren" href="mailto:mats@mozilla.com">
+<style>
+
+#multicol {
+  columns: 3;
+  column-fill: auto;
+  column-gap: 15px;
+  height: 500px;
+  width: 300px;
+  background: yellow;
+}
+
+#relpos {
+  position: relative;
+  background: aqua;
+  height: 250px;
+}
+
+#abspos {
+  position: absolute;
+  top: 60px;
+  right: 0;
+  height: 80px;
+  width: 50px;
+  background: blue;
+}
+
+#overflow {
+  height: 100px;
+  width: 30px;
+  background: grey;
+}
+</style>
+
+<div id="multicol">
+  <div id="relpos">
+    <div id="abspos"><div id="overflow"></div></div>
+  </div>
+</div>
+
+<script>
+
+var mc = document.getElementById("multicol");
+mc.offsetHeight; // flush layout
+mc.style.height = "140px";
+
+</script>
diff --git a/layout/reftests/pagination/reftest.list b/layout/reftests/pagination/reftest.list
--- a/layout/reftests/pagination/reftest.list
+++ b/layout/reftests/pagination/reftest.list
@@ -8,16 +8,19 @@
 == abspos-breaking-004.html abspos-breaking-004-ref.html
 == abspos-breaking-005.html abspos-breaking-005-ref.html
 == abspos-breaking-006.html abspos-breaking-006-ref.html
 pref(layout.css.box-decoration-break.enabled,true) == abspos-breaking-007.html abspos-breaking-007-ref.html
 pref(layout.css.box-decoration-break.enabled,true) == abspos-breaking-008.html abspos-breaking-008-ref.html
 pref(layout.css.box-decoration-break.enabled,true) == abspos-breaking-009.html abspos-breaking-009-ref.html
 pref(layout.css.box-decoration-break.enabled,true) == abspos-breaking-010.html abspos-breaking-010-ref.html
 == abspos-breaking-011.html abspos-breaking-011-ref.html
+== abspos-breaking-dynamic-001.html abspos-breaking-dynamic-001-ref.html
+== abspos-breaking-dynamic-002.html abspos-breaking-dynamic-002-ref.html
+== abspos-breaking-dynamic-003.html abspos-breaking-dynamic-003-ref.html
 == abspos-overflow-01.xhtml abspos-overflow-01.ref.xhtml
 == abspos-overflow-01-cols.xhtml abspos-overflow-01-cols.ref.xhtml
 == border-breaking-000-cols.xhtml border-breaking-000-cols.ref.xhtml
 == border-breaking-001-cols.xhtml border-breaking-001-cols.ref.xhtml
 == border-breaking-002-cols.xhtml border-breaking-002-cols.ref.xhtml
 == border-breaking-003-cols.xhtml border-breaking-003-cols.ref.xhtml
 fails-if(!stylo) == border-breaking-004-cols.xhtml border-breaking-002-cols.ref.xhtml
 == content-inserted-000.xhtml content-inserted-000.ref.xhtml
