From: L. David Baron <dbaron@dbaron.org>

Make hypothetical box calculation consider types that are inline-outside rather than just inline.  (Bug 505706)

diff --git a/layout/generic/nsHTMLReflowState.cpp b/layout/generic/nsHTMLReflowState.cpp
--- a/layout/generic/nsHTMLReflowState.cpp
+++ b/layout/generic/nsHTMLReflowState.cpp
@@ -972,17 +972,17 @@ nsHTMLReflowState::CalculateHypothetical
       aHypotheticalBox.mTop = placeholderOffset.y;
     } else {
       NS_ASSERTION(iter.GetContainer() == blockFrame,
                    "Found placeholder in wrong block!");
       nsBlockFrame::line_iterator lineBox = iter.GetLine();
 
       // How we determine the hypothetical box depends on whether the element
       // would have been inline-level or block-level
-      if (NS_STYLE_DISPLAY_INLINE == mStyleDisplay->mOriginalDisplay) {
+      if (mStyleDisplay->IsOriginalDisplayInlineOutside()) {
         // Use the top of the inline box which the placeholder lives in
         // as the hypothetical box's top.
         aHypotheticalBox.mTop = lineBox->mBounds.y + blockYOffset;
       } else {
         // The element would have been block-level which means it would
         // be below the line containing the placeholder frame, unless
         // all the frames before it are empty.  In that case, it would
         // have been just before this line.
@@ -1024,17 +1024,17 @@ nsHTMLReflowState::CalculateHypothetical
     aHypotheticalBox.mTop = placeholderOffset.y;
   }
 
   // Second, determine the hypothetical box's mLeft & mRight
   // To determine the left and right offsets we need to look at the block's 'direction'
   if (NS_STYLE_DIRECTION_LTR == blockVis->mDirection) {
     // How we determine the hypothetical box depends on whether the element
     // would have been inline-level or block-level
-    if (NS_STYLE_DISPLAY_INLINE == mStyleDisplay->mOriginalDisplay) {
+    if (mStyleDisplay->IsOriginalDisplayInlineOutside()) {
       // The placeholder represents the left edge of the hypothetical box
       aHypotheticalBox.mLeft = placeholderOffset.x;
     } else {
       aHypotheticalBox.mLeft = aBlockLeftContentEdge;
     }
 #ifdef DEBUG
     aHypotheticalBox.mLeftIsExact = PR_TRUE;
 #endif
@@ -1051,17 +1051,17 @@ nsHTMLReflowState::CalculateHypothetical
       aHypotheticalBox.mRight = aBlockLeftContentEdge + aBlockContentWidth;
 #ifdef DEBUG
       aHypotheticalBox.mRightIsExact = PR_FALSE;
 #endif
     }
 
   } else {
     // The placeholder represents the right edge of the hypothetical box
-    if (NS_STYLE_DISPLAY_INLINE == mStyleDisplay->mOriginalDisplay) {
+    if (mStyleDisplay->IsOriginalDisplayInlineOutside()) {
       aHypotheticalBox.mRight = placeholderOffset.x;
     } else {
       aHypotheticalBox.mRight = aBlockLeftContentEdge + aBlockContentWidth;
     }
 #ifdef DEBUG
     aHypotheticalBox.mRightIsExact = PR_TRUE;
 #endif
     
diff --git a/layout/reftests/abs-pos/auto-offset-inline-block-1-ref.html b/layout/reftests/abs-pos/auto-offset-inline-block-1-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/abs-pos/auto-offset-inline-block-1-ref.html
@@ -0,0 +1,6 @@
+<!DOCTYPE HTML>
+<title>'auto' offset properties on display:inline-block (reference)</title>
+<style>
+p { font-family: monospace /* avoid kerning */ }
+</style>
+<p>HelloWorld</p>
diff --git a/layout/reftests/abs-pos/auto-offset-inline-block-1.html b/layout/reftests/abs-pos/auto-offset-inline-block-1.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/abs-pos/auto-offset-inline-block-1.html
@@ -0,0 +1,10 @@
+<!DOCTYPE HTML>
+<title>'auto' offset properties on display:inline-block</title>
+<style>
+p { font-family: monospace /* avoid kerning */ }
+span {
+  display: inline-block;
+  position: absolute;
+}
+</style>
+<p>Hello<span>World</span></p>
diff --git a/layout/reftests/abs-pos/reftest.list b/layout/reftests/abs-pos/reftest.list
--- a/layout/reftests/abs-pos/reftest.list
+++ b/layout/reftests/abs-pos/reftest.list
@@ -1,2 +1,3 @@
 == font-size-wrap.html font-size-wrap-ref.html
 == abs-pos-auto-margin-1.html abs-pos-auto-margin-1-ref.html
+== auto-offset-inline-block-1.html auto-offset-inline-block-1-ref.html
diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -1547,23 +1547,31 @@ struct nsStyleDisplay {
   }
 
   PRBool IsBlockOutside() const {
     return NS_STYLE_DISPLAY_BLOCK == mDisplay ||
            NS_STYLE_DISPLAY_LIST_ITEM == mDisplay ||
            NS_STYLE_DISPLAY_TABLE == mDisplay;
   }
 
+  static PRBool IsDisplayTypeInlineOutside(PRUint8 aDisplay) {
+    return NS_STYLE_DISPLAY_INLINE == aDisplay ||
+           NS_STYLE_DISPLAY_INLINE_BLOCK == aDisplay ||
+           NS_STYLE_DISPLAY_INLINE_TABLE == aDisplay ||
+           NS_STYLE_DISPLAY_INLINE_BOX == aDisplay ||
+           NS_STYLE_DISPLAY_INLINE_GRID == aDisplay ||
+           NS_STYLE_DISPLAY_INLINE_STACK == aDisplay;
+  }
+
   PRBool IsInlineOutside() const {
-    return NS_STYLE_DISPLAY_INLINE == mDisplay ||
-           NS_STYLE_DISPLAY_INLINE_BLOCK == mDisplay ||
-           NS_STYLE_DISPLAY_INLINE_TABLE == mDisplay ||
-           NS_STYLE_DISPLAY_INLINE_BOX == mDisplay ||
-           NS_STYLE_DISPLAY_INLINE_GRID == mDisplay ||
-           NS_STYLE_DISPLAY_INLINE_STACK == mDisplay;
+    return IsDisplayTypeInlineOutside(mDisplay);
+  }
+
+  PRBool IsOriginalDisplayInlineOutside() const {
+    return IsDisplayTypeInlineOutside(mOriginalDisplay);
   }
 
   PRBool IsFloating() const {
     return NS_STYLE_FLOAT_NONE != mFloats;
   }
 
   PRBool IsAbsolutelyPositioned() const {return (NS_STYLE_POSITION_ABSOLUTE == mPosition) ||
                                                 (NS_STYLE_POSITION_FIXED == mPosition);}
