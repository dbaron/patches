From: L. David Baron <dbaron@dbaron.org>

Add a selector hack so that we can implement table border styles compatibly in CSS.  (Bug 539880)  Test by Geoff Lankow <geoff@darktrojan.net>.

diff --git a/layout/reftests/bugs/539880-1-ref.html b/layout/reftests/bugs/539880-1-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/539880-1-ref.html
@@ -0,0 +1,38 @@
+<html>
+<body>
+
+<table cellpadding="10">
+	<tr>
+		<th>0</th>
+		<td><table cellpadding="4" border="0"><tr><td>border="0"</td></tr></table></td>
+		<td><table cellpadding="4" border="0"><tr><td>border="0px"</td></tr></table></td>
+		<td><table cellpadding="4" border="1"><tr><td>border="0em"</td></tr></table></td>
+	</tr>
+	<tr>
+		<th>1</th>
+		<td><table cellpadding="4" border="1"><tr><td>border="1"</td></tr></table></td>
+		<td><table cellpadding="4" border="1"><tr><td>border="1px"</td></tr></table></td>
+		<td><table cellpadding="4" border="1"><tr><td>border="1em"</td></tr></table></td>
+	</tr>
+	<tr>
+		<th>2</th>
+		<td><table cellpadding="4" border="2"><tr><td>border="2"</td></tr></table></td>
+		<td><table cellpadding="4" border="2"><tr><td>border="2px"</td></tr></table></td>
+		<td><table cellpadding="4" border="1"><tr><td>border="2em"</td></tr></table></td>
+	</tr>
+	<tr>
+		<th>3</th>
+		<td><table cellpadding="4" border="3"><tr><td>border="3"</td></tr></table></td>
+		<td><table cellpadding="4" border="3"><tr><td>border="3px"</td></tr></table></td>
+		<td><table cellpadding="4" border="1"><tr><td>border="3em"</td></tr></table></td>
+	</tr>
+	<tr>
+		<th>10</th>
+		<td><table cellpadding="4" border="10"><tr><td>border="10"</td></tr></table></td>
+		<td><table cellpadding="4" border="10"><tr><td>border="10px"</td></tr></table></td>
+		<td><table cellpadding="4" border="1"><tr><td>border="10em"</td></tr></table></td>
+	</tr>
+</table>
+
+</body>
+</html>
diff --git a/layout/reftests/bugs/539880-1.html b/layout/reftests/bugs/539880-1.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/539880-1.html
@@ -0,0 +1,38 @@
+<html>
+<body>
+
+<table cellpadding="10">
+	<tr>
+		<th>0</th>
+		<td><table cellpadding="4" border="0"><tr><td>border="0"</td></tr></table></td>
+		<td><table cellpadding="4" border="0px"><tr><td>border="0px"</td></tr></table></td>
+		<td><table cellpadding="4" border="0em"><tr><td>border="0em"</td></tr></table></td>
+	</tr>
+	<tr>
+		<th>1</th>
+		<td><table cellpadding="4" border="1"><tr><td>border="1"</td></tr></table></td>
+		<td><table cellpadding="4" border="1px"><tr><td>border="1px"</td></tr></table></td>
+		<td><table cellpadding="4" border="1em"><tr><td>border="1em"</td></tr></table></td>
+	</tr>
+	<tr>
+		<th>2</th>
+		<td><table cellpadding="4" border="2"><tr><td>border="2"</td></tr></table></td>
+		<td><table cellpadding="4" border="2px"><tr><td>border="2px"</td></tr></table></td>
+		<td><table cellpadding="4" border="2em"><tr><td>border="2em"</td></tr></table></td>
+	</tr>
+	<tr>
+		<th>3</th>
+		<td><table cellpadding="4" border="3"><tr><td>border="3"</td></tr></table></td>
+		<td><table cellpadding="4" border="3px"><tr><td>border="3px"</td></tr></table></td>
+		<td><table cellpadding="4" border="3em"><tr><td>border="3em"</td></tr></table></td>
+	</tr>
+	<tr>
+		<th>10</th>
+		<td><table cellpadding="4" border="10"><tr><td>border="10"</td></tr></table></td>
+		<td><table cellpadding="4" border="10px"><tr><td>border="10px"</td></tr></table></td>
+		<td><table cellpadding="4" border="10em"><tr><td>border="10em"</td></tr></table></td>
+	</tr>
+</table>
+
+</body>
+</html>
diff --git a/layout/reftests/bugs/reftest.list b/layout/reftests/bugs/reftest.list
--- a/layout/reftests/bugs/reftest.list
+++ b/layout/reftests/bugs/reftest.list
@@ -1413,16 +1413,17 @@ asserts(5) == 528038-2.html 528038-2-ref
 == 537507-2.html 537507-2-ref.html
 == 537471-1.html 537471-1-ref.html
 == 538909-1.html 538909-1-ref.html
 == 538935-1.html 538935-1-ref.html
 == 539226-1.html about:blank
 == 539323-1.html 539323-1-ref.html
 == 539323-2.html 539323-2-ref.html
 == 539323-3.html 539323-3-ref.html
+== 539880-1.html 539880-1-ref.html
 == 541382-1.html 541382-1-ref.html
 random-if(!haveTestPlugin) == 541406-1.html 541406-1-ref.html
 == 542605-hidden-unscrollable.xul 542605-hidden-unscrollable-ref.xul
 == 542620-1.html 542620-1-ref.html
 == 545049-1.html 545049-1-ref.html
 == 546033-1.html 546033-1-ref.html
 random-if(!haveTestPlugin) == 546071-1.html 546071-1-ref.html
 == 549184-1.html 549184-1-ref.html
diff --git a/layout/style/html.css b/layout/style/html.css
--- a/layout/style/html.css
+++ b/layout/style/html.css
@@ -289,48 +289,49 @@ table[align="right"] {
 table[rules] { 
   border: thin hidden; 
 }
 
   /* 'border' before 'frame' so 'frame' overrides
       A border with a given value should, of course, pass that value
       as the border-width in pixels -> attr mapping */
 
-  /* 'border="0"' suppresses the border */
-table[border]:not([border="0"]) { 
+  /* :-moz-table-border-nonzero is like [border]:not([border="0"]) except it
+     also checks for other zero-like values according to HTML attribute
+     parsing rules */
+table:-moz-table-border-nonzero { 
   border: thin outset; 
 }
 
-  
 table[frame] {
   border: thin hidden;
 }
 
-/*increased specificity to compete with [border]:not([border="0"]) rule above*/
-table[frame][frame="void"]   { border-style: hidden; }
-table[frame][frame="above"]  { border-style: outset hidden hidden hidden; }
-table[frame][frame="below"]  { border-style: hidden hidden outset hidden; }
-table[frame][frame="lhs"]    { border-style: hidden hidden hidden outset; }
-table[frame][frame="rhs"]    { border-style: hidden outset hidden hidden; }
-table[frame][frame="hsides"] { border-style: outset hidden; }
-table[frame][frame="vsides"] { border-style: hidden outset; }
-table[frame][frame="box"],
-table[frame][frame="border"] { border-style: outset; }
+/* specificity must beat table:-moz-table-border-nonzero rule above */
+table[frame="void"]   { border-style: hidden; }
+table[frame="above"]  { border-style: outset hidden hidden hidden; }
+table[frame="below"]  { border-style: hidden hidden outset hidden; }
+table[frame="lhs"]    { border-style: hidden hidden hidden outset; }
+table[frame="rhs"]    { border-style: hidden outset hidden hidden; }
+table[frame="hsides"] { border-style: outset hidden; }
+table[frame="vsides"] { border-style: hidden outset; }
+table[frame="box"],
+table[frame="border"] { border-style: outset; }
 
  
 /* Internal Table Borders */
 
   /* 'border' cell borders first */
 
-table[border]:not([border="0"])> * > tr > td,
-table[border]:not([border="0"])> * > tr > th,
-table[border]:not([border="0"])> * > td,
-table[border]:not([border="0"])> * > th,
-table[border]:not([border="0"])> td,
-table[border]:not([border="0"])> th
+table:-moz-table-border-nonzero > * > tr > td,
+table:-moz-table-border-nonzero > * > tr > th,
+table:-moz-table-border-nonzero > * > td,
+table:-moz-table-border-nonzero > * > th,
+table:-moz-table-border-nonzero > td,
+table:-moz-table-border-nonzero > th
 {
   border: thin inset;
 }
 
 /* collapse only if rules are really specified */
 table[rules]:not([rules="none"]):not([rules=""]) {
   border-collapse: collapse;
 }
diff --git a/layout/style/nsCSSPseudoClassList.h b/layout/style/nsCSSPseudoClassList.h
--- a/layout/style/nsCSSPseudoClassList.h
+++ b/layout/style/nsCSSPseudoClassList.h
@@ -110,16 +110,20 @@ CSS_PSEUDO_CLASS(mozLWTheme, ":-moz-lwth
 CSS_PSEUDO_CLASS(mozLWThemeBrightText, ":-moz-lwtheme-brighttext")
 
 // -moz-lwtheme-darktext matches a document that has a bright lightweight theme
 CSS_PSEUDO_CLASS(mozLWThemeDarkText, ":-moz-lwtheme-darktext")
 
 // Matches anything when the containing window is inactive
 CSS_PSEUDO_CLASS(mozWindowInactive, ":-moz-window-inactive")
 
+// Matches any table elements that have a nonzero border attribute,
+// according to HTML integer attribute parsing rules.
+CSS_PSEUDO_CLASS(mozTableBorderNonzero, ":-moz-table-border-nonzero")
+
 // :not needs to come at the end of the non-bit pseudo-class list, since
 // it doesn't actually get directly matched on in SelectorMatches.
 CSS_PSEUDO_CLASS(notPseudo, ":not")
 
 CSS_STATE_PSEUDO_CLASS(link, ":link", NS_EVENT_STATE_UNVISITED)
 // what matches :link or :visited
 CSS_STATE_PSEUDO_CLASS(mozAnyLink, ":-moz-any-link",
                        NS_EVENT_STATE_VISITED | NS_EVENT_STATE_UNVISITED)
diff --git a/layout/style/nsCSSRuleProcessor.cpp b/layout/style/nsCSSRuleProcessor.cpp
--- a/layout/style/nsCSSRuleProcessor.cpp
+++ b/layout/style/nsCSSRuleProcessor.cpp
@@ -87,16 +87,17 @@
 #include "nsIPrincipal.h"
 #include "nsStyleSet.h"
 #include "prlog.h"
 #include "nsIObserverService.h"
 #include "nsIPrivateBrowsingService.h"
 #include "nsNetCID.h"
 #include "mozilla/Services.h"
 #include "mozilla/dom/Element.h"
+#include "nsGenericElement.h"
 
 using namespace mozilla::dom;
 
 #define VISITED_PSEUDO_PREF "layout.css.visited_links_enabled"
 
 static PRBool gSupportVisitedPseudo = PR_TRUE;
 
 static NS_DEFINE_CID(kLookAndFeelCID, NS_LOOKANDFEEL_CID);
@@ -2025,16 +2026,31 @@ static PRBool SelectorMatches(RuleProces
         break;
 
       case nsCSSPseudoClasses::ePseudoClass_mozWindowInactive:
         if ((data.DocumentState() & NS_DOCUMENT_STATE_WINDOW_INACTIVE) == 0) {
           return PR_FALSE;
         }
         break;
 
+      case nsCSSPseudoClasses::ePseudoClass_mozTableBorderNonzero:
+        {
+          if (!data.mIsHTMLContent) {
+            return PR_FALSE;
+          }
+          nsGenericElement *ge = static_cast<nsGenericElement*>(data.mElement);
+          const nsAttrValue *val = ge->GetParsedAttr(nsGkAtoms::border);
+          if (!val ||
+              (val->Type() == nsAttrValue::eInteger &&
+               val->GetIntegerValue() == 0)) {
+            return PR_FALSE;
+          }
+        }
+        break;
+
       default:
         NS_ABORT_IF_FALSE(PR_FALSE, "How did that happen?");
       }
     } else {
       // Bit-based pseudo-classes
       if ((statesToCheck & (NS_EVENT_STATE_HOVER | NS_EVENT_STATE_ACTIVE)) &&
           data.mCompatMode == eCompatibility_NavQuirks &&
           // global selector (but don't check .class):
@@ -2699,18 +2715,17 @@ AddSelector(RuleCascadeData* aCascade,
        attr = attr->mNext) {
     nsTArray<nsCSSSelector*> *array =
       aCascade->AttributeListFor(attr->mCasedAttr);
     if (!array) {
       return PR_FALSE;
     }
     array->AppendElement(aSelectorInTopLevel);
     if (attr->mLowercaseAttr != attr->mCasedAttr) {
-      nsTArray<nsCSSSelector*> *array =
-        aCascade->AttributeListFor(attr->mLowercaseAttr);
+      array = aCascade->AttributeListFor(attr->mLowercaseAttr);
       if (!array) {
         return PR_FALSE;
       }
       array->AppendElement(aSelectorInTopLevel);
     }
   }
 
   // Recur through any :-moz-any selectors
