Remove unused getKey callback from PLDHashTableOps/JSDHashTableOps.  b=374906

diff --git a/caps/include/nsScriptSecurityManager.h b/caps/include/nsScriptSecurityManager.h
--- a/caps/include/nsScriptSecurityManager.h
+++ b/caps/include/nsScriptSecurityManager.h
@@ -245,7 +245,6 @@ InitClassPolicyEntry(PLDHashTable *table
     {
         PL_DHashAllocTable,
         PL_DHashFreeTable,
-        PL_DHashGetKeyStub,
         PL_DHashVoidPtrKeyStub,
         PL_DHashMatchEntryStub,
         PL_DHashMoveEntryStub,
@@ -291,7 +290,6 @@ public:
         {
             PL_DHashAllocTable,
             PL_DHashFreeTable,
-            PL_DHashGetKeyStub,
             PL_DHashStringKey,
             PL_DHashMatchStringKey,
             MoveClassPolicyEntry,
diff --git a/chrome/src/nsChromeRegistry.cpp b/chrome/src/nsChromeRegistry.cpp
--- a/chrome/src/nsChromeRegistry.cpp
+++ b/chrome/src/nsChromeRegistry.cpp
@@ -339,13 +339,6 @@ nsChromeRegistry::PackageEntry::PackageE
 {
 }
 
-const void*
-nsChromeRegistry::GetKey(PLDHashTable *table, PLDHashEntryHdr *entry)
-{
-  PackageEntry* pentry = NS_STATIC_CAST(PackageEntry*, entry);
-  return (nsACString*) &pentry->package;
-}
-
 PLHashNumber
 nsChromeRegistry::HashKey(PLDHashTable *table, const void *key)
 {
@@ -383,7 +376,6 @@ nsChromeRegistry::kTableOps = {
 nsChromeRegistry::kTableOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  GetKey,
   HashKey,
   MatchKey,
   PL_DHashMoveEntryStub,
diff --git a/chrome/src/nsChromeRegistry.h b/chrome/src/nsChromeRegistry.h
--- a/chrome/src/nsChromeRegistry.h
+++ b/chrome/src/nsChromeRegistry.h
@@ -196,7 +196,6 @@ public:
   };
 
 private:
-  static const void*   GetKey(PLDHashTable *table, PLDHashEntryHdr *entry);
   static PLDHashNumber HashKey(PLDHashTable *table, const void *key);
   static PRBool        MatchKey(PLDHashTable *table, const PLDHashEntryHdr *entry,
                                 const void *key);
diff --git a/content/base/src/nsContentList.cpp b/content/base/src/nsContentList.cpp
--- a/content/base/src/nsContentList.cpp
+++ b/content/base/src/nsContentList.cpp
@@ -186,13 +186,6 @@ struct ContentListHashEntry : public PLD
   nsContentList* mContentList;
 };
 
-PR_STATIC_CALLBACK(const void *)
-ContentListHashtableGetKey(PLDHashTable *table, PLDHashEntryHdr *entry)
-{
-  ContentListHashEntry *e = NS_STATIC_CAST(ContentListHashEntry *, entry);
-  return e->mContentList->GetKey();
-}
-
 PR_STATIC_CALLBACK(PLDHashNumber)
 ContentListHashtableHashKey(PLDHashTable *table, const void *key)
 {
@@ -225,7 +218,6 @@ NS_GetContentList(nsINode* aRootNode, ns
   {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    ContentListHashtableGetKey,
     ContentListHashtableHashKey,
     ContentListHashtableMatchEntry,
     PL_DHashMoveEntryStub,
diff --git a/content/base/src/nsContentUtils.cpp b/content/base/src/nsContentUtils.cpp
--- a/content/base/src/nsContentUtils.cpp
+++ b/content/base/src/nsContentUtils.cpp
@@ -284,7 +284,6 @@ nsContentUtils::Init()
     {
       PL_DHashAllocTable,
       PL_DHashFreeTable,
-      PL_DHashGetKeyStub,
       PL_DHashVoidPtrKeyStub,
       PL_DHashMatchEntryStub,
       PL_DHashMoveEntryStub,
diff --git a/content/base/src/nsDocument.cpp b/content/base/src/nsDocument.cpp
--- a/content/base/src/nsDocument.cpp
+++ b/content/base/src/nsDocument.cpp
@@ -2042,7 +2042,6 @@ nsDocument::SetSubDocumentFor(nsIContent
       {
         PL_DHashAllocTable,
         PL_DHashFreeTable,
-        PL_DHashGetKeyStub,
         PL_DHashVoidPtrKeyStub,
         PL_DHashMatchEntryStub,
         PL_DHashMoveEntryStub,
diff --git a/content/html/document/src/nsHTMLDocument.cpp b/content/html/document/src/nsHTMLDocument.cpp
--- a/content/html/document/src/nsHTMLDocument.cpp
+++ b/content/html/document/src/nsHTMLDocument.cpp
@@ -274,14 +274,6 @@ IdAndNameMapEntry::AddIdContent(nsIConte
 }
 
 
-PR_STATIC_CALLBACK(const void *)
-IdAndNameHashGetKey(PLDHashTable *table, PLDHashEntryHdr *entry)
-{
-  IdAndNameMapEntry *e = NS_STATIC_CAST(IdAndNameMapEntry *, entry);
-
-  return NS_STATIC_CAST(const nsIAtom *, e->mKey);
-}
-
 PR_STATIC_CALLBACK(PLDHashNumber)
 IdAndNameHashHashKey(PLDHashTable *table, const void *key)
 {
@@ -407,7 +399,6 @@ nsHTMLDocument::Init()
   {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    IdAndNameHashGetKey,
     IdAndNameHashHashKey,
     IdAndNameHashMatchEntry,
     PL_DHashMoveEntryStub,
diff --git a/content/xbl/src/nsBindingManager.cpp b/content/xbl/src/nsBindingManager.cpp
--- a/content/xbl/src/nsBindingManager.cpp
+++ b/content/xbl/src/nsBindingManager.cpp
@@ -202,7 +202,6 @@ static PLDHashTableOps ObjectTableOps = 
 static PLDHashTableOps ObjectTableOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  PL_DHashGetKeyStub,
   PL_DHashVoidPtrKeyStub,
   PL_DHashMatchEntryStub,
   PL_DHashMoveEntryStub,
diff --git a/content/xul/document/src/nsXULDocument.cpp b/content/xul/document/src/nsXULDocument.cpp
--- a/content/xul/document/src/nsXULDocument.cpp
+++ b/content/xul/document/src/nsXULDocument.cpp
@@ -753,7 +753,6 @@ nsXULDocument::AddBroadcastListenerFor(n
     static PLDHashTableOps gOps = {
         PL_DHashAllocTable,
         PL_DHashFreeTable,
-        PL_DHashGetKeyStub,
         PL_DHashVoidPtrKeyStub,
         PL_DHashMatchEntryStub,
         PL_DHashMoveEntryStub,
diff --git a/content/xul/templates/src/nsContentSupportMap.cpp b/content/xul/templates/src/nsContentSupportMap.cpp
--- a/content/xul/templates/src/nsContentSupportMap.cpp
+++ b/content/xul/templates/src/nsContentSupportMap.cpp
@@ -39,27 +39,11 @@
 #include "nsContentSupportMap.h"
 #include "nsXULElement.h"
 
-PLDHashTableOps nsContentSupportMap::gOps = {
-    PL_DHashAllocTable,
-    PL_DHashFreeTable,
-    PL_DHashGetKeyStub,
-    PL_DHashVoidPtrKeyStub,
-    PL_DHashMatchEntryStub,
-    PL_DHashMoveEntryStub,
-    ClearEntry,
-    PL_DHashFinalizeStub
-};
-
-void PR_CALLBACK
-nsContentSupportMap::ClearEntry(PLDHashTable* aTable, PLDHashEntryHdr* aHdr)
-{
-    PL_DHashClearEntryStub(aTable, aHdr);
-}
-
 void
 nsContentSupportMap::Init()
 {
-    if (!PL_DHashTableInit(&mMap, &gOps, nsnull, sizeof(Entry), PL_DHASH_MIN_SIZE))
+    if (!PL_DHashTableInit(&mMap, PL_DHashGetStubOps(), nsnull,
+                           sizeof(Entry), PL_DHASH_MIN_SIZE))
         mMap.ops = nsnull;
 }
 
diff --git a/content/xul/templates/src/nsContentSupportMap.h b/content/xul/templates/src/nsContentSupportMap.h
--- a/content/xul/templates/src/nsContentSupportMap.h
+++ b/content/xul/templates/src/nsContentSupportMap.h
@@ -99,11 +99,6 @@ protected:
         nsIContent*      mContent;
         nsTemplateMatch* mMatch;
     };
-
-    static PLDHashTableOps gOps;
-
-    static void PR_CALLBACK
-    ClearEntry(PLDHashTable* aTable, PLDHashEntryHdr* aHdr);
 };
 
 #endif
diff --git a/dom/src/base/nsScriptNameSpaceManager.cpp b/dom/src/base/nsScriptNameSpaceManager.cpp
--- a/dom/src/base/nsScriptNameSpaceManager.cpp
+++ b/dom/src/base/nsScriptNameSpaceManager.cpp
@@ -68,14 +68,6 @@ public:
 };
 
 
-PR_STATIC_CALLBACK(const void *)
-GlobalNameHashGetKey(PLDHashTable *table, PLDHashEntryHdr *entry)
-{
-  GlobalNameMapEntry *e = NS_STATIC_CAST(GlobalNameMapEntry *, entry);
-
-  return NS_STATIC_CAST(const nsAString *, &e->mKey);
-}
-
 PR_STATIC_CALLBACK(PLDHashNumber)
 GlobalNameHashHashKey(PLDHashTable *table, const void *key)
 {
@@ -461,7 +453,6 @@ nsScriptNameSpaceManager::Init()
   {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    GlobalNameHashGetKey,
     GlobalNameHashHashKey,
     GlobalNameHashMatchEntry,
     PL_DHashMoveEntryStub,
diff --git a/embedding/components/commandhandler/src/nsCommandParams.cpp b/embedding/components/commandhandler/src/nsCommandParams.cpp
--- a/embedding/components/commandhandler/src/nsCommandParams.cpp
+++ b/embedding/components/commandhandler/src/nsCommandParams.cpp
@@ -47,7 +47,6 @@ PLDHashTableOps nsCommandParams::sHashOp
 {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    HashGetKey,
     HashKey,
     HashMatchEntry,
     HashMoveEntry,
@@ -354,14 +353,6 @@ nsCommandParams::GetOrMakeEntry(const ch
 #pragma mark -
 #endif
 
-const void *
-nsCommandParams::HashGetKey(PLDHashTable *table, PLDHashEntryHdr *entry)
-{
-  HashEntry*    thisEntry = NS_STATIC_CAST(HashEntry*, entry);
-  return (void *)thisEntry->mEntryName.get();
-}
-
-
 PLDHashNumber
 nsCommandParams::HashKey(PLDHashTable *table, const void *key)
 {
diff --git a/embedding/components/commandhandler/src/nsCommandParams.h b/embedding/components/commandhandler/src/nsCommandParams.h
--- a/embedding/components/commandhandler/src/nsCommandParams.h
+++ b/embedding/components/commandhandler/src/nsCommandParams.h
@@ -151,8 +151,6 @@ protected:
   
 protected:
 
-  static const void * PR_CALLBACK  HashGetKey(PLDHashTable *table, PLDHashEntryHdr *entry);
-
   static PLDHashNumber PR_CALLBACK HashKey(PLDHashTable *table, const void *key);
 
   static PRBool PR_CALLBACK        HashMatchEntry(PLDHashTable *table,
diff --git a/extensions/java/xpcom/src/nsJavaXPCOMBindingUtils.cpp b/extensions/java/xpcom/src/nsJavaXPCOMBindingUtils.cpp
--- a/extensions/java/xpcom/src/nsJavaXPCOMBindingUtils.cpp
+++ b/extensions/java/xpcom/src/nsJavaXPCOMBindingUtils.cpp
@@ -449,18 +449,6 @@ FreeJavaGlobals(JNIEnv* env)
  *  Java<->XPCOM object mappings
  **************************************/
 
-static PLDHashTableOps hash_ops =
-{
-  PL_DHashAllocTable,
-  PL_DHashFreeTable,
-  PL_DHashGetKeyStub,
-  PL_DHashVoidPtrKeyStub,
-  PL_DHashMatchEntryStub,
-  PL_DHashMoveEntryStub,
-  PL_DHashClearEntryStub,
-  PL_DHashFinalizeStub
-};
-
 // NativeToJavaProxyMap: The common case is that each XPCOM object will have
 // one Java proxy.  But there are instances where there will be multiple Java
 // proxies for a given XPCOM object, each representing a different interface.
@@ -470,7 +458,8 @@ nsresult
 nsresult
 NativeToJavaProxyMap::Init()
 {
-  mHashTable = PL_NewDHashTable(&hash_ops, nsnull, sizeof(Entry), 16);
+  mHashTable = PL_NewDHashTable(PL_DHashGetStubOps(), nsnull,
+                                sizeof(Entry), 16);
   if (!mHashTable)
     return NS_ERROR_OUT_OF_MEMORY;
   return NS_OK;
@@ -659,7 +648,8 @@ nsresult
 nsresult
 JavaToXPTCStubMap::Init()
 {
-  mHashTable = PL_NewDHashTable(&hash_ops, nsnull, sizeof(Entry), 16);
+  mHashTable = PL_NewDHashTable(PL_DHashGetStubOps(), nsnull,
+                                sizeof(Entry), 16);
   if (!mHashTable)
     return NS_ERROR_OUT_OF_MEMORY;
   return NS_OK;
diff --git a/intl/uconv/src/nsCharsetConverterManager.cpp b/intl/uconv/src/nsCharsetConverterManager.cpp
--- a/intl/uconv/src/nsCharsetConverterManager.cpp
+++ b/intl/uconv/src/nsCharsetConverterManager.cpp
@@ -102,7 +102,6 @@ nsCharsetConverterManager::MatchEntry(PL
 /* static */ PLDHashTableOps nsCharsetConverterManager::EncoderDecoderOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  PL_DHashGetKeyStub,
   PL_DHashStringKey,
   MatchEntry,
   PL_DHashMoveEntryStub,
diff --git a/js/src/jscntxt.c b/js/src/jscntxt.c
--- a/js/src/jscntxt.c
+++ b/js/src/jscntxt.c
@@ -502,14 +502,6 @@ js_ContextIterator(JSRuntime *rt, JSBool
     return cx;
 }
 
-JS_STATIC_DLL_CALLBACK(const void *)
-resolving_GetKey(JSDHashTable *table, JSDHashEntryHdr *hdr)
-{
-    JSResolvingEntry *entry = (JSResolvingEntry *)hdr;
-
-    return &entry->key;
-}
-
 JS_STATIC_DLL_CALLBACK(JSDHashNumber)
 resolving_HashKey(JSDHashTable *table, const void *ptr)
 {
@@ -532,7 +524,6 @@ static const JSDHashTableOps resolving_d
 static const JSDHashTableOps resolving_dhash_ops = {
     JS_DHashAllocTable,
     JS_DHashFreeTable,
-    resolving_GetKey,
     resolving_HashKey,
     resolving_MatchEntry,
     JS_DHashMoveEntryStub,
diff --git a/js/src/jsdhash.c b/js/src/jsdhash.c
--- a/js/src/jsdhash.c
+++ b/js/src/jsdhash.c
@@ -107,14 +107,6 @@ JS_DHashStringKey(JSDHashTable *table, c
     return h;
 }
 
-JS_PUBLIC_API(const void *)
-JS_DHashGetKeyStub(JSDHashTable *table, JSDHashEntryHdr *entry)
-{
-    JSDHashEntryStub *stub = (JSDHashEntryStub *)entry;
-
-    return stub->key;
-}
-
 JS_PUBLIC_API(JSDHashNumber)
 JS_DHashVoidPtrKeyStub(JSDHashTable *table, const void *key)
 {
@@ -174,7 +166,6 @@ static const JSDHashTableOps stub_ops = 
 static const JSDHashTableOps stub_ops = {
     JS_DHashAllocTable,
     JS_DHashFreeTable,
-    JS_DHashGetKeyStub,
     JS_DHashVoidPtrKeyStub,
     JS_DHashMatchEntryStub,
     JS_DHashMoveEntryStub,
diff --git a/js/src/jsdhash.h b/js/src/jsdhash.h
--- a/js/src/jsdhash.h
+++ b/js/src/jsdhash.h
@@ -86,11 +86,12 @@ typedef struct JSDHashTableOps  JSDHashT
  * Table entry header structure.
  *
  * In order to allow in-line allocation of key and value, we do not declare
- * either here.  Instead, the API uses const void *key as a formal parameter,
- * and asks each entry for its key when necessary via a getKey callback, used
- * when growing or shrinking the table.  Other callback types are defined
- * below and grouped into the JSDHashTableOps structure, for single static
- * initialization per hash table sub-type.
+ * either here.  Instead, the API uses const void *key as a formal parameter.
+ * The key need not be stored in the entry; it may be part of the value, but
+ * need not be stored at all.
+ *
+ * Callback types are defined below and grouped into the JSDHashTableOps
+ * structure, for single static initialization per hash table sub-type.
  *
  * Each hash table sub-type should nest the JSDHashEntryHdr structure at the
  * front of its particular entry type.  The keyHash member contains the result
@@ -243,16 +244,6 @@ typedef void
 (* JS_DLL_CALLBACK JSDHashFreeTable) (JSDHashTable *table, void *ptr);
 
 /*
- * When a table grows or shrinks, each entry is queried for its key using this
- * callback.  NB: in that event, entry is not in table any longer; it's in the
- * old entryStore vector, which is due to be freed once all entries have been
- * moved via moveEntry callbacks.
- */
-typedef const void *
-(* JS_DLL_CALLBACK JSDHashGetKey)    (JSDHashTable *table,
-                                      JSDHashEntryHdr *entry);
-
-/*
  * Compute the hash code for a given key to be looked up, added, or removed
  * from table.  A hash code may have any JSDHashNumber value.
  */
@@ -339,7 +330,6 @@ struct JSDHashTableOps {
     /* Mandatory hooks.  All implementations must provide these. */
     JSDHashAllocTable   allocTable;
     JSDHashFreeTable    freeTable;
-    JSDHashGetKey       getKey;
     JSDHashHashKey      hashKey;
     JSDHashMatchEntry   matchEntry;
     JSDHashMoveEntry    moveEntry;
@@ -367,9 +357,6 @@ struct JSDHashEntryStub {
     JSDHashEntryHdr hdr;
     const void      *key;
 };
-
-extern JS_PUBLIC_API(const void *)
-JS_DHashGetKeyStub(JSDHashTable *table, JSDHashEntryHdr *entry);
 
 extern JS_PUBLIC_API(JSDHashNumber)
 JS_DHashVoidPtrKeyStub(JSDHashTable *table, const void *key);
diff --git a/js/src/jsparse.c b/js/src/jsparse.c
--- a/js/src/jsparse.c
+++ b/js/src/jsparse.c
@@ -2009,7 +2009,6 @@ static const JSDHashTableOps FindPropVal
 static const JSDHashTableOps FindPropValOps = {
     JS_DHashAllocTable,
     JS_DHashFreeTable,
-    JS_DHashGetKeyStub,
     HashFindPropValKey,
     MatchFindPropValEntry,
     JS_DHashMoveEntryStub,
diff --git a/js/src/jsscope.c b/js/src/jsscope.c
--- a/js/src/jsscope.c
+++ b/js/src/jsscope.c
@@ -439,7 +439,6 @@ static const JSDHashTableOps PropertyTre
 static const JSDHashTableOps PropertyTreeHashOps = {
     JS_DHashAllocTable,
     JS_DHashFreeTable,
-    JS_DHashGetKeyStub,
     js_HashScopeProperty,
     js_MatchScopeProperty,
     JS_DHashMoveEntryStub,
diff --git a/js/src/xpconnect/src/xpcmaps.cpp b/js/src/xpconnect/src/xpcmaps.cpp
--- a/js/src/xpconnect/src/xpcmaps.cpp
+++ b/js/src/xpconnect/src/xpcmaps.cpp
@@ -205,7 +205,6 @@ struct JSDHashTableOps IID2WrappedJSClas
 {
     JS_DHashAllocTable,
     JS_DHashFreeTable,
-    JS_DHashGetKeyStub,
     HashIIDPtrKey,
     MatchIIDPtrKey,
     JS_DHashMoveEntryStub,
@@ -243,7 +242,6 @@ struct JSDHashTableOps IID2NativeInterfa
 {
     JS_DHashAllocTable,
     JS_DHashFreeTable,
-    JS_DHashGetKeyStub,
     HashIIDPtrKey,
     MatchIIDPtrKey,
     JS_DHashMoveEntryStub,
@@ -411,7 +409,6 @@ struct JSDHashTableOps NativeSetMap::Ent
 {
     JS_DHashAllocTable,
     JS_DHashFreeTable,
-    JS_DHashGetKeyStub,
     HashNativeKey,
     Match,
     JS_DHashMoveEntryStub,
@@ -444,12 +441,6 @@ NativeSetMap::~NativeSetMap()
 /***************************************************************************/
 // implement IID2ThisTranslatorMap...
 
-const void* JS_DLL_CALLBACK
-IID2ThisTranslatorMap::Entry::GetKey(JSDHashTable *table, JSDHashEntryHdr *entry)
-{
-    return &((Entry*)entry)->key;
-}
-
 JSBool JS_DLL_CALLBACK
 IID2ThisTranslatorMap::Entry::Match(JSDHashTable *table,
                                     const JSDHashEntryHdr *entry,
@@ -469,7 +460,6 @@ struct JSDHashTableOps IID2ThisTranslato
 {
     JS_DHashAllocTable,
     JS_DHashFreeTable,
-    GetKey,
     HashIIDPtrKey,
     Match,
     JS_DHashMoveEntryStub,
@@ -547,7 +537,6 @@ struct JSDHashTableOps XPCNativeScriptab
 {
     JS_DHashAllocTable,
     JS_DHashFreeTable,
-    JS_DHashGetKeyStub,
     Hash,
     Match,
     JS_DHashMoveEntryStub,
diff --git a/js/src/xpconnect/src/xpcmaps.h b/js/src/xpconnect/src/xpcmaps.h
--- a/js/src/xpconnect/src/xpcmaps.h
+++ b/js/src/xpconnect/src/xpcmaps.h
@@ -519,9 +519,6 @@ public:
         nsIID                         key;
         nsIXPCFunctionThisTranslator* value;
 
-        static const void* JS_DLL_CALLBACK
-        GetKey(JSDHashTable *table, JSDHashEntryHdr *entry);
-
         static JSBool JS_DLL_CALLBACK
         Match(JSDHashTable *table,
               const JSDHashEntryHdr *entry,
diff --git a/layout/base/nsFrameManager.cpp b/layout/base/nsFrameManager.cpp
--- a/layout/base/nsFrameManager.cpp
+++ b/layout/base/nsFrameManager.cpp
@@ -123,16 +123,6 @@ struct PlaceholderMapEntry : public PLDH
   nsPlaceholderFrame *placeholderFrame;
 };
 
-PR_STATIC_CALLBACK(const void *)
-PlaceholderMapGetKey(PLDHashTable *table, PLDHashEntryHdr *hdr)
-{
-  PlaceholderMapEntry *entry = NS_STATIC_CAST(PlaceholderMapEntry*, hdr);
-  NS_ASSERTION(entry->placeholderFrame->GetOutOfFlowFrame() !=
-               (void*)0xdddddddd,
-               "Dead placeholder in placeholder map");
-  return entry->placeholderFrame->GetOutOfFlowFrame();
-}
-
 PR_STATIC_CALLBACK(PRBool)
 PlaceholderMapMatchEntry(PLDHashTable *table, const PLDHashEntryHdr *hdr,
                          const void *key)
@@ -148,7 +138,6 @@ static PLDHashTableOps PlaceholderMapOps
 static PLDHashTableOps PlaceholderMapOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  PlaceholderMapGetKey,
   PL_DHashVoidPtrKeyStub,
   PlaceholderMapMatchEntry,
   PL_DHashMoveEntryStub,
@@ -171,13 +160,6 @@ struct PrimaryFrameMapEntry : public PLD
   // These ops should be used if/when we switch back to a 2-word entry.
   // See comment in |PrimaryFrameMapEntry| above.
 #if 0
-PR_STATIC_CALLBACK(const void *)
-PrimaryFrameMapGetKey(PLDHashTable *table, PLDHashEntryHdr *hdr)
-{
-  PrimaryFrameMapEntry *entry = NS_STATIC_CAST(PrimaryFrameMapEntry*, hdr);
-  return entry->frame->GetContent();
-}
-
 PR_STATIC_CALLBACK(PRBool)
 PrimaryFrameMapMatchEntry(PLDHashTable *table, const PLDHashEntryHdr *hdr,
                          const void *key)
@@ -190,7 +172,6 @@ static PLDHashTableOps PrimaryFrameMapOp
 static PLDHashTableOps PrimaryFrameMapOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  PrimaryFrameMapGetKey,
   PL_DHashVoidPtrKeyStub,
   PrimaryFrameMapMatchEntry,
   PL_DHashMoveEntryStub,
diff --git a/layout/style/nsCSSRuleProcessor.cpp b/layout/style/nsCSSRuleProcessor.cpp
--- a/layout/style/nsCSSRuleProcessor.cpp
+++ b/layout/style/nsCSSRuleProcessor.cpp
@@ -138,16 +138,26 @@ RuleHash_CIHashKey(PLDHashTable *table, 
   return HashString(str);
 }
 
+typedef nsIAtom*
+(* PR_CALLBACK RuleHashGetKey)    (PLDHashTable *table,
+                                   const PLDHashEntryHdr *entry);
+
+struct RuleHashTableOps : public PLDHashTableOps {
+  // Extra callback to avoid duplicating the matchEntry callback for
+  // each table.  (There used to be a getKey callback in
+  // PLDHashTableOps.)
+  RuleHashGetKey getKey;
+};
+
 PR_STATIC_CALLBACK(PRBool)
 RuleHash_CIMatchEntry(PLDHashTable *table, const PLDHashEntryHdr *hdr,
                       const void *key)
 {
   nsIAtom *match_atom = NS_CONST_CAST(nsIAtom*, NS_STATIC_CAST(const nsIAtom*,
                             key));
-  // Use the |getKey| callback to avoid code duplication.
-  // XXX Ugh!  Why does |getKey| have different |const|-ness?
-  nsIAtom *entry_atom = NS_CONST_CAST(nsIAtom*, NS_STATIC_CAST(const nsIAtom*,
-             table->ops->getKey(table, NS_CONST_CAST(PLDHashEntryHdr*, hdr))));
+  // Use our extra |getKey| callback to avoid code duplication.
+  nsIAtom *entry_atom = 
+      NS_STATIC_CAST(const RuleHashTableOps*, table->ops)->getKey(table, hdr);
 
   // Check for case-sensitive match first.
   if (match_atom == entry_atom)
@@ -166,40 +176,35 @@ RuleHash_CSMatchEntry(PLDHashTable *tabl
 {
   nsIAtom *match_atom = NS_CONST_CAST(nsIAtom*, NS_STATIC_CAST(const nsIAtom*,
                             key));
-  // Use the |getKey| callback to avoid code duplication.
-  // XXX Ugh!  Why does |getKey| have different |const|-ness?
-  nsIAtom *entry_atom = NS_CONST_CAST(nsIAtom*, NS_STATIC_CAST(const nsIAtom*,
-             table->ops->getKey(table, NS_CONST_CAST(PLDHashEntryHdr*, hdr))));
+  // Use our extra |getKey| callback to avoid code duplication.
+  nsIAtom *entry_atom = 
+      NS_STATIC_CAST(const RuleHashTableOps*, table->ops)->getKey(table, hdr);
 
   return match_atom == entry_atom;
 }
 
-PR_STATIC_CALLBACK(const void*)
-RuleHash_TagTable_GetKey(PLDHashTable *table, PLDHashEntryHdr *hdr)
-{
-  RuleHashTableEntry *entry = NS_STATIC_CAST(RuleHashTableEntry*, hdr);
+PR_STATIC_CALLBACK(nsIAtom*)
+RuleHash_TagTable_GetKey(PLDHashTable *table, const PLDHashEntryHdr *hdr)
+{
+  const RuleHashTableEntry *entry =
+    NS_STATIC_CAST(const RuleHashTableEntry*, hdr);
   return entry->mRules->mSelector->mTag;
 }
 
-PR_STATIC_CALLBACK(const void*)
-RuleHash_ClassTable_GetKey(PLDHashTable *table, PLDHashEntryHdr *hdr)
-{
-  RuleHashTableEntry *entry = NS_STATIC_CAST(RuleHashTableEntry*, hdr);
+PR_STATIC_CALLBACK(nsIAtom*)
+RuleHash_ClassTable_GetKey(PLDHashTable *table, const PLDHashEntryHdr *hdr)
+{
+  const RuleHashTableEntry *entry =
+    NS_STATIC_CAST(const RuleHashTableEntry*, hdr);
   return entry->mRules->mSelector->mClassList->mAtom;
 }
 
-PR_STATIC_CALLBACK(const void*)
-RuleHash_IdTable_GetKey(PLDHashTable *table, PLDHashEntryHdr *hdr)
-{
-  RuleHashTableEntry *entry = NS_STATIC_CAST(RuleHashTableEntry*, hdr);
+PR_STATIC_CALLBACK(nsIAtom*)
+RuleHash_IdTable_GetKey(PLDHashTable *table, const PLDHashEntryHdr *hdr)
+{
+  const RuleHashTableEntry *entry =
+    NS_STATIC_CAST(const RuleHashTableEntry*, hdr);
   return entry->mRules->mSelector->mIDList->mAtom;
-}
-
-PR_STATIC_CALLBACK(const void*)
-RuleHash_NameSpaceTable_GetKey(PLDHashTable *table, PLDHashEntryHdr *hdr)
-{
-  RuleHashTableEntry *entry = NS_STATIC_CAST(RuleHashTableEntry*, hdr);
-  return NS_INT32_TO_PTR(entry->mRules->mSelector->mNameSpace);
 }
 
 PR_STATIC_CALLBACK(PLDHashNumber)
@@ -220,80 +225,79 @@ RuleHash_NameSpaceTable_MatchEntry(PLDHa
          entry->mRules->mSelector->mNameSpace;
 }
 
-static PLDHashTableOps RuleHash_TagTable_Ops = {
+static RuleHashTableOps RuleHash_TagTable_Ops = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  RuleHash_TagTable_GetKey,
   PL_DHashVoidPtrKeyStub,
   RuleHash_CSMatchEntry,
   PL_DHashMoveEntryStub,
   PL_DHashClearEntryStub,
   PL_DHashFinalizeStub,
-  NULL
+  NULL,
+  RuleHash_TagTable_GetKey
 };
 
 // Case-sensitive ops.
-static PLDHashTableOps RuleHash_ClassTable_CSOps = {
+static RuleHashTableOps RuleHash_ClassTable_CSOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  RuleHash_ClassTable_GetKey,
   PL_DHashVoidPtrKeyStub,
   RuleHash_CSMatchEntry,
   PL_DHashMoveEntryStub,
   PL_DHashClearEntryStub,
   PL_DHashFinalizeStub,
-  NULL
+  NULL,
+  RuleHash_ClassTable_GetKey
 };
 
 // Case-insensitive ops.
-static PLDHashTableOps RuleHash_ClassTable_CIOps = {
+static RuleHashTableOps RuleHash_ClassTable_CIOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  RuleHash_ClassTable_GetKey,
   RuleHash_CIHashKey,
   RuleHash_CIMatchEntry,
   PL_DHashMoveEntryStub,
   PL_DHashClearEntryStub,
   PL_DHashFinalizeStub,
-  NULL
+  NULL,
+  RuleHash_ClassTable_GetKey
 };
 
 // Case-sensitive ops.
-static PLDHashTableOps RuleHash_IdTable_CSOps = {
+static RuleHashTableOps RuleHash_IdTable_CSOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  RuleHash_IdTable_GetKey,
   PL_DHashVoidPtrKeyStub,
   RuleHash_CSMatchEntry,
   PL_DHashMoveEntryStub,
   PL_DHashClearEntryStub,
   PL_DHashFinalizeStub,
-  NULL
+  NULL,
+  RuleHash_IdTable_GetKey
 };
 
 // Case-insensitive ops.
-static PLDHashTableOps RuleHash_IdTable_CIOps = {
+static RuleHashTableOps RuleHash_IdTable_CIOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  RuleHash_IdTable_GetKey,
   RuleHash_CIHashKey,
   RuleHash_CIMatchEntry,
   PL_DHashMoveEntryStub,
   PL_DHashClearEntryStub,
   PL_DHashFinalizeStub,
-  NULL
+  NULL,
+  RuleHash_IdTable_GetKey
 };
 
 static PLDHashTableOps RuleHash_NameSpaceTable_Ops = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  RuleHash_NameSpaceTable_GetKey,
   RuleHash_NameSpaceTable_HashKey,
   RuleHash_NameSpaceTable_MatchEntry,
   PL_DHashMoveEntryStub,
   PL_DHashClearEntryStub,
   PL_DHashFinalizeStub,
-  NULL
+  NULL,
 };
 
 #undef RULE_HASH_STATS
@@ -639,7 +643,6 @@ static PLDHashTableOps AttributeSelector
 static PLDHashTableOps AttributeSelectorOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  PL_DHashGetKeyStub,
   PL_DHashVoidPtrKeyStub,
   PL_DHashMatchEntryStub,
   PL_DHashMoveEntryStub,
diff --git a/layout/style/nsHTMLStyleSheet.cpp b/layout/style/nsHTMLStyleSheet.cpp
--- a/layout/style/nsHTMLStyleSheet.cpp
+++ b/layout/style/nsHTMLStyleSheet.cpp
@@ -333,7 +333,6 @@ static PLDHashTableOps MappedAttrTable_O
 static PLDHashTableOps MappedAttrTable_Ops = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  PL_DHashGetKeyStub,
   MappedAttrTable_HashKey,
   MappedAttrTable_MatchEntry,
   PL_DHashMoveEntryStub,
diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -115,13 +115,6 @@ struct ChildrenHashEntry : public PLDHas
   nsRuleNode *mRuleNode;
 };
 
-PR_STATIC_CALLBACK(const void *)
-ChildrenHashGetKey(PLDHashTable *table, PLDHashEntryHdr *hdr)
-{
-  ChildrenHashEntry *entry = NS_STATIC_CAST(ChildrenHashEntry*, hdr);
-  return entry->mRuleNode->GetRule();
-}
-
 PR_STATIC_CALLBACK(PRBool)
 ChildrenHashMatchEntry(PLDHashTable *table, const PLDHashEntryHdr *hdr,
                          const void *key)
@@ -138,7 +131,6 @@ static PLDHashTableOps ChildrenHashOps =
   // large size allocations.
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  ChildrenHashGetKey,
   PL_DHashVoidPtrKeyStub,
   ChildrenHashMatchEntry,
   PL_DHashMoveEntryStub,
diff --git a/layout/tables/SpanningCellSorter.cpp b/layout/tables/SpanningCellSorter.cpp
--- a/layout/tables/SpanningCellSorter.cpp
+++ b/layout/tables/SpanningCellSorter.cpp
@@ -69,7 +69,6 @@ SpanningCellSorter::HashTableOps = {
 SpanningCellSorter::HashTableOps = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    HashTableGetKey,
     HashTableHashKey,
     HashTableMatchEntry,
     PL_DHashMoveEntryStub,
@@ -77,14 +76,6 @@ SpanningCellSorter::HashTableOps = {
     PL_DHashFinalizeStub,
     nsnull
 };
-
-/* static */ PR_CALLBACK const void*
-SpanningCellSorter::HashTableGetKey(PLDHashTable *table,
-                                    PLDHashEntryHdr *hdr)
-{
-    HashTableEntry *entry = NS_STATIC_CAST(HashTableEntry*, hdr);
-    return NS_INT32_TO_PTR(entry->mColSpan);
-}
 
 /* static */ PR_CALLBACK PLDHashNumber
 SpanningCellSorter::HashTableHashKey(PLDHashTable *table, const void *key)
diff --git a/layout/tables/SpanningCellSorter.h b/layout/tables/SpanningCellSorter.h
--- a/layout/tables/SpanningCellSorter.h
+++ b/layout/tables/SpanningCellSorter.h
@@ -99,8 +99,6 @@ private:
 
     static PLDHashTableOps HashTableOps;
 
-    PR_STATIC_CALLBACK(const void*)
-        HashTableGetKey(PLDHashTable *table, PLDHashEntryHdr *hdr);
     PR_STATIC_CALLBACK(PLDHashNumber)
         HashTableHashKey(PLDHashTable *table, const void *key);
     PR_STATIC_CALLBACK(PRBool)
diff --git a/mailnews/db/msgdb/public/nsMsgDatabase.h b/mailnews/db/msgdb/public/nsMsgDatabase.h
--- a/mailnews/db/msgdb/public/nsMsgDatabase.h
+++ b/mailnews/db/msgdb/public/nsMsgDatabase.h
@@ -295,7 +295,6 @@ protected:
   void          ClearCachedObjects(PRBool dbGoingAway);
   // all instantiated headers, but doesn't hold refs. 
   PLDHashTable  *m_headersInUse;
-  static const void* PR_CALLBACK GetKey(PLDHashTable* aTable, PLDHashEntryHdr* aEntry);
   static PLDHashNumber PR_CALLBACK HashKey(PLDHashTable* aTable, const void* aKey);
   static PRBool PR_CALLBACK MatchEntry(PLDHashTable* aTable, const PLDHashEntryHdr* aEntry, const void* aKey);
   static void PR_CALLBACK MoveEntry(PLDHashTable* aTable, const PLDHashEntryHdr* aFrom, PLDHashEntryHdr* aTo);
diff --git a/mailnews/db/msgdb/src/nsMsgDatabase.cpp b/mailnews/db/msgdb/src/nsMsgDatabase.cpp
--- a/mailnews/db/msgdb/src/nsMsgDatabase.cpp
+++ b/mailnews/db/msgdb/src/nsMsgDatabase.cpp
@@ -438,7 +438,6 @@ PLDHashTableOps nsMsgDatabase::gMsgDBHas
 {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  GetKey,
   HashKey,
   MatchEntry,
   MoveEntry,
@@ -446,13 +445,6 @@ PLDHashTableOps nsMsgDatabase::gMsgDBHas
   PL_DHashFinalizeStub,
   nsnull
 };
-
-const void* PR_CALLBACK
-nsMsgDatabase::GetKey(PLDHashTable* aTable, PLDHashEntryHdr* aEntry)
-{
-  MsgHdrHashElement* hdr = NS_REINTERPRET_CAST(MsgHdrHashElement*, aEntry);
-  return (const void *) hdr->mKey;
-}
 
 // HashKey is supposed to maximize entropy in the low order bits, and the key
 // as is, should do that.
diff --git a/mailnews/extensions/bayesian-spam-filter/src/nsBayesianFilter.cpp b/mailnews/extensions/bayesian-spam-filter/src/nsBayesianFilter.cpp
--- a/mailnews/extensions/bayesian-spam-filter/src/nsBayesianFilter.cpp
+++ b/mailnews/extensions/bayesian-spam-filter/src/nsBayesianFilter.cpp
@@ -159,7 +159,6 @@ static const PLDHashTableOps gTokenTable
 static const PLDHashTableOps gTokenTableOps = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    PL_DHashGetKeyStub,
     PL_DHashStringKey,
     PL_DHashMatchStringKey,
     PL_DHashMoveEntryStub,
diff --git a/modules/libpref/src/prefapi.cpp b/modules/libpref/src/prefapi.cpp
--- a/modules/libpref/src/prefapi.cpp
+++ b/modules/libpref/src/prefapi.cpp
@@ -127,7 +127,6 @@ static PLDHashTableOps     pref_HashTabl
 static PLDHashTableOps     pref_HashTableOps = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    PL_DHashGetKeyStub,
     PL_DHashStringKey,
     matchPrefEntry,
     PL_DHashMoveEntryStub,
diff --git a/modules/plugin/base/src/nsJSNPRuntime.cpp b/modules/plugin/base/src/nsJSNPRuntime.cpp
--- a/modules/plugin/base/src/nsJSNPRuntime.cpp
+++ b/modules/plugin/base/src/nsJSNPRuntime.cpp
@@ -877,15 +877,6 @@ JSObjWrapperHash(PLDHashTable *table, co
   return (PLDHashNumber)((PRWord)e->mJSObj ^ (PRWord)e->mNpp) >> 2;
 }
 
-PR_STATIC_CALLBACK(const void *)
-JSObjWrapperHashGetKey(PLDHashTable *table, PLDHashEntryHdr *entry)
-{
-  JSObjWrapperHashEntry *e =
-    NS_STATIC_CAST(JSObjWrapperHashEntry *, entry);
-
-  return NS_STATIC_CAST(nsJSObjWrapperKey *, e->mJSObjWrapper);
-}
-
 PR_STATIC_CALLBACK(PRBool)
 JSObjWrapperHashMatchEntry(PLDHashTable *table, const PLDHashEntryHdr *entry,
                            const void *key)
@@ -941,7 +932,6 @@ nsJSObjWrapper::GetNewOrUsed(NPP npp, JS
       {
         PL_DHashAllocTable,
         PL_DHashFreeTable,
-        JSObjWrapperHashGetKey,
         JSObjWrapperHash,
         JSObjWrapperHashMatchEntry,
         PL_DHashMoveEntryStub,
diff --git a/netwerk/base/src/nsLoadGroup.cpp b/netwerk/base/src/nsLoadGroup.cpp
--- a/netwerk/base/src/nsLoadGroup.cpp
+++ b/netwerk/base/src/nsLoadGroup.cpp
@@ -81,14 +81,6 @@ public:
     nsCOMPtr<nsIRequest> mKey;
 };
 
-PR_STATIC_CALLBACK(const void *)
-RequestHashGetKey(PLDHashTable *table, PLDHashEntryHdr *entry)
-{
-    RequestMapEntry *e = NS_STATIC_CAST(RequestMapEntry *, entry);
-
-    return e->mKey.get();
-}
-
 PR_STATIC_CALLBACK(PRBool)
 RequestHashMatchEntry(PLDHashTable *table, const PLDHashEntryHdr *entry,
                       const void *key)
@@ -188,7 +180,6 @@ nsresult nsLoadGroup::Init()
     {
         PL_DHashAllocTable,
         PL_DHashFreeTable,
-        RequestHashGetKey,
         PL_DHashVoidPtrKeyStub,
         RequestHashMatchEntry,
         PL_DHashMoveEntryStub,
diff --git a/netwerk/cache/src/nsCacheEntry.cpp b/netwerk/cache/src/nsCacheEntry.cpp
--- a/netwerk/cache/src/nsCacheEntry.cpp
+++ b/netwerk/cache/src/nsCacheEntry.cpp
@@ -397,7 +397,6 @@ nsCacheEntryHashTable::ops =
 {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    GetKey,
     HashKey,
     MatchEntry,
     MoveEntry,
@@ -520,13 +519,6 @@ nsCacheEntryHashTable::VisitEntry(PLDHas
 /**
  *  hash table operation callback functions
  */
-const void * PR_CALLBACK
-nsCacheEntryHashTable::GetKey( PLDHashTable * /*table*/, PLDHashEntryHdr *hashEntry)
-{
-    nsCacheEntry *cacheEntry = ((nsCacheEntryHashTableEntry *)hashEntry)->cacheEntry;
-    return cacheEntry->mKey;
-}
-
 
 PLDHashNumber PR_CALLBACK
 nsCacheEntryHashTable::HashKey( PLDHashTable *table, const void *key)
diff --git a/netwerk/cache/src/nsCacheEntry.h b/netwerk/cache/src/nsCacheEntry.h
--- a/netwerk/cache/src/nsCacheEntry.h
+++ b/netwerk/cache/src/nsCacheEntry.h
@@ -307,8 +307,6 @@ private:
     friend class nsCacheService; // XXX redefine interface so this isn't necessary
 
     // PLDHashTable operation callbacks
-    static const void *   PR_CALLBACK GetKey( PLDHashTable *table, PLDHashEntryHdr *entry);
-
     static PLDHashNumber  PR_CALLBACK HashKey( PLDHashTable *table, const void *key);
 
     static PRBool         PR_CALLBACK MatchEntry( PLDHashTable *           table,
diff --git a/netwerk/cache/src/nsDiskCacheBinding.cpp b/netwerk/cache/src/nsDiskCacheBinding.cpp
--- a/netwerk/cache/src/nsDiskCacheBinding.cpp
+++ b/netwerk/cache/src/nsDiskCacheBinding.cpp
@@ -60,13 +60,6 @@ struct HashTableEntry : PLDHashEntryHdr 
 };
 
 
-static const void * PR_CALLBACK
-GetKey(PLDHashTable * /*table*/, PLDHashEntryHdr * header)
-{
-    return (void*) ((HashTableEntry *)header)->mBinding->mRecord.HashNumber();
-}
-
-
 static PLDHashNumber PR_CALLBACK
 HashKey( PLDHashTable *table, const void *key)
 {
@@ -168,7 +161,6 @@ PLDHashTableOps nsDiskCacheBindery::ops 
 {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    GetKey,
     HashKey,
     MatchEntry,
     MoveEntry,
diff --git a/netwerk/dns/src/nsHostResolver.cpp b/netwerk/dns/src/nsHostResolver.cpp
--- a/netwerk/dns/src/nsHostResolver.cpp
+++ b/netwerk/dns/src/nsHostResolver.cpp
@@ -199,13 +199,6 @@ struct nsHostDBEnt : PLDHashEntryHdr
     nsHostRecord *rec;
 };
 
-PR_STATIC_CALLBACK(const void *)
-HostDB_GetKey(PLDHashTable *table, PLDHashEntryHdr *entry)
-{
-    nsHostDBEnt *he = NS_STATIC_CAST(nsHostDBEnt *, entry);
-    return NS_STATIC_CAST(const nsHostKey *, he->rec);
-}
-
 PR_STATIC_CALLBACK(PLDHashNumber)
 HostDB_HashKey(PLDHashTable *table, const void *key)
 {
@@ -279,7 +272,6 @@ static PLDHashTableOps gHostDB_ops =
 {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    HostDB_GetKey,
     HostDB_HashKey,
     HostDB_MatchEntry,
     HostDB_MoveEntry,
diff --git a/netwerk/protocol/http/src/nsHttp.cpp b/netwerk/protocol/http/src/nsHttp.cpp
--- a/netwerk/protocol/http/src/nsHttp.cpp
+++ b/netwerk/protocol/http/src/nsHttp.cpp
@@ -113,7 +113,6 @@ static const PLDHashTableOps ops = {
 static const PLDHashTableOps ops = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    PL_DHashGetKeyStub,
     StringHash,
     StringCompare,
     PL_DHashMoveEntryStub,
diff --git a/parser/htmlparser/src/nsHTMLEntities.cpp b/parser/htmlparser/src/nsHTMLEntities.cpp
--- a/parser/htmlparser/src/nsHTMLEntities.cpp
+++ b/parser/htmlparser/src/nsHTMLEntities.cpp
@@ -54,20 +54,6 @@ struct EntityNodeEntry : public PLDHashE
   const EntityNode* node;
 }; 
 
-PR_STATIC_CALLBACK(const void*)
-  getStringKey(PLDHashTable*, PLDHashEntryHdr* aHdr)
-{
-  const EntityNodeEntry* entry = NS_STATIC_CAST(const EntityNodeEntry*, aHdr);
-  return entry->node->mStr;
-}
-
-PR_STATIC_CALLBACK(const void*)
-  getUnicodeKey(PLDHashTable*, PLDHashEntryHdr* aHdr)
-{
-  const EntityNodeEntry* entry = NS_STATIC_CAST(const EntityNodeEntry*, aHdr);
-  return NS_INT32_TO_PTR(entry->node->mUnicode);
-}
-
 PR_STATIC_CALLBACK(PRBool)
   matchNodeString(PLDHashTable*, const PLDHashEntryHdr* aHdr,
                   const void* key)
@@ -97,7 +83,6 @@ static const PLDHashTableOps EntityToUni
 static const PLDHashTableOps EntityToUnicodeOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  getStringKey,
   PL_DHashStringKey,
   matchNodeString,
   PL_DHashMoveEntryStub,
@@ -109,7 +94,6 @@ static const PLDHashTableOps UnicodeToEn
 static const PLDHashTableOps UnicodeToEntityOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  getUnicodeKey,
   hashUnicodeValue,
   matchNodeUnicode,
   PL_DHashMoveEntryStub,
diff --git a/rdf/base/src/nsRDFService.cpp b/rdf/base/src/nsRDFService.cpp
--- a/rdf/base/src/nsRDFService.cpp
+++ b/rdf/base/src/nsRDFService.cpp
@@ -167,13 +167,6 @@ struct ResourceHashEntry : public PLDHas
     const char *mKey;
     nsIRDFResource *mResource;
 
-    static const void * PR_CALLBACK
-    GetKey(PLDHashTable *table, PLDHashEntryHdr *hdr)
-    {
-        ResourceHashEntry *entry = NS_STATIC_CAST(ResourceHashEntry *, hdr);
-        return entry->mKey;
-    }
-
     static PLDHashNumber PR_CALLBACK
     HashKey(PLDHashTable *table, const void *key)
     {
@@ -195,7 +188,6 @@ static PLDHashTableOps gResourceTableOps
 static PLDHashTableOps gResourceTableOps = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    ResourceHashEntry::GetKey,
     ResourceHashEntry::HashKey,
     ResourceHashEntry::MatchEntry,
     PL_DHashMoveEntryStub,
@@ -213,13 +205,6 @@ struct LiteralHashEntry : public PLDHash
     nsIRDFLiteral *mLiteral;
     const PRUnichar *mKey;
 
-    static const void * PR_CALLBACK
-    GetKey(PLDHashTable *table, PLDHashEntryHdr *hdr)
-    {
-        LiteralHashEntry *entry = NS_STATIC_CAST(LiteralHashEntry *, hdr);
-        return entry->mKey;
-    }
-
     static PLDHashNumber PR_CALLBACK
     HashKey(PLDHashTable *table, const void *key)
     {
@@ -241,7 +226,6 @@ static PLDHashTableOps gLiteralTableOps 
 static PLDHashTableOps gLiteralTableOps = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    LiteralHashEntry::GetKey,
     LiteralHashEntry::HashKey,
     LiteralHashEntry::MatchEntry,
     PL_DHashMoveEntryStub,
@@ -259,13 +243,6 @@ struct IntHashEntry : public PLDHashEntr
     nsIRDFInt *mInt;
     PRInt32    mKey;
 
-    static const void * PR_CALLBACK
-    GetKey(PLDHashTable *table, PLDHashEntryHdr *hdr)
-    {
-        IntHashEntry *entry = NS_STATIC_CAST(IntHashEntry *, hdr);
-        return &entry->mKey;
-    }
-
     static PLDHashNumber PR_CALLBACK
     HashKey(PLDHashTable *table, const void *key)
     {
@@ -286,7 +263,6 @@ static PLDHashTableOps gIntTableOps = {
 static PLDHashTableOps gIntTableOps = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    IntHashEntry::GetKey,
     IntHashEntry::HashKey,
     IntHashEntry::MatchEntry,
     PL_DHashMoveEntryStub,
@@ -303,13 +279,6 @@ struct DateHashEntry : public PLDHashEnt
 struct DateHashEntry : public PLDHashEntryHdr {
     nsIRDFDate *mDate;
     PRTime      mKey;
-
-    static const void * PR_CALLBACK
-    GetKey(PLDHashTable *table, PLDHashEntryHdr *hdr)
-    {
-        DateHashEntry *entry = NS_STATIC_CAST(DateHashEntry *, hdr);
-        return &entry->mKey;
-    }
 
     static PLDHashNumber PR_CALLBACK
     HashKey(PLDHashTable *table, const void *key)
@@ -340,7 +309,6 @@ static PLDHashTableOps gDateTableOps = {
 static PLDHashTableOps gDateTableOps = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    DateHashEntry::GetKey,
     DateHashEntry::HashKey,
     DateHashEntry::MatchEntry,
     PL_DHashMoveEntryStub,
@@ -431,13 +399,6 @@ struct BlobHashEntry : public PLDHashEnt
 struct BlobHashEntry : public PLDHashEntryHdr {
     BlobImpl *mBlob;
 
-    static const void * PR_CALLBACK
-    GetKey(PLDHashTable *table, PLDHashEntryHdr *hdr)
-    {
-        BlobHashEntry *entry = NS_STATIC_CAST(BlobHashEntry *, hdr);
-        return &entry->mBlob->mData;
-    }
-
     static PLDHashNumber PR_CALLBACK
     HashKey(PLDHashTable *table, const void *key)
     {
@@ -471,7 +432,6 @@ static PLDHashTableOps gBlobTableOps = {
 static PLDHashTableOps gBlobTableOps = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    BlobHashEntry::GetKey,
     BlobHashEntry::HashKey,
     BlobHashEntry::MatchEntry,
     PL_DHashMoveEntryStub,
diff --git a/security/manager/boot/src/nsSecureBrowserUIImpl.cpp b/security/manager/boot/src/nsSecureBrowserUIImpl.cpp
--- a/security/manager/boot/src/nsSecureBrowserUIImpl.cpp
+++ b/security/manager/boot/src/nsSecureBrowserUIImpl.cpp
@@ -104,13 +104,6 @@ struct RequestHashEntry : PLDHashEntryHd
     void *r;
 };
 
-PR_STATIC_CALLBACK(const void *)
-RequestMapGetKey(PLDHashTable *table, PLDHashEntryHdr *hdr)
-{
-  RequestHashEntry *entry = NS_STATIC_CAST(RequestHashEntry*, hdr);
-  return entry->r;
-}
-
 PR_STATIC_CALLBACK(PRBool)
 RequestMapMatchEntry(PLDHashTable *table, const PLDHashEntryHdr *hdr,
                          const void *key)
@@ -131,7 +124,6 @@ static PLDHashTableOps gMapOps = {
 static PLDHashTableOps gMapOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  RequestMapGetKey,
   PL_DHashVoidPtrKeyStub,
   RequestMapMatchEntry,
   PL_DHashMoveEntryStub,
diff --git a/security/manager/ssl/src/nsCertTree.cpp b/security/manager/ssl/src/nsCertTree.cpp
--- a/security/manager/ssl/src/nsCertTree.cpp
+++ b/security/manager/ssl/src/nsCertTree.cpp
@@ -91,13 +91,6 @@ CompareCacheHashEntry::CompareCacheHashE
   }
 }
 
-PR_STATIC_CALLBACK(const void *)
-CompareCacheGetKey(PLDHashTable *table, PLDHashEntryHdr *hdr)
-{
-  CompareCacheHashEntryPtr *entryPtr = NS_STATIC_CAST(CompareCacheHashEntryPtr*, hdr);
-  return entryPtr->entry->key;
-}
-
 PR_STATIC_CALLBACK(PRBool)
 CompareCacheMatchEntry(PLDHashTable *table, const PLDHashEntryHdr *hdr,
                          const void *key)
@@ -129,7 +122,6 @@ static PLDHashTableOps gMapOps = {
 static PLDHashTableOps gMapOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  CompareCacheGetKey,
   PL_DHashVoidPtrKeyStub,
   CompareCacheMatchEntry,
   PL_DHashMoveEntryStub,
diff --git a/security/manager/ssl/src/nsNSSShutDown.cpp b/security/manager/ssl/src/nsNSSShutDown.cpp
--- a/security/manager/ssl/src/nsNSSShutDown.cpp
+++ b/security/manager/ssl/src/nsNSSShutDown.cpp
@@ -46,13 +46,6 @@ struct ObjectHashEntry : PLDHashEntryHdr
   nsNSSShutDownObject *obj;
 };
 
-PR_STATIC_CALLBACK(const void *)
-ObjectSetGetKey(PLDHashTable *table, PLDHashEntryHdr *hdr)
-{
-  ObjectHashEntry *entry = NS_STATIC_CAST(ObjectHashEntry*, hdr);
-  return entry->obj;
-}
-
 PR_STATIC_CALLBACK(PRBool)
 ObjectSetMatchEntry(PLDHashTable *table, const PLDHashEntryHdr *hdr,
                          const void *key)
@@ -73,7 +66,6 @@ static PLDHashTableOps gSetOps = {
 static PLDHashTableOps gSetOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  ObjectSetGetKey,
   PL_DHashVoidPtrKeyStub,
   ObjectSetMatchEntry,
   PL_DHashMoveEntryStub,
diff --git a/uriloader/base/nsDocLoader.cpp b/uriloader/base/nsDocLoader.cpp
--- a/uriloader/base/nsDocLoader.cpp
+++ b/uriloader/base/nsDocLoader.cpp
@@ -148,7 +148,6 @@ nsDocLoader::nsDocLoader()
   {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    PL_DHashGetKeyStub,
     PL_DHashVoidPtrKeyStub,
     PL_DHashMatchEntryStub,
     PL_DHashMoveEntryStub,
diff --git a/widget/src/gtk/nsWindow.cpp b/widget/src/gtk/nsWindow.cpp
--- a/widget/src/gtk/nsWindow.cpp
+++ b/widget/src/gtk/nsWindow.cpp
@@ -137,7 +137,6 @@ static PLDHashTableOps iconHashOps = {
 static PLDHashTableOps iconHashOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  PL_DHashGetKeyStub,
   PL_DHashStringKey,
   PL_DHashMatchStringKey,
   PL_DHashMoveEntryStub,
diff --git a/xpcom/components/nsComponentManager.cpp b/xpcom/components/nsComponentManager.cpp
--- a/xpcom/components/nsComponentManager.cpp
+++ b/xpcom/components/nsComponentManager.cpp
@@ -278,14 +278,6 @@ PRBool PR_CALLBACK
 PRBool PR_CALLBACK
 nsFactoryEntry_Destroy(nsHashKey *aKey, void *aData, void* closure);
 
-PR_STATIC_CALLBACK(const void *)
-factory_GetKey(PLDHashTable *aTable, PLDHashEntryHdr *aHdr)
-{
-    nsFactoryTableEntry* entry = NS_STATIC_CAST(nsFactoryTableEntry*, aHdr);
-
-    return &entry->mFactoryEntry->mCid;
-}
-
 PR_STATIC_CALLBACK(PLDHashNumber)
 factory_HashKey(PLDHashTable *aTable, const void *aKey)
 {
@@ -318,7 +310,6 @@ static const PLDHashTableOps factory_DHa
 static const PLDHashTableOps factory_DHashTableOps = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    factory_GetKey,
     factory_HashKey,
     factory_MatchEntry,
     PL_DHashMoveEntryStub,
@@ -346,7 +337,6 @@ static const PLDHashTableOps contractID_
 static const PLDHashTableOps contractID_DHashTableOps = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    PL_DHashGetKeyStub,
     PL_DHashStringKey,
     PL_DHashMatchStringKey,
     PL_DHashMoveEntryStub,
diff --git a/xpcom/components/nsStaticComponentLoader.cpp b/xpcom/components/nsStaticComponentLoader.cpp
--- a/xpcom/components/nsStaticComponentLoader.cpp
+++ b/xpcom/components/nsStaticComponentLoader.cpp
@@ -80,10 +80,14 @@ info_InitEntry(PLDHashTable *table, PLDH
 }
 
 /* static */ PLDHashTableOps nsStaticModuleLoader::sInfoHashOps = {
-    PL_DHashAllocTable,    PL_DHashFreeTable,
-    PL_DHashGetKeyStub,    PL_DHashStringKey, PL_DHashMatchStringKey,
-    PL_DHashMoveEntryStub, info_ClearEntry,
-    PL_DHashFinalizeStub,  info_InitEntry
+    PL_DHashAllocTable,
+    PL_DHashFreeTable,
+    PL_DHashStringKey,
+    PL_DHashMatchStringKey,
+    PL_DHashMoveEntryStub,
+    info_ClearEntry,
+    PL_DHashFinalizeStub,
+    info_InitEntry
 };
 
 nsresult
diff --git a/xpcom/ds/nsAtomTable.cpp b/xpcom/ds/nsAtomTable.cpp
--- a/xpcom/ds/nsAtomTable.cpp
+++ b/xpcom/ds/nsAtomTable.cpp
@@ -114,6 +114,8 @@ private:
 // actual live entry in the table, and then mBits & ~0x1 in the
 // AtomTableEntry points to an AtomImpl or a nsStaticAtomWrapper,
 // indicated by the first bit of PtrBits.
+// XXX This whole mess could be vastly simplified now that pldhash
+// no longer has a getKey callback.
 typedef PRUword PtrBits;
 
 struct AtomTableEntry : public PLDHashEntryHdr {
@@ -239,14 +241,6 @@ struct AtomTableEntry : public PLDHashEn
     return result;
   }
 };
-
-PR_STATIC_CALLBACK(const void *)
-AtomTableGetKey(PLDHashTable *table, PLDHashEntryHdr *entry)
-{
-  AtomTableEntry *he = NS_STATIC_CAST(AtomTableEntry*, entry);
-  NS_ASSERTION(he->HasValue(), "Empty atom. how did that happen?");
-  return he;
-}
 
 PR_STATIC_CALLBACK(PLDHashNumber)
 AtomTableGetHash(PLDHashTable *table, const void *key)
@@ -314,7 +308,6 @@ static const PLDHashTableOps AtomTableOp
 static const PLDHashTableOps AtomTableOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  AtomTableGetKey,
   AtomTableGetHash,
   AtomTableMatchKey,
   PL_DHashMoveEntryStub,
diff --git a/xpcom/ds/nsDoubleHashtable.h b/xpcom/ds/nsDoubleHashtable.h
--- a/xpcom/ds/nsDoubleHashtable.h
+++ b/xpcom/ds/nsDoubleHashtable.h
@@ -205,12 +205,6 @@
 // ENTRY_CLASS: the classname of the entry
 //
 #define DHASH_CALLBACKS(ENTRY_CLASS)                                          \
-PR_STATIC_CALLBACK(const void *)                                              \
-ENTRY_CLASS##GetKey(PLDHashTable* table, PLDHashEntryHdr* entry)              \
-{                                                                             \
-  ENTRY_CLASS* e = NS_STATIC_CAST(ENTRY_CLASS*, entry);                       \
-  return e->GetKey();                                                         \
-}                                                                             \
 PR_STATIC_CALLBACK(PLDHashNumber)                                             \
 ENTRY_CLASS##HashKey(PLDHashTable* table, const void* key)                    \
 {                                                                             \
@@ -255,7 +249,6 @@ PR_BEGIN_MACRO                          
   {                                                                           \
     PL_DHashAllocTable,                                                       \
     PL_DHashFreeTable,                                                        \
-    ENTRY_CLASS##GetKey,                                                      \
     ENTRY_CLASS##HashKey,                                                     \
     ENTRY_CLASS##MatchEntry,                                                  \
     PL_DHashMoveEntryStub,                                                    \
diff --git a/xpcom/ds/nsHashtable.cpp b/xpcom/ds/nsHashtable.cpp
--- a/xpcom/ds/nsHashtable.cpp
+++ b/xpcom/ds/nsHashtable.cpp
@@ -103,7 +103,6 @@ static const PLDHashTableOps hashtableOp
 static const PLDHashTableOps hashtableOps = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    PL_DHashGetKeyStub,
     hashKey,
     matchKeyEntry,
     PL_DHashMoveEntryStub,
diff --git a/xpcom/ds/nsPersistentProperties.cpp b/xpcom/ds/nsPersistentProperties.cpp
--- a/xpcom/ds/nsPersistentProperties.cpp
+++ b/xpcom/ds/nsPersistentProperties.cpp
@@ -89,7 +89,6 @@ static const struct PLDHashTableOps prop
 static const struct PLDHashTableOps property_HashTableOps = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
-  PL_DHashGetKeyStub,
   PL_DHashStringKey,
   PL_DHashMatchStringKey,
   PL_DHashMoveEntryStub,
diff --git a/xpcom/ds/nsStaticNameTable.cpp b/xpcom/ds/nsStaticNameTable.cpp
--- a/xpcom/ds/nsStaticNameTable.cpp
+++ b/xpcom/ds/nsStaticNameTable.cpp
@@ -72,17 +72,9 @@ struct NameTableEntry : public PLDHashEn
 struct NameTableEntry : public PLDHashEntryHdr
 {
     // no ownership here!
-    NameTableKey mKey;
+    const nsAFlatCString* mString;
     PRInt32 mIndex;
 };
-
-PR_STATIC_CALLBACK(const void *)
-nameTableGetKey(PLDHashTable *, PLDHashEntryHdr *aHdr)
-{
-    NameTableEntry* entry =
-        NS_STATIC_CAST(NameTableEntry *, aHdr);
-    return &(entry->mKey);
-}
 
 PR_STATIC_CALLBACK(PRBool)
 matchNameKeysCaseInsensitive(PLDHashTable*, const PLDHashEntryHdr* aHdr,
@@ -92,10 +84,7 @@ matchNameKeysCaseInsensitive(PLDHashTabl
         NS_STATIC_CAST(const NameTableEntry *, aHdr);
     const NameTableKey *keyValue = NS_STATIC_CAST(const NameTableKey*, key);
 
-    NS_ASSERTION(!entry->mKey.mIsUnichar,
-                 "Entry shouldn't have a unichar key!");
-
-    const nsAFlatCString* entryKey = entry->mKey.mKeyStr.m1b;
+    const nsAFlatCString* entryKey = entry->mString;
     
     if (keyValue->mIsUnichar) {
         return keyValue->mKeyStr.m2b->
@@ -138,7 +127,6 @@ static const struct PLDHashTableOps name
 static const struct PLDHashTableOps nametable_CaseInsensitiveHashTableOps = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    nameTableGetKey,
     caseInsensitiveStringHashKey,
     matchNameKeysCaseInsensitive,
     PL_DHashMoveEntryStub,
@@ -215,10 +203,9 @@ nsStaticCaseInsensitiveNameTable::Init(c
 
         if (!entry) continue;
 
-        NS_ASSERTION(entry->mKey.mKeyStr.m1b == 0, "Entry already exists!");
-
-        entry->mKey.mIsUnichar = PR_FALSE;
-        entry->mKey.mKeyStr.m1b = strPtr;      // not owned!
+        NS_ASSERTION(entry->mString == 0, "Entry already exists!");
+
+        entry->mString = strPtr;      // not owned!
         entry->mIndex = index;
     }
     return PR_TRUE;
diff --git a/xpcom/glue/nsTHashtable.h b/xpcom/glue/nsTHashtable.h
--- a/xpcom/glue/nsTHashtable.h
+++ b/xpcom/glue/nsTHashtable.h
@@ -329,7 +329,6 @@ nsTHashtable<EntryType>::Init(PRUint32 i
   {
     ::PL_DHashAllocTable,
     ::PL_DHashFreeTable,
-    s_GetKey,
     s_HashKey,
     s_MatchEntry,
     ::PL_DHashMoveEntryStub,
@@ -356,14 +355,6 @@ nsTHashtable<EntryType>::Init(PRUint32 i
 // static definitions
 
 template<class EntryType>
-const void*
-nsTHashtable<EntryType>::s_GetKey(PLDHashTable    *table,
-                                  PLDHashEntryHdr *entry)
-{
-  return ((EntryType*) entry)->GetKeyPointer();
-}
-
-template<class EntryType>
 PLDHashNumber
 nsTHashtable<EntryType>::s_HashKey(PLDHashTable  *table,
                                    const void    *key)
diff --git a/xpcom/glue/pldhash.c b/xpcom/glue/pldhash.c
--- a/xpcom/glue/pldhash.c
+++ b/xpcom/glue/pldhash.c
@@ -108,14 +108,6 @@ PL_DHashStringKey(PLDHashTable *table, c
     return h;
 }
 
-const void *
-PL_DHashGetKeyStub(PLDHashTable *table, PLDHashEntryHdr *entry)
-{
-    PLDHashEntryStub *stub = (PLDHashEntryStub *)entry;
-
-    return stub->key;
-}
-
 PLDHashNumber
 PL_DHashVoidPtrKeyStub(PLDHashTable *table, const void *key)
 {
@@ -175,7 +167,6 @@ static const PLDHashTableOps stub_ops = 
 static const PLDHashTableOps stub_ops = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    PL_DHashGetKeyStub,
     PL_DHashVoidPtrKeyStub,
     PL_DHashMatchEntryStub,
     PL_DHashMoveEntryStub,
diff --git a/xpcom/glue/pldhash.h b/xpcom/glue/pldhash.h
--- a/xpcom/glue/pldhash.h
+++ b/xpcom/glue/pldhash.h
@@ -87,11 +87,12 @@ typedef struct PLDHashTableOps  PLDHashT
  * Table entry header structure.
  *
  * In order to allow in-line allocation of key and value, we do not declare
- * either here.  Instead, the API uses const void *key as a formal parameter,
- * and asks each entry for its key when necessary via a getKey callback, used
- * when growing or shrinking the table.  Other callback types are defined
- * below and grouped into the PLDHashTableOps structure, for single static
- * initialization per hash table sub-type.
+ * either here.  Instead, the API uses const void *key as a formal parameter.
+ * The key need not be stored in the entry; it may be part of the value, but
+ * need not be stored at all.
+ *
+ * Callback types are defined below and grouped into the PLDHashTableOps
+ * structure, for single static initialization per hash table sub-type.
  *
  * Each hash table sub-type should nest the PLDHashEntryHdr structure at the
  * front of its particular entry type.  The keyHash member contains the result
@@ -244,16 +245,6 @@ typedef void
 (* PR_CALLBACK PLDHashFreeTable) (PLDHashTable *table, void *ptr);
 
 /*
- * When a table grows or shrinks, each entry is queried for its key using this
- * callback.  NB: in that event, entry is not in table any longer; it's in the
- * old entryStore vector, which is due to be freed once all entries have been
- * moved via moveEntry callbacks.
- */
-typedef const void *
-(* PR_CALLBACK PLDHashGetKey)    (PLDHashTable *table,
-                                      PLDHashEntryHdr *entry);
-
-/*
  * Compute the hash code for a given key to be looked up, added, or removed
  * from table.  A hash code may have any PLDHashNumber value.
  */
@@ -340,7 +331,6 @@ struct PLDHashTableOps {
     /* Mandatory hooks.  All implementations must provide these. */
     PLDHashAllocTable   allocTable;
     PLDHashFreeTable    freeTable;
-    PLDHashGetKey       getKey;
     PLDHashHashKey      hashKey;
     PLDHashMatchEntry   matchEntry;
     PLDHashMoveEntry    moveEntry;
@@ -368,9 +358,6 @@ struct PLDHashEntryStub {
     PLDHashEntryHdr hdr;
     const void      *key;
 };
-
-NS_COM_GLUE const void *
-PL_DHashGetKeyStub(PLDHashTable *table, PLDHashEntryHdr *entry);
 
 NS_COM_GLUE PLDHashNumber
 PL_DHashVoidPtrKeyStub(PLDHashTable *table, const void *key);
diff --git a/xpcom/io/nsFastLoadFile.cpp b/xpcom/io/nsFastLoadFile.cpp
--- a/xpcom/io/nsFastLoadFile.cpp
+++ b/xpcom/io/nsFastLoadFile.cpp
@@ -340,7 +340,6 @@ static const PLDHashTableOps strmap_DHas
 static const PLDHashTableOps strmap_DHashTableOps = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    PL_DHashGetKeyStub,
     PL_DHashStringKey,
     PL_DHashMatchStringKey,
     PL_DHashMoveEntryStub,
@@ -376,7 +375,6 @@ static const PLDHashTableOps objmap_DHas
 static const PLDHashTableOps objmap_DHashTableOps = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    PL_DHashGetKeyStub,
     PL_DHashVoidPtrKeyStub,
     PL_DHashMatchEntryStub,
     PL_DHashMoveEntryStub,
@@ -1247,14 +1245,6 @@ struct nsIDMapEntry : public PLDHashEntr
     nsID            mSlowID;            // key, used by PLDHashTableOps below
 };
 
-PR_STATIC_CALLBACK(const void *)
-idmap_GetKey(PLDHashTable *aTable, PLDHashEntryHdr *aHdr)
-{
-    nsIDMapEntry* entry = NS_STATIC_CAST(nsIDMapEntry*, aHdr);
-
-    return &entry->mSlowID;
-}
-
 PR_STATIC_CALLBACK(PLDHashNumber)
 idmap_HashKey(PLDHashTable *aTable, const void *aKey)
 {
@@ -1277,7 +1267,6 @@ static const PLDHashTableOps idmap_DHash
 static const PLDHashTableOps idmap_DHashTableOps = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    idmap_GetKey,
     idmap_HashKey,
     idmap_MatchEntry,
     PL_DHashMoveEntryStub,
diff --git a/xpcom/reflect/xptinfo/src/xptiWorkingSet.cpp b/xpcom/reflect/xptinfo/src/xptiWorkingSet.cpp
--- a/xpcom/reflect/xptinfo/src/xptiWorkingSet.cpp
+++ b/xpcom/reflect/xptinfo/src/xptiWorkingSet.cpp
@@ -48,12 +48,6 @@
 
 /***************************************************************************/
 
-PR_STATIC_CALLBACK(const void*)
-IIDGetKey(PLDHashTable *table, PLDHashEntryHdr *entry)
-{
-    return ((xptiHashEntry*)entry)->value->GetTheIID();
-}
-
 PR_STATIC_CALLBACK(PLDHashNumber)
 IIDHash(PLDHashTable *table, const void *key)
 {
@@ -75,7 +69,6 @@ const static struct PLDHashTableOps IIDT
 {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    IIDGetKey,
     IIDHash,
     IIDMatch,
     PL_DHashMoveEntryStub,
@@ -85,12 +78,6 @@ const static struct PLDHashTableOps IIDT
 
 /***************************************************************************/
 
-PR_STATIC_CALLBACK(const void*)
-NameGetKey(PLDHashTable *table, PLDHashEntryHdr *entry)
-{
-    return ((xptiHashEntry*)entry)->value->GetTheName();
-}
-
 PR_STATIC_CALLBACK(PRBool)
 NameMatch(PLDHashTable *table,
           const PLDHashEntryHdr *entry,
@@ -105,7 +92,6 @@ static const struct PLDHashTableOps Name
 {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
-    NameGetKey,
     PL_DHashStringKey,
     NameMatch,
     PL_DHashMoveEntryStub,
