From: L. David Baron <dbaron@dbaron.org>

Bug 1369941 - Remove ability to specify fuzzy()/fuzzy-if() in reftest manifests without ranges.  r?dholbert

I'm removing this no-longer-used feature because it promotes a behavior
(using the default 0 minimum) that means we never see reports of
unexpected passes when the bugs are fixed, and thus aren't protected
from the bugs regressing again.

Differential Revision: https://phabricator.services.mozilla.com/D3566

diff --git a/layout/tools/reftest/manifest.jsm b/layout/tools/reftest/manifest.jsm
--- a/layout/tools/reftest/manifest.jsm
+++ b/layout/tools/reftest/manifest.jsm
@@ -184,22 +184,22 @@ function ReadManifest(aURL, aFilter)
             } else if (item == "silentfail") {
                 cond = false;
                 allow_silent_fail = true;
             } else if ((m = item.match(RE_PREF_ITEM))) {
                 cond = false;
                 if (!AddPrefSettings(m[1], m[2], m[3], sandbox, testPrefSettings, refPrefSettings)) {
                     throw "Error in pref value in manifest file " + aURL.spec + " line " + lineNo;
                 }
-            } else if ((m = item.match(/^fuzzy\((\d+)(-\d+)?,(\d+)(-\d+)?\)$/))) {
+            } else if ((m = item.match(/^fuzzy\((\d+)-(\d+),(\d+)-(\d+)\)$/))) {
               cond = false;
               expected_status = EXPECTED_FUZZY;
               fuzzy_delta = ExtractRange(m, 1);
               fuzzy_pixels = ExtractRange(m, 3);
-            } else if ((m = item.match(/^fuzzy-if\((.*?),(\d+)(-\d+)?,(\d+)(-\d+)?\)$/))) {
+            } else if ((m = item.match(/^fuzzy-if\((.*?),(\d+)-(\d+),(\d+)-(\d+)\)$/))) {
               cond = false;
               if (Cu.evalInSandbox("(" + m[1] + ")", sandbox)) {
                 expected_status = EXPECTED_FUZZY;
                 fuzzy_delta = ExtractRange(m, 2);
                 fuzzy_pixels = ExtractRange(m, 4);
               }
             } else if (item == "chaos-mode") {
                 cond = false;
@@ -584,26 +584,20 @@ function AddPrefSettings(aWhere, aPrefNa
         }
         if (aWhere != "test-") {
             aRefPrefSettings.push(setting);
         }
     }
     return true;
 }
 
-function ExtractRange(matches, startIndex, defaultMin = 0) {
-    if (matches[startIndex + 1] === undefined) {
-        return {
-            min: defaultMin,
-            max: Number(matches[startIndex])
-        };
-    }
+function ExtractRange(matches, startIndex) {
     return {
         min: Number(matches[startIndex]),
-        max: Number(matches[startIndex + 1].substring(1))
+        max: Number(matches[startIndex + 1])
     };
 }
 
 function ServeTestBase(aURL, depth) {
     var listURL = aURL.QueryInterface(Ci.nsIFileURL);
     var directory = listURL.file.parent;
 
     // Allow serving a tree that's an ancestor of the directory containing
