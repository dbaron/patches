Fix failure to propagate aInherited result of nsRuleNode::CalcLength.  (Bug 460440)  r=kschwarz  sr=bzbarsky (BUT NEED TO ADDRESS bzbarsky COMMENTS)

diff --git a/layout/reftests/transform/propagate-inherit-boolean-ref.html b/layout/reftests/transform/propagate-inherit-boolean-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/transform/propagate-inherit-boolean-ref.html
@@ -0,0 +1,32 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
+	"http://www.w3.org/TR/html4/strict.dtd">
+<html lang="en-US">
+<head>
+	<title></title>
+	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
+	<meta http-equiv="Content-Style-Type" content="text/css">
+	<style type="text/css">
+
+	p {
+		font-size: 20px;
+		margin: 0;
+		height: 0;
+		width: 100px;
+		-moz-transform: translateX(80px);
+	}
+
+	p#two {
+		font-size: 40px;
+		-moz-transform: translateX(160px);
+	}
+
+	</style>
+</head>
+<body>
+
+<p id="one">One</p>
+
+<p id="two">Two</p>
+
+</body>
+</html>
diff --git a/layout/reftests/transform/propagate-inherit-boolean.html b/layout/reftests/transform/propagate-inherit-boolean.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/transform/propagate-inherit-boolean.html
@@ -0,0 +1,31 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
+	"http://www.w3.org/TR/html4/strict.dtd">
+<html lang="en-US">
+<head>
+	<title></title>
+	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
+	<meta http-equiv="Content-Style-Type" content="text/css">
+	<style type="text/css">
+
+	p {
+		font-size: 20px;
+		margin: 0;
+		height: 0;
+		width: 100px;
+		-moz-transform: translateX(4em);
+	}
+
+	p#two {
+		font-size: 40px;
+	}
+
+	</style>
+</head>
+<body>
+
+<p id="one">One</p>
+
+<p id="two">Two</p>
+
+</body>
+</html>
diff --git a/layout/reftests/transform/reftest.list b/layout/reftests/transform/reftest.list
--- a/layout/reftests/transform/reftest.list
+++ b/layout/reftests/transform/reftest.list
@@ -82,8 +82,9 @@ random == rotate-1e.html rotate-1-ref.ht
 # matrix with values equal to other transforms should behave indistinguishably
 == matrix-1a.html matrix-1-ref.html
 == matrix-2a.html matrix-2-ref.html
 == matrix-3a.html matrix-3-ref.html
 == matrix-4a.html matrix-4-ref.html
 == matrix-5a.html matrix-5-ref.html
 == matrix-6a.html matrix-6-ref.html
 == matrix-7a.html matrix-7-ref.html
+== propagate-inherit-boolean.html propagate-inherit-boolean-ref.html
diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -3174,17 +3174,17 @@ static nsStyleTransformMatrix ReadTransf
     NS_ASSERTION(currElem.GetUnit() == eCSSUnit_Function,
                  "Stream should consist solely of functions!");
     NS_ASSERTION(currElem.GetArrayValue()->Count() >= 1,
                  "Incoming function is too short!");
 
     /* Read in a single transform matrix, then accumulate it with the total. */
     nsStyleTransformMatrix currMatrix;
     currMatrix.SetToTransformFunction(currElem.GetArrayValue(), aContext,
-                                      aPresContext);
+                                      aPresContext, aInherited);
     result *= currMatrix;
   }
   return result;
 }
 
 const void*
 nsRuleNode::ComputeDisplayData(void* aStartStruct,
                                const nsRuleDataStruct& aData, 
diff --git a/layout/style/nsStyleTransformMatrix.cpp b/layout/style/nsStyleTransformMatrix.cpp
--- a/layout/style/nsStyleTransformMatrix.cpp
+++ b/layout/style/nsStyleTransformMatrix.cpp
@@ -230,27 +230,26 @@ nsStyleTransformMatrix::operator *(const
 nsStyleTransformMatrix::operator *(const nsStyleTransformMatrix &aOther) const
 {
   return nsStyleTransformMatrix(*this) *= aOther;
 }
 
 /* Helper function to fill in an nscoord with the specified nsCSSValue. */
 static void SetCoordToValue(const nsCSSValue &aValue,
 			    nsStyleContext* aContext,
-			    nsPresContext* aPresContext, nscoord &aOut)
+			    nsPresContext* aPresContext,
+			    PRBool &aInherited, nscoord &aOut)
 {
-  PRBool unused = PR_FALSE;
-  aOut = nsRuleNode::CalcLength(aValue, aContext, aPresContext, unused);
-
-  NS_POSTCONDITION(!unused, "How did we inherit a value?");
+  aOut = nsRuleNode::CalcLength(aValue, aContext, aPresContext, aInherited);
 }
 
 /* Helper function to process a matrix entry. */
 static void ProcessMatrix(float aMain[4], nscoord aDelta[2],
 			  float aX[2], float aY[2],
+			  PRBool& aInherited,
 			  const nsCSSValue::Array* aData,
 			  nsStyleContext* aContext,
 			  nsPresContext* aPresContext)
 {
   NS_PRECONDITION(aData->Count() == 7, "Invalid array!");
 
   /* Take the first four elements out of the array as floats and store
    * them in aMain.
@@ -259,29 +258,32 @@ static void ProcessMatrix(float aMain[4]
     aMain[index - 1] = aData->Item(index).GetFloatValue();
 
   /* For the fifth element, if it's a percentage, store it in aX[0].
    * Otherwise, it's a length that needs to go in aDelta[0]
    */
   if (aData->Item(5).GetUnit() == eCSSUnit_Percent)
     aX[0] = aData->Item(5).GetPercentValue();
   else
-    SetCoordToValue(aData->Item(5), aContext, aPresContext, aDelta[0]);
+    SetCoordToValue(aData->Item(5), aContext, aPresContext, aInherited,
+                    aDelta[0]);
 
   /* For the final element, if it's a percentage, store it in aY[1].
    * Otherwise, it's a length that needs to go in aDelta[1].
    */
   if (aData->Item(6).GetUnit() == eCSSUnit_Percent)
     aY[1] = aData->Item(6).GetPercentValue();
   else
-    SetCoordToValue(aData->Item(6), aContext, aPresContext, aDelta[1]);
+    SetCoordToValue(aData->Item(6), aContext, aPresContext, aInherited,
+                    aDelta[1]);
 }
 
 /* Helper function to process a translatex function. */
 static void ProcessTranslateX(nscoord aDelta[2], float aX[2],
+			      PRBool& aInherited,
 			      const nsCSSValue::Array* aData,
 			      nsStyleContext* aContext,
 			      nsPresContext* aPresContext)
 {
   NS_PRECONDITION(aData->Count() == 2, "Invalid array!");
 
   /* There are two cases.  If we have a number, we want our matrix to look
    * like this:
@@ -290,23 +292,25 @@ static void ProcessTranslateX(nscoord aD
    * |  0  1  0|
    * |  0  0  1|
    * So E = value
    * 
    * Otherwise, we might have a percentage, so we want to set the dX component
    * to the percent.
    */
   if (aData->Item(1).GetUnit() != eCSSUnit_Percent)
-    SetCoordToValue(aData->Item(1), aContext, aPresContext, aDelta[0]);
+    SetCoordToValue(aData->Item(1), aContext, aPresContext, aInherited,
+                    aDelta[0]);
   else
     aX[0] = aData->Item(1).GetPercentValue();
 }
 
 /* Helper function to process a translatey function. */
 static void ProcessTranslateY(nscoord aDelta[2], float aY[2],
+			      PRBool& aInherited,
 			      const nsCSSValue::Array* aData,
 			      nsStyleContext* aContext,
 			      nsPresContext* aPresContext)
 {
   NS_PRECONDITION(aData->Count() == 2, "Invalid array!");
 
   /* There are two cases.  If we have a number, we want our matrix to look
    * like this:
@@ -315,23 +319,25 @@ static void ProcessTranslateY(nscoord aD
    * |  0  1 dy|
    * |  0  0  1|
    * So E = value
    * 
    * Otherwise, we might have a percentage, so we want to set the dY component
    * to the percent.
    */
   if (aData->Item(1).GetUnit() != eCSSUnit_Percent)
-    SetCoordToValue(aData->Item(1), aContext, aPresContext, aDelta[1]);
+    SetCoordToValue(aData->Item(1), aContext, aPresContext, aInherited,
+                    aDelta[1]);
   else
     aY[1] = aData->Item(1).GetPercentValue();
 }
 
 /* Helper function to process a translate function. */
 static void ProcessTranslate(nscoord aDelta[2], float aX[2], float aY[2],
+			     PRBool& aInherited,
 			     const nsCSSValue::Array* aData,
 			     nsStyleContext* aContext,
 			     nsPresContext* aPresContext)
 {
   NS_PRECONDITION(aData->Count() == 2 || aData->Count() == 3, "Invalid array!");
 
   /* There are several cases to consider.
    * First, we might have one value, or we might have two.  If we have
@@ -340,25 +346,25 @@ static void ProcessTranslate(nscoord aDe
    * percents, store them in the dX and dY components.  Otherwise, store them in
    * the main matrix.
    */
 
   const nsCSSValue &dx = aData->Item(1);
   if (dx.GetUnit() == eCSSUnit_Percent)
     aX[0] = dx.GetPercentValue();
   else
-    SetCoordToValue(dx, aContext, aPresContext, aDelta[0]);
+    SetCoordToValue(dx, aContext, aPresContext, aInherited, aDelta[0]);
 
   /* If we read in a Y component, set it appropriately */
   if (aData->Count() == 3) {
     const nsCSSValue &dy = aData->Item(2);
     if (dy.GetUnit() == eCSSUnit_Percent)
       aY[1] = dy.GetPercentValue();
     else
-      SetCoordToValue(dy, aContext, aPresContext, aDelta[1]); 
+      SetCoordToValue(dy, aContext, aPresContext, aInherited, aDelta[1]); 
   }
 }
 
 /* Helper function to set up a scale matrix. */
 static void ProcessScaleHelper(float aXScale, float aYScale, float aMain[4])
 {
   /* We want our matrix to look like this:
    * | dx  0  0|
@@ -463,39 +469,41 @@ static void ProcessRotate(float aMain[4]
 
 /**
  * SetToTransformFunction is essentially a giant switch statement that fans
  * out to many smaller helper functions.
  */
 void
 nsStyleTransformMatrix::SetToTransformFunction(const nsCSSValue::Array * aData,
                                                nsStyleContext* aContext,
-                                               nsPresContext* aPresContext)
+                                               nsPresContext* aPresContext,
+                                               PRBool& aInherited)
 {
   NS_PRECONDITION(aData, "Why did you want to get data from a null array?");
   NS_PRECONDITION(aContext, "Need a context for unit conversion!");
   NS_PRECONDITION(aPresContext, "Need a context for unit conversion!");
   
   /* Reset the matrix to the identity so that each subfunction can just
    * worry about its own components.
    */
   SetToIdentity();
 
   /* Get the keyword for the transform. */
   nsAutoString keyword;
   aData->Item(0).GetStringValue(keyword);
   switch (nsCSSKeywords::LookupKeyword(keyword)) {
   case eCSSKeyword_translatex:
-    ProcessTranslateX(mDelta, mX, aData, aContext, aPresContext);
+    ProcessTranslateX(mDelta, mX, aInherited, aData, aContext, aPresContext);
     break;
   case eCSSKeyword_translatey:
-    ProcessTranslateY(mDelta, mY, aData, aContext, aPresContext);
+    ProcessTranslateY(mDelta, mY, aInherited, aData, aContext, aPresContext);
     break;
   case eCSSKeyword_translate:
-    ProcessTranslate(mDelta, mX, mY, aData, aContext, aPresContext);
+    ProcessTranslate(mDelta, mX, mY, aInherited, aData, aContext,
+                     aPresContext);
     break;
   case eCSSKeyword_scalex:
     ProcessScaleX(mMain, aData);
     break;
   case eCSSKeyword_scaley:
     ProcessScaleY(mMain, aData);
     break;
   case eCSSKeyword_scale:
@@ -509,17 +517,18 @@ nsStyleTransformMatrix::SetToTransformFu
     break;
   case eCSSKeyword_skew:
     ProcessSkew(mMain, aData);
     break;
   case eCSSKeyword_rotate:
     ProcessRotate(mMain, aData);
     break;
   case eCSSKeyword_matrix:
-    ProcessMatrix(mMain, mDelta, mX, mY, aData, aContext, aPresContext);
+    ProcessMatrix(mMain, mDelta, mX, mY, aInherited, aData, aContext,
+                  aPresContext);
     break;
   default:
     NS_NOTREACHED("Unknown transform function!");
   }
 }
 
 /* Does an element-by-element comparison and returns whether or not the
  * matrices are equal.
diff --git a/layout/style/nsStyleTransformMatrix.h b/layout/style/nsStyleTransformMatrix.h
--- a/layout/style/nsStyleTransformMatrix.h
+++ b/layout/style/nsStyleTransformMatrix.h
@@ -107,20 +107,23 @@ class nsStyleTransformMatrix
 
   /**
    * Given an nsCSSValue::Array* containing a -moz-transform function,
    * updates this matrix to hold the value of that function.
    *
    * @param aData The nsCSSValue::Array* containing the transform function.
    * @param aContext The style context, used for unit conversion.
    * @param aPresContext The presentation context, used for unit conversion.
+   * @param aInherited Set to true if the result cannot be cached in the rule
+   *                   tree, otherwise untouched.
    */
   void SetToTransformFunction(const nsCSSValue::Array* aData,
                               nsStyleContext* aContext,
-                              nsPresContext* aPresContext);
+                              nsPresContext* aPresContext,
+                              PRBool& aInherited);
 
   /**
    * Sets this matrix to be the identity matrix.
    */
   void SetToIdentity();
 
   /**
    * Returns the value of the entry at the 2x2 submatrix of the
