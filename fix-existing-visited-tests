From: L. David Baron <dbaron@dbaron.org>

Fix existing tests to deal with getComputedStyle lying about :link vs. :visited.  (Bug 147777)  (TODO: fix test_visited_pref.html)

diff --git a/docshell/test/chrome/bug293235.html b/docshell/test/chrome/bug293235.html
--- a/docshell/test/chrome/bug293235.html
+++ b/docshell/test/chrome/bug293235.html
@@ -1,13 +1,13 @@
 <html>
   <head>
     <title>Bug 293235 page1</title>
     <style type="text/css">
-      a:visited { color: rgb(128, 0, 128); }
-      a:link { color: rgb(0, 0, 128); }
+      a:visited, a.forcevisited.forcevisited { color: rgb(128, 0, 128); }
+      a:link, a.forcelink.forcelink { color: rgb(0, 0, 128); }
       a:focus { color: rgb(128, 0, 0); }
     </style>
   </head>
   <body>
     <a id="link1" href="bug293235_p2.html">This is a test link.</a>
   </body>
 </html>
diff --git a/docshell/test/chrome/bug293235_window.xul b/docshell/test/chrome/bug293235_window.xul
--- a/docshell/test/chrome/bug293235_window.xul
+++ b/docshell/test/chrome/bug293235_window.xul
@@ -7,16 +7,17 @@
         height="600"
         onload="setTimeout(nextTest,0);"
         title="bug 293235 test">
 
   <script type="application/javascript"
     src=
   "chrome://mochikit/content/chrome/docshell/test/chrome/docshell_helpers.js">
   </script>
+  <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/WindowSnapshot.js"></script>
 
   <script type="application/javascript"><![CDATA[
     const Ci = Components.interfaces;
     const Cc = Components.classes;
     Components.utils.import("resource://gre/modules/NetUtil.jsm");
 
     // Define the generator-iterator for the tests.
     var tests = testIterator();
@@ -69,19 +70,32 @@
       });
       yield;
 
       // Before we go any further, make sure our link has been notified.
       waitForTrue(notified, nextTest);
       yield;
 
       // Now that we've been notified, we can check our link color.
-      is(TestWindow.getWindow().getComputedStyle($("link1"), "").color,
-        "rgb(0, 0, 128)",
-        "link not initially blue");
+      // Since we can't use getComputedStyle() for this because
+      // getComputedStyle lies about styles that result from :visited,
+      // we have to take snapshots.
+      // First, take two reference snapshots.
+      var link1 = $("link1");
+      link1.className = "forcelink";
+      var refLink = snapshotWindow(TestWindow.getWindow());
+      link1.className = "forcevisited";
+      var refVisited = snapshotWindow(TestWindow.getWindow());
+      link1.className = "";
+      function snapshotsEqual(snap1, snap2) {
+        return compareSnapshots(snap1, snap2, true)[0];
+      }
+      ok(!snapshotsEqual(refLink, refVisited), "references should not match");
+      ok(snapshotsEqual(refLink, snapshotWindow(TestWindow.getWindow())),
+         "link should initially be blue");
 
       // Load the page that the link on the previous page points to.
       doPageNavigation({
         uri: getHttpUrl("bug293235_p2.html"),
         onNavComplete: nextTest
       });
       yield;
 
@@ -104,19 +118,18 @@
         expectedEvents: [ { type: "pageshow",
                             persisted: true,
                             title: "Bug 293235 page1" } ],
         onNavComplete: nextTest
       });
       yield;
 
       // Now we can test the link color.
-      is(TestWindow.getWindow().getComputedStyle($("link1"), "").color,
-        "rgb(128, 0, 128)",
-        ":visited link wrong color");
+      ok(snapshotsEqual(refVisited, snapshotWindow(TestWindow.getWindow())),
+         "visited link should be purple");
 
       // Tell the framework the test is finished.  Include the final 'yield'
       // statement to prevent a StopIteration exception from being thrown.
       finish();
       yield;
     }
 
   ]]></script>
diff --git a/layout/style/test/Makefile.in b/layout/style/test/Makefile.in
--- a/layout/style/test/Makefile.in
+++ b/layout/style/test/Makefile.in
@@ -196,16 +196,17 @@ _TEST_FILES =	test_acid3_test46.html \
 		media_queries_dynamic_xbl_iframe.html \
 		media_queries_dynamic_xbl_style.css \
 		bug453896_iframe.html \
 		bug517224.sjs \
 		test_bug525952.html \
 		ccd-quirks.html \
 		ccd-standards.html \
 		ccd.sjs \
+		visited-pref-iframe.html \
 		$(NULL)
 
 _BROWSER_FILES = \
 		browser_bug453896.js \
 		bug453896_iframe.html \
 		media_queries_iframe.html \
 		$(NULL)
 
diff --git a/layout/style/test/test_visited_pref.html b/layout/style/test/test_visited_pref.html
--- a/layout/style/test/test_visited_pref.html
+++ b/layout/style/test/test_visited_pref.html
@@ -2,35 +2,34 @@
 <html>
 <!--
 https://bugzilla.mozilla.org/show_bug.cgi?id=147777
 -->
 <head>
   <title>Test for visited link coloring pref Bug 147777</title>
   <script type="application/javascript" src="/MochiKit/packed.js"></script>
   <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="application/javascript" src="/tests/SimpleTest/WindowSnapshot.js"></script>
   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
   <style type="text/css">
 
   :link { float: left; }
 
   :visited { float: right; }
 
   </style>
 </head>
 <body>
 <a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=147777">Mozilla Bug 147777</a>
-<p id="display"><a id="mylink" href="test_visited_pref.html">link to this page</a></p>
+<iframe id="iframe" src="visited-pref-iframe.html" style="width: 10em; height: 5em"></iframe>
 <pre id="test">
 <script type="application/javascript">
 
 /** Test for Bug 147777 **/
 
-// NOTE: this test will fail when ran by itself because the URL is different!
-
 function reinsert_node(e) {
   var sib = e.nextSibling;
   var par = e.parentNode;
   par.removeChild(e);
   par.insertBefore(e, sib);
 }
 
 netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
@@ -45,48 +44,87 @@ function get_pref()
 }
 
 function set_pref(val)
 {
     netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
     dispBranch.setBoolPref("visited_links_enabled", val);
 }
 
-is(get_pref(), true, "pref defaults to true");
+function snapshotsEqual(snap1, snap2)
+{
+  return compareSnapshots(snap1, snap2, true)[0];
+}
 
-// Link coloring is asynchronous (and non-deterministic), so we wait until it
-// changes.
-var thread = Components.classes["@mozilla.org/thread-manager;1"].
-               getService(Components.interfaces.nsIThreadManager).
-               mainThread;
-var link = document.getElementById("mylink");
-var cs;
-var start = Date.now();
-do {
-  while (thread.hasPendingEvents())
-    thread.processNextEvent(false);
-  cs = getComputedStyle(link, "");
-} while(cs.cssFloat != "right");
-var end = Date.now();
-is(cs.cssFloat, "right", ":visited selector applies given default preferences");
+SimpleTest.waitForExplicitFinish();
+window.addEventListener("load", step1, false);
 
-set_pref(false);
+var iframe, subdoc, subwin;
+var link;
+var start;
+var timeout;
 
-// we don't handle dynamic changes of this pref; it only takes effect
-// when a new page loads
-reinsert_node(link);
+var unvisref; // reference image for unvisited style
 
-// Wait a while to make sure we don't update the style on our reinserted node.
-setTimeout(function() {
-  is(cs.cssFloat, "left", ":visited selector does not apply given false preference");
+function step1()
+{
+  is(get_pref(), true, "pref defaults to true");
+
+  iframe = document.getElementById("iframe");
+  subdoc = iframe.contentDocument;
+  subwin = iframe.contentWindow;
+  link = subdoc.getElementById("link");
+
+  unvisref = snapshotWindow(subwin, false);
+
+  // Now set the href of the link to a location that's actually visited.
+  link.href = window.location;
+
+  start = Date.now();
+
+  // And wait for the link to get restyled when the history lets us
+  // know it is (asynchronously).
+  setTimeout(poll_for_visited_style, 100);
+}
+
+function poll_for_visited_style()
+{
+  var snapshot = snapshotWindow(subwin, false);
+  if (snapshotsEqual(unvisref, snapshot)) {
+    // hasn't been styled yet
+    setTimeout(poll_for_visited_style, 100);
+
+    // If it never gets styled correctly, this test will fail because
+    // this loop will never complete.
+  } else {
+    var end = Date.now();
+    timeout = 3 * Math.max(end - start, 300);
+    step2();
+  }
+}
+
+function step2()
+{
+  set_pref(false);
+
+  // we don't handle dynamic changes of this pref; it only takes effect
+  // when a new page loads
+  reinsert_node(link);
+
+  setTimeout(step3, timeout);
+}
+
+function step3()
+{
+  var snapshot = snapshotWindow(subwin, false);
+  ok(snapshotsEqual(unvisref, snapshot),
+     ":visited selector does not apply given false preference");
 
   // Set the pref back for the rest of the tests.
   set_pref(true);
 
   SimpleTest.finish();
-}, 10 * Math.max(end - start, 100));
-
-SimpleTest.waitForExplicitFinish();
+}
 
 </script>
 </pre>
 </body>
 </html>
diff --git a/layout/style/test/visited-pref-iframe.html b/layout/style/test/visited-pref-iframe.html
new file mode 100644
--- /dev/null
+++ b/layout/style/test/visited-pref-iframe.html
@@ -0,0 +1,7 @@
+<!DOCTYPE HTML>
+<title>iframe for test_visited_pref.html</title>
+<style>
+:link { color: blue }
+:visited { color: purple }
+</style>
+<a href="http://www.example.com/url-that-has-not-been-visited" id="link">link</a>
