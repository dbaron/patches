Tests for css3-mediaqueries.  (Bug 156716)

diff --git a/layout/style/test/Makefile.in b/layout/style/test/Makefile.in
--- a/layout/style/test/Makefile.in
+++ b/layout/style/test/Makefile.in
@@ -63,17 +63,18 @@ include $(topsrcdir)/config/rules.mk
 
 css_properties.js: host_ListCSSProperties$(HOST_BIN_SUFFIX) css_properties_like_longhand.js Makefile
 	$(RM) $@
 	./host_ListCSSProperties$(HOST_BIN_SUFFIX) > $@
 	cat $(srcdir)/css_properties_like_longhand.js >> $@
 
 GARBAGE += css_properties.js
 
-_TEST_FILES =	test_bug73586.html \
+_TEST_FILES =	test_acid3_test46.html \
+		test_bug73586.html \
 		test_bug74880.html \
 		test_bug98997.html \
 		test_bug221428.html \
 		test_bug229915.html \
 		test_bug302186.html \
 		test_bug319381.html \
 		test_bug357614.html \
 		test_bug363146.html \
@@ -97,16 +98,17 @@ _TEST_FILES =	test_bug73586.html \
 		test_compute_data_with_start_struct.html \
 		test_css_eof_handling.html \
 		test_dont_use_document_colors.html \
 		test_for_expect_end_property.html \
 		test_inherit_computation.html \
 		test_inherit_storage.html \
 		test_initial_computation.html \
 		test_initial_storage.html \
+		test_media_queries.html \
 		test_of_type_selectors.xhtml \
 		test_parse_rule.html \
 		test_property_database.html \
 		test_property_syntax_errors.html \
 		test_selectors.html \
 		test_selectors_on_anonymous_content.html \
 		test_style_struct_copy_constructors.html \
 		test_value_computation.html \
@@ -122,13 +124,15 @@ _TEST_FILES =	test_bug73586.html \
 		redirect-1.css^headers^ \
 		redirect-2.css \
 		post-redirect-2.css \
 		redirect-2.css^headers^ \
 		redirect-3.css \
 		redirect-3.css^headers^ \
 		post-redirect-3.css \
 		xbl_bindings.xml \
+		empty.html \
+		media_queries_iframe.html \
 		$(NULL)
 
 
 libs:: $(_TEST_FILES)
 	$(INSTALL) $(foreach f,$^,"$f") $(DEPTH)/_tests/testing/mochitest/tests/$(relativesrcdir)
diff --git a/layout/style/test/empty.html b/layout/style/test/empty.html
new file mode 100644
--- /dev/null
+++ b/layout/style/test/empty.html
@@ -0,0 +1,1 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><html><head><title></title></head><body></body></html>
\ No newline at end of file
diff --git a/layout/style/test/media_queries_iframe.html b/layout/style/test/media_queries_iframe.html
new file mode 100644
--- /dev/null
+++ b/layout/style/test/media_queries_iframe.html
@@ -0,0 +1,15 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
+	"http://www.w3.org/TR/html4/strict.dtd">
+<html lang="en-US">
+<head>
+	<title>Media Queries Test inner frame</title>
+	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
+	<meta http-equiv="Content-Style-Type" content="text/css">
+	<style type="text/css" id="style" media="all">
+	body { text-decoration: underline; }
+	</style>
+</head>
+<body>
+
+</body>
+</html>
diff --git a/layout/style/test/test_acid3_test46.html b/layout/style/test/test_acid3_test46.html
new file mode 100644
--- /dev/null
+++ b/layout/style/test/test_acid3_test46.html
@@ -0,0 +1,139 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+https://bugzilla.mozilla.org/show_bug.cgi?id=156716
+-->
+<!--
+
+This is test 46 from the Acid3 test, http://acid3.acidtests.org/
+extracted from the test framework there and put into Mochitest.
+
+(from irc.mozilla.org, developers)
+[2008-05-14 18:07:38] <Hixie> dbaron: I hereby grant all files available from the server http://acid3.acidtests.org/ under the following license: (c) copyright 2008 Ian Hickson. These documents may be used under the terms of any of the following licenses: MPL. GPL. LGPL. BSD.
+
+-->
+<head>
+  <title>Test for Bug 156716</title>
+  <script type="text/javascript" src="/MochiKit/MochiKit.js"></script>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <style type="text/css">
+  iframe#selectors { width: 0; height: 0; }
+  </style>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=156716">Mozilla Bug 156716</a>
+<p id="display">
+  <iframe src="empty.html" id="selectors"></iframe>
+</p>
+<div id="content" style="display: none">
+  
+</div>
+<pre id="test">
+<script class="testbody" type="text/javascript">
+
+/** Test for Bug 156716 **/
+
+  function getTestDocument() {
+    var iframe = document.getElementById("selectors");
+    var doc = iframe.contentDocument;
+    for (var i = doc.documentElement.childNodes.length-1; i >= 0; i -= 1)
+      doc.documentElement.removeChild(doc.documentElement.childNodes[i]);
+    doc.documentElement.appendChild(doc.createElement('head'));
+    doc.documentElement.firstChild.appendChild(doc.createElement('title'));
+    doc.documentElement.appendChild(doc.createElement('body'));
+    return doc;
+  }
+
+  // test 46: media queries
+  var doc = getTestDocument();
+  var style = doc.createElement('style');
+  style.setAttribute('type', 'text/css');
+  style.appendChild(doc.createTextNode('@media all and (min-color: 0) { #a { text-transform: uppercase; } }'));                         // matches
+  style.appendChild(doc.createTextNode('@media not all and (min-color: 0) { #b { text-transform: uppercase; } }'));
+  style.appendChild(doc.createTextNode('@media only all and (min-color: 0) { #c { text-transform: uppercase; } }'));                    // matches
+  style.appendChild(doc.createTextNode('@media (bogus) { #d { text-transform: uppercase; } }'));
+  style.appendChild(doc.createTextNode('@media all and (bogus) { #e { text-transform: uppercase; } }'));
+  style.appendChild(doc.createTextNode('@media not all and (bogus) { #f { text-transform: uppercase; } }'));                            // matches
+  style.appendChild(doc.createTextNode('@media only all and (bogus) { #g { text-transform: uppercase; } }'));
+  style.appendChild(doc.createTextNode('@media (bogus), all { #h { text-transform: uppercase; } }'));                                   // matches
+  style.appendChild(doc.createTextNode('@media all and (bogus), all { #i { text-transform: uppercase; } }'));                           // matches
+  style.appendChild(doc.createTextNode('@media not all and (bogus), all { #j { text-transform: uppercase; } }'));                       // matches
+  style.appendChild(doc.createTextNode('@media only all and (bogus), all { #k { text-transform: uppercase; } }'));                      // matches
+  style.appendChild(doc.createTextNode('@media all, (bogus) { #l { text-transform: uppercase; } }'));                                   // matches
+  style.appendChild(doc.createTextNode('@media all, all and (bogus) { #m { text-transform: uppercase; } }'));                           // matches
+  style.appendChild(doc.createTextNode('@media all, not all and (bogus) { #n { text-transform: uppercase; } }'));                       // matches
+  style.appendChild(doc.createTextNode('@media all, only all and (bogus) { #o { text-transform: uppercase; } }'));                      // matches
+  style.appendChild(doc.createTextNode('@media all and color { #p { text-transform: uppercase; } }'));
+  style.appendChild(doc.createTextNode('@media all and min-color: 0 { #q { text-transform: uppercase; } }'));
+  style.appendChild(doc.createTextNode('@media all, all and color { #r { text-transform: uppercase; } }'));
+  style.appendChild(doc.createTextNode('@media all, all and min-color: 0 { #s { text-transform: uppercase; } }'));
+  style.appendChild(doc.createTextNode('@media all and min-color: 0, all { #t { text-transform: uppercase; } }'));
+  style.appendChild(doc.createTextNode('@media (max-color: 0) and (max-monochrome: 0) { #u { text-transform: uppercase; } }'));
+  style.appendChild(doc.createTextNode('@media (min-color: 1), (min-monochrome: 1) { #v { text-transform: uppercase; } }'));            // matches
+  style.appendChild(doc.createTextNode('@media all and (min-color: 0) and (min-monochrome: 0) { #w { text-transform: uppercase; } }')); // matches
+  style.appendChild(doc.createTextNode('@media not all and (min-color: 1), not all and (min-monochrome: 1) { #x { text-transform: uppercase; } }')); // matches
+  style.appendChild(doc.createTextNode('@media all and (min-height: 1em) and (min-width: 1em) { #y1 { text-transform: uppercase; } }'));
+  style.appendChild(doc.createTextNode('@media all and (max-height: 1em) and (min-width: 1em) { #y2 { text-transform: uppercase; } }'));
+  style.appendChild(doc.createTextNode('@media all and (min-height: 1em) and (max-width: 1em) { #y3 { text-transform: uppercase; } }'));
+  style.appendChild(doc.createTextNode('@media all and (max-height: 1em) and (max-width: 1em) { #y4 { text-transform: uppercase; } }')); // matches
+  doc.getElementsByTagName('head')[0].appendChild(style);
+  var names = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y1', 'y2', 'y3', 'y4'];
+  for (var i in names) {
+	var p = doc.createElement('p');
+	p.id = names[i];
+	doc.body.appendChild(p);
+  }
+  var count = 0;
+  var check = function (c, e) {
+	count += 1;
+	var p = doc.getElementById(c);
+	is(doc.defaultView.getComputedStyle(p, '').textTransform, e ? 'uppercase' : 'none', "case " + c + " failed (index " + count + ")");
+  }
+  check('a', true); // 1
+  check('b', false);
+  check('c', true);
+  check('d', false);
+  check('e', false);
+  check('f', true);
+  check('g', false);
+  check('h', true);
+  check('i', true);
+  check('j', true); // 10
+  check('k', true);
+  check('l', true);
+  check('m', true);
+  check('n', true);
+  check('o', true);
+  check('p', false);
+  check('q', false);
+  check('r', false);
+  check('s', false);
+  check('t', false); // 20
+  check('u', false);
+  check('v', true);
+  check('w', true);
+  check('x', true);
+  // here the viewport is 0x0
+  check('y1', false); // 25
+  check('y2', false);
+  check('y3', false);
+  check('y4', true);
+  document.getElementById("selectors").setAttribute("style", "height: 100px; width: 100px");
+  // now the viewport is more than 1em by 1em
+  check('y1', true); // 29
+  check('y2', false);
+  check('y3', false);
+  check('y4', false);
+  document.getElementById("selectors").removeAttribute("style");
+  // here the viewport is 0x0 again
+  check('y1', false); // 33
+  check('y2', false);
+  check('y3', false);
+  check('y4', true);
+
+</script>
+</pre>
+</body>
+</html>
+
diff --git a/layout/style/test/test_media_queries.html b/layout/style/test/test_media_queries.html
new file mode 100644
--- /dev/null
+++ b/layout/style/test/test_media_queries.html
@@ -0,0 +1,158 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+https://bugzilla.mozilla.org/show_bug.cgi?id=156716
+-->
+<head>
+  <title>Test for Bug 156716</title>
+  <script type="text/javascript" src="/MochiKit/MochiKit.js"></script>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body onload="run()">
+<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=156716">Mozilla Bug 156716</a>
+<iframe id="subdoc" src="media_queries_iframe.html"></iframe>
+<div id="content" style="display: none">
+  
+</div>
+<pre id="test">
+<script class="testbody" type="application/javascript; version=1.7">
+
+/** Test for Bug 156716 **/
+
+// Note that many other tests are in test_acid3_test46.html .
+
+SimpleTest.waitForExplicitFinish();
+
+function run() {
+  var subdoc = document.getElementById("subdoc").contentDocument;
+  var subwin = document.getElementById("subdoc").contentWindow;
+  var style = subdoc.getElementById("style");
+  var iframe_style = document.getElementById("subdoc").style;
+  var body_cs = subdoc.defaultView.getComputedStyle(subdoc.body, "");
+
+  function query_applies(q) {
+    style.setAttribute("media", q);
+    return body_cs.getPropertyValue("text-decoration") == "underline";
+  }
+
+  function should_apply(q) {
+    ok(query_applies(q), q + " should apply");
+  }
+
+  function should_not_apply(q) {
+    ok(!query_applies(q), q + " should not apply");
+  }
+
+  function query_is_parseable(q) {
+    style.setAttribute("media", q);
+    return !style.sheet.media.mediaText.match(/\(unknown-expression\)/);
+  }
+
+  // The query given as an argument must not begin with "not" or "only",
+  // and must be a single query (i.e., not contain commas).
+  function query_should_be_parseable(q) {
+    ok(query_is_parseable(q), q + " should be parseable");
+  }
+
+  // The query given as an argument must not begin with "not" or "only",
+  // and must be a single query (i.e., not contain commas).
+  function query_should_not_be_parseable(q) {
+    ok(!query_is_parseable(q), q + " should not be parseable");
+  }
+
+  function expression_should_be_parseable(expression) {
+    return query_should_be_parseable("all and (" + expression + ")");
+  }
+
+  function expression_should_not_be_parseable(expression) {
+    return query_should_not_be_parseable("all and (" + expression + ")");
+  }
+
+  for each (let feature in [ "width", "height", "device-width",
+                             "device-height" ]) {
+    expression_should_be_parseable(feature);
+    expression_should_be_parseable(feature + ": 0");
+    expression_should_be_parseable(feature + ": 0px");
+    expression_should_be_parseable(feature + ": 0em");
+    expression_should_be_parseable(feature + ": -0");
+    expression_should_be_parseable("min-" + feature + ": -0");
+    expression_should_be_parseable("max-" + feature + ": -0");
+    expression_should_be_parseable(feature + ": -0cm");
+    expression_should_be_parseable(feature + ": 1px");
+    expression_should_be_parseable(feature + ": 0.001mm");
+    expression_should_be_parseable(feature + ": 100000px");
+    expression_should_not_be_parseable(feature + ": -1px");
+    expression_should_not_be_parseable("min-" + feature + ": -1px");
+    expression_should_not_be_parseable("max-" + feature + ": -1px");
+    expression_should_not_be_parseable(feature + ": -0.00001mm");
+    expression_should_not_be_parseable(feature + ": -100000em");
+  }
+
+  var content_div = document.getElementById("content");
+  content_div.style.font = "-moz-initial";
+  var em_size =
+    getComputedStyle(content_div, "").fontSize.match(/^(\d+)px$/)[1];
+
+  // in this test, assume the common underlying implementation is correct
+  let width_val = 117;
+  let height_val = 76;
+  iframe_style.width = width_val + "px";
+  iframe_style.height = height_val + "px";
+  for (let [feature, value] in
+         Iterator({ "width": width_val,
+                    "height": height_val,
+                    "device-width": window.screen.width,
+                    "device-height": window.screen.height })) {
+    should_apply("all and (" + feature + ": " + value + "px)");
+    should_not_apply("all and (" + feature + ": " + (value + 1) + "px)");
+    should_not_apply("all and (" + feature + ": " + (value - 1) + "px)");
+    should_apply("all and (min-" + feature + ": " + value + "px)");
+    should_not_apply("all and (min-" + feature + ": " + (value + 1) + "px)");
+    should_apply("all and (min-" + feature + ": " + (value - 1) + "px)");
+    should_apply("all and (max-" + feature + ": " + value + "px)");
+    should_apply("all and (max-" + feature + ": " + (value + 1) + "px)");
+    should_not_apply("all and (max-" + feature + ": " + (value - 1) + "px)");
+    should_not_apply("all and (min-" + feature + ": " +
+                     (Math.ceil(value/em_size) + 1) + "em)");
+    should_apply("all and (min-" + feature + ": " +
+                 (Math.floor(value/em_size) - 1) + "em)");
+    should_apply("all and (max-" + feature + ": " +
+                 (Math.ceil(value/em_size) + 1) + "em)");
+    should_not_apply("all and (max-" + feature + ": " +
+                     (Math.floor(value/em_size) - 1) + "em)");
+  }
+
+  var is_monochrome = query_applies("all and (min-monochrome: 1)");
+  var is_color = query_applies("all and (min-color: 1)");
+  isnot(is_monochrome, is_color, "should be either monochrome or color");
+
+  function depth_query(prefix, depth) {
+    return "all and (" + prefix + (is_color ? "color" : "monochrome") +
+           ":" + depth + ")";
+  }
+
+  var depth = 0;
+  do {
+    if (depth > 50) {
+      ok(false, "breaking from loop, depth > 50");
+      break;
+    }
+  } while (query_applies(depth_query("min-", ++depth)));
+  --depth;
+
+  should_apply(depth_query("", depth));
+  should_not_apply(depth_query("", depth - 1));
+  should_not_apply(depth_query("", depth + 1));
+  should_apply(depth_query("max-", depth));
+  should_not_apply(depth_query("max-", depth - 1));
+  should_apply(depth_query("max-", depth + 1));
+
+  SimpleTest.finish();
+}
+
+</script>
+</pre>
+</body>
+</html>
+
