From: L. David Baron <dbaron@dbaron.org>

Bug 784461, patch 2 - Add parameter allowing LookupProperty to return an alias

TODO: Should probably return the alias in an out param instead.

diff --git a/layout/style/nsCSSProps.cpp b/layout/style/nsCSSProps.cpp
--- a/layout/style/nsCSSProps.cpp
+++ b/layout/style/nsCSSProps.cpp
@@ -515,70 +515,74 @@ nsCSSProps::IsCustomPropertyName(const n
 nsCSSProps::IsCustomPropertyName(const nsAString& aProperty)
 {
   return aProperty.Length() >= CSS_CUSTOM_NAME_PREFIX_LENGTH &&
          StringBeginsWith(aProperty, NS_LITERAL_STRING("--"));
 }
 
 /* static */ nsCSSProperty
 nsCSSProps::DoLookupProperty(nsCSSProperty aTableLookupResult,
-                             EnabledState aEnabled)
+                             EnabledState aEnabled,
+                             AliasHandling aAliasHandling)
 {
   nsCSSProperty res = aTableLookupResult;
-  if (MOZ_LIKELY(res < eCSSProperty_COUNT)) {
-    if (res != eCSSProperty_UNKNOWN && !IsEnabled(res, aEnabled)) {
-      res = eCSSProperty_UNKNOWN;
-    }
+  if (res != eCSSProperty_UNKNOWN && !IsEnabled(res, aEnabled)) {
+    res = eCSSProperty_UNKNOWN;
+  }
+  if (MOZ_LIKELY(res == eCSSProperty_UNKNOWN || res < eCSSProperty_COUNT)) {
     return res;
   }
   MOZ_ASSERT(eCSSAliasCount != 0,
              "'res' must be an alias at this point so we better have some!");
-  // We intentionally don't support eEnabledInUASheets or eEnabledInChrome
-  // for aliases yet because it's unlikely there will be a need for it.
-  if (IsEnabled(res) || aEnabled == eIgnoreEnabledState) {
-    res = gAliases[res - eCSSProperty_COUNT];
-    MOZ_ASSERT(0 <= res && res < eCSSProperty_COUNT,
-               "aliases must not point to other aliases");
-    if (IsEnabled(res) || aEnabled == eIgnoreEnabledState) {
-      return res;
-    }
+  nsCSSProperty aliasTarget = gAliases[res - eCSSProperty_COUNT];
+  MOZ_ASSERT(0 <= aliasTarget && aliasTarget < eCSSProperty_COUNT,
+             "aliases must not point to other aliases");
+  if (!IsEnabled(aliasTarget, aEnabled)) {
+    // We need to check whether the alias's target is enabled whether
+    // or not we want to return the alias or its target.
+    res = eCSSProperty_UNKNOWN;
+  } else if (aAliasHandling == eResolveAliases) {
+    res = aliasTarget;
   }
-  return eCSSProperty_UNKNOWN;
+  return res;
 }
 
 nsCSSProperty
 nsCSSProps::LookupProperty(const nsACString& aProperty,
-                           EnabledState aEnabled)
+                           EnabledState aEnabled,
+                           AliasHandling aAliasHandling)
 {
   MOZ_ASSERT(gPropertyTable, "no lookup table, needs addref");
 
   if (nsLayoutUtils::CSSVariablesEnabled() &&
       IsCustomPropertyName(aProperty)) {
     return eCSSPropertyExtra_variable;
   }
 
   return DoLookupProperty(nsCSSProperty(gPropertyTable->Lookup(aProperty)),
-                          aEnabled);
+                          aEnabled, aAliasHandling);
 }
 
 nsCSSProperty
-nsCSSProps::LookupProperty(const nsAString& aProperty, EnabledState aEnabled)
+nsCSSProps::LookupProperty(const nsAString& aProperty,
+                           EnabledState aEnabled,
+                           AliasHandling aAliasHandling)
 {
   MOZ_ASSERT(gPropertyTable, "no lookup table, needs addref");
 
   if (nsLayoutUtils::CSSVariablesEnabled() &&
       IsCustomPropertyName(aProperty)) {
     return eCSSPropertyExtra_variable;
   }
 
   // This is faster than converting and calling
   // LookupProperty(nsACString&).  The table will do its own
   // converting and avoid a PromiseFlatCString() call.
   return DoLookupProperty(nsCSSProperty(gPropertyTable->Lookup(aProperty)),
-                          aEnabled);
+                          aEnabled, aAliasHandling);
 }
 
 nsCSSProperty
 nsCSSProps::LookupPropertyByIDLName(const nsACString& aPropertyIDLName,
                                     EnabledState aEnabled)
 {
   nsCSSProperty res;
   if (!gPropertyIDLNameTable->Get(aPropertyIDLName, &res)) {
diff --git a/layout/style/nsCSSProps.h b/layout/style/nsCSSProps.h
--- a/layout/style/nsCSSProps.h
+++ b/layout/style/nsCSSProps.h
@@ -353,26 +353,36 @@ public:
     eEnabledInChrome      = 0x02,
     // Special value to unconditionally enable a property. This implies all the
     // bits above, but is strictly more than just their OR-ed union.
     // This just skips any test so a property will be enabled even if it would
     // have been disabled with all the bits above set.
     eIgnoreEnabledState   = 0xff
   };
 
+  enum AliasHandling {
+    eResolveAliases,
+    eReturnAliases
+  };
+
   // Looks up the property with name aProperty and returns its corresponding
   // nsCSSProperty value.  If aProperty is the name of a custom property,
   // then eCSSPropertyExtra_variable will be returned.
   static nsCSSProperty LookupProperty(const nsAString& aProperty,
-                                      EnabledState aEnabled);
+                                      EnabledState aEnabled,
+                                      AliasHandling aAliasHandling =
+                                                      eResolveAliases);
   static nsCSSProperty LookupProperty(const nsACString& aProperty,
-                                      EnabledState aEnabled);
+                                      EnabledState aEnabled,
+                                      AliasHandling aAliasHandling =
+                                                      eResolveAliases);
 private:
   static nsCSSProperty DoLookupProperty(nsCSSProperty aTableLookupResult,
-                                        EnabledState aEnabled);
+                                        EnabledState aEnabled,
+                                        AliasHandling aAliasHandling);
 public:
   // As above, but looked up using a property's IDL name.
   // eCSSPropertyExtra_variable won't be returned from these methods.
   static nsCSSProperty LookupPropertyByIDLName(
       const nsAString& aPropertyIDLName,
       EnabledState aEnabled);
   static nsCSSProperty LookupPropertyByIDLName(
       const nsACString& aPropertyIDLName,
@@ -634,16 +644,20 @@ public:
   static bool IsEnabled(nsCSSProperty aProperty, EnabledState aEnabled)
   {
     if (IsEnabled(aProperty)) {
       return true;
     }
     if (aEnabled == eIgnoreEnabledState) {
       return true;
     }
+    if (aProperty >= eCSSProperty_COUNT) {
+      // Aliases don't have flags.
+      return false;
+    }
     if ((aEnabled & eEnabledInUASheets) &&
         PropHasFlags(aProperty, CSS_PROPERTY_ENABLED_IN_UA_SHEETS))
     {
       return true;
     }
     if ((aEnabled & eEnabledInChrome) &&
         PropHasFlags(aProperty, CSS_PROPERTY_ENABLED_IN_CHROME))
     {
