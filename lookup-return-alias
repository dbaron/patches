From: L. David Baron <dbaron@dbaron.org>

Bug 784461, patch 2 - Add parameter allowing LookupProperty to return an alias

TODO: Should probably return the alias in an out param instead.

diff --git a/layout/style/nsCSSProps.cpp b/layout/style/nsCSSProps.cpp
--- a/layout/style/nsCSSProps.cpp
+++ b/layout/style/nsCSSProps.cpp
@@ -372,70 +372,74 @@ nsCSSProps::IsCustomPropertyName(const n
 nsCSSProps::IsCustomPropertyName(const nsAString& aProperty)
 {
   return aProperty.Length() >= (VAR_PREFIX_LENGTH + 1) &&
          StringBeginsWith(aProperty, NS_LITERAL_STRING("var-"));
 }
 
 /* static */ nsCSSProperty
 nsCSSProps::DoLookupProperty(nsCSSProperty aTableLookupResult,
-                             EnabledState aEnabled)
+                             EnabledState aEnabled,
+                             AliasHandling aAliasHandling)
 {
   nsCSSProperty res = aTableLookupResult;
-  if (MOZ_LIKELY(res < eCSSProperty_COUNT)) {
-    if (res != eCSSProperty_UNKNOWN && !IsEnabled(res, aEnabled)) {
-      res = eCSSProperty_UNKNOWN;
-    }
+  if (res != eCSSProperty_UNKNOWN && !IsEnabled(res, aEnabled)) {
+    res = eCSSProperty_UNKNOWN;
+  }
+  if (MOZ_LIKELY(res == eCSSProperty_UNKNOWN || res < eCSSProperty_COUNT)) {
     return res;
   }
   MOZ_ASSERT(eCSSAliasCount != 0,
              "'res' must be an alias at this point so we better have some!");
-  // We intentionally don't support eEnabledInUASheets for aliases yet
-  // because it's unlikely there will be a need for it.
-  if (IsEnabled(res) || aEnabled == eAny) {
-    res = gAliases[res - eCSSProperty_COUNT];
-    NS_ABORT_IF_FALSE(0 <= res && res < eCSSProperty_COUNT,
-                      "aliases must not point to other aliases");
-    if (IsEnabled(res) || aEnabled == eAny) {
-      return res;
-    }
+  nsCSSProperty aliasTarget = gAliases[res - eCSSProperty_COUNT];
+  NS_ABORT_IF_FALSE(0 <= aliasTarget && aliasTarget < eCSSProperty_COUNT,
+                    "aliases must not point to other aliases");
+  if (!IsEnabled(aliasTarget, aEnabled)) {
+    // We need to check whether the alias's target is enabled whether
+    // or not we want to return the alias or its target.
+    res = eCSSProperty_UNKNOWN;
+  } else if (aAliasHandling == eResolveAliases) {
+    res = aliasTarget;
   }
-  return eCSSProperty_UNKNOWN;
+  return res;
 }
 
 nsCSSProperty
 nsCSSProps::LookupProperty(const nsACString& aProperty,
-                           EnabledState aEnabled)
+                           EnabledState aEnabled,
+                           AliasHandling aAliasHandling)
 {
   NS_ABORT_IF_FALSE(gPropertyTable, "no lookup table, needs addref");
 
   if (nsLayoutUtils::CSSVariablesEnabled() &&
       IsCustomPropertyName(aProperty)) {
     return eCSSPropertyExtra_variable;
   }
 
   return DoLookupProperty(nsCSSProperty(gPropertyTable->Lookup(aProperty)),
-                          aEnabled);
+                          aEnabled, aAliasHandling);
 }
 
 nsCSSProperty
-nsCSSProps::LookupProperty(const nsAString& aProperty, EnabledState aEnabled)
+nsCSSProps::LookupProperty(const nsAString& aProperty,
+                           EnabledState aEnabled,
+                           AliasHandling aAliasHandling)
 {
   NS_ABORT_IF_FALSE(gPropertyTable, "no lookup table, needs addref");
 
   if (nsLayoutUtils::CSSVariablesEnabled() &&
       IsCustomPropertyName(aProperty)) {
     return eCSSPropertyExtra_variable;
   }
 
   // This is faster than converting and calling
   // LookupProperty(nsACString&).  The table will do its own
   // converting and avoid a PromiseFlatCString() call.
   return DoLookupProperty(nsCSSProperty(gPropertyTable->Lookup(aProperty)),
-                          aEnabled);
+                          aEnabled, aAliasHandling);
 }
 
 nsCSSFontDesc
 nsCSSProps::LookupFontDesc(const nsACString& aFontDesc)
 {
   NS_ABORT_IF_FALSE(gFontDescTable, "no lookup table, needs addref");
   return nsCSSFontDesc(gFontDescTable->Lookup(aFontDesc));
 }
diff --git a/layout/style/nsCSSProps.h b/layout/style/nsCSSProps.h
--- a/layout/style/nsCSSProps.h
+++ b/layout/style/nsCSSProps.h
@@ -262,26 +262,35 @@ public:
   static void ReleaseTable(void);
 
   // Given a property string, return the enum value
   enum EnabledState {
     eEnabled,
     eEnabledInUASheets,
     eAny
   };
+  enum AliasHandling {
+    eResolveAliases,
+    eReturnAliases
+  };
   // Looks up the property with name aProperty and returns its corresponding
   // nsCSSProperty value.  If aProperty is the name of a custom property,
   // then eCSSPropertyExtra_variable will be returned.
   static nsCSSProperty LookupProperty(const nsAString& aProperty,
-                                      EnabledState aEnabled);
+                                      EnabledState aEnabled,
+                                      AliasHandling aAliasHandling =
+                                                      eResolveAliases);
   static nsCSSProperty LookupProperty(const nsACString& aProperty,
-                                      EnabledState aEnabled);
+                                      EnabledState aEnabled,
+                                      AliasHandling aAliasHandling =
+                                                      eResolveAliases);
 private:
   static nsCSSProperty DoLookupProperty(nsCSSProperty aTableLookupResult,
-                                        EnabledState aEnabled);
+                                        EnabledState aEnabled,
+                                        AliasHandling aAliasHandling);
 public:
   // Returns whether aProperty is a custom property name, i.e. begins with
   // "var-" and has at least one more character.  This assumes that
   // the CSS Variables pref has been enabled.
   static bool IsCustomPropertyName(const nsAString& aProperty);
   static bool IsCustomPropertyName(const nsACString& aProperty);
 
   static inline bool IsShorthand(nsCSSProperty aProperty) {
