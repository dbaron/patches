From: L. David Baron <dbaron@dbaron.org>

Add parameter allowing LookupProperty to return an alias.  (Bug 784461, patch 2)

TODO: Should probably return the alias in an out param instead.

diff --git a/layout/style/nsCSSProps.cpp b/layout/style/nsCSSProps.cpp
--- a/layout/style/nsCSSProps.cpp
+++ b/layout/style/nsCSSProps.cpp
@@ -345,58 +345,65 @@ nsCSSProps::ReleaseTable(void)
 
     delete [] gShorthandsContainingPool;
     gShorthandsContainingPool = nullptr;
   }
 }
 
 /* static */ nsCSSProperty
 nsCSSProps::DoLookupProperty(nsCSSProperty aTableLookupResult,
-                             EnabledState aEnabled)
+                             EnabledState aEnabled,
+                             AliasHandling aAliasHandling)
 {
   nsCSSProperty res = aTableLookupResult;
+  if (res != eCSSProperty_UNKNOWN && aEnabled == eEnabled && !IsEnabled(res)) {
+    res = eCSSProperty_UNKNOWN;
+  }
   // Check eCSSAliasCount against 0 to make it easy for the
   // compiler to optimize away the 0-aliases case.
   if (eCSSAliasCount != 0 && res >= eCSSProperty_COUNT) {
     static_assert(eCSSProperty_UNKNOWN < eCSSProperty_COUNT,
                   "assuming eCSSProperty_UNKNOWN doesn't hit this code");
-    if (IsEnabled(res) || aEnabled == eAny) {
-      res = gAliases[res - eCSSProperty_COUNT];
-      NS_ABORT_IF_FALSE(0 <= res && res < eCSSProperty_COUNT,
-                        "aliases must not point to other aliases");
-    } else {
+    nsCSSProperty aliasTarget = gAliases[res - eCSSProperty_COUNT];
+    NS_ABORT_IF_FALSE(0 <= aliasTarget && aliasTarget < eCSSProperty_COUNT,
+                      "aliases must not point to other aliases");
+    if (aEnabled == eEnabled && !IsEnabled(aliasTarget)) {
+      // We need to check whether the alias's target is enabled whether
+      // or not we want to return the alias or its target.
       res = eCSSProperty_UNKNOWN;
+    } else if (aAliasHandling == eResolveAliases) {
+      res = aliasTarget;
     }
   }
-  if (res != eCSSProperty_UNKNOWN && aEnabled == eEnabled && !IsEnabled(res)) {
-    res = eCSSProperty_UNKNOWN;
-  }
   return res;
 }
 
 nsCSSProperty
 nsCSSProps::LookupProperty(const nsACString& aProperty,
-                           EnabledState aEnabled)
+                           EnabledState aEnabled,
+                           AliasHandling aAliasHandling)
 {
   NS_ABORT_IF_FALSE(gPropertyTable, "no lookup table, needs addref");
 
   return DoLookupProperty(nsCSSProperty(gPropertyTable->Lookup(aProperty)),
-                          aEnabled);
+                          aEnabled, aAliasHandling);
 }
 
 nsCSSProperty
-nsCSSProps::LookupProperty(const nsAString& aProperty, EnabledState aEnabled)
+nsCSSProps::LookupProperty(const nsAString& aProperty,
+                           EnabledState aEnabled,
+                           AliasHandling aAliasHandling)
 {
   NS_ABORT_IF_FALSE(gPropertyTable, "no lookup table, needs addref");
 
   // This is faster than converting and calling
   // LookupProperty(nsACString&).  The table will do its own
   // converting and avoid a PromiseFlatCString() call.
   return DoLookupProperty(nsCSSProperty(gPropertyTable->Lookup(aProperty)),
-                          aEnabled);
+                          aEnabled, aAliasHandling);
 }
 
 nsCSSFontDesc
 nsCSSProps::LookupFontDesc(const nsACString& aFontDesc)
 {
   NS_ABORT_IF_FALSE(gFontDescTable, "no lookup table, needs addref");
   return nsCSSFontDesc(gFontDescTable->Lookup(aFontDesc));
 }
diff --git a/layout/style/nsCSSProps.h b/layout/style/nsCSSProps.h
--- a/layout/style/nsCSSProps.h
+++ b/layout/style/nsCSSProps.h
@@ -245,23 +245,32 @@ public:
   static void AddRefTable(void);
   static void ReleaseTable(void);
 
   // Given a property string, return the enum value
   enum EnabledState {
     eEnabled,
     eAny
   };
+  enum AliasHandling {
+    eResolveAliases,
+    eReturnAliases
+  };
   static nsCSSProperty LookupProperty(const nsAString& aProperty,
-                                      EnabledState aEnabled);
+                                      EnabledState aEnabled,
+                                      AliasHandling aAliasHandling =
+                                                      eResolveAliases);
   static nsCSSProperty LookupProperty(const nsACString& aProperty,
-                                      EnabledState aEnabled);
+                                      EnabledState aEnabled,
+                                      AliasHandling aAliasHandling =
+                                                      eResolveAliases);
 private:
   static nsCSSProperty DoLookupProperty(nsCSSProperty aTableLookupResult,
-                                        EnabledState aEnabled);
+                                        EnabledState aEnabled,
+                                        AliasHandling aAliasHandling);
 public:
 
   static inline bool IsShorthand(nsCSSProperty aProperty) {
     NS_ABORT_IF_FALSE(0 <= aProperty && aProperty < eCSSProperty_COUNT,
                  "out of range");
     return (aProperty >= eCSSProperty_COUNT_no_shorthands);
   }
 
