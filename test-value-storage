Get test_value_storage running.

diff --git a/layout/style/test/Makefile.in b/layout/style/test/Makefile.in
--- a/layout/style/test/Makefile.in
+++ b/layout/style/test/Makefile.in
@@ -75,6 +75,7 @@ _TEST_FILES = 	test_bug302186.html \
 		test_initial_storage.html \
 		test_property_database.html \
 		test_property_syntax_errors.html \
+		test_value_storage.html \
 		css_properties.js \
 		property_database.js \
 		$(NULL)
diff --git a/layout/style/test/property_database.js b/layout/style/test/property_database.js
--- a/layout/style/test/property_database.js
+++ b/layout/style/test/property_database.js
@@ -92,16 +92,16 @@ var gCSSProperties = {
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "none" ],
-		other_values: [ "red, green", "red, #fc3", "#ff00cc" ],
-		invalid_values: [ "red, none", "red, inherit" ]
+		other_values: [ "red green", "red #fc3", "#ff00cc" ],
+		invalid_values: [ "red none", "red inherit", "red, green" ]
 	},
 	"-moz-border-left-colors": {
 		domProp: "MozBorderLeftColors",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "none" ],
-		other_values: [ "red, green", "red, #fc3", "#ff00cc" ],
-		invalid_values: [ "red, none", "red, inherit" ]
+		other_values: [ "red green", "red #fc3", "#ff00cc" ],
+		invalid_values: [ "red none", "red inherit", "red, green" ]
 	},
 	"-moz-border-radius": {
 		domProp: "MozBorderRadius",
@@ -149,16 +149,16 @@ var gCSSProperties = {
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "none" ],
-		other_values: [ "red, green", "red, #fc3", "#ff00cc" ],
-		invalid_values: [ "red, none", "red, inherit" ]
+		other_values: [ "red green", "red #fc3", "#ff00cc" ],
+		invalid_values: [ "red none", "red inherit", "red, green" ]
 	},
 	"-moz-border-top-colors": {
 		domProp: "MozBorderTopColors",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "none" ],
-		other_values: [ "red, green", "red, #fc3", "#ff00cc" ],
-		invalid_values: [ "red, none", "red, inherit" ]
+		other_values: [ "red green", "red #fc3", "#ff00cc" ],
+		invalid_values: [ "red none", "red inherit", "red, green" ]
 	},
 	"-moz-box-align": {
 		domProp: "MozBoxAlign",
diff --git a/layout/style/test/test_value_storage.html b/layout/style/test/test_value_storage.html
--- a/layout/style/test/test_value_storage.html
+++ b/layout/style/test/test_value_storage.html
@@ -21,6 +21,58 @@
 
 /** Test for parsing, storage, and serialization of CSS values **/
 
+var gShorthandsWithoutCondensingSerialize = {
+  "-moz-border-radius": true,
+  "-moz-outline-radius": true,
+  "background": true, // really there, but not complete
+  "list-style": true,
+  "outline": true,
+  "pause": true,
+};
+
+var gNoComputedValue = {
+};
+
+function xfail_ser_val(property, value)
+{
+  if (property in gShorthandsWithoutCondensingSerialize)
+    return true;
+
+  return false;
+}
+
+function xfail_computeser(property, value)
+{
+  if (property in gNoComputedValue)
+    return true;
+
+  return false;
+}
+
+function xfail_split_computeser(property, value)
+{
+  if (property in gNoComputedValue)
+    return true;
+
+  return false;
+}
+
+function xfail_compute(property, value)
+{
+  if (property in gNoComputedValue)
+    return true;
+
+  return false;
+}
+
+function xfail_split_compute(property, value)
+{
+  if (property in gNoComputedValue)
+    return true;
+
+  return false;
+}
+
 var gElement = document.getElementById("testnode");
 var gDeclaration = gElement.style;
 var gComputedStyle = window.getComputedStyle(gElement, "");
@@ -34,7 +86,8 @@ function test_property(property)
   function test_value(value) {
     gDeclaration.setProperty(property, value, "");
 
-    var idx;
+    var idx, func;
+
     var step1val = gDeclaration.getPropertyValue(property);
     var step1vals = [];
     var step1ser = gDeclaration.cssText;
@@ -51,8 +104,9 @@ function test_property(property)
 
     // We don't care particularly about the whitespace or the placement of
     // semicolons, but for simplicity we'll test the current behavior.
-    is(step1ser, property + ": " + step1val + ";",
-       "serialization should match property value");
+    func = xfail_ser_val(property, value) ? todo_is : is;
+    func(step1ser, property + ": " + step1val + ";",
+         "serialization should match property value");
 
     isnot(step1val, "", "setting '" + value + "' on '" + property);
     if ("subproperties" in info)
@@ -67,41 +121,48 @@ function test_property(property)
        "parse+serialize should be idempotent for '" +
        property + ": " + value + "'");
     if (test_computed && info.type != CSS_TYPE_TRUE_SHORTHAND) {
-      is(gComputedStyle.getPropertyValue(property), step1comp,
-         "parse+compute+serialize(computed) should be idempotent for '" +
-         property + ": " + value + "'");
+      func = xfail_computeser(property, value) ? todo_is : is;
+      func(gComputedStyle.getPropertyValue(property), step1comp,
+           "parse+compute+serialize(computed) should be idempotent for '" +
+           property + ": " + value + "'");
     }
 
     if ("subproperties" in info) {
       gDeclaration.removeProperty(property);
       for (idx in info.subproperties) {
-        gDeclaration.setProperty(info.subproperties[idx], step1vals[idx], "");
+        var subprop = info.subproperties[idx];
+        gDeclaration.setProperty(subprop, step1vals[idx], "");
+        if (test_computed) {
+          func = xfail_split_computeser(property, value) ? todo_is : is;
+          func(gComputedStyle.getPropertyValue(subprop), step1comps[idx],
+               "parse+compute+split(" + subprop +
+               ")+serialize(computed) should be idempotent for '" +
+               property + ": " + value + "'");
+        }
       }
       is(gDeclaration.getPropertyValue(property), step1val,
          "parse+split+serialize should be idempotent for '" +
          property + ": " + value + "'");
-      if (test_computed) {
-        is(gComputedStyle.getPropertyValue(property), step1comp,
-           "parse+compute+split+serialize(computed) should be idempotent for '" +
+    }
+
+    if (test_computed && info.type != CSS_TYPE_TRUE_SHORTHAND) {
+      gDeclaration.removeProperty(property);
+      gDeclaration.setProperty(property, step1comp, "");
+      func = xfail_compute(property, value) ? todo_is : is;
+      func(gComputedStyle.getPropertyValue(property), step1comp,
+           "parse+compute+serialize should be idempotent for '" +
            property + ": " + value + "'");
+    }
+    if (test_computed && "subproperties" in info) {
+      gDeclaration.removeProperty(property);
+      for (idx in info.subproperties) {
+        var subprop = info.subproperties[idx];
+        gDeclaration.setProperty(subprop, step1comps[idx], "");
+        func = xfail_split_compute(property, value) ? todo_is : is;
+        func(gComputedStyle.getPropertyValue(subprop), step1comps[idx],
+             "parse+compute+split(" + subprop + ")+serialize should be idempotent for '" +
+             property + ": " + value + "'");
       }
-    }
-
-    if (test_computed && info.type != CSS_TYPE_TRUE_SHORTHAND) {
-      gDeclaration.removeProperty(property);
-      gDeclaration.setProperty(property, step1comp, "");
-      is(gComputedStyle.getPropertyValue(property), step1comp,
-         "parse+compute+serialize should be idempotent for '" +
-         property + ": " + value + "'");
-    }
-    if (test_computed && "subproperties" in info) {
-      gDeclaration.removeProperty(property);
-      for (idx in info.subproperties) {
-        gDeclaration.setProperty(info.subproperties[idx], step1comps[idx], "");
-      }
-      is(gComputedStyle.getPropertyValue(property), step1comp,
-         "parse+compute+split+serialize should be idempotent for '" +
-         property + ": " + value + "'");
     }
 
     gDeclaration.removeProperty(property);
@@ -114,8 +175,34 @@ function test_property(property)
     test_value(info.other_values[idx]);
 }
 
+// To avoid triggering the slow script dialog, we have to test one
+// property at a time.
+SimpleTest.waitForExplicitFinish();
+var props = [];
 for (var prop in gCSSProperties)
-  test_property(prop);
+  props.push(prop);
+props = props.reverse();
+function do_one(l) {
+  if (l.length == 0) {
+    // SimpleTest.finish() is really slow, so we have to disable the
+    // slow script dialog for this part
+    netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
+    var prefService = Components.classes["@mozilla.org/preferences-service;1"].
+                        getService(Components.interfaces.nsIPrefService);
+    var domBranch = prefService.getBranch("dom.");
+    var oldVal = domBranch.getIntPref("max_script_run_time");
+    domBranch.setIntPref("max_script_run_time", 0);
+
+    SimpleTest.finish();
+
+    domBranch.setIntPref("max_script_run_time", oldVal);
+
+    return;
+  }
+  test_property(l.pop());
+  setTimeout(do_one, 0, l);
+}
+setTimeout(do_one, 0, props);
 
 </script>
 </pre>
