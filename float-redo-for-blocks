Fix bug 25888 for blocks:  redo block reflow when the height of a block that does not intersect floats pushes it into the way of other floats.  (Bug 25888)

diff --git a/layout/generic/nsBlockFrame.cpp b/layout/generic/nsBlockFrame.cpp
--- a/layout/generic/nsBlockFrame.cpp
+++ b/layout/generic/nsBlockFrame.cpp
@@ -2937,56 +2937,119 @@ nsBlockFrame::ReflowBlockFrame(nsBlockRe
         
         // Note that aState.mY should stay where it is: at the top
         // border-edge of the frame
       } else {
         // Advance aState.mY to the top border-edge of the frame.
         aState.mY += topMargin;
       }
     }
-    
+
     // Here aState.mY is the top border-edge of the block.
     // Compute the available space for the block
     aState.GetAvailableSpace();
-#ifdef REALLY_NOISY_REFLOW
-    printf("setting line %p isImpacted to %s\n", aLine.get(), aState.IsImpactedByFloat()?"true":"false");
-#endif
-    PRBool isImpacted = aState.IsImpactedByFloat() ? PR_TRUE : PR_FALSE;
-    aLine->SetLineIsImpactedByFloat(isImpacted);
     nsRect availSpace;
     aState.ComputeBlockAvailSpace(frame, display, replacedBlock != nsnull,
                                   availSpace);
-    
+
     // Now put the Y coordinate back to the top of the top-margin +
-    // clearance, and flow the block.
+    // clearance.
     aState.mY -= topMargin;
     availSpace.y -= topMargin;
     if (NS_UNCONSTRAINEDSIZE != availSpace.height) {
       availSpace.height += topMargin;
     }
     
-    // Reflow the block into the available space
     // construct the html reflow state for the block. ReflowBlock 
     // will initialize it
     nsHTMLReflowState blockHtmlRS(aState.mPresContext, aState.mReflowState, frame, 
                                   nsSize(availSpace.width, availSpace.height));
     blockHtmlRS.mFlags.mHasClearance = aLine->HasClearance();
     
     nsFloatManager::SavedState floatManagerState;
-    if (mayNeedRetry) {
-      blockHtmlRS.mDiscoveredClearance = &clearanceFrame;
-      aState.mFloatManager->PushState(&floatManagerState);
-    } else if (!applyTopMargin) {
-      blockHtmlRS.mDiscoveredClearance = aState.mReflowState.mDiscoveredClearance;
-    }
-    
-    nsReflowStatus frameReflowStatus = NS_FRAME_COMPLETE;
-    rv = brc.ReflowBlock(availSpace, applyTopMargin, aState.mPrevBottomMargin,
-                         clearance, aState.IsAdjacentWithTop(),
-                         aLine.get(), blockHtmlRS, frameReflowStatus, aState);
+    PRBool isImpacted;
+    nsReflowStatus frameReflowStatus;
+    do {
+  #ifdef REALLY_NOISY_REFLOW
+      printf("setting line %p isImpacted to %s\n", aLine.get(), aState.IsImpactedByFloat()?"true":"false");
+  #endif
+      isImpacted = aState.IsImpactedByFloat() ? PR_TRUE : PR_FALSE;
+      aLine->SetLineIsImpactedByFloat(isImpacted);
+      
+      // Reflow the block into the available space
+      if (mayNeedRetry || replacedBlock) {
+        aState.mFloatManager->PushState(&floatManagerState);
+      }
+
+      if (mayNeedRetry) {
+        blockHtmlRS.mDiscoveredClearance = &clearanceFrame;
+      } else if (!applyTopMargin) {
+        blockHtmlRS.mDiscoveredClearance =
+          aState.mReflowState.mDiscoveredClearance;
+      }
+      
+      frameReflowStatus = NS_FRAME_COMPLETE;
+      rv = brc.ReflowBlock(availSpace, applyTopMargin, aState.mPrevBottomMargin,
+                           clearance, aState.IsAdjacentWithTop(),
+                           aLine.get(), blockHtmlRS, frameReflowStatus, aState);
+
+      // Now the block has a height.  Using that height, get the
+      // available space again and call ComputeBlockAvailSpace again.
+      // If ComputeBlockAvailSpace gives a different result, we need to
+      // reflow again.
+      if (!replacedBlock) {
+        break;
+      }
+
+      nsRect oldAvailSpaceRect(aState.mAvailSpaceRect);
+      aState.GetAvailableSpaceForHeight(aState.mY + topMargin,
+                                        brc.GetMetrics().height);
+      NS_ASSERTION(aState.mAvailSpaceRect.y == oldAvailSpaceRect.y, "yikes");
+      NS_ASSERTION(aState.mAvailSpaceRect.x >= oldAvailSpaceRect.x,
+                   "should never have more room");
+      NS_ASSERTION(aState.mAvailSpaceRect.XMost() <=
+                     oldAvailSpaceRect.XMost(),
+                   "should never have more room");
+      // Restore the height to the position of the next band.
+      aState.mAvailSpaceRect.height = oldAvailSpaceRect.height;
+      if (oldAvailSpaceRect.x == aState.mAvailSpaceRect.x &&
+          oldAvailSpaceRect.width == aState.mAvailSpaceRect.width) {
+        break;
+      }
+
+      PRBool advanced = PR_FALSE;
+      if (!aState.ReplacedBlockFitsInAvailSpace(replacedBlock)) {
+        // Advance to the next band.
+        // XXX SHOULD THIS BE TREATED AS CLEARANCE?
+        nscoord newY = aState.mY;
+        if (aState.AdvanceToNextBand(&newY))
+          advanced = PR_TRUE;
+        // ClearFloats might be able to advance us further once we're there.
+        aState.mY =
+          aState.ClearFloats(newY, NS_STYLE_CLEAR_NONE, replacedBlock);
+        // Start over with a new available space rect at the new height.
+        aState.GetAvailableSpace();
+      }
+
+      nsRect oldAvailSpace(availSpace);
+      // XXX NEED TO ADJUST mY AROUND OR ALLOW PASSING OF topMargin
+      aState.ComputeBlockAvailSpace(frame, display,
+                                    replacedBlock != nsnull, availSpace);
+      if (!advanced && availSpace.IsExactEqual(oldAvailSpace)) {
+        break;
+      }
+
+      // We need another reflow.
+      aState.mFloatManager->PopState(&floatManagerState);
+
+      blockHtmlRS.~nsHTMLReflowState();
+      new (&blockHtmlRS) nsHTMLReflowState(aState.mPresContext,
+                           aState.mReflowState, frame, 
+                           nsSize(availSpace.width, availSpace.height));
+    } while (PR_TRUE);
 
     // If this was a second-pass reflow and the block's vertical position
     // changed, invalidates from the first pass might have happened in the
     // wrong places.  Invalidate the entire overflow rect at the new position.
     if (!mayNeedRetry && clearanceFrame &&
         frame->GetRect().y != passOriginalY) {
       Invalidate(frame->GetOverflowRect() + frame->GetPosition());
     }
@@ -6810,17 +6873,17 @@ nsBlockFrame::BlockCanIntersectFloats(ns
 }
 
 // Note that this width can vary based on the vertical position.
 // However, the cases where it varies are the cases where the width fits
 // in the available space given, which means that variation shouldn't
 // matter.
 /* static */
 nsBlockFrame::ReplacedElementWidthToClear
-nsBlockFrame::WidthToClearPastFloats(nsBlockReflowState& aState,
+nsBlockFrame::WidthToClearPastFloats(const nsBlockReflowState& aState,
                                      nsIFrame* aFrame)
 {
   nscoord leftOffset, rightOffset;
   nsCSSOffsetState offsetState(aFrame, aState.mReflowState.rendContext,
                                aState.mContentArea.width);
 
   ReplacedElementWidthToClear result;
   // A table outer frame is an exception in that it is a block child
diff --git a/layout/generic/nsBlockFrame.h b/layout/generic/nsBlockFrame.h
--- a/layout/generic/nsBlockFrame.h
+++ b/layout/generic/nsBlockFrame.h
@@ -303,17 +303,17 @@ public:
    * care about (which need not be its current mY)
    */
   struct ReplacedElementWidthToClear {
     nscoord marginLeft, borderBoxWidth, marginRight;
     nscoord MarginBoxWidth() const
       { return marginLeft + borderBoxWidth + marginRight; }
   };
   static ReplacedElementWidthToClear
-    WidthToClearPastFloats(nsBlockReflowState& aState, nsIFrame* aFrame);
+    WidthToClearPastFloats(const nsBlockReflowState& aState, nsIFrame* aFrame);
 
   /**
    * Walks up the frame tree, starting with aCandidate, and returns the first
    * block frame that it encounters.
    */
   static nsBlockFrame* GetNearestAncestorBlock(nsIFrame* aCandidate);
   
 protected:
diff --git a/layout/generic/nsBlockReflowState.cpp b/layout/generic/nsBlockReflowState.cpp
--- a/layout/generic/nsBlockReflowState.cpp
+++ b/layout/generic/nsBlockReflowState.cpp
@@ -197,17 +197,17 @@ nsBlockReflowState::FreeLineBox(nsLineBo
 }
 
 void
 nsBlockReflowState::ComputeReplacedBlockOffsetsForFloats(nsIFrame* aFrame,
                                                          nscoord& aLeftResult,
                                                          nscoord& aRightResult,
                                                          nsBlockFrame::
                                                       ReplacedElementWidthToClear
-                                                                 *aReplacedWidth)
+                                                                 *aReplacedWidth) const
 {
   // The frame is clueless about the float manager and therefore we
   // only give it free space. An example is a table frame - the
   // tables do not flow around floats.
   // However, we can let its margins intersect floats.
   NS_ASSERTION(mAvailSpaceRect.x >= 0, "bad avail space rect x");
   NS_ASSERTION(mAvailSpaceRect.width == 0 ||
                mAvailSpaceRect.XMost() <= mContentArea.width,
@@ -1129,39 +1129,25 @@ nsBlockReflowState::ClearFloats(nscoord 
 
   if (aBreakType != NS_STYLE_CLEAR_NONE) {
     newY = bp.top + mFloatManager->ClearFloats(newY - bp.top, aBreakType);
   }
 
   if (aReplacedBlock) {
     for (;;) {
       GetAvailableSpace(newY, PR_FALSE);
-      nsBlockFrame::ReplacedElementWidthToClear replacedWidth =
-        nsBlockFrame::WidthToClearPastFloats(*this, aReplacedBlock);
-      if (!mBandHasFloats ||
-          PR_MAX(mAvailSpaceRect.x, replacedWidth.marginLeft) +
-            replacedWidth.borderBoxWidth +
-            PR_MAX(mContentArea.width -
-                     PR_MIN(mContentArea.width, mAvailSpaceRect.XMost()),
-                   replacedWidth.marginRight) <=
-          mContentArea.width) {
+
+      if (ReplacedBlockFitsInAvailSpace(aReplacedBlock)) {
         break;
       }
       // See the analogous code for inlines in nsBlockFrame::DoReflowInlineFrames
-      if (mAvailSpaceRect.height > 0) {
-        // See if there's room in the next band.
-        newY += mAvailSpaceRect.height;
-      } else {
-        if (mReflowState.availableHeight != NS_UNCONSTRAINEDSIZE) {
-          // Stop trying to clear here; we'll just get pushed to the
-          // next column or page and try again there.
-          break;
-        }
-        NS_NOTREACHED("avail space rect with zero height!");
-        newY += 1;
+      if (!AdvanceToNextBand(&newY)) {
+        // Stop trying to clear here; we'll just get pushed to the
+        // next column or page and try again there.
+        break;
       }
     }
     // Restore mBandHasFloats and mAvailSpaceRect to the way they were.
     // This may well not be needed, and we should probably come up with
     // well-defined rules about when these members are valid so that
     // it's clearly not needed.
     GetAvailableSpace();
   }
diff --git a/layout/generic/nsBlockReflowState.h b/layout/generic/nsBlockReflowState.h
--- a/layout/generic/nsBlockReflowState.h
+++ b/layout/generic/nsBlockReflowState.h
@@ -113,16 +113,46 @@ public:
   PRBool PlaceBelowCurrentLineFloats(nsFloatCacheFreeList& aFloats, PRBool aForceFit);
 
   // Returns the first coordinate >= aY that clears the
   // floats indicated by aBreakType and has enough width between floats
   // (or no floats remaining) to accomodate aReplacedBlock.
   nscoord ClearFloats(nscoord aY, PRUint8 aBreakType,
                       nsIFrame *aReplacedBlock = nsnull);
 
+  PRBool AdvanceToNextBand(nscoord *aY) const {
+    if (mAvailSpaceRect.height > 0) {
+      // See if there's room in the next band.
+      *aY += mAvailSpaceRect.height;
+    } else {
+      if (mReflowState.availableHeight != NS_UNCONSTRAINEDSIZE) {
+        // Stop trying to clear here; we'll just get pushed to the
+        // next column or page and try again there.
+        return PR_FALSE;
+      }
+      NS_NOTREACHED("avail space rect with zero height!");
+      *aY += 1;
+    }
+    return PR_TRUE;
+  }
+
+  // Requires the caller to have made an appropriate GetAvailableSpace
+  // or GetAvailableSpaceForHeight call already.
+  PRBool ReplacedBlockFitsInAvailSpace(nsIFrame* aReplacedBlock) const {
+    nsBlockFrame::ReplacedElementWidthToClear replacedWidth =
+      nsBlockFrame::WidthToClearPastFloats(*this, aReplacedBlock);
+    return !mBandHasFloats ||
+           PR_MAX(mAvailSpaceRect.x, replacedWidth.marginLeft) +
+             replacedWidth.borderBoxWidth +
+             PR_MAX(mContentArea.width -
+                      PR_MIN(mContentArea.width, mAvailSpaceRect.XMost()),
+                    replacedWidth.marginRight) <=
+           mContentArea.width;
+  }
+
   PRBool IsAdjacentWithTop() const {
     return mY ==
       ((mFlags & BRS_ISFIRSTINFLOW) ? mReflowState.mComputedBorderPadding.top : 0);
   }
 
   /**
    * Adjusts the border/padding to return 0 for the top if
    * we are not the first in flow.
@@ -148,17 +178,17 @@ public:
 
   // Caller must have called GetAvailableSpace for the correct position
   // (which need not be the current mY).  Callers need only pass
   // aReplacedWidth for outer table frames.
   void ComputeReplacedBlockOffsetsForFloats(nsIFrame* aFrame,
                                             nscoord& aLeftResult,
                                             nscoord& aRightResult,
                                        nsBlockFrame::ReplacedElementWidthToClear
-                                                      *aReplacedWidth = nsnull);
+                                                *aReplacedWidth = nsnull) const;
 
   // Caller must have called GetAvailableSpace for the current mY
   void ComputeBlockAvailSpace(nsIFrame* aFrame,
                               const nsStyleDisplay* aDisplay,
                               PRBool aBlockAvoidsFloats,
                               nsRect& aResult);
 
 protected:
diff --git a/layout/reftests/bugs/25888-1l.html b/layout/reftests/bugs/25888-1l-block.html
copy from layout/reftests/bugs/25888-1l.html
copy to layout/reftests/bugs/25888-1l-block.html
--- a/layout/reftests/bugs/25888-1l.html
+++ b/layout/reftests/bugs/25888-1l-block.html
@@ -1,17 +1,17 @@
 <!DOCTYPE HTML>
 <html>
 <head>
 <title>Testcase, bug 25888</title>
 <style type="text/css">
 
-body { width: 400px; border: medium solid; text-align: left; }
+body { width: 400px; border: medium solid; }
 div { float: left; clear: left; }
-span { display: inline-block; vertical-align: top; width: 200px; height: 50px; background: aqua; }
+span { display: block; overflow: hidden; width: 200px; height: 50px; background: aqua; margin-right: auto; }
 
 </style>
 </head>
 <body>
 
 <div style="width: 50px; height: 75px;"></div>
 <div style="width: 100px; height: 75px;"></div>
 <span></span>
diff --git a/layout/reftests/bugs/25888-1r.html b/layout/reftests/bugs/25888-1r-block.html
copy from layout/reftests/bugs/25888-1r.html
copy to layout/reftests/bugs/25888-1r-block.html
--- a/layout/reftests/bugs/25888-1r.html
+++ b/layout/reftests/bugs/25888-1r-block.html
@@ -1,17 +1,17 @@
 <!DOCTYPE HTML>
 <html>
 <head>
 <title>Testcase, bug 25888</title>
 <style type="text/css">
 
-body { width: 400px; border: medium solid; text-align: right; }
+body { width: 400px; border: medium solid; }
 div { float: right; clear: right; }
-span { display: inline-block; vertical-align: top; width: 200px; height: 50px; background: aqua; }
+span { display: block; overflow: hidden; width: 200px; height: 50px; background: aqua; margin-left: auto; }
 
 </style>
 </head>
 <body>
 
 <div style="width: 50px; height: 75px;"></div>
 <div style="width: 100px; height: 75px;"></div>
 <span></span>
diff --git a/layout/reftests/bugs/25888-2l.html b/layout/reftests/bugs/25888-2l-block.html
copy from layout/reftests/bugs/25888-2l.html
copy to layout/reftests/bugs/25888-2l-block.html
--- a/layout/reftests/bugs/25888-2l.html
+++ b/layout/reftests/bugs/25888-2l-block.html
@@ -1,16 +1,16 @@
 <!DOCTYPE HTML>
 <html>
 <head>
 <title>Testcase, bug 25888</title>
 <style type="text/css">
 
 body { width: 400px; border: medium solid; }
-span { display: inline-block; vertical-align: top; width: 200px; height: 50px; background: aqua; }
+span { display: block; overflow: hidden; width: 200px; height: 50px; background: aqua; }
 
 </style>
 </head>
 <body>
 
 <div style="float: left; width: 150px; height: 75px;"></div>
 <div style="float: right; width: 300px; height: 75px;"></div>
 <span></span>
diff --git a/layout/reftests/bugs/25888-2r.html b/layout/reftests/bugs/25888-2r-block.html
copy from layout/reftests/bugs/25888-2r.html
copy to layout/reftests/bugs/25888-2r-block.html
--- a/layout/reftests/bugs/25888-2r.html
+++ b/layout/reftests/bugs/25888-2r-block.html
@@ -1,16 +1,16 @@
 <!DOCTYPE HTML>
 <html>
 <head>
 <title>Testcase, bug 25888</title>
 <style type="text/css">
 
 body { width: 400px; border: medium solid; }
-span { display: inline-block; vertical-align: top; width: 200px; height: 50px; background: aqua; }
+span { display: block; overflow: hidden; width: 200px; height: 50px; background: aqua; }
 
 </style>
 </head>
 <body>
 
 <div style="float: right; width: 150px; height: 75px;"></div>
 <div style="float: left; width: 300px; height: 75px;"></div>
 <span></span>
diff --git a/layout/reftests/bugs/25888-3l.html b/layout/reftests/bugs/25888-3l-block.html
copy from layout/reftests/bugs/25888-3l.html
copy to layout/reftests/bugs/25888-3l-block.html
--- a/layout/reftests/bugs/25888-3l.html
+++ b/layout/reftests/bugs/25888-3l-block.html
@@ -1,16 +1,16 @@
 <!DOCTYPE HTML>
 <html>
 <head>
 <title>Testcase, bug 25888</title>
 <style type="text/css">
 
 body { width: 400px; border: medium solid; }
-span { display: inline-block; vertical-align: top; width: 100px; height: 50px; background: aqua; }
+span { display: block; overflow: hidden; width: 100px; height: 50px; background: aqua; }
 
 </style>
 </head>
 <body>
 
 <div style="float: left; width: 250px; height: 75px;"></div>
 <div style="float: right; width: 250px; height: 75px;"></div>
 <span></span>
diff --git a/layout/reftests/bugs/25888-3r.html b/layout/reftests/bugs/25888-3r-block.html
copy from layout/reftests/bugs/25888-3r.html
copy to layout/reftests/bugs/25888-3r-block.html
--- a/layout/reftests/bugs/25888-3r.html
+++ b/layout/reftests/bugs/25888-3r-block.html
@@ -1,16 +1,16 @@
 <!DOCTYPE HTML>
 <html>
 <head>
 <title>Testcase, bug 25888</title>
 <style type="text/css">
 
 body { width: 400px; border: medium solid; }
-span { display: inline-block; vertical-align: top; width: 100px; height: 50px; background: aqua; }
+span { display: block; overflow: hidden; width: 100px; height: 50px; background: aqua; }
 
 </style>
 </head>
 <body>
 
 <div style="float: right; width: 250px; height: 75px;"></div>
 <div style="float: left; width: 250px; height: 75px;"></div>
 <span></span>
diff --git a/layout/reftests/bugs/reftest.list b/layout/reftests/bugs/reftest.list
--- a/layout/reftests/bugs/reftest.list
+++ b/layout/reftests/bugs/reftest.list
@@ -37,16 +37,24 @@
 == 25888-1l.html 25888-1l-ref.html
 != 25888-1l.html 25888-1l-notref.html
 == 25888-1r.html 25888-1r-ref.html
 != 25888-1r.html 25888-1r-notref.html
 == 25888-2l.html 25888-2l-ref.html
 == 25888-2r.html 25888-2r-ref.html
 == 25888-3l.html 25888-3l-ref.html
 == 25888-3r.html 25888-3r-ref.html
+== 25888-1l-block.html 25888-1l-ref.html
+!= 25888-1l-block.html 25888-1l-notref.html
+== 25888-1r-block.html 25888-1r-ref.html
+!= 25888-1r-block.html 25888-1r-notref.html
+== 25888-2l-block.html 25888-2l-ref.html
+== 25888-2r-block.html 25888-2r-ref.html
+== 25888-3l-block.html 25888-3l-ref.html
+== 25888-3r-block.html 25888-3r-ref.html
 == 28811-1a.html 28811-1-ref.html
 == 28811-1b.html 28811-1-ref.html
 == 28811-2a.html 28811-2-ref.html
 == 28811-2b.html 28811-2-ref.html
 == 40596-1a.html 40596-1-ref.html
 != 40596-1b.html 40596-1-ref.html
 == 40596-1c.html 40596-1-ref.html
 != 40596-1d.html 40596-1-ref.html
