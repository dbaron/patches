# HG changeset patch
# User L. David Baron <dbaron@dbaron.org>
# Date 1469548524 -7200
#      Tue Jul 26 17:55:24 2016 +0200
# Node ID 4a29b3bdfa11a54e5b93c36e01fe00c5a8cfdfcd
# Parent  ceb63dec9267e9bb62f5e5e1f4c9d32d3ac1fbac
Bug 1277448 patch 1 - Back out changeset e50eb5912d50 (bug 1277448) since it's no longer needed with the rest of the changes here (developed before it landed).

MozReview-Commit-ID: 1uYRoHP4Q6X

diff --git a/xpcom/base/nsDebugImpl.cpp b/xpcom/base/nsDebugImpl.cpp
--- a/xpcom/base/nsDebugImpl.cpp
+++ b/xpcom/base/nsDebugImpl.cpp
@@ -266,17 +266,17 @@ GetAssertBehavior()
 
 struct FixedBuffer
 {
   FixedBuffer() : curlen(0)
   {
     buffer[0] = '\0';
   }
 
-  char buffer[500];
+  char buffer[1000];
   uint32_t curlen;
 };
 
 static int
 StuffFixedBuffer(void* aClosure, const char* aBuf, uint32_t aLen)
 {
   if (!aLen) {
     return 0;
@@ -301,17 +301,16 @@ StuffFixedBuffer(void* aClosure, const c
 
   return aLen;
 }
 
 EXPORT_XPCOM_API(void)
 NS_DebugBreak(uint32_t aSeverity, const char* aStr, const char* aExpr,
               const char* aFile, int32_t aLine)
 {
-  FixedBuffer nonPIDBuf;
   FixedBuffer buf;
   const char* sevString = "WARNING";
 
   switch (aSeverity) {
     case NS_DEBUG_ASSERTION:
       sevString = "###!!! ASSERTION";
       break;
 
@@ -322,41 +321,42 @@ NS_DebugBreak(uint32_t aSeverity, const 
     case NS_DEBUG_ABORT:
       sevString = "###!!! ABORT";
       break;
 
     default:
       aSeverity = NS_DEBUG_WARNING;
   }
 
-#define PRINT_TO_NONPID_BUFFER(...) PR_sxprintf(StuffFixedBuffer, &nonPIDBuf, __VA_ARGS__)
-  PRINT_TO_NONPID_BUFFER("%s: ", sevString);
+#  define PrintToBuffer(...) PR_sxprintf(StuffFixedBuffer, &buf, __VA_ARGS__)
+
+  // Print "[PID]" or "[Desc PID]" at the beginning of the message.
+  PrintToBuffer("[");
+  if (sMultiprocessDescription) {
+    PrintToBuffer("%s ", sMultiprocessDescription);
+  }
+
+  PrintToBuffer("%d] ", base::GetCurrentProcId());
+
+  PrintToBuffer("%s: ", sevString);
+
   if (aStr) {
-    PRINT_TO_NONPID_BUFFER("%s: ", aStr);
+    PrintToBuffer("%s: ", aStr);
   }
   if (aExpr) {
-    PRINT_TO_NONPID_BUFFER("'%s', ", aExpr);
+    PrintToBuffer("'%s', ", aExpr);
   }
   if (aFile) {
-    PRINT_TO_NONPID_BUFFER("file %s, ", aFile);
+    PrintToBuffer("file %s, ", aFile);
   }
   if (aLine != -1) {
-    PRINT_TO_NONPID_BUFFER("line %d", aLine);
+    PrintToBuffer("line %d", aLine);
   }
-#undef PRINT_TO_NONPID_BUFFER
 
-  // Print "[PID]" or "[Desc PID]" at the beginning of the message.
-#define PRINT_TO_BUFFER(...) PR_sxprintf(StuffFixedBuffer, &buf, __VA_ARGS__)
-  PRINT_TO_BUFFER("[");
-  if (sMultiprocessDescription) {
-    PRINT_TO_BUFFER("%s ", sMultiprocessDescription);
-  }
-  PRINT_TO_BUFFER("%d] %s", base::GetCurrentProcId(), nonPIDBuf.buffer);
-#undef PRINT_TO_BUFFER
-
+#  undef PrintToBuffer
 
   // errors on platforms without a debugdlg ring a bell on stderr
 #if !defined(XP_WIN)
   if (aSeverity != NS_DEBUG_WARNING) {
     fprintf(stderr, "\07");
   }
 #endif
 
@@ -380,24 +380,22 @@ NS_DebugBreak(uint32_t aSeverity, const 
       return;
 
     case NS_DEBUG_ABORT: {
 #if defined(MOZ_CRASHREPORTER)
       // Updating crash annotations in the child causes us to do IPC. This can
       // really cause trouble if we're asserting from within IPC code. So we
       // have to do without the annotations in that case.
       if (XRE_IsParentProcess()) {
-        // Don't include the PID in the crash report annotation to
-        // allow faceting on crash-stats.mozilla.org.
         nsCString note("xpcom_runtime_abort(");
-        note += nonPIDBuf.buffer;
+        note += buf.buffer;
         note += ")";
         CrashReporter::AppendAppNotesToCrashReport(note);
         CrashReporter::AnnotateCrashReport(NS_LITERAL_CSTRING("AbortMessage"),
-                                           nsDependentCString(nonPIDBuf.buffer));
+                                           nsDependentCString(buf.buffer));
       }
 #endif  // MOZ_CRASHREPORTER
 
 #if defined(DEBUG) && defined(_WIN32)
       RealBreak();
 #endif
 #if defined(DEBUG)
       nsTraceRefcnt::WalkTheStack(stderr);
