From: L. David Baron <dbaron@dbaron.org>

Bug 960465 patch N - Make AddStyleUpdatesTo handle pseudo-elements.

FIXME: Will this approach even work?  Is more needed?

diff --git a/layout/style/nsAnimationManager.cpp b/layout/style/nsAnimationManager.cpp
--- a/layout/style/nsAnimationManager.cpp
+++ b/layout/style/nsAnimationManager.cpp
@@ -1144,20 +1144,36 @@ nsAnimationManager::StopAllAnimations()
 void
 nsAnimationManager::AddStyleUpdatesTo(RestyleTracker& aTracker)
 {
   PRCList *next = PR_LIST_HEAD(&mElementData);
   while (next != &mElementData) {
     ElementAnimations *et = static_cast<ElementAnimations*>(next);
     next = PR_NEXT_LINK(next);
 
-    if (et->mElementProperty != nsGkAtoms::animationsProperty) {
-      // We don't support compositor-driven animation of :before/:after
-      // transitions, so at least skip those.
-      // FIXME: We'll need to handle this before using this for the
-      // transitions redesign.
-      continue;
+    dom::Element* elementToRestyle;
+    if (et->mElementProperty == nsGkAtoms::animationsProperty) {
+      elementToRestyle = et->mElement;
+    } else {
+      // NOTE: We never run ::before or ::after animations on the compositor.
+      nsIFrame* primaryFrame = et->mElement->GetPrimaryFrame();
+      if (!primaryFrame) {
+        continue;
+      }
+      nsIFrame* pseudoFrame;
+      if (et->mElementProperty == nsGkAtoms::animationsOfBeforeProperty) {
+        pseudoFrame = nsLayoutUtils::GetBeforeFrame(primaryFrame);
+      } else if (et->mElementProperty == nsGkAtoms::animationsOfAfterProperty) {
+        pseudoFrame = nsLayoutUtils::GetAfterFrame(primaryFrame);
+      } else {
+        MOZ_ASSERT("unknown mElementProperty");
+        continue;
+      }
+      if (!pseudoFrame) {
+        continue;
+      }
+      elementToRestyle = pseudoFrame->GetContent()->AsElement();
     }
 
-    aTracker.AddPendingRestyle(et->mElement, eRestyle_CSSAnimations,
+    aTracker.AddPendingRestyle(elementToRestyle, eRestyle_CSSAnimations,
                                nsChangeHint(0));
   }
 }
diff --git a/layout/style/nsTransitionManager.cpp b/layout/style/nsTransitionManager.cpp
--- a/layout/style/nsTransitionManager.cpp
+++ b/layout/style/nsTransitionManager.cpp
@@ -213,25 +213,41 @@ ElementTransitions::CanPerformOnComposit
 void
 nsTransitionManager::AddStyleUpdatesTo(RestyleTracker& aTracker)
 {
   PRCList *next = PR_LIST_HEAD(&mElementData);
   while (next != &mElementData) {
     ElementTransitions *et = static_cast<ElementTransitions*>(next);
     next = PR_NEXT_LINK(next);
 
-    if (et->mElementProperty != nsGkAtoms::transitionsProperty) {
-      // We don't support compositor-driven animation of :before/:after
-      // transitions, so at least skip those.
-      // FIXME: We'll need to handle this before using this for the
-      // transitions redesign.
-      continue;
+    dom::Element* elementToRestyle;
+    if (et->mElementProperty == nsGkAtoms::transitionsProperty) {
+      elementToRestyle = et->mElement;
+    } else {
+      // NOTE: We never run ::before or ::after animations on the compositor.
+      nsIFrame* primaryFrame = et->mElement->GetPrimaryFrame();
+      if (!primaryFrame) {
+        continue;
+      }
+      nsIFrame* pseudoFrame;
+      if (et->mElementProperty == nsGkAtoms::transitionsOfBeforeProperty) {
+        pseudoFrame = nsLayoutUtils::GetBeforeFrame(primaryFrame);
+      } else if (et->mElementProperty == nsGkAtoms::transitionsOfAfterProperty) {
+        pseudoFrame = nsLayoutUtils::GetAfterFrame(primaryFrame);
+      } else {
+        MOZ_ASSERT("unknown mElementProperty");
+        continue;
+      }
+      if (!pseudoFrame) {
+        continue;
+      }
+      elementToRestyle = pseudoFrame->GetContent()->AsElement();
     }
 
-    aTracker.AddPendingRestyle(et->mElement, eRestyle_CSSTransitions,
+    aTracker.AddPendingRestyle(elementToRestyle, eRestyle_CSSTransitions,
                                nsChangeHint(0));
   }
 }
 
 void
 nsTransitionManager::ElementDataRemoved()
 {
   // If we have no transitions or animations left, remove ourselves from
