From: L. David Baron <dbaron@dbaron.org>

Bug 1118086 - Set and clear pseudo-class locks all at once to avoid restyle thrashing when sending select options to parent process.

MozReview-Commit-ID: 17h3WIt9c2O

diff --git a/toolkit/modules/SelectContentHelper.jsm b/toolkit/modules/SelectContentHelper.jsm
--- a/toolkit/modules/SelectContentHelper.jsm
+++ b/toolkit/modules/SelectContentHelper.jsm
@@ -38,16 +38,17 @@ this.SelectContentHelper = function(aEle
   this.isOpenedViaTouch = aOptions.isOpenedViaTouch;
   this._selectBackgroundColor = null;
   this._selectColor = null;
   this._uaBackgroundColor = null;
   this._uaColor = null;
   this._uaSelectBackgroundColor = null;
   this._uaSelectColor = null;
   this._closeAfterBlur = true;
+  this._pseudoStylesSetup = false;
   this.init();
   this.showDropDown();
   this._updateTimer = new DeferredTask(this._update.bind(this), 0);
 }
 
 Object.defineProperty(SelectContentHelper, "open", {
   get() {
     return gOpen;
@@ -95,74 +96,124 @@ this.SelectContentHelper.prototype = {
     this.mut.disconnect();
     this._updateTimer.disarm();
     this._updateTimer = null;
     gOpen = false;
   },
 
   showDropDown() {
     this.element.openInParentProcess = true;
+    _setupPseudoClassStyles();
     let rect = this._getBoundingContentRect();
-    DOMUtils.addPseudoClassLock(this.element, ":focus");
     let computedStyles = getComputedStyles(this.element);
     this._selectBackgroundColor = computedStyles.backgroundColor;
     this._selectColor = computedStyles.color;
     this._selectTextShadow = computedStyles.textShadow;
-    DOMUtils.clearPseudoClassLocks(this.element);
     this.global.sendAsyncMessage("Forms:ShowDropDown", {
       direction: computedStyles.direction,
       isOpenedViaTouch: this.isOpenedViaTouch,
       options: this._buildOptionList(),
       rect,
       selectedIndex: this.element.selectedIndex,
       selectBackgroundColor: this._selectBackgroundColor,
       selectColor: this._selectColor,
       selectTextShadow: this._selectTextShadow,
       uaBackgroundColor: this.uaBackgroundColor,
       uaColor: this.uaColor,
       uaSelectBackgroundColor: this.uaSelectBackgroundColor,
       uaSelectColor: this.uaSelectColor
     });
+    _clearPseudoClassStyles();
     gOpen = true;
   },
 
+  _setupPseudoClassStyles() {
+    if (this._pseudoStylesSetup) {
+      throw new Error("pseudo styles must not be set up yet");
+    }
+    // Do all of the things that change style at once, before we read
+    // any styles.
+    this._pseudoStylesSetup = true;
+    DOMUtils.addPseudoClassLock(this.element, ":focus");
+    _setupPseudoClassStylesForChildren(this.element, true);
+  },
+
+  _setupPseudoClassStylesForChildren(node, add) {
+    for (let child of node.children) {
+      let tagName = child.tagName.toUpperCase();
+
+      // This iteration over descendants matches the pattern in
+      // _buildOptionListForChildren.
+      if (tagName == "OPTION" || tagName == "OPTGROUP") {
+        if (child.hidden) {
+          continue;
+        }
+
+        if (add) {
+          // Selected options have the :checked pseudo-class, which
+          // we want to disable before calculating the computed
+          // styles since the user agent styles alter the styling
+          // based on :checked.
+          DOMUtils.addPseudoClassLock(child, ":checked", false);
+        } else {
+          DOMUtils.clearPseudoClassLocks(child);
+        }
+
+        if (tagName == "OPTGROUP") {
+          _setupPseudoClassStylesForChildren(child);
+        }
+      }
+    }
+  },
+
+  _clearPseudoClassStyles() {
+    if (!this._pseudoStylesSetup) {
+      throw new Error("pseudo styles must be set up already");
+    }
+    // Undo all of the things that change style at once, after we're
+    // done reading styles.
+    DOMUtils.clearPseudoClassLocks(this.element);
+    _setupPseudoClassStylesForChildren(this.element, false);
+    this._pseudoStylesSetup = false;
+  },
+
   _getBoundingContentRect() {
     return BrowserUtils.getElementBoundingScreenRect(this.element);
   },
 
   _buildOptionList() {
-    DOMUtils.addPseudoClassLock(this.element, ":focus");
-    let result = buildOptionListForChildren(this.element);
-    DOMUtils.clearPseudoClassLocks(this.element);
-    return result;
+    if (!this._pseudoStylesSetup) {
+      throw new Error("pseudo styles must be set up");
+    }
+    return buildOptionListForChildren(this.element);
   },
 
   _update() {
     // The <select> was updated while the dropdown was open.
     // Let's send up a new list of options.
     // Technically we might not need to set this pseudo-class
     // during _update() since the element should organically
     // have :focus, though it is here for belt-and-suspenders.
-    DOMUtils.addPseudoClassLock(this.element, ":focus");
+    _setupPseudoClassStyles();
     let computedStyles = getComputedStyles(this.element);
     this._selectBackgroundColor = computedStyles.backgroundColor;
     this._selectColor = computedStyles.color;
     this._selectTextShadow = computedStyles.textShadow;
-    DOMUtils.clearPseudoClassLocks(this.element);
     this.global.sendAsyncMessage("Forms:UpdateDropDown", {
       options: this._buildOptionList(),
       selectedIndex: this.element.selectedIndex,
       selectBackgroundColor: this._selectBackgroundColor,
       selectColor: this._selectColor,
       selectTextShadow: this._selectTextShadow,
       uaBackgroundColor: this.uaBackgroundColor,
       uaColor: this.uaColor,
       uaSelectBackgroundColor: this.uaSelectBackgroundColor,
       uaSelectColor: this.uaSelectColor
     });
+    _clearPseudoClassStyles();
   },
 
   // Determine user agent background-color and color.
   // This is used to skip applying the custom color if it matches
   // the user agent values.
   _calculateUAColors() {
     let dummyOption = this.element.ownerDocument.createElement("option");
     dummyOption.style.setProperty("color", "-moz-comboboxtext", "important");
@@ -322,38 +373,38 @@ this.SelectContentHelper.prototype = {
 
 }
 
 function getComputedStyles(element) {
   return element.ownerGlobal.getComputedStyle(element);
 }
 
 function buildOptionListForChildren(node) {
+  if (!this._pseudoStylesSetup) {
+    throw new Error("pseudo styles must be set up");
+  }
   let result = [];
 
+  // This iteration over descendants matches the pattern in
+  // _setupPseudoStylesForChildren.
   for (let child of node.children) {
     let tagName = child.tagName.toUpperCase();
 
     if (tagName == "OPTION" || tagName == "OPTGROUP") {
       if (child.hidden) {
         continue;
       }
 
       let textContent =
         tagName == "OPTGROUP" ? child.getAttribute("label")
                               : child.text;
       if (textContent == null) {
         textContent = "";
       }
 
-      // Selected options have the :checked pseudo-class, which
-      // we want to disable before calculating the computed
-      // styles since the user agent styles alter the styling
-      // based on :checked.
-      DOMUtils.addPseudoClassLock(child, ":checked", false);
       let cs = getComputedStyles(child);
 
       let info = {
         index: child.index,
         tagName,
         textContent,
         disabled: child.disabled,
         display: cs.display,
@@ -365,17 +416,13 @@ function buildOptionListForChildren(node
         color: cs.color,
         children: tagName == "OPTGROUP" ? buildOptionListForChildren(child) : []
       };
 
       if (cs.textShadow != "none") {
         info.textShadow = cs.textShadow;
       }
 
-      // We must wait until all computedStyles have been
-      // read before we clear the locks.
-      DOMUtils.clearPseudoClassLocks(child);
-
       result.push(info);
     }
   }
   return result;
 }
