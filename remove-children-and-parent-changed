From: L. David Baron <dbaron@dbaron.org>

Bug 992077 patch 4 - Remove implementation of OverflowChangedTracker::CHILDREN_AND_PARENT_CHANGED.

This simplifies the API of the OverflowChangedTracker.

diff --git a/layout/base/RestyleTracker.h b/layout/base/RestyleTracker.h
--- a/layout/base/RestyleTracker.h
+++ b/layout/base/RestyleTracker.h
@@ -37,23 +37,16 @@ public:
      * change that changes its geometry relative to parent, without reflowing.
      */
     TRANSFORM_CHANGED,
     /**
      * The overflow areas of children have changed
      * and we need to call UpdateOverflow on the frame.
      */
     CHILDREN_CHANGED,
-    /**
-     * The overflow areas of children have changed
-     * and we need to call UpdateOverflow on the frame.
-     * Also call UpdateOverflow on the parent even if the
-     * overflow areas of the frame does not change.
-     */
-    CHILDREN_AND_PARENT_CHANGED
   };
 
   OverflowChangedTracker() :
     mSubtreeRoot(nullptr)
   {}
 
   ~OverflowChangedTracker()
   {
@@ -116,22 +109,17 @@ public:
    * us from processing the same frame twice.
    */
   void Flush() {
     while (!mEntryList.empty()) {
       Entry *entry = mEntryList.removeMin();
       nsIFrame *frame = entry->mFrame;
 
       bool overflowChanged = false;
-      if (entry->mChangeKind == CHILDREN_AND_PARENT_CHANGED) {
-        // Need to union the overflow areas of the children.
-        // Always update the parent, even if the overflow does not change.
-        frame->UpdateOverflow();
-        overflowChanged = true;
-      } else if (entry->mChangeKind == CHILDREN_CHANGED) {
+      if (entry->mChangeKind == CHILDREN_CHANGED) {
         // Need to union the overflow areas of the children.
         // Only update the parent if the overflow changes.
         overflowChanged = frame->UpdateOverflow();
       } else {
         // Take a faster path that doesn't require unioning the overflow areas
         // of our children.
 
 #ifdef DEBUG
