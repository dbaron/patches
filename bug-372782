Round the alpha component in computed style as well.  b=372782  r+sr=bzbarsky

diff --git a/layout/style/nsCSSDeclaration.cpp b/layout/style/nsCSSDeclaration.cpp
--- a/layout/style/nsCSSDeclaration.cpp
+++ b/layout/style/nsCSSDeclaration.cpp
@@ -53,6 +53,7 @@
 #include "nsUnitConversion.h"
 #include "nsFont.h"
 #include "nsReadableUtils.h"
+#include "nsStyleUtil.h"
 
 #include "nsStyleConsts.h"
 
@@ -425,16 +426,7 @@ nsCSSDeclaration::AppendCSSValueToString
       tmpStr.AppendInt(NS_GET_B(color), 10);
       if (a < 255) {
         tmpStr.Append(comma);
-        // Alpha values are expressed as decimals, so we should convert
-        // back, using as few decimal places as possible for
-        // round-tripping.
-        // First try two decimal places:
-        float rounded = NS_roundf(float(a) * 100.0f / 255.0f) / 100.0f;
-        if (NSToIntRound(rounded * 255.0f) != a) {
-          // Use three decimal places.
-          rounded = NS_roundf(float(a) * 1000.0f / 255.0f) / 1000.0f;
-        }
-        tmpStr.AppendFloat(rounded);
+        tmpStr.AppendFloat(nsStyleUtil::ColorComponentToFloat(a));
       }
       tmpStr.Append(PRUnichar(')'));
 
diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -78,6 +78,7 @@
 #include "nsPrintfCString.h"
 #include "nsIMediaList.h"
 #include "nsILookAndFeel.h"
+#include "nsStyleUtil.h"
 
 #include "prprf.h"
 #include "math.h"
@@ -3154,7 +3155,7 @@ PRBool CSSParserImpl::ParseColorOpacity(
     return PR_FALSE;
   }
 
-  PRInt32 value = NSToIntRound(mToken.mNumber*255);
+  PRInt32 value = nsStyleUtil::FloatToColorComponent(mToken.mNumber);
 
   if (!ExpectSymbol(aErrorCode, ')', PR_TRUE)) {
     REPORT_UNEXPECTED_TOKEN(PEExpectedCloseParen);
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -59,6 +59,7 @@
 #include "nsGkAtoms.h"
 #include "nsHTMLReflowState.h"
 #include "nsThemeConstants.h"
+#include "nsStyleUtil.h"
 
 #include "nsPresContext.h"
 #include "nsIDocument.h"
@@ -479,14 +480,15 @@ nsComputedDOMStyle::SetToRGBAColor(nsROC
   nsROCSSPrimitiveValue *alpha  = GetROCSSPrimitiveValue();
 
   if (red && green && blue && alpha) {
+    PRUint8 a = NS_GET_A(aColor);
     nsDOMCSSRGBColor *rgbColor =
-      new nsDOMCSSRGBColor(red, green, blue, alpha, NS_GET_A(aColor) < 255);
+      new nsDOMCSSRGBColor(red, green, blue, alpha, a < 255);
 
     if (rgbColor) {
       red->SetNumber(NS_GET_R(aColor));
       green->SetNumber(NS_GET_G(aColor));
       blue->SetNumber(NS_GET_B(aColor));
-      alpha->SetNumber(float(NS_GET_A(aColor)) / 255.0f);
+      alpha->SetNumber(nsStyleUtil::ColorComponentToFloat(a));
 
       aValue->SetColor(rgbColor);
       return NS_OK;
diff --git a/layout/style/nsStyleUtil.cpp b/layout/style/nsStyleUtil.cpp
--- a/layout/style/nsStyleUtil.cpp
+++ b/layout/style/nsStyleUtil.cpp
@@ -554,3 +554,18 @@ void nsStyleUtil::EscapeCSSString(const 
     }
   }
 }
+
+/* static */ float
+nsStyleUtil::ColorComponentToFloat(PRUint8 aAlpha)
+{
+  // Alpha values are expressed as decimals, so we should convert
+  // back, using as few decimal places as possible for
+  // round-tripping.
+  // First try two decimal places:
+  float rounded = NS_roundf(float(aAlpha) * 100.0f / 255.0f) / 100.0f;
+  if (FloatToColorComponent(rounded) != aAlpha) {
+    // Use three decimal places.
+    rounded = NS_roundf(float(aAlpha) * 1000.0f / 255.0f) / 1000.0f;
+  }
+  return rounded;
+}
diff --git a/layout/style/nsStyleUtil.h b/layout/style/nsStyleUtil.h
--- a/layout/style/nsStyleUtil.h
+++ b/layout/style/nsStyleUtil.h
@@ -78,6 +78,25 @@ public:
                                 
   static void EscapeCSSString(const nsString& aString, nsAString& aReturn);
 
+  /*
+   * Convert an author-provided floating point number to an integer (0
+   * ... 255) appropriate for use in the alpha component of a color.
+   */
+  static PRUint8 FloatToColorComponent(float aAlpha)
+  {
+    NS_ASSERTION(0.0 <= aAlpha && aAlpha <= 1.0, "out of range");
+    return NSToIntRound(aAlpha * 255);
+  }
+
+  /*
+   * Convert the alpha component of an nscolor (0 ... 255) to the
+   * floating point number with the least accurate *decimal*
+   * representation that is converted to that color.
+   *
+   * Should be used only by serialization code.
+   */
+  static float ColorComponentToFloat(PRUint8 aAlpha);
+
 };
 
 
