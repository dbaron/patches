From: L. David Baron <dbaron@dbaron.org>

Add nsInterfaceHashKey.

diff --git a/xpcom/glue/nsHashKeys.h b/xpcom/glue/nsHashKeys.h
--- a/xpcom/glue/nsHashKeys.h
+++ b/xpcom/glue/nsHashKeys.h
@@ -329,16 +329,50 @@ ImplCycleCollectionTraverse(nsCycleColle
                             nsRefPtrHashKey<T>& aField,
                             const char* aName,
                             uint32_t aFlags = 0)
 {
   CycleCollectionNoteChild(aCallback, aField.GetKey(), aName, aFlags);
 }
 
 /**
+ * hashkey wrapper using interface KeyType, like nsISupportsHashKey,
+ * but typed.
+ *
+ * @see nsTHashtable::EntryType for specification
+ */
+template <class T>
+class nsInterfaceHashKey : public PLDHashEntryHdr
+{
+public:
+  typedef T* KeyType;
+  typedef const T* KeyTypePointer;
+
+  nsInterfaceHashKey(const T* key) :
+    mSupports(const_cast<T*>(key)) { }
+  nsInterfaceHashKey(const nsInterfaceHashKey& toCopy) :
+    mSupports(toCopy.mSupports) { }
+  ~nsInterfaceHashKey() { }
+
+  KeyType GetKey() const { return mSupports; }
+
+  bool KeyEquals(KeyTypePointer aKey) const { return aKey == mSupports; }
+
+  static KeyTypePointer KeyToPointer(KeyType aKey) { return aKey; }
+  static PLDHashNumber HashKey(KeyTypePointer aKey)
+  {
+    return NS_PTR_TO_INT32(aKey) >>2;
+  }
+  enum { ALLOW_MEMMOVE = true };
+
+private:
+  nsCOMPtr<T> mSupports;
+};
+
+/**
  * hashkey wrapper using T* KeyType
  *
  * @see nsTHashtable::EntryType for specification
  */
 template<class T>
 class nsPtrHashKey : public PLDHashEntryHdr
 {
 public:
