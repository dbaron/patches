From: L. David Baron <dbaron@dbaron.org>

Add media queries for all of our system metrics exposed in :-moz-system-metric().  (Bug 522149)  r=bzbarsky

diff --git a/content/base/src/nsGkAtomList.h b/content/base/src/nsGkAtomList.h
--- a/content/base/src/nsGkAtomList.h
+++ b/content/base/src/nsGkAtomList.h
@@ -1706,8 +1706,23 @@ GK_ATOM(scrollbar_thumb_proportional, "s
 GK_ATOM(images_in_menus, "images-in-menus")
 GK_ATOM(images_in_buttons, "images-in-buttons")
 GK_ATOM(windows_default_theme, "windows-default-theme")
 GK_ATOM(mac_graphite_theme, "mac-graphite-theme")
 GK_ATOM(windows_compositor, "windows-compositor")
 GK_ATOM(windows_classic, "windows-classic")
 GK_ATOM(touch_enabled, "touch-enabled")
 GK_ATOM(maemo_classic, "maemo-classic")
+
+// And the same again, as media query keywords.
+GK_ATOM(_moz_scrollbar_start_backward, "-moz-scrollbar-start-backward")
+GK_ATOM(_moz_scrollbar_start_forward, "-moz-scrollbar-start-forward")
+GK_ATOM(_moz_scrollbar_end_backward, "-moz-scrollbar-end-backward")
+GK_ATOM(_moz_scrollbar_end_forward, "-moz-scrollbar-end-forward")
+GK_ATOM(_moz_scrollbar_thumb_proportional, "-moz-scrollbar-thumb-proportional")
+GK_ATOM(_moz_images_in_menus, "-moz-images-in-menus")
+GK_ATOM(_moz_images_in_buttons, "-moz-images-in-buttons")
+GK_ATOM(_moz_windows_default_theme, "-moz-windows-default-theme")
+GK_ATOM(_moz_mac_graphite_theme, "-moz-mac-graphite-theme")
+GK_ATOM(_moz_windows_compositor, "-moz-windows-compositor")
+GK_ATOM(_moz_windows_classic, "-moz-windows-classic")
+GK_ATOM(_moz_touch_enabled, "-moz-touch-enabled")
+GK_ATOM(_moz_maemo_classic, "-moz-maemo-classic")
diff --git a/layout/base/nsPresContext.cpp b/layout/base/nsPresContext.cpp
--- a/layout/base/nsPresContext.cpp
+++ b/layout/base/nsPresContext.cpp
@@ -1463,16 +1463,19 @@ nsPresContext::ThemeChangedInternal()
   if (mLookAndFeel && sLookAndFeelChanged) {
     mLookAndFeel->LookAndFeelChanged();
     sLookAndFeelChanged = PR_FALSE;
   }
 
   // This will force the system metrics to be generated the next time they're used
   nsCSSRuleProcessor::FreeSystemMetrics();
 
+  // Changes to system metrics can change media queries on them.
+  MediaFeatureValuesChanged(PR_TRUE);
+
   // Changes in theme can change system colors (whose changes are
   // properly reflected in computed style data), system fonts (whose
   // changes are not), and -moz-appearance (whose changes likewise are
   // not), so we need to reflow.
   RebuildAllStyleData(NS_STYLE_HINT_REFLOW);
 }
 
 void
diff --git a/layout/style/nsCSSRuleProcessor.cpp b/layout/style/nsCSSRuleProcessor.cpp
--- a/layout/style/nsCSSRuleProcessor.cpp
+++ b/layout/style/nsCSSRuleProcessor.cpp
@@ -874,16 +874,25 @@ InitSystemMetrics()
 
 /* static */ void
 nsCSSRuleProcessor::FreeSystemMetrics()
 {
   delete sSystemMetrics;
   sSystemMetrics = nsnull;
 }
 
+/* static */ PRBool
+nsCSSRuleProcessor::HasSystemMetric(nsIAtom* aMetric)
+{
+  if (!sSystemMetrics && !InitSystemMetrics()) {
+    return PR_FALSE;
+  }
+  return sSystemMetrics->IndexOf(aMetric) != sSystemMetrics->NoIndex;
+}
+
 RuleProcessorData::RuleProcessorData(nsPresContext* aPresContext,
                                      nsIContent* aContent, 
                                      nsRuleWalker* aRuleWalker,
                                      nsCompatibility* aCompat /*= nsnull*/)
 {
   MOZ_COUNT_CTOR(RuleProcessorData);
 
   NS_ASSERTION(!aContent || aContent->IsNodeOfType(nsINode::eELEMENT),
@@ -1419,23 +1428,19 @@ static PRBool SelectorMatches(RuleProces
         child = element->GetChildAt(++index);
       } while (child &&
                (!IsSignificantChild(child, PR_TRUE, PR_FALSE) ||
                 (child->GetNameSpaceID() == element->GetNameSpaceID() &&
                  child->Tag()->Equals(nsDependentString(pseudoClass->u.mString)))));
       result = (child == nsnull);
     }
     else if (nsCSSPseudoClasses::mozSystemMetric == pseudoClass->mAtom) {
-      if (!sSystemMetrics && !InitSystemMetrics()) {
-        return PR_FALSE;
-      }
       NS_ASSERTION(pseudoClass->u.mString, "Must have string!");
       nsCOMPtr<nsIAtom> metric = do_GetAtom(pseudoClass->u.mString);
-      result = sSystemMetrics->IndexOf(metric) !=
-               sSystemMetrics->NoIndex;
+      result = nsCSSRuleProcessor::HasSystemMetric(metric);
     }
     else if (nsCSSPseudoClasses::mozHasHandlerRef == pseudoClass->mAtom) {
       nsIContent *child = nsnull;
       nsIContent *element = data.mContent;
       PRInt32 index = -1;
 
       result = PR_FALSE;
       if (element) {
diff --git a/layout/style/nsCSSRuleProcessor.h b/layout/style/nsCSSRuleProcessor.h
--- a/layout/style/nsCSSRuleProcessor.h
+++ b/layout/style/nsCSSRuleProcessor.h
@@ -73,16 +73,17 @@ public:
 
   NS_DECL_ISUPPORTS
 
 public:
   nsresult ClearRuleCascades();
 
   static void Startup();
   static void FreeSystemMetrics();
+  static PRBool HasSystemMetric(nsIAtom* aMetric);
 
   /*
    * Returns true if the given RuleProcessorData matches one of the
    * selectors in aSelectorList.  Note that this method will assume
    * the matching is not for styling purposes.
    */
   static PRBool SelectorListMatches(RuleProcessorData& aData,
                                     nsCSSSelectorList* aSelectorList);
diff --git a/layout/style/nsMediaFeatures.cpp b/layout/style/nsMediaFeatures.cpp
--- a/layout/style/nsMediaFeatures.cpp
+++ b/layout/style/nsMediaFeatures.cpp
@@ -41,16 +41,17 @@
 #include "nsGkAtoms.h"
 #include "nsCSSKeywords.h"
 #include "nsStyleConsts.h"
 #include "nsPresContext.h"
 #include "nsIDeviceContext.h"
 #include "nsCSSValue.h"
 #include "nsIDocShell.h"
 #include "nsLayoutUtils.h"
+#include "nsCSSRuleProcessor.h"
 
 static const PRInt32 kOrientationKeywords[] = {
   eCSSKeyword_portrait,                 NS_STYLE_ORIENTATION_PORTRAIT,
   eCSSKeyword_landscape,                NS_STYLE_ORIENTATION_LANDSCAPE,
   eCSSKeyword_UNKNOWN,                  -1
 };
 
 static const PRInt32 kScanKeywords[] = {
@@ -255,16 +256,28 @@ GetGrid(nsPresContext* aPresContext, con
         nsCSSValue& aResult)
 {
     // Gecko doesn't support grid devices (e.g., ttys), so the 'grid'
     // feature is always 0.
     aResult.SetIntValue(0, eCSSUnit_Integer);
     return NS_OK;
 }
 
+static nsresult
+GetSystemMetric(nsPresContext* aPresContext, const nsMediaFeature* aFeature,
+                nsCSSValue& aResult)
+{
+    NS_ABORT_IF_FALSE(aFeature->mValueType == nsMediaFeature::eBoolInteger,
+                      "unexpected type");
+    nsIAtom *metricAtom = *aFeature->mData.mMetric;
+    PRBool hasMetric = nsCSSRuleProcessor::HasSystemMetric(metricAtom);
+    aResult.SetIntValue(hasMetric ? 1 : 0, eCSSUnit_Integer);
+    return NS_OK;
+}
+
 /*
  * Adding new media features requires (1) adding the new feature to this
  * array, with appropriate entries (and potentially any new code needed
  * to support new types in these entries and (2) ensuring that either
  * nsPresContext::MediaFeatureValuesChanged or
  * nsPresContext::PostMediaFeatureValuesChangedEvent is called when the
  * value that would be returned by the entry's mGetter changes.
  */
@@ -357,16 +370,110 @@ nsMediaFeatures::features[] = {
     },
     {
         &nsGkAtoms::grid,
         nsMediaFeature::eMinMaxNotAllowed,
         nsMediaFeature::eBoolInteger,
         { nsnull },
         GetGrid
     },
+
+    // Mozilla extensions
+    {
+        &nsGkAtoms::_moz_scrollbar_start_backward,
+        nsMediaFeature::eMinMaxNotAllowed,
+        nsMediaFeature::eBoolInteger,
+        { &nsGkAtoms::scrollbar_start_backward },
+        GetSystemMetric
+    },
+    {
+        &nsGkAtoms::_moz_scrollbar_start_forward,
+        nsMediaFeature::eMinMaxNotAllowed,
+        nsMediaFeature::eBoolInteger,
+        { &nsGkAtoms::scrollbar_start_forward },
+        GetSystemMetric
+    },
+    {
+        &nsGkAtoms::_moz_scrollbar_end_backward,
+        nsMediaFeature::eMinMaxNotAllowed,
+        nsMediaFeature::eBoolInteger,
+        { &nsGkAtoms::scrollbar_end_backward },
+        GetSystemMetric
+    },
+    {
+        &nsGkAtoms::_moz_scrollbar_end_forward,
+        nsMediaFeature::eMinMaxNotAllowed,
+        nsMediaFeature::eBoolInteger,
+        { &nsGkAtoms::scrollbar_end_forward },
+        GetSystemMetric
+    },
+    {
+        &nsGkAtoms::_moz_scrollbar_thumb_proportional,
+        nsMediaFeature::eMinMaxNotAllowed,
+        nsMediaFeature::eBoolInteger,
+        { &nsGkAtoms::scrollbar_thumb_proportional },
+        GetSystemMetric
+    },
+    {
+        &nsGkAtoms::_moz_images_in_menus,
+        nsMediaFeature::eMinMaxNotAllowed,
+        nsMediaFeature::eBoolInteger,
+        { &nsGkAtoms::images_in_menus },
+        GetSystemMetric
+    },
+    {
+        &nsGkAtoms::_moz_images_in_buttons,
+        nsMediaFeature::eMinMaxNotAllowed,
+        nsMediaFeature::eBoolInteger,
+        { &nsGkAtoms::images_in_buttons },
+        GetSystemMetric
+    },
+    {
+        &nsGkAtoms::_moz_windows_default_theme,
+        nsMediaFeature::eMinMaxNotAllowed,
+        nsMediaFeature::eBoolInteger,
+        { &nsGkAtoms::windows_default_theme },
+        GetSystemMetric
+    },
+    {
+        &nsGkAtoms::_moz_mac_graphite_theme,
+        nsMediaFeature::eMinMaxNotAllowed,
+        nsMediaFeature::eBoolInteger,
+        { &nsGkAtoms::mac_graphite_theme },
+        GetSystemMetric
+    },
+    {
+        &nsGkAtoms::_moz_windows_compositor,
+        nsMediaFeature::eMinMaxNotAllowed,
+        nsMediaFeature::eBoolInteger,
+        { &nsGkAtoms::windows_compositor },
+        GetSystemMetric
+    },
+    {
+        &nsGkAtoms::_moz_windows_classic,
+        nsMediaFeature::eMinMaxNotAllowed,
+        nsMediaFeature::eBoolInteger,
+        { &nsGkAtoms::windows_classic },
+        GetSystemMetric
+    },
+    {
+        &nsGkAtoms::_moz_touch_enabled,
+        nsMediaFeature::eMinMaxNotAllowed,
+        nsMediaFeature::eBoolInteger,
+        { &nsGkAtoms::touch_enabled },
+        GetSystemMetric
+    },
+    {
+        &nsGkAtoms::_moz_maemo_classic,
+        nsMediaFeature::eMinMaxNotAllowed,
+        nsMediaFeature::eBoolInteger,
+        { &nsGkAtoms::maemo_classic },
+        GetSystemMetric
+    },
+
     // Null-mName terminator:
     {
         nsnull,
         nsMediaFeature::eMinMaxAllowed,
         nsMediaFeature::eInteger,
         { nsnull },
         nsnull
     },
diff --git a/layout/style/nsMediaFeatures.h b/layout/style/nsMediaFeatures.h
--- a/layout/style/nsMediaFeatures.h
+++ b/layout/style/nsMediaFeatures.h
@@ -79,16 +79,19 @@ struct nsMediaFeature {
     union {
       // In static arrays, it's the first member that's initialized.  We
       // need that to be void* so we can initialize both other types.
       // This member should never be accessed by name.
       const void* mInitializer_;
       // If mValueType == eEnumerated:  const PRInt32*: keyword table in
       //   the same format as the keyword tables in nsCSSProps.
       const PRInt32* mKeywordTable;
+      // If mGetter == GetSystemMetric (which implies mValueType ==
+      //   eBoolInteger): nsIAtom * const *, for the system metric.
+      nsIAtom * const * mMetric;
     } mData;
 
     // A function that returns the current value for this feature for a
     // given presentation.  If it returns eCSSUnit_Null, the feature is
     // not present.
     nsMediaFeatureValueGetter mGetter;
 };
 
