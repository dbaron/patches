From: L. David Baron <dbaron@dbaron.org>

Fix 'visibility' animation so that it doesn't animate between values when one of them is not 'visibile'.

TODO: Test that the tests fail without the patch.

diff --git a/layout/style/nsStyleAnimation.cpp b/layout/style/nsStyleAnimation.cpp
--- a/layout/style/nsStyleAnimation.cpp
+++ b/layout/style/nsStyleAnimation.cpp
@@ -386,20 +386,26 @@ nsStyleAnimation::ComputeDistance(nsCSSP
           int32_t endInt = aEndValue.GetIntValue();
           aDistance = std::abs(endInt - startInt);
           return true;
         }
         default:
           return false;
       }
    case eUnit_Visibility: {
-      int32_t startVal =
-        aStartValue.GetIntValue() == NS_STYLE_VISIBILITY_VISIBLE;
-      int32_t endVal =
-        aEndValue.GetIntValue() == NS_STYLE_VISIBILITY_VISIBLE;
+      int32_t startEnum = aStartValue.GetIntValue();
+      int32_t endEnum = aEndValue.GetIntValue();
+      if ((startEnum != NS_STYLE_VISIBILITY_VISIBLE &&
+           startEnum != NS_STYLE_VISIBILITY_HIDDEN) ||
+          (endEnum != NS_STYLE_VISIBILITY_VISIBLE &&
+           endEnum != NS_STYLE_VISIBILITY_HIDDEN)) {
+        return false;
+      }
+      int32_t startVal = startEnum == NS_STYLE_VISIBILITY_VISIBLE;
+      int32_t endVal = endEnum == NS_STYLE_VISIBILITY_VISIBLE;
       aDistance = std::abs(startVal - endVal);
       return true;
     }
     case eUnit_Integer: {
       int32_t startInt = aStartValue.GetIntValue();
       int32_t endInt = aEndValue.GetIntValue();
       aDistance = std::abs(endInt - startInt);
       return true;
@@ -1701,18 +1707,26 @@ nsStyleAnimation::AddWeighted(nsCSSPrope
           }
           aResultValue.SetIntValue(result, eUnit_Enumerated);
           return true;
         }
         default:
           return false;
       }
     case eUnit_Visibility: {
-      int32_t val1 = aValue1.GetIntValue() == NS_STYLE_VISIBILITY_VISIBLE;
-      int32_t val2 = aValue2.GetIntValue() == NS_STYLE_VISIBILITY_VISIBLE;
+      int32_t enum1 = aValue1.GetIntValue();
+      int32_t enum2 = aValue2.GetIntValue();
+      if ((enum1 != NS_STYLE_VISIBILITY_VISIBLE &&
+           enum1 != NS_STYLE_VISIBILITY_HIDDEN) ||
+          (enum2 != NS_STYLE_VISIBILITY_VISIBLE &&
+           enum2 != NS_STYLE_VISIBILITY_HIDDEN)) {
+        return false;
+      }
+      int32_t val1 = enum1 == NS_STYLE_VISIBILITY_VISIBLE;
+      int32_t val2 = enum2 == NS_STYLE_VISIBILITY_VISIBLE;
       double interp = aCoeff1 * val1 + aCoeff2 * val2;
       int32_t result = interp > 0.0 ? NS_STYLE_VISIBILITY_VISIBLE
                                     : NS_STYLE_VISIBILITY_HIDDEN;
       aResultValue.SetIntValue(result, eUnit_Visibility);
       return true;
     }
     case eUnit_Integer: {
       // http://dev.w3.org/csswg/css3-transitions/#animation-of-property-types-
diff --git a/layout/style/test/test_transitions_per_property.html b/layout/style/test/test_transitions_per_property.html
--- a/layout/style/test/test_transitions_per_property.html
+++ b/layout/style/test/test_transitions_per_property.html
@@ -1134,16 +1134,37 @@ function test_visibility_transition(prop
   div.style.setProperty("transition-property", "none", "");
   div.style.setProperty(prop, "visible", "");
   is(cs.getPropertyValue(prop), "visible",
      "visibility property " + prop + ": computed value before transition");
   div.style.setProperty("transition-property", prop, "");
   div.style.setProperty(prop, "hidden", "");
   is(cs.getPropertyValue(prop), "visible",
      "visibility property " + prop + ": interpolation of visibility");
+
+  div.style.setProperty(prop, "collapse", "");
+  is(cs.getPropertyValue(prop), "collapse",
+     "visibility property " + prop + ": interpolation of visibility: collapse not interpolated");
+
+  div.style.setProperty(prop, "visible", "");
+  is(cs.getPropertyValue(prop), "visible",
+     "visibility property " + prop + ": interpolation of visibility: collapse not interpolated");
+
+  div.style.setProperty(prop, "collapse", "");
+  is(cs.getPropertyValue(prop), "collapse",
+     "visibility property " + prop + ": interpolation of visibility: collapse not interpolated");
+
+  div.style.setProperty(prop, "hidden", "");
+  is(cs.getPropertyValue(prop), "hidden",
+     "visibility property " + prop + ": interpolation of visibility: collapse not interpolated");
+
+  div.style.setProperty(prop, "collapse", "");
+  is(cs.getPropertyValue(prop), "collapse",
+     "visibility property " + prop + ": interpolation of visibility: collapse not interpolated");
+
   isnot(get_distance(prop, "visible", "hidden"), 0,
         "distance between visible and hidden should not be zero");
   is(get_distance(prop, "visible", "visible"), 0,
      "distance between visible and visible should not be zero");
   is(get_distance(prop, "hidden", "hidden"), 0,
      "distance between hidden and hidden should not be zero");
 
   div.style.setProperty("transition-timing-function", FUNC_NEGATIVE, "");
