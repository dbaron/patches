From: L. David Baron <dbaron@dbaron.org>

Send clicks to the center of elements, rather than to 2, 2, so that they don't end up outside the curvature of the border.  (Bug 595652)

diff --git a/browser/base/content/test/browser_bug462289.js b/browser/base/content/test/browser_bug462289.js
--- a/browser/base/content/test/browser_bug462289.js
+++ b/browser/base/content/test/browser_bug462289.js
@@ -9,25 +9,25 @@ function focus_in_navbar() {
 }
 
 function test() {
   waitForExplicitFinish();
 
   tab1 = gBrowser.addTab("about:blank", {skipAnimation: true});
   tab2 = gBrowser.addTab("about:blank", {skipAnimation: true});
 
-  EventUtils.synthesizeMouse(tab1, 2, 2, {});
+  EventUtils.synthesizeMouseAtCenter(tab1, {});
   setTimeout(step2, 0);
 }
 
 function step2()
 {
   isnot(document.activeElement, tab1, "mouse on tab not activeElement");
 
-  EventUtils.synthesizeMouse(tab1, 2, 2, {});
+  EventUtils.synthesizeMouseAtCenter(tab1, {});
   setTimeout(step3, 0);
 }
 
 function step3()
 {
   isnot(document.activeElement, tab1, "mouse on tab again activeElement");
 
   if (gNavToolbox.getAttribute("tabsontop") == "true") {
@@ -36,36 +36,36 @@ function step3()
   } else {
     document.getElementById("searchbar").focus();
 
     while (focus_in_navbar())
       EventUtils.synthesizeKey("VK_TAB", { });
   }
   is(document.activeElement, tab1, "tab key to tab activeElement");
 
-  EventUtils.synthesizeMouse(tab1, 2, 2, {});
+  EventUtils.synthesizeMouseAtCenter(tab1, {});
   setTimeout(step4, 0);
 }
 
 function step4()
 {
   is(document.activeElement, tab1, "mouse on tab while focused still activeElement");
 
-  EventUtils.synthesizeMouse(tab2, 2, 2, {});
+  EventUtils.synthesizeMouseAtCenter(tab2, {});
   setTimeout(step5, 0);
 }
 
 function step5()
 {
   // The tabbox selects a tab within a setTimeout in a bubbling mousedown event
   // listener, and focuses the current tab if another tab previously had focus
   is(document.activeElement, tab2, "mouse on another tab while focused still activeElement");
 
   content.focus();
-  EventUtils.synthesizeMouse(tab2, 2, 2, {button: 1, type: "mousedown"});
+  EventUtils.synthesizeMouseAtCenter(tab2, {button: 1, type: "mousedown"});
   setTimeout(step6, 0);
 }
 
 function step6()
 {
   isnot(document.activeElement, tab2, "tab not focused via middle click");
 
   gBrowser.removeTab(tab1);
diff --git a/toolkit/mozapps/extensions/test/browser/browser_bug562797.js b/toolkit/mozapps/extensions/test/browser/browser_bug562797.js
--- a/toolkit/mozapps/extensions/test/browser/browser_bug562797.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_bug562797.js
@@ -70,17 +70,17 @@ function is_in_detail(aManager, view, ca
 
 // Tests simple forward and back navigation and that the right heading and
 // category is selected
 add_test(function() {
   open_manager("addons://list/extension", function(aManager) {
     info("Part 1");
     is_in_list(aManager, "addons://list/extension", false, false);
 
-    EventUtils.synthesizeMouse(aManager.document.getElementById("category-plugins"), 2, 2, { }, aManager);
+    EventUtils.synthesizeMouseAtCenter(aManager.document.getElementById("category-plugins"), { }, aManager);
 
     wait_for_view_load(aManager, function(aManager) {
       info("Part 2");
       is_in_list(aManager, "addons://list/plugin", true, false);
 
       gBrowser.goBack();
 
       wait_for_view_load(aManager, function(aManager) {
@@ -94,18 +94,18 @@ add_test(function() {
           is_in_list(aManager, "addons://list/plugin", true, false);
 
           gBrowser.goBack();
 
           wait_for_view_load(aManager, function(aManager) {
             info("Part 5");
             is_in_list(aManager, "addons://list/extension", false, true);
 
-            EventUtils.synthesizeMouse(get_addon_element(aManager, "test1@tests.mozilla.org"),
-                                       2, 2, { clickCount: 2 }, aManager);
+            EventUtils.synthesizeMouseAtCenter(get_addon_element(aManager, "test1@tests.mozilla.org"),
+                                               { clickCount: 2 }, aManager);
 
             wait_for_view_load(aManager, function(aManager) {
               info("Part 6");
               is_in_detail(aManager, "addons://list/extension", true, false);
 
               gBrowser.goBack();
 
               wait_for_view_load(aManager, function(aManager) {
@@ -174,17 +174,17 @@ add_test(function() {
 });
 
 // Tests that opening a custom first view only stores a single history entry
 add_test(function() {
   open_manager("addons://list/plugin", function(aManager) {
     info("Part 1");
     is_in_list(aManager, "addons://list/plugin", false, false);
 
-    EventUtils.synthesizeMouse(aManager.document.getElementById("category-extensions"), 2, 2, { }, aManager);
+    EventUtils.synthesizeMouseAtCenter(aManager.document.getElementById("category-extensions"), { }, aManager);
 
     wait_for_view_load(aManager, function(aManager) {
       info("Part 2");
       is_in_list(aManager, "addons://list/extension", true, false);
 
       gBrowser.goBack();
 
       wait_for_view_load(aManager, function(aManager) {
@@ -303,18 +303,18 @@ add_test(function() {
     search.value = "bar";
     EventUtils.synthesizeKey("VK_RETURN", {});
 
     wait_for_view_load(aManager, function(aManager) {
       info("Part 2");
       is_in_search(aManager, "bar", true, false);
       check_all_in_list(aManager, ["test2@tests.mozilla.org", "test3@tests.mozilla.org"]);
 
-      EventUtils.synthesizeMouse(get_addon_element(aManager, "test2@tests.mozilla.org"),
-                                 2, 2, { clickCount: 2 }, aManager);
+      EventUtils.synthesizeMouseAtCenter(get_addon_element(aManager, "test2@tests.mozilla.org"),
+                                         { clickCount: 2 }, aManager);
 
       wait_for_view_load(aManager, function(aManager) {
         info("Part 3");
         is_in_detail(aManager, "addons://search/", true, false);
 
         gBrowser.goBack();
         wait_for_view_load(aManager, function(aManager) {
           info("Part 4");
@@ -345,18 +345,18 @@ add_test(function() {
     search.value = "bar";
     EventUtils.synthesizeKey("VK_RETURN", {});
 
     wait_for_view_load(aManager, function(aManager) {
       info("Part 2");
       is_in_search(aManager, "bar", true, false);
       check_all_in_list(aManager, ["test2@tests.mozilla.org", "test3@tests.mozilla.org"]);
 
-      EventUtils.synthesizeMouse(get_addon_element(aManager, "test2@tests.mozilla.org"),
-                                 2, 2, { clickCount: 2 }, aManager);
+      EventUtils.synthesizeMouseAtCenter(get_addon_element(aManager, "test2@tests.mozilla.org"),
+                                         { clickCount: 2 }, aManager);
 
       wait_for_view_load(aManager, function(aManager) {
         info("Part 3");
         is_in_detail(aManager, "addons://search/", true, false);
 
         gBrowser.loadURI("http://example.com/");
         gBrowser.addEventListener("pageshow", function(event) {
           if (event.target.location != "http://example.com/")
@@ -396,17 +396,17 @@ add_test(function() {
 });
 
 // Tests that refreshing a list view does not affect the history
 add_test(function() {
   open_manager(null, function(aManager) {
     info("Part 1");
     is_in_list(aManager, "addons://list/extension", false, false);
 
-    EventUtils.synthesizeMouse(aManager.document.getElementById("category-plugins"), 2, 2, { }, aManager);
+    EventUtils.synthesizeMouseAtCenter(aManager.document.getElementById("category-plugins"), { }, aManager);
 
     wait_for_view_load(aManager, function(aManager) {
       info("Part 2");
       is_in_list(aManager, "addons://list/plugin", true, false);
 
       gBrowser.reload();
       gBrowser.addEventListener("pageshow", function(event) {
         if (event.target.location != "about:addons")
@@ -431,18 +431,18 @@ add_test(function() {
 });
 
 // Tests that refreshing a detail view does not affect the history
 add_test(function() {
   open_manager(null, function(aManager) {
     info("Part 1");
     is_in_list(aManager, "addons://list/extension", false, false);
 
-    EventUtils.synthesizeMouse(get_addon_element(aManager, "test1@tests.mozilla.org"),
-                               2, 2, { clickCount: 2 }, aManager);
+    EventUtils.synthesizeMouseAtCenter(get_addon_element(aManager, "test1@tests.mozilla.org"),
+                                       { clickCount: 2 }, aManager);
 
     wait_for_view_load(aManager, function(aManager) {
       info("Part 2");
       is_in_detail(aManager, "addons://list/extension", true, false);
 
       gBrowser.reload();
       gBrowser.addEventListener("pageshow", function(event) {
         if (event.target.location != "about:addons")
@@ -468,25 +468,25 @@ add_test(function() {
 
 // Tests that removing an extension from the detail view goes back and doesn't
 // allow you to go forward again.
 add_test(function() {
   open_manager(null, function(aManager) {
     info("Part 1");
     is_in_list(aManager, "addons://list/extension", false, false);
 
-    EventUtils.synthesizeMouse(get_addon_element(aManager, "test1@tests.mozilla.org"),
-                               2, 2, { clickCount: 2 }, aManager);
+    EventUtils.synthesizeMouseAtCenter(get_addon_element(aManager, "test1@tests.mozilla.org"),
+                                       { clickCount: 2 }, aManager);
 
     wait_for_view_load(aManager, function(aManager) {
       info("Part 2");
       is_in_detail(aManager, "addons://list/extension", true, false);
 
-      EventUtils.synthesizeMouse(aManager.document.getElementById("detail-uninstall"),
-                                 2, 2, { }, aManager);
+      EventUtils.synthesizeMouseAtCenter(aManager.document.getElementById("detail-uninstall"),
+                                         { }, aManager);
 
       wait_for_view_load(aManager, function() {
         // TODO until bug 590661 is fixed the back button will be enabled
         is_in_list(aManager, "addons://list/extension", true, false);
 
         close_manager(aManager, run_next_test);
       });
     });
diff --git a/toolkit/mozapps/extensions/test/browser/browser_bug562890.js b/toolkit/mozapps/extensions/test/browser/browser_bug562890.js
--- a/toolkit/mozapps/extensions/test/browser/browser_bug562890.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_bug562890.js
@@ -57,12 +57,12 @@ function test() {
         waitForFocus(function() {
           win.close();
           aWindow.close();
           finish();
         }, win);
       }
     });
 
-    EventUtils.synthesizeMouse(prefsBtn, 2, 2, { }, aWindow);
+    EventUtils.synthesizeMouseAtCenter(prefsBtn, { }, aWindow);
   });
 
 }
diff --git a/toolkit/mozapps/extensions/test/browser/browser_bug581076.js b/toolkit/mozapps/extensions/test/browser/browser_bug581076.js
--- a/toolkit/mozapps/extensions/test/browser/browser_bug581076.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_bug581076.js
@@ -30,25 +30,25 @@ function end_test() {
   Services.prefs.clearUserPref(PREF_GETADDONS_GETSEARCHRESULTS);
   close_manager(gManagerWindow, finish);
 }
 
 function search(aRemoteSearch, aCallback) {
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = SEARCH_QUERY;
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(searchBox, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   wait_for_view_load(gManagerWindow, function() {
     if (aRemoteSearch)
       var filter = gManagerWindow.document.getElementById("search-filter-remote");
     else
       var filter = gManagerWindow.document.getElementById("search-filter-local");
-    EventUtils.synthesizeMouse(filter, 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(filter, { }, gManagerWindow);
 
     executeSoon(aCallback);
   });
 }
 
 function check_allresultslink(aShouldShow) {
   var list = gManagerWindow.document.getElementById("search-list");
   var link = gManagerWindow.document.getElementById("search-allresults-link");
diff --git a/toolkit/mozapps/extensions/test/browser/browser_bug591465.js b/toolkit/mozapps/extensions/test/browser/browser_bug591465.js
--- a/toolkit/mozapps/extensions/test/browser/browser_bug591465.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_bug591465.js
@@ -257,22 +257,22 @@ add_test(function() {
   info("Searching for remote addons");
 
   Services.prefs.setCharPref(PREF_GETADDONS_GETSEARCHRESULTS, SEARCH_URL);
   Services.prefs.setIntPref(PREF_SEARCH_MAXRESULTS, 15);
 
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = SEARCH_QUERY;
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(searchBox, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   wait_for_view_load(gManagerWindow, function() {
     var filter = gManagerWindow.document.getElementById("search-filter-remote");
-    EventUtils.synthesizeMouse(filter, 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(filter, { }, gManagerWindow);
     executeSoon(function() {
       
       var el = get_addon_element(gManagerWindow, "remote1@tests.mozilla.org");
     
       gContextMenu.addEventListener("popupshown", function() {
         gContextMenu.removeEventListener("popupshown", arguments.callee, false);
     
         check_contextmenu(false, false, true);
diff --git a/toolkit/mozapps/extensions/test/browser/browser_details.js b/toolkit/mozapps/extensions/test/browser/browser_details.js
--- a/toolkit/mozapps/extensions/test/browser/browser_details.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_details.js
@@ -19,17 +19,17 @@ var gDate = new Date(2010, 7, 1);
 
 function open_details(aId, aType, aCallback) {
   gCategoryUtilities.openType(aType, function() {
     var list = gManagerWindow.document.getElementById("addon-list");
     var item = list.firstChild;
     while (item) {
       if ("mAddon" in item && item.mAddon.id == aId) {
         list.ensureElementIsVisible(item);
-        EventUtils.synthesizeMouse(item, 2, 2, { clickCount: 2 }, gManagerWindow);
+        EventUtils.synthesizeMouseAtCenter(item, { clickCount: 2 }, gManagerWindow);
         wait_for_view_load(gManagerWindow, aCallback);
         return;
       }
       item = item.nextSibling;
     }
     ok(false, "Should have found the add-on in the list");
   });
 }
@@ -167,36 +167,36 @@ add_test(function() {
 
     is_element_hidden(get("detail-size"), "Size should be hidden");
 
     is_element_hidden(get("detail-downloads"), "Downloads should be hidden");
 
     is_element_visible(get("detail-autoUpdate"), "Updates should not be hidden");
     ok(get("detail-autoUpdate").childNodes[1].selected, "Updates ahould be automatic");
     is_element_hidden(get("detail-findUpdates"), "Check for updates should be hidden");
-    EventUtils.synthesizeMouse(get("detail-autoUpdate").lastChild, 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get("detail-autoUpdate").lastChild, {}, gManagerWindow);
     ok(get("detail-autoUpdate").lastChild.selected, "Updates should be manual");
     is_element_visible(get("detail-findUpdates"), "Check for updates should be visible");
-    EventUtils.synthesizeMouse(get("detail-autoUpdate").firstChild, 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get("detail-autoUpdate").firstChild, {}, gManagerWindow);
     ok(get("detail-autoUpdate").firstChild.selected, "Updates should be automatic");
 //XXX Disabled due to bug 596172
 //    is_element_hidden(get("detail-findUpdates"), "Check for updates should be hidden");
 
     is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
     is_element_hidden(get("detail-enable"), "Enable button should be hidden");
     is_element_visible(get("detail-disable"), "Disable button should be visible");
     is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
     is_element_hidden(get("detail-warning"), "Warning message should be hidden");
     is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
     is_element_hidden(get("detail-pending"), "Pending message should be hidden");
 
     // Disable it
-    EventUtils.synthesizeMouse(get("detail-disable"), 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get("detail-disable"), {}, gManagerWindow);
     is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
     is_element_visible(get("detail-enable"), "Enable button should be visible");
     is_element_hidden(get("detail-disable"), "Disable button should be hidden");
     is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
     is_element_hidden(get("detail-warning"), "Warning message should be hidden");
     is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
@@ -214,17 +214,17 @@ add_test(function() {
       is_element_hidden(get("detail-warning"), "Warning message should be hidden");
       is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
       is_element_hidden(get("detail-error"), "Error message should be hidden");
       is_element_hidden(get("detail-error-link"), "Error link should be hidden");
       is_element_visible(get("detail-pending"), "Pending message should be visible");
       is(get("detail-pending").textContent, "Test add-on 1 will be disabled after you restart " + gApp + ".", "Pending message should be correct");
 
       // Undo disabling
-      EventUtils.synthesizeMouse(get("detail-undo"), 2, 2, {}, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(get("detail-undo"), {}, gManagerWindow);
       is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
       is_element_hidden(get("detail-enable"), "Enable button should be hidden");
       is_element_visible(get("detail-disable"), "Disable button should be visible");
       is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
       is_element_hidden(get("detail-warning"), "Warning message should be hidden");
       is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
       is_element_hidden(get("detail-error"), "Error message should be hidden");
@@ -313,37 +313,37 @@ add_test(function() {
 
     is_element_hidden(get("detail-size"), "Size should be hidden");
 
     is_element_hidden(get("detail-downloads"), "Downloads should be hidden");
 
     is_element_visible(get("detail-autoUpdate"), "Updates should not be hidden");
     ok(get("detail-autoUpdate").lastChild.selected, "Updates should be manual");
     is_element_visible(get("detail-findUpdates"), "Check for updates should be visible");
-    EventUtils.synthesizeMouse(get("detail-autoUpdate").childNodes[1], 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get("detail-autoUpdate").childNodes[1], {}, gManagerWindow);
     ok(get("detail-autoUpdate").childNodes[1].selected, "Updates should be automatic");
     is_element_hidden(get("detail-findUpdates"), "Check for updates should be hidden");
-    EventUtils.synthesizeMouse(get("detail-autoUpdate").lastChild, 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get("detail-autoUpdate").lastChild, {}, gManagerWindow);
     ok(get("detail-autoUpdate").lastChild.selected, "Updates should be manual");
     is_element_visible(get("detail-findUpdates"), "Check for updates should be visible");
 
     info("Setting " + PREF_AUTOUPDATE_DEFAULT + " to true");
     Services.prefs.setBoolPref(PREF_AUTOUPDATE_DEFAULT, true);
-    EventUtils.synthesizeMouse(get("detail-autoUpdate").firstChild, 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get("detail-autoUpdate").firstChild, {}, gManagerWindow);
     ok(get("detail-autoUpdate").firstChild.selected, "Updates should be default");
     is_element_hidden(get("detail-findUpdates"), "Check for updates should be hidden");
 
     info("Setting " + PREF_AUTOUPDATE_DEFAULT + " to false");
     Services.prefs.setBoolPref(PREF_AUTOUPDATE_DEFAULT, false);
     ok(get("detail-autoUpdate").firstChild.selected, "Updates should be default");
     is_element_visible(get("detail-findUpdates"), "Check for updates should be visible");
-    EventUtils.synthesizeMouse(get("detail-autoUpdate").childNodes[1], 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get("detail-autoUpdate").childNodes[1], {}, gManagerWindow);
     ok(get("detail-autoUpdate").childNodes[1].selected, "Updates should be automatic");
     is_element_hidden(get("detail-findUpdates"), "Check for updates should be hidden");
-    EventUtils.synthesizeMouse(get("detail-autoUpdate").firstChild, 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get("detail-autoUpdate").firstChild, {}, gManagerWindow);
     ok(get("detail-autoUpdate").firstChild.selected, "Updates should be default");
     is_element_visible(get("detail-findUpdates"), "Check for updates should be visible");
     Services.prefs.clearUserPref(PREF_AUTOUPDATE_DEFAULT);
 
     is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
     is_element_hidden(get("detail-enable"), "Enable button should be hidden");
     is_element_hidden(get("detail-disable"), "Disable button should be hidden");
     is_element_hidden(get("detail-uninstall"), "Remove button should be hidden");
@@ -374,17 +374,17 @@ add_test(function() {
     is_element_visible(get("detail-warning-link"), "Warning link should be visible");
     is(get("detail-warning-link").value, "More Information", "Warning link text should be correct");
     is(get("detail-warning-link").href, gBlocklistURL, "Warning link should be correct");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
     is_element_hidden(get("detail-error-link"), "Error link should be hidden");
     is_element_hidden(get("detail-pending"), "Pending message should be hidden");
 
     // Enable it
-    EventUtils.synthesizeMouse(get("detail-enable"), 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get("detail-enable"), {}, gManagerWindow);
     is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
     is_element_hidden(get("detail-enable"), "Enable button should be hidden");
     is_element_visible(get("detail-disable"), "Disable button should be visible");
     is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
     is_element_hidden(get("detail-warning"), "Warning message should be hidden");
     is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
@@ -402,17 +402,17 @@ add_test(function() {
       is_element_hidden(get("detail-warning"), "Warning message should be hidden");
       is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
       is_element_hidden(get("detail-error"), "Error message should be hidden");
       is_element_hidden(get("detail-error-link"), "Error link should be hidden");
       is_element_visible(get("detail-pending"), "Pending message should be visible");
       is(get("detail-pending").textContent, "Test add-on 4 will be enabled after you restart " + gApp + ".", "Pending message should be correct");
 
       // Undo enabling
-      EventUtils.synthesizeMouse(get("detail-undo"), 2, 2, {}, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(get("detail-undo"), {}, gManagerWindow);
       is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
       is_element_visible(get("detail-enable"), "Enable button should be visible");
       is_element_hidden(get("detail-disable"), "Disable button should be hidden");
       is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
       is_element_visible(get("detail-warning"), "Warning message should be visible");
       is(get("detail-warning").textContent, "Test add-on 4 is known to cause security or stability issues.", "Warning message should be correct");
       is_element_visible(get("detail-warning-link"), "Warning link should be visible");
@@ -462,17 +462,17 @@ add_test(function() {
 
     is_element_hidden(get("detail-warning"), "Warning message should be hidden");
     is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
     is_element_hidden(get("detail-error-link"), "Error link should be hidden");
     is_element_hidden(get("detail-pending"), "Pending message should be hidden");
 
     // Disable it
-    EventUtils.synthesizeMouse(get("detail-disable"), 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get("detail-disable"), {}, gManagerWindow);
     is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
     is_element_visible(get("detail-enable"), "Enable button should be visible");
     is_element_hidden(get("detail-disable"), "Disable button should be hidden");
     is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
     is_element_hidden(get("detail-warning"), "Warning message should be hidden");
     is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
@@ -488,17 +488,17 @@ add_test(function() {
 
       is_element_hidden(get("detail-warning"), "Warning message should be hidden");
       is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
       is_element_hidden(get("detail-error"), "Error message should be hidden");
       is_element_hidden(get("detail-error-link"), "Error link should be hidden");
       is_element_hidden(get("detail-pending"), "Pending message should be visible");
 
       // Enable it
-      EventUtils.synthesizeMouse(get("detail-enable"), 2, 2, {}, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(get("detail-enable"), {}, gManagerWindow);
       is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
       is_element_hidden(get("detail-enable"), "Enable button should be hidden");
       is_element_visible(get("detail-disable"), "Disable button should be visible");
       is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
       is_element_hidden(get("detail-warning"), "Warning message should be hidden");
       is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
       is_element_hidden(get("detail-error"), "Error message should be hidden");
@@ -522,17 +522,17 @@ add_test(function() {
 
     is_element_hidden(get("detail-warning"), "Warning message should be hidden");
     is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
     is_element_hidden(get("detail-error-link"), "Error link should be hidden");
     is_element_hidden(get("detail-pending"), "Pending message should be hidden");
 
     // Enable it
-    EventUtils.synthesizeMouse(get("detail-enable"), 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get("detail-enable"), {}, gManagerWindow);
     is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
     is_element_hidden(get("detail-enable"), "Enable button should be hidden");
     is_element_visible(get("detail-disable"), "Disable button should be visible");
     is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
     is_element_hidden(get("detail-warning"), "Warning message should be hidden");
     is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
@@ -550,17 +550,17 @@ add_test(function() {
       is_element_hidden(get("detail-warning"), "Warning message should be hidden");
       is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
       is_element_hidden(get("detail-error"), "Error message should be hidden");
       is_element_hidden(get("detail-error-link"), "Error link should be hidden");
       is_element_visible(get("detail-pending"), "Pending message should be visible");
       is(get("detail-pending").textContent, "Test add-on 7 will be enabled after you restart " + gApp + ".", "Pending message should be correct");
 
       // Undo enabling
-      EventUtils.synthesizeMouse(get("detail-undo"), 2, 2, {}, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(get("detail-undo"), {}, gManagerWindow);
       is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
       is_element_visible(get("detail-enable"), "Enable button should be visible");
       is_element_hidden(get("detail-disable"), "Disable button should be hidden");
       is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
       is_element_hidden(get("detail-warning"), "Warning message should be hidden");
       is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
       is_element_hidden(get("detail-error"), "Error message should be hidden");
@@ -587,17 +587,17 @@ add_test(function() {
     is_element_visible(get("detail-warning-link"), "Warning link should be visible");
     is(get("detail-warning-link").value, "Update Now", "Warning link text should be correct");
     is(get("detail-warning-link").href, gPluginURL, "Warning link should be correct");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
     is_element_hidden(get("detail-error-link"), "Error link should be hidden");
     is_element_hidden(get("detail-pending"), "Pending message should be hidden");
 
     // Disable it
-    EventUtils.synthesizeMouse(get("detail-disable"), 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get("detail-disable"), {}, gManagerWindow);
     is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
     is_element_visible(get("detail-enable"), "Enable button should be visible");
     is_element_hidden(get("detail-disable"), "Disable button should be hidden");
     is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
     is_element_hidden(get("detail-warning"), "Warning message should be hidden");
     is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
@@ -615,17 +615,17 @@ add_test(function() {
       is_element_hidden(get("detail-warning"), "Warning message should be hidden");
       is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
       is_element_hidden(get("detail-error"), "Error message should be hidden");
       is_element_hidden(get("detail-error-link"), "Error link should be hidden");
       is_element_visible(get("detail-pending"), "Pending message should be visible");
       is(get("detail-pending").textContent, "Test add-on 8 will be disabled after you restart " + gApp + ".", "Pending message should be correct");
 
       // Undo disabling
-      EventUtils.synthesizeMouse(get("detail-undo"), 2, 2, {}, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(get("detail-undo"), {}, gManagerWindow);
       is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
       is_element_hidden(get("detail-enable"), "Enable button should be hidden");
       is_element_visible(get("detail-disable"), "Disable button should be visible");
       is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
       is_element_visible(get("detail-warning"), "Warning message should be visible");
       is(get("detail-warning").textContent, "An important update is available for Test add-on 8.", "Warning message should be correct");
       is_element_visible(get("detail-warning-link"), "Warning link should be visible");
diff --git a/toolkit/mozapps/extensions/test/browser/browser_install.js b/toolkit/mozapps/extensions/test/browser/browser_install.js
--- a/toolkit/mozapps/extensions/test/browser/browser_install.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_install.js
@@ -88,28 +88,28 @@ function cancelInstall(aCallback) {
 }
 
 function installSearchResult(aCallback) {
   var searchBox = gManagerWindow.document.getElementById("header-search");
   // Search for something different each time
   searchBox.value = "foo" + gSearchCount;
   gSearchCount++;
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(searchBox, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   wait_for_view_load(gManagerWindow, function() {
     let remote = gManagerWindow.document.getElementById("search-filter-remote")
-    EventUtils.synthesizeMouse(remote, 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(remote, { }, gManagerWindow);
 
     let item = get_addon_element(gManagerWindow, "addon1@tests.mozilla.org");
     ok(!!item, "Should see the search result in the list");
 
     let status = get_node(item, "install-status");
-    EventUtils.synthesizeMouse(get_node(status, "install-remote"), 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get_node(status, "install-remote"), {}, gManagerWindow);
 
     item.mInstall.addListener({
       onInstallEnded: function() {
         executeSoon(aCallback);
       }
     });
   });
 }
@@ -140,17 +140,17 @@ function check_undo_install() {
 
   let item = get_addon_element(gManagerWindow, "addon1@tests.mozilla.org");
   ok(!!item, "Should see the pending install in the list");
   // Force XBL to apply
   item.clientTop;
   is_element_visible(get_node(item, "pending"), "Pending message should be visible");
   is(get_node(item, "pending").textContent, "Install Tests will be installed after you restart " + gApp + ".", "Pending message should be correct");
 
-  EventUtils.synthesizeMouse(get_node(item, "undo"), 2, 2, {}, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(get_node(item, "undo"), {}, gManagerWindow);
 
   is(get_list_item_count(), 0, "Should be no items in the list");
 
   item = get_addon_element(gManagerWindow, "addon1@tests.mozilla.org");
   ok(!item, "Should no longer see the pending install");
 }
 
 function check_undo_upgrade() {
@@ -158,17 +158,17 @@ function check_undo_upgrade() {
 
   let item = get_addon_element(gManagerWindow, "addon1@tests.mozilla.org");
   ok(!!item, "Should see the pending upgrade in the list");
   // Force XBL to apply
   item.clientTop;
   is_element_visible(get_node(item, "pending"), "Pending message should be visible");
   is(get_node(item, "pending").textContent, "Install Tests will be updated after you restart " + gApp + ".", "Pending message should be correct");
 
-  EventUtils.synthesizeMouse(get_node(item, "undo"), 2, 2, {}, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(get_node(item, "undo"), {}, gManagerWindow);
 
   is(get_list_item_count(), 1, "Should be only one item in the list");
 
   item = get_addon_element(gManagerWindow, "addon1@tests.mozilla.org");
   ok(!!item, "Should still see installed item in the list");
   is_element_hidden(get_node(item, "pending"), "Pending message should be hidden");
 }
 
diff --git a/toolkit/mozapps/extensions/test/browser/browser_list.js b/toolkit/mozapps/extensions/test/browser/browser_list.js
--- a/toolkit/mozapps/extensions/test/browser/browser_list.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_list.js
@@ -128,17 +128,17 @@ add_test(function() {
 
     is_element_hidden(get_node(addon, "warning"), "Warning message should be hidden");
     is_element_hidden(get_node(addon, "warning-link"), "Warning link should be hidden");
     is_element_hidden(get_node(addon, "error"), "Error message should be hidden");
     is_element_hidden(get_node(addon, "error-link"), "Error link should be hidden");
     is_element_hidden(get_node(addon, "pending"), "Pending message should be hidden");
 
     info("Disabling");
-    EventUtils.synthesizeMouse(get_node(addon, "disable-btn"), 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get_node(addon, "disable-btn"), {}, gManagerWindow);
     is_element_hidden(get_node(addon, "preferences-btn"), "Preferences button should be hidden");
     is_element_visible(get_node(addon, "enable-btn"), "Enable button should be visible");
     is_element_hidden(get_node(addon, "disable-btn"), "Disable button should be hidden");
     is_element_visible(get_node(addon, "remove-btn"), "Remove button should be visible");
 
     is_element_hidden(get_node(addon, "warning"), "Warning message should be visible");
     is_element_hidden(get_node(addon, "warning-link"), "Warning link should be hidden");
     is_element_hidden(get_node(addon, "error"), "Error message should be hidden");
@@ -165,17 +165,17 @@ add_test(function() {
 
     is_element_hidden(get_node(addon, "warning"), "Warning message should be hidden");
     is_element_hidden(get_node(addon, "warning-link"), "Warning link should be hidden");
     is_element_hidden(get_node(addon, "error"), "Error message should be hidden");
     is_element_hidden(get_node(addon, "error-link"), "Error link should be hidden");
     is_element_hidden(get_node(addon, "pending"), "Pending message should be hidden");
 
     info("Enabling");
-    EventUtils.synthesizeMouse(get_node(addon, "enable-btn"), 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get_node(addon, "enable-btn"), {}, gManagerWindow);
     is_element_hidden(get_node(addon, "preferences-btn"), "Preferences button should be hidden");
     is_element_hidden(get_node(addon, "enable-btn"), "Enable button should be hidden");
     is_element_visible(get_node(addon, "disable-btn"), "Disable button should be visible");
     is_element_visible(get_node(addon, "remove-btn"), "Remove button should be visible");
 
     is_element_hidden(get_node(addon, "warning"), "Warning message should be hidden");
     is_element_hidden(get_node(addon, "warning-link"), "Warning link should be hidden");
     is_element_hidden(get_node(addon, "error"), "Error message should be hidden");
@@ -216,17 +216,17 @@ add_test(function() {
     is_element_visible(get_node(addon, "warning-link"), "Warning link should be visible");
     is(get_node(addon, "warning-link").value, "More Information", "Warning link text should be correct");
     is(get_node(addon, "warning-link").href, gBlocklistURL, "Warning link should be correct");
     is_element_hidden(get_node(addon, "error"), "Error message should be hidden");
     is_element_hidden(get_node(addon, "error-link"), "Error link should be hidden");
     is_element_hidden(get_node(addon, "pending"), "Pending message should be hidden");
 
     info("Enabling");
-    EventUtils.synthesizeMouse(get_node(addon, "enable-btn"), 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get_node(addon, "enable-btn"), {}, gManagerWindow);
     is_element_hidden(get_node(addon, "preferences-btn"), "Preferences button should be hidden");
     is_element_hidden(get_node(addon, "enable-btn"), "Enable button should be hidden");
     is_element_visible(get_node(addon, "disable-btn"), "Disable button should be visible");
     is_element_visible(get_node(addon, "remove-btn"), "Remove button should be visible");
 
     is_element_hidden(get_node(addon, "warning"), "Warning message should be hidden");
     is_element_hidden(get_node(addon, "warning-link"), "Warning link should be hidden");
     is_element_hidden(get_node(addon, "error"), "Error message should be hidden");
@@ -266,17 +266,17 @@ add_test(function() {
 
     is_element_hidden(get_node(addon, "warning"), "Warning message should be hidden");
     is_element_hidden(get_node(addon, "warning-link"), "Warning link should be hidden");
     is_element_hidden(get_node(addon, "error"), "Error message should be visible");
     is_element_hidden(get_node(addon, "error-link"), "Error link should be hidden");
     is_element_hidden(get_node(addon, "pending"), "Pending message should be hidden");
 
     info("Disabling");
-    EventUtils.synthesizeMouse(get_node(addon, "disable-btn"), 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get_node(addon, "disable-btn"), {}, gManagerWindow);
     is_element_visible(get_class_node(addon, "disabled-postfix"), "Disabled postfix should be visible");
 
     is_element_hidden(get_node(addon, "preferences-btn"), "Preferences button should be hidden");
     is_element_visible(get_node(addon, "enable-btn"), "Enable button should be visible");
     is_element_hidden(get_node(addon, "disable-btn"), "Disable button should be hidden");
     is_element_visible(get_node(addon, "remove-btn"), "Remove button should be visible");
 
     is_element_hidden(get_node(addon, "warning"), "Warning message should be hidden");
@@ -300,17 +300,17 @@ add_test(function() {
     is_element_visible(get_node(addon, "warning-link"), "Warning link should be visible");
     is(get_node(addon, "warning-link").value, "Update Now", "Warning link text should be correct");
     is(get_node(addon, "warning-link").href, gPluginURL, "Warning link should be correct");
     is_element_hidden(get_node(addon, "error"), "Error message should be hidden");
     is_element_hidden(get_node(addon, "error-link"), "Error link should be hidden");
     is_element_hidden(get_node(addon, "pending"), "Pending message should be hidden");
 
     info("Disabling");
-    EventUtils.synthesizeMouse(get_node(addon, "disable-btn"), 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(get_node(addon, "disable-btn"), {}, gManagerWindow);
     is_element_hidden(get_node(addon, "preferences-btn"), "Preferences button should be hidden");
     is_element_visible(get_node(addon, "enable-btn"), "Enable button should be visible");
     is_element_hidden(get_node(addon, "disable-btn"), "Disable button should be hidden");
     is_element_visible(get_node(addon, "remove-btn"), "Remove button should be visible");
 
     is_element_hidden(get_node(addon, "warning"), "Warning message should be visible");
     is_element_hidden(get_node(addon, "warning-link"), "Warning link should be hidden");
     is_element_hidden(get_node(addon, "error"), "Error message should be hidden");
@@ -366,17 +366,17 @@ add_test(function() {
       is_element_hidden(get_node(addon, "warning"), "Warning message should be hidden");
       is_element_hidden(get_node(addon, "warning-link"), "Warning link should be hidden");
       is_element_hidden(get_node(addon, "error"), "Error message should be hidden");
       is_element_hidden(get_node(addon, "error-link"), "Error link should be hidden");
       is_element_visible(get_node(addon, "pending"), "Pending message should be visible");
       is(get_node(addon, "pending").textContent, "Test add-on will be disabled after you restart " + gApp + ".", "Pending message should be correct");
 
       info("Undoing");
-      EventUtils.synthesizeMouse(get_node(addon, "undo"), 2, 2, {}, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(get_node(addon, "undo"), {}, gManagerWindow);
       is_element_hidden(get_node(addon, "preferences-btn"), "Preferences button should be hidden");
       is_element_hidden(get_node(addon, "enable-btn"), "Enable button should be hidden");
       is_element_visible(get_node(addon, "disable-btn"), "Disable button should be visible");
       is_element_visible(get_node(addon, "remove-btn"), "Remove button should be visible");
 
       is_element_hidden(get_node(addon, "warning"), "Warning message should be hidden");
       is_element_hidden(get_node(addon, "warning-link"), "Warning link should be hidden");
       is_element_hidden(get_node(addon, "error"), "Error message should be hidden");
@@ -403,17 +403,17 @@ add_test(function() {
       is_element_hidden(get_node(addon, "warning"), "Warning message should be hidden");
       is_element_hidden(get_node(addon, "warning-link"), "Warning link should be hidden");
       is_element_hidden(get_node(addon, "error"), "Error message should be hidden");
       is_element_hidden(get_node(addon, "error-link"), "Error link should be hidden");
       is_element_visible(get_node(addon, "pending"), "Pending message should be visible");
       is(get_node(addon, "pending").textContent, "Test add-on 2 will be enabled after you restart " + gApp + ".", "Pending message should be correct");
 
       info("Undoing");
-      EventUtils.synthesizeMouse(get_node(addon, "undo"), 2, 2, {}, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(get_node(addon, "undo"), {}, gManagerWindow);
       is_element_hidden(get_node(addon, "preferences-btn"), "Preferences button should be hidden");
       is_element_visible(get_node(addon, "enable-btn"), "Enable button should be visible");
       is_element_hidden(get_node(addon, "disable-btn"), "Disable button should be hidden");
       is_element_visible(get_node(addon, "remove-btn"), "Remove button should be visible");
 
       is_element_hidden(get_node(addon, "warning"), "Warning message should be hidden");
       is_element_hidden(get_node(addon, "warning-link"), "Warning link should be hidden");
       is_element_hidden(get_node(addon, "error"), "Error message should be hidden");
@@ -433,17 +433,17 @@ add_test(function() {
       is_element_hidden(get_node(addon, "warning"), "Warning message should be hidden");
       is_element_hidden(get_node(addon, "warning-link"), "Warning link should be hidden");
       is_element_hidden(get_node(addon, "error"), "Error message should be hidden");
       is_element_hidden(get_node(addon, "error-link"), "Error link should be hidden");
       is_element_visible(get_node(addon, "pending"), "Pending message should be visible");
       is(get_node(addon, "pending").textContent, "Test add-on 4 will be enabled after you restart " + gApp + ".", "Pending message should be correct");
 
       info("Undoing");
-      EventUtils.synthesizeMouse(get_node(addon, "undo"), 2, 2, {}, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(get_node(addon, "undo"), {}, gManagerWindow);
       is_element_hidden(get_node(addon, "preferences-btn"), "Preferences button should be hidden");
       is_element_visible(get_node(addon, "enable-btn"), "Enable button should be visible");
       is_element_hidden(get_node(addon, "disable-btn"), "Disable button should be hidden");
       is_element_visible(get_node(addon, "remove-btn"), "Remove button should be visible");
 
       is_element_visible(get_node(addon, "warning"), "Warning message should be visible");
       is(get_node(addon, "warning").textContent, "Test add-on 4 is known to cause security or stability issues.", "Warning message should be correct");
       is_element_visible(get_node(addon, "warning-link"), "Warning link should be visible");
@@ -466,17 +466,17 @@ add_test(function() {
 
       is_element_hidden(get_node(addon, "warning"), "Warning message should be hidden");
       is_element_hidden(get_node(addon, "warning-link"), "Warning link should be hidden");
       is_element_hidden(get_node(addon, "error"), "Error message should be visible");
       is_element_hidden(get_node(addon, "error-link"), "Error link should be hidden");
       is_element_hidden(get_node(addon, "pending"), "Pending message should be hidden");
 
       info("Enabling");
-      EventUtils.synthesizeMouse(get_node(addon, "enable-btn"), 2, 2, {}, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(get_node(addon, "enable-btn"), {}, gManagerWindow);
       is_element_hidden(get_class_node(addon, "disabled-postfix"), "Disabled postfix should be hidden");
 
       is_element_hidden(get_node(addon, "preferences-btn"), "Preferences button should be hidden");
       is_element_hidden(get_node(addon, "enable-btn"), "Enable button should be hidden");
       is_element_visible(get_node(addon, "disable-btn"), "Disable button should be visible");
       is_element_visible(get_node(addon, "remove-btn"), "Remove button should be visible");
 
       is_element_hidden(get_node(addon, "warning"), "Warning message should be hidden");
@@ -498,17 +498,17 @@ add_test(function() {
       is_element_hidden(get_node(addon, "warning"), "Warning message should be visible");
       is_element_hidden(get_node(addon, "warning-link"), "Warning link should be hidden");
       is_element_hidden(get_node(addon, "error"), "Error message should be hidden");
       is_element_hidden(get_node(addon, "error-link"), "Error link should be hidden");
       is_element_visible(get_node(addon, "pending"), "Pending message should be visible");
       is(get_node(addon, "pending").textContent, "Test add-on 7 will be disabled after you restart " + gApp + ".", "Pending message should be correct");
 
       info("Undoing");
-      EventUtils.synthesizeMouse(get_node(addon, "undo"), 2, 2, {}, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(get_node(addon, "undo"), {}, gManagerWindow);
       is_element_hidden(get_node(addon, "preferences-btn"), "Preferences button should be hidden");
       is_element_hidden(get_node(addon, "enable-btn"), "Enable button should be hidden");
       is_element_visible(get_node(addon, "disable-btn"), "Disable button should be visible");
       is_element_visible(get_node(addon, "remove-btn"), "Remove button should be visible");
 
       is_element_visible(get_node(addon, "warning"), "Warning message should be hidden");
       is(get_node(addon, "warning").textContent, "An important update is available for Test add-on 7.", "Warning message should be correct");
       is_element_visible(get_node(addon, "warning-link"), "Warning link should be visible");
diff --git a/toolkit/mozapps/extensions/test/browser/browser_manualupdates.js b/toolkit/mozapps/extensions/test/browser/browser_manualupdates.js
--- a/toolkit/mozapps/extensions/test/browser/browser_manualupdates.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_manualupdates.js
@@ -86,17 +86,17 @@ add_test(function() {
 
 
 add_test(function() {
   wait_for_view_load(gManagerWindow, function() {
     is(gManagerWindow.document.getElementById("categories").selectedItem.value, "addons://updates/available", "Available Updates category should now be selected");
     is(gManagerWindow.gViewController.currentViewId, "addons://updates/available", "Available Updates view should be the current view");
     run_next_test();
   }, true);
-  EventUtils.synthesizeMouse(gAvailableCategory, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(gAvailableCategory, { }, gManagerWindow);
 });
 
 
 add_test(function() {
   var list = gManagerWindow.document.getElementById("updates-list");
   is(list.itemCount, 1, "Should be 1 available update listed");
   var item = list.firstChild;
   is(item.mAddon.id, "addon2@tests.mozilla.org", "Update item should be for the manually updating addon");
@@ -147,24 +147,24 @@ add_test(function() {
         info("Release notes now open");
 
         is_element_hidden(item._relNotesLoading, "Release notes loading message should be hidden");
         is_element_hidden(item._relNotesError, "Release notes error message should be hidden");
         isnot(item._relNotes.childElementCount, 0, "Release notes should have been inserted into container");
         run_next_test();
 
       }, false);
-      EventUtils.synthesizeMouse(item._relNotesToggle, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(item._relNotesToggle, { }, gManagerWindow);
       is_element_visible(item._relNotesLoading, "Release notes loading message should be visible");
 
     }, false);
-    EventUtils.synthesizeMouse(item._relNotesToggle, 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(item._relNotesToggle, { }, gManagerWindow);
 
   }, false);
-  EventUtils.synthesizeMouse(item._relNotesToggle, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(item._relNotesToggle, { }, gManagerWindow);
   is_element_visible(item._relNotesLoading, "Release notes loading message should be visible");
 });
 
 
 add_test(function() {
   var list = gManagerWindow.document.getElementById("updates-list");
   var item = list.firstChild;
   var updateBtn = item._updateBtn;
@@ -179,10 +179,10 @@ add_test(function() {
     onInstallEnded: function() {
       install.removeTestListener(this);
       info("install ended");
       is_element_hidden(item._installStatus, "Install progress widget should be hidden");
       run_next_test();
     }
   };
   install.addTestListener(listener);
-  EventUtils.synthesizeMouse(updateBtn, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(updateBtn, { }, gManagerWindow);
 });
diff --git a/toolkit/mozapps/extensions/test/browser/browser_searching.js b/toolkit/mozapps/extensions/test/browser/browser_searching.js
--- a/toolkit/mozapps/extensions/test/browser/browser_searching.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_searching.js
@@ -129,17 +129,17 @@ function search(aQuery, aFinishImmediate
   var url = (aQuery == NO_MATCH_QUERY) ? NO_MATCH_URL : SEARCH_URL;
   Services.prefs.setCharPref(PREF_GETADDONS_GETSEARCHRESULTS, url);
 
   aCategoryType = aCategoryType ? aCategoryType : "search";
 
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = aQuery;
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(searchBox, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   var finishImmediately = true;
   wait_for_view_load(gManagerWindow, function() {
     is(gCategoryUtilities.selectedCategory, aCategoryType, "Expected category view should be selected");
     is(gCategoryUtilities.isTypeVisible("search"), aCategoryType == "search",
        "Search category should only be visible if it is the current view");
     check_is_searching(false);
@@ -323,21 +323,21 @@ function check_results(aQuery, aSortBy, 
 function check_filtered_results(aQuery, aSortBy, aReverseOrder) {
   var localFilter = gManagerWindow.document.getElementById("search-filter-local");
   var remoteFilter = gManagerWindow.document.getElementById("search-filter-remote");
 
   var list = gManagerWindow.document.getElementById("search-list");
   list.ensureElementIsVisible(localFilter);
 
   // Check with showing local add-ons
-  EventUtils.synthesizeMouse(localFilter, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(localFilter, { }, gManagerWindow);
   check_results(aQuery, aSortBy, aReverseOrder, true);
 
   // Check with showing remote add-ons
-  EventUtils.synthesizeMouse(remoteFilter, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(remoteFilter, { }, gManagerWindow);
   check_results(aQuery, aSortBy, aReverseOrder, false);
 }
 
 /*
  * Get item for a specific add-on by name
  *
  * @param  aName
  *         The name of the add-on to search for
@@ -426,25 +426,25 @@ add_test(function() {
       var result = results[currentIndex];
       if (result.name.indexOf("install") == 0) {
         run_next_double_click_test();
         return;
       }
 
       var item = result.item;
       list.ensureElementIsVisible(item);
-      EventUtils.synthesizeMouse(item, 2, 2, { clickCount: 2 }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(item, { clickCount: 2 }, gManagerWindow);
       wait_for_view_load(gManagerWindow, function() {
         var name = gManagerWindow.document.getElementById("detail-name").textContent;
         is(name, item.mAddon.name, "Name in detail view should be correct");
         var version = gManagerWindow.document.getElementById("detail-version").value;
         is(version, item.mAddon.version, "Version in detail view should be correct");
 
-        EventUtils.synthesizeMouse(gManagerWindow.document.getElementById("category-search"),
-                                   2, 2, { }, gManagerWindow);
+        EventUtils.synthesizeMouseAtCenter(gManagerWindow.document.getElementById("category-search"),
+                                           { }, gManagerWindow);
         wait_for_view_load(gManagerWindow, run_next_double_click_test);
       });
     }
 
     run_next_double_click_test();
   });
 });
 
@@ -462,17 +462,17 @@ add_test(function() {
     if (currentIndex >= sorterNames.length) {
       sorters.handler = originalHandler;
       run_next_test();
     }
 
     // Simulate clicking on a specific sorter
     var buttonId = buttonIds[currentIndex];
     var sorter = getAnonymousElementByAttribute(sorters, "anonid", buttonId);
-    EventUtils.synthesizeMouse(sorter, 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(sorter, { }, gManagerWindow);
   }
 
   sorters.handler = {
     onSortChanged: function(aSortBy, aAscending) {
       if (originalHandler && "onSortChanged" in originalHandler)
         originalHandler.onSortChanged(aSortBy, aAscending);
 
       check_filtered_results(QUERY, sorterNames[currentIndex], currentReversed);
@@ -544,17 +544,17 @@ add_test(function() {
   search(QUERY, false, function() {
     var list = gManagerWindow.document.getElementById("search-list");
     var remoteItem = get_addon_item(REMOTE_TO_INSTALL);
     list.ensureElementIsVisible(remoteItem);
 
     installBtn = get_install_button(remoteItem);
     is(installBtn.hidden, false, "Install button should be showing before install");
     remoteItem.mAddon.install.addListener(listener);
-    EventUtils.synthesizeMouse(installBtn, 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(installBtn, { }, gManagerWindow);
   });
 });
 
 // Tests that re-searching for query results in correct results
 add_test(function() {
   // Select a different category
   gCategoryUtilities.openType("extension", function() {
     is(gCategoryUtilities.isTypeVisible("search"), false, "Search category should be hidden");
diff --git a/toolkit/mozapps/extensions/test/browser/browser_sorting.js b/toolkit/mozapps/extensions/test/browser/browser_sorting.js
--- a/toolkit/mozapps/extensions/test/browser/browser_sorting.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_sorting.js
@@ -81,34 +81,34 @@ add_test(function() {
 
   run_next_test();
 });
 
 // Tests that switching to date ordering works and defaults to descending
 add_test(function() {
   var sorters = gManagerWindow.document.getElementById("list-sorters");
   var nameSorter = gManagerWindow.document.getAnonymousElementByAttribute(sorters, "anonid", "btn-date");
-  EventUtils.synthesizeMouse(nameSorter, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(nameSorter, { }, gManagerWindow);
 
   check_order([
     "test5@tests.mozilla.org",
     "test3@tests.mozilla.org",
     "test1@tests.mozilla.org",
     "test2@tests.mozilla.org",
     "test4@tests.mozilla.org"
   ]);
 
   run_next_test();
 });
 
 // Tests that switching to name ordering works and defaults to ascending
 add_test(function() {
   var sorters = gManagerWindow.document.getElementById("list-sorters");
   var nameSorter = gManagerWindow.document.getAnonymousElementByAttribute(sorters, "anonid", "btn-name");
-  EventUtils.synthesizeMouse(nameSorter, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(nameSorter, { }, gManagerWindow);
 
   check_order([
     "test2@tests.mozilla.org",
     "test4@tests.mozilla.org",
     "test3@tests.mozilla.org",
     "test5@tests.mozilla.org",
     "test1@tests.mozilla.org"
   ]);
diff --git a/toolkit/mozapps/extensions/test/browser/browser_uninstalling.js b/toolkit/mozapps/extensions/test/browser/browser_uninstalling.js
--- a/toolkit/mozapps/extensions/test/browser/browser_uninstalling.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_uninstalling.js
@@ -103,32 +103,32 @@ add_test(function() {
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should be pending uninstall");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
       isnot(button, null, "Should have a restart button");
       ok(!button.hidden, "Restart button should not be hidden");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
       isnot(button, null, "Should have an undo button");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
@@ -154,33 +154,33 @@ add_test(function() {
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(!aAddon.isActive, "Add-on should be inactive");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
       isnot(button, null, "Should have a restart button");
       ok(button.hidden, "Restart button should be hidden");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
       isnot(button, null, "Should have an undo button");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       ok(aAddon.isActive, "Add-on should be active");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
@@ -209,33 +209,33 @@ add_test(function() {
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(!aAddon.isActive, "Add-on should be inactive");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
       isnot(button, null, "Should have a restart button");
       ok(button.hidden, "Restart button should be hidden");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
       isnot(button, null, "Should have an undo button");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       ok(!aAddon.isActive, "Add-on should be inactive");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
@@ -251,52 +251,52 @@ add_test(function() {
 // Tests that uninstalling a normal add-on from the search view can be undone
 add_test(function() {
   var ID = "addon1@tests.mozilla.org";
   var list = gDocument.getElementById("search-list");
 
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = "Uninstall";
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(searchBox, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   wait_for_view_load(gManagerWindow, function() {
     is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
     // Make sure to show local add-ons
-    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(gDocument.getElementById("search-filter-local"), { }, gManagerWindow);
 
     AddonManager.getAddonByID(ID, function(aAddon) {
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL, "Add-on should require a restart to uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should be pending uninstall");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
       isnot(button, null, "Should have a restart button");
       ok(!button.hidden, "Restart button should not be hidden");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
       isnot(button, null, "Should have an undo button");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
@@ -309,54 +309,54 @@ add_test(function() {
 // Tests that uninstalling a restartless add-on from the search view can be undone
 add_test(function() {
   var ID = "addon2@tests.mozilla.org";
   var list = gDocument.getElementById("search-list");
 
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = "Uninstall";
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(searchBox, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   wait_for_view_load(gManagerWindow, function() {
     is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
     // Make sure to show local add-ons
-    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(gDocument.getElementById("search-filter-local"), { }, gManagerWindow);
 
     AddonManager.getAddonByID(ID, function(aAddon) {
       ok(aAddon.isActive, "Add-on should be active");
       ok(!(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL), "Add-on should not require a restart to uninstall");
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(!aAddon.isActive, "Add-on should be inactive");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
       isnot(button, null, "Should have a restart button");
       ok(button.hidden, "Restart button should be hidden");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
       isnot(button, null, "Should have an undo button");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       ok(aAddon.isActive, "Add-on should be active");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
@@ -370,56 +370,56 @@ add_test(function() {
 // be undone and doesn't re-enable
 add_test(function() {
   var ID = "addon2@tests.mozilla.org";
   var list = gDocument.getElementById("search-list");
 
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = "Uninstall";
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(searchBox, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   wait_for_view_load(gManagerWindow, function() {
     is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
     // Make sure to show local add-ons
-    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(gDocument.getElementById("search-filter-local"), { }, gManagerWindow);
 
     AddonManager.getAddonByID(ID, function(aAddon) {
       aAddon.userDisabled = true;
 
       ok(!aAddon.isActive, "Add-on should be inactive");
       ok(!(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL), "Add-on should not require a restart to uninstall");
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(!aAddon.isActive, "Add-on should be inactive");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
       isnot(button, null, "Should have a restart button");
       ok(button.hidden, "Restart button should be hidden");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
       isnot(button, null, "Should have an undo button");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       ok(!aAddon.isActive, "Add-on should be inactive");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
@@ -444,25 +444,25 @@ add_test(function() {
 
     AddonManager.getAddonByID(ID, function(aAddon) {
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL, "Add-on should require a restart to uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
-      EventUtils.synthesizeMouse(item, 2, 2, { clickCount: 2 }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(item, { clickCount: 2 }, gManagerWindow);
       wait_for_view_load(gManagerWindow, function() {
         is(gDocument.getElementById("view-port").selectedPanel.id, "detail-view", "Should be in the detail view");
 
         var button = gDocument.getElementById("detail-uninstall");
         isnot(button, null, "Should have a remove button");
         ok(!button.disabled, "Button should not be disabled");
 
-        EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+        EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
         wait_for_view_load(gManagerWindow, function() {
           is(gCategoryUtilities.selectedCategory, "extension", "View should have changed to extension");
 
           var item = get_item_in_list(ID, list);
           isnot(item, null, "Should have found the add-on in the list");
           is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
@@ -472,17 +472,17 @@ add_test(function() {
           item.clientTop;
 
           var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
           isnot(button, null, "Should have a restart button");
           ok(!button.hidden, "Restart button should not be hidden");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
           isnot(button, null, "Should have an undo button");
 
-          EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+          EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
           // Force XBL to apply
           item.clientTop;
 
           ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
           isnot(button, null, "Should have a remove button");
           ok(!button.disabled, "Button should not be disabled");
@@ -507,25 +507,25 @@ add_test(function() {
     AddonManager.getAddonByID(ID, function(aAddon) {
       ok(aAddon.isActive, "Add-on should be active");
       ok(!(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL), "Add-on should not require a restart to uninstall");
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
-      EventUtils.synthesizeMouse(item, 2, 2, { clickCount: 2 }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(item, { clickCount: 2 }, gManagerWindow);
       wait_for_view_load(gManagerWindow, function() {
         is(gDocument.getElementById("view-port").selectedPanel.id, "detail-view", "Should be in the detail view");
 
         var button = gDocument.getElementById("detail-uninstall");
         isnot(button, null, "Should have a remove button");
         ok(!button.disabled, "Button should not be disabled");
 
-        EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+        EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
         wait_for_view_load(gManagerWindow, function() {
           is(gCategoryUtilities.selectedCategory, "extension", "View should have changed to extension");
 
           var item = get_item_in_list(ID, list);
           isnot(item, null, "Should have found the add-on in the list");
           is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
@@ -536,17 +536,17 @@ add_test(function() {
           item.clientTop;
 
           var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
           isnot(button, null, "Should have a restart button");
           ok(button.hidden, "Restart button should be hidden");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
           isnot(button, null, "Should have an undo button");
 
-          EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+          EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
           // Force XBL to apply
           item.clientTop;
 
           ok(aAddon.isActive, "Add-on should be active");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
           isnot(button, null, "Should have a remove button");
           ok(!button.disabled, "Button should not be disabled");
@@ -573,25 +573,25 @@ add_test(function() {
 
       ok(!aAddon.isActive, "Add-on should be inactive");
       ok(!(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL), "Add-on should not require a restart to uninstall");
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
-      EventUtils.synthesizeMouse(item, 2, 2, { clickCount: 2 }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(item, { clickCount: 2 }, gManagerWindow);
       wait_for_view_load(gManagerWindow, function() {
         is(gDocument.getElementById("view-port").selectedPanel.id, "detail-view", "Should be in the detail view");
 
         var button = gDocument.getElementById("detail-uninstall");
         isnot(button, null, "Should have a remove button");
         ok(!button.disabled, "Button should not be disabled");
 
-        EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+        EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
         wait_for_view_load(gManagerWindow, function() {
           is(gCategoryUtilities.selectedCategory, "extension", "View should have changed to extension");
 
           var item = get_item_in_list(ID, list);
           isnot(item, null, "Should have found the add-on in the list");
           is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
@@ -602,17 +602,17 @@ add_test(function() {
           item.clientTop;
 
           var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
           isnot(button, null, "Should have a restart button");
           ok(button.hidden, "Restart button should be hidden");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
           isnot(button, null, "Should have an undo button");
 
-          EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+          EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
           // Force XBL to apply
           item.clientTop;
 
           ok(!aAddon.isActive, "Add-on should be inactive");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
           isnot(button, null, "Should have a remove button");
           ok(!button.disabled, "Button should not be disabled");
@@ -642,17 +642,17 @@ add_test(function() {
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should be pending uninstall");
 
@@ -674,17 +674,17 @@ add_test(function() {
           ok(!!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should be pending uninstall");
 
           var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
           isnot(button, null, "Should have a restart button");
           ok(!button.hidden, "Restart button should not be hidden");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
           isnot(button, null, "Should have an undo button");
 
-          EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+          EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
           // Force XBL to apply
           item.clientTop;
           ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
           isnot(button, null, "Should have a remove button");
           ok(!button.disabled, "Button should not be disabled");
 
@@ -698,37 +698,37 @@ add_test(function() {
 // Tests that a normal add-on pending uninstall shows up in the search view
 add_test(function() {
   var ID = "addon1@tests.mozilla.org";
   var list = gDocument.getElementById("search-list");
 
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = "Uninstall";
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(searchBox, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   wait_for_view_load(gManagerWindow, function() {
     is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
     // Make sure to show local add-ons
-    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(gDocument.getElementById("search-filter-local"), { }, gManagerWindow);
 
     AddonManager.getAddonByID(ID, function(aAddon) {
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL, "Add-on should require a restart to uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should be pending uninstall");
 
@@ -737,17 +737,17 @@ add_test(function() {
       ok(!button.hidden, "Restart button should not be hidden");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
       isnot(button, null, "Should have an undo button");
 
       gCategoryUtilities.openType("plugin", function() {
         is(gCategoryUtilities.selectedCategory, "plugin", "View should have changed to plugin");
         searchBox.value = "Uninstall";
 
-        EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+        EventUtils.synthesizeMouseAtCenter(searchBox, { }, gManagerWindow);
         EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
         wait_for_view_load(gManagerWindow, function() {
           is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
           var item = get_item_in_list(ID, list);
           isnot(item, null, "Should have found the add-on in the list");
           is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
@@ -755,17 +755,17 @@ add_test(function() {
           ok(!!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should be pending uninstall");
 
           var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
           isnot(button, null, "Should have a restart button");
           ok(!button.hidden, "Restart button should not be hidden");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
           isnot(button, null, "Should have an undo button");
 
-          EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+          EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
           // Force XBL to apply
           item.clientTop;
           ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
           isnot(button, null, "Should have a remove button");
           ok(!button.disabled, "Button should not be disabled");
 
@@ -794,17 +794,17 @@ add_test(function() {
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(!aAddon.isActive, "Add-on should be inactive");
@@ -817,17 +817,17 @@ add_test(function() {
 
       item = get_item_in_list(ID2, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       gCategoryUtilities.openType("plugin", function() {
         is(gCategoryUtilities.selectedCategory, "plugin", "View should have changed to extension");
 
         AddonManager.getAddonsByIDs([ID, ID2], function([aAddon, aAddon2]) {
           is(aAddon, null, "Add-on should no longer be installed");
           is(aAddon2, null, "Second add-on should no longer be installed");
 
@@ -852,38 +852,38 @@ add_test(function() {
 add_test(function() {
   var ID = "addon3@tests.mozilla.org";
   var ID2 = "addon7@tests.mozilla.org";
   var list = gDocument.getElementById("search-list");
 
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = "Uninstall";
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(searchBox, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   wait_for_view_load(gManagerWindow, function() {
     is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
     // Make sure to show local add-ons
-    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(gDocument.getElementById("search-filter-local"), { }, gManagerWindow);
 
     AddonManager.getAddonByID(ID, function(aAddon) {
       ok(aAddon.isActive, "Add-on should be active");
       ok(!(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL), "Add-on should not require a restart to uninstall");
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(!aAddon.isActive, "Add-on should be inactive");
@@ -896,28 +896,28 @@ add_test(function() {
 
       item = get_item_in_list(ID2, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       gCategoryUtilities.openType("plugin", function() {
         is(gCategoryUtilities.selectedCategory, "plugin", "View should have changed to extension");
 
         AddonManager.getAddonsByIDs([ID, ID2], function([aAddon, aAddon2]) {
           is(aAddon, null, "Add-on should no longer be installed");
           is(aAddon2, null, "Second add-on should no longer be installed");
 
           searchBox.value = "Uninstall";
 
-          EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+          EventUtils.synthesizeMouseAtCenter(searchBox, { }, gManagerWindow);
           EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
           wait_for_view_load(gManagerWindow, function() {
             is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
             var item = get_item_in_list(ID, list);
             is(item, null, "Should not have found the add-on in the list");
             item = get_item_in_list(ID2, list);
@@ -949,17 +949,17 @@ add_test(function() {
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(!aAddon.isActive, "Add-on should be inactive");
@@ -972,17 +972,17 @@ add_test(function() {
 
       item = get_item_in_list(ID2, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       close_manager(gManagerWindow, function() {
         AddonManager.getAddonsByIDs([ID, ID2], function([aAddon, aAddon2]) {
           is(aAddon, null, "Add-on should no longer be installed");
           is(aAddon2, null, "Second add-on should no longer be installed");
 
           open_manager(null, function(aWindow) {
             gManagerWindow = aWindow;
@@ -1010,38 +1010,38 @@ add_test(function() {
 add_test(function() {
   var ID = "addon5@tests.mozilla.org";
   var ID2 = "addon9@tests.mozilla.org";
   var list = gDocument.getElementById("search-list");
 
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = "Uninstall";
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouseAtCenter(searchBox, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   wait_for_view_load(gManagerWindow, function() {
     is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
     // Make sure to show local add-ons
-    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouseAtCenter(gDocument.getElementById("search-filter-local"), { }, gManagerWindow);
 
     AddonManager.getAddonByID(ID, function(aAddon) {
       ok(aAddon.isActive, "Add-on should be active");
       ok(!(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL), "Add-on should not require a restart to uninstall");
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(!aAddon.isActive, "Add-on should be inactive");
@@ -1054,33 +1054,33 @@ add_test(function() {
 
       item = get_item_in_list(ID2, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouseAtCenter(button, { }, gManagerWindow);
 
       close_manager(gManagerWindow, function() {
         AddonManager.getAddonsByIDs([ID, ID2], function([aAddon, aAddon2]) {
           is(aAddon, null, "Add-on should no longer be installed");
           is(aAddon2, null, "Second add-on should no longer be installed");
 
           open_manager(null, function(aWindow) {
             gManagerWindow = aWindow;
             gDocument = gManagerWindow.document;
             gCategoryUtilities = new CategoryUtilities(gManagerWindow);
             var list = gDocument.getElementById("search-list");
             var searchBox = gManagerWindow.document.getElementById("header-search");
 
             searchBox.value = "Uninstall";
 
-            EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+            EventUtils.synthesizeMouseAtCenter(searchBox, { }, gManagerWindow);
             EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
             wait_for_view_load(gManagerWindow, function() {
               is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
               var item = get_item_in_list(ID, list);
               is(item, null, "Should not have found the add-on in the list");
               item = get_item_in_list(ID2, list);
