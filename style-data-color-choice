From: L. David Baron <dbaron@dbaron.org>

Add function to nsStyleUtil for choosing the appropriate color from style data based on link visitedness.  (Bug 147777)

diff --git a/layout/style/nsStyleUtil.cpp b/layout/style/nsStyleUtil.cpp
--- a/layout/style/nsStyleUtil.cpp
+++ b/layout/style/nsStyleUtil.cpp
@@ -47,16 +47,18 @@
 #include "nsINameSpaceManager.h"
 #include "nsIURI.h"
 #include "nsNetUtil.h"
 #include "nsReadableUtils.h"
 #include "nsContentUtils.h"
 #include "nsTextFormatter.h"
 #include "nsIScriptError.h"
 #include "nsCSSProps.h"
+#include "nsStyleAnimation.h"
+#include "nsStyleContext.h"
 
 // XXX This is here because nsCachedStyleData is accessed outside of
 // the content module; e.g., by nsCSSFrameConstructor.
 #include "nsRuleNode.h"
 
 nsCachedStyleData::StyleStructInfo
 nsCachedStyleData::gInfo[] = {
 
@@ -616,8 +618,52 @@ nsStyleUtil::IsSignificantChild(nsIConte
 nsStyleUtil::ReportUseOfDeprecatedMethod(nsIURI* aURI, const char* aWarning)
 {
   nsContentUtils::ReportToConsole(nsContentUtils::eCSS_PROPERTIES,
                                   aWarning, nsnull, 0, aURI,
                                   EmptyString(), 0, 0,
                                   nsIScriptError::warningFlag,
                                   "CSS Object Model");
 }
+
+static nscolor ExtractColor(nsCSSProperty aProperty,
+                            nsStyleContext *aStyleContext)
+{
+  nsStyleAnimation::Value val;
+#ifdef DEBUG
+  PRBool success =
+#endif
+    nsStyleAnimation::ExtractComputedValue(aProperty, aStyleContext, val);
+  NS_ABORT_IF_FALSE(success,
+                    "aProperty must be extractable by nsStyleAnimation");
+  return val.GetColorValue();
+}
+
+struct ColorIndexSet {
+  PRUint8 colorIndex, alphaIndex;
+};
+
+static const ColorIndexSet gVisitedIndices[2] = { { 0, 0 }, { 1, 0 } };
+
+/* static */ nscolor
+nsStyleUtil::GetVisitedDependentColor(nsStyleContext *aStyleContext,
+                                      nsCSSProperty aProperty)
+{
+  nscolor colors[2];
+  colors[0] = ExtractColor(aProperty, aStyleContext);
+
+  nsStyleContext *visitedStyle = aStyleContext->StyleIfVisited();
+  if (!visitedStyle) {
+    return colors[0];
+  }
+
+  colors[1] = ExtractColor(aProperty, visitedStyle);
+
+  // NOTE: We want this code to have as little timing dependence as
+  // possible on whether aStyleContext->RelevantLinkVisited() is true.
+  const ColorIndexSet &set =
+    gVisitedIndices[aStyleContext->RelevantLinkVisited() ? 1 : 0];
+
+  nscolor colorColor = colors[set.colorIndex];
+  nscolor alphaColor = colors[set.alphaIndex];
+  return NS_RGBA(NS_GET_R(colorColor), NS_GET_G(colorColor),
+                 NS_GET_B(colorColor), NS_GET_A(alphaColor));
+}
diff --git a/layout/style/nsStyleUtil.h b/layout/style/nsStyleUtil.h
--- a/layout/style/nsStyleUtil.h
+++ b/layout/style/nsStyleUtil.h
@@ -112,12 +112,21 @@ public:
   /*
    * Does this child count as significant for selector matching?
    */
   static PRBool IsSignificantChild(nsIContent* aChild,
                                    PRBool aTextIsSignificant,
                                    PRBool aWhitespaceIsSignificant);
 
   static void ReportUseOfDeprecatedMethod(nsIURI* aURI, const char* aWarning);
+
+  /**
+   * Get a color that depends on link-visitedness using aStyleContext
+   * and aStyleContext->StyleIfVisited().
+   *
+   * aProperty must be a color-valued property that nsStyleAnimation
+   * knows how to extract.
+   */
+  static nscolor GetVisitedDependentColor(nsStyleContext *aStyleContext,
+                                          nsCSSProperty aProperty);
 };
 
-
 #endif /* nsStyleUtil_h___ */
