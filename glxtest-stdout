From: L. David Baron <dbaron@dbaron.org>

Print glxtest data to stdout.

diff --git a/toolkit/xre/glxtest.cpp b/toolkit/xre/glxtest.cpp
--- a/toolkit/xre/glxtest.cpp
+++ b/toolkit/xre/glxtest.cpp
@@ -81,30 +81,32 @@ static func_ptr_type cast(void *ptr)
            reinterpret_cast<size_t>(ptr)
          );
 }
 
 static void fatal_error(const char *str)
 {
   write(write_end_of_the_pipe, str, strlen(str));
   write(write_end_of_the_pipe, "\n", 1);
+  printf("glxtest: fatal_error: %s\n", str);
   exit(EXIT_FAILURE);
 }
 
 static int
 x_error_handler(Display *, XErrorEvent *ev)
 {
   enum { bufsize = 1024 };
   char buf[bufsize];
   int length = snprintf(buf, bufsize,
                         "X error occurred in GLX probe, error_code=%d, request_code=%d, minor_code=%d\n",
                         ev->error_code,
                         ev->request_code,
                         ev->minor_code);
   write(write_end_of_the_pipe, buf, length);
+  printf("glxtest: %s\n", buf);
   exit(EXIT_FAILURE);
   return 0;
 }
 
 static void glxtest()
 {
   ///// Open libGL and load needed symbols /////
   void *libgl = dlopen("libGL.so.1", RTLD_LAZY);
@@ -192,16 +194,18 @@ static void glxtest()
   int length = snprintf(buf, bufsize,
                         "VENDOR\n%s\nRENDERER\n%s\nVERSION\n%s\n",
                         vendorString,
                         rendererString,
                         versionString);
   if (length >= bufsize)
     fatal_error("GL strings length too large for buffer size");
 
+  printf("glxtest:\n%s", buf);
+
   ///// Check that no X error happened /////
   // In case of X errors, our X error handler will exit() now.
   // We really want to make sure that the system is able to create a GL context without generating X errors,
   // as these would crash the application.
   XSync(dpy, False);
   
   ///// Finally write data to the pipe /////
   write(write_end_of_the_pipe, buf, length);
