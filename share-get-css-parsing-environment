From: L. David Baron <dbaron@dbaron.org>

Share implementation of GetCSSParsingEnvironment so we can use it for both style rules' declarations and keyframe rules' declarations.  (Bug 435442)

diff --git a/layout/style/StyleRule.cpp b/layout/style/StyleRule.cpp
--- a/layout/style/StyleRule.cpp
+++ b/layout/style/StyleRule.cpp
@@ -1080,48 +1080,18 @@ DOMCSSDeclarationImpl::GetCSSDeclaration
  * being initialized.
  */
 nsresult
 DOMCSSDeclarationImpl::GetCSSParsingEnvironment(nsIURI** aSheetURI,
                                                 nsIURI** aBaseURI,
                                                 nsIPrincipal** aSheetPrincipal,
                                                 css::Loader** aCSSLoader)
 {
-  // null out the out params since some of them may not get initialized below
-  *aSheetURI = nsnull;
-  *aBaseURI = nsnull;
-  *aSheetPrincipal = nsnull;
-  *aCSSLoader = nsnull;
-
-  nsCOMPtr<nsIStyleSheet> sheet;
-  if (mRule) {
-    sheet = mRule->GetStyleSheet();
-    if (sheet) {
-      NS_IF_ADDREF(*aSheetURI = sheet->GetSheetURI());
-      NS_IF_ADDREF(*aBaseURI = sheet->GetBaseURI());
-
-      nsRefPtr<nsCSSStyleSheet> cssSheet(do_QueryObject(sheet));
-      if (cssSheet) {
-        NS_ADDREF(*aSheetPrincipal = cssSheet->Principal());
-      }
-
-      nsIDocument* document = sheet->GetOwningDocument();
-      if (document) {
-        NS_ADDREF(*aCSSLoader = document->CSSLoader());
-      }
-    }
-  }
-
-  nsresult result = NS_OK;
-  if (!*aSheetPrincipal) {
-    result = CallCreateInstance("@mozilla.org/nullprincipal;1",
-                                aSheetPrincipal);
-  }
-
-  return result;
+  return GetCSSParsingEnvironmentForRule(mRule, aSheetURI, aBaseURI,
+                                         aSheetPrincipal, aCSSLoader);
 }
 
 NS_IMETHODIMP
 DOMCSSDeclarationImpl::GetParentRule(nsIDOMCSSRule **aParent)
 {
   NS_ENSURE_ARG_POINTER(aParent);
 
   if (!mRule) {
diff --git a/layout/style/nsDOMCSSDeclaration.cpp b/layout/style/nsDOMCSSDeclaration.cpp
--- a/layout/style/nsDOMCSSDeclaration.cpp
+++ b/layout/style/nsDOMCSSDeclaration.cpp
@@ -37,17 +37,19 @@
  * ***** END LICENSE BLOCK ***** */
 
 /* base class for DOM objects for element.style and cssStyleRule.style */
 
 #include "nsDOMCSSDeclaration.h"
 #include "nsIDOMCSSRule.h"
 #include "nsCSSParser.h"
 #include "mozilla/css/Loader.h"
+#include "nsCSSStyleSheet.h"
 #include "nsIStyleRule.h"
+#include "nsICSSRule.h"
 #include "mozilla/css/Declaration.h"
 #include "nsCSSProps.h"
 #include "nsCOMPtr.h"
 #include "nsIURL.h"
 #include "nsReadableUtils.h"
 #include "nsIPrincipal.h"
 
 #include "nsContentUtils.h"
@@ -279,16 +281,56 @@ nsDOMCSSDeclaration::RemoveProperty(cons
 
   nsresult rv = GetPropertyValue(propID, aReturn);
   NS_ENSURE_SUCCESS(rv, rv);
 
   return RemoveProperty(propID);
 }
 
 nsresult
+nsDOMCSSDeclaration::GetCSSParsingEnvironmentForRule(
+                         nsICSSRule* aRule, nsIURI** aSheetURI,
+                         nsIURI** aBaseURI, nsIPrincipal** aSheetPrincipal,
+                         mozilla::css::Loader** aCSSLoader)
+{
+  // null out the out params since some of them may not get initialized below
+  *aSheetURI = nsnull;
+  *aBaseURI = nsnull;
+  *aSheetPrincipal = nsnull;
+  *aCSSLoader = nsnull;
+
+  nsCOMPtr<nsIStyleSheet> sheet;
+  if (aRule) {
+    sheet = aRule->GetStyleSheet();
+    if (sheet) {
+      NS_IF_ADDREF(*aSheetURI = sheet->GetSheetURI());
+      NS_IF_ADDREF(*aBaseURI = sheet->GetBaseURI());
+
+      nsRefPtr<nsCSSStyleSheet> cssSheet(do_QueryObject(sheet));
+      if (cssSheet) {
+        NS_ADDREF(*aSheetPrincipal = cssSheet->Principal());
+      }
+
+      nsIDocument* document = sheet->GetOwningDocument();
+      if (document) {
+        NS_ADDREF(*aCSSLoader = document->CSSLoader());
+      }
+    }
+  }
+
+  nsresult result = NS_OK;
+  if (!*aSheetPrincipal) {
+    result = CallCreateInstance("@mozilla.org/nullprincipal;1",
+                                aSheetPrincipal);
+  }
+
+  return result;
+}
+
+nsresult
 nsDOMCSSDeclaration::ParsePropertyValue(const nsCSSProperty aPropID,
                                         const nsAString& aPropValue,
                                         PRBool aIsImportant)
 {
   css::Declaration* olddecl = GetCSSDeclaration(PR_TRUE);
   if (!olddecl) {
     return NS_ERROR_FAILURE;
   }
diff --git a/layout/style/nsDOMCSSDeclaration.h b/layout/style/nsDOMCSSDeclaration.h
--- a/layout/style/nsDOMCSSDeclaration.h
+++ b/layout/style/nsDOMCSSDeclaration.h
@@ -43,16 +43,17 @@
 #include "nsICSSDeclaration.h"
 #include "nsIDOMCSS2Properties.h"
 #include "nsCOMPtr.h"
 
 class nsCSSParser;
 class nsIURI;
 class nsIPrincipal;
 class nsIDocument;
+class nsICSSRule;
 
 namespace mozilla {
 namespace css {
 class Declaration;
 class Loader;
 }
 }
 
@@ -102,16 +103,24 @@ protected:
   // This will only fail if it can't get a parser or a principal.
   // This means it can return NS_OK without aURI or aCSSLoader being
   // initialized.
   virtual nsresult GetCSSParsingEnvironment(nsIURI** aSheetURI,
                                             nsIURI** aBaseURI,
                                             nsIPrincipal** aSheetPrincipal,
                                             mozilla::css::Loader** aCSSLoader) = 0;
 
+  // An implementation for GetCSSParsingEnvironment for callers wrapping
+  // an nsICSSRule.
+  nsresult GetCSSParsingEnvironmentForRule(nsICSSRule* aRule,
+                                           nsIURI** aSheetURI,
+                                           nsIURI** aBaseURI,
+                                           nsIPrincipal** aSheetPrincipal,
+                                           mozilla::css::Loader** aCSSLoader);
+
   nsresult ParsePropertyValue(const nsCSSProperty aPropID,
                               const nsAString& aPropValue,
                               PRBool aIsImportant);
 
   // Prop-id based version of RemoveProperty.  Note that this does not
   // return the old value; it just does a straight removal.
   nsresult RemoveProperty(const nsCSSProperty aPropID);
 
