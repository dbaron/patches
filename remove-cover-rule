From: L. David Baron <dbaron@dbaron.org>

Bug 960465 patch N - Remove the cover rule code, which became unused in the previous patch.

FIXME: Remove modifications to it lower in patch queue!

diff --git a/layout/style/nsTransitionManager.cpp b/layout/style/nsTransitionManager.cpp
--- a/layout/style/nsTransitionManager.cpp
+++ b/layout/style/nsTransitionManager.cpp
@@ -339,45 +339,16 @@ nsTransitionManager::StyleContextChanged
       collection = nullptr;
     }
   }
 
   NS_ABORT_IF_FALSE(!startedAny || collection,
                     "must have element transitions if we started "
                     "any transitions");
 
-  // Here we need to produce a style rule (called the cover rule) that,
-  // when added to the after-change style defined in
-  // http://dev.w3.org/csswg/css-transitions/#starting (actually, the
-  // after-change style but with already-running transitions included),
-  // we produce the after-transition style.  This is needed to get
-  // correct behavior for both starting and stopping transitions on
-  // descendants.
-  //
-  // This requires that we cover any styles that started or stopped
-  // during this style change with the styles from afterChangeStyle.
-
-  nsRefPtr<css::AnimValuesStyleRule> coverRule = new css::AnimValuesStyleRule;
-
-  if (startedAny) {
-    AnimationPlayerPtrArray& players = collection->mPlayers;
-    for (size_t i = 0, i_end = players.Length(); i < i_end; ++i) {
-      dom::Animation* anim = players[i]->GetSource();
-      MOZ_ASSERT(anim && anim->Properties().Length() == 1,
-                 "Should have one animation property for a transition");
-      MOZ_ASSERT(anim && anim->Properties()[0].mSegments.Length() == 1,
-                 "Animation property should have one segment for a transition");
-      AnimationProperty& prop = anim->Properties()[0];
-      AnimationPropertySegment& segment = prop.mSegments[0];
-      if (whichStarted.HasProperty(prop.mProperty)) {
-        coverRule->AddValue(prop.mProperty, segment.mFromValue);
-      }
-    }
-  }
-
   if (collection) {
     // Set the style rule refresh time to null so that EnsureStyleRuleFor
     // creates a new style rule if we started *or* stopped transitions.
     collection->mStyleRuleRefreshTime = TimeStamp();
     collection->UpdateCheckGeneration(mPresContext);
     collection->mNeedsRefreshes = true;
     TimeStamp now = mPresContext->RefreshDriver()->MostRecentRefresh();
     collection->EnsureStyleRuleFor(now, EnsureStyleRule_IsNotThrottled);
