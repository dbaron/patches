Last round of style system mochitests (for now):  test copy constructors of nsStyleStruct and test more combinations of computed style for non-crashiness.

diff --git a/layout/style/test/Makefile.in b/layout/style/test/Makefile.in
--- a/layout/style/test/Makefile.in
+++ b/layout/style/test/Makefile.in
@@ -77,6 +77,7 @@ _TEST_FILES = 	test_bug302186.html \
 		test_initial_computation.html \
 		test_property_database.html \
 		test_property_syntax_errors.html \
+		test_style_struct_copy_constructors.html \
 		test_value_storage.html \
 		test_value_computation.html \
 		css_properties.js \
diff --git a/layout/style/test/test_style_struct_copy_constructors.html b/layout/style/test/test_style_struct_copy_constructors.html
new file mode 100644
--- /dev/null
+++ b/layout/style/test/test_style_struct_copy_constructors.html
@@ -0,0 +1,84 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+-->
+<head>
+  <title>Test for nsStyleStruct copy constructors</title>
+  <script type="text/javascript" src="/MochiKit/MochiKit.js"></script>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript" src="property_database.js"></script>
+  <style type="text/css" id="stylesheet"></style>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<p id="display"><span id="one"></span><span id="two"></span><span id="parent"><span id="child"></span></span></p>
+<div id="content" style="display: none">
+
+<div id="testnode"><span id="element"></span></div>
+
+  
+</div>
+<pre id="test">
+<script class="testbody" type="text/javascript">
+
+/** Test for nsStyleStruct copy constructors **/
+
+var gElementOne = document.getElementById("one");
+var gElementTwo = document.getElementById("two");
+var gElementParent = document.getElementById("parent");
+var gElementChild = document.getElementById("child");
+var gStyleSheet = document.getElementById("stylesheet").sheet;
+var gRule1 = gStyleSheet.cssRules[gStyleSheet.insertRule("#one, #two, #parent {}", gStyleSheet.cssRules.length)];
+var gRule2 = gStyleSheet.cssRules[gStyleSheet.insertRule("#two {}", gStyleSheet.cssRules.length)];
+
+/** Test using aStartStruct **/
+
+for (var prop in gCSSProperties) {
+  var info = gCSSProperties.info;
+  if (!("subproperties" in info)) {
+    gRule1.setProperty(prop, info.other_values[0], "");
+    gRule2.setProperty(prop, info.other_values[0], "");
+  }
+}
+
+for (var prop in gCSSProperties) {
+  var info = gCSSProperties.info;
+  if (!("subproperties" in info)) {
+    gRule2.removeProperty(prop);
+
+    var one = getComputedStyle(gElementOne, "").getPropertyValue(prop);
+    var two = getComputedStyle(gElementTwo, "").getPropertyValue(prop);
+    is(one, two,
+       "property '" + prop + "' was copy-constructed correctly (aStartStruct)");
+
+    gRule2.setProperty(prop, info.other_values[0], "");
+  }
+}
+
+for (var prop in gCSSProperties) {
+  var info = gCSSProperties.info;
+  if (!("subproperties" in info)) {
+    gRule1.removeProperty(prop);
+    gRule2.removeProperty(prop);
+  }
+}
+
+/** Test using inheritance **/
+for (var prop in gCSSProperties) {
+  var info = gCSSProperties.info;
+  if (info.inherited && !("subproperties" in info)) {
+    gRule1.setProperty(prop, info.other_values[0], "");
+
+    var parent = getComputedStyle(gElementParent, "").getPropertyValue(prop);
+    var child = getComputedStyle(gElementChild, "").getPropertyValue(prop);
+    is(parent, child,
+       "property '" + prop + "' was copy-constructed correctly (inheritance)");
+
+    gRule1.removeProperty(prop);
+  }
+}
+
+</script>
+</pre>
+</body>
+</html>
