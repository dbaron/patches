Printfs to debug why the profile change failed assertion is firing.  b=362649

diff --git a/security/nss/lib/nss/nssinit.c b/security/nss/lib/nss/nssinit.c
--- a/security/nss/lib/nss/nssinit.c
+++ b/security/nss/lib/nss/nssinit.c
@@ -780,11 +780,13 @@ NSS_Shutdown(void)
 
     if (!nss_IsInitted) {
 	PORT_SetError(SEC_ERROR_NOT_INITIALIZED);
+printf("NSS Shutdown failing %s:%d\n", __FILE__, __LINE__);
 	return SECFailure;
     }
 
     rv = nss_ShutdownShutdownList();
     if (rv != SECSuccess) {
+printf("NSS Shutdown failing %s:%d\n", __FILE__, __LINE__);
 	shutdownRV = SECFailure;
     }
     ShutdownCRLCache();
@@ -794,6 +796,7 @@ NSS_Shutdown(void)
     cert_DestroySubjectKeyIDHashTable();
     rv = SECMOD_Shutdown();
     if (rv != SECSuccess) {
+printf("NSS Shutdown failing %s:%d\n", __FILE__, __LINE__);
 	shutdownRV = SECFailure;
     }
     pk11sdr_Shutdown();
@@ -801,6 +804,7 @@ NSS_Shutdown(void)
 	if (NSS_GetError() == NSS_ERROR_BUSY) {
 	    PORT_SetError(SEC_ERROR_BUSY);
 	}
+printf("NSS Shutdown failing %s:%d\n", __FILE__, __LINE__);
 	shutdownRV = SECFailure;
     }
     nss_IsInitted = PR_FALSE;
diff --git a/security/nss/lib/pk11wrap/pk11pars.c b/security/nss/lib/pk11wrap/pk11pars.c
--- a/security/nss/lib/pk11wrap/pk11pars.c
+++ b/security/nss/lib/pk11wrap/pk11pars.c
@@ -152,6 +152,9 @@ SECMOD_CreateModule(const char *library,
 
     secmod_PrivateModuleCount++;
 
+printf("SECMOD_CreateModule returning %p=(\"%s\",\"%s\",refCount=%d)\n",
+       mod, mod->commonName, mod->dllName, mod->refCount);
+
     return mod;
 }
 
diff --git a/security/nss/lib/pk11wrap/pk11util.c b/security/nss/lib/pk11wrap/pk11util.c
--- a/security/nss/lib/pk11wrap/pk11util.c
+++ b/security/nss/lib/pk11wrap/pk11util.c
@@ -121,6 +121,8 @@ SECMOD_Shutdown()
     }
 #endif
     if (secmod_PrivateModuleCount) {
+printf("SECMOD_Shutdown failing since secmod_PrivateModuleCount=%d\n",
+       secmod_PrivateModuleCount);
     	PORT_SetError(SEC_ERROR_BUSY);
 	return SECFailure;
     }
@@ -789,6 +791,8 @@ SECMOD_SlotDestroyModule(SECMODModule *m
 SECMOD_SlotDestroyModule(SECMODModule *module, PRBool fromSlot) 
 {
     PRBool willfree = PR_FALSE;
+printf("SECMOD_DestroyModule(%p=(\"%s\",\"%s\",refCount=%d) fromSlot=%d)\n",
+       module, module->commonName, module->dllName, module->refCount, fromSlot);
     if (fromSlot) {
         PORT_Assert(module->refCount == 0);
 	PZ_Lock(module->refLock);
