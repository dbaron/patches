From: L. David Baron <dbaron@dbaron.org>

Add calc() unit to nsStyleAnimation::Value.  (Bug 536539)

diff --git a/layout/style/nsStyleAnimation.cpp b/layout/style/nsStyleAnimation.cpp
--- a/layout/style/nsStyleAnimation.cpp
+++ b/layout/style/nsStyleAnimation.cpp
@@ -208,16 +208,20 @@ nsStyleAnimation::ComputeDistance(nsCSSP
       double diffA = startA - endA;
       double diffR = startR - endR;
       double diffG = startG - endG;
       double diffB = startB - endB;
       aDistance = sqrt(diffA * diffA + diffR * diffR +
                        diffG * diffG + diffB * diffB);
       return PR_TRUE;
     }
+    case eUnit_Calc: {
+      // FIXME: WRITE ME
+      return PR_FALSE;
+    }
     case eUnit_CSSValuePair: {
       const nsCSSValuePair *pair1 = aStartValue.GetCSSValuePairValue();
       const nsCSSValuePair *pair2 = aEndValue.GetCSSValuePairValue();
       if (pair1->mXValue.GetUnit() != pair2->mXValue.GetUnit() ||
           pair1->mYValue.GetUnit() != pair2->mYValue.GetUnit()) {
         // At least until we have calc()
         return PR_FALSE;
       }
@@ -1261,16 +1265,20 @@ nsStyleAnimation::AddWeighted(nsCSSPrope
         PRUint8 Rres = ClampColor((R1 * aCoeff1 + R2 * aCoeff2) * factor);
         PRUint8 Gres = ClampColor((G1 * aCoeff1 + G2 * aCoeff2) * factor);
         PRUint8 Bres = ClampColor((B1 * aCoeff1 + B2 * aCoeff2) * factor);
         resultColor = NS_RGBA(Rres, Gres, Bres, Ares);
       }
       aResultValue.SetColorValue(resultColor);
       return PR_TRUE;
     }
+    case eUnit_Calc: {
+      // FIXME: WRITE ME
+      return PR_FALSE;
+    }
     case eUnit_CSSValuePair: {
       const nsCSSValuePair *pair1 = aValue1.GetCSSValuePairValue();
       const nsCSSValuePair *pair2 = aValue2.GetCSSValuePairValue();
       if (pair1->mXValue.GetUnit() != pair2->mXValue.GetUnit() ||
           pair1->mYValue.GetUnit() != pair2->mYValue.GetUnit()) {
         // At least until we have calc()
         return PR_FALSE;
       }
@@ -1747,16 +1755,20 @@ nsStyleAnimation::UncomputeValue(nsCSSPr
     case eUnit_Float:
       aSpecifiedValue.
         SetFloatValue(aComputedValue.GetFloatValue(), eCSSUnit_Number);
       break;
     case eUnit_Color:
       // colors can be alone, or part of a paint server
       aSpecifiedValue.SetColorValue(aComputedValue.GetColorValue());
       break;
+    case eUnit_Calc: {
+      // FIXME: WRITE ME
+      return PR_FALSE;
+    }
     case eUnit_CSSValuePair: {
       // Rule node processing expects pair values to be collapsed to a
       // single value if both halves would be equal, for most but not
       // all properties.  At present, all animatable properties that
       // use pairs do expect collapsing.
       const nsCSSValuePair* pair = aComputedValue.GetCSSValuePairValue();
       if (pair->mXValue == pair->mYValue) {
         aSpecifiedValue = pair->mXValue;
@@ -2479,16 +2491,23 @@ nsStyleAnimation::Value::operator=(const
       break;
     case eUnit_Percent:
     case eUnit_Float:
       mValue.mFloat = aOther.mValue.mFloat;
       break;
     case eUnit_Color:
       mValue.mColor = aOther.mValue.mColor;
       break;
+    case eUnit_Calc:
+      NS_ABORT_IF_FALSE(aOther.mValue.mCSSValue, "values may not be null");
+      mValue.mCSSValue = new nsCSSValue(*aOther.mValue.mCSSValue);
+      if (!mValue.mCSSValue) {
+        mUnit = eUnit_Null;
+      }
+      break;
     case eUnit_CSSValuePair:
       NS_ABORT_IF_FALSE(aOther.mValue.mCSSValuePair,
                         "value pairs may not be null");
       mValue.mCSSValuePair = new nsCSSValuePair(*aOther.mValue.mCSSValuePair);
       if (!mValue.mCSSValuePair) {
         mUnit = eUnit_Null;
       }
       break;
@@ -2647,17 +2666,19 @@ nsStyleAnimation::Value::SetAndAdoptCSSV
   NS_ABORT_IF_FALSE(aValuePairList, "may not be null");
   mUnit = eUnit_CSSValuePairList;
   mValue.mCSSValuePairList = aValuePairList; // take ownership
 }
 
 void
 nsStyleAnimation::Value::FreeValue()
 {
-  if (IsCSSValueListUnit(mUnit)) {
+  if (IsCSSValueUnit(mUnit)) {
+    delete mValue.mCSSValue;
+  } else if (IsCSSValueListUnit(mUnit)) {
     delete mValue.mCSSValueList;
   } else if (IsCSSValuePairUnit(mUnit)) {
     delete mValue.mCSSValuePair;
   } else if (IsCSSRectUnit(mUnit)) {
     delete mValue.mCSSRect;
   } else if (IsCSSValuePairListUnit(mUnit)) {
     delete mValue.mCSSValuePairList;
   } else if (IsStringUnit(mUnit)) {
@@ -2685,16 +2706,18 @@ nsStyleAnimation::Value::operator==(cons
       return mValue.mInt == aOther.mValue.mInt;
     case eUnit_Coord:
       return mValue.mCoord == aOther.mValue.mCoord;
     case eUnit_Percent:
     case eUnit_Float:
       return mValue.mFloat == aOther.mValue.mFloat;
     case eUnit_Color:
       return mValue.mColor == aOther.mValue.mColor;
+    case eUnit_Calc:
+      return *mValue.mCSSValue == *aOther.mValue.mCSSValue;
     case eUnit_CSSValuePair:
       return *mValue.mCSSValuePair == *aOther.mValue.mCSSValuePair;
     case eUnit_CSSRect:
       return *mValue.mCSSRect == *aOther.mValue.mCSSRect;
     case eUnit_Dasharray:
     case eUnit_Shadow:
     case eUnit_Transform:
       return *mValue.mCSSValueList == *aOther.mValue.mCSSValueList;
diff --git a/layout/style/nsStyleAnimation.h b/layout/style/nsStyleAnimation.h
--- a/layout/style/nsStyleAnimation.h
+++ b/layout/style/nsStyleAnimation.h
@@ -224,16 +224,18 @@ public:
     eUnit_Enumerated,
     eUnit_Visibility, // special case for transitions (which converts
                       // Enumerated to Visibility as needed)
     eUnit_Integer,
     eUnit_Coord,
     eUnit_Percent,
     eUnit_Float,
     eUnit_Color,
+    eUnit_Calc, // nsCSSValue* (never null), always with a single
+                // calc() expression that's either length or length+percent
     eUnit_CSSValuePair, // nsCSSValuePair* (never null)
     eUnit_CSSRect, // nsCSSRect* (never null)
     eUnit_Dasharray, // nsCSSValueList* (never null)
     eUnit_Shadow, // nsCSSValueList* (may be null)
     eUnit_Transform, // nsCSSValueList* (never null)
     eUnit_CSSValuePairList, // nsCSSValuePairList* (never null)
     eUnit_UnparsedString // nsStringBuffer* (never null)
   };
@@ -241,16 +243,17 @@ public:
   class Value {
   private:
     Unit mUnit;
     union {
       PRInt32 mInt;
       nscoord mCoord;
       float mFloat;
       nscolor mColor;
+      nsCSSValue* mCSSValue;
       nsCSSValuePair* mCSSValuePair;
       nsCSSRect* mCSSRect;
       nsCSSValueList* mCSSValueList;
       nsCSSValuePairList* mCSSValuePairList;
       nsStringBuffer* mString;
     } mValue;
   public:
     Unit GetUnit() const {
@@ -279,16 +282,20 @@ public:
     float GetFloatValue() const {
       NS_ASSERTION(mUnit == eUnit_Float, "unit mismatch");
       return mValue.mFloat;
     }
     nscolor GetColorValue() const {
       NS_ASSERTION(mUnit == eUnit_Color, "unit mismatch");
       return mValue.mColor;
     }
+    nsCSSValue* GetCSSValueValue() const {
+      NS_ASSERTION(IsCSSValueUnit(mUnit), "unit mismatch");
+      return mValue.mCSSValue;
+    }
     nsCSSValuePair* GetCSSValuePairValue() const {
       NS_ASSERTION(IsCSSValuePairUnit(mUnit), "unit mismatch");
       return mValue.mCSSValuePair;
     }
     nsCSSRect* GetCSSRectValue() const {
       NS_ASSERTION(IsCSSRectUnit(mUnit), "unit mismatch");
       return mValue.mCSSRect;
     }
@@ -360,16 +367,19 @@ public:
     static const PRUnichar* GetBufferValue(nsStringBuffer* aBuffer) {
       return static_cast<PRUnichar*>(aBuffer->Data());
     }
 
     static PRBool IsIntUnit(Unit aUnit) {
       return aUnit == eUnit_Enumerated || aUnit == eUnit_Visibility ||
              aUnit == eUnit_Integer;
     }
+    static PRBool IsCSSValueUnit(Unit aUnit) {
+      return aUnit == eUnit_Calc;
+    }
     static PRBool IsCSSValuePairUnit(Unit aUnit) {
       return aUnit == eUnit_CSSValuePair;
     }
     static PRBool IsCSSRectUnit(Unit aUnit) {
       return aUnit == eUnit_CSSRect;
     }
     static PRBool IsCSSValueListUnit(Unit aUnit) {
       return aUnit == eUnit_Dasharray || aUnit == eUnit_Shadow ||
