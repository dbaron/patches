From: L. David Baron <dbaron@dbaron.org>

Add uncomputed value types to nsStyleAnimation::Value.  (Bug 533352)

diff --git a/layout/style/nsStyleAnimation.cpp b/layout/style/nsStyleAnimation.cpp
--- a/layout/style/nsStyleAnimation.cpp
+++ b/layout/style/nsStyleAnimation.cpp
@@ -3241,61 +3241,66 @@ nsStyleAnimation::Value::operator=(const
     case eUnit_Percent:
     case eUnit_Float:
       mValue.mFloat = aOther.mValue.mFloat;
       break;
     case eUnit_Color:
       mValue.mColor = aOther.mValue.mColor;
       break;
     case eUnit_Calc:
+    case eUnit_UncomputedValue:
       NS_ABORT_IF_FALSE(aOther.mValue.mCSSValue, "values may not be null");
       mValue.mCSSValue = new nsCSSValue(*aOther.mValue.mCSSValue);
       if (!mValue.mCSSValue) {
         mUnit = eUnit_Null;
       }
       break;
     case eUnit_CSSValuePair:
+    case eUnit_UncomputedValuePair:
       NS_ABORT_IF_FALSE(aOther.mValue.mCSSValuePair,
                         "value pairs may not be null");
       mValue.mCSSValuePair = new nsCSSValuePair(*aOther.mValue.mCSSValuePair);
       if (!mValue.mCSSValuePair) {
         mUnit = eUnit_Null;
       }
       break;
     case eUnit_CSSValueTriplet:
       NS_ABORT_IF_FALSE(aOther.mValue.mCSSValueTriplet,
                         "value triplets may not be null");
       mValue.mCSSValueTriplet = new nsCSSValueTriplet(*aOther.mValue.mCSSValueTriplet);
       if (!mValue.mCSSValueTriplet) {
         mUnit = eUnit_Null;
       }
       break;
     case eUnit_CSSRect:
+    case eUnit_UncomputedRect:
       NS_ABORT_IF_FALSE(aOther.mValue.mCSSRect, "rects may not be null");
       mValue.mCSSRect = new nsCSSRect(*aOther.mValue.mCSSRect);
       if (!mValue.mCSSRect) {
         mUnit = eUnit_Null;
       }
       break;
     case eUnit_Dasharray:
     case eUnit_Shadow:
     case eUnit_Transform:
     case eUnit_BackgroundPosition:
+    case eUnit_UncomputedValueList:
       NS_ABORT_IF_FALSE(mUnit == eUnit_Shadow || aOther.mValue.mCSSValueList,
                         "value lists other than shadows may not be null");
       if (aOther.mValue.mCSSValueList) {
         mValue.mCSSValueList = aOther.mValue.mCSSValueList->Clone();
         if (!mValue.mCSSValueList) {
           mUnit = eUnit_Null;
         }
       } else {
         mValue.mCSSValueList = nullptr;
       }
       break;
     case eUnit_CSSValuePairList:
+    case eUnit_UncomputedValuePairList:
       NS_ABORT_IF_FALSE(aOther.mValue.mCSSValuePairList,
                         "value pair lists may not be null");
       mValue.mCSSValuePairList = aOther.mValue.mCSSValuePairList->Clone();
       if (!mValue.mCSSValuePairList) {
         mUnit = eUnit_Null;
       }
       break;
     case eUnit_UnparsedString:
@@ -3489,29 +3494,34 @@ nsStyleAnimation::Value::operator==(cons
     case eUnit_Coord:
       return mValue.mCoord == aOther.mValue.mCoord;
     case eUnit_Percent:
     case eUnit_Float:
       return mValue.mFloat == aOther.mValue.mFloat;
     case eUnit_Color:
       return mValue.mColor == aOther.mValue.mColor;
     case eUnit_Calc:
+    case eUnit_UncomputedValue:
       return *mValue.mCSSValue == *aOther.mValue.mCSSValue;
     case eUnit_CSSValuePair:
+    case eUnit_UncomputedValuePair:
       return *mValue.mCSSValuePair == *aOther.mValue.mCSSValuePair;
     case eUnit_CSSValueTriplet:
       return *mValue.mCSSValueTriplet == *aOther.mValue.mCSSValueTriplet;
     case eUnit_CSSRect:
+    case eUnit_UncomputedRect:
       return *mValue.mCSSRect == *aOther.mValue.mCSSRect;
     case eUnit_Dasharray:
     case eUnit_Shadow:
     case eUnit_Transform:
     case eUnit_BackgroundPosition:
+    case eUnit_UncomputedValueList:
       return *mValue.mCSSValueList == *aOther.mValue.mCSSValueList;
     case eUnit_CSSValuePairList:
+    case eUnit_UncomputedValuePairList:
       return *mValue.mCSSValuePairList == *aOther.mValue.mCSSValuePairList;
     case eUnit_UnparsedString:
       return (NS_strcmp(GetStringBufferValue(),
                         aOther.GetStringBufferValue()) == 0);
   }
 
   NS_NOTREACHED("incomplete case");
   return false;
diff --git a/layout/style/nsStyleAnimation.h b/layout/style/nsStyleAnimation.h
--- a/layout/style/nsStyleAnimation.h
+++ b/layout/style/nsStyleAnimation.h
@@ -227,16 +227,21 @@ public:
     eUnit_CSSValuePair, // nsCSSValuePair* (never null)
     eUnit_CSSValueTriplet, // nsCSSValueTriplet* (never null)
     eUnit_CSSRect, // nsCSSRect* (never null)
     eUnit_Dasharray, // nsCSSValueList* (never null)
     eUnit_Shadow, // nsCSSValueList* (may be null)
     eUnit_Transform, // nsCSSValueList* (never null)
     eUnit_BackgroundPosition, // nsCSSValueList* (never null)
     eUnit_CSSValuePairList, // nsCSSValuePairList* (never null)
+    eUnit_UncomputedValue, // nsCSSValue* (never null)
+    eUnit_UncomputedValuePair, // nsCSSValuePair* (never null)
+    eUnit_UncomputedRect, // nsCSSRect* (never null)
+    eUnit_UncomputedValueList, // nsCSSValueList* (never null)
+    eUnit_UncomputedValuePairList, // nsCSSValuePairList* (never null)
     eUnit_UnparsedString // nsStringBuffer* (never null)
   };
 
   class Value {
   private:
     Unit mUnit;
     union {
       int32_t mInt;
@@ -370,33 +375,38 @@ public:
       return static_cast<PRUnichar*>(aBuffer->Data());
     }
 
     static bool IsIntUnit(Unit aUnit) {
       return aUnit == eUnit_Enumerated || aUnit == eUnit_Visibility ||
              aUnit == eUnit_Integer;
     }
     static bool IsCSSValueUnit(Unit aUnit) {
-      return aUnit == eUnit_Calc;
+      return aUnit == eUnit_Calc ||
+             aUnit == eUnit_UncomputedValue;
     }
     static bool IsCSSValuePairUnit(Unit aUnit) {
-      return aUnit == eUnit_CSSValuePair;
+      return aUnit == eUnit_CSSValuePair ||
+             aUnit == eUnit_UncomputedValue;
     }
     static bool IsCSSValueTripletUnit(Unit aUnit) {
       return aUnit == eUnit_CSSValueTriplet;
     }
     static bool IsCSSRectUnit(Unit aUnit) {
-      return aUnit == eUnit_CSSRect;
+      return aUnit == eUnit_CSSRect ||
+             aUnit == eUnit_UncomputedRect;
     }
     static bool IsCSSValueListUnit(Unit aUnit) {
       return aUnit == eUnit_Dasharray || aUnit == eUnit_Shadow ||
-             aUnit == eUnit_Transform || aUnit == eUnit_BackgroundPosition;
+             aUnit == eUnit_Transform || aUnit == eUnit_BackgroundPosition ||
+             aUnit == eUnit_UncomputedValueList;
     }
     static bool IsCSSValuePairListUnit(Unit aUnit) {
-      return aUnit == eUnit_CSSValuePairList;
+      return aUnit == eUnit_CSSValuePairList ||
+             aUnit == eUnit_UncomputedValuePairList;
     }
     static bool IsStringUnit(Unit aUnit) {
       return aUnit == eUnit_UnparsedString;
     }
   };
 };
 
 #endif
