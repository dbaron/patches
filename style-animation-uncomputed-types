From: L. David Baron <dbaron@dbaron.org>

Bug 533352 - Add uncomputed value types to StyleAnimationValue.

diff --git a/layout/style/StyleAnimationValue.cpp b/layout/style/StyleAnimationValue.cpp
--- a/layout/style/StyleAnimationValue.cpp
+++ b/layout/style/StyleAnimationValue.cpp
@@ -461,16 +461,21 @@ StyleAnimationValue::ComputeDistance(nsC
   Unit commonUnit =
     GetCommonUnit(aProperty, aStartValue.GetUnit(), aEndValue.GetUnit());
 
   switch (commonUnit) {
     case eUnit_Null:
     case eUnit_Auto:
     case eUnit_None:
     case eUnit_Normal:
+    case eUnit_UncomputedValue:
+    case eUnit_UncomputedValuePair:
+    case eUnit_UncomputedRect:
+    case eUnit_UncomputedValueList:
+    case eUnit_UncomputedValuePairList:
     case eUnit_UnparsedString:
     case eUnit_URL:
     case eUnit_CurrentColor:
       return false;
 
     case eUnit_Enumerated:
       switch (aProperty) {
         case eCSSProperty_font_stretch: {
@@ -2206,16 +2211,21 @@ StyleAnimationValue::AddWeighted(nsCSSPr
   // that in GetCommonUnit? in which case maybe ConvertToCommonUnit would be
   // better.)
 
   switch (commonUnit) {
     case eUnit_Null:
     case eUnit_Auto:
     case eUnit_None:
     case eUnit_Normal:
+    case eUnit_UncomputedValue:
+    case eUnit_UncomputedValuePair:
+    case eUnit_UncomputedRect:
+    case eUnit_UncomputedValueList:
+    case eUnit_UncomputedValuePairList:
     case eUnit_UnparsedString:
     case eUnit_URL:
     case eUnit_CurrentColor:
       return false;
 
     case eUnit_Enumerated:
       switch (aProperty) {
         case eCSSProperty_font_stretch: {
@@ -4213,39 +4223,43 @@ StyleAnimationValue::operator=(const Sty
       MOZ_ASSERT(!mozilla::IsNaN(mValue.mFloat));
       break;
     case eUnit_Color:
       mValue.mColor = aOther.mValue.mColor;
       break;
     case eUnit_Calc:
     case eUnit_ObjectPosition:
     case eUnit_URL:
+    case eUnit_UncomputedValue:
       MOZ_ASSERT(IsCSSValueUnit(mUnit),
                  "This clause is for handling nsCSSValue-backed units");
       MOZ_ASSERT(aOther.mValue.mCSSValue, "values may not be null");
       mValue.mCSSValue = new nsCSSValue(*aOther.mValue.mCSSValue);
       break;
     case eUnit_CSSValuePair:
+    case eUnit_UncomputedValuePair:
       MOZ_ASSERT(aOther.mValue.mCSSValuePair,
                  "value pairs may not be null");
       mValue.mCSSValuePair = new nsCSSValuePair(*aOther.mValue.mCSSValuePair);
       break;
     case eUnit_CSSValueTriplet:
       MOZ_ASSERT(aOther.mValue.mCSSValueTriplet,
                  "value triplets may not be null");
       mValue.mCSSValueTriplet = new nsCSSValueTriplet(*aOther.mValue.mCSSValueTriplet);
       break;
     case eUnit_CSSRect:
+    case eUnit_UncomputedRect:
       MOZ_ASSERT(aOther.mValue.mCSSRect, "rects may not be null");
       mValue.mCSSRect = new nsCSSRect(*aOther.mValue.mCSSRect);
       break;
     case eUnit_Dasharray:
     case eUnit_Shadow:
     case eUnit_Filter:
     case eUnit_BackgroundPosition:
+    case eUnit_UncomputedValueList:
       MOZ_ASSERT(mUnit == eUnit_Shadow || mUnit == eUnit_Filter ||
                  aOther.mValue.mCSSValueList,
                  "value lists other than shadows and filters may not be null");
       if (aOther.mValue.mCSSValueList) {
         mValue.mCSSValueList = aOther.mValue.mCSSValueList->Clone();
       } else {
         mValue.mCSSValueList = nullptr;
       }
@@ -4256,16 +4270,17 @@ StyleAnimationValue::operator=(const Sty
       mValue.mCSSValueArray = aOther.mValue.mCSSValueArray;
       mValue.mCSSValueArray->AddRef();
       break;
     case eUnit_Transform:
       mValue.mCSSValueSharedList = aOther.mValue.mCSSValueSharedList;
       mValue.mCSSValueSharedList->AddRef();
       break;
     case eUnit_CSSValuePairList:
+    case eUnit_UncomputedValuePairList:
       MOZ_ASSERT(aOther.mValue.mCSSValuePairList,
                  "value pair lists may not be null");
       mValue.mCSSValuePairList = aOther.mValue.mCSSValuePairList->Clone();
       break;
     case eUnit_UnparsedString:
       MOZ_ASSERT(aOther.mValue.mString, "expecting non-null string");
       mValue.mString = aOther.mValue.mString;
       mValue.mString->AddRef();
@@ -4487,36 +4502,41 @@ StyleAnimationValue::operator==(const St
     case eUnit_Percent:
     case eUnit_Float:
       return mValue.mFloat == aOther.mValue.mFloat;
     case eUnit_Color:
       return mValue.mColor == aOther.mValue.mColor;
     case eUnit_Calc:
     case eUnit_ObjectPosition:
     case eUnit_URL:
+    case eUnit_UncomputedValue:
       MOZ_ASSERT(IsCSSValueUnit(mUnit),
                  "This clause is for handling nsCSSValue-backed units");
       return *mValue.mCSSValue == *aOther.mValue.mCSSValue;
     case eUnit_CSSValuePair:
+    case eUnit_UncomputedValuePair:
       return *mValue.mCSSValuePair == *aOther.mValue.mCSSValuePair;
     case eUnit_CSSValueTriplet:
       return *mValue.mCSSValueTriplet == *aOther.mValue.mCSSValueTriplet;
     case eUnit_CSSRect:
+    case eUnit_UncomputedRect:
       return *mValue.mCSSRect == *aOther.mValue.mCSSRect;
     case eUnit_Dasharray:
     case eUnit_Shadow:
     case eUnit_Filter:
     case eUnit_BackgroundPosition:
+    case eUnit_UncomputedValueList:
       return nsCSSValueList::Equal(mValue.mCSSValueList,
                                    aOther.mValue.mCSSValueList);
     case eUnit_Shape:
       return *mValue.mCSSValueArray == *aOther.mValue.mCSSValueArray;
     case eUnit_Transform:
       return *mValue.mCSSValueSharedList == *aOther.mValue.mCSSValueSharedList;
     case eUnit_CSSValuePairList:
+    case eUnit_UncomputedValuePairList:
       return nsCSSValuePairList::Equal(mValue.mCSSValuePairList,
                                        aOther.mValue.mCSSValuePairList);
     case eUnit_UnparsedString:
       return (NS_strcmp(GetStringBufferValue(),
                         aOther.GetStringBufferValue()) == 0);
   }
 
   NS_NOTREACHED("incomplete case");
diff --git a/layout/style/StyleAnimationValue.h b/layout/style/StyleAnimationValue.h
--- a/layout/style/StyleAnimationValue.h
+++ b/layout/style/StyleAnimationValue.h
@@ -282,16 +282,21 @@ public:
     eUnit_CSSRect, // nsCSSRect* (never null)
     eUnit_Dasharray, // nsCSSValueList* (never null)
     eUnit_Shadow, // nsCSSValueList* (may be null)
     eUnit_Shape,  // nsCSSValue::Array* (never null)
     eUnit_Filter, // nsCSSValueList* (may be null)
     eUnit_Transform, // nsCSSValueList* (never null)
     eUnit_BackgroundPosition, // nsCSSValueList* (never null)
     eUnit_CSSValuePairList, // nsCSSValuePairList* (never null)
+    eUnit_UncomputedValue, // nsCSSValue* (never null)
+    eUnit_UncomputedValuePair, // nsCSSValuePair* (never null)
+    eUnit_UncomputedRect, // nsCSSRect* (never null)
+    eUnit_UncomputedValueList, // nsCSSValueList* (never null)
+    eUnit_UncomputedValuePairList, // nsCSSValuePairList* (never null)
     eUnit_UnparsedString // nsStringBuffer* (never null)
   };
 
 private:
   Unit mUnit;
   union {
     int32_t mInt;
     nscoord mCoord;
@@ -464,40 +469,45 @@ private:
 
   static bool IsIntUnit(Unit aUnit) {
     return aUnit == eUnit_Enumerated || aUnit == eUnit_Visibility ||
            aUnit == eUnit_Integer;
   }
   static bool IsCSSValueUnit(Unit aUnit) {
     return aUnit == eUnit_Calc ||
            aUnit == eUnit_ObjectPosition ||
-           aUnit == eUnit_URL;
+           aUnit == eUnit_URL ||
+           aUnit == eUnit_UncomputedValue;
   }
   static bool IsCSSValuePairUnit(Unit aUnit) {
-    return aUnit == eUnit_CSSValuePair;
+    return aUnit == eUnit_CSSValuePair ||
+           aUnit == eUnit_UncomputedValuePair;
   }
   static bool IsCSSValueTripletUnit(Unit aUnit) {
     return aUnit == eUnit_CSSValueTriplet;
   }
   static bool IsCSSRectUnit(Unit aUnit) {
-    return aUnit == eUnit_CSSRect;
+    return aUnit == eUnit_CSSRect ||
+           aUnit == eUnit_UncomputedRect;
   }
   static bool IsCSSValueArrayUnit(Unit aUnit) {
     return aUnit == eUnit_Shape;
   }
   static bool IsCSSValueListUnit(Unit aUnit) {
     return aUnit == eUnit_Dasharray || aUnit == eUnit_Filter ||
            aUnit == eUnit_Shadow ||
-           aUnit == eUnit_BackgroundPosition;
+           aUnit == eUnit_BackgroundPosition ||
+           aUnit == eUnit_UncomputedValueList;
   }
   static bool IsCSSValueSharedListValue(Unit aUnit) {
     return aUnit == eUnit_Transform;
   }
   static bool IsCSSValuePairListUnit(Unit aUnit) {
-    return aUnit == eUnit_CSSValuePairList;
+    return aUnit == eUnit_CSSValuePairList ||
+           aUnit == eUnit_UncomputedValuePairList;
   }
   static bool IsStringUnit(Unit aUnit) {
     return aUnit == eUnit_UnparsedString;
   }
 };
 
 struct PropertyStyleAnimationValuePair
 {
