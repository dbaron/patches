From: L. David Baron <dbaron@dbaron.org>

Add SSE.h to consolidate code for Intel CPU feature detection at both compile-time and run-time.

diff --git a/xpcom/glue/Makefile.in b/xpcom/glue/Makefile.in
--- a/xpcom/glue/Makefile.in
+++ b/xpcom/glue/Makefile.in
@@ -130,16 +130,17 @@ EXPORTS = \
 		$(NULL)
 
 EXPORTS_mozilla = \
   BlockingResourceBase.h \
   CondVar.h \
   DeadlockDetector.h \
   Monitor.h \
   Mutex.h \
+  SSE.h \
   $(NULL)
 
 SDK_LIBRARY     =                        \
 		$(LIB_PREFIX)xpcomglue_s.$(LIB_SUFFIX) \
 		$(NULL)
 
 
 # we don't want the shared lib, but we want to force the creation of a static lib.
diff --git a/xpcom/glue/SSE.h b/xpcom/glue/SSE.h
new file mode 100644
--- /dev/null
+++ b/xpcom/glue/SSE.h
@@ -0,0 +1,402 @@
+/* vim: set shiftwidth=4 tabstop=8 autoindent cindent expandtab: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is SSE.h
+ *
+ * The Initial Developer of the Original Code is the Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2009
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   L. David Baron <dbaron@dbaron.org>, Mozilla Corporation (original author)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+/* compile-time and runtime tests for whether to use SSE instructions */
+
+#ifndef mozilla_SSE_h_
+#define mozilla_SSE_h_
+
+/**
+ * The public interface of this header consists of a set of macros and
+ * functions for Intel CPU features.
+ *
+ * In each macro-function pair, the function may not be available if the
+ * macro is undefined.  They should be used in the following pattern:
+ *
+ *   #ifdef MOZILLA_COMPILE_WITH_ABC
+ *     if (mozilla::use_abc()) {
+ *       // abc-specific code here
+ *     } else {
+ *   #endif
+ *      // generic code here
+ *   #ifdef MOZILLA_COMPILE_WITH_ABC
+ *     }
+ *   #endif
+ *
+ * In addition, on some platforms, the headers that contain the
+ * intrinsics for many of these features won't compile unless we define
+ * a particular macro first (to pretend that we gave gcc an appropriate
+ * -march option).  Therefore, code using this header should NOT include
+ * the headers for intrinsics directly, but should instead request the
+ * header by defining the header macro given below *before* including
+ * this file (which, in practice, means before including *any* header
+ * files).
+ *
+ * Macro: MOZILLA_COMPILE_WITH_MMX
+ * Function: mozilla::use_mmx
+ * Header Macro: MOZILLA_SSE_INCLUDE_HEADER_FOR_MMX
+ * Header: <mmintrin.h>
+ *
+ * Macro: MOZILLA_COMPILE_WITH_SSE
+ * Function: mozilla::use_sse
+ * Header Macro: MOZILLA_SSE_INCLUDE_HEADER_FOR_SSE
+ * Header: <xmmintrin.h>
+ *
+ * Macro: MOZILLA_COMPILE_WITH_SSE2
+ * Function: mozilla::use_sse2
+ * Header Macro: MOZILLA_SSE_INCLUDE_HEADER_FOR_SSE2
+ * Header: <emmintrin.h>
+ *
+ * Macro: MOZILLA_COMPILE_WITH_SSE3
+ * Function: mozilla::use_sse3
+ * Header Macro: MOZILLA_SSE_INCLUDE_HEADER_FOR_SSE3
+ * Header: <pmmintrin.h>
+ *
+ * Macro: MOZILLA_COMPILE_WITH_SSSE3
+ * Function: mozilla::use_ssse3
+ * Header Macro: MOZILLA_SSE_INCLUDE_HEADER_FOR_SSSE3
+ * Header: <tmmintrin.h>
+ *
+ * Macro: MOZILLA_COMPILE_WITH_SSE4A
+ * Function: mozilla::use_sse4a
+ * Header Macro: MOZILLA_SSE_INCLUDE_HEADER_FOR_SSE4A
+ * Header: <ammintrin.h>
+ *
+ * Macro: MOZILLA_COMPILE_WITH_SSE4_1
+ * Function: mozilla::use_sse4_1
+ * Header Macro: MOZILLA_SSE_INCLUDE_HEADER_FOR_SSE4_1
+ * Header: <smmintrin.h>
+ *
+ * Macro: MOZILLA_COMPILE_WITH_SSE4_2
+ * Function: mozilla::use_sse4_2
+ * Header Macro: MOZILLA_SSE_INCLUDE_HEADER_FOR_SSE4_2
+ * Header: <nmmintrin.h>
+ *
+ * Macro: MOZILLA_COMPILE_WITH_SSE5
+ * Function: mozilla::use_sse5
+ * Header Macro: MOZILLA_SSE_INCLUDE_HEADER_FOR_SSE5
+ * Header: <bmmintrin.h>
+ */
+
+#if defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__))
+// GCC
+
+// FIXME: Is any of this available on arm?  GCC seems to offer mmintrin.h
+
+// FIXME: These should depend on header availability relative to gcc
+// versions.
+#define MOZILLA_COMPILE_WITH_MMX 1
+#define MOZILLA_COMPILE_WITH_SSE 1
+#define MOZILLA_COMPILE_WITH_SSE2 1
+#define MOZILLA_COMPILE_WITH_SSE3 1
+#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3) // GCC 4.3 and up
+#define MOZILLA_COMPILE_WITH_SSSE3 1
+#define MOZILLA_COMPILE_WITH_SSE4A 1
+#define MOZILLA_COMPILE_WITH_SSE4_1 1
+#define MOZILLA_COMPILE_WITH_SSE4_2 1
+#define MOZILLA_COMPILE_WITH_SSE5 1
+#endif // GCC 4.3 and up
+
+#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3)
+
+// cpuid.h is available on gcc 4.3 and higher on i386 and x86_64
+#include <cpuid.h>
+#define MOZILLA_SSE_INCLUDED_CPUID_H
+
+// FIXME: This code shouldn't be public.
+
+enum CPUIDRegister {
+  CPUID_eax = 0, CPUID_ebx = 1, CPUID_ecx = 2, CPUID_edx = 3
+};
+
+inline bool
+has_cpuid_bit(unsigned int level, CPUIDRegister reg, unsigned int bit)
+{
+  unsigned int regs[4];
+  return __get_cpuid(level, &regs[0], &regs[1], &regs[2], &regs[3]) &&
+         (regs[reg] & bit);
+}
+
+#endif
+
+namespace mozilla {
+#if defined(__MMX__)
+  // It's ok to use MMX instructions based on the -march option (or
+  // the default for x86_64).
+  inline bool use_mmx() { return true; }
+#elif defined(MOZILLA_SSE_INCLUDED_CPUID_H)
+  inline bool use_mmx() { return has_cpuid_bit(1u, CPUID_edx, bit_MMX); }
+#else
+  inline bool use_mmx() { return false; }
+#endif
+
+#if defined(__SSE__)
+  // It's ok to use SSE instructions based on the -march option (or
+  // the default for x86_64).
+  inline bool use_sse() { return true; }
+#elif defined(MOZILLA_SSE_INCLUDED_CPUID_H)
+  inline bool use_sse() { return has_cpuid_bit(1u, CPUID_edx, bit_SSE); }
+#else
+  inline bool use_sse() { return false; }
+#endif
+
+#if defined(__SSE2__)
+  // It's ok to use SSE2 instructions based on the -march option (or
+  // the default for x86_64).
+  inline bool use_sse2() { return true; }
+#elif defined(MOZILLA_SSE_INCLUDED_CPUID_H)
+  inline bool use_sse2() { return has_cpuid_bit(1u, CPUID_edx, bit_SSE2); }
+#else
+  inline bool use_sse2() { return false; }
+#endif
+
+#if defined(__SSE3__)
+  // It's ok to use SSE3 instructions based on the -march option.
+  inline bool use_sse3() { return true; }
+#elif defined(MOZILLA_SSE_INCLUDED_CPUID_H)
+  inline bool use_sse3() { return has_cpuid_bit(1u, CPUID_ecx, bit_SSE3); }
+#else
+  inline bool use_sse3() { return false; }
+#endif
+
+#if defined(__SSSE3__)
+  // It's ok to use SSSE3 instructions based on the -march option.
+  inline bool use_ssse3() { return true; }
+#elif defined(MOZILLA_SSE_INCLUDED_CPUID_H)
+  inline bool use_ssse3() { return has_cpuid_bit(1u, CPUID_ecx, bit_SSSE3); }
+#else
+  inline bool use_ssse3() { return false; }
+#endif
+
+#if defined(__SSE4A__)
+  // It's ok to use SSE4A instructions based on the -march option.
+  inline bool use_sse4a() { return true; }
+#elif defined(MOZILLA_SSE_INCLUDED_CPUID_H)
+  // FIXME: Check this bit!
+  inline bool use_sse4a() { return has_cpuid_bit(0x80000001u, CPUID_ecx, bit_SSE4a); }
+#else
+  inline bool use_sse4a() { return false; }
+#endif
+
+#if defined(__SSE4_1__)
+  // It's ok to use SSE4.1 instructions based on the -march option.
+  inline bool use_sse4_1() { return true; }
+#elif defined(MOZILLA_SSE_INCLUDED_CPUID_H)
+  inline bool use_sse4_1() { return has_cpuid_bit(1u, CPUID_ecx, bit_SSE4_1); }
+#else
+  inline bool use_sse4_1() { return false; }
+#endif
+
+#if defined(__SSE4_2__)
+  // It's ok to use SSE4.2 instructions based on the -march option.
+  inline bool use_sse4_2() { return true; }
+#elif defined(MOZILLA_SSE_INCLUDED_CPUID_H)
+  inline bool use_sse4_2() { return has_cpuid_bit(1u, CPUID_ecx, bit_SSE4_2); }
+#else
+  inline bool use_sse4_2() { return false; }
+#endif
+
+#if defined(__SSE5__)
+  // It's ok to use SSE5 instructions based on the -march option.
+  inline bool use_sse5() { return true; }
+#elif defined(MOZILLA_SSE_INCLUDED_CPUID_H)
+  // FIXME: Check this bit!
+  inline bool use_sse5() { return has_cpuid_bit(0x80000001u, CPUID_ecx, bit_SSE5); }
+#else
+  inline bool use_sse5() { return false; }
+#endif
+
+}
+
+// FIXME: else hard-code on Mac for lower gccs
+// ... or just rely on the -march-based defines? (are they sufficient?)
+
+// gcc's headers have #error in them when the appropriate macro (defined
+// by the choice of -march) is not defined, so we need to #include these
+// headers quite carefully
+#if defined(MOZILLA_COMPILE_WITH_MMX) && \
+    defined(MOZILLA_SSE_INCLUDE_HEADER_FOR_MMX)
+  #if !defined(__MMX__)
+    #define MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #define __MMX__
+  #endif
+#include <mmintrin.h>
+  #if defined(MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE)
+    #undef MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #undef __MMX__
+  #endif
+#endif
+
+#if defined(MOZILLA_COMPILE_WITH_SSE) && \
+    defined(MOZILLA_SSE_INCLUDE_HEADER_FOR_SSE)
+  #if !defined(__SSE__)
+    #define MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #define __SSE__
+  #endif
+#include <xmmintrin.h>
+  #if defined(MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE)
+    #undef MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #undef __SSE__
+  #endif
+#endif
+
+#if defined(MOZILLA_COMPILE_WITH_SSE2) && \
+    defined(MOZILLA_SSE_INCLUDE_HEADER_FOR_SSE2)
+  #if !defined(__SSE2__)
+    #define MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #define __SSE2__
+  #endif
+#include <emmintrin.h>
+  #if defined(MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE)
+    #undef MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #undef __SSE2__
+  #endif
+#endif
+
+#if defined(MOZILLA_COMPILE_WITH_SSE3) && \
+    defined(MOZILLA_SSE_INCLUDE_HEADER_FOR_SSE3)
+  #if !defined(__SSE3__)
+    #define MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #define __SSE3__
+  #endif
+#include <pmmintrin.h>
+  #if defined(MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE)
+    #undef MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #undef __SSE3__
+  #endif
+#endif
+
+#if defined(MOZILLA_COMPILE_WITH_SSSE3) && \
+    defined(MOZILLA_SSE_INCLUDE_HEADER_FOR_SSSE3)
+  #if !defined(__SSSE3__)
+    #define MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #define __SSSE3__
+  #endif
+#include <tmmintrin.h>
+  #if defined(MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE)
+    #undef MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #undef __SSSE3__
+  #endif
+#endif
+
+#if defined(MOZILLA_COMPILE_WITH_SSE4A) && \
+    defined(MOZILLA_SSE_INCLUDE_HEADER_FOR_SSE4A)
+  #if !defined(__SSE4A__)
+    #define MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #define __SSE4A__
+  #endif
+#include <ammintrin.h>
+  #if defined(MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE)
+    #undef MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #undef __SSE4A__
+  #endif
+#endif
+
+#if defined(MOZILLA_COMPILE_WITH_SSE4_1) && \
+    defined(MOZILLA_SSE_INCLUDE_HEADER_FOR_SSE4_1)
+  #if !defined(__SSE4_1__)
+    #define MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #define __SSE4_1__
+  #endif
+#include <smmintrin.h>
+  #if defined(MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE)
+    #undef MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #undef __SSE4_1__
+  #endif
+#endif
+
+#if defined(MOZILLA_COMPILE_WITH_SSE4_2) && \
+    defined(MOZILLA_SSE_INCLUDE_HEADER_FOR_SSE4_2)
+  #if !defined(__SSE4_2__)
+    #define MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #define __SSE4_2__
+  #endif
+#include <nmmintrin.h>
+  #if defined(MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE)
+    #undef MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #undef __SSE4_2__
+  #endif
+#endif
+
+#if defined(MOZILLA_COMPILE_WITH_SSE5) && \
+    defined(MOZILLA_SSE_INCLUDE_HEADER_FOR_SSE5)
+  #if !defined(__SSE5__)
+    #define MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #define __SSE5__
+  #endif
+#include <bmmintrin.h>
+  #if defined(MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE)
+    #undef MOZILLA_SSE_DEFINED_MACRO_FOR_INCLUDE
+    #undef __SSE5__
+  #endif
+#endif
+
+#elif defined(_MSC_VER) && defined(_M_IX86)
+// MSVC on x86
+// FIXME: Add x86_64
+
+// Available at least back to Visual Studio 2003
+#define MOZILLA_COMPILE_WITH_MMX 1
+// Available at least back to Visual Studio 2003
+#define MOZILLA_COMPILE_WITH_SSE 1
+// Available at least back to Visual Studio 2003
+#define MOZILLA_COMPILE_WITH_SSE2 1
+
+extern "C" int __sse2_available;
+
+namespace mozilla {
+  inline bool use_sse2() { return !!__sse2_available; }
+}
+
+#if defined(MOZILLA_COMPILE_WITH_MMX) && \
+    defined(MOZILLA_SSE_INCLUDE_HEADER_FOR_MMX)
+#include <mmintrin.h>
+#endif
+
+#if defined(MOZILLA_COMPILE_WITH_SSE) && \
+    defined(MOZILLA_SSE_INCLUDE_HEADER_FOR_SSE)
+#include <xmmintrin.h>
+#endif
+
+#if defined(MOZILLA_COMPILE_WITH_SSE2) && \
+    defined(MOZILLA_SSE_INCLUDE_HEADER_FOR_SSE2)
+#include <emmintrin.h>
+#endif
+
+#endif
+
+#endif /* !defined(mozilla_SSE_h_) */
