From: L. David Baron <dbaron@dbaron.org>

Bug 388859 - Fix duplication between setting inherited and Check*Callback.

diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -310,7 +310,6 @@ static bool SetCoord(const nsCSSValue&
   else if (((aMask & SETCOORD_INHERIT) != 0) && 
            (aValue.GetUnit() == eCSSUnit_Inherit)) {
     aCoord = aParentCoord;  // just inherit value from parent
-    aInherited = true;
   }
   else if (((aMask & SETCOORD_NORMAL) != 0) && 
            (aValue.GetUnit() == eCSSUnit_Normal)) {
@@ -386,7 +385,6 @@ static bool SetColor(const nsCSSValue&
   else if (eCSSUnit_Inherit == unit) {
     aResult = aParentColor;
     result = true;
-    aInherited = true;
   }
   return result;
 }
@@ -687,6 +685,8 @@ CheckFontCallback(const nsRuleDataStruct
                  aResult == nsRuleNode::eRuleFullMixed,
                  "we know we already have a reset-counted property");
     // promote reset to mixed since we have something inherited
+    // (Never say Inherited rather than Mixed since that would cause
+    // inheritance by copy-construction.)
     if (aResult == nsRuleNode::eRulePartialReset)
       aResult = nsRuleNode::eRulePartialMixed;
     else if (aResult == nsRuleNode::eRuleFullReset)
@@ -1741,15 +1741,22 @@ nsRuleNode::AdjustLogicalBoxProp(nsStyle
   const nsRuleData##rdtype_& rdata_ =                                         \
     static_cast<const nsRuleData##rdtype_&>(aData);                           \
   nsStyle##type_* data_ = nullptr;                                             \
+                                                                              \
   const nsStyle##type_* parentdata_ = nullptr;                                 \
   bool inherited = aInherited;                                              \
-                                                                              \
+  bool setParentDataToData = false;                                           \
   /* If |inherited| might by false by the time we're done, we can't call */   \
   /* parentContext->Style##type_() since it could recur into setting */       \
   /* the same struct on the same rule node, causing a leak. */                \
-  if (parentContext && aRuleDetail != eRuleFullReset &&                       \
-      (!aStartStruct || aRuleDetail != eRulePartialReset))                    \
-    parentdata_ = parentContext->Style##type_();                              \
+  if (aRuleDetail != eRuleFullReset &&                                        \
+      (!aStartStruct || aRuleDetail != eRulePartialReset)) {                  \
+    inherited = true;                                                         \
+    if (parentContext)                                                        \
+      parentdata_ = parentContext->Style##type_();                            \
+    else                                                                      \
+      setParentDataToData = true;                                             \
+  }                                                                           \
+                                                                              \
   if (aStartStruct)                                                           \
     /* We only need to compute the delta between this computed data and */    \
     /* our computed data. */                                                  \
@@ -1759,7 +1766,6 @@ nsRuleNode::AdjustLogicalBoxProp(nsStyle
     if (aRuleDetail != eRuleFullMixed && aRuleDetail != eRuleFullReset) {     \
       /* No question. We will have to inherit. Go ahead and init */           \
       /* with inherited vals from parent. */                                  \
-      inherited = true;                                                    \
       if (parentdata_)                                                        \
         data_ = new (mPresContext) nsStyle##type_(*parentdata_);              \
       else                                                                    \
@@ -1771,7 +1777,7 @@ nsRuleNode::AdjustLogicalBoxProp(nsStyle
                                                                               \
   if (NS_UNLIKELY(!data_))                                                    \
     return nullptr;  /* Out Of Memory */                                       \
-  if (!parentdata_)                                                           \
+  if (NS_UNLIKELY(setParentDataToData))                                       \
     parentdata_ = data_;
 
 /**
@@ -1806,16 +1812,20 @@ nsRuleNode::AdjustLogicalBoxProp(nsStyle
   if (NS_UNLIKELY(!data_))                                                    \
     return nullptr;  /* Out Of Memory */                                       \
                                                                               \
+  const nsStyle##type_* parentdata_ = nullptr;                                 \
+  bool inherited = aInherited;                                                \
   /* If |inherited| might by false by the time we're done, we can't call */   \
   /* parentContext->Style##type_() since it could recur into setting */       \
   /* the same struct on the same rule node, causing a leak. */                \
-  const nsStyle##type_* parentdata_ = data_;                                  \
-  if (parentContext &&                                                        \
-      aRuleDetail != eRuleFullReset &&                                        \
+  if (aRuleDetail != eRuleFullReset &&                                        \
       aRuleDetail != eRulePartialReset &&                                     \
-      aRuleDetail != eRuleNone)                                               \
-    parentdata_ = parentContext->Style##type_();                              \
-  bool inherited = aInherited;
+      aRuleDetail != eRuleNone) {                                             \
+    inherited = true;                                                         \
+    if (parentContext)                                                        \
+      parentdata_ = parentContext->Style##type_();                            \
+    else                                                                      \
+      parentdata_ = data_;                                                    \
+  }
 
 /**
  * Begin an nsRuleNode::Compute*Data function for an inherited struct.
@@ -1974,7 +1984,6 @@ nsRuleNode::SetFont(nsPresContext* aPres
     aFont->mFont.systemFont = true;
   }
   else if (eCSSUnit_Inherit == aFontData.mFamily.GetUnit()) {
-    aInherited = true;
     aFont->mFont.name = aParentFont->mFont.name;
     aFont->mFont.familyNameQuirks = aParentFont->mFont.familyNameQuirks;
     aFont->mFont.systemFont = aParentFont->mFont.systemFont;
@@ -1996,7 +2005,6 @@ nsRuleNode::SetFont(nsPresContext* aPres
     aFont->mFont.style = systemFont.style;
   }
   else if (eCSSUnit_Inherit == aFontData.mStyle.GetUnit()) {
-    aInherited = true;
     aFont->mFont.style = aParentFont->mFont.style;
   }
   else if (eCSSUnit_Initial == aFontData.mStyle.GetUnit()) {
@@ -2014,7 +2022,6 @@ nsRuleNode::SetFont(nsPresContext* aPres
     aFont->mFont.variant = systemFont.variant;
   }
   else if (eCSSUnit_Inherit == aFontData.mVariant.GetUnit()) {
-    aInherited = true;
     aFont->mFont.variant = aParentFont->mFont.variant;
   }
   else if (eCSSUnit_Initial == aFontData.mVariant.GetUnit()) {
@@ -2034,7 +2041,6 @@ nsRuleNode::SetFont(nsPresContext* aPres
         break;
       case NS_STYLE_FONT_WEIGHT_BOLDER:
       case NS_STYLE_FONT_WEIGHT_LIGHTER:
-        aInherited = true;
         aFont->mFont.weight = nsStyleUtil::ConstrainFontWeight(aParentFont->mFont.weight + value);
         break;
     }
@@ -2046,7 +2052,6 @@ nsRuleNode::SetFont(nsPresContext* aPres
     aFont->mFont.weight = systemFont.weight;
   }
   else if (eCSSUnit_Inherit == aFontData.mWeight.GetUnit()) {
-    aInherited = true;
     aFont->mFont.weight = aParentFont->mFont.weight;
   }
   else if (eCSSUnit_Initial == aFontData.mWeight.GetUnit()) {
@@ -2071,8 +2076,6 @@ nsRuleNode::SetFont(nsPresContext* aPres
     }
     else if (NS_STYLE_FONT_SIZE_LARGER      == value ||
              NS_STYLE_FONT_SIZE_SMALLER     == value) {
-
-      aInherited = true;
 
       // Un-zoom so we use the tables correctly.  We'll then rezoom due
       // to the |zoom = true| above.
@@ -2095,12 +2098,17 @@ nsRuleNode::SetFont(nsPresContext* aPres
     }
   }
   else if (aFontData.mSize.IsLengthUnit()) {
-    aFont->mSize = CalcLength(aFontData.mSize, &aParentFont->mFont, nullptr, aPresContext, aInherited);
+    bool dummy;
+#ifdef DEBUG
+    dummy = false;
+#endif
+    aFont->mSize = CalcLength(aFontData.mSize, &aParentFont->mFont, nullptr, aPresContext, dummy);
+    NS_ASSERTION(!dummy || aInherited,
+                "CheckFontCallback needed to set aInherited");
     zoom = aFontData.mSize.IsFixedLengthUnit() ||
            aFontData.mSize.GetUnit() == eCSSUnit_Pixel;
   }
   else if (eCSSUnit_Percent == aFontData.mSize.GetUnit()) {
-    aInherited = true;
     aFont->mSize = NSToCoordRound(float(aParentFont->mSize) *
                                   aFontData.mSize.GetPercentValue());
     zoom = false;
@@ -2111,7 +2119,6 @@ nsRuleNode::SetFont(nsPresContext* aPres
     zoom = true;
   }
   else if (eCSSUnit_Inherit == aFontData.mSize.GetUnit()) {
-    aInherited = true;
     aFont->mSize = aParentFont->mSize;
     zoom = false;
   }
@@ -2141,7 +2148,6 @@ nsRuleNode::SetFont(nsPresContext* aPres
     aFont->mFont.sizeAdjust = systemFont.sizeAdjust;
   }
   else if (eCSSUnit_Inherit == aFontData.mSizeAdjust.GetUnit()) {
-    aInherited = true;
     aFont->mFont.sizeAdjust = aParentFont->mFont.sizeAdjust;
   }
   else if (eCSSUnit_Initial == aFontData.mSizeAdjust.GetUnit()) {
@@ -2410,7 +2416,6 @@ nsRuleNode::ComputeTextData(nsStyleStruc
     NS_NOTYETIMPLEMENTED("align string");
   }
   else if (eCSSUnit_Inherit == textData.mTextAlign.GetUnit()) {
-    inherited = true;
     text->mTextAlign = parentText->mTextAlign;
   }
   else if (eCSSUnit_Initial == textData.mTextAlign.GetUnit())
@@ -2428,7 +2433,6 @@ nsRuleNode::ComputeTextData(nsStyleStruc
     text->mTextTransform = NS_STYLE_TEXT_TRANSFORM_NONE;
   }
   else if (eCSSUnit_Inherit == textData.mTextTransform.GetUnit()) {
-    inherited = true;
     text->mTextTransform = parentText->mTextTransform;
   }
 
@@ -2440,7 +2444,6 @@ nsRuleNode::ComputeTextData(nsStyleStruc
     text->mWhiteSpace = NS_STYLE_WHITESPACE_NORMAL;
   }
   else if (eCSSUnit_Inherit == textData.mWhiteSpace.GetUnit()) {
-    inherited = true;
     text->mWhiteSpace = parentText->mWhiteSpace;
   }
 
@@ -2483,7 +2486,6 @@ nsRuleNode::ComputeTextResetData(nsStyle
     text->mTextDecoration = NS_STYLE_TEXT_DECORATION_NONE;
   }
   else if (eCSSUnit_Inherit == textData.mDecoration.GetUnit()) {
-    inherited = true;
     text->mTextDecoration = parentText->mTextDecoration;
   }
 
@@ -2495,7 +2497,6 @@ nsRuleNode::ComputeTextResetData(nsStyle
     text->mUnicodeBidi = textData.mUnicodeBidi.GetIntValue();
   }
   else if (eCSSUnit_Inherit == textData.mUnicodeBidi.GetUnit() ) {
-    inherited = true;
     text->mUnicodeBidi = parentText->mUnicodeBidi;
   }
 
@@ -2521,7 +2522,6 @@ nsRuleNode::ComputeUserInterfaceData(nsS
     ui->mCursorArrayLength = 0;
 
     if (eCSSUnit_Inherit == list->mValue.GetUnit()) {
-      inherited = true;
       ui->mCursor = parentUI->mCursor;
       ui->CopyCursorArrayFrom(*parentUI);
     }
@@ -2585,7 +2585,6 @@ nsRuleNode::ComputeUserInterfaceData(nsS
     ui->mUserInput = NS_STYLE_USER_INPUT_NONE;
   }
   else if (eCSSUnit_Inherit == uiData.mUserInput.GetUnit()) {
-    inherited = true;
     ui->mUserInput = parentUI->mUserInput;
   }
 
@@ -2594,7 +2593,6 @@ nsRuleNode::ComputeUserInterfaceData(nsS
     ui->mUserModify = uiData.mUserModify.GetIntValue();
   }
   else if (eCSSUnit_Inherit == uiData.mUserModify.GetUnit()) {
-    inherited = true;
     ui->mUserModify = parentUI->mUserModify;
   }
 
@@ -2609,7 +2607,6 @@ nsRuleNode::ComputeUserInterfaceData(nsS
     ui->mUserFocus = NS_STYLE_USER_FOCUS_NORMAL;
   }
   else if (eCSSUnit_Inherit == uiData.mUserFocus.GetUnit()) {
-    inherited = true;
     ui->mUserFocus = parentUI->mUserFocus;
   }
 
@@ -2633,7 +2630,6 @@ nsRuleNode::ComputeUIResetData(nsStyleSt
     ui->mUserSelect = NS_STYLE_USER_SELECT_NONE;
   }
   else if (eCSSUnit_Inherit == uiData.mUserSelect.GetUnit()) {
-    inherited = true;
     ui->mUserSelect = parentUI->mUserSelect;
   }
 
@@ -2649,7 +2645,6 @@ nsRuleNode::ComputeUIResetData(nsStyleSt
     ui->mIMEMode = uiData.mIMEMode.GetIntValue();
   }
   else if (eCSSUnit_Inherit == uiData.mIMEMode.GetUnit()) {
-    inherited = true;
     ui->mIMEMode = parentUI->mIMEMode;
   }
 
@@ -2657,7 +2652,6 @@ nsRuleNode::ComputeUIResetData(nsStyleSt
   if (eCSSUnit_Integer == uiData.mForceBrokenImageIcon.GetUnit()) {
     ui->mForceBrokenImageIcon = uiData.mForceBrokenImageIcon.GetIntValue();
   } else if (eCSSUnit_Inherit == uiData.mForceBrokenImageIcon.GetUnit()) {
-    inherited = true;
     ui->mForceBrokenImageIcon = parentUI->mForceBrokenImageIcon;
   } else if (eCSSUnit_Initial == uiData.mForceBrokenImageIcon.GetUnit()) {
     ui->mForceBrokenImageIcon = 0;
@@ -2691,7 +2685,6 @@ nsRuleNode::ComputeDisplayData(nsStyleSt
       display->mOpacity = 0.0f;
   }
   else if (eCSSUnit_Inherit == displayData.mOpacity.GetUnit()) {
-    inherited = true;
     display->mOpacity = parentDisplay->mOpacity;
   }
 
@@ -2703,7 +2696,6 @@ nsRuleNode::ComputeDisplayData(nsStyleSt
     display->mDisplay = NS_STYLE_DISPLAY_NONE;
   }
   else if (eCSSUnit_Inherit == displayData.mDisplay.GetUnit()) {
-    inherited = true;
     display->mDisplay = parentDisplay->mDisplay;
   }
 
@@ -2715,7 +2707,6 @@ nsRuleNode::ComputeDisplayData(nsStyleSt
     display->mAppearance = NS_THEME_NONE;
   }
   else if (eCSSUnit_Inherit == displayData.mAppearance.GetUnit()) {
-    inherited = true;
     display->mAppearance = parentDisplay->mAppearance;
   }
 
@@ -2734,7 +2725,6 @@ nsRuleNode::ComputeDisplayData(nsStyleSt
     display->mBinding = nullptr;
   }
   else if (eCSSUnit_Inherit == displayData.mBinding.GetUnit()) {
-    inherited = true;
     display->mBinding = parentDisplay->mBinding;
   }
 
@@ -2743,7 +2733,6 @@ nsRuleNode::ComputeDisplayData(nsStyleSt
     display->mPosition = displayData.mPosition.GetIntValue();
   }
   else if (eCSSUnit_Inherit == displayData.mPosition.GetUnit()) {
-    inherited = true;
     display->mPosition = parentDisplay->mPosition;
   }
 
@@ -2755,7 +2744,6 @@ nsRuleNode::ComputeDisplayData(nsStyleSt
     display->mBreakType = NS_STYLE_CLEAR_NONE;
   }
   else if (eCSSUnit_Inherit == displayData.mClear.GetUnit()) {
-    inherited = true;
     display->mBreakType = parentDisplay->mBreakType;
   }
 
@@ -2776,7 +2764,6 @@ nsRuleNode::ComputeDisplayData(nsStyleSt
     display->mFloats = NS_STYLE_FLOAT_NONE;
   }
   else if (eCSSUnit_Inherit == displayData.mFloat.GetUnit()) {
-    inherited = true;
     display->mFloats = parentDisplay->mFloats;
   }
 
@@ -2788,7 +2775,6 @@ nsRuleNode::ComputeDisplayData(nsStyleSt
     display->mOverflowX = NS_STYLE_OVERFLOW_AUTO;
   }
   else if (eCSSUnit_Inherit == displayData.mOverflowX.GetUnit()) {
-    inherited = true;
     display->mOverflowX = parentDisplay->mOverflowX;
   }
 
@@ -2800,7 +2786,6 @@ nsRuleNode::ComputeDisplayData(nsStyleSt
     display->mOverflowY = NS_STYLE_OVERFLOW_AUTO;
   }
   else if (eCSSUnit_Inherit == displayData.mOverflowY.GetUnit()) {
-    inherited = true;
     display->mOverflowY = parentDisplay->mOverflowY;
   }
 
@@ -2833,7 +2818,6 @@ nsRuleNode::ComputeDisplayData(nsStyleSt
 
   // clip property: length, auto, inherit
   if (eCSSUnit_Inherit == displayData.mClip.mTop.GetUnit()) { // if one is inherit, they all are
-    inherited = true;
     display->mClipFlags = parentDisplay->mClipFlags;
     display->mClip = parentDisplay->mClip;
   }
@@ -2997,7 +2981,6 @@ nsRuleNode::ComputeVisibilityData(nsStyl
       mPresContext->SetBidiEnabled(true);
   }
   else if (eCSSUnit_Inherit == displayData.mDirection.GetUnit()) {
-    inherited = true;
     visibility->mDirection = parentVisibility->mDirection;
   }
 
@@ -3006,7 +2989,6 @@ nsRuleNode::ComputeVisibilityData(nsStyl
     visibility->mVisible = displayData.mVisibility.GetIntValue();
   }
   else if (eCSSUnit_Inherit == displayData.mVisibility.GetUnit()) {
-    inherited = true;
     visibility->mVisible = parentVisibility->mVisible;
   }
 
@@ -3043,7 +3025,6 @@ nsRuleNode::ComputeColorData(nsStyleStru
   if (colorData.mColor.GetUnit() == eCSSUnit_Integer && 
       colorData.mColor.GetIntValue() == NS_COLOR_CURRENTCOLOR) {
     color->mColor = parentColor->mColor;
-    inherited = true;
   } else {
     SetColor(colorData.mColor, parentColor->mColor, mPresContext, aContext, color->mColor, 
              inherited);
@@ -3070,7 +3051,6 @@ nsRuleNode::ComputeBackgroundData(nsStyl
     bg->mBackgroundColor = parentBG->mBackgroundColor;
     bg->mBackgroundFlags &= ~NS_STYLE_BG_COLOR_TRANSPARENT;
     bg->mBackgroundFlags |= (parentFlags & NS_STYLE_BG_COLOR_TRANSPARENT);
-    inherited = true;
   }
   else if (SetColor(colorData.mBackColor, parentBG->mBackgroundColor, 
                     mPresContext, aContext, bg->mBackgroundColor, inherited)) {
@@ -3090,7 +3070,6 @@ nsRuleNode::ComputeBackgroundData(nsStyl
     bg->mBackgroundImage = nullptr;
   }
   else if (eCSSUnit_Inherit == colorData.mBackImage.GetUnit()) {
-    inherited = true;
     bg->mBackgroundImage = parentBG->mBackgroundImage;
   }
 
@@ -3105,7 +3084,6 @@ nsRuleNode::ComputeBackgroundData(nsStyl
     bg->mBackgroundRepeat = colorData.mBackRepeat.GetIntValue();
   }
   else if (eCSSUnit_Inherit == colorData.mBackRepeat.GetUnit()) {
-    inherited = true;
     bg->mBackgroundRepeat = parentBG->mBackgroundRepeat;
   }
   else if (eCSSUnit_Initial == colorData.mBackRepeat.GetUnit()) {
@@ -3117,7 +3095,6 @@ nsRuleNode::ComputeBackgroundData(nsStyl
     bg->mBackgroundAttachment = colorData.mBackAttachment.GetIntValue();
   }
   else if (eCSSUnit_Inherit == colorData.mBackAttachment.GetUnit()) {
-    inherited = true;
     bg->mBackgroundAttachment = parentBG->mBackgroundAttachment;
   }
   else if (eCSSUnit_Initial == colorData.mBackAttachment.GetUnit()) {
@@ -3188,7 +3165,6 @@ nsRuleNode::ComputeBackgroundData(nsStyl
     bg->mBackgroundFlags &= ~NS_STYLE_BG_X_POSITION_LENGTH;
   }
   else if (eCSSUnit_Inherit == colorData.mBackPosition.mXValue.GetUnit()) {
-    inherited = true;
     bg->mBackgroundXPosition = parentBG->mBackgroundXPosition;
     bg->mBackgroundFlags &= ~(NS_STYLE_BG_X_POSITION_LENGTH | NS_STYLE_BG_X_POSITION_PERCENT);
     bg->mBackgroundFlags |= (parentFlags & (NS_STYLE_BG_X_POSITION_LENGTH | NS_STYLE_BG_X_POSITION_PERCENT));
@@ -3227,7 +3203,6 @@ nsRuleNode::ComputeBackgroundData(nsStyl
     bg->mBackgroundFlags &= ~NS_STYLE_BG_Y_POSITION_LENGTH;
   }
   else if (eCSSUnit_Inherit == colorData.mBackPosition.mYValue.GetUnit()) {
-    inherited = true;
     bg->mBackgroundYPosition = parentBG->mBackgroundYPosition;
     bg->mBackgroundFlags &= ~(NS_STYLE_BG_Y_POSITION_LENGTH | NS_STYLE_BG_Y_POSITION_PERCENT);
     bg->mBackgroundFlags |= (parentFlags & (NS_STYLE_BG_Y_POSITION_LENGTH | NS_STYLE_BG_Y_POSITION_PERCENT));
@@ -3333,7 +3308,6 @@ nsRuleNode::ComputeBorderData(nsStyleStr
 #endif        
       }
       else if (eCSSUnit_Inherit == value.GetUnit()) {
-        inherited = true;
         border->SetBorderWidth(side, parentBorder->GetBorderWidth(side));
       }
       else if (eCSSUnit_Initial == value.GetUnit()) {
@@ -3366,7 +3340,6 @@ nsRuleNode::ComputeBorderData(nsStyleStr
         border->SetBorderStyle(side, NS_STYLE_BORDER_STYLE_NONE);
       }
       else if (eCSSUnit_Inherit == unit) {
-        inherited = true;
         border->SetBorderStyle(side, parentBorder->GetBorderStyle(side));
       }
     }
@@ -3415,8 +3388,8 @@ nsRuleNode::ComputeBorderData(nsStyleStr
     NS_FOR_CSS_SIDES(side) {
       const nsCSSValue &value = ourBorderColor.*(nsCSSRect::sides[side]);
       if (eCSSUnit_Inherit == value.GetUnit()) {
+        // null-check because of parentContext->StyleColor() inside
         if (parentContext) {
-          inherited = true;
           parentBorder->GetBorderColor(side, borderColor,
                                        transparent, foreground);
           if (transparent)
@@ -3466,7 +3439,6 @@ nsRuleNode::ComputeBorderData(nsStyleStr
   if (eCSSUnit_Enumerated == marginData.mFloatEdge.GetUnit())
     border->mFloatEdge = marginData.mFloatEdge.GetIntValue();
   else if (eCSSUnit_Inherit == marginData.mFloatEdge.GetUnit()) {
-    inherited = true;
     border->mFloatEdge = parentBorder->mFloatEdge;
   }
 
@@ -3532,8 +3504,8 @@ nsRuleNode::ComputeOutlineData(nsStyleSt
   nscolor outlineColor;
   nscolor unused = NS_RGB(0,0,0);
   if (eCSSUnit_Inherit == marginData.mOutlineColor.GetUnit()) {
+    // null-check because of parentContext->StyleColor() inside
     if (parentContext) {
-      inherited = true;
       if (parentOutline->GetOutlineColor(outlineColor))
         outline->SetOutlineColor(outlineColor);
       else {
@@ -3578,7 +3550,6 @@ nsRuleNode::ComputeOutlineData(nsStyleSt
   else if (eCSSUnit_Auto == marginData.mOutlineStyle.GetUnit()) {
     outline->SetOutlineStyle(NS_STYLE_BORDER_STYLE_AUTO);
   } else if (eCSSUnit_Inherit == marginData.mOutlineStyle.GetUnit()) {
-    inherited = true;
     outline->SetOutlineStyle(parentOutline->GetOutlineStyle());
   }
 
@@ -3603,7 +3574,6 @@ nsRuleNode::ComputeListData(nsStyleStruc
     list->mListStyleType = NS_STYLE_LIST_STYLE_NONE;
   }
   else if (eCSSUnit_Inherit == listData.mType.GetUnit()) {
-    inherited = true;
     list->mListStyleType = parentList->mListStyleType;
   }
 
@@ -3615,7 +3585,6 @@ nsRuleNode::ComputeListData(nsStyleStruc
     list->mListStyleImage = nullptr;
   }
   else if (eCSSUnit_Inherit == listData.mImage.GetUnit()) {
-    inherited = true;
     list->mListStyleImage = parentList->mListStyleImage;
   }
 
@@ -3624,13 +3593,11 @@ nsRuleNode::ComputeListData(nsStyleStruc
     list->mListStylePosition = listData.mPosition.GetIntValue();
   }
   else if (eCSSUnit_Inherit == listData.mPosition.GetUnit()) {
-    inherited = true;
     list->mListStylePosition = parentList->mListStylePosition;
   }
 
   // image region property: length, auto, inherit
   if (eCSSUnit_Inherit == listData.mImageRegion.mTop.GetUnit()) { // if one is inherit, they all are
-    inherited = true;
     list->mImageRegion = parentList->mImageRegion;
   }
   else {
@@ -3700,7 +3667,6 @@ nsRuleNode::ComputePositionData(nsStyleS
     pos->mBoxSizing = posData.mBoxSizing.GetIntValue();
   }
   else if (eCSSUnit_Inherit == posData.mBoxSizing.GetUnit()) {
-    inherited = true;
     pos->mBoxSizing = parentPos->mBoxSizing;
   }
 
@@ -3709,7 +3675,6 @@ nsRuleNode::ComputePositionData(nsStyleS
                  SETCOORD_IA, aContext, nullptr, inherited)) {
     if (eCSSUnit_Inherit == posData.mZIndex.GetUnit()) {
       // handle inherit, because it's ok to inherit 'auto' here
-      inherited = true;
       pos->mZIndex = parentPos->mZIndex;
     }
   }
@@ -3732,7 +3697,6 @@ nsRuleNode::ComputeTableData(nsStyleStru
   else if (eCSSUnit_Auto == tableData.mLayout.GetUnit())
     table->mLayoutStrategy = NS_STYLE_TABLE_LAYOUT_AUTO;
   else if (eCSSUnit_Inherit == tableData.mLayout.GetUnit()) {
-    inherited = true;
     table->mLayoutStrategy = parentTable->mLayoutStrategy;
   }
 
@@ -3772,7 +3736,6 @@ nsRuleNode::ComputeTableBorderData(nsSty
     table->mBorderCollapse = tableData.mBorderCollapse.GetIntValue();
   }
   else if (eCSSUnit_Inherit == tableData.mBorderCollapse.GetUnit()) {
-    inherited = true;
     table->mBorderCollapse = parentTable->mBorderCollapse;
   }
 
@@ -3790,7 +3753,6 @@ nsRuleNode::ComputeTableBorderData(nsSty
     table->mCaptionSide = tableData.mCaptionSide.GetIntValue();
   }
   else if (eCSSUnit_Inherit == tableData.mCaptionSide.GetUnit()) {
-    inherited = true;
     table->mCaptionSide = parentTable->mCaptionSide;
   }
 
@@ -3799,7 +3761,6 @@ nsRuleNode::ComputeTableBorderData(nsSty
     table->mEmptyCells = tableData.mEmptyCells.GetIntValue();
   }
   else if (eCSSUnit_Inherit == tableData.mEmptyCells.GetUnit()) {
-    inherited = true;
     table->mEmptyCells = parentTable->mEmptyCells;
   }
 
@@ -3828,7 +3789,6 @@ nsRuleNode::ComputeContentData(nsStyleSt
       content->AllocateContents(0);
     }
     else if (eCSSUnit_Inherit == contentValue->mValue.GetUnit()) {
-      inherited = true;
       count = parentContent->ContentCount();
       if (NS_SUCCEEDED(content->AllocateContents(count))) {
         while (0 < count--) {
@@ -3907,7 +3867,6 @@ nsRuleNode::ComputeContentData(nsStyleSt
       content->AllocateCounterIncrements(0);
     }
     else if (eCSSUnit_Inherit == ourIncrement->mCounter.GetUnit()) {
-      inherited = true;
       count = parentContent->CounterIncrementCount();
       if (NS_SUCCEEDED(content->AllocateCounterIncrements(count))) {
         while (0 < count--) {
@@ -3950,7 +3909,6 @@ nsRuleNode::ComputeContentData(nsStyleSt
       content->AllocateCounterResets(0);
     }
     else if (eCSSUnit_Inherit == ourReset->mCounter.GetUnit()) {
-      inherited = true;
       count = parentContent->CounterResetCount();
       if (NS_SUCCEEDED(content->AllocateCounterResets(count))) {
         while (0 < count--) {
@@ -4009,7 +3967,6 @@ nsRuleNode::ComputeQuotesData(nsStyleStr
   if (ourQuotes) {
     nsAutoString  closeBuffer;
     if (eCSSUnit_Inherit == ourQuotes->mOpen.GetUnit()) {
-      inherited = true;
       count = parentQuotes->QuotesCount();
       if (NS_SUCCEEDED(quotes->AllocateQuotes(count))) {
         while (0 < count--) {
@@ -4059,7 +4016,6 @@ nsRuleNode::ComputeXULData(nsStyleStruct
     xul->mBoxAlign = xulData.mBoxAlign.GetIntValue();
   }
   else if (eCSSUnit_Inherit == xulData.mBoxAlign.GetUnit()) {
-    inherited = true;
     xul->mBoxAlign = parentXUL->mBoxAlign;
   }
 
@@ -4068,7 +4024,6 @@ nsRuleNode::ComputeXULData(nsStyleStruct
     xul->mBoxDirection = xulData.mBoxDirection.GetIntValue();
   }
   else if (eCSSUnit_Inherit == xulData.mBoxDirection.GetUnit()) {
-    inherited = true;
     xul->mBoxDirection = parentXUL->mBoxDirection;
   }
 
@@ -4077,7 +4032,6 @@ nsRuleNode::ComputeXULData(nsStyleStruct
     xul->mBoxFlex = xulData.mBoxFlex.GetFloatValue();
   }
   else if (eCSSUnit_Inherit == xulData.mBoxFlex.GetUnit()) {
-    inherited = true;
     xul->mBoxFlex = parentXUL->mBoxFlex;
   }
 
@@ -4086,7 +4040,6 @@ nsRuleNode::ComputeXULData(nsStyleStruct
     xul->mBoxOrient = xulData.mBoxOrient.GetIntValue();
   }
   else if (eCSSUnit_Inherit == xulData.mBoxOrient.GetUnit()) {
-    inherited = true;
     xul->mBoxOrient = parentXUL->mBoxOrient;
   }
 
@@ -4095,7 +4048,6 @@ nsRuleNode::ComputeXULData(nsStyleStruct
     xul->mBoxPack = xulData.mBoxPack.GetIntValue();
   }
   else if (eCSSUnit_Inherit == xulData.mBoxPack.GetUnit()) {
-    inherited = true;
     xul->mBoxPack = parentXUL->mBoxPack;
   }
 
@@ -4103,7 +4055,6 @@ nsRuleNode::ComputeXULData(nsStyleStruct
   if (eCSSUnit_Integer == xulData.mBoxOrdinal.GetUnit()) {
     xul->mBoxOrdinal = xulData.mBoxOrdinal.GetIntValue();
   } else if (eCSSUnit_Inherit == xulData.mBoxOrdinal.GetUnit()) {
-    inherited = true;
     xul->mBoxOrdinal = parentXUL->mBoxOrdinal;
   } else if (eCSSUnit_Initial == xulData.mBoxOrdinal.GetUnit()) {
     xul->mBoxOrdinal = 1;
@@ -4139,7 +4090,6 @@ nsRuleNode::ComputeColumnData(nsStyleStr
     // Max 1000 columns - wallpaper for bug 345583.
     column->mColumnCount = PR_MIN(column->mColumnCount, 1000);
   } else if (eCSSUnit_Inherit == columnData.mColumnCount.GetUnit()) {
-    inherited = true;
     column->mColumnCount = parent->mColumnCount;
   }
 
@@ -4208,7 +4158,6 @@ nsRuleNode::ComputeSVGData(nsStyleStruct
     svg->mClipRule = SVGData.mClipRule.GetIntValue();
   }
   else if (eCSSUnit_Inherit == SVGData.mClipRule.GetUnit()) {
-    inherited = true;
     svg->mClipRule = parentSVG->mClipRule;
   }
   else if (eCSSUnit_Initial == SVGData.mClipRule.GetUnit()) {
@@ -4223,7 +4172,6 @@ nsRuleNode::ComputeSVGData(nsStyleStruct
     svg->mColorInterpolation = NS_STYLE_COLOR_INTERPOLATION_AUTO;
   }
   else if (eCSSUnit_Inherit == SVGData.mColorInterpolation.GetUnit()) {
-    inherited = true;
     svg->mColorInterpolation = parentSVG->mColorInterpolation;
   }
   else if (eCSSUnit_Initial == SVGData.mColorInterpolation.GetUnit()) {
@@ -4238,7 +4186,6 @@ nsRuleNode::ComputeSVGData(nsStyleStruct
     svg->mColorInterpolationFilters = NS_STYLE_COLOR_INTERPOLATION_AUTO;
   }
   else if (eCSSUnit_Inherit == SVGData.mColorInterpolationFilters.GetUnit()) {
-    inherited = true;
     svg->mColorInterpolationFilters = parentSVG->mColorInterpolationFilters;
   }
   else if (eCSSUnit_Initial == SVGData.mColorInterpolation.GetUnit()) {
@@ -4258,7 +4205,6 @@ nsRuleNode::ComputeSVGData(nsStyleStruct
     svg->mFillRule = SVGData.mFillRule.GetIntValue();
   }
   else if (eCSSUnit_Inherit == SVGData.mFillRule.GetUnit()) {
-    inherited = true;
     svg->mFillRule = parentSVG->mFillRule;
   }
   else if (eCSSUnit_Initial == SVGData.mFillRule.GetUnit()) {
@@ -4272,7 +4218,6 @@ nsRuleNode::ComputeSVGData(nsStyleStruct
              eCSSUnit_Initial == SVGData.mMarkerEnd.GetUnit()) {
     svg->mMarkerEnd = nullptr;
   } else if (eCSSUnit_Inherit == SVGData.mMarkerEnd.GetUnit()) {
-    inherited = true;
     svg->mMarkerEnd = parentSVG->mMarkerEnd;
   }
 
@@ -4283,7 +4228,6 @@ nsRuleNode::ComputeSVGData(nsStyleStruct
              eCSSUnit_Initial == SVGData.mMarkerMid.GetUnit()) {
     svg->mMarkerMid = nullptr;
   } else if (eCSSUnit_Inherit == SVGData.mMarkerMid.GetUnit()) {
-    inherited = true;
     svg->mMarkerMid = parentSVG->mMarkerMid;
   }
 
@@ -4294,7 +4238,6 @@ nsRuleNode::ComputeSVGData(nsStyleStruct
              eCSSUnit_Initial == SVGData.mMarkerStart.GetUnit()) {
     svg->mMarkerStart = nullptr;
   } else if (eCSSUnit_Inherit == SVGData.mMarkerStart.GetUnit()) {
-    inherited = true;
     svg->mMarkerStart = parentSVG->mMarkerStart;
   }
 
@@ -4304,7 +4247,6 @@ nsRuleNode::ComputeSVGData(nsStyleStruct
   } else if (eCSSUnit_None == SVGData.mPointerEvents.GetUnit()) {
     svg->mPointerEvents = NS_STYLE_POINTER_EVENTS_NONE;
   } else if (eCSSUnit_Inherit == SVGData.mPointerEvents.GetUnit()) {
-    inherited = true;
     svg->mPointerEvents = parentSVG->mPointerEvents;
   } else if (eCSSUnit_Initial == SVGData.mPointerEvents.GetUnit()) {
     svg->mPointerEvents = NS_STYLE_POINTER_EVENTS_VISIBLEPAINTED;
@@ -4319,7 +4261,6 @@ nsRuleNode::ComputeSVGData(nsStyleStruct
     svg->mShapeRendering = NS_STYLE_SHAPE_RENDERING_AUTO;
   }
   else if (eCSSUnit_Inherit == SVGData.mShapeRendering.GetUnit()) {
-    inherited = true;
     svg->mShapeRendering = parentSVG->mShapeRendering;
   }
 
@@ -4332,8 +4273,8 @@ nsRuleNode::ComputeSVGData(nsStyleStruct
   if (list) {
     if (eCSSUnit_Inherit == list->mValue.GetUnit()) {
       // only do the copy if weren't already set up by the copy constructor
+      // XXXldb BOGUS!  BREAKS aStartStruct handling!
       if (!svg->mStrokeDasharray) {
-        inherited = true;
         svg->mStrokeDasharrayLength = parentSVG->mStrokeDasharrayLength;
         if (svg->mStrokeDasharrayLength) {
           svg->mStrokeDasharray = new nsStyleCoord[svg->mStrokeDasharrayLength];
@@ -4390,7 +4331,6 @@ nsRuleNode::ComputeSVGData(nsStyleStruct
     svg->mStrokeLinecap = SVGData.mStrokeLinecap.GetIntValue();
   }
   else if (eCSSUnit_Inherit == SVGData.mStrokeLinecap.GetUnit()) {
-    inherited = true;
     svg->mStrokeLinecap = parentSVG->mStrokeLinecap;
   }
   else if (eCSSUnit_Initial == SVGData.mStrokeLinecap.GetUnit()) {
@@ -4402,7 +4342,6 @@ nsRuleNode::ComputeSVGData(nsStyleStruct
     svg->mStrokeLinejoin = SVGData.mStrokeLinejoin.GetIntValue();
   }
   else if (eCSSUnit_Inherit == SVGData.mStrokeLinejoin.GetUnit()) {
-    inherited = true;
     svg->mStrokeLinejoin = parentSVG->mStrokeLinejoin;
   }
   else if (eCSSUnit_Initial == SVGData.mStrokeLinejoin.GetUnit()) {
@@ -4415,7 +4354,6 @@ nsRuleNode::ComputeSVGData(nsStyleStruct
   }
   else if (eCSSUnit_Inherit == SVGData.mStrokeMiterlimit.GetUnit()) {
     svg->mStrokeMiterlimit = parentSVG->mStrokeMiterlimit;
-    inherited = true;
   }
   else if (eCSSUnit_Initial == SVGData.mStrokeMiterlimit.GetUnit()) {
     svg->mStrokeMiterlimit = 4.0f;
@@ -4436,7 +4374,6 @@ nsRuleNode::ComputeSVGData(nsStyleStruct
     svg->mTextAnchor = SVGData.mTextAnchor.GetIntValue();
   }
   else if (eCSSUnit_Inherit == SVGData.mTextAnchor.GetUnit()) {
-    inherited = true;
     svg->mTextAnchor = parentSVG->mTextAnchor;
   }
   else if (eCSSUnit_Initial == SVGData.mTextAnchor.GetUnit()) {
@@ -4452,7 +4389,6 @@ nsRuleNode::ComputeSVGData(nsStyleStruct
     svg->mTextRendering = NS_STYLE_TEXT_RENDERING_AUTO;
   }
   else if (eCSSUnit_Inherit == SVGData.mTextRendering.GetUnit()) {
-    inherited = true;
     svg->mTextRendering = parentSVG->mTextRendering;
   }
 
@@ -4483,7 +4419,6 @@ nsRuleNode::ComputeSVGResetData(nsStyleS
              eCSSUnit_Initial == SVGData.mClipPath.GetUnit()) {
     svgReset->mClipPath = nullptr;
   } else if (eCSSUnit_Inherit == SVGData.mClipPath.GetUnit()) {
-    inherited = true;
     svgReset->mClipPath = parentSVGReset->mClipPath;
   }
 
@@ -4504,7 +4439,6 @@ nsRuleNode::ComputeSVGResetData(nsStyleS
     svgReset->mDominantBaseline = NS_STYLE_DOMINANT_BASELINE_AUTO;
   }
   else if (eCSSUnit_Inherit == SVGData.mDominantBaseline.GetUnit()) {
-    inherited = true;
     svgReset->mDominantBaseline = parentSVGReset->mDominantBaseline;
   }
 
@@ -4515,7 +4449,6 @@ nsRuleNode::ComputeSVGResetData(nsStyleS
              eCSSUnit_Initial == SVGData.mFilter.GetUnit()) {
     svgReset->mFilter = nullptr;
   } else if (eCSSUnit_Inherit == SVGData.mFilter.GetUnit()) {
-    inherited = true;
     svgReset->mFilter = parentSVGReset->mFilter;
   }
 
@@ -4526,7 +4459,6 @@ nsRuleNode::ComputeSVGResetData(nsStyleS
              eCSSUnit_Initial == SVGData.mMask.GetUnit()) {
     svgReset->mMask = nullptr;
   } else if (eCSSUnit_Inherit == SVGData.mMask.GetUnit()) {
-    inherited = true;
     svgReset->mMask = parentSVGReset->mMask;
   }
   
