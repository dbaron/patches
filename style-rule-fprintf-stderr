From: L. David Baron <dbaron@dbaron.org>
Convert style rule List methods to use fprintf_stderr.

diff --git a/dom/base/nsMappedAttributes.cpp b/dom/base/nsMappedAttributes.cpp
--- a/dom/base/nsMappedAttributes.cpp
+++ b/dom/base/nsMappedAttributes.cpp
@@ -187,25 +187,26 @@ nsMappedAttributes::MapRuleInfoInto(nsRu
 /* virtual */ void
 nsMappedAttributes::List(FILE* out, int32_t aIndent) const
 {
   nsAutoString buffer;
   uint32_t i;
 
   for (i = 0; i < mAttrCount; ++i) {
     int32_t indent;
-    for (indent = aIndent; indent > 0; --indent)
-      fputs("  ", out);
+    for (indent = aIndent; indent > 0; --indent) {
+      fprintf_stderr(out, "  ");
+    }
 
     Attrs()[i].mName.GetQualifiedName(buffer);
-    fputs(NS_LossyConvertUTF16toASCII(buffer).get(), out);
+    fprintf_stderr(out, NS_LossyConvertUTF16toASCII(buffer).get());
 
     Attrs()[i].mValue.ToString(buffer);
-    fputs(NS_LossyConvertUTF16toASCII(buffer).get(), out);
-    fputs("\n", out);
+    fprintf_stderr(out, NS_LossyConvertUTF16toASCII(buffer).get());
+    fprintf_stderr(out, "\n");
   }
 }
 #endif
 
 void
 nsMappedAttributes::RemoveAttrAt(uint32_t aPos, nsAttrValue& aValue)
 {
   Attrs()[aPos].mValue.SwapValueWith(aValue);
diff --git a/dom/html/HTMLBodyElement.cpp b/dom/html/HTMLBodyElement.cpp
--- a/dom/html/HTMLBodyElement.cpp
+++ b/dom/html/HTMLBodyElement.cpp
@@ -166,18 +166,20 @@ BodyRule::MapRuleInfoInto(nsRuleData* aD
     }
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 BodyRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
-  fputs("[body rule] {}\n", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
+  fprintf_stderr(out, "[body rule] {}\n");
 }
 #endif
 
 //----------------------------------------------------------------------
 
 HTMLBodyElement::~HTMLBodyElement()
 {
   if (mContentStyleRule) {
diff --git a/layout/style/AnimationCommon.cpp b/layout/style/AnimationCommon.cpp
--- a/layout/style/AnimationCommon.cpp
+++ b/layout/style/AnimationCommon.cpp
@@ -295,26 +295,29 @@ AnimValuesStyleRule::MapRuleInfoInto(nsR
     }
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 AnimValuesStyleRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
-  fputs("[anim values] { ", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
+  fprintf_stderr(out, "[anim values] { ");
   for (uint32_t i = 0, i_end = mPropertyValuePairs.Length(); i < i_end; ++i) {
     const PropertyValuePair &pair = mPropertyValuePairs[i];
     nsAutoString value;
     StyleAnimationValue::UncomputeValue(pair.mProperty, pair.mValue, value);
-    fprintf(out, "%s: %s; ", nsCSSProps::GetStringValue(pair.mProperty).get(),
-                             NS_ConvertUTF16toUTF8(value).get());
+    fprintf_stderr(out, "%s: %s; ",
+                   nsCSSProps::GetStringValue(pair.mProperty).get(),
+                   NS_ConvertUTF16toUTF8(value).get());
   }
-  fputs("}\n", out);
+  fprintf_stderr(out, "}\n");
 }
 #endif
 
 } /* end sub-namespace css */
 
 bool
 AnimationPlayerCollection::CanAnimatePropertyOnCompositor(
   const dom::Element *aElement,
diff --git a/layout/style/CSSStyleSheet.cpp b/layout/style/CSSStyleSheet.cpp
--- a/layout/style/CSSStyleSheet.cpp
+++ b/layout/style/CSSStyleSheet.cpp
@@ -1547,40 +1547,42 @@ struct ListEnumData {
 
 /* virtual */ void
 CSSStyleSheet::List(FILE* out, int32_t aIndent) const
 {
 
   int32_t index;
 
   // Indent
-  for (index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (index = aIndent; --index >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
 
-  fputs("CSS Style Sheet: ", out);
+  fprintf_stderr(out, "CSS Style Sheet: ");
   nsAutoCString urlSpec;
   nsresult rv = mInner->mSheetURI->GetSpec(urlSpec);
   if (NS_SUCCEEDED(rv) && !urlSpec.IsEmpty()) {
-    fputs(urlSpec.get(), out);
+    fprintf_stderr(out, urlSpec.get());
   }
 
   if (mMedia) {
-    fputs(" media: ", out);
+    fprintf_stderr(out, " media: ");
     nsAutoString  buffer;
     mMedia->GetText(buffer);
-    fputs(NS_ConvertUTF16toUTF8(buffer).get(), out);
+    fprintf_stderr(out, NS_ConvertUTF16toUTF8(buffer).get());
   }
-  fputs("\n", out);
+  fprintf_stderr(out, "\n");
 
   for (const CSSStyleSheet* child = mInner->mFirstChild;
        child;
        child = child->mNext) {
     child->List(out, aIndent + 1);
   }
 
-  fputs("Rules in source order:\n", out);
+  fprintf_stderr(out, "Rules in source order:\n");
   ListRules(mInner->mOrderedRules, out, aIndent);
 }
 #endif
 
 void 
 CSSStyleSheet::ClearRuleCascades()
 {
   if (mRuleProcessors) {
diff --git a/layout/style/Declaration.cpp b/layout/style/Declaration.cpp
--- a/layout/style/Declaration.cpp
+++ b/layout/style/Declaration.cpp
@@ -1399,23 +1399,25 @@ Declaration::ToString(nsAString& aString
     aString.Truncate(aString.Length() - 1);
   }
 }
 
 #ifdef DEBUG
 void
 Declaration::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
 
-  fputs("{ ", out);
+  fprintf_stderr(out, "{ ");
   nsAutoString s;
   ToString(s);
-  fputs(NS_ConvertUTF16toUTF8(s).get(), out);
-  fputs("}", out);
+  fprintf_stderr(out, NS_ConvertUTF16toUTF8(s).get());
+  fprintf_stderr(out, "}");
 }
 #endif
 
 bool
 Declaration::GetNthProperty(uint32_t aIndex, nsAString& aReturn) const
 {
   aReturn.Truncate();
   if (aIndex < mOrder.Length()) {
diff --git a/layout/style/StyleRule.cpp b/layout/style/StyleRule.cpp
--- a/layout/style/StyleRule.cpp
+++ b/layout/style/StyleRule.cpp
@@ -973,20 +973,22 @@ ImportantRule::MapRuleInfoInto(nsRuleDat
   mDeclaration->MapImportantRuleInfoInto(aRuleData);
 }
 
 #ifdef DEBUG
 /* virtual */ void
 ImportantRule::List(FILE* out, int32_t aIndent) const
 {
   // Indent
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
 
-  fprintf(out, "! Important declaration=%p\n",
-          static_cast<void*>(mDeclaration));
+  fprintf_stderr(out, "! Important declaration=%p\n",
+                 static_cast<void*>(mDeclaration));
 }
 #endif
 
 } // namespace css
 } // namespace mozilla
 
 // --------------------------------------------------------
 
@@ -1467,31 +1469,31 @@ StyleRule::MapRuleInfoInto(nsRuleData* a
   mDeclaration->MapNormalRuleInfoInto(aRuleData);
 }
 
 #ifdef DEBUG
 /* virtual */ void
 StyleRule::List(FILE* out, int32_t aIndent) const
 {
   // Indent
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (int32_t index = aIndent; --index >= 0; ) fprintf_stderr(out, "  ");
 
   nsAutoString buffer;
   if (mSelector)
     mSelector->ToString(buffer, GetStyleSheet());
 
   buffer.Append(' ');
-  fputs(NS_LossyConvertUTF16toASCII(buffer).get(), out);
+  fprintf_stderr(out, NS_LossyConvertUTF16toASCII(buffer).get());
   if (nullptr != mDeclaration) {
     mDeclaration->List(out);
   }
   else {
-    fputs("{ null declaration }", out);
+    fprintf_stderr(out, "{ null declaration }");
   }
-  fputs("\n", out);
+  fprintf_stderr(out, "\n");
 }
 #endif
 
 void
 StyleRule::GetCssText(nsAString& aCssText)
 {
   if (mSelector) {
     mSelector->ToString(aCssText, GetStyleSheet());
diff --git a/layout/style/nsCSSRules.cpp b/layout/style/nsCSSRules.cpp
--- a/layout/style/nsCSSRules.cpp
+++ b/layout/style/nsCSSRules.cpp
@@ -235,21 +235,23 @@ NS_INTERFACE_MAP_END
 
 IMPL_STYLE_RULE_INHERIT(CharsetRule, Rule)
 
 #ifdef DEBUG
 /* virtual */ void
 CharsetRule::List(FILE* out, int32_t aIndent) const
 {
   // Indent
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
-
-  fputs("@charset \"", out);
-  fputs(NS_LossyConvertUTF16toASCII(mEncoding).get(), out);
-  fputs("\"\n", out);
+  for (int32_t indent = aIndent; --indent >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
+
+  fprintf_stderr(out, "@charset \"");
+  fprintf_stderr(out, NS_LossyConvertUTF16toASCII(mEncoding).get());
+  fprintf_stderr(out, "\"\n");
 }
 #endif
 
 /* virtual */ int32_t
 CharsetRule::GetType() const
 {
   return Rule::CHARSET_RULE;
 }
@@ -378,26 +380,28 @@ NS_INTERFACE_MAP_END
 
 IMPL_STYLE_RULE_INHERIT(ImportRule, Rule)
 
 #ifdef DEBUG
 /* virtual */ void
 ImportRule::List(FILE* out, int32_t aIndent) const
 {
   // Indent
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
-
-  fputs("@import \"", out);
-  fputs(NS_LossyConvertUTF16toASCII(mURLSpec).get(), out);
-  fputs("\" ", out);
+  for (int32_t indent = aIndent; --indent >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
+
+  fprintf_stderr(out, "@import \"");
+  fprintf_stderr(out, NS_LossyConvertUTF16toASCII(mURLSpec).get());
+  fprintf_stderr(out, "\" ");
 
   nsAutoString mediaText;
   mMedia->GetText(mediaText);
-  fputs(NS_LossyConvertUTF16toASCII(mediaText).get(), out);
-  fputs("\n", out);
+  fprintf_stderr(out, NS_LossyConvertUTF16toASCII(mediaText).get());
+  fprintf_stderr(out, "\n");
 }
 #endif
 
 /* virtual */ int32_t
 ImportRule::GetType() const
 {
   return Rule::IMPORT_RULE;
 }
@@ -597,24 +601,24 @@ GroupRule::SetStyleSheet(CSSStyleSheet* 
     Rule::SetStyleSheet(aSheet);
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 GroupRule::List(FILE* out, int32_t aIndent) const
 {
-  fputs(" {\n", out);
+  fprintf_stderr(out, " {\n");
 
   for (int32_t index = 0, count = mRules.Count(); index < count; ++index) {
     mRules.ObjectAt(index)->List(out, aIndent + 1);
   }
 
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
-  fputs("}\n", out);
+  for (int32_t indent = aIndent; --indent >= 0; ) fprintf_stderr(out, "  ");
+  fprintf_stderr(out, "}\n");
 }
 #endif
 
 void
 GroupRule::AppendStyleRule(Rule* aRule)
 {
   mRules.AppendObject(aRule);
   CSSStyleSheet* sheet = GetStyleSheet();
@@ -804,26 +808,28 @@ MediaRule::SetStyleSheet(CSSStyleSheet* 
 
   GroupRule::SetStyleSheet(aSheet);
 }
 
 #ifdef DEBUG
 /* virtual */ void
 MediaRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
+  for (int32_t indent = aIndent; --indent >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
 
   nsAutoString  buffer;
 
-  fputs("@media ", out);
+  fprintf_stderr(out, "@media ");
 
   if (mMedia) {
     nsAutoString mediaText;
     mMedia->GetText(mediaText);
-    fputs(NS_LossyConvertUTF16toASCII(mediaText).get(), out);
+    fprintf_stderr(out, NS_LossyConvertUTF16toASCII(mediaText).get());
   }
 
   GroupRule::List(out, aIndent);
 }
 #endif
 
 /* virtual */ int32_t
 MediaRule::GetType() const
@@ -1003,17 +1009,19 @@ NS_INTERFACE_MAP_BEGIN(DocumentRule)
   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIStyleRule)
   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(CSSMozDocumentRule)
 NS_INTERFACE_MAP_END_INHERITING(GroupRule)
 
 #ifdef DEBUG
 /* virtual */ void
 DocumentRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
+  for (int32_t indent = aIndent; --indent >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
 
   nsAutoCString str;
   str.AssignLiteral("@-moz-document ");
   for (URL *url = mURLs; url; url = url->next) {
     switch (url->func) {
       case eURL:
         str.AppendLiteral("url(\"");
         break;
@@ -1028,17 +1036,17 @@ DocumentRule::List(FILE* out, int32_t aI
         break;
     }
     nsAutoCString escapedURL(url->url);
     escapedURL.ReplaceSubstring("\"", "\\\""); // escape quotes
     str.Append(escapedURL);
     str.AppendLiteral("\"), ");
   }
   str.Cut(str.Length() - 2, 1); // remove last ,
-  fputs(str.get(), out);
+  fprintf_stderr(out, str.get());
 
   GroupRule::List(out, aIndent);
 }
 #endif
 
 /* virtual */ int32_t
 DocumentRule::GetType() const
 {
@@ -1260,31 +1268,33 @@ NS_INTERFACE_MAP_BEGIN(NameSpaceRule)
 NS_INTERFACE_MAP_END
 
 IMPL_STYLE_RULE_INHERIT(NameSpaceRule, Rule)
 
 #ifdef DEBUG
 /* virtual */ void
 NameSpaceRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
+  for (int32_t indent = aIndent; --indent >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
 
   nsAutoString  buffer;
 
-  fputs("@namespace ", out);
+  fprintf_stderr(out, "@namespace ");
 
   if (mPrefix) {
     mPrefix->ToString(buffer);
-    fputs(NS_LossyConvertUTF16toASCII(buffer).get(), out);
-    fputs(" ", out);
+    fprintf_stderr(out, NS_LossyConvertUTF16toASCII(buffer).get());
+    fprintf_stderr(out, " ");
   }
 
-  fputs("url(", out);
-  fputs(NS_LossyConvertUTF16toASCII(mURLSpec).get(), out);
-  fputs(")\n", out);
+  fprintf_stderr(out, "url(");
+  fprintf_stderr(out, NS_LossyConvertUTF16toASCII(mURLSpec).get());
+  fprintf_stderr(out, ")\n");
 }
 #endif
 
 /* virtual */ int32_t
 NameSpaceRule::GetType() const
 {
   return Rule::NAMESPACE_RULE;
 }
@@ -1718,30 +1728,30 @@ nsCSSFontFaceRule::List(FILE* out, int32
   for (int32_t indent = aIndent; --indent >= 0; ) {
     baseInd.AppendLiteral("  ");
     descInd.AppendLiteral("  ");
   }
   descInd.AppendLiteral("  ");
 
   nsString descStr;
 
-  fprintf(out, "%s@font-face {\n", baseInd.get());
+  fprintf_stderr(out, "%s@font-face {\n", baseInd.get());
   for (nsCSSFontDesc id = nsCSSFontDesc(eCSSFontDesc_UNKNOWN + 1);
        id < eCSSFontDesc_COUNT;
        id = nsCSSFontDesc(id + 1))
     if (mDecl.mDescriptors.Get(id).GetUnit() != eCSSUnit_Null) {
       if (NS_FAILED(mDecl.GetPropertyValue(id, descStr)))
         descStr.AssignLiteral("#<serialization error>");
       else if (descStr.Length() == 0)
         descStr.AssignLiteral("#<serialization missing>");
-      fprintf(out, "%s%s: %s\n",
-              descInd.get(), nsCSSProps::GetStringValue(id).get(),
-              NS_ConvertUTF16toUTF8(descStr).get());
+      fprintf_stderr(out, "%s%s: %s\n",
+                     descInd.get(), nsCSSProps::GetStringValue(id).get(),
+                     NS_ConvertUTF16toUTF8(descStr).get());
     }
-  fprintf(out, "%s}\n", baseInd.get());
+  fprintf_stderr(out, "%s}\n", baseInd.get());
 }
 #endif
 
 /* virtual */ int32_t
 nsCSSFontFaceRule::GetType() const
 {
   return Rule::FONT_FACE_RULE;
 }
@@ -1924,18 +1934,20 @@ nsCSSFontFeatureValuesRule::List(FILE* o
   for (i = 1; i < (aIndent + 1) * 2 - 1; i++) {
     indent[i] = 0x20;
   }
   indent[0] = 0xa;
   indent[aIndent * 2 + 1] = 0;
   utf8.ReplaceSubstring("\n", indent);
   delete [] indent;
 
-  for (i = aIndent; --i >= 0; ) fputs("  ", out);
-  fprintf(out, "%s\n", utf8.get());
+  for (i = aIndent; --i >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
+  fprintf_stderr(out, "%s\n", utf8.get());
 }
 #endif
 
 /* virtual */ int32_t
 nsCSSFontFeatureValuesRule::GetType() const
 {
   return Rule::FONT_FEATURE_VALUES_RULE;
 }
@@ -2200,24 +2212,26 @@ nsCSSKeyframeRule::MapRuleInfoInto(nsRul
 
   mDeclaration->MapNormalRuleInfoInto(aRuleData);
 }
 
 #ifdef DEBUG
 void
 nsCSSKeyframeRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
 
   nsAutoString tmp;
   DoGetKeyText(tmp);
-  fputs(NS_ConvertUTF16toUTF8(tmp).get(), out);
-  fputs(" ", out);
+  fprintf_stderr(out, NS_ConvertUTF16toUTF8(tmp).get());
+  fprintf_stderr(out, " ");
   mDeclaration->List(out, aIndent);
-  fputs("\n", out);
+  fprintf_stderr(out, "\n");
 }
 #endif
 
 /* virtual */ int32_t
 nsCSSKeyframeRule::GetType() const
 {
   return Rule::KEYFRAME_RULE;
 }
@@ -2402,19 +2416,21 @@ NS_INTERFACE_MAP_BEGIN(nsCSSKeyframesRul
   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIStyleRule)
   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(MozCSSKeyframesRule)
 NS_INTERFACE_MAP_END_INHERITING(GroupRule)
 
 #ifdef DEBUG
 void
 nsCSSKeyframesRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
-
-  fprintf(out, "@keyframes %s", NS_ConvertUTF16toUTF8(mName).get());
+  for (int32_t indent = aIndent; --indent >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
+
+  fprintf_stderr(out, "@keyframes %s", NS_ConvertUTF16toUTF8(mName).get());
   GroupRule::List(out, aIndent);
 }
 #endif
 
 /* virtual */ int32_t
 nsCSSKeyframesRule::GetType() const
 {
   return Rule::KEYFRAMES_RULE;
@@ -2735,21 +2751,23 @@ NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(
 NS_INTERFACE_MAP_END
 
 IMPL_STYLE_RULE_INHERIT_GET_DOM_RULE_WEAK(nsCSSPageRule, Rule)
 
 #ifdef DEBUG
 void
 nsCSSPageRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
-
-  fputs("@page ", out);
+  for (int32_t indent = aIndent; --indent >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
+
+  fprintf_stderr(out, "@page ");
   mDeclaration->List(out, aIndent);
-  fputs("\n", out);
+  fprintf_stderr(out, "\n");
 }
 #endif
 
 /* virtual */ int32_t
 nsCSSPageRule::GetType() const
 {
   return Rule::PAGE_RULE;
 }
@@ -2868,20 +2886,22 @@ CSSSupportsRule::CSSSupportsRule(const C
     mCondition(aCopy.mCondition)
 {
 }
 
 #ifdef DEBUG
 /* virtual */ void
 CSSSupportsRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
-
-  fputs("@supports ", out);
-  fputs(NS_ConvertUTF16toUTF8(mCondition).get(), out);
+  for (int32_t indent = aIndent; --indent >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
+
+  fprintf_stderr(out, "@supports ");
+  fprintf_stderr(out, NS_ConvertUTF16toUTF8(mCondition).get());
   css::GroupRule::List(out, aIndent);
 }
 #endif
 
 /* virtual */ int32_t
 CSSSupportsRule::GetType() const
 {
   return Rule::SUPPORTS_RULE;
@@ -3052,20 +3072,21 @@ nsCSSCounterStyleRule::List(FILE* out, i
 {
   nsCString baseInd, descInd;
   for (int32_t indent = aIndent; --indent >= 0; ) {
     baseInd.AppendLiteral("  ");
   }
   descInd = baseInd;
   descInd.AppendLiteral("  ");
 
-  fprintf(out, "%s@counter-style %s (rev.%u) {\n",
-          baseInd.get(), NS_ConvertUTF16toUTF8(mName).get(), mGeneration);
+  fprintf_stderr(out, "%s@counter-style %s (rev.%u) {\n",
+                 baseInd.get(), NS_ConvertUTF16toUTF8(mName).get(),
+                 mGeneration);
   // TODO
-  fprintf(out, "%s}\n", baseInd.get());
+  fprintf_stderr(out, "%s}\n", baseInd.get());
 }
 #endif
 
 /* virtual */ int32_t
 nsCSSCounterStyleRule::GetType() const
 {
   return Rule::COUNTER_STYLE_RULE;
 }
diff --git a/layout/style/nsHTMLStyleSheet.cpp b/layout/style/nsHTMLStyleSheet.cpp
--- a/layout/style/nsHTMLStyleSheet.cpp
+++ b/layout/style/nsHTMLStyleSheet.cpp
@@ -50,30 +50,34 @@ nsHTMLStyleSheet::HTMLColorRule::MapRule
       color->SetColorValue(mColor);
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 nsHTMLStyleSheet::HTMLColorRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
-  fputs("[html color rule] {}\n", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
+  fprintf_stderr(out, "[html color rule] {}\n");
 }
 #endif
 
  
 NS_IMPL_ISUPPORTS(nsHTMLStyleSheet::GenericTableRule, nsIStyleRule)
 
 #ifdef DEBUG
 /* virtual */ void
 nsHTMLStyleSheet::GenericTableRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
-  fputs("[generic table rule] {}\n", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
+  fprintf_stderr(out, "[generic table rule] {}\n");
 }
 #endif
 
 /* virtual */ void
 nsHTMLStyleSheet::TableTHRule::MapRuleInfoInto(nsRuleData* aRuleData)
 {
   if (aRuleData->mSIDs & NS_STYLE_INHERIT_BIT(Text)) {
     nsCSSValue* textAlign = aRuleData->ValueForTextAlign();
@@ -110,20 +114,22 @@ nsHTMLStyleSheet::LangRule::MapRuleInfoI
     }
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 nsHTMLStyleSheet::LangRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
-  fputs("[lang rule] { language: \"", out);
-  fputs(NS_ConvertUTF16toUTF8(mLang).get(), out);
-  fputs("\" }\n", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
+  fprintf_stderr(out, "[lang rule] { language: \"");
+  fprintf_stderr(out, NS_ConvertUTF16toUTF8(mLang).get());
+  fprintf_stderr(out, "\" }\n");
 }
 #endif
 
 // -----------------------------------------------------------
 
 struct MappedAttrTableEntry : public PLDHashEntryHdr {
   nsMappedAttributes *mAttributes;
 };
diff --git a/layout/style/nsStyleContext.cpp b/layout/style/nsStyleContext.cpp
--- a/layout/style/nsStyleContext.cpp
+++ b/layout/style/nsStyleContext.cpp
@@ -845,41 +845,43 @@ nsStyleContext::Mark()
   }
 }
 
 #ifdef DEBUG
 void nsStyleContext::List(FILE* out, int32_t aIndent)
 {
   // Indent
   int32_t ix;
-  for (ix = aIndent; --ix >= 0; ) fputs("  ", out);
-  fprintf(out, "%p(%d) parent=%p ",
-          (void*)this, mRefCnt, (void *)mParent);
+  for (ix = aIndent; --ix >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
+  fprintf_stderr(out, "%p(%d) parent=%p ",
+                 (void*)this, mRefCnt, (void *)mParent);
   if (mPseudoTag) {
     nsAutoString  buffer;
     mPseudoTag->ToString(buffer);
-    fputs(NS_LossyConvertUTF16toASCII(buffer).get(), out);
-    fputs(" ", out);
+    fprintf_stderr(out, NS_LossyConvertUTF16toASCII(buffer).get());
+    fprintf_stderr(out, " ");
   }
 
   if (mRuleNode) {
-    fputs("{\n", out);
+    fprintf_stderr(out, "{\n");
     nsRuleNode* ruleNode = mRuleNode;
     while (ruleNode) {
       nsIStyleRule *styleRule = ruleNode->GetRule();
       if (styleRule) {
         styleRule->List(out, aIndent + 1);
       }
       ruleNode = ruleNode->GetParent();
     }
-    for (ix = aIndent; --ix >= 0; ) fputs("  ", out);
-    fputs("}\n", out);
+    for (ix = aIndent; --ix >= 0; ) fprintf_stderr(out, "  ");
+    fprintf_stderr(out, "}\n");
   }
   else {
-    fputs("{}\n", out);
+    fprintf_stderr(out, "{}\n");
   }
 
   if (nullptr != mChild) {
     nsStyleContext* child = mChild;
     do {
       child->List(out, aIndent + 1);
       child = child->mNextSibling;
     } while (mChild != child);
diff --git a/layout/style/nsStyleSet.cpp b/layout/style/nsStyleSet.cpp
--- a/layout/style/nsStyleSet.cpp
+++ b/layout/style/nsStyleSet.cpp
@@ -48,18 +48,20 @@ NS_IMPL_ISUPPORTS(nsEmptyStyleRule, nsIS
 nsEmptyStyleRule::MapRuleInfoInto(nsRuleData* aRuleData)
 {
 }
 
 #ifdef DEBUG
 /* virtual */ void
 nsEmptyStyleRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
-  fputs("[empty style rule] {}\n", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
+  fprintf_stderr(out, "[empty style rule] {}\n");
 }
 #endif
 
 NS_IMPL_ISUPPORTS(nsInitialStyleRule, nsIStyleRule)
 
 /* virtual */ void
 nsInitialStyleRule::MapRuleInfoInto(nsRuleData* aRuleData)
 {
@@ -98,18 +100,20 @@ nsInitialStyleRule::MapRuleInfoInto(nsRu
     }
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 nsInitialStyleRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
-  fputs("[initial style rule] {}\n", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
+  fprintf_stderr(out, "[initial style rule] {}\n");
 }
 #endif
 
 NS_IMPL_ISUPPORTS(nsDisableTextZoomStyleRule, nsIStyleRule)
 
 /* virtual */ void
 nsDisableTextZoomStyleRule::MapRuleInfoInto(nsRuleData* aRuleData)
 {
@@ -120,18 +124,20 @@ nsDisableTextZoomStyleRule::MapRuleInfoI
   if (value->GetUnit() == eCSSUnit_Null)
     value->SetNoneValue();
 }
 
 #ifdef DEBUG
 /* virtual */ void
 nsDisableTextZoomStyleRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
-  fputs("[disable text zoom style rule] {}\n", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fprintf_stderr(out, "  ");
+  }
+  fprintf_stderr(out, "[disable text zoom style rule] {}\n");
 }
 #endif
 
 static const nsStyleSet::sheetType gCSSSheetTypes[] = {
   // From lowest to highest in cascading order.
   nsStyleSet::eAgentSheet,
   nsStyleSet::eUserSheet,
   nsStyleSet::eDocSheet,
