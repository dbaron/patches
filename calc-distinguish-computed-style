From: L. David Baron <dbaron@dbaron.org>

Distinguish between 50% and calc(50%), etc., in computed style calc expressions.

diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -505,16 +505,24 @@ struct SpecifiedToComputedCalcOps : publ
 static void
 SpecifiedCalcToComputedCalc(const nsCSSValue& aValue, nsStyleCoord& aCoord, 
                             nsStyleContext* aStyleContext,
                             PRBool& aCanStoreInRuleTree)
 {
   SpecifiedToComputedCalcOps ops(aStyleContext, aStyleContext->PresContext(),
                                  aCanStoreInRuleTree);
   aCoord = ComputeCalc(aValue, ops);
+  if (!aCoord.IsCalcUnit()) {
+    // Some callers distinguish between calc(50%) and 50%, or calc(50px)
+    // and 50px.
+    nsStyleCoord::Array *array =
+      nsStyleCoord::Array::Create(aStyleContext, aCanStoreInRuleTree, 1);
+    array->Item(0) = aCoord;
+    aCoord.SetArrayValue(array, eStyleUnit_Calc);
+  }
 }
 
 struct ComputeComputedCalcCalcOps : public css::StyleCoordInputCalcOps,
                                     public css::BasicCoordCalcOps
 {
   const nscoord mPercentageBasis;
 
   ComputeComputedCalcCalcOps(nscoord aPercentageBasis)
diff --git a/layout/style/nsStyleCoord.h b/layout/style/nsStyleCoord.h
--- a/layout/style/nsStyleCoord.h
+++ b/layout/style/nsStyleCoord.h
@@ -55,22 +55,22 @@ enum nsStyleUnit {
   eStyleUnit_Percent      = 10,     // (float) 1.0 == 100%
   eStyleUnit_Factor       = 11,     // (float) a multiplier
   eStyleUnit_Degree       = 12,     // (float) angle in degrees
   eStyleUnit_Grad         = 13,     // (float) angle in grads
   eStyleUnit_Radian       = 14,     // (float) angle in radians
   eStyleUnit_Coord        = 20,     // (nscoord) value is twips
   eStyleUnit_Integer      = 30,     // (int) value is simple integer
   eStyleUnit_Enumerated   = 32,     // (int) value has enumerated meaning
-  // The following are all of the eCSSUnit_Calc_* types (but not
-  // eCSSUnit_Calc itself, since we don't need to distinguish
-  // calc(min()) from min() in compute dstyle).  They are all weak
+  // The following are all of the eCSSUnit_Calc_* types.  They are weak
   // pointers to a calc tree allocated by nsStyleContext::Alloc.
   // NOTE:  They are in the same order as the eCSSUnit_Calc_* values so
   // that converting between the two sets is just addition/subtraction.
+  eStyleUnit_Calc         = 39,     // (Array*) calc() toplevel, to
+                                    // distinguish 50% from calc(50%), etc.
   eStyleUnit_Calc_Plus    = 40,     // (Array*) + node within calc()
   eStyleUnit_Calc_Minus   = 41,     // (Array*) - within calc
   eStyleUnit_Calc_Times_L = 42,     // (Array*) num * val within calc
   eStyleUnit_Calc_Times_R = 43,     // (Array*) val * num within calc
   eStyleUnit_Calc_Divided = 44,     // (Array*) / within calc
   eStyleUnit_Calc_Minimum = 45,     // (Array*) min() within calc
   eStyleUnit_Calc_Maximum = 46      // (Array*) max() within calc
 };
