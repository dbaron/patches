Pass the user font set through more reliably and make it a required parameter.  (Bug 467084)

diff --git a/gfx/public/nsIDeviceContext.h b/gfx/public/nsIDeviceContext.h
--- a/gfx/public/nsIDeviceContext.h
+++ b/gfx/public/nsIDeviceContext.h
@@ -330,29 +330,29 @@ public:
    * an nsFont.
    * @param aFont font description to obtain metrics for
    * @param aLangGroup the language group of the document
    * @param aMetrics out parameter for font metrics
    * @param aUserFontSet user font set
    * @return error status
    */
   NS_IMETHOD  GetMetricsFor(const nsFont& aFont, nsIAtom* aLangGroup,
-                            nsIFontMetrics*& aMetrics, 
-                            gfxUserFontSet *aUserFontSet = nsnull) = 0;
+                            gfxUserFontSet *aUserFontSet,
+                            nsIFontMetrics*& aMetrics) = 0;
 
   /**
    * Get the nsIFontMetrics that describe the properties of
    * an nsFont.
    * @param aFont font description to obtain metrics for
    * @param aMetrics out parameter for font metrics
    * @param aUserFontSet user font set
    * @return error status
    */
-  NS_IMETHOD  GetMetricsFor(const nsFont& aFont, nsIFontMetrics*& aMetrics, 
-                            gfxUserFontSet *aUserFontSet = nsnull) = 0;
+  NS_IMETHOD  GetMetricsFor(const nsFont& aFont, gfxUserFontSet *aUserFontSet,
+                            nsIFontMetrics*& aMetrics) = 0;
 
   /**
    * Check to see if a particular named font exists.
    * @param aFontName character string of font face name
    * @return NS_OK if font is available, else font is unavailable
    */
   NS_IMETHOD CheckFontExistence(const nsString& aFaceName) = 0;
   NS_IMETHOD FirstExistingFont(const nsFont& aFont, nsString& aFaceName) = 0;
diff --git a/gfx/public/nsIRenderingContext.h b/gfx/public/nsIRenderingContext.h
--- a/gfx/public/nsIRenderingContext.h
+++ b/gfx/public/nsIRenderingContext.h
@@ -55,16 +55,17 @@ class nsTransform2D;
 class nsTransform2D;
 class nsString;
 class nsIDeviceContext;
 class nsIRegion;
 class nsIAtom;
 
 struct nsFont;
 struct nsTextDimensions;
+class gfxUserFontSet;
 #ifdef MOZ_MATHML
 struct nsBoundingMetrics;
 #endif
 
 class gfxASurface;
 class gfxContext;
 
 /* gfx2 */
@@ -197,17 +198,18 @@ public:
    * @return The current forground color of the RenderingContext
    */
   NS_IMETHOD GetColor(nscolor &aColor) const = 0;
 
   /**
    * Sets the font for the RenderingContext
    * @param aFont The font to use in the RenderingContext
    */
-  NS_IMETHOD SetFont(const nsFont& aFont, nsIAtom* aLangGroup) = 0;
+  NS_IMETHOD SetFont(const nsFont& aFont, nsIAtom* aLangGroup,
+                     gfxUserFontSet *aUserFontSet) = 0;
 
   /**
    * Sets the font for the RenderingContext
    * @param aFontMetric The font metrics representing the
    *        font to use in the RenderingContext
    */
   NS_IMETHOD SetFont(nsIFontMetrics *aFontMetrics) = 0;
 
diff --git a/gfx/src/nsDeviceContext.cpp b/gfx/src/nsDeviceContext.cpp
--- a/gfx/src/nsDeviceContext.cpp
+++ b/gfx/src/nsDeviceContext.cpp
@@ -210,17 +210,17 @@ DeviceContextImpl::GetLocaleLangGroup(vo
     }
     if (!mLocaleLangGroup) {
       mLocaleLangGroup = do_GetAtom("x-western");
     }
   }
 }
 
 NS_IMETHODIMP DeviceContextImpl::GetMetricsFor(const nsFont& aFont,
-  nsIAtom* aLangGroup, nsIFontMetrics*& aMetrics, gfxUserFontSet *aUserFontSet)
+  nsIAtom* aLangGroup, gfxUserFontSet *aUserFontSet, nsIFontMetrics*& aMetrics)
 {
   if (nsnull == mFontCache) {
     nsresult  rv = CreateFontCache();
     if (NS_FAILED(rv)) {
       aMetrics = nsnull;
       return rv;
     }
     // XXX temporary fix for performance problem -- erik
@@ -231,18 +231,18 @@ NS_IMETHODIMP DeviceContextImpl::GetMetr
   if (!aLangGroup) {
     aLangGroup = mLocaleLangGroup;
   }
 
   return mFontCache->GetMetricsFor(aFont, aLangGroup, aMetrics, aUserFontSet);
 }
 
 NS_IMETHODIMP DeviceContextImpl::GetMetricsFor(const nsFont& aFont, 
-                                               nsIFontMetrics*& aMetrics, 
-                                               gfxUserFontSet *aUserFontSet)
+                                               gfxUserFontSet *aUserFontSet,
+                                               nsIFontMetrics*& aMetrics)
 {
   if (nsnull == mFontCache) {
     nsresult  rv = CreateFontCache();
     if (NS_FAILED(rv)) {
       aMetrics = nsnull;
       return rv;
     }
     // XXX temporary fix for performance problem -- erik
diff --git a/gfx/src/thebes/nsThebesRenderingContext.cpp b/gfx/src/thebes/nsThebesRenderingContext.cpp
--- a/gfx/src/thebes/nsThebesRenderingContext.cpp
+++ b/gfx/src/thebes/nsThebesRenderingContext.cpp
@@ -778,22 +778,24 @@ nsThebesRenderingContext::GetRightToLeft
 
 void
 nsThebesRenderingContext::SetTextRunRTL(PRBool aIsRTL)
 {
 	mFontMetrics->SetTextRunRTL(aIsRTL);
 }
 
 NS_IMETHODIMP
-nsThebesRenderingContext::SetFont(const nsFont& aFont, nsIAtom* aLangGroup)
+nsThebesRenderingContext::SetFont(const nsFont& aFont, nsIAtom* aLangGroup,
+                                  gfxUserFontSet *aUserFontSet)
 {
     PR_LOG(gThebesGFXLog, PR_LOG_DEBUG, ("## %p nsTRC::SetFont %p\n", this, &aFont));
 
     nsCOMPtr<nsIFontMetrics> newMetrics;
-    mDeviceContext->GetMetricsFor(aFont, aLangGroup, *getter_AddRefs(newMetrics));
+    mDeviceContext->GetMetricsFor(aFont, aLangGroup, aUserFontSet,
+                                  *getter_AddRefs(newMetrics));
     mFontMetrics = reinterpret_cast<nsIThebesFontMetrics*>(newMetrics.get());
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsThebesRenderingContext::SetFont(nsIFontMetrics *aFontMetrics)
 {
     PR_LOG(gThebesGFXLog, PR_LOG_DEBUG, ("## %p nsTRC::SetFont[Metrics] %p\n", this, aFontMetrics));
diff --git a/gfx/src/thebes/nsThebesRenderingContext.h b/gfx/src/thebes/nsThebesRenderingContext.h
--- a/gfx/src/thebes/nsThebesRenderingContext.h
+++ b/gfx/src/thebes/nsThebesRenderingContext.h
@@ -74,17 +74,18 @@ public:
     NS_IMETHOD GetDeviceContext(nsIDeviceContext *& aDeviceContext);
     NS_IMETHOD PushState(void);
     NS_IMETHOD PopState(void);
     NS_IMETHOD SetClipRect(const nsRect& aRect, nsClipCombine aCombine);
     NS_IMETHOD SetLineStyle(nsLineStyle aLineStyle);
     NS_IMETHOD SetClipRegion(const nsIRegion& aRegion, nsClipCombine aCombine);
     NS_IMETHOD SetColor(nscolor aColor);
     NS_IMETHOD GetColor(nscolor &aColor) const;
-    NS_IMETHOD SetFont(const nsFont& aFont, nsIAtom* aLangGroup);
+    NS_IMETHOD SetFont(const nsFont& aFont, nsIAtom* aLangGroup,
+                       gfxUserFontSet *aUserFontSet);
     NS_IMETHOD SetFont(nsIFontMetrics *aFontMetrics);
     NS_IMETHOD GetFontMetrics(nsIFontMetrics *&aFontMetrics);
     NS_IMETHOD Translate(nscoord aX, nscoord aY);
     NS_IMETHOD Scale(float aSx, float aSy);
     NS_IMETHOD GetCurrentTransform(nsTransform2D *&aTransform);
 
     NS_IMETHOD DrawLine(nscoord aX0, nscoord aY0, nscoord aX1, nscoord aY1);
     NS_IMETHOD DrawRect(const nsRect& aRect);
