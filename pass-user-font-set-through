Pass the user font set through more reliably and make it a required parameter.  (Bug 467084)

diff --git a/gfx/public/nsDeviceContext.h b/gfx/public/nsDeviceContext.h
--- a/gfx/public/nsDeviceContext.h
+++ b/gfx/public/nsDeviceContext.h
@@ -56,17 +56,18 @@ class NS_GFX nsFontCache
 {
 public:
   nsFontCache();
   virtual ~nsFontCache();
 
   virtual nsresult Init(nsIDeviceContext* aContext);
   virtual nsresult GetDeviceContext(nsIDeviceContext *&aContext) const;
   virtual nsresult GetMetricsFor(const nsFont& aFont, nsIAtom* aLangGroup,
-                                 nsIFontMetrics *&aMetrics, gfxUserFontSet *aUserFontSet = nsnull);
+                                 gfxUserFontSet* aUserFontSet,
+                                 nsIFontMetrics *&aMetrics);
 
   nsresult   FontMetricsDeleted(const nsIFontMetrics* aFontMetrics);
   nsresult   Compact();
   nsresult   Flush();
   /* printer device context classes may create their own
    * subclasses of nsFontCache (and override this method) and override 
    * DeviceContextImpl::CreateFontCache (see bug 81311).
    */
@@ -95,19 +96,21 @@ public:
   NS_IMETHOD  Init(nsNativeWidget aWidget);
 
   NS_IMETHOD  CreateRenderingContext(nsIView *aView, nsIRenderingContext *&aContext);
   NS_IMETHOD  CreateRenderingContext(nsIWidget *aWidget, nsIRenderingContext *&aContext);
   NS_IMETHOD  CreateRenderingContext(nsIRenderingContext *&aContext){return NS_ERROR_NOT_IMPLEMENTED;}
   NS_IMETHOD  CreateRenderingContextInstance(nsIRenderingContext *&aContext);
 
   NS_IMETHOD  GetMetricsFor(const nsFont& aFont, nsIAtom* aLangGroup,
-                            nsIFontMetrics*& aMetrics, gfxUserFontSet *aUserFontSet = nsnull);
-  NS_IMETHOD  GetMetricsFor(const nsFont& aFont, nsIFontMetrics*& aMetrics, 
-                            gfxUserFontSet *aUserFontSet = nsnull);
+                            gfxUserFontSet* aUserFontSet,
+                            nsIFontMetrics*& aMetrics);
+  NS_IMETHOD  GetMetricsFor(const nsFont& aFont,
+                            gfxUserFontSet* aUserFontSet,
+                            nsIFontMetrics*& aMetrics);
 
   NS_IMETHOD FirstExistingFont(const nsFont& aFont, nsString& aFaceName);
 
   NS_IMETHOD GetLocalFontName(const nsString& aFaceName, nsString& aLocalName,
                               PRBool& aAliased);
 
   NS_IMETHOD CreateFontCache();
   NS_IMETHOD FontMetricsDeleted(const nsIFontMetrics* aFontMetrics);
diff --git a/gfx/public/nsIDeviceContext.h b/gfx/public/nsIDeviceContext.h
--- a/gfx/public/nsIDeviceContext.h
+++ b/gfx/public/nsIDeviceContext.h
@@ -330,29 +330,29 @@ public:
    * an nsFont.
    * @param aFont font description to obtain metrics for
    * @param aLangGroup the language group of the document
    * @param aMetrics out parameter for font metrics
    * @param aUserFontSet user font set
    * @return error status
    */
   NS_IMETHOD  GetMetricsFor(const nsFont& aFont, nsIAtom* aLangGroup,
-                            nsIFontMetrics*& aMetrics, 
-                            gfxUserFontSet *aUserFontSet = nsnull) = 0;
+                            gfxUserFontSet* aUserFontSet,
+                            nsIFontMetrics*& aMetrics) = 0;
 
   /**
    * Get the nsIFontMetrics that describe the properties of
    * an nsFont.
    * @param aFont font description to obtain metrics for
    * @param aMetrics out parameter for font metrics
    * @param aUserFontSet user font set
    * @return error status
    */
-  NS_IMETHOD  GetMetricsFor(const nsFont& aFont, nsIFontMetrics*& aMetrics, 
-                            gfxUserFontSet *aUserFontSet = nsnull) = 0;
+  NS_IMETHOD  GetMetricsFor(const nsFont& aFont, gfxUserFontSet* aUserFontSet,
+                            nsIFontMetrics*& aMetrics) = 0;
 
   /**
    * Check to see if a particular named font exists.
    * @param aFontName character string of font face name
    * @return NS_OK if font is available, else font is unavailable
    */
   NS_IMETHOD CheckFontExistence(const nsString& aFaceName) = 0;
   NS_IMETHOD FirstExistingFont(const nsFont& aFont, nsString& aFaceName) = 0;
diff --git a/gfx/public/nsIRenderingContext.h b/gfx/public/nsIRenderingContext.h
--- a/gfx/public/nsIRenderingContext.h
+++ b/gfx/public/nsIRenderingContext.h
@@ -55,16 +55,17 @@ class nsTransform2D;
 class nsTransform2D;
 class nsString;
 class nsIDeviceContext;
 class nsIRegion;
 class nsIAtom;
 
 struct nsFont;
 struct nsTextDimensions;
+class gfxUserFontSet;
 #ifdef MOZ_MATHML
 struct nsBoundingMetrics;
 #endif
 
 class gfxASurface;
 class gfxContext;
 
 /* gfx2 */
@@ -197,17 +198,18 @@ public:
    * @return The current forground color of the RenderingContext
    */
   NS_IMETHOD GetColor(nscolor &aColor) const = 0;
 
   /**
    * Sets the font for the RenderingContext
    * @param aFont The font to use in the RenderingContext
    */
-  NS_IMETHOD SetFont(const nsFont& aFont, nsIAtom* aLangGroup) = 0;
+  NS_IMETHOD SetFont(const nsFont& aFont, nsIAtom* aLangGroup,
+                     gfxUserFontSet *aUserFontSet) = 0;
 
   /**
    * Sets the font for the RenderingContext
    * @param aFontMetric The font metrics representing the
    *        font to use in the RenderingContext
    */
   NS_IMETHOD SetFont(nsIFontMetrics *aFontMetrics) = 0;
 
diff --git a/gfx/src/nsDeviceContext.cpp b/gfx/src/nsDeviceContext.cpp
--- a/gfx/src/nsDeviceContext.cpp
+++ b/gfx/src/nsDeviceContext.cpp
@@ -210,51 +210,51 @@ DeviceContextImpl::GetLocaleLangGroup(vo
     }
     if (!mLocaleLangGroup) {
       mLocaleLangGroup = do_GetAtom("x-western");
     }
   }
 }
 
 NS_IMETHODIMP DeviceContextImpl::GetMetricsFor(const nsFont& aFont,
-  nsIAtom* aLangGroup, nsIFontMetrics*& aMetrics, gfxUserFontSet *aUserFontSet)
+  nsIAtom* aLangGroup, gfxUserFontSet *aUserFontSet, nsIFontMetrics*& aMetrics)
 {
   if (nsnull == mFontCache) {
     nsresult  rv = CreateFontCache();
     if (NS_FAILED(rv)) {
       aMetrics = nsnull;
       return rv;
     }
     // XXX temporary fix for performance problem -- erik
     GetLocaleLangGroup();
   }
 
   // XXX figure out why aLangGroup is NULL sometimes
   if (!aLangGroup) {
     aLangGroup = mLocaleLangGroup;
   }
 
-  return mFontCache->GetMetricsFor(aFont, aLangGroup, aMetrics, aUserFontSet);
+  return mFontCache->GetMetricsFor(aFont, aLangGroup, aUserFontSet, aMetrics);
 }
 
 NS_IMETHODIMP DeviceContextImpl::GetMetricsFor(const nsFont& aFont, 
-                                               nsIFontMetrics*& aMetrics, 
-                                               gfxUserFontSet *aUserFontSet)
+                                               gfxUserFontSet *aUserFontSet,
+                                               nsIFontMetrics*& aMetrics)
 {
   if (nsnull == mFontCache) {
     nsresult  rv = CreateFontCache();
     if (NS_FAILED(rv)) {
       aMetrics = nsnull;
       return rv;
     }
     // XXX temporary fix for performance problem -- erik
     GetLocaleLangGroup();
   }
-  return mFontCache->GetMetricsFor(aFont, mLocaleLangGroup, 
-                                   aMetrics, aUserFontSet);
+  return mFontCache->GetMetricsFor(aFont, mLocaleLangGroup, aUserFontSet,
+                                   aMetrics);
 }
 
 NS_IMETHODIMP DeviceContextImpl::GetDepth(PRUint32& aDepth)
 {
   aDepth = 24;
   return NS_OK;
 }
 
@@ -469,17 +469,17 @@ nsFontCache::GetDeviceContext(nsIDeviceC
 {
   aContext = mContext;
   NS_IF_ADDREF(aContext);
   return NS_OK;
 }
 
 nsresult
 nsFontCache::GetMetricsFor(const nsFont& aFont, nsIAtom* aLangGroup,
-  nsIFontMetrics *&aMetrics, gfxUserFontSet *aUserFontSet)
+  gfxUserFontSet *aUserFontSet, nsIFontMetrics *&aMetrics)
 {
   // First check our cache
   // start from the end, which is where we put the most-recent-used element
 
   nsIFontMetrics* fm;
   PRInt32 n = mFontMetrics.Count() - 1;
   for (PRInt32 i = n; i >= 0; --i) {
     fm = static_cast<nsIFontMetrics*>(mFontMetrics[i]);
diff --git a/gfx/src/thebes/nsThebesRenderingContext.cpp b/gfx/src/thebes/nsThebesRenderingContext.cpp
--- a/gfx/src/thebes/nsThebesRenderingContext.cpp
+++ b/gfx/src/thebes/nsThebesRenderingContext.cpp
@@ -778,22 +778,24 @@ nsThebesRenderingContext::GetRightToLeft
 
 void
 nsThebesRenderingContext::SetTextRunRTL(PRBool aIsRTL)
 {
 	mFontMetrics->SetTextRunRTL(aIsRTL);
 }
 
 NS_IMETHODIMP
-nsThebesRenderingContext::SetFont(const nsFont& aFont, nsIAtom* aLangGroup)
+nsThebesRenderingContext::SetFont(const nsFont& aFont, nsIAtom* aLangGroup,
+                                  gfxUserFontSet *aUserFontSet)
 {
     PR_LOG(gThebesGFXLog, PR_LOG_DEBUG, ("## %p nsTRC::SetFont %p\n", this, &aFont));
 
     nsCOMPtr<nsIFontMetrics> newMetrics;
-    mDeviceContext->GetMetricsFor(aFont, aLangGroup, *getter_AddRefs(newMetrics));
+    mDeviceContext->GetMetricsFor(aFont, aLangGroup, aUserFontSet,
+                                  *getter_AddRefs(newMetrics));
     mFontMetrics = reinterpret_cast<nsIThebesFontMetrics*>(newMetrics.get());
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsThebesRenderingContext::SetFont(nsIFontMetrics *aFontMetrics)
 {
     PR_LOG(gThebesGFXLog, PR_LOG_DEBUG, ("## %p nsTRC::SetFont[Metrics] %p\n", this, aFontMetrics));
diff --git a/gfx/src/thebes/nsThebesRenderingContext.h b/gfx/src/thebes/nsThebesRenderingContext.h
--- a/gfx/src/thebes/nsThebesRenderingContext.h
+++ b/gfx/src/thebes/nsThebesRenderingContext.h
@@ -74,17 +74,18 @@ public:
     NS_IMETHOD GetDeviceContext(nsIDeviceContext *& aDeviceContext);
     NS_IMETHOD PushState(void);
     NS_IMETHOD PopState(void);
     NS_IMETHOD SetClipRect(const nsRect& aRect, nsClipCombine aCombine);
     NS_IMETHOD SetLineStyle(nsLineStyle aLineStyle);
     NS_IMETHOD SetClipRegion(const nsIRegion& aRegion, nsClipCombine aCombine);
     NS_IMETHOD SetColor(nscolor aColor);
     NS_IMETHOD GetColor(nscolor &aColor) const;
-    NS_IMETHOD SetFont(const nsFont& aFont, nsIAtom* aLangGroup);
+    NS_IMETHOD SetFont(const nsFont& aFont, nsIAtom* aLangGroup,
+                       gfxUserFontSet *aUserFontSet);
     NS_IMETHOD SetFont(nsIFontMetrics *aFontMetrics);
     NS_IMETHOD GetFontMetrics(nsIFontMetrics *&aFontMetrics);
     NS_IMETHOD Translate(nscoord aX, nscoord aY);
     NS_IMETHOD Scale(float aSx, float aSy);
     NS_IMETHOD GetCurrentTransform(nsTransform2D *&aTransform);
 
     NS_IMETHOD DrawLine(nscoord aX0, nscoord aY0, nscoord aX1, nscoord aY1);
     NS_IMETHOD DrawRect(const nsRect& aRect);
diff --git a/layout/base/nsLayoutUtils.cpp b/layout/base/nsLayoutUtils.cpp
--- a/layout/base/nsLayoutUtils.cpp
+++ b/layout/base/nsLayoutUtils.cpp
@@ -1504,17 +1504,17 @@ nsLayoutUtils::GetFontMetricsForStyleCon
                                              nsIFontMetrics** aFontMetrics)
 {
   // pass the user font set object into the device context to pass along to CreateFontGroup
   gfxUserFontSet* fs = aStyleContext->PresContext()->GetUserFontSet();
   
   return aStyleContext->PresContext()->DeviceContext()->GetMetricsFor(
                   aStyleContext->GetStyleFont()->mFont,
                   aStyleContext->GetStyleVisibility()->mLangGroup,
-                  *aFontMetrics, fs);
+                  fs, *aFontMetrics);
 }
 
 nsIFrame*
 nsLayoutUtils::FindChildContainingDescendant(nsIFrame* aParent, nsIFrame* aDescendantFrame)
 {
   nsIFrame* result = aDescendantFrame;
 
   while (result) {
@@ -2902,17 +2902,18 @@ nsLayoutUtils::GetWholeImageDestination(
 }
 
 void
 nsLayoutUtils::SetFontFromStyle(nsIRenderingContext* aRC, nsStyleContext* aSC) 
 {
   const nsStyleFont* font = aSC->GetStyleFont();
   const nsStyleVisibility* visibility = aSC->GetStyleVisibility();
 
-  aRC->SetFont(font->mFont, visibility->mLangGroup);
+  aRC->SetFont(font->mFont, visibility->mLangGroup,
+               aSC->PresContext()->GetUserFontSet());
 }
 
 static PRBool NonZeroStyleCoord(const nsStyleCoord& aCoord)
 {
   switch (aCoord.GetUnit()) {
   case eStyleUnit_Percent:
     return aCoord.GetPercentValue() > 0;
   case eStyleUnit_Coord:
diff --git a/layout/base/nsPresContext.cpp b/layout/base/nsPresContext.cpp
--- a/layout/base/nsPresContext.cpp
+++ b/layout/base/nsPresContext.cpp
@@ -1118,17 +1118,17 @@ nsPresContext::SetImageAnimationModeExte
 {
   SetImageAnimationModeInternal(aMode);
 }
 
 already_AddRefed<nsIFontMetrics>
 nsPresContext::GetMetricsFor(const nsFont& aFont)
 {
   nsIFontMetrics* metrics = nsnull;
-  mDeviceContext->GetMetricsFor(aFont, mLangGroup, metrics);
+  mDeviceContext->GetMetricsFor(aFont, mLangGroup, GetUserFontSet(), metrics);
   return metrics;
 }
 
 const nsFont*
 nsPresContext::GetDefaultFont(PRUint8 aFontID) const
 {
   const nsFont *font;
   switch (aFontID) {
diff --git a/layout/forms/nsListControlFrame.cpp b/layout/forms/nsListControlFrame.cpp
--- a/layout/forms/nsListControlFrame.cpp
+++ b/layout/forms/nsListControlFrame.cpp
@@ -1879,46 +1879,38 @@ nsListControlFrame::IsLeftButton(nsIDOME
     }
   }
   return PR_FALSE;
 }
 
 nscoord
 nsListControlFrame::CalcFallbackRowHeight(PRInt32 aNumOptions)
 {
-  const nsStyleFont* styleFont = nsnull;
+  nsIFrame *fontFrame = nsnull;
     
   if (aNumOptions > 0) {
     // Try the first option
     nsCOMPtr<nsIContent> option = GetOptionContent(0);
     if (option) {
-      nsIFrame * optFrame = PresContext()->PresShell()->
+      nsIFrame * fontFrame = PresContext()->PresShell()->
         GetPrimaryFrameFor(option);
-      if (optFrame) {
-        styleFont = optFrame->GetStyleFont();
-      }
     }
   }
 
-  if (!styleFont) {
+  if (!fontFrame) {
     // Fall back to our own font
-    styleFont = GetStyleFont();
+    fontFrame = this;
   }
-
-  NS_ASSERTION(styleFont, "Must have font style by now!");
 
   nscoord rowHeight = 0;
   
   nsCOMPtr<nsIFontMetrics> fontMet;
-  nsresult result = PresContext()->DeviceContext()->
-    GetMetricsFor(styleFont->mFont, *getter_AddRefs(fontMet));
-  if (NS_SUCCEEDED(result) && fontMet) {
-    if (fontMet) {
-      fontMet->GetHeight(rowHeight);
-    }
+  nsLayoutUtils::GetFontMetricsForFrame(fontFrame, getter_AddRefs(fontMet));
+  if (fontMet) {
+    fontMet->GetHeight(rowHeight);
   }
 
   return rowHeight;
 }
 
 nscoord
 nsListControlFrame::CalcIntrinsicHeight(nscoord aHeightOfARow,
                                         PRInt32 aNumberOfOptions)
diff --git a/layout/generic/nsPageFrame.cpp b/layout/generic/nsPageFrame.cpp
--- a/layout/generic/nsPageFrame.cpp
+++ b/layout/generic/nsPageFrame.cpp
@@ -495,23 +495,26 @@ nsPageFrame::PaintHeaderFooter(nsIRender
       mPD->mPrintSettings = pc->GetPrintSettings();
     if (!mPD->mPrintSettings)
       return;
   }
 
   nsRect rect(aPt.x, aPt.y, mRect.width - mPD->mShadowSize.width,
               mRect.height - mPD->mShadowSize.height);
 
-  aRenderingContext.SetFont(*mPD->mHeadFootFont, nsnull);
   aRenderingContext.SetColor(NS_RGB(0,0,0));
 
   // Get the FontMetrics to determine width.height of strings
   nsCOMPtr<nsIFontMetrics> fontMet;
   pc->DeviceContext()->GetMetricsFor(*mPD->mHeadFootFont, nsnull,
+                                     pc->GetUserFontSet(),
                                      *getter_AddRefs(fontMet));
+
+  aRenderingContext.SetFont(fontMet);
+
   nscoord ascent = 0;
   nscoord visibleHeight = 0;
   if (fontMet) {
     fontMet->GetHeight(visibleHeight);
     fontMet->GetMaxAscent(ascent);
   }
 
   // print document headers and footers
