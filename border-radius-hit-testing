From: L. David Baron <dbaron@dbaron.org>

Make hit testing for border-radius follow the curvature of the border.  (Bug 595652)  r=roc  a2.0=blocking2.0:betaN

diff --git a/browser/base/content/test/browser_bug462289.js b/browser/base/content/test/browser_bug462289.js
--- a/browser/base/content/test/browser_bug462289.js
+++ b/browser/base/content/test/browser_bug462289.js
@@ -9,25 +9,25 @@ function focus_in_navbar() {
 }
 
 function test() {
   waitForExplicitFinish();
 
   tab1 = gBrowser.addTab("about:blank", {skipAnimation: true});
   tab2 = gBrowser.addTab("about:blank", {skipAnimation: true});
 
-  EventUtils.synthesizeMouse(tab1, 2, 2, {});
+  EventUtils.synthesizeMouse(tab1, 6, 6, {});
   setTimeout(step2, 0);
 }
 
 function step2()
 {
   isnot(document.activeElement, tab1, "mouse on tab not activeElement");
 
-  EventUtils.synthesizeMouse(tab1, 2, 2, {});
+  EventUtils.synthesizeMouse(tab1, 6, 6, {});
   setTimeout(step3, 0);
 }
 
 function step3()
 {
   isnot(document.activeElement, tab1, "mouse on tab again activeElement");
 
   if (gNavToolbox.getAttribute("tabsontop") == "true") {
@@ -36,36 +36,36 @@ function step3()
   } else {
     document.getElementById("searchbar").focus();
 
     while (focus_in_navbar())
       EventUtils.synthesizeKey("VK_TAB", { });
   }
   is(document.activeElement, tab1, "tab key to tab activeElement");
 
-  EventUtils.synthesizeMouse(tab1, 2, 2, {});
+  EventUtils.synthesizeMouse(tab1, 6, 6, {});
   setTimeout(step4, 0);
 }
 
 function step4()
 {
   is(document.activeElement, tab1, "mouse on tab while focused still activeElement");
 
-  EventUtils.synthesizeMouse(tab2, 2, 2, {});
+  EventUtils.synthesizeMouse(tab2, 6, 6, {});
   setTimeout(step5, 0);
 }
 
 function step5()
 {
   // The tabbox selects a tab within a setTimeout in a bubbling mousedown event
   // listener, and focuses the current tab if another tab previously had focus
   is(document.activeElement, tab2, "mouse on another tab while focused still activeElement");
 
   content.focus();
-  EventUtils.synthesizeMouse(tab2, 2, 2, {button: 1, type: "mousedown"});
+  EventUtils.synthesizeMouse(tab2, 6, 6, {button: 1, type: "mousedown"});
   setTimeout(step6, 0);
 }
 
 function step6()
 {
   isnot(document.activeElement, tab2, "tab not focused via middle click");
 
   gBrowser.removeTab(tab1);
diff --git a/layout/base/nsDisplayList.cpp b/layout/base/nsDisplayList.cpp
--- a/layout/base/nsDisplayList.cpp
+++ b/layout/base/nsDisplayList.cpp
@@ -694,20 +694,103 @@ nsDisplayBackground::nsDisplayBackground
   // Perform necessary RegisterWidgetGeometry
   if (mIsThemed &&
       (disp->mAppearance == NS_THEME_MOZ_MAC_UNIFIED_TOOLBAR ||
        disp->mAppearance == NS_THEME_TOOLBAR)) {
     RegisterThemeWidgetGeometry(aFrame);
   }
 }
 
+// Helper for RoundedRectIntersectsRect.
+static PRBool
+CheckCorner(nscoord aXOffset, nscoord aYOffset,
+            nscoord aXRadius, nscoord aYRadius)
+{
+  NS_ABORT_IF_FALSE(aXOffset > 0 && aYOffset > 0,
+                    "must not pass nonpositives to CheckCorner");
+  NS_ABORT_IF_FALSE(aXRadius >= 0 && aYRadius >= 0,
+                    "must not pass negatives to CheckCorner");
+
+  // Avoid floating point math unless we're either (1) within the
+  // quarter-ellipse area at the rounded corner or (2) outside the
+  // rounding.
+  if (aXOffset >= aXRadius || aYOffset >= aYRadius)
+    return PR_TRUE;
+
+  // Convert coordinates to a unit circle with (0,0) as the center of
+  // curvature, and see if we're inside the circle or outside.
+  float scaledX = float(aXRadius - aXOffset) / float(aXRadius);
+  float scaledY = float(aYRadius - aYOffset) / float(aYRadius);
+  return scaledX * scaledX + scaledY * scaledY < 1.0f;
+}
+
+
+/**
+ * Return whether any part of aTestRect is inside of the rounded
+ * rectangle formed by aBounds and aRadii (which are indexed by the
+ * NS_CORNER_* constants in nsStyleConsts.h).
+ *
+ * See also RoundedRectContainsRect.
+ */
+static PRBool
+RoundedRectIntersectsRect(const nsRect& aRoundedRect, nscoord aRadii[8],
+                          const nsRect& aTestRect)
+{
+  NS_ABORT_IF_FALSE(aTestRect.Intersects(aRoundedRect),
+                    "we should already have tested basic rect intersection");
+
+  // distances from this edge of aRoundedRect to opposite edge of aTestRect,
+  // which we know are positive due to the Intersects check above.
+  nsMargin insets;
+  insets.top = aTestRect.YMost() - aRoundedRect.y;
+  insets.right = aRoundedRect.XMost() - aTestRect.x;
+  insets.bottom = aRoundedRect.YMost() - aTestRect.y;
+  insets.left = aTestRect.XMost() - aRoundedRect.x;
+
+  // Check whether the bottom-right corner of aTestRect is inside the
+  // top left corner of aBounds when rounded by aRadii, etc.  If any
+  // corner is not, then fail; otherwise succeed.
+  return CheckCorner(insets.left, insets.top,
+                     aRadii[NS_CORNER_TOP_LEFT_X],
+                     aRadii[NS_CORNER_TOP_LEFT_Y]) &&
+         CheckCorner(insets.right, insets.top,
+                     aRadii[NS_CORNER_TOP_RIGHT_X],
+                     aRadii[NS_CORNER_TOP_RIGHT_Y]) &&
+         CheckCorner(insets.right, insets.bottom,
+                     aRadii[NS_CORNER_BOTTOM_RIGHT_X],
+                     aRadii[NS_CORNER_BOTTOM_RIGHT_Y]) &&
+         CheckCorner(insets.left, insets.bottom,
+                     aRadii[NS_CORNER_BOTTOM_LEFT_X],
+                     aRadii[NS_CORNER_BOTTOM_LEFT_Y]);
+}
+
+// Check that the rounded border of aFrame, added to aToReferenceFrame,
+// intersects aRect.  Assumes that the unrounded border has already
+// been checked for intersection.
+static PRBool
+RoundedBorderIntersectsRect(nsIFrame* aFrame,
+                            const nsPoint& aFrameToReferenceFrame,
+                            const nsRect& aTestRect)
+{
+  NS_ABORT_IF_FALSE(nsRect(aFrameToReferenceFrame,
+                           aFrame->GetSize()).Intersects(aTestRect),
+                    "must intersect non-rounded rect");
+  nscoord radii[8];
+  return !aFrame->GetBorderRadii(radii) ||
+         RoundedRectIntersectsRect(nsRect(aFrameToReferenceFrame,
+                                          aFrame->GetSize()),
+                                   radii, aTestRect);
+}
+
 // Returns TRUE if aContainedRect is guaranteed to be contained in
 // the rounded rect defined by aRoundedRect and aRadii. Complex cases are
 // handled conservatively by returning FALSE in some situations where
 // a more thorough analysis could return TRUE.
+//
+// See also RoundedRectIntersectsRect.
 static PRBool RoundedRectContainsRect(const nsRect& aRoundedRect,
                                       const nscoord aRadii[8],
                                       const nsRect& aContainedRect) {
   // rectFullHeight and rectFullWidth together will approximately contain
   // the total area of the frame minus the rounded corners.
   nsRect rectFullHeight = aRoundedRect;
   nscoord xDiff = NS_MAX(aRadii[NS_CORNER_TOP_LEFT_X], aRadii[NS_CORNER_BOTTOM_LEFT_X]);
   rectFullHeight.x += xDiff;
@@ -722,16 +805,34 @@ static PRBool RoundedRectContainsRect(co
   rectFullWidth.height -= NS_MAX(aRadii[NS_CORNER_BOTTOM_LEFT_Y],
                                  aRadii[NS_CORNER_BOTTOM_RIGHT_Y]) + yDiff;
   if (rectFullWidth.Contains(aContainedRect))
     return PR_TRUE;
 
   return PR_FALSE;
 }
 
+void
+nsDisplayBackground::HitTest(nsDisplayListBuilder* aBuilder,
+                             const nsRect& aRect,
+                             HitTestState* aState,
+                             nsTArray<nsIFrame*> *aOutFrames)
+{
+  // Note that we have to check !mIsThemed here to avoid triggering the
+  // assertion in RoundedBorderIntersectsRect, since when mIsThemed, our
+  // bounds can be different from the frame bounds.
+  if (!mIsThemed &&
+      !RoundedBorderIntersectsRect(mFrame, ToReferenceFrame(), aRect)) {
+    // aRect doesn't intersect our border-radius curve.
+    return;
+  }
+
+  aOutFrames->AppendElement(mFrame);
+}
+
 PRBool
 nsDisplayBackground::ComputeVisibility(nsDisplayListBuilder* aBuilder,
                                        nsRegion* aVisibleRegion)
 {
   if (!nsDisplayItem::ComputeVisibility(aBuilder, aVisibleRegion))
     return PR_FALSE;
 
   // Return false if the background was propagated away from this
@@ -924,16 +1025,30 @@ nsDisplayOutline::ComputeVisibility(nsDi
       return PR_FALSE;
     }
   }
 
   return PR_TRUE;
 }
 
 void
+nsDisplayEventReceiver::HitTest(nsDisplayListBuilder* aBuilder,
+                                const nsRect& aRect,
+                                HitTestState* aState,
+                                nsTArray<nsIFrame*> *aOutFrames)
+{
+  if (!RoundedBorderIntersectsRect(mFrame, ToReferenceFrame(), aRect)) {
+    // aRect doesn't intersect our border-radius curve.
+    return;
+  }
+
+  aOutFrames->AppendElement(mFrame);
+}
+
+void
 nsDisplayCaret::Paint(nsDisplayListBuilder* aBuilder,
                       nsIRenderingContext* aCtx) {
   // Note: Because we exist, we know that the caret is visible, so we don't
   // need to check for the caret's visibility.
   mCaret->PaintCaret(aBuilder, aCtx, mFrame, ToReferenceFrame());
 }
 
 PRBool
@@ -1418,17 +1533,26 @@ PRBool nsDisplayClipRoundedRect::IsOpaqu
   return PR_FALSE;
 }
 
 void
 nsDisplayClipRoundedRect::HitTest(nsDisplayListBuilder* aBuilder,
                                   const nsRect& aRect, HitTestState* aState,
                                   nsTArray<nsIFrame*> *aOutFrames)
 {
-  // FIXME: Consider border-radius.
+  if (!RoundedRectIntersectsRect(mClip, mRadii, aRect)) {
+    // aRect doesn't intersect our border-radius curve.
+
+    // FIXME: This isn't quite sufficient for aRect having nontrivial
+    // size (which is the unusual case here), since it's possible that
+    // the part of aRect that intersects the the rounded rect isn't the
+    // part that intersects the items in mList.
+    return;
+  }
+
   mList.HitTest(aBuilder, aRect, aState, aOutFrames);
 }
 
 nsDisplayWrapList*
 nsDisplayClipRoundedRect::WrapWithClone(nsDisplayListBuilder* aBuilder,
                                         nsDisplayItem* aItem) {
   return new (aBuilder)
     nsDisplayClipRoundedRect(aBuilder, aItem->GetUnderlyingFrame(), aItem,
diff --git a/layout/base/nsDisplayList.h b/layout/base/nsDisplayList.h
--- a/layout/base/nsDisplayList.h
+++ b/layout/base/nsDisplayList.h
@@ -1304,21 +1304,17 @@ public:
   nsDisplayBackground(nsDisplayListBuilder* aBuilder, nsIFrame* aFrame);
 #ifdef NS_BUILD_REFCNT_LOGGING
   virtual ~nsDisplayBackground() {
     MOZ_COUNT_DTOR(nsDisplayBackground);
   }
 #endif
 
   virtual void HitTest(nsDisplayListBuilder* aBuilder, const nsRect& aRect,
-                       HitTestState* aState, nsTArray<nsIFrame*> *aOutFrames)
-  {
-    // FIXME: Consider border-radius.
-    aOutFrames->AppendElement(mFrame);
-  }
+                       HitTestState* aState, nsTArray<nsIFrame*> *aOutFrames);
   virtual PRBool ComputeVisibility(nsDisplayListBuilder* aBuilder,
                                    nsRegion* aVisibleRegion);
   virtual PRBool IsOpaque(nsDisplayListBuilder* aBuilder);
   virtual PRBool IsVaryingRelativeToMovingFrame(nsDisplayListBuilder* aBuilder,
                                                 nsIFrame* aFrame);
   virtual PRBool IsUniform(nsDisplayListBuilder* aBuilder, nscolor* aColor);
   virtual PRBool IsFixedAndCoveringViewport(nsDisplayListBuilder* aBuilder);
   virtual nsRect GetBounds(nsDisplayListBuilder* aBuilder);
@@ -1412,21 +1408,17 @@ public:
   }
 #ifdef NS_BUILD_REFCNT_LOGGING
   virtual ~nsDisplayEventReceiver() {
     MOZ_COUNT_DTOR(nsDisplayEventReceiver);
   }
 #endif
 
   virtual void HitTest(nsDisplayListBuilder* aBuilder, const nsRect& aRect,
-                       HitTestState* aState, nsTArray<nsIFrame*> *aOutFrames)
-  {
-    // FIXME: Consider border-radius.
-    aOutFrames->AppendElement(mFrame);
-  }
+                       HitTestState* aState, nsTArray<nsIFrame*> *aOutFrames);
   NS_DISPLAY_DECL_NAME("EventReceiver", TYPE_EVENT_RECEIVER)
 };
 
 /**
  * A class that lets you wrap a display list as a display item.
  * 
  * GetUnderlyingFrame() is troublesome for wrapped lists because if the wrapped
  * list has many items, it's not clear which one has the 'underlying frame'.
diff --git a/layout/base/tests/Makefile.in b/layout/base/tests/Makefile.in
--- a/layout/base/tests/Makefile.in
+++ b/layout/base/tests/Makefile.in
@@ -57,19 +57,21 @@ BARE_UNIT_TESTS = \
 CPPSRCS += $(BARE_UNIT_TESTS)
 SIMPLE_PROGRAMS += $(BARE_UNIT_TESTS:.cpp=$(BIN_SUFFIX))
 
 include $(topsrcdir)/config/rules.mk
 
 DEFINES += -D_IMPL_NS_LAYOUT
 
 _TEST_FILES =	\
+		border_radius_hit_testing_iframe.html \
 		bug369950-subframe.xml \
 		bug495648.rdf \
 		decoration_line_rendering.js \
+		test_border_radius_hit_testing.html \
 		test_bug66619.html \
 		test_bug114649.html \
 		$(warning test_bug369950.html disabled due to random orange; see bug 492575) \
 		test_bug370436.html \
 		test_bug386575.xhtml \
 		test_bug388019.html \
 		test_bug394057.html \
 		test_bug399284.html \
diff --git a/layout/base/tests/border_radius_hit_testing_iframe.html b/layout/base/tests/border_radius_hit_testing_iframe.html
new file mode 100644
--- /dev/null
+++ b/layout/base/tests/border_radius_hit_testing_iframe.html
@@ -0,0 +1,27 @@
+<!DOCTYPE HTML>
+<title>border-radius hit testing</title>
+<style>
+
+  body { margin: 0; }
+
+  #one, #two {
+    border-radius: 100px 60px 40px 120px / 40px 60px 60px 80px;
+    margin-bottom: 100px;
+  }
+
+  #two { overflow: hidden }
+
+  #one, #two > div {
+    height: 200px;
+    background: blue;
+    cursor: progress;
+  }
+
+  #one:hover, #two > div:hover {
+    background: fuchsia;
+  }
+
+</style>
+<body>
+<div id="one"></div>
+<div id="two"><div></div></div>
diff --git a/layout/base/tests/test_border_radius_hit_testing.html b/layout/base/tests/test_border_radius_hit_testing.html
new file mode 100644
--- /dev/null
+++ b/layout/base/tests/test_border_radius_hit_testing.html
@@ -0,0 +1,107 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+https://bugzilla.mozilla.org/show_bug.cgi?id=595652
+-->
+<head>
+  <title>Test for Bug 595652</title>
+  <script type="application/javascript" src="/MochiKit/packed.js"></script>
+  <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
+</head>
+<body onload="run()">
+<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=595652">Mozilla Bug 595652</a>
+<iframe src="border_radius_hit_testing_iframe.html" id="iframe" height="600" width="500" style="border:none"></iframe>
+<pre id="test">
+<script type="application/javascript">
+
+/** Test for Bug 595652 **/
+
+SimpleTest.waitForExplicitFinish();
+
+function run() {
+  var iframe = document.getElementById("iframe");
+  
+  var doc = iframe.contentDocument;
+
+  var container = doc.body;
+  var one = doc.getElementById("one");
+  var two = doc.getElementById("two").firstChild;
+
+  //container.addEventListener("click", function(event) { alert(event.clientX + "," + event.clientY) }, false);
+
+  function check(x, y, expected_element, description)
+  {
+	is(doc.elementFromPoint(x, y), expected_element,
+	   "point (" + x + ", " + y + "): " + description);
+  }
+
+  check(42, 6, container, "outside top left corner of #one");
+  check(11, 21, container, "outside top left corner of #one");
+  check(476, 10, container, "outside top right corner of #one");
+  check(495, 28, container, "outside top right corner of #one");
+  check(483, 197, container, "outside bottom right corner of #one");
+  check(497, 175, container, "outside bottom right corner of #one");
+  check(29, 182, container, "outside bottom left corner of #one");
+  check(73, 198, container, "outside bottom left corner of #one");
+
+  check(95, 2, one, "inside top left corner of #one (curved quadrant)");
+  check(16, 27, one, "inside top left corner of #one (curved quadrant)");
+  check(87, 37, one, "inside top left corner of #one (curved quadrant)");
+  check(465, 10, one, "inside top right corner of #one (curved quadrant)");
+  check(489, 33, one, "inside top right corner of #one (curved quadrant)");
+  check(443, 56, one, "inside top right corner of #one (curved quadrant)");
+  check(493, 167, one, "inside bottom right corner of #one (curved quadrant)");
+  check(476, 188, one, "inside bottom right corner of #one (curved quadrant)");
+  check(462, 144, one, "inside bottom right corner of #one (curved quadrant)");
+  check(74, 186, one, "inside bottom left corner of #one (curved quadrant)");
+  check(16, 153, one, "inside bottom left corner of #one (curved quadrant)");
+  check(112, 124, one, "inside bottom left corner of #one (curved quadrant)");
+
+  check(250, 1, one, "along top edge of #one");
+  check(250, 199, one, "along bottom edge of #one");
+  check(1, 100, one, "along left edge of #one");
+  check(499, 100, one, "along right edge of #one");
+  check(250, 100, one, "in center of #one");
+
+  check(2, 52, one, "inside top left corner of #one (left edge, outside ellipse)");
+  check(82, 52, one, "inside top left corner of #one (left edge, inside ellipse)");
+
+  check(42, 306, container, "outside top left corner of #two");
+  check(11, 321, container, "outside top left corner of #two");
+  check(476, 310, container, "outside top right corner of #two");
+  check(495, 328, container, "outside top right corner of #two");
+  check(483, 497, container, "outside bottom right corner of #two");
+  check(497, 475, container, "outside bottom right corner of #two");
+  check(29, 482, container, "outside bottom left corner of #two");
+  check(73, 498, container, "outside bottom left corner of #two");
+
+  check(95, 302, two, "inside top left corner of #two (curved quadrant)");
+  check(16, 327, two, "inside top left corner of #two (curved quadrant)");
+  check(87, 337, two, "inside top left corner of #two (curved quadrant)");
+  check(465, 310, two, "inside top right corner of #two (curved quadrant)");
+  check(489, 333, two, "inside top right corner of #two (curved quadrant)");
+  check(443, 356, two, "inside top right corner of #two (curved quadrant)");
+  check(493, 467, two, "inside bottom right corner of #two (curved quadrant)");
+  check(476, 488, two, "inside bottom right corner of #two (curved quadrant)");
+  check(462, 444, two, "inside bottom right corner of #two (curved quadrant)");
+  check(74, 486, two, "inside bottom left corner of #two (curved quadrant)");
+  check(16, 453, two, "inside bottom left corner of #two (curved quadrant)");
+  check(112, 424, two, "inside bottom left corner of #two (curved quadrant)");
+
+  check(250, 301, two, "along top edge of #two");
+  check(250, 499, two, "along bottom edge of #two");
+  check(1, 400, two, "along left edge of #two");
+  check(499, 400, two, "along right edge of #two");
+  check(250, 400, two, "in center of #two");
+
+  check(2, 352, two, "inside top left corner of #two (left edge, outside ellipse)");
+  check(82, 352, two, "inside top left corner of #two (left edge, inside ellipse)");
+
+  SimpleTest.finish();
+}
+
+</script>
+</pre>
+</body>
+</html>
diff --git a/layout/generic/nsCanvasFrame.h b/layout/generic/nsCanvasFrame.h
--- a/layout/generic/nsCanvasFrame.h
+++ b/layout/generic/nsCanvasFrame.h
@@ -193,16 +193,22 @@ public:
     *aColor = mExtraBackgroundColor;
     return PR_TRUE;
   }
   virtual nsRect GetBounds(nsDisplayListBuilder* aBuilder)
   {
     nsCanvasFrame* frame = static_cast<nsCanvasFrame*>(mFrame);
     return frame->CanvasArea() + ToReferenceFrame();
   }
+  virtual void HitTest(nsDisplayListBuilder* aBuilder, const nsRect& aRect,
+                       HitTestState* aState, nsTArray<nsIFrame*> *aOutFrames)
+  {
+    // We need to override so we don't consider border-radius.
+    aOutFrames->AppendElement(mFrame);
+  }
 
   virtual void Paint(nsDisplayListBuilder* aBuilder,
                      nsIRenderingContext* aCtx);
 
   void SetExtraBackgroundColor(nscolor aColor)
   {
     mExtraBackgroundColor = aColor;
   }
diff --git a/toolkit/mozapps/extensions/test/browser/browser_bug562890.js b/toolkit/mozapps/extensions/test/browser/browser_bug562890.js
--- a/toolkit/mozapps/extensions/test/browser/browser_bug562890.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_bug562890.js
@@ -57,12 +57,12 @@ function test() {
         waitForFocus(function() {
           win.close();
           aWindow.close();
           finish();
         }, win);
       }
     });
 
-    EventUtils.synthesizeMouse(prefsBtn, 2, 2, { }, aWindow);
+    EventUtils.synthesizeMouse(prefsBtn, 6, 6, { }, aWindow);
   });
 
 }
diff --git a/toolkit/mozapps/extensions/test/browser/browser_bug581076.js b/toolkit/mozapps/extensions/test/browser/browser_bug581076.js
--- a/toolkit/mozapps/extensions/test/browser/browser_bug581076.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_bug581076.js
@@ -30,25 +30,25 @@ function end_test() {
   Services.prefs.clearUserPref(PREF_GETADDONS_GETSEARCHRESULTS);
   close_manager(gManagerWindow, finish);
 }
 
 function search(aRemoteSearch, aCallback) {
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = SEARCH_QUERY;
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouse(searchBox, 6, 6, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   wait_for_view_load(gManagerWindow, function() {
     if (aRemoteSearch)
       var filter = gManagerWindow.document.getElementById("search-filter-remote");
     else
       var filter = gManagerWindow.document.getElementById("search-filter-local");
-    EventUtils.synthesizeMouse(filter, 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouse(filter, 6, 6, { }, gManagerWindow);
 
     executeSoon(aCallback);
   });
 }
 
 function check_allresultslink(aShouldShow) {
   var list = gManagerWindow.document.getElementById("search-list");
   var link = gManagerWindow.document.getElementById("search-allresults-link");
diff --git a/toolkit/mozapps/extensions/test/browser/browser_bug591465.js b/toolkit/mozapps/extensions/test/browser/browser_bug591465.js
--- a/toolkit/mozapps/extensions/test/browser/browser_bug591465.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_bug591465.js
@@ -257,22 +257,22 @@ add_test(function() {
   info("Searching for remote addons");
 
   Services.prefs.setCharPref(PREF_GETADDONS_GETSEARCHRESULTS, SEARCH_URL);
   Services.prefs.setIntPref(PREF_SEARCH_MAXRESULTS, 15);
 
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = SEARCH_QUERY;
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouse(searchBox, 6, 6, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   wait_for_view_load(gManagerWindow, function() {
     var filter = gManagerWindow.document.getElementById("search-filter-remote");
-    EventUtils.synthesizeMouse(filter, 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouse(filter, 6, 6, { }, gManagerWindow);
     executeSoon(function() {
       
       var el = get_addon_element(gManagerWindow, "remote1@tests.mozilla.org");
     
       gContextMenu.addEventListener("popupshown", function() {
         gContextMenu.removeEventListener("popupshown", arguments.callee, false);
     
         check_contextmenu(false, false, true);
diff --git a/toolkit/mozapps/extensions/test/browser/browser_details.js b/toolkit/mozapps/extensions/test/browser/browser_details.js
--- a/toolkit/mozapps/extensions/test/browser/browser_details.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_details.js
@@ -19,17 +19,17 @@ var gDate = new Date(2010, 7, 1);
 
 function open_details(aId, aType, aCallback) {
   gCategoryUtilities.openType(aType, function() {
     var list = gManagerWindow.document.getElementById("addon-list");
     var item = list.firstChild;
     while (item) {
       if ("mAddon" in item && item.mAddon.id == aId) {
         list.ensureElementIsVisible(item);
-        EventUtils.synthesizeMouse(item, 2, 2, { clickCount: 2 }, gManagerWindow);
+        EventUtils.synthesizeMouse(item, 6, 6, { clickCount: 2 }, gManagerWindow);
         wait_for_view_load(gManagerWindow, aCallback);
         return;
       }
       item = item.nextSibling;
     }
     ok(false, "Should have found the add-on in the list");
   });
 }
@@ -167,36 +167,36 @@ add_test(function() {
 
     is_element_hidden(get("detail-size"), "Size should be hidden");
 
     is_element_hidden(get("detail-downloads"), "Downloads should be hidden");
 
     is_element_visible(get("detail-autoUpdate"), "Updates should not be hidden");
     ok(get("detail-autoUpdate").childNodes[1].selected, "Updates ahould be automatic");
     is_element_hidden(get("detail-findUpdates"), "Check for updates should be hidden");
-    EventUtils.synthesizeMouse(get("detail-autoUpdate").lastChild, 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouse(get("detail-autoUpdate").lastChild, 6, 6, {}, gManagerWindow);
     ok(get("detail-autoUpdate").lastChild.selected, "Updates should be manual");
     is_element_visible(get("detail-findUpdates"), "Check for updates should be visible");
-    EventUtils.synthesizeMouse(get("detail-autoUpdate").firstChild, 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouse(get("detail-autoUpdate").firstChild, 6, 6, {}, gManagerWindow);
     ok(get("detail-autoUpdate").firstChild.selected, "Updates should be automatic");
 //XXX Disabled due to bug 596172
 //    is_element_hidden(get("detail-findUpdates"), "Check for updates should be hidden");
 
     is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
     is_element_hidden(get("detail-enable"), "Enable button should be hidden");
     is_element_visible(get("detail-disable"), "Disable button should be visible");
     is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
     is_element_hidden(get("detail-warning"), "Warning message should be hidden");
     is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
     is_element_hidden(get("detail-pending"), "Pending message should be hidden");
 
     // Disable it
-    EventUtils.synthesizeMouse(get("detail-disable"), 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouse(get("detail-disable"), 6, 6, {}, gManagerWindow);
     is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
     is_element_visible(get("detail-enable"), "Enable button should be visible");
     is_element_hidden(get("detail-disable"), "Disable button should be hidden");
     is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
     is_element_hidden(get("detail-warning"), "Warning message should be hidden");
     is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
@@ -214,17 +214,17 @@ add_test(function() {
       is_element_hidden(get("detail-warning"), "Warning message should be hidden");
       is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
       is_element_hidden(get("detail-error"), "Error message should be hidden");
       is_element_hidden(get("detail-error-link"), "Error link should be hidden");
       is_element_visible(get("detail-pending"), "Pending message should be visible");
       is(get("detail-pending").textContent, "Test add-on 1 will be disabled after you restart " + gApp + ".", "Pending message should be correct");
 
       // Undo disabling
-      EventUtils.synthesizeMouse(get("detail-undo"), 2, 2, {}, gManagerWindow);
+      EventUtils.synthesizeMouse(get("detail-undo"), 6, 6, {}, gManagerWindow);
       is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
       is_element_hidden(get("detail-enable"), "Enable button should be hidden");
       is_element_visible(get("detail-disable"), "Disable button should be visible");
       is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
       is_element_hidden(get("detail-warning"), "Warning message should be hidden");
       is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
       is_element_hidden(get("detail-error"), "Error message should be hidden");
@@ -313,37 +313,37 @@ add_test(function() {
 
     is_element_hidden(get("detail-size"), "Size should be hidden");
 
     is_element_hidden(get("detail-downloads"), "Downloads should be hidden");
 
     is_element_visible(get("detail-autoUpdate"), "Updates should not be hidden");
     ok(get("detail-autoUpdate").lastChild.selected, "Updates should be manual");
     is_element_visible(get("detail-findUpdates"), "Check for updates should be visible");
-    EventUtils.synthesizeMouse(get("detail-autoUpdate").childNodes[1], 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouse(get("detail-autoUpdate").childNodes[1], 6, 6, {}, gManagerWindow);
     ok(get("detail-autoUpdate").childNodes[1].selected, "Updates should be automatic");
     is_element_hidden(get("detail-findUpdates"), "Check for updates should be hidden");
-    EventUtils.synthesizeMouse(get("detail-autoUpdate").lastChild, 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouse(get("detail-autoUpdate").lastChild, 6, 6, {}, gManagerWindow);
     ok(get("detail-autoUpdate").lastChild.selected, "Updates should be manual");
     is_element_visible(get("detail-findUpdates"), "Check for updates should be visible");
 
     info("Setting " + PREF_AUTOUPDATE_DEFAULT + " to true");
     Services.prefs.setBoolPref(PREF_AUTOUPDATE_DEFAULT, true);
-    EventUtils.synthesizeMouse(get("detail-autoUpdate").firstChild, 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouse(get("detail-autoUpdate").firstChild, 6, 6, {}, gManagerWindow);
     ok(get("detail-autoUpdate").firstChild.selected, "Updates should be default");
     is_element_hidden(get("detail-findUpdates"), "Check for updates should be hidden");
 
     info("Setting " + PREF_AUTOUPDATE_DEFAULT + " to false");
     Services.prefs.setBoolPref(PREF_AUTOUPDATE_DEFAULT, false);
     ok(get("detail-autoUpdate").firstChild.selected, "Updates should be default");
     is_element_visible(get("detail-findUpdates"), "Check for updates should be visible");
-    EventUtils.synthesizeMouse(get("detail-autoUpdate").childNodes[1], 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouse(get("detail-autoUpdate").childNodes[1], 6, 6, {}, gManagerWindow);
     ok(get("detail-autoUpdate").childNodes[1].selected, "Updates should be automatic");
     is_element_hidden(get("detail-findUpdates"), "Check for updates should be hidden");
-    EventUtils.synthesizeMouse(get("detail-autoUpdate").firstChild, 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouse(get("detail-autoUpdate").firstChild, 6, 6, {}, gManagerWindow);
     ok(get("detail-autoUpdate").firstChild.selected, "Updates should be default");
     is_element_visible(get("detail-findUpdates"), "Check for updates should be visible");
     Services.prefs.clearUserPref(PREF_AUTOUPDATE_DEFAULT);
 
     is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
     is_element_hidden(get("detail-enable"), "Enable button should be hidden");
     is_element_hidden(get("detail-disable"), "Disable button should be hidden");
     is_element_hidden(get("detail-uninstall"), "Remove button should be hidden");
@@ -374,17 +374,17 @@ add_test(function() {
     is_element_visible(get("detail-warning-link"), "Warning link should be visible");
     is(get("detail-warning-link").value, "More Information", "Warning link text should be correct");
     is(get("detail-warning-link").href, gBlocklistURL, "Warning link should be correct");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
     is_element_hidden(get("detail-error-link"), "Error link should be hidden");
     is_element_hidden(get("detail-pending"), "Pending message should be hidden");
 
     // Enable it
-    EventUtils.synthesizeMouse(get("detail-enable"), 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouse(get("detail-enable"), 6, 6, {}, gManagerWindow);
     is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
     is_element_hidden(get("detail-enable"), "Enable button should be hidden");
     is_element_visible(get("detail-disable"), "Disable button should be visible");
     is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
     is_element_hidden(get("detail-warning"), "Warning message should be hidden");
     is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
@@ -402,17 +402,17 @@ add_test(function() {
       is_element_hidden(get("detail-warning"), "Warning message should be hidden");
       is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
       is_element_hidden(get("detail-error"), "Error message should be hidden");
       is_element_hidden(get("detail-error-link"), "Error link should be hidden");
       is_element_visible(get("detail-pending"), "Pending message should be visible");
       is(get("detail-pending").textContent, "Test add-on 4 will be enabled after you restart " + gApp + ".", "Pending message should be correct");
 
       // Undo enabling
-      EventUtils.synthesizeMouse(get("detail-undo"), 2, 2, {}, gManagerWindow);
+      EventUtils.synthesizeMouse(get("detail-undo"), 6, 6, {}, gManagerWindow);
       is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
       is_element_visible(get("detail-enable"), "Enable button should be visible");
       is_element_hidden(get("detail-disable"), "Disable button should be hidden");
       is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
       is_element_visible(get("detail-warning"), "Warning message should be visible");
       is(get("detail-warning").textContent, "Test add-on 4 is known to cause security or stability issues.", "Warning message should be correct");
       is_element_visible(get("detail-warning-link"), "Warning link should be visible");
@@ -462,17 +462,17 @@ add_test(function() {
 
     is_element_hidden(get("detail-warning"), "Warning message should be hidden");
     is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
     is_element_hidden(get("detail-error-link"), "Error link should be hidden");
     is_element_hidden(get("detail-pending"), "Pending message should be hidden");
 
     // Disable it
-    EventUtils.synthesizeMouse(get("detail-disable"), 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouse(get("detail-disable"), 6, 6, {}, gManagerWindow);
     is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
     is_element_visible(get("detail-enable"), "Enable button should be visible");
     is_element_hidden(get("detail-disable"), "Disable button should be hidden");
     is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
     is_element_hidden(get("detail-warning"), "Warning message should be hidden");
     is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
@@ -488,17 +488,17 @@ add_test(function() {
 
       is_element_hidden(get("detail-warning"), "Warning message should be hidden");
       is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
       is_element_hidden(get("detail-error"), "Error message should be hidden");
       is_element_hidden(get("detail-error-link"), "Error link should be hidden");
       is_element_hidden(get("detail-pending"), "Pending message should be visible");
 
       // Enable it
-      EventUtils.synthesizeMouse(get("detail-enable"), 2, 2, {}, gManagerWindow);
+      EventUtils.synthesizeMouse(get("detail-enable"), 6, 6, {}, gManagerWindow);
       is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
       is_element_hidden(get("detail-enable"), "Enable button should be hidden");
       is_element_visible(get("detail-disable"), "Disable button should be visible");
       is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
       is_element_hidden(get("detail-warning"), "Warning message should be hidden");
       is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
       is_element_hidden(get("detail-error"), "Error message should be hidden");
@@ -522,17 +522,17 @@ add_test(function() {
 
     is_element_hidden(get("detail-warning"), "Warning message should be hidden");
     is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
     is_element_hidden(get("detail-error-link"), "Error link should be hidden");
     is_element_hidden(get("detail-pending"), "Pending message should be hidden");
 
     // Enable it
-    EventUtils.synthesizeMouse(get("detail-enable"), 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouse(get("detail-enable"), 6, 6, {}, gManagerWindow);
     is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
     is_element_hidden(get("detail-enable"), "Enable button should be hidden");
     is_element_visible(get("detail-disable"), "Disable button should be visible");
     is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
     is_element_hidden(get("detail-warning"), "Warning message should be hidden");
     is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
@@ -550,17 +550,17 @@ add_test(function() {
       is_element_hidden(get("detail-warning"), "Warning message should be hidden");
       is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
       is_element_hidden(get("detail-error"), "Error message should be hidden");
       is_element_hidden(get("detail-error-link"), "Error link should be hidden");
       is_element_visible(get("detail-pending"), "Pending message should be visible");
       is(get("detail-pending").textContent, "Test add-on 7 will be enabled after you restart " + gApp + ".", "Pending message should be correct");
 
       // Undo enabling
-      EventUtils.synthesizeMouse(get("detail-undo"), 2, 2, {}, gManagerWindow);
+      EventUtils.synthesizeMouse(get("detail-undo"), 6, 6, {}, gManagerWindow);
       is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
       is_element_visible(get("detail-enable"), "Enable button should be visible");
       is_element_hidden(get("detail-disable"), "Disable button should be hidden");
       is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
       is_element_hidden(get("detail-warning"), "Warning message should be hidden");
       is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
       is_element_hidden(get("detail-error"), "Error message should be hidden");
@@ -587,17 +587,17 @@ add_test(function() {
     is_element_visible(get("detail-warning-link"), "Warning link should be visible");
     is(get("detail-warning-link").value, "Update Now", "Warning link text should be correct");
     is(get("detail-warning-link").href, gPluginURL, "Warning link should be correct");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
     is_element_hidden(get("detail-error-link"), "Error link should be hidden");
     is_element_hidden(get("detail-pending"), "Pending message should be hidden");
 
     // Disable it
-    EventUtils.synthesizeMouse(get("detail-disable"), 2, 2, {}, gManagerWindow);
+    EventUtils.synthesizeMouse(get("detail-disable"), 6, 6, {}, gManagerWindow);
     is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
     is_element_visible(get("detail-enable"), "Enable button should be visible");
     is_element_hidden(get("detail-disable"), "Disable button should be hidden");
     is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
     is_element_hidden(get("detail-warning"), "Warning message should be hidden");
     is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
     is_element_hidden(get("detail-error"), "Error message should be hidden");
@@ -615,17 +615,17 @@ add_test(function() {
       is_element_hidden(get("detail-warning"), "Warning message should be hidden");
       is_element_hidden(get("detail-warning-link"), "Warning link should be hidden");
       is_element_hidden(get("detail-error"), "Error message should be hidden");
       is_element_hidden(get("detail-error-link"), "Error link should be hidden");
       is_element_visible(get("detail-pending"), "Pending message should be visible");
       is(get("detail-pending").textContent, "Test add-on 8 will be disabled after you restart " + gApp + ".", "Pending message should be correct");
 
       // Undo disabling
-      EventUtils.synthesizeMouse(get("detail-undo"), 2, 2, {}, gManagerWindow);
+      EventUtils.synthesizeMouse(get("detail-undo"), 6, 6, {}, gManagerWindow);
       is_element_hidden(get("detail-prefs"), "Preferences button should be hidden");
       is_element_hidden(get("detail-enable"), "Enable button should be hidden");
       is_element_visible(get("detail-disable"), "Disable button should be visible");
       is_element_visible(get("detail-uninstall"), "Remove button should be visible");
 
       is_element_visible(get("detail-warning"), "Warning message should be visible");
       is(get("detail-warning").textContent, "An important update is available for Test add-on 8.", "Warning message should be correct");
       is_element_visible(get("detail-warning-link"), "Warning link should be visible");
diff --git a/toolkit/mozapps/extensions/test/browser/browser_searching.js b/toolkit/mozapps/extensions/test/browser/browser_searching.js
--- a/toolkit/mozapps/extensions/test/browser/browser_searching.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_searching.js
@@ -129,17 +129,17 @@ function search(aQuery, aFinishImmediate
   var url = (aQuery == NO_MATCH_QUERY) ? NO_MATCH_URL : SEARCH_URL;
   Services.prefs.setCharPref(PREF_GETADDONS_GETSEARCHRESULTS, url);
 
   aCategoryType = aCategoryType ? aCategoryType : "search";
 
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = aQuery;
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouse(searchBox, 6, 6, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   var finishImmediately = true;
   wait_for_view_load(gManagerWindow, function() {
     is(gCategoryUtilities.selectedCategory, aCategoryType, "Expected category view should be selected");
     is(gCategoryUtilities.isTypeVisible("search"), aCategoryType == "search",
        "Search category should only be visible if it is the current view");
     check_is_searching(false);
@@ -323,21 +323,21 @@ function check_results(aQuery, aSortBy, 
 function check_filtered_results(aQuery, aSortBy, aReverseOrder) {
   var localFilter = gManagerWindow.document.getElementById("search-filter-local");
   var remoteFilter = gManagerWindow.document.getElementById("search-filter-remote");
 
   var list = gManagerWindow.document.getElementById("search-list");
   list.ensureElementIsVisible(localFilter);
 
   // Check with showing local add-ons
-  EventUtils.synthesizeMouse(localFilter, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouse(localFilter, 6, 6, { }, gManagerWindow);
   check_results(aQuery, aSortBy, aReverseOrder, true);
 
   // Check with showing remote add-ons
-  EventUtils.synthesizeMouse(remoteFilter, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouse(remoteFilter, 6, 6, { }, gManagerWindow);
   check_results(aQuery, aSortBy, aReverseOrder, false);
 }
 
 /*
  * Get item for a specific add-on by name
  *
  * @param  aName
  *         The name of the add-on to search for
@@ -426,25 +426,25 @@ add_test(function() {
       var result = results[currentIndex];
       if (result.name.indexOf("install") == 0) {
         run_next_double_click_test();
         return;
       }
 
       var item = result.item;
       list.ensureElementIsVisible(item);
-      EventUtils.synthesizeMouse(item, 2, 2, { clickCount: 2 }, gManagerWindow);
+      EventUtils.synthesizeMouse(item, 6, 6, { clickCount: 2 }, gManagerWindow);
       wait_for_view_load(gManagerWindow, function() {
         var name = gManagerWindow.document.getElementById("detail-name").textContent;
         is(name, item.mAddon.name, "Name in detail view should be correct");
         var version = gManagerWindow.document.getElementById("detail-version").value;
         is(version, item.mAddon.version, "Version in detail view should be correct");
 
         EventUtils.synthesizeMouse(gManagerWindow.document.getElementById("category-search"),
-                                   2, 2, { }, gManagerWindow);
+                                   6, 6, { }, gManagerWindow);
         wait_for_view_load(gManagerWindow, run_next_double_click_test);
       });
     }
 
     run_next_double_click_test();
   });
 });
 
@@ -462,17 +462,17 @@ add_test(function() {
     if (currentIndex >= sorterNames.length) {
       sorters.handler = originalHandler;
       run_next_test();
     }
 
     // Simulate clicking on a specific sorter
     var buttonId = buttonIds[currentIndex];
     var sorter = getAnonymousElementByAttribute(sorters, "anonid", buttonId);
-    EventUtils.synthesizeMouse(sorter, 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouse(sorter, 6, 6, { }, gManagerWindow);
   }
 
   sorters.handler = {
     onSortChanged: function(aSortBy, aAscending) {
       if (originalHandler && "onSortChanged" in originalHandler)
         originalHandler.onSortChanged(aSortBy, aAscending);
 
       check_filtered_results(QUERY, sorterNames[currentIndex], currentReversed);
@@ -544,17 +544,17 @@ add_test(function() {
   search(QUERY, false, function() {
     var list = gManagerWindow.document.getElementById("search-list");
     var remoteItem = get_addon_item(REMOTE_TO_INSTALL);
     list.ensureElementIsVisible(remoteItem);
 
     installBtn = get_install_button(remoteItem);
     is(installBtn.hidden, false, "Install button should be showing before install");
     remoteItem.mAddon.install.addListener(listener);
-    EventUtils.synthesizeMouse(installBtn, 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouse(installBtn, 6, 6, { }, gManagerWindow);
   });
 });
 
 // Tests that re-searching for query results in correct results
 add_test(function() {
   // Select a different category
   gCategoryUtilities.openType("extension", function() {
     is(gCategoryUtilities.isTypeVisible("search"), false, "Search category should be hidden");
diff --git a/toolkit/mozapps/extensions/test/browser/browser_sorting.js b/toolkit/mozapps/extensions/test/browser/browser_sorting.js
--- a/toolkit/mozapps/extensions/test/browser/browser_sorting.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_sorting.js
@@ -81,34 +81,34 @@ add_test(function() {
 
   run_next_test();
 });
 
 // Tests that switching to date ordering works and defaults to descending
 add_test(function() {
   var sorters = gManagerWindow.document.getElementById("list-sorters");
   var nameSorter = gManagerWindow.document.getAnonymousElementByAttribute(sorters, "anonid", "btn-date");
-  EventUtils.synthesizeMouse(nameSorter, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouse(nameSorter, 6, 6, { }, gManagerWindow);
 
   check_order([
     "test5@tests.mozilla.org",
     "test3@tests.mozilla.org",
     "test1@tests.mozilla.org",
     "test2@tests.mozilla.org",
     "test4@tests.mozilla.org"
   ]);
 
   run_next_test();
 });
 
 // Tests that switching to name ordering works and defaults to ascending
 add_test(function() {
   var sorters = gManagerWindow.document.getElementById("list-sorters");
   var nameSorter = gManagerWindow.document.getAnonymousElementByAttribute(sorters, "anonid", "btn-name");
-  EventUtils.synthesizeMouse(nameSorter, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouse(nameSorter, 6, 6, { }, gManagerWindow);
 
   check_order([
     "test2@tests.mozilla.org",
     "test4@tests.mozilla.org",
     "test3@tests.mozilla.org",
     "test5@tests.mozilla.org",
     "test1@tests.mozilla.org"
   ]);
diff --git a/toolkit/mozapps/extensions/test/browser/browser_uninstalling.js b/toolkit/mozapps/extensions/test/browser/browser_uninstalling.js
--- a/toolkit/mozapps/extensions/test/browser/browser_uninstalling.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_uninstalling.js
@@ -103,32 +103,32 @@ add_test(function() {
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should be pending uninstall");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
       isnot(button, null, "Should have a restart button");
       ok(!button.hidden, "Restart button should not be hidden");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
       isnot(button, null, "Should have an undo button");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
@@ -154,33 +154,33 @@ add_test(function() {
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(!aAddon.isActive, "Add-on should be inactive");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
       isnot(button, null, "Should have a restart button");
       ok(button.hidden, "Restart button should be hidden");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
       isnot(button, null, "Should have an undo button");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       ok(aAddon.isActive, "Add-on should be active");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
@@ -209,33 +209,33 @@ add_test(function() {
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(!aAddon.isActive, "Add-on should be inactive");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
       isnot(button, null, "Should have a restart button");
       ok(button.hidden, "Restart button should be hidden");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
       isnot(button, null, "Should have an undo button");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       ok(!aAddon.isActive, "Add-on should be inactive");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
@@ -251,52 +251,52 @@ add_test(function() {
 // Tests that uninstalling a normal add-on from the search view can be undone
 add_test(function() {
   var ID = "addon1@tests.mozilla.org";
   var list = gDocument.getElementById("search-list");
 
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = "Uninstall";
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouse(searchBox, 6, 6, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   wait_for_view_load(gManagerWindow, function() {
     is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
     // Make sure to show local add-ons
-    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 6, 6, { }, gManagerWindow);
 
     AddonManager.getAddonByID(ID, function(aAddon) {
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL, "Add-on should require a restart to uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should be pending uninstall");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
       isnot(button, null, "Should have a restart button");
       ok(!button.hidden, "Restart button should not be hidden");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
       isnot(button, null, "Should have an undo button");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
@@ -309,54 +309,54 @@ add_test(function() {
 // Tests that uninstalling a restartless add-on from the search view can be undone
 add_test(function() {
   var ID = "addon2@tests.mozilla.org";
   var list = gDocument.getElementById("search-list");
 
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = "Uninstall";
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouse(searchBox, 6, 6, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   wait_for_view_load(gManagerWindow, function() {
     is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
     // Make sure to show local add-ons
-    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 6, 6, { }, gManagerWindow);
 
     AddonManager.getAddonByID(ID, function(aAddon) {
       ok(aAddon.isActive, "Add-on should be active");
       ok(!(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL), "Add-on should not require a restart to uninstall");
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(!aAddon.isActive, "Add-on should be inactive");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
       isnot(button, null, "Should have a restart button");
       ok(button.hidden, "Restart button should be hidden");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
       isnot(button, null, "Should have an undo button");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       ok(aAddon.isActive, "Add-on should be active");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
@@ -370,56 +370,56 @@ add_test(function() {
 // be undone and doesn't re-enable
 add_test(function() {
   var ID = "addon2@tests.mozilla.org";
   var list = gDocument.getElementById("search-list");
 
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = "Uninstall";
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouse(searchBox, 6, 6, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   wait_for_view_load(gManagerWindow, function() {
     is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
     // Make sure to show local add-ons
-    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 6, 6, { }, gManagerWindow);
 
     AddonManager.getAddonByID(ID, function(aAddon) {
       aAddon.userDisabled = true;
 
       ok(!aAddon.isActive, "Add-on should be inactive");
       ok(!(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL), "Add-on should not require a restart to uninstall");
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(!aAddon.isActive, "Add-on should be inactive");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
       isnot(button, null, "Should have a restart button");
       ok(button.hidden, "Restart button should be hidden");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
       isnot(button, null, "Should have an undo button");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       ok(!aAddon.isActive, "Add-on should be inactive");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
@@ -444,25 +444,25 @@ add_test(function() {
 
     AddonManager.getAddonByID(ID, function(aAddon) {
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL, "Add-on should require a restart to uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
-      EventUtils.synthesizeMouse(item, 2, 2, { clickCount: 2 }, gManagerWindow);
+      EventUtils.synthesizeMouse(item, 6, 6, { clickCount: 2 }, gManagerWindow);
       wait_for_view_load(gManagerWindow, function() {
         is(gDocument.getElementById("view-port").selectedPanel.id, "detail-view", "Should be in the detail view");
 
         var button = gDocument.getElementById("detail-uninstall");
         isnot(button, null, "Should have a remove button");
         ok(!button.disabled, "Button should not be disabled");
 
-        EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+        EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
         wait_for_view_load(gManagerWindow, function() {
           is(gCategoryUtilities.selectedCategory, "extension", "View should have changed to extension");
 
           var item = get_item_in_list(ID, list);
           isnot(item, null, "Should have found the add-on in the list");
           is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
@@ -472,17 +472,17 @@ add_test(function() {
           item.clientTop;
 
           var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
           isnot(button, null, "Should have a restart button");
           ok(!button.hidden, "Restart button should not be hidden");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
           isnot(button, null, "Should have an undo button");
 
-          EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+          EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
           // Force XBL to apply
           item.clientTop;
 
           ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
           isnot(button, null, "Should have a remove button");
           ok(!button.disabled, "Button should not be disabled");
@@ -507,25 +507,25 @@ add_test(function() {
     AddonManager.getAddonByID(ID, function(aAddon) {
       ok(aAddon.isActive, "Add-on should be active");
       ok(!(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL), "Add-on should not require a restart to uninstall");
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
-      EventUtils.synthesizeMouse(item, 2, 2, { clickCount: 2 }, gManagerWindow);
+      EventUtils.synthesizeMouse(item, 6, 6, { clickCount: 2 }, gManagerWindow);
       wait_for_view_load(gManagerWindow, function() {
         is(gDocument.getElementById("view-port").selectedPanel.id, "detail-view", "Should be in the detail view");
 
         var button = gDocument.getElementById("detail-uninstall");
         isnot(button, null, "Should have a remove button");
         ok(!button.disabled, "Button should not be disabled");
 
-        EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+        EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
         wait_for_view_load(gManagerWindow, function() {
           is(gCategoryUtilities.selectedCategory, "extension", "View should have changed to extension");
 
           var item = get_item_in_list(ID, list);
           isnot(item, null, "Should have found the add-on in the list");
           is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
@@ -536,17 +536,17 @@ add_test(function() {
           item.clientTop;
 
           var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
           isnot(button, null, "Should have a restart button");
           ok(button.hidden, "Restart button should be hidden");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
           isnot(button, null, "Should have an undo button");
 
-          EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+          EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
           // Force XBL to apply
           item.clientTop;
 
           ok(aAddon.isActive, "Add-on should be active");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
           isnot(button, null, "Should have a remove button");
           ok(!button.disabled, "Button should not be disabled");
@@ -573,25 +573,25 @@ add_test(function() {
 
       ok(!aAddon.isActive, "Add-on should be inactive");
       ok(!(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL), "Add-on should not require a restart to uninstall");
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
-      EventUtils.synthesizeMouse(item, 2, 2, { clickCount: 2 }, gManagerWindow);
+      EventUtils.synthesizeMouse(item, 6, 6, { clickCount: 2 }, gManagerWindow);
       wait_for_view_load(gManagerWindow, function() {
         is(gDocument.getElementById("view-port").selectedPanel.id, "detail-view", "Should be in the detail view");
 
         var button = gDocument.getElementById("detail-uninstall");
         isnot(button, null, "Should have a remove button");
         ok(!button.disabled, "Button should not be disabled");
 
-        EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+        EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
         wait_for_view_load(gManagerWindow, function() {
           is(gCategoryUtilities.selectedCategory, "extension", "View should have changed to extension");
 
           var item = get_item_in_list(ID, list);
           isnot(item, null, "Should have found the add-on in the list");
           is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
@@ -602,17 +602,17 @@ add_test(function() {
           item.clientTop;
 
           var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
           isnot(button, null, "Should have a restart button");
           ok(button.hidden, "Restart button should be hidden");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
           isnot(button, null, "Should have an undo button");
 
-          EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+          EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
           // Force XBL to apply
           item.clientTop;
 
           ok(!aAddon.isActive, "Add-on should be inactive");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
           isnot(button, null, "Should have a remove button");
           ok(!button.disabled, "Button should not be disabled");
@@ -642,17 +642,17 @@ add_test(function() {
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should be pending uninstall");
 
@@ -674,17 +674,17 @@ add_test(function() {
           ok(!!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should be pending uninstall");
 
           var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
           isnot(button, null, "Should have a restart button");
           ok(!button.hidden, "Restart button should not be hidden");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
           isnot(button, null, "Should have an undo button");
 
-          EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+          EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
           // Force XBL to apply
           item.clientTop;
           ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
           isnot(button, null, "Should have a remove button");
           ok(!button.disabled, "Button should not be disabled");
 
@@ -698,37 +698,37 @@ add_test(function() {
 // Tests that a normal add-on pending uninstall shows up in the search view
 add_test(function() {
   var ID = "addon1@tests.mozilla.org";
   var list = gDocument.getElementById("search-list");
 
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = "Uninstall";
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouse(searchBox, 6, 6, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   wait_for_view_load(gManagerWindow, function() {
     is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
     // Make sure to show local add-ons
-    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 6, 6, { }, gManagerWindow);
 
     AddonManager.getAddonByID(ID, function(aAddon) {
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL, "Add-on should require a restart to uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should be pending uninstall");
 
@@ -737,17 +737,17 @@ add_test(function() {
       ok(!button.hidden, "Restart button should not be hidden");
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
       isnot(button, null, "Should have an undo button");
 
       gCategoryUtilities.openType("plugin", function() {
         is(gCategoryUtilities.selectedCategory, "plugin", "View should have changed to plugin");
         searchBox.value = "Uninstall";
 
-        EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+        EventUtils.synthesizeMouse(searchBox, 6, 6, { }, gManagerWindow);
         EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
         wait_for_view_load(gManagerWindow, function() {
           is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
           var item = get_item_in_list(ID, list);
           isnot(item, null, "Should have found the add-on in the list");
           is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
@@ -755,17 +755,17 @@ add_test(function() {
           ok(!!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should be pending uninstall");
 
           var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "restart-btn");
           isnot(button, null, "Should have a restart button");
           ok(!button.hidden, "Restart button should not be hidden");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "undo-btn");
           isnot(button, null, "Should have an undo button");
 
-          EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+          EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
           // Force XBL to apply
           item.clientTop;
           ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
           button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
           isnot(button, null, "Should have a remove button");
           ok(!button.disabled, "Button should not be disabled");
 
@@ -794,17 +794,17 @@ add_test(function() {
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(!aAddon.isActive, "Add-on should be inactive");
@@ -817,17 +817,17 @@ add_test(function() {
 
       item = get_item_in_list(ID2, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       gCategoryUtilities.openType("plugin", function() {
         is(gCategoryUtilities.selectedCategory, "plugin", "View should have changed to extension");
 
         AddonManager.getAddonsByIDs([ID, ID2], function([aAddon, aAddon2]) {
           is(aAddon, null, "Add-on should no longer be installed");
           is(aAddon2, null, "Second add-on should no longer be installed");
 
@@ -852,38 +852,38 @@ add_test(function() {
 add_test(function() {
   var ID = "addon3@tests.mozilla.org";
   var ID2 = "addon7@tests.mozilla.org";
   var list = gDocument.getElementById("search-list");
 
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = "Uninstall";
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouse(searchBox, 6, 6, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   wait_for_view_load(gManagerWindow, function() {
     is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
     // Make sure to show local add-ons
-    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 6, 6, { }, gManagerWindow);
 
     AddonManager.getAddonByID(ID, function(aAddon) {
       ok(aAddon.isActive, "Add-on should be active");
       ok(!(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL), "Add-on should not require a restart to uninstall");
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(!aAddon.isActive, "Add-on should be inactive");
@@ -896,28 +896,28 @@ add_test(function() {
 
       item = get_item_in_list(ID2, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       gCategoryUtilities.openType("plugin", function() {
         is(gCategoryUtilities.selectedCategory, "plugin", "View should have changed to extension");
 
         AddonManager.getAddonsByIDs([ID, ID2], function([aAddon, aAddon2]) {
           is(aAddon, null, "Add-on should no longer be installed");
           is(aAddon2, null, "Second add-on should no longer be installed");
 
           searchBox.value = "Uninstall";
 
-          EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+          EventUtils.synthesizeMouse(searchBox, 6, 6, { }, gManagerWindow);
           EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
           wait_for_view_load(gManagerWindow, function() {
             is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
             var item = get_item_in_list(ID, list);
             is(item, null, "Should not have found the add-on in the list");
             item = get_item_in_list(ID2, list);
@@ -949,17 +949,17 @@ add_test(function() {
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(!aAddon.isActive, "Add-on should be inactive");
@@ -972,17 +972,17 @@ add_test(function() {
 
       item = get_item_in_list(ID2, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       close_manager(gManagerWindow, function() {
         AddonManager.getAddonsByIDs([ID, ID2], function([aAddon, aAddon2]) {
           is(aAddon, null, "Add-on should no longer be installed");
           is(aAddon2, null, "Second add-on should no longer be installed");
 
           open_manager(null, function(aWindow) {
             gManagerWindow = aWindow;
@@ -1010,38 +1010,38 @@ add_test(function() {
 add_test(function() {
   var ID = "addon5@tests.mozilla.org";
   var ID2 = "addon9@tests.mozilla.org";
   var list = gDocument.getElementById("search-list");
 
   var searchBox = gManagerWindow.document.getElementById("header-search");
   searchBox.value = "Uninstall";
 
-  EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+  EventUtils.synthesizeMouse(searchBox, 6, 6, { }, gManagerWindow);
   EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
   wait_for_view_load(gManagerWindow, function() {
     is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
     // Make sure to show local add-ons
-    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 2, 2, { }, gManagerWindow);
+    EventUtils.synthesizeMouse(gDocument.getElementById("search-filter-local"), 6, 6, { }, gManagerWindow);
 
     AddonManager.getAddonByID(ID, function(aAddon) {
       ok(aAddon.isActive, "Add-on should be active");
       ok(!(aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL), "Add-on should not require a restart to uninstall");
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
 
       var item = get_item_in_list(ID, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       var button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       // Force XBL to apply
       item.clientTop;
 
       is(item.getAttribute("pending"), "uninstall", "Add-on should be uninstalling");
 
       ok(!(aAddon.pendingOperations & AddonManager.PENDING_UNINSTALL), "Add-on should not be pending uninstall");
       ok(!aAddon.isActive, "Add-on should be inactive");
@@ -1054,33 +1054,33 @@ add_test(function() {
 
       item = get_item_in_list(ID2, list);
       isnot(item, null, "Should have found the add-on in the list");
 
       button = gDocument.getAnonymousElementByAttribute(item, "anonid", "remove-btn");
       isnot(button, null, "Should have a remove button");
       ok(!button.disabled, "Button should not be disabled");
 
-      EventUtils.synthesizeMouse(button, 2, 2, { }, gManagerWindow);
+      EventUtils.synthesizeMouse(button, 6, 6, { }, gManagerWindow);
 
       close_manager(gManagerWindow, function() {
         AddonManager.getAddonsByIDs([ID, ID2], function([aAddon, aAddon2]) {
           is(aAddon, null, "Add-on should no longer be installed");
           is(aAddon2, null, "Second add-on should no longer be installed");
 
           open_manager(null, function(aWindow) {
             gManagerWindow = aWindow;
             gDocument = gManagerWindow.document;
             gCategoryUtilities = new CategoryUtilities(gManagerWindow);
             var list = gDocument.getElementById("search-list");
             var searchBox = gManagerWindow.document.getElementById("header-search");
 
             searchBox.value = "Uninstall";
 
-            EventUtils.synthesizeMouse(searchBox, 2, 2, { }, gManagerWindow);
+            EventUtils.synthesizeMouse(searchBox, 6, 6, { }, gManagerWindow);
             EventUtils.synthesizeKey("VK_RETURN", { }, gManagerWindow);
 
             wait_for_view_load(gManagerWindow, function() {
               is(gCategoryUtilities.selectedCategory, "search", "View should have changed to search");
 
               var item = get_item_in_list(ID, list);
               is(item, null, "Should not have found the add-on in the list");
               item = get_item_in_list(ID2, list);
