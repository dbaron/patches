From: L. David Baron <dbaron@dbaron.org>

Put visited handling in the tree match context.  (Bug 147777)

diff --git a/layout/style/nsCSSRuleProcessor.cpp b/layout/style/nsCSSRuleProcessor.cpp
--- a/layout/style/nsCSSRuleProcessor.cpp
+++ b/layout/style/nsCSSRuleProcessor.cpp
@@ -1217,19 +1217,23 @@ struct TreeMatchContext {
   // (If it is, we need to set slow selector bits on nodes indicating
   // that certain restyling needs to happen.)
   const PRBool mForStyling;
 
   // Did this matching operation find a relevant link?  (If so, we'll
   // need to construct a StyleIfVisited().)
   PRBool mHaveRelevantLink;
 
-  TreeMatchContext(PRBool aForStyling)
+  nsRuleWalker::VisitedHandlingType mVisitedHandling;
+
+  TreeMatchContext(PRBool aForStyling,
+                   nsRuleWalker::VisitedHandlingType aVisitedHandling)
     : mForStyling(aForStyling)
     , mHaveRelevantLink(PR_FALSE)
+    , mVisitedHandling(aVisitedHandling)
   {
   }
 };
 
 /**
  * A |NodeMatchContext| has data about matching a selector (without
  * combinators) against a single node.  It contains only input to the
  * matching.
@@ -2229,17 +2233,17 @@ static PRBool SelectorMatchesTree(RulePr
   return PR_TRUE; // all the selectors matched.
 }
 
 static void ContentEnumFunc(nsICSSStyleRule* aRule, nsCSSSelector* aSelector,
                             void* aData)
 {
   RuleProcessorData* data = (RuleProcessorData*)aData;
 
-  TreeMatchContext treeContext(PR_TRUE);
+  TreeMatchContext treeContext(PR_TRUE, data->mRuleWalker->VisitedHandling());
   NodeMatchContext nodeContext(0, data->IsLink());
   if (nodeContext.mIsRelevantLink) {
     treeContext.mHaveRelevantLink = PR_TRUE;
   }
   if (SelectorMatches(*data, aSelector, &nodeContext, &treeContext)) {
     nsCSSSelector *next = aSelector->mNext;
     if (!next || SelectorMatchesTree(*data, next, &treeContext,
                                      !nodeContext.mIsRelevantLink)) {
@@ -2389,17 +2393,18 @@ nsCSSRuleProcessor::HasStateDependentSty
       nsCSSSelector* selector = *iter;
 
       nsReStyleHint possibleChange = IsSiblingOperator(selector->mOperator) ?
         eReStyle_LaterSiblings : eReStyle_Self;
 
       // If hint already includes all the bits of possibleChange,
       // don't bother calling SelectorMatches, since even if it returns false
       // hint won't change.
-      TreeMatchContext treeContext(PR_FALSE);
+      TreeMatchContext treeContext(PR_FALSE,
+                                   nsRuleWalker::eLinksVisitedOrUnvisited);
       NodeMatchContext nodeContext(aData->mStateMask, PR_FALSE);
       if ((possibleChange & ~hint) &&
           SelectorMatches(*aData, selector, &nodeContext, &treeContext) &&
           SelectorMatchesTree(*aData, selector->mNext, &treeContext, PR_FALSE))
       {
         hint = nsReStyleHint(hint | possibleChange);
       }
     }
@@ -2422,17 +2427,18 @@ AttributeEnumFunc(nsCSSSelector* aSelect
   AttributeRuleProcessorData *data = aData->data;
 
   nsReStyleHint possibleChange = IsSiblingOperator(aSelector->mOperator) ?
     eReStyle_LaterSiblings : eReStyle_Self;
 
   // If enumData->change already includes all the bits of possibleChange, don't
   // bother calling SelectorMatches, since even if it returns false
   // enumData->change won't change.
-  TreeMatchContext treeContext(PR_FALSE);
+  TreeMatchContext treeContext(PR_FALSE,
+                               nsRuleWalker::eLinksVisitedOrUnvisited);
   NodeMatchContext nodeContext(0, PR_FALSE);
   if ((possibleChange & ~(aData->change)) &&
       SelectorMatches(*data, aSelector, &nodeContext, &treeContext) &&
       SelectorMatchesTree(*data, aSelector->mNext, &treeContext, PR_FALSE)) {
     aData->change = nsReStyleHint(aData->change | possibleChange);
   }
 }
 
@@ -2980,17 +2986,18 @@ nsCSSRuleProcessor::RefreshRuleCascade(n
 /* static */ PRBool
 nsCSSRuleProcessor::SelectorListMatches(RuleProcessorData& aData,
                                         nsCSSSelectorList* aSelectorList)
 {
   while (aSelectorList) {
     nsCSSSelector* sel = aSelectorList->mSelectors;
     NS_ASSERTION(sel, "Should have *some* selectors");
     NS_ASSERTION(!sel->IsPseudoElement(), "Shouldn't have been called");
-    TreeMatchContext treeContext(PR_FALSE);
+    TreeMatchContext treeContext(PR_FALSE,
+                                 nsRuleWalker::eRelevantLinkUnvisited);
     NodeMatchContext nodeContext(0, PR_FALSE);
     if (SelectorMatches(aData, sel, &nodeContext, &treeContext)) {
       nsCSSSelector* next = sel->mNext;
       if (!next || SelectorMatchesTree(aData, next, &treeContext, PR_FALSE)) {
         return PR_TRUE;
       }
     }
 
