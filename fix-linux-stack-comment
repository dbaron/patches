From: L. David Baron <dbaron@dbaron.org>

Bug 914253 patch 10 - Two more comment tweaks.  No review.

DONTBUILD

diff --git a/tools/rb/fix_linux_stack.py b/tools/rb/fix_linux_stack.py
--- a/tools/rb/fix_linux_stack.py
+++ b/tools/rb/fix_linux_stack.py
@@ -41,18 +41,18 @@ class unbufferedLineConverter:
     def test():
         assert unbufferedLineConverter("rev").convert("123") == "321"
         assert unbufferedLineConverter("cut", ["-c3"]).convert("abcde") == "c"
         print "Pass"
 
 objdump_section_re = re.compile("^ [0-9a-f]* ([0-9a-f ]{8}) ([0-9a-f ]{8}) ([0-9a-f ]{8}) ([0-9a-f ]{8}).*")
 def elf_section(file, section):
     """
-    Return the requested ELF section of the file as a str, represented
-    as a sequence of bytes.
+    Return the requested ELF section of the file as a str, representing
+    a sequence of bytes.
     """
     # We can read the .gnu_debuglink section using either of:
     #   objdump -s --section=.gnu_debuglink $file
     #   readelf -x .gnu_debuglink $file
     # Since readelf prints things backwards on little-endian platforms
     # for some versions only (backwards on Fedora Core 6, forwards on
     # Fedora 7), use objdump.
     objdump = subprocess.Popen(['objdump', '-s', '--section=' + section, file],
@@ -131,18 +131,18 @@ gnu_debuglink_crc32_table = [
     0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
     0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,
     0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,
     0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,
     0x2d02ef8d
 ]
 
 def gnu_debuglink_crc32(stream):
-    # Note that treats bitwise operators as though integers have an
-    # infinite number of bits (and thus such that negative integers
+    # Note that python treats bitwise operators as though integers have
+    # an infinite number of bits (and thus such that negative integers
     # 1-pad out to infinity).
     crc = 0xffffffff
     while True:
         # Choose to read in 4096 byte chunks.
         bytes = stream.read(4096)
         if len(bytes) == 0:
             break
         for byte in bytes:
