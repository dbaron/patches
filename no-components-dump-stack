From: L. David Baron <dbaron@dbaron.org>

Dump JS stack for the XPConnect on a scope with no Components assertion.  (For bug 510489)

diff --git a/js/src/jsobj.cpp b/js/src/jsobj.cpp
--- a/js/src/jsobj.cpp
+++ b/js/src/jsobj.cpp
@@ -6564,17 +6564,17 @@ MaybeDumpValue(const char *name, jsval v
     if (!JSVAL_IS_NULL(v)) {
         fprintf(stderr, "  %s: ", name);
         dumpValue(v);
         fputc('\n', stderr);
     }
 }
 
 JS_FRIEND_API(void)
-js_DumpStackFrame(JSContext *cx, JSStackFrame *start)
+js_DumpStackFrameChain(JSContext *cx, JSStackFrame *start)
 {
     /* This should only called during live debugging. */
     VOUCH_DOES_NOT_REQUIRE_STACK();
 
     if (!start)
         start = cx->fp;
     FrameRegsIter i(cx);
     while (!i.done() && i.fp() != start)
diff --git a/js/src/xpconnect/src/xpcwrappednativescope.cpp b/js/src/xpconnect/src/xpcwrappednativescope.cpp
--- a/js/src/xpconnect/src/xpcwrappednativescope.cpp
+++ b/js/src/xpconnect/src/xpcwrappednativescope.cpp
@@ -776,17 +776,18 @@ void DEBUG_CheckForComponentsInScope(JSC
         return;
 
     // This is pretty much always bad. It usually means that native code is
     // making a callback to an interface implemented in JavaScript, but the
     // document where the JS object was created has already been cleared and the
     // global properties of that document's window are *gone*. Generally this
     // indicates a problem that should be addressed in the design and use of the
     // callback code.
-    NS_ERROR("XPConnect is being called on a scope without a 'Components' property!");
+    NS_ERROR("XPConnect is being called on a scope without a 'Components' property!  (stack follows)");
+    js_DumpStackFrameChain(cx);
 }
 #else
 #define DEBUG_CheckForComponentsInScope(ccx, obj, OKIfNotInitialized, runtime) \
     ((void)0)
 #endif
 
 // static
 XPCWrappedNativeScope*
