From: L. David Baron <dbaron@dbaron.org>

Implement '-moz-color-correction' for colors specified in markup and style.

diff --git a/layout/base/nsDisplayItemTypes.h b/layout/base/nsDisplayItemTypes.h
--- a/layout/base/nsDisplayItemTypes.h
+++ b/layout/base/nsDisplayItemTypes.h
@@ -21,16 +21,17 @@ enum Type {
   TYPE_BULLET,
   TYPE_BUTTON_BORDER_BACKGROUND,
   TYPE_BUTTON_BOX_SHADOW_OUTER,
   TYPE_BUTTON_FOREGROUND,
   TYPE_CANVAS,
   TYPE_CANVAS_BACKGROUND,
   TYPE_CANVAS_FOCUS,
   TYPE_CARET,
+  TYPE_CHANGE_COLOR_CORRECTION,
   TYPE_CHECKED_CHECKBOX,
   TYPE_CHECKED_RADIOBUTTON,
   TYPE_CLIP,
   TYPE_CLIP_ROUNDED_RECT,
   TYPE_COLUMN_RULE,
   TYPE_COMBOBOX_FOCUS,
   TYPE_EVENT_RECEIVER,
   TYPE_FIELDSET_BORDER_BACKGROUND,
diff --git a/layout/base/nsDisplayList.cpp b/layout/base/nsDisplayList.cpp
--- a/layout/base/nsDisplayList.cpp
+++ b/layout/base/nsDisplayList.cpp
@@ -3206,16 +3206,73 @@ bool nsDisplayZoom::ComputeVisibility(ns
   removed = removed.ConvertAppUnitsRoundIn(mAPD, mParentAPD);
   // aVisibleRegion = aVisibleRegion - removed (modulo any simplifications
   // SubtractFromVisibleRegion does)
   aBuilder->SubtractFromVisibleRegion(aVisibleRegion, removed);
 
   return retval;
 }
 
+nsDisplayChangeColorCorrection::nsDisplayChangeColorCorrection(
+        nsDisplayListBuilder* aBuilder, nsIFrame* aFrame,
+        nsDisplayItem* aItem, uint8_t aColorCorrection)
+    : nsDisplayWrapList(aBuilder, aFrame, aItem),
+      mColorCorrection(aColorCorrection)
+{
+  MOZ_COUNT_CTOR(nsDisplayChangeColorCorrection);
+}
+
+nsDisplayChangeColorCorrection::nsDisplayChangeColorCorrection(
+        nsDisplayListBuilder* aBuilder, nsIFrame* aFrame,
+        nsDisplayList* aList, uint8_t aColorCorrection)
+    : nsDisplayWrapList(aBuilder, aFrame, aList),
+      mColorCorrection(aColorCorrection)
+{
+  MOZ_COUNT_CTOR(nsDisplayChangeColorCorrection);
+}
+
+#ifdef NS_BUILD_REFCNT_LOGGING
+nsDisplayChangeColorCorrection::~nsDisplayChangeColorCorrection()
+{
+  MOZ_COUNT_DTOR(nsDisplayChangeColorCorrection);
+}
+#endif
+
+void
+nsDisplayChangeColorCorrection::Paint(nsDisplayListBuilder* aBuilder,
+                                      nsRenderingContext* aCtx)
+{
+  uint8_t colorCorr = GetColorCorrection();
+
+  gfxContext* ctx = aCtx->ThebesContext();
+
+  // FIXME: Set color correction on ctx.
+
+  nsDisplayWrapList::Paint(aBuilder, aCtx);
+
+  // FIXME: Restore color correction on ctx.
+}
+
+bool
+nsDisplayChangeColorCorrection::TryMerge(nsDisplayListBuilder* aBuilder,
+                                         nsDisplayItem* aItem)
+{
+  if (aItem->GetType() != TYPE_CHANGE_COLOR_CORRECTION)
+    return false;
+  nsDisplayChangeColorCorrection* other =
+    static_cast<nsDisplayChangeColorCorrection*>(aItem);
+  // aItem->GetUnderlyingFrame() returns non-null because it's
+  // nsDisplayChangeColorCorrection
+  // We can merge anytime the frames are changing to the same value.
+  if (other->GetColorCorrection() != GetColorCorrection())
+    return false;
+  mList.AppendToBottom(&other->mList);
+  return true;
+}
+
 ///////////////////////////////////////////////////
 // nsDisplayTransform Implementation
 //
 
 // Write #define UNIFIED_CONTINUATIONS here to have the transform property try
 // to transform content with continuations as one unified block instead of
 // several smaller ones.  This is currently disabled because it doesn't work
 // correctly, since when the frames are initially being reflowed, their
diff --git a/layout/base/nsDisplayList.h b/layout/base/nsDisplayList.h
--- a/layout/base/nsDisplayList.h
+++ b/layout/base/nsDisplayList.h
@@ -948,17 +948,18 @@ public:
    */
   virtual bool ComputeVisibility(nsDisplayListBuilder* aBuilder,
                                    nsRegion* aVisibleRegion,
                                    const nsRect& aAllowVisibleRegionExpansion)
   { return !mVisibleRect.IsEmpty(); }
 
   /**
    * Try to merge with the other item (which is below us in the display
-   * list). This gets used by nsDisplayClip to coalesce clipping operations
+   * list). This gets used by nsDisplayClip and
+   * nsDisplayChangeColorCorrection to coalesce clipping operations
    * (optimization), by nsDisplayOpacity to merge rendering for the same
    * content element into a single opacity group (correctness), and will be
    * used by nsDisplayOutline to merge multiple outlines for the same element
    * (also for correctness).
    * @return true if the merge was successful and the other item should be deleted
    */
   virtual bool TryMerge(nsDisplayListBuilder* aBuilder, nsDisplayItem* aItem) {
     return false;
@@ -2438,16 +2439,40 @@ public:
   // Get the app units per dev pixel ratio of the parent document.
   int32_t GetParentAppUnitsPerDevPixel() { return mParentAPD; }
 
 private:
   int32_t mAPD, mParentAPD;
 };
 
 /**
+ * The standard display item to paint a stacking context with translucency
+ * set by the stacking context root frame's 'opacity' style.
+ */
+class nsDisplayChangeColorCorrection : public nsDisplayWrapList {
+public:
+  nsDisplayChangeColorCorrection(nsDisplayListBuilder* aBuilder,
+                                 nsIFrame* aFrame, nsDisplayItem* aItem,
+                                 uint8_t aColorCorrection);
+  nsDisplayChangeColorCorrection(nsDisplayListBuilder* aBuilder,
+                                 nsIFrame* aFrame, nsDisplayList* aList,
+                                 uint8_t aColorCorrection);
+#ifdef NS_BUILD_REFCNT_LOGGING
+  virtual ~nsDisplayChangeColorCorrection();
+#endif
+
+  virtual void Paint(nsDisplayListBuilder* aBuilder, nsRenderingContext* aCtx);
+  virtual bool TryMerge(nsDisplayListBuilder* aBuilder, nsDisplayItem* aItem);
+  NS_DISPLAY_DECL_NAME("ChangeColorCorrection", TYPE_CHANGE_COLOR_CORRECTION)
+private:
+  uint8_t mColorCorrection;
+  uint8_t GetColorCorrection() { return mColorCorrection; }
+};
+
+/**
  * A display item to paint a stacking context with effects
  * set by the stacking context root frame's style.
  */
 class nsDisplaySVGEffects : public nsDisplayWrapList {
 public:
   nsDisplaySVGEffects(nsDisplayListBuilder* aBuilder, nsIFrame* aFrame,
                       nsDisplayList* aList);
 #ifdef NS_BUILD_REFCNT_LOGGING
diff --git a/layout/generic/nsFrame.cpp b/layout/generic/nsFrame.cpp
--- a/layout/generic/nsFrame.cpp
+++ b/layout/generic/nsFrame.cpp
@@ -1676,42 +1676,85 @@ public:
                                   nsDisplayItem* aItem) {
     return new (aBuilder) nsDisplayClip(aBuilder, aItem->GetUnderlyingFrame(),
                                         aItem, mRect);
   }
 protected:
   nsRect    mRect;
 };
 
+class nsChangeColorCorrectionWrapper : public nsDisplayWrapper
+{
+public:
+  nsChangeColorCorrectionWrapper(uint8_t aColorCorrection)
+    : mColorCorrection(aColorCorrection) {}
+  virtual nsDisplayItem* WrapList(nsDisplayListBuilder* aBuilder,
+                                  nsIFrame* aFrame, nsDisplayList* aList) {
+    // We are not a stacking context root. There is no valid underlying
+    // frame for the whole list.
+    return new (aBuilder) nsDisplayChangeColorCorrection(
+      aBuilder, nullptr, aList, mColorCorrection);
+  }
+  virtual nsDisplayItem* WrapItem(nsDisplayListBuilder* aBuilder,
+                                  nsDisplayItem* aItem) {
+    return new (aBuilder) nsDisplayChangeColorCorrection(
+      aBuilder, aItem->GetUnderlyingFrame(), aItem, mColorCorrection);
+  }
+protected:
+  uint8_t mColorCorrection;
+};
+
 nsresult
 nsIFrame::OverflowClip(nsDisplayListBuilder*   aBuilder,
                        const nsDisplayListSet& aFromSet,
                        const nsDisplayListSet& aToSet,
                        const nsRect&           aClipRect,
                        const nscoord           aClipRadii[8],
                        bool                    aClipBorderBackground,
                        bool                    aClipAll)
 {
   nsOverflowClipWrapper wrapper(this, aClipRect, aClipRadii,
                                 aClipBorderBackground, aClipAll);
   return wrapper.WrapLists(aBuilder, this, aFromSet, aToSet);
 }
 
 static nsresult
-BuildDisplayListWithOverflowClip(nsDisplayListBuilder* aBuilder, nsIFrame* aFrame,
+BuildDisplayListWithWrappers(nsDisplayListBuilder* aBuilder, nsIFrame* aFrame,
     const nsRect& aDirtyRect, const nsDisplayListSet& aSet,
-    const nsRect& aClipRect, const nscoord aClipRadii[8])
-{
+    const nsRect& aClipRect, const nscoord aClipRadii[8],
+    bool aApplyOverflowClip, bool aChangeColorCorrection)
+{
+  NS_PRECONDITION(aApplyOverflowClip || aChangeColorCorrection,
+                  "shouldn't have been called");
   nsDisplayListCollection set;
   nsresult rv = aFrame->BuildDisplayList(aBuilder, aDirtyRect, set);
   NS_ENSURE_SUCCESS(rv, rv);
   rv = aBuilder->DisplayCaret(aFrame, aDirtyRect, aSet.Content());
   NS_ENSURE_SUCCESS(rv, rv);
 
-  return aFrame->OverflowClip(aBuilder, set, aSet, aClipRect, aClipRadii);
+  // REVIEW: Are there any other callers (e.g., other callers of
+  // nsIFrame::OverflowClip()) that need to do this wrapping for
+  // color-correction?
+  if (aApplyOverflowClip && aChangeColorCorrection) {
+    nsDisplayListCollection set2;
+    rv = aFrame->OverflowClip(aBuilder, set, set2, aClipRect, aClipRadii);
+    NS_ENSURE_SUCCESS(rv, rv);
+    nsChangeColorCorrectionWrapper
+      ccWrap(aFrame->GetStyleVisibility()->mColorCorrection);
+    rv = ccWrap.WrapLists(aBuilder, aFrame, set2, aSet);
+  } else if (aApplyOverflowClip) {
+    rv = aFrame->OverflowClip(aBuilder, set, aSet, aClipRect, aClipRadii);
+  } else {
+    NS_ASSERTION(aChangeColorCorrection, "unexpected");
+    nsChangeColorCorrectionWrapper
+      ccWrap(aFrame->GetStyleVisibility()->mColorCorrection);
+    rv = ccWrap.WrapLists(aBuilder, aFrame, set, aSet);
+  }
+
+  return rv;
 }
 
 #ifdef DEBUG
 static void PaintDebugBorder(nsIFrame* aFrame, nsRenderingContext* aCtx,
      const nsRect& aDirtyRect, nsPoint aPt) {
   nsRect r(aPt, aFrame->GetSize());
   if (aFrame->HasView()) {
     aCtx->SetColor(NS_RGB(0,0,255));
@@ -2191,31 +2234,36 @@ nsIFrame::BuildDisplayListForChild(nsDis
 
   nsRect overflowClip;
   nscoord overflowClipRadii[8];
   bool applyOverflowClip =
     ApplyOverflowClipping(aBuilder, child, disp, &overflowClip);
   if (applyOverflowClip) {
     child->GetPaddingBoxBorderRadii(overflowClipRadii);
   }
+  bool changeColorCorrection =
+    aChild->GetStyleVisibility()->mColorCorrection != 
+    GetStyleVisibility()->mColorCorrection;
   // Don't use overflowClip to restrict the dirty rect, since some of the
   // descendants may not be clipped by it. Even if we end up with unnecessary
   // display items, they'll be pruned during ComputeVisibility. Note that
   // this overflow-clipping here only applies to overflow:-moz-hidden-unscrollable;
   // overflow:hidden etc creates an nsHTML/XULScrollFrame which does its own
   // clipping.
 
   nsresult rv;
   if (!pseudoStackingContext) {
     // THIS IS THE COMMON CASE.
     // Not a pseudo or real stacking context. Do the simple thing and
     // return early.
-    if (applyOverflowClip) {
-      rv = BuildDisplayListWithOverflowClip(aBuilder, child, dirty, aLists,
-                                            overflowClip, overflowClipRadii);
+    if (applyOverflowClip || changeColorCorrection) {
+      rv = BuildDisplayListWithWrappers(aBuilder, child, dirty, aLists,
+                                        overflowClip, overflowClipRadii,
+                                        applyOverflowClip,
+                                        changeColorCorrection);
     } else {
       rv = child->BuildDisplayList(aBuilder, dirty, aLists);
       if (NS_SUCCEEDED(rv)) {
         rv = aBuilder->DisplayCaret(child, dirty, aLists.Content());
       }
     }
 #ifdef DEBUG
     DisplayDebugBorders(aBuilder, child, aLists);
@@ -2245,20 +2293,22 @@ nsIFrame::BuildDisplayListForChild(nsDis
     nsRect clippedDirtyRect = dirty;
     if (applyClipPropClipping) {
       // clipRect is in builder-reference-frame coordinates,
       // dirty/clippedDirtyRect are in child coordinates
       clippedDirtyRect.IntersectRect(clippedDirtyRect,
                                      clipRect - aBuilder->ToReferenceFrame(child));
     }
     
-    if (applyOverflowClip) {
-      rv = BuildDisplayListWithOverflowClip(aBuilder, child, clippedDirtyRect,
-                                            pseudoStack, overflowClip,
-                                            overflowClipRadii);
+    if (applyOverflowClip || changeColorCorrection) {
+      rv = BuildDisplayListWithWrappers(aBuilder, child, clippedDirtyRect,
+                                        pseudoStack, overflowClip,
+                                        overflowClipRadii,
+                                        applyOverflowClip,
+                                        changeColorCorrection);
     } else {
       rv = child->BuildDisplayList(aBuilder, clippedDirtyRect, pseudoStack);
       if (NS_SUCCEEDED(rv)) {
         rv = aBuilder->DisplayCaret(child, dirty, pseudoStack.Content());
       }
     }
     
     if (NS_SUCCEEDED(rv)) {
