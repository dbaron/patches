From: L. David Baron <dbaron@dbaron.org>

Bug 1277448 patch 6 - Make MFBT assertion messages print the function name.  r=Waldo

MozReview-Commit-ID: A5lg11Cx51T

diff --git a/dom/media/MediaDecoderStateMachine.cpp b/dom/media/MediaDecoderStateMachine.cpp
--- a/dom/media/MediaDecoderStateMachine.cpp
+++ b/dom/media/MediaDecoderStateMachine.cpp
@@ -250,17 +250,17 @@ public:
 private:
   template <class S, typename R, typename... As>
   auto ReturnTypeHelper(R(S::*)(As...)) -> R;
 
   void Crash(const char* aReason, const char* aSite)
   {
     char buf[1024];
     SprintfLiteral(buf, "%s state=%s callsite=%s", aReason, ToStateStr(GetState()), aSite);
-    MOZ_ReportAssertionFailure(buf, __FILE__, __LINE__);
+    MOZ_ReportAssertionFailure(buf, __FILE__, __func__, __LINE__);
     MOZ_CRASH();
   }
 
 protected:
   enum class EventVisibility : int8_t
   {
     Observable,
     Suppressed
diff --git a/gfx/2d/Logging.h b/gfx/2d/Logging.h
--- a/gfx/2d/Logging.h
+++ b/gfx/2d/Logging.h
@@ -507,17 +507,18 @@ private:
 
   void WriteLog(const std::string &aString) {
     if (MOZ_UNLIKELY(LogIt())) {
       Logger::OutputMessage(aString, L, NoNewline());
       // Assert if required.  We don't have a three parameter MOZ_ASSERT
       // so use the underlying functions instead (see bug 1281702):
 #ifdef DEBUG
       if (mOptions & int(LogOptions::AssertOnCall)) {
-        MOZ_ReportAssertionFailure(aString.c_str(), __FILE__, __LINE__);
+        MOZ_ReportAssertionFailure(aString.c_str(), __FILE__, __func__,
+                                   __LINE__);
         MOZ_CRASH("GFX: An assert from the graphics logger");
       }
 #endif
       if ((mOptions & int(LogOptions::CrashAction)) && ValidReason()) {
         Logger::CrashAction(mReason);
       }
     }
   }
diff --git a/ipc/glue/BackgroundChildImpl.cpp b/ipc/glue/BackgroundChildImpl.cpp
--- a/ipc/glue/BackgroundChildImpl.cpp
+++ b/ipc/glue/BackgroundChildImpl.cpp
@@ -133,17 +133,18 @@ BackgroundChildImpl::ProcessingError(Res
 #undef HANDLE_CASE
 
     default:
       MOZ_CRASH("Unknown error code!");
   }
 
   // This is just MOZ_CRASH() un-inlined so that we can pass the result code as
   // a string. MOZ_CRASH() only supports string literals at the moment.
-  MOZ_ReportCrash(abortMessage.get(), __FILE__, __LINE__); MOZ_REALLY_CRASH();
+  MOZ_ReportCrash(abortMessage.get(), __FILE__, __func__, __LINE__);
+  MOZ_REALLY_CRASH();
 }
 
 void
 BackgroundChildImpl::ActorDestroy(ActorDestroyReason aWhy)
 {
   // May happen on any thread!
 }
 
diff --git a/js/src/gc/Verifier.cpp b/js/src/gc/Verifier.cpp
--- a/js/src/gc/Verifier.cpp
+++ b/js/src/gc/Verifier.cpp
@@ -356,17 +356,17 @@ gc::GCRuntime::endVerifyPreBarriers()
                     EdgeValue& edge = node->edges[i];
                     if (!IsMarkedOrAllocated(edge)) {
                         char msgbuf[1024];
                         SprintfLiteral(msgbuf,
                                        "[barrier verifier] Unmarked edge: %s %p '%s' edge to %s %p",
                                        JS::GCTraceKindToAscii(node->kind), node->thing,
                                        edge.label,
                                        JS::GCTraceKindToAscii(edge.kind), edge.thing);
-                        MOZ_ReportAssertionFailure(msgbuf, __FILE__, __LINE__);
+                        MOZ_ReportAssertionFailure(msgbuf, __FILE__, __func__, __LINE__);
                         MOZ_CRASH();
                     }
                 }
             }
 
             node = NextNode(node);
         }
     }
diff --git a/js/src/jit/MacroAssembler.cpp b/js/src/jit/MacroAssembler.cpp
--- a/js/src/jit/MacroAssembler.cpp
+++ b/js/src/jit/MacroAssembler.cpp
@@ -1589,17 +1589,17 @@ MacroAssembler::handleFailure()
     // running function and never come back
     JitCode* excTail = GetJitContext()->runtime->jitRuntime()->getExceptionTail();
     jump(excTail);
 }
 
 #ifdef DEBUG
 static void
 AssumeUnreachable_(const char* output) {
-    MOZ_ReportAssertionFailure(output, __FILE__, __LINE__);
+    MOZ_ReportAssertionFailure(output, __FILE__, __func__, __LINE__);
 }
 #endif
 
 void
 MacroAssembler::assumeUnreachable(const char* output)
 {
 #ifdef DEBUG
     if (!IsCompilingWasm()) {
diff --git a/js/src/jit/mips32/Simulator-mips32.cpp b/js/src/jit/mips32/Simulator-mips32.cpp
--- a/js/src/jit/mips32/Simulator-mips32.cpp
+++ b/js/src/jit/mips32/Simulator-mips32.cpp
@@ -1362,17 +1362,17 @@ class Redirection
                 MOZ_ASSERT(current->type() == type);
                 return current;
             }
         }
 
         Redirection* redir = (Redirection*)js_malloc(sizeof(Redirection));
         if (!redir) {
             MOZ_ReportAssertionFailure("[unhandlable oom] Simulator redirection",
-                                       __FILE__, __LINE__);
+                                       __FILE__, __func__, __LINE__);
             MOZ_CRASH();
         }
         new(redir) Redirection(nativeFunction, type, sim);
         return redir;
     }
 
     static Redirection* FromSwiInstruction(SimInstruction* swiInstruction) {
         uint8_t* addrOfSwi = reinterpret_cast<uint8_t*>(swiInstruction);
diff --git a/js/src/jit/mips64/Simulator-mips64.cpp b/js/src/jit/mips64/Simulator-mips64.cpp
--- a/js/src/jit/mips64/Simulator-mips64.cpp
+++ b/js/src/jit/mips64/Simulator-mips64.cpp
@@ -1377,17 +1377,17 @@ class Redirection
                 MOZ_ASSERT(current->type() == type);
                 return current;
             }
         }
 
         Redirection* redir = (Redirection*)js_malloc(sizeof(Redirection));
         if (!redir) {
             MOZ_ReportAssertionFailure("[unhandlable oom] Simulator redirection",
-                                       __FILE__, __LINE__);
+                                       __FILE__, __func__, __LINE__);
             MOZ_CRASH();
         }
         new(redir) Redirection(nativeFunction, type, sim);
         return redir;
     }
 
     static Redirection* FromSwiInstruction(SimInstruction* swiInstruction) {
         uint8_t* addrOfSwi = reinterpret_cast<uint8_t*>(swiInstruction);
diff --git a/js/src/jscntxt.cpp b/js/src/jscntxt.cpp
--- a/js/src/jscntxt.cpp
+++ b/js/src/jscntxt.cpp
@@ -1174,17 +1174,17 @@ CompartmentChecker::check(AbstractFrameP
 }
 #endif
 
 void
 AutoEnterOOMUnsafeRegion::crash(const char* reason)
 {
     char msgbuf[1024];
     SprintfLiteral(msgbuf, "[unhandlable oom] %s", reason);
-    MOZ_ReportAssertionFailure(msgbuf, __FILE__, __LINE__);
+    MOZ_ReportAssertionFailure(msgbuf, __FILE__, __func__, __LINE__);
     MOZ_CRASH();
 }
 
 AutoEnterOOMUnsafeRegion::AnnotateOOMAllocationSizeCallback
 AutoEnterOOMUnsafeRegion::annotateOOMSizeCallback = nullptr;
 
 void
 AutoEnterOOMUnsafeRegion::crash(size_t size, const char* reason)
diff --git a/js/src/jsutil.cpp b/js/src/jsutil.cpp
--- a/js/src/jsutil.cpp
+++ b/js/src/jsutil.cpp
@@ -80,17 +80,17 @@ ResetSimulatedOOM() {
 
 } // namespace oom
 } // namespace js
 #endif // defined(DEBUG) || defined(JS_OOM_BREAKPOINT)
 
 JS_PUBLIC_API(void)
 JS_Assert(const char* s, const char* file, int ln)
 {
-    MOZ_ReportAssertionFailure(s, file, ln);
+    MOZ_ReportAssertionFailure(s, file, "[unknown]", ln);
     MOZ_CRASH();
 }
 
 #ifdef __linux__
 
 #include <malloc.h>
 #include <stdlib.h>
 
diff --git a/js/src/shell/js.cpp b/js/src/shell/js.cpp
--- a/js/src/shell/js.cpp
+++ b/js/src/shell/js.cpp
@@ -3099,17 +3099,17 @@ Crash(JSContext* cx, unsigned argc, Valu
     if (args.length() == 0)
         MOZ_CRASH("forced crash");
     RootedString message(cx, JS::ToString(cx, args[0]));
     if (!message)
         return false;
     char* utf8chars = JS_EncodeStringToUTF8(cx, message);
     if (!utf8chars)
         return false;
-    MOZ_ReportCrash(utf8chars, __FILE__, __LINE__);
+    MOZ_ReportCrash(utf8chars, __FILE__, __func__, __LINE__);
     MOZ_CRASH_ANNOTATE("MOZ_CRASH(dynamic)");
     MOZ_REALLY_CRASH();
 }
 
 static bool
 GetSLX(JSContext* cx, unsigned argc, Value* vp)
 {
     CallArgs args = CallArgsFromVp(argc, vp);
diff --git a/js/src/vm/TypeInference.cpp b/js/src/vm/TypeInference.cpp
--- a/js/src/vm/TypeInference.cpp
+++ b/js/src/vm/TypeInference.cpp
@@ -248,17 +248,17 @@ TypeFailure(JSContext* cx, const char* f
     VsprintfLiteral(errbuf, fmt, ap);
     va_end(ap);
 
     SprintfLiteral(msgbuf, "[infer failure] %s", errbuf);
 
     /* Dump type state, even if INFERFLAGS is unset. */
     PrintTypes(cx, cx->compartment(), true);
 
-    MOZ_ReportAssertionFailure(msgbuf, __FILE__, __LINE__);
+    MOZ_ReportAssertionFailure(msgbuf, __FILE__, __func__, __LINE__);
     MOZ_CRASH();
 }
 
 bool
 js::ObjectGroupHasProperty(JSContext* cx, ObjectGroup* group, jsid id, const Value& value)
 {
     /*
      * Check the correctness of the type information in the object's property
diff --git a/layout/base/nsPresArena.cpp b/layout/base/nsPresArena.cpp
--- a/layout/base/nsPresArena.cpp
+++ b/layout/base/nsPresArena.cpp
@@ -145,17 +145,17 @@ nsPresArena::Allocate(uint32_t aCode, si
           MOZ_ReportAssertionFailure(
             nsPrintfCString("PresArena: poison overwritten; "
                             "wanted %.16" PRIx64 " "
                             "found %.16" PRIx64 " "
                             "errors in bits %.16" PRIx64 " ",
                             uint64_t(mozPoisonValue()),
                             uint64_t(val),
                             uint64_t(mozPoisonValue() ^ val)).get(),
-            __FILE__, __LINE__);
+            __FILE__, __func__, __LINE__);
           MOZ_CRASH();
         }
       }
     }
 #endif
     MOZ_MAKE_MEM_UNDEFINED(result, list->mEntrySize);
     return result;
   }
diff --git a/mfbt/Assertions.h b/mfbt/Assertions.h
--- a/mfbt/Assertions.h
+++ b/mfbt/Assertions.h
@@ -144,41 +144,46 @@ MOZ_BEGIN_EXTERN_C
  * Prints |aStr| as an assertion failure (using aFilename and aLine as the
  * location of the assertion) to the standard debug-output channel.
  *
  * Usually you should use MOZ_ASSERT or MOZ_CRASH instead of this method.  This
  * method is primarily for internal use in this header, and only secondarily
  * for use in implementing release-build assertions.
  */
 MOZ_MAYBE_UNUSED static MOZ_COLD MOZ_NEVER_INLINE void
-MOZ_ReportAssertionFailure(const char* aStr, const char* aFilename, int aLine)
+MOZ_ReportAssertionFailure(const char* aStr, const char* aFilename,
+                           const char* aFunction, int aLine)
   MOZ_PRETEND_NORETURN_FOR_STATIC_ANALYSIS
 {
 #ifdef ANDROID
   __android_log_print(ANDROID_LOG_FATAL, "MOZ_Assert",
-                      "Assertion failure: %s, at %s:%d\n",
-                      aStr, aFilename, aLine);
+                      "Assertion failure: %s, at %s:%d in %s\n",
+                      aStr, aFilename, aLine, aFunction);
 #else
-  fprintf(stderr, "Assertion failure: %s, at %s:%d\n", aStr, aFilename, aLine);
+  fprintf(stderr, "Assertion failure: %s, at %s:%d in %s\n",
+          aStr, aFilename, aLine, aFunction);
 #if defined (MOZ_DUMP_ASSERTION_STACK)
   nsTraceRefcnt::WalkTheStack(stderr);
 #endif
   fflush(stderr);
 #endif
 }
 
 MOZ_MAYBE_UNUSED static MOZ_COLD MOZ_NEVER_INLINE void
-MOZ_ReportCrash(const char* aStr, const char* aFilename, int aLine)
+MOZ_ReportCrash(const char* aStr, const char* aFilename, const char* aFunction,
+                int aLine)
   MOZ_PRETEND_NORETURN_FOR_STATIC_ANALYSIS
 {
 #ifdef ANDROID
   __android_log_print(ANDROID_LOG_FATAL, "MOZ_CRASH",
-                      "Hit MOZ_CRASH(%s) at %s:%d\n", aStr, aFilename, aLine);
+                      "Hit MOZ_CRASH(%s) at %s:%d in %s\n",
+                      aStr, aFilename, aLine, aFunction);
 #else
-  fprintf(stderr, "Hit MOZ_CRASH(%s) at %s:%d\n", aStr, aFilename, aLine);
+  fprintf(stderr, "Hit MOZ_CRASH(%s) at %s:%d in %s\n",
+          aStr, aFilename, aLine, aFunction);
 #if defined(MOZ_DUMP_ASSERTION_STACK)
   nsTraceRefcnt::WalkTheStack(stderr);
 #endif
   fflush(stderr);
 #endif
 }
 
 /**
@@ -260,17 +265,17 @@ static MOZ_COLD MOZ_NORETURN MOZ_NEVER_I
 #  define MOZ_CRASH(...) \
      do { \
        MOZ_CRASH_ANNOTATE("MOZ_CRASH(" __VA_ARGS__ "), file " __FILE__); \
        MOZ_REALLY_CRASH(); \
      } while (0)
 #else
 #  define MOZ_CRASH(...) \
      do { \
-       MOZ_ReportCrash("" __VA_ARGS__, __FILE__, __LINE__); \
+       MOZ_ReportCrash("" __VA_ARGS__, __FILE__, __func__, __LINE__); \
        MOZ_CRASH_ANNOTATE("MOZ_CRASH(" __VA_ARGS__ "), file " __FILE__); \
        MOZ_REALLY_CRASH(); \
      } while (0)
 #endif
 
 MOZ_END_EXTERN_C
 
 /*
@@ -359,27 +364,28 @@ struct AssertionConditionType
 #  define MOZ_REPORT_ASSERTION_FAILURE(...) do { /* nothing */ } while (0)
 #endif
 
 /* First the single-argument form. */
 #define MOZ_ASSERT_HELPER1(expr) \
   do { \
     MOZ_VALIDATE_ASSERT_CONDITION_TYPE(expr); \
     if (MOZ_UNLIKELY(!MOZ_CHECK_ASSERT_ASSIGNMENT(expr))) { \
-      MOZ_REPORT_ASSERTION_FAILURE(#expr, __FILE__, __LINE__); \
+      MOZ_REPORT_ASSERTION_FAILURE(#expr, __FILE__, __func__, __LINE__); \
       MOZ_CRASH_ANNOTATE("MOZ_RELEASE_ASSERT(" #expr "), file " __FILE__); \
       MOZ_REALLY_CRASH(); \
     } \
   } while (0)
 /* Now the two-argument form. */
 #define MOZ_ASSERT_HELPER2(expr, explain) \
   do { \
     MOZ_VALIDATE_ASSERT_CONDITION_TYPE(expr); \
     if (MOZ_UNLIKELY(!MOZ_CHECK_ASSERT_ASSIGNMENT(expr))) { \
-      MOZ_REPORT_ASSERTION_FAILURE(#expr " (" explain ")", __FILE__, __LINE__); \
+      MOZ_REPORT_ASSERTION_FAILURE(#expr " (" explain ")", __FILE__, __func__, \
+                                   __LINE__); \
       MOZ_CRASH_ANNOTATE("MOZ_RELEASE_ASSERT(" #expr ") (" explain \
                          "), file " __FILE__); \
       MOZ_REALLY_CRASH(); \
     } \
   } while (0)
 
 #define MOZ_RELEASE_ASSERT_GLUE(a, b) a b
 #define MOZ_RELEASE_ASSERT(...) \
diff --git a/mfbt/Attributes.h b/mfbt/Attributes.h
--- a/mfbt/Attributes.h
+++ b/mfbt/Attributes.h
@@ -148,17 +148,18 @@
 #endif
 
 /*
  * MOZ_PRETEND_NORETURN_FOR_STATIC_ANALYSIS, specified at the end of a function
  * declaration, indicates that for the purposes of static analysis, this
  * function does not return.  (The function definition does not need to be
  * annotated.)
  *
- * MOZ_ReportCrash(const char* s, const char* file, int ln)
+ * MOZ_ReportCrash(const char* s, const char* file, const char* function,
+ *                 int ln)
  *   MOZ_PRETEND_NORETURN_FOR_STATIC_ANALYSIS
  *
  * Some static analyzers, like scan-build from clang, can use this information
  * to eliminate false positives.  From the upstream documentation of scan-build:
  * "This attribute is useful for annotating assertion handlers that actually
  * can return, but for the purpose of using the analyzer we want to pretend
  * that such functions do not return."
  *
