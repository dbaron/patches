From: L. David Baron <dbaron@dbaron.org>

Implement serialization of calc() values.

diff --git a/layout/style/nsCSSDeclaration.cpp b/layout/style/nsCSSDeclaration.cpp
--- a/layout/style/nsCSSDeclaration.cpp
+++ b/layout/style/nsCSSDeclaration.cpp
@@ -319,16 +319,95 @@ nsCSSDeclaration::AppendCSSValueToString
       /* If we're not at the final element, append a comma. */
       if (index + 1 != array->Count())
         aResult.AppendLiteral(", ");
     }
 
     /* Finally, append the closing parenthesis. */
     aResult.AppendLiteral(")");
   }
+  else if (eCSSUnit_Calc <= unit && unit <= eCSSUnit_Calc_Maximum) {
+    const nsCSSValue::Array* array = aValue.GetArrayValue();
+    if (eCSSUnit_Calc == unit) {
+      NS_ABORT_IF_FALSE(array->Count() == 1, "unexpected length");
+      aResult.AppendLiteral("calc(");
+      // When we make recursive calls, we pass eCSSProperty_UNKNOWN as
+      // the property so we can distinguish min() and max() at toplevel
+      // (where we need to serialize with a -moz- prefix) from min() and
+      // max() within calc() (where we don't).
+      AppendCSSValueToString(eCSSProperty_UNKNOWN, array->Item(0), aResult);
+      aResult.AppendLiteral(")");
+    } else if (eCSSUnit_Calc_Minimum == unit ||
+               eCSSUnit_Calc_Maximum == unit) {
+      if (aProperty == eCSSProperty_UNKNOWN) {
+        // min() or max() inside calc()
+        if (eCSSUnit_Calc_Minimum == unit) {
+          aResult.AppendLiteral("min(");
+        } else {
+          aResult.AppendLiteral("max(");
+        }
+      } else {
+        // min() or max() at toplevel
+        if (eCSSUnit_Calc_Minimum == unit) {
+          aResult.AppendLiteral("-moz-min(");
+        } else {
+          aResult.AppendLiteral("-moz-max(");
+        }
+      }
+
+      for (PRUint32 i = 0, i_end = array->Count(); i < i_end; ++i) {
+        if (i != 0) {
+          aResult.AppendLiteral(", ");
+        }
+        AppendCSSValueToString(aProperty, array->Item(i), aResult);
+      }
+
+      aResult.AppendLiteral(")");
+    } else if (eCSSUnit_Calc_Plus == unit ||
+               eCSSUnit_Calc_Minus == unit) {
+      NS_ABORT_IF_FALSE(array->Count() == 2, "unexpected length");
+      AppendCSSValueToString(aProperty, array->Item(0), aResult);
+      if (eCSSUnit_Calc_Plus == unit) {
+        aResult.AppendLiteral(" + ");
+      } else {
+        aResult.AppendLiteral(" - ");
+      }
+      nsCSSUnit subUnit = array->Item(0).GetUnit();
+      PRBool needParens = subUnit == eCSSUnit_Calc_Plus ||
+                          subUnit == eCSSUnit_Calc_Minus;
+      if (needParens)
+        aResult.AppendLiteral("(");
+      AppendCSSValueToString(aProperty, array->Item(1), aResult);
+      if (needParens)
+        aResult.AppendLiteral(")");
+    } else if (eCSSUnit_Calc_Times == unit ||
+               eCSSUnit_Calc_Divided == unit ||
+               eCSSUnit_Calc_Modulus == unit) {
+      nsCSSUnit subUnit = array->Item(0).GetUnit();
+      PRBool needParens = subUnit == eCSSUnit_Calc_Plus ||
+                          subUnit == eCSSUnit_Calc_Minus;
+      if (needParens)
+        aResult.AppendLiteral("(");
+      AppendCSSValueToString(aProperty, array->Item(0), aResult);
+      if (needParens)
+        aResult.AppendLiteral(")");
+
+      subUnit = array->Item(1).GetUnit();
+      needParens = subUnit == eCSSUnit_Calc_Plus ||
+                   subUnit == eCSSUnit_Calc_Minus ||
+                   subUnit == eCSSUnit_Calc_Times ||
+                   subUnit == eCSSUnit_Calc_Divided ||
+                   subUnit == eCSSUnit_Calc_Modulus;
+      if (needParens)
+        aResult.AppendLiteral("(");
+      AppendCSSValueToString(aProperty, array->Item(1), aResult);
+      if (needParens)
+        aResult.AppendLiteral(")");
+    }
+  }
   else if (eCSSUnit_Integer == unit) {
     nsAutoString tmpStr;
     tmpStr.AppendInt(aValue.GetIntValue(), 10);
     aResult.Append(tmpStr);
   }
   else if (eCSSUnit_Enumerated == unit) {
     if (eCSSProperty_text_decoration == aProperty) {
       PRInt32 intValue = aValue.GetIntValue();
@@ -530,16 +609,24 @@ nsCSSDeclaration::AppendCSSValueToString
     case eCSSUnit_Array:        break;
     case eCSSUnit_Attr:
     case eCSSUnit_Cubic_Bezier:
     case eCSSUnit_Counter:
     case eCSSUnit_Counters:     aResult.Append(PRUnichar(')'));    break;
     case eCSSUnit_Local_Font:   break;
     case eCSSUnit_Font_Format:  break;
     case eCSSUnit_Function:     break;
+    case eCSSUnit_Calc:         break;
+    case eCSSUnit_Calc_Plus:    break;
+    case eCSSUnit_Calc_Minus:   break;
+    case eCSSUnit_Calc_Times:   break;
+    case eCSSUnit_Calc_Divided: break;
+    case eCSSUnit_Calc_Modulus: break;
+    case eCSSUnit_Calc_Minimum: break;
+    case eCSSUnit_Calc_Maximum: break;
     case eCSSUnit_Integer:      break;
     case eCSSUnit_Enumerated:   break;
     case eCSSUnit_EnumColor:    break;
     case eCSSUnit_Color:        break;
     case eCSSUnit_Percent:      aResult.Append(PRUnichar('%'));    break;
     case eCSSUnit_Number:       break;
     case eCSSUnit_Gradient:     break;
 
