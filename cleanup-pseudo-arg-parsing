From: L. David Baron <dbaron@dbaron.org>

Clean up SkipUntil handling in parsing of pseudo-classes with arguments.  (I haven't found any cases where this actually changes behavior, but it's needed for the next patch.)  r=bzbarsky

diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -3166,27 +3166,32 @@ CSSParserImpl::ParsePseudoSelector(PRInt
     nsSelectorParsingStatus parsingStatus =
       ParseNegatedSimpleSelector(aDataMask, aSelector);
     if (eSelectorParsingStatus_Continue != parsingStatus) {
       return parsingStatus;
     }
   }
   else if (!parsingPseudoElement && isPseudoClass) {
     aDataMask |= SEL_MASK_PCLASS;
-    if (nsCSSPseudoClasses::HasStringArg(pseudo)) {
-      nsSelectorParsingStatus parsingStatus =
-        ParsePseudoClassWithIdentArg(aSelector, pseudo, pseudoClassType);
+    if (eCSSToken_Function == mToken.mType) {
+      nsSelectorParsingStatus parsingStatus;
+      if (nsCSSPseudoClasses::HasStringArg(pseudo)) {
+        parsingStatus =
+          ParsePseudoClassWithIdentArg(aSelector, pseudo, pseudoClassType);
+      }
+      else {
+        NS_ABORT_IF_FALSE(nsCSSPseudoClasses::HasNthPairArg(pseudo),
+                          "unexpected pseudo with function token");
+        parsingStatus =
+          ParsePseudoClassWithNthPairArg(aSelector, pseudo, pseudoClassType);
+      }
       if (eSelectorParsingStatus_Continue != parsingStatus) {
-        return parsingStatus;
-      }
-    }
-    else if (nsCSSPseudoClasses::HasNthPairArg(pseudo)) {
-      nsSelectorParsingStatus parsingStatus =
-        ParsePseudoClassWithNthPairArg(aSelector, pseudo, pseudoClassType);
-      if (eSelectorParsingStatus_Continue != parsingStatus) {
+        if (eSelectorParsingStatus_Error == parsingStatus) {
+          SkipUntil(')');
+        }
         return parsingStatus;
       }
     }
     else {
       aSelector.AddPseudoClass(pseudo, pseudoClassType);
     }
   }
   else if (isPseudoElement || isAnonBox) {
@@ -3339,36 +3344,34 @@ CSSParserImpl::ParsePseudoClassWithIdent
   if (! GetToken(PR_TRUE)) { // premature eof
     REPORT_UNEXPECTED_EOF(PEPseudoClassArgEOF);
     return eSelectorParsingStatus_Error;
   }
   // We expect an identifier with a language abbreviation
   if (eCSSToken_Ident != mToken.mType) {
     REPORT_UNEXPECTED_TOKEN(PEPseudoClassArgNotIdent);
     UngetToken();
-    // XXX Call SkipUntil to the next ")"?
-    return eSelectorParsingStatus_Error;
+    return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
   }
 
   // -moz-locale-dir can only have values of 'ltr' or 'rtl'.
   if (aPseudo == nsCSSPseudoClasses::mozLocaleDir) {
     if (!mToken.mIdent.EqualsLiteral("ltr") &&
         !mToken.mIdent.EqualsLiteral("rtl")) {
-      return eSelectorParsingStatus_Error;
+      return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
     }
   }
 
   // Add the pseudo with the language parameter
   aSelector.AddPseudoClass(aPseudo, aType, mToken.mIdent.get());
 
   // close the parenthesis
   if (!ExpectSymbol(')', PR_TRUE)) {
     REPORT_UNEXPECTED_TOKEN(PEPseudoClassNoClose);
-    // XXX Call SkipUntil to the next ")"?
-    return eSelectorParsingStatus_Error;
+    return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
   }
 
   return eSelectorParsingStatus_Continue;
 }
 
 CSSParserImpl::nsSelectorParsingStatus
 CSSParserImpl::ParsePseudoClassWithNthPairArg(nsCSSSelector& aSelector,
                                               nsIAtom*       aPseudo,
@@ -3419,42 +3422,39 @@ CSSParserImpl::ParsePseudoClassWithNthPa
     else if (mToken.mIdent.EqualsIgnoreCase("n")) {
       numbers[0] = 1;
     }
     else if (mToken.mIdent.EqualsIgnoreCase("-n")) {
       numbers[0] = -1;
     }
     else {
       REPORT_UNEXPECTED_TOKEN(PEPseudoClassArgNotNth);
-      // XXX Call SkipUntil to the next ")"?
-      return eSelectorParsingStatus_Error;
+      return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
     }
   }
   else if (eCSSToken_Number == mToken.mType) {
     if (!mToken.mIntegerValid) {
       REPORT_UNEXPECTED_TOKEN(PEPseudoClassArgNotNth);
-      // XXX Call SkipUntil to the next ")"?
-      return eSelectorParsingStatus_Error;
+      return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
     }
     numbers[1] = mToken.mInteger;
     lookForB = PR_FALSE;
   }
   else if (eCSSToken_Dimension == mToken.mType) {
     if (!mToken.mIntegerValid || !mToken.mIdent.EqualsIgnoreCase("n")) {
       REPORT_UNEXPECTED_TOKEN(PEPseudoClassArgNotNth);
-      // XXX Call SkipUntil to the next ")"?
-      return eSelectorParsingStatus_Error;
+      return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
     }
     numbers[0] = mToken.mInteger;
   }
   // XXX If it's a ')', is that valid?  (as 0n+0)
   else {
     REPORT_UNEXPECTED_TOKEN(PEPseudoClassArgNotNth);
-    // XXX Call SkipUntil to the next ")" (unless this is one already)?
-    return eSelectorParsingStatus_Error;
+    UngetToken();
+    return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
   }
 
   if (! GetToken(PR_TRUE)) {
     REPORT_UNEXPECTED_EOF(PEPseudoClassArgEOF);
     return eSelectorParsingStatus_Error;
   }
   if (lookForB && !mToken.IsSymbol(')')) {
     // The '+' or '-' sign can optionally be separated by whitespace.
@@ -3470,29 +3470,27 @@ CSSParserImpl::ParsePseudoClassWithNthPa
       if (! GetToken(PR_TRUE)) {
         REPORT_UNEXPECTED_EOF(PEPseudoClassArgEOF);
         return eSelectorParsingStatus_Error;
       }
     }
     if (eCSSToken_Number != mToken.mType ||
         !mToken.mIntegerValid || mToken.mHasSign == haveSign) {
       REPORT_UNEXPECTED_TOKEN(PEPseudoClassArgNotNth);
-      // XXX Call SkipUntil to the next ")"?
-      return eSelectorParsingStatus_Error;
+      return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
     }
     numbers[1] = mToken.mInteger * sign;
     if (! GetToken(PR_TRUE)) {
       REPORT_UNEXPECTED_EOF(PEPseudoClassArgEOF);
       return eSelectorParsingStatus_Error;
     }
   }
   if (!mToken.IsSymbol(')')) {
     REPORT_UNEXPECTED_TOKEN(PEPseudoClassNoClose);
-    // XXX Call SkipUntil to the next ")"?
-    return eSelectorParsingStatus_Error;
+    return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
   }
   aSelector.AddPseudoClass(aPseudo, aType, numbers);
   return eSelectorParsingStatus_Continue;
 }
 
 
 /**
  * This is the format for selectors:
diff --git a/layout/style/test/test_selectors.html b/layout/style/test/test_selectors.html
--- a/layout/style/test/test_selectors.html
+++ b/layout/style/test/test_selectors.html
@@ -676,16 +676,19 @@ function run() {
                           xul_default_ns + html_ns);
 
     // Test -moz-locale-dir
     test_parseable(":-moz-locale-dir(ltr)");
     test_parseable(":-moz-locale-dir(rtl)");
 
     test_balanced_unparseable(":-moz-locale-dir(other)");
     test_balanced_unparseable(":-moz-locale-dir()");
+    test_balanced_unparseable(":-moz-locale-dir(())");
+    test_balanced_unparseable(":-moz-locale-dir(3())");
+    test_balanced_unparseable(":-moz-locale-dir(f{})");
     test_balanced_unparseable(":-moz-locale-dir('ltr')");
     test_balanced_unparseable(":-moz-locale-dir(ltr, other)");
     test_balanced_unparseable(":-moz-locale-dir");
 
     // Test -moz-lwtheme and -moz-lwtheme-[darktext|brighttext]
     test_parseable(":-moz-lwtheme");
     test_parseable(":-moz-lwtheme-brighttext");
     test_parseable(":-moz-lwtheme-darktext");
@@ -795,16 +798,19 @@ function run() {
     test_selector_in_html("[id=\\32]", spans,
                           bodychildset([2]), bodychildset([0, 1, 3]));
     test_selector_in_html("#\\2", spans,
                           bodychildset([3]), bodychildset([0, 1, 2]));
     test_selector_in_html("[id=\\2]", spans,
                           bodychildset([3]), bodychildset([0, 1, 2]));
     test_balanced_unparseable("#2");
 
+    test_balanced_unparseable(":not(:nth-child(2k))");
+    test_balanced_unparseable(":not(:nth-child(()))");
+
     run_deferred_tests();
 }
 
 var deferred_tests = [];
 
 function defer_clonedoc_tests(docurl, onloadfunc)
 {
     deferred_tests.push( { docurl: docurl, onloadfunc: onloadfunc } );
