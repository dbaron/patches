From: L. David Baron <dbaron@dbaron.org>

Add support for calc() to ComputeWidthDependentValue and ComputeHeightDependentValue.  Also change calc() handling of percents from using round to using floor, which changes our handling of percents on 'width' back to using floor, reverting an earlier change in this bug.  (Bug 585715)  r=bzbarsky

diff --git a/layout/base/nsLayoutUtils.cpp b/layout/base/nsLayoutUtils.cpp
--- a/layout/base/nsLayoutUtils.cpp
+++ b/layout/base/nsLayoutUtils.cpp
@@ -2142,22 +2142,18 @@ nsLayoutUtils::ComputeWidthDependentValu
                  nscoord              aContainingBlockWidth,
                  const nsStyleCoord&  aCoord)
 {
   NS_WARN_IF_FALSE(aContainingBlockWidth != NS_UNCONSTRAINEDSIZE,
                    "have unconstrained width; this should only result from "
                    "very large sizes, not attempts at intrinsic width "
                    "calculation");
 
-  if (eStyleUnit_Coord == aCoord.GetUnit()) {
-    return aCoord.GetCoordValue();
-  }
-  if (eStyleUnit_Percent == aCoord.GetUnit()) {
-    return NSToCoordFloorClamped(aContainingBlockWidth *
-                                 aCoord.GetPercentValue());
+  if (aCoord.IsCoordPercentCalcUnit()) {
+    return nsRuleNode::ComputeCoordPercentCalc(aCoord, aContainingBlockWidth);
   }
   NS_ASSERTION(aCoord.GetUnit() == eStyleUnit_None ||
                aCoord.GetUnit() == eStyleUnit_Auto,
                "unexpected width value");
   return 0;
 }
 
 /* static */ nscoord
@@ -2220,35 +2216,32 @@ nsLayoutUtils::ComputeWidthValue(
 }
 
 
 /* static */ nscoord
 nsLayoutUtils::ComputeHeightDependentValue(
                  nscoord              aContainingBlockHeight,
                  const nsStyleCoord&  aCoord)
 {
-  if (eStyleUnit_Coord == aCoord.GetUnit()) {
-    return aCoord.GetCoordValue();
+  // XXXldb Some callers explicitly check aContainingBlockHeight
+  // against NS_AUTOHEIGHT *and* unit against eStyleUnit_Percent or
+  // calc()s containing percents before calling this function.
+  // However, it would be much more likely to catch problems without
+  // the unit conditions.
+  // XXXldb Many callers pass a non-'auto' containing block height when
+  // according to CSS2.1 they should be passing 'auto'.
+  NS_PRECONDITION(NS_AUTOHEIGHT != aContainingBlockHeight ||
+                  (aCoord.GetUnit() != eStyleUnit_Percent &&
+                   !(aCoord.IsCalcUnit() && aCoord.CalcHasPercent())),
+                  "unexpected containing block height");
+
+  if (aCoord.IsCoordPercentCalcUnit()) {
+    return nsRuleNode::ComputeCoordPercentCalc(aCoord, aContainingBlockHeight);
   }
-  if (eStyleUnit_Percent == aCoord.GetUnit()) {
-    // XXXldb Some callers explicitly check aContainingBlockHeight
-    // against NS_AUTOHEIGHT *and* unit against eStyleUnit_Percent
-    // before calling this function, so this assertion probably needs to
-    // be inside the percentage case.  However, it would be much more
-    // likely to catch problems if it were at the start of the function.
-    // XXXldb Many callers pass a non-'auto' containing block height when
-    // according to CSS2.1 they should be passing 'auto'.
-    NS_PRECONDITION(NS_AUTOHEIGHT != aContainingBlockHeight,
-                    "unexpected 'containing block height'");
-
-    if (NS_AUTOHEIGHT != aContainingBlockHeight) {
-      return NSToCoordFloorClamped(aContainingBlockHeight *
-                                   aCoord.GetPercentValue());
-    }
-  }
+
   NS_ASSERTION(aCoord.GetUnit() == eStyleUnit_None ||
                aCoord.GetUnit() == eStyleUnit_Auto,
                "unexpected height value");
   return 0;
 }
 
 inline PRBool
 IsAutoHeight(const nsStyleCoord &aCoord, nscoord aCBHeight)
diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -530,18 +530,18 @@ struct ComputeComputedCalcCalcOps : publ
     : mPercentageBasis(aPercentageBasis)
   {
   }
 
   result_type ComputeLeafValue(const nsStyleCoord& aValue)
   {
     nscoord result;
     if (aValue.GetUnit() == eStyleUnit_Percent) {
-      result = NSCoordSaturatingMultiply(mPercentageBasis,
-                                         aValue.GetPercentValue());
+      result =
+        NSToCoordFloorClamped(mPercentageBasis * aValue.GetPercentValue());
     } else {
       result = aValue.GetCoordValue();
     }
     return result;
   }
 };
 
 // This is our public API for handling calc() expressions that involve
