From: L. David Baron <dbaron@dbaron.org>

Add support for unprefixed calc(), and prefer serializing to unprefixed form.

diff --git a/layout/style/CSSCalc.h b/layout/style/CSSCalc.h
--- a/layout/style/CSSCalc.h
+++ b/layout/style/CSSCalc.h
@@ -251,17 +251,17 @@ static void
 SerializeCalcInternal(const typename CalcOps::input_type& aValue, CalcOps &aOps);
 
 // Serialize the toplevel value in a calc() tree.  See big comment
 // above.
 template <class CalcOps>
 static void
 SerializeCalc(const typename CalcOps::input_type& aValue, CalcOps &aOps)
 {
-  aOps.Append("-moz-calc(");
+  aOps.Append("calc(");
   nsCSSUnit unit = CalcOps::GetUnit(aValue);
   if (unit == eCSSUnit_Calc) {
     const typename CalcOps::input_array_type *array = aValue.GetArrayValue();
     NS_ABORT_IF_FALSE(array->Count() == 1, "unexpected length");
     SerializeCalcInternal(array->Item(0), aOps);
   } else {
     SerializeCalcInternal(aValue, aOps);
   }
diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -4602,17 +4602,18 @@ CSSParserImpl::ParseVariant(nsCSSValue& 
         SkipUntil(')');
         return false;
       }
       return true;
     }
   }
   if ((aVariantMask & VARIANT_CALC) &&
       (eCSSToken_Function == tk->mType) &&
-      tk->mIdent.LowerCaseEqualsLiteral("-moz-calc")) {
+      (tk->mIdent.LowerCaseEqualsLiteral("calc") ||
+       tk->mIdent.LowerCaseEqualsLiteral("-moz-calc"))) {
     // calc() currently allows only lengths and percents inside it.
     return ParseCalc(aValue, aVariantMask & VARIANT_LP);
   }
 
   UngetToken();
   return false;
 }
 
@@ -4911,17 +4912,18 @@ CSSParserImpl::ParseGradient(nsCSSValue&
   switch (ty) {
   case eCSSToken_Percentage:
   case eCSSToken_Number:
   case eCSSToken_Dimension:
     haveGradientLine = true;
     break;
 
   case eCSSToken_Function:
-    if (id.LowerCaseEqualsLiteral("-moz-calc")) {
+    if (id.LowerCaseEqualsLiteral("calc") ||
+        id.LowerCaseEqualsLiteral("-moz-calc")) {
       haveGradientLine = true;
       break;
     }
     // fall through
   case eCSSToken_ID:
   case eCSSToken_Ref:
     // this is a color
     break;
@@ -6000,17 +6002,18 @@ CSSParserImpl::ParseBackgroundItem(CSSPa
       if (!ParseSingleValueProperty(aState.mImage->mValue,
                                     eCSSProperty_background_image)) {
         return false;
       }
     } else if (tt == eCSSToken_Dimension ||
                tt == eCSSToken_Number ||
                tt == eCSSToken_Percentage ||
                (tt == eCSSToken_Function &&
-                mToken.mIdent.LowerCaseEqualsLiteral("-moz-calc"))) {
+                (mToken.mIdent.LowerCaseEqualsLiteral("calc") ||
+                 mToken.mIdent.LowerCaseEqualsLiteral("-moz-calc")))) {
       if (havePosition)
         return false;
       havePosition = true;
       if (!ParseBackgroundPositionValues(aState.mPosition->mValue, false)) {
         return false;
       }
     } else {
       if (haveColor)
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -1375,17 +1375,17 @@ nsComputedDOMStyle::DoGetBackgroundColor
 
 
 static void
 SetValueToCalc(const nsStyleCoord::Calc *aCalc, nsROCSSPrimitiveValue *aValue)
 {
   nsRefPtr<nsROCSSPrimitiveValue> val = new nsROCSSPrimitiveValue();
   nsAutoString tmp, result;
 
-  result.AppendLiteral("-moz-calc(");
+  result.AppendLiteral("calc(");
 
   val->SetAppUnits(aCalc->mLength);
   val->GetCssText(tmp);
   result.Append(tmp);
 
   if (aCalc->mHasPercent) {
     result.AppendLiteral(" + ");
 
