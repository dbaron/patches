From: Zack Weinberg <zweinberg@mozilla.com>

Fix DEBUG-only crash parsing empty 'src' descriptor of @font-face rule.  (Bug 511304)  r=dbaron

diff --git a/layout/style/crashtests/crashtests.list b/layout/style/crashtests/crashtests.list
--- a/layout/style/crashtests/crashtests.list
+++ b/layout/style/crashtests/crashtests.list
@@ -37,8 +37,9 @@ load 473720-1.html
 load 473892-1.html
 load 473914-1.html
 load 478321-1.xhtml
 skip load long-url-list-stack-overflow.html # skipped due to being slow (bug 477490)
 load 495269-1.html
 load 495269-2.html
 load 509155-1.html
 load 509156-1.html
+load font-face-truncated-src.html 
diff --git a/layout/style/crashtests/font-face-truncated-src.html b/layout/style/crashtests/font-face-truncated-src.html
new file mode 100644
--- /dev/null
+++ b/layout/style/crashtests/font-face-truncated-src.html
@@ -0,0 +1,2 @@
+<!doctype html>
+<style>@font-face { src:</style>
diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -7916,20 +7916,25 @@ CSSParserImpl::ParseFontSrc(nsCSSValue& 
     } else {
       return PR_FALSE;
     }
 
     if (!ExpectSymbol(',', PR_TRUE))
       break;
   }
 
+  if (values.Length() == 0)
+    return PR_FALSE;
+
   nsRefPtr<nsCSSValue::Array> srcVals
     = nsCSSValue::Array::Create(values.Length());
-  if (!srcVals)
-    return PR_FALSE;
+  if (!srcVals) {
+    mScanner.SetLowLevelError(NS_ERROR_OUT_OF_MEMORY);
+    return PR_FALSE;
+  }
 
   PRUint32 i;
   for (i = 0; i < values.Length(); i++)
     srcVals->Item(i) = values[i];
   aValue.SetArrayValue(srcVals, eCSSUnit_Array);
   return PR_TRUE;
 }
 
diff --git a/layout/style/test/test_font_face_parser.html b/layout/style/test/test_font_face_parser.html
--- a/layout/style/test/test_font_face_parser.html
+++ b/layout/style/test/test_font_face_parser.html
@@ -119,16 +119,17 @@
     { rule: _("src: local(\"老鼠\"), url(\"/fonts/Mouse\") format(\"truetype\");"),
       d: { "src" : "local(\"老鼠\"), url(\"/fonts/Mouse\") format(\"truetype\")" } },
 
     // Correct but unusual src:
     { rule: _("src: local(Hoefler Text);"), 
       d: {"src" : "local(\"Hoefler Text\")"}, noncanonical: true },
 
     // Incorrect src:
+    { rule: _("src:"), d: {} },
     { rule: _("src: \"/fonts/Mouse\";"), d: {} },
     { rule: _("src: /fonts/Mouse;"), d: {} },
     { rule: _("src: url(\"/fonts/Mouse\") format(truetype);"), d: {} },
     { rule: _("src: url(\"/fonts/Mouse\") format(\"truetype\",opentype);"), d: {} },
     { rule: _("src: local(*);"), d: {} },
     { rule: _("src: format(\"truetype\");"), d: {} },
     { rule: _("src: local(Mouse) format(\"truetype\");"), d: {} },
     { rule: _("src: local(Mouse, Rat);"), d: {} },
