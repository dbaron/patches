From: L. David Baron <dbaron@dbaron.org>

Don't count text towards the line threshold if it's not going to be inflated.  (Bug 760098)

diff --git a/layout/base/nsLayoutUtils.cpp b/layout/base/nsLayoutUtils.cpp
--- a/layout/base/nsLayoutUtils.cpp
+++ b/layout/base/nsLayoutUtils.cpp
@@ -5560,18 +5560,18 @@ nsLayoutUtils::FontSizeInflationInner(co
 
   if (maxRatio > 1.0 && inflationRatio > maxRatio) {
     return maxRatio;
   } else {
     return inflationRatio;
   }
 }
 
-static bool
-ShouldInflateFontsForContainer(const nsIFrame *aFrame)
+/* static */ bool
+nsLayoutUtils::ShouldInflateFontsForContainer(const nsIFrame *aFrame)
 {
   // We only want to inflate fonts for text that is in a place
   // with room to expand.  The question is what the best heuristic for
   // that is...
   // For now, we're going to use NS_FRAME_IN_CONSTRAINED_HEIGHT, which
   // indicates whether the frame is inside something with a constrained
   // height (propagating down the tree), but the propagation stops when
   // we hit overflow-y: scroll or auto.
diff --git a/layout/base/nsLayoutUtils.h b/layout/base/nsLayoutUtils.h
--- a/layout/base/nsLayoutUtils.h
+++ b/layout/base/nsLayoutUtils.h
@@ -1757,16 +1757,25 @@ public:
   /**
    * Return the font size inflation *ratio* for a given frame.  This is
    * the factor by which font sizes should be inflated; it is never
    * smaller than 1.
    */
   static float FontSizeInflationFor(const nsIFrame *aFrame);
 
   /**
+   * Should a frame whose nearest ancestor-or-self container for font
+   * size inflation (see nsIFrame::IsContainerForFontSizeInflation) have
+   * inflation applied.  (This considers things like whether it's in a
+   * constrained height situation or whether line breaking is
+   * forbidden.)
+   */
+  static bool ShouldInflateFontsForContainer(const nsIFrame *aFrame);
+
+  /**
    * Perform the first half of the computation of FontSizeInflationFor
    * (see above).
    * This includes determining whether inflation should be performed
    * within this container and returning 0 if it should not be.
    *
    * The result is guaranteed not to vary between line participants
    * (inlines, text frames) within a line.
    *
diff --git a/layout/generic/nsFontInflationData.cpp b/layout/generic/nsFontInflationData.cpp
--- a/layout/generic/nsFontInflationData.cpp
+++ b/layout/generic/nsFontInflationData.cpp
@@ -178,26 +178,28 @@ ComputeDescendantWidth(const nsHTMLReflo
 void
 nsFontInflationData::UpdateWidth(const nsHTMLReflowState &aReflowState)
 {
   nsIFrame *bfc = aReflowState.frame;
   NS_ASSERTION(bfc->GetStateBits() & NS_FRAME_FONT_INFLATION_FLOW_ROOT,
                "must be block formatting context");
 
   nsIFrame *firstInflatableDescendant =
-             FindEdgeInflatableFrameIn(bfc, eFromStart);
+             FindEdgeInflatableFrameIn(bfc, eFromStart,
+                                       true /* doesn't matter */);
   if (!firstInflatableDescendant) {
     mTextAmount = 0;
     mTextThreshold = 0; // doesn't matter
     mTextDirty = false;
     mInflationEnabled = false;
     return;
   }
   nsIFrame *lastInflatableDescendant =
-             FindEdgeInflatableFrameIn(bfc, eFromEnd);
+             FindEdgeInflatableFrameIn(bfc, eFromEnd,
+                                       true /* doesn't matter */);
   NS_ABORT_IF_FALSE(!firstInflatableDescendant == !lastInflatableDescendant,
                     "null-ness should match; NearestCommonAncestorFirstInFlow"
                     " will crash when passed null");
 
   // Particularly when we're computing for the root BFC, the width of
   // nca might differ significantly for the width of bfc.
   nsIFrame *nca = NearestCommonAncestorFirstInFlow(firstInflatableDescendant,
                                                    lastInflatableDescendant,
@@ -222,73 +224,86 @@ nsFontInflationData::UpdateWidth(const n
 
   mNCAWidth = newNCAWidth;
   mTextThreshold = newTextThreshold;
   mInflationEnabled = mTextAmount >= mTextThreshold;
 }
 
 /* static */ nsIFrame*
 nsFontInflationData::FindEdgeInflatableFrameIn(nsIFrame* aFrame,
-                                               SearchDirection aDirection)
+                                               SearchDirection aDirection,
+                                               bool aNearestContainerUsesInflation)
 {
   // NOTE: This function has a similar structure to ScanTextIn!
 
   // FIXME: Should probably only scan the text that's actually going to
   // be inflated!
 
-  nsIFormControlFrame* fcf = do_QueryFrame(aFrame);
-  if (fcf) {
-    return aFrame;
+  if (aFrame->IsContainerForFontSizeInflation()) {
+    aNearestContainerUsesInflation =
+      nsLayoutUtils::ShouldInflateFontsForContainer(aFrame);
   }
 
-  // FIXME: aDirection!
+  if (aNearestContainerUsesInflation) {
+    nsIFormControlFrame* fcf = do_QueryFrame(aFrame);
+    if (fcf) {
+      return aFrame;
+    }
+  }
+
   nsAutoTArray<FrameChildList, 4> lists;
   aFrame->GetChildLists(&lists);
   for (uint32_t i = 0, len = lists.Length(); i < len; ++i) {
     const nsFrameList& list =
       lists[(aDirection == eFromStart) ? i : len - i - 1].mList;
     for (nsIFrame *kid = (aDirection == eFromStart) ? list.FirstChild()
                                                     : list.LastChild();
          kid;
          kid = (aDirection == eFromStart) ? kid->GetNextSibling()
                                           : kid->GetPrevSibling()) {
       if (kid->GetStateBits() & NS_FRAME_FONT_INFLATION_FLOW_ROOT) {
         // Goes in a different set of inflation data.
         continue;
       }
 
       if (kid->GetType() == nsGkAtoms::textFrame) {
-        nsIContent *content = kid->GetContent();
-        if (content && kid == content->GetPrimaryFrame()) {
-          uint32_t len = nsTextFrameUtils::
-            ComputeApproximateLengthWithWhitespaceCompression(
-              content, kid->StyleText());
-          if (len != 0) {
-            return kid;
+        if (aNearestContainerUsesInflation) {
+          nsIContent *content = kid->GetContent();
+          if (content && kid == content->GetPrimaryFrame()) {
+            uint32_t len = nsTextFrameUtils::
+              ComputeApproximateLengthWithWhitespaceCompression(
+                content, kid->StyleText());
+            if (len != 0) {
+              return kid;
+            }
           }
         }
       } else {
         nsIFrame *kidResult =
-          FindEdgeInflatableFrameIn(kid, aDirection);
+          FindEdgeInflatableFrameIn(kid, aDirection,
+                                    aNearestContainerUsesInflation);
         if (kidResult) {
           return kidResult;
         }
       }
     }
   }
 
   return nullptr;
 }
 
 void
 nsFontInflationData::ScanText()
 {
   mTextDirty = false;
   mTextAmount = 0;
-  ScanTextIn(mBFCFrame);
+  NS_ASSERTION(mBFCFrame->IsContainerForFontSizeInflation(),
+               "the second parameter to ScanTextIn doesn't matter when "
+               "the first parameter is a container, which we assume here");
+  ScanTextIn(mBFCFrame, true /* doesn't matter */);
   mInflationEnabled = mTextAmount >= mTextThreshold;
 }
 
 static uint32_t
 DoCharCountOfLargestOption(nsIFrame *aContainer)
 {
   uint32_t result = 0;
   for (nsIFrame* option = aContainer->GetFirstPrincipalChild();
@@ -318,69 +333,78 @@ DoCharCountOfLargestOption(nsIFrame *aCo
 static uint32_t
 CharCountOfLargestOption(nsIFrame *aListControlFrame)
 {
   return DoCharCountOfLargestOption(
     static_cast<nsListControlFrame*>(aListControlFrame)->GetOptionsContainer());
 }
 
 void
-nsFontInflationData::ScanTextIn(nsIFrame *aFrame)
+nsFontInflationData::ScanTextIn(nsIFrame *aFrame,
+                                bool aNearestContainerUsesInflation)
 {
   // NOTE: This function has a similar structure to FindEdgeInflatableFrameIn!
 
-  // FIXME: Should probably only scan the text that's actually going to
-  // be inflated!
+  if (aFrame->IsContainerForFontSizeInflation()) {
+    aNearestContainerUsesInflation =
+      nsLayoutUtils::ShouldInflateFontsForContainer(aFrame);
+  }
 
   nsIFrame::ChildListIterator lists(aFrame);
   for (; !lists.IsDone(); lists.Next()) {
     nsFrameList::Enumerator kids(lists.CurrentList());
     for (; !kids.AtEnd(); kids.Next()) {
       nsIFrame *kid = kids.get();
       if (kid->GetStateBits() & NS_FRAME_FONT_INFLATION_FLOW_ROOT) {
         // Goes in a different set of inflation data.
         continue;
       }
 
+      nscoord addedTextAmount = 0;
+
       nsIAtom *fType = kid->GetType();
       if (fType == nsGkAtoms::textFrame) {
         nsIContent *content = kid->GetContent();
         if (content && kid == content->GetPrimaryFrame()) {
           uint32_t len = nsTextFrameUtils::
             ComputeApproximateLengthWithWhitespaceCompression(
               content, kid->StyleText());
           if (len != 0) {
             nscoord fontSize = kid->StyleFont()->mFont.size;
             if (fontSize > 0) {
-              mTextAmount += fontSize * len;
+              addedTextAmount += fontSize * len;
             }
           }
         }
       } else if (fType == nsGkAtoms::textInputFrame) {
         // We don't want changes to the amount of text in a text input
         // to change what we count towards inflation.
         nscoord fontSize = kid->StyleFont()->mFont.size;
         int32_t charCount = static_cast<nsTextControlFrame*>(kid)->GetCols();
-        mTextAmount += charCount * fontSize;
+        addedTextAmount += charCount * fontSize;
       } else if (fType == nsGkAtoms::comboboxControlFrame) {
         // See textInputFrame above (with s/amount of text/selected option/).
         // Don't just recurse down to the list control inside, since we
         // need to exclude the display frame.
         nscoord fontSize = kid->StyleFont()->mFont.size;
         int32_t charCount = CharCountOfLargestOption(
           static_cast<nsComboboxControlFrame*>(kid)->GetDropDown());
-        mTextAmount += charCount * fontSize;
+        addedTextAmount += charCount * fontSize;
       } else if (fType == nsGkAtoms::listControlFrame) {
         // See textInputFrame above (with s/amount of text/selected option/).
         nscoord fontSize = kid->StyleFont()->mFont.size;
         int32_t charCount = CharCountOfLargestOption(kid);
-        mTextAmount += charCount * fontSize;
+        addedTextAmount += charCount * fontSize;
       } else {
         // recursive step
-        ScanTextIn(kid);
+        ScanTextIn(kid, aNearestContainerUsesInflation);
+      }
+
+      if (aNearestContainerUsesInflation) {
+        mTextAmount += addedTextAmount;
       }
 
       if (mTextAmount >= mTextThreshold) {
         return;
       }
     }
   }
 }
diff --git a/layout/generic/nsFontInflationData.h b/layout/generic/nsFontInflationData.h
--- a/layout/generic/nsFontInflationData.h
+++ b/layout/generic/nsFontInflationData.h
@@ -41,26 +41,27 @@ private:
   nsFontInflationData(nsIFrame* aBFCFrame);
 
   nsFontInflationData(const nsFontInflationData&) MOZ_DELETE;
   void operator=(const nsFontInflationData&) MOZ_DELETE;
 
   void UpdateWidth(const nsHTMLReflowState &aReflowState);
   enum SearchDirection { eFromStart, eFromEnd };
   static nsIFrame* FindEdgeInflatableFrameIn(nsIFrame *aFrame,
-                                             SearchDirection aDirection);
+                                             SearchDirection aDirection,
+                                             bool aNearestContainerUsesInflation);
 
   void MarkTextDirty() { mTextDirty = true; }
   void ScanText();
   // Scan text in the subtree rooted at aFrame.  Increment mTextAmount
   // by multiplying the number of characters found by the font size
   // (yielding the width that would be occupied by the characters if
   // they were all em squares).  But stop scanning if mTextAmount
   // crosses mTextThreshold.
-  void ScanTextIn(nsIFrame *aFrame);
+  void ScanTextIn(nsIFrame *aFrame, bool aNearestContainerUsesInflation);
 
   static const nsIFrame* FlowRootFor(const nsIFrame *aFrame)
   {
     while (!(aFrame->GetStateBits() & NS_FRAME_FONT_INFLATION_FLOW_ROOT)) {
       aFrame = aFrame->GetParent();
     }
     return aFrame;
   }
