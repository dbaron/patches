From: L. David Baron <dbaron@dbaron.org>

Set inflation container to null during parts of intrinsic sizing that should not have inflation applied.  (Bug 706609)

TODO: audit all callers of nsIFrame::GetMinWidth and nsIFrame::GetPrefWidth.

TODO: Make tests pass.

diff --git a/layout/base/nsLayoutUtils.cpp b/layout/base/nsLayoutUtils.cpp
--- a/layout/base/nsLayoutUtils.cpp
+++ b/layout/base/nsLayoutUtils.cpp
@@ -2258,16 +2258,24 @@ nsLayoutUtils::IntrinsicForContainer(nsR
 
 #ifdef DEBUG_INTRINSIC_WIDTH
   nsFrame::IndentBy(stdout, gNoiseIndent);
   static_cast<nsFrame*>(aFrame)->ListTag(stdout);
   printf(" %s intrinsic width for container:\n",
          aType == MIN_WIDTH ? "min" : "pref");
 #endif
 
+  nsPresContext *presContext = aFrame->PresContext();
+  AutoRestore<nsIFrame*> ar(presContext->mCurrentInflationContainer);
+  if (nsLayoutUtils::IsContainerForFontSizeInflation(aFrame)) {
+    // If we're a container for font size inflation, then shrink
+    // wrapping inside of us should not apply font size inflation.
+    presContext->mCurrentInflationContainer = nsnull;
+  }
+
   nsIFrame::IntrinsicWidthOffsetData offsets =
     aFrame->IntrinsicWidthOffsets(aRenderingContext);
 
   const nsStylePosition *stylePos = aFrame->GetStylePosition();
   PRUint8 boxSizing = stylePos->mBoxSizing;
   const nsStyleCoord &styleWidth = stylePos->mWidth;
   const nsStyleCoord &styleMinWidth = stylePos->mMinWidth;
   const nsStyleCoord &styleMaxWidth = stylePos->mMaxWidth;
@@ -2859,27 +2867,33 @@ nsLayoutUtils::ComputeAutoSizeWithIntrin
 
   return nsSize(width, height);
 }
 
 /* static */ nscoord
 nsLayoutUtils::MinWidthFromInline(nsIFrame* aFrame,
                                   nsRenderingContext* aRenderingContext)
 {
+  NS_ASSERTION(!nsLayoutUtils::IsContainerForFontSizeInflation(aFrame),
+               "should not be container for font size inflation");
+
   nsIFrame::InlineMinWidthData data;
   DISPLAY_MIN_WIDTH(aFrame, data.prevLines);
   aFrame->AddInlineMinWidth(aRenderingContext, &data);
   data.ForceBreak(aRenderingContext);
   return data.prevLines;
 }
 
 /* static */ nscoord
 nsLayoutUtils::PrefWidthFromInline(nsIFrame* aFrame,
                                    nsRenderingContext* aRenderingContext)
 {
+  NS_ASSERTION(!nsLayoutUtils::IsContainerForFontSizeInflation(aFrame),
+               "should not be container for font size inflation");
+
   nsIFrame::InlinePrefWidthData data;
   DISPLAY_PREF_WIDTH(aFrame, data.prevLines);
   aFrame->AddInlinePrefWidth(aRenderingContext, &data);
   data.ForceBreak(aRenderingContext);
   return data.prevLines;
 }
 
 static nscolor
diff --git a/layout/base/tests/Makefile.in b/layout/base/tests/Makefile.in
--- a/layout/base/tests/Makefile.in
+++ b/layout/base/tests/Makefile.in
@@ -377,16 +377,17 @@ endif
 
 _BROWSER_FILES = \
 	browser_bug617076.js \
 	$(NULL)
 
 _INFLATION_REFTEST_FILES = \
 		$(shell find $(srcdir)/font-inflation/ -name '*.html' -o -name '*.xhtml') \
 		$(srcdir)/../../reftests/webm-video/black140x100.webm \
+		$(srcdir)/../../reftests/fonts/Ahem.ttf \
 		$(NULL)
 
 libs:: $(_TEST_FILES)
 	$(INSTALL) $(foreach f,$^,"$f") $(DEPTH)/_tests/testing/mochitest/tests/$(relativesrcdir)
 libs:: $(_BROWSER_FILES)
 	$(INSTALL) $(foreach f,$^,"$f") $(DEPTH)/_tests/testing/mochitest/browser/$(relativesrcdir)
 libs:: $(_INFLATION_REFTEST_FILES)
 	$(INSTALL) $(foreach f,$^,"$f") $(DEPTH)/_tests/testing/mochitest/tests/$(relativesrcdir)/font-inflation/
diff --git a/layout/base/tests/font-inflation/intrinsic-fit-1a-ref.html b/layout/base/tests/font-inflation/intrinsic-fit-1a-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/base/tests/font-inflation/intrinsic-fit-1a-ref.html
@@ -0,0 +1,16 @@
+<!DOCTYPE HTML>
+<style>
+@font-face { font-family: Ahem; src: url(Ahem.ttf); }
+body { width: 10px }
+p {
+  margin: 0;
+  background: yellow;
+  color: blue;
+  width: 60px;
+  font: 12px Ahem;
+}
+</style>
+<!--
+In a 60px container, the minimum font size at 15em per line is 4px.
+-->
+<p>This is tiny bit of text.</p>
diff --git a/layout/base/tests/font-inflation/intrinsic-fit-1a.html b/layout/base/tests/font-inflation/intrinsic-fit-1a.html
new file mode 100644
--- /dev/null
+++ b/layout/base/tests/font-inflation/intrinsic-fit-1a.html
@@ -0,0 +1,16 @@
+<!DOCTYPE HTML>
+<style>
+@font-face { font-family: Ahem; src: url(Ahem.ttf); }
+body { width: 10px }
+p {
+  margin: 0;
+  background: yellow;
+  color: blue;
+  width: -moz-fit-content; /* computes to 60px */
+  font: 12px Ahem;
+}
+</style>
+<!--
+In a 60px container, the minimum font size at 15em per line is 4px.
+-->
+<p>This is tiny bit of text.</p>
diff --git a/layout/base/tests/font-inflation/intrinsic-fit-1b-ref.html b/layout/base/tests/font-inflation/intrinsic-fit-1b-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/base/tests/font-inflation/intrinsic-fit-1b-ref.html
@@ -0,0 +1,17 @@
+<!DOCTYPE HTML>
+<style>
+@font-face { font-family: Ahem; src: url(Ahem.ttf); }
+body { width: 450px }
+p {
+  margin: 0;
+  background: yellow;
+  color: blue;
+  width: 300px;
+  font: 24px Ahem;
+}
+</style>
+<!--
+In a 300px container, the minimum font size at 15em per line is 20px.
+This means we map 0px-30px into 20px-30px, so 12px gets mapped to 24px.
+-->
+<p>This is tiny bit of text.</p>
diff --git a/layout/base/tests/font-inflation/intrinsic-fit-1b.html b/layout/base/tests/font-inflation/intrinsic-fit-1b.html
new file mode 100644
--- /dev/null
+++ b/layout/base/tests/font-inflation/intrinsic-fit-1b.html
@@ -0,0 +1,17 @@
+<!DOCTYPE HTML>
+<style>
+@font-face { font-family: Ahem; src: url(Ahem.ttf); }
+body { width: 450px }
+p {
+  margin: 0;
+  background: yellow;
+  color: blue;
+  width: -moz-fit-content; /* computes to 300px */
+  font: 12px Ahem;
+}
+</style>
+<!--
+In a 300px container, the minimum font size at 15em per line is 20px.
+This means we map 0px-30px into 20px-30px, so 12px gets mapped to 24px.
+-->
+<p>This is tiny bit of text.</p>
diff --git a/layout/base/tests/font-inflation/intrinsic-fit-1c-ref.html b/layout/base/tests/font-inflation/intrinsic-fit-1c-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/base/tests/font-inflation/intrinsic-fit-1c-ref.html
@@ -0,0 +1,17 @@
+<!DOCTYPE HTML>
+<style>
+@font-face { font-family: Ahem; src: url(Ahem.ttf); }
+body { width: 150px }
+p {
+  margin: 0;
+  background: yellow;
+  color: blue;
+  width: 150px;
+  font: 14px Ahem;
+}
+</style>
+<!--
+In a 150px container, the minimum font size at 15em per line is 10px.
+This means we map 0px-15px into 10px-15px, so 12px gets mapped to 14px.
+-->
+<p>This is tiny bit of text.</p>
diff --git a/layout/base/tests/font-inflation/intrinsic-fit-1c.html b/layout/base/tests/font-inflation/intrinsic-fit-1c.html
new file mode 100644
--- /dev/null
+++ b/layout/base/tests/font-inflation/intrinsic-fit-1c.html
@@ -0,0 +1,17 @@
+<!DOCTYPE HTML>
+<style>
+@font-face { font-family: Ahem; src: url(Ahem.ttf); }
+body { width: 150px }
+p {
+  margin: 0;
+  background: yellow;
+  color: blue;
+  width: -moz-fit-content; /* computes to 150px */
+  font: 12px Ahem;
+}
+</style>
+<!--
+In a 150px container, the minimum font size at 15em per line is 10px.
+This means we map 0px-15px into 10px-15px, so 12px gets mapped to 14px.
+-->
+<p>This is tiny bit of text.</p>
diff --git a/layout/base/tests/font-inflation/intrinsic-fit-2a.html b/layout/base/tests/font-inflation/intrinsic-fit-2a.html
new file mode 100644
--- /dev/null
+++ b/layout/base/tests/font-inflation/intrinsic-fit-2a.html
@@ -0,0 +1,17 @@
+<!DOCTYPE HTML>
+<style>
+@font-face { font-family: Ahem; src: url(Ahem.ttf); }
+body { width: 10px }
+p {
+  margin: 0;
+  background: yellow;
+  color: blue;
+  float: left;
+  width: auto; /* computes to 60px */
+  font: 12px Ahem;
+}
+</style>
+<!--
+In a 60px container, the minimum font size at 15em per line is 4px.
+-->
+<p>This is tiny bit of text.</p>
diff --git a/layout/base/tests/font-inflation/intrinsic-fit-2b.html b/layout/base/tests/font-inflation/intrinsic-fit-2b.html
new file mode 100644
--- /dev/null
+++ b/layout/base/tests/font-inflation/intrinsic-fit-2b.html
@@ -0,0 +1,18 @@
+<!DOCTYPE HTML>
+<style>
+@font-face { font-family: Ahem; src: url(Ahem.ttf); }
+body { width: 450px }
+p {
+  margin: 0;
+  background: yellow;
+  color: blue;
+  float: left;
+  width: auto; /* computes to 300px */
+  font: 12px Ahem;
+}
+</style>
+<!--
+In a 300px container, the minimum font size at 15em per line is 20px.
+This means we map 0px-30px into 20px-30px, so 12px gets mapped to 24px.
+-->
+<p>This is tiny bit of text.</p>
diff --git a/layout/base/tests/font-inflation/intrinsic-fit-2c.html b/layout/base/tests/font-inflation/intrinsic-fit-2c.html
new file mode 100644
--- /dev/null
+++ b/layout/base/tests/font-inflation/intrinsic-fit-2c.html
@@ -0,0 +1,18 @@
+<!DOCTYPE HTML>
+<style>
+@font-face { font-family: Ahem; src: url(Ahem.ttf); }
+body { width: 150px }
+p {
+  margin: 0;
+  background: yellow;
+  color: blue;
+  float: left;
+  width: auto; /* computes to 150px */
+  font: 12px Ahem;
+}
+</style>
+<!--
+In a 150px container, the minimum font size at 15em per line is 10px.
+This means we map 0px-15px into 10px-15px, so 12px gets mapped to 14px.
+-->
+<p>This is tiny bit of text.</p>
diff --git a/layout/base/tests/font-inflation/intrinsic-max-1-ref.html b/layout/base/tests/font-inflation/intrinsic-max-1-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/base/tests/font-inflation/intrinsic-max-1-ref.html
@@ -0,0 +1,13 @@
+<!DOCTYPE HTML>
+<style>
+@font-face { font-family: Ahem; src: url(Ahem.ttf); }
+body { width: 450px }
+p {
+  margin: 0;
+  background: yellow;
+  color: blue;
+  width: 300px;
+  font: 24px Ahem;
+}
+</style>
+<p>This is tiny bit of text.</p>
diff --git a/layout/base/tests/font-inflation/intrinsic-max-1.html b/layout/base/tests/font-inflation/intrinsic-max-1.html
new file mode 100644
--- /dev/null
+++ b/layout/base/tests/font-inflation/intrinsic-max-1.html
@@ -0,0 +1,17 @@
+<!DOCTYPE HTML>
+<style>
+@font-face { font-family: Ahem; src: url(Ahem.ttf); }
+body { width: 450px }
+p {
+  margin: 0;
+  background: yellow;
+  color: blue;
+  width: -moz-max-content; /* computes to 300px */
+  font: 12px Ahem;
+}
+</style>
+<!--
+In a 300px container, the minimum font size at 15em per line is 20px.
+This means we map 0px-30px into 20px-30px, so 12px gets mapped to 24px.
+-->
+<p>This is tiny bit of text.</p>
diff --git a/layout/base/tests/font-inflation/intrinsic-min-1-ref.html b/layout/base/tests/font-inflation/intrinsic-min-1-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/base/tests/font-inflation/intrinsic-min-1-ref.html
@@ -0,0 +1,16 @@
+<!DOCTYPE HTML>
+<style>
+@font-face { font-family: Ahem; src: url(Ahem.ttf); }
+body { width: 450px }
+p {
+  margin: 0;
+  background: yellow;
+  color: blue;
+  width: 60px;
+  font: 12px Ahem;
+}
+</style>
+<!--
+In a 60px container, the minimum font size at 15em per line is 4px.
+-->
+<p>This is some text.</p>
diff --git a/layout/base/tests/font-inflation/intrinsic-min-1.html b/layout/base/tests/font-inflation/intrinsic-min-1.html
new file mode 100644
--- /dev/null
+++ b/layout/base/tests/font-inflation/intrinsic-min-1.html
@@ -0,0 +1,13 @@
+<!DOCTYPE HTML>
+<style>
+@font-face { font-family: Ahem; src: url(Ahem.ttf); }
+body { width: 450px }
+p {
+  margin: 0;
+  background: yellow;
+  color: blue;
+  width: -moz-min-content; /* computes to 60px */
+  font: 12px Ahem;
+}
+</style>
+<p>This is some text.</p>
diff --git a/layout/base/tests/test_font_inflation_reftests.html b/layout/base/tests/test_font_inflation_reftests.html
--- a/layout/base/tests/test_font_inflation_reftests.html
+++ b/layout/base/tests/test_font_inflation_reftests.html
@@ -42,16 +42,24 @@ var gTests = [
   "== input-text-3.html input-text-3-ref.html",
   "== textarea-1.html textarea-1-ref.html",
   "== textarea-2.html textarea-2-ref.html",
   "== textarea-3.html textarea-3-ref.html",
   "== css-transform-1.html css-transform-1-ref.html",
   "== css-transform-2.html css-transform-2-ref.html",
   "== container-with-clamping.html container-with-clamping-ref.html",
   "!= video-1.html about:blank", // crashtest
+  "== intrinsic-min-1.html intrinsic-min-1-ref.html",
+  "== intrinsic-max-1.html intrinsic-max-1-ref.html",
+  "== intrinsic-fit-1a.html intrinsic-fit-1a-ref.html",
+  "== intrinsic-fit-1b.html intrinsic-fit-1b-ref.html",
+  "== intrinsic-fit-1c.html intrinsic-fit-1c-ref.html",
+  "== intrinsic-fit-2a.html intrinsic-fit-1a-ref.html",
+  "== intrinsic-fit-2b.html intrinsic-fit-1b-ref.html",
+  "== intrinsic-fit-2c.html intrinsic-fit-1c-ref.html",
 ];
 
 // Maintain a reference count of how many things we're waiting for until
 // we can say the tests are done.
 var gDelayCount = 0;
 function AddFinishDependency()
   { ++gDelayCount; }
 function RemoveFinishDependency()
diff --git a/layout/generic/nsFrame.cpp b/layout/generic/nsFrame.cpp
--- a/layout/generic/nsFrame.cpp
+++ b/layout/generic/nsFrame.cpp
@@ -3914,16 +3914,24 @@ nsFrame::ComputeAutoSize(nsRenderingCont
   }
   return result;
 }
 
 nscoord
 nsFrame::ShrinkWidthToFit(nsRenderingContext *aRenderingContext,
                           nscoord aWidthInCB)
 {
+  nsPresContext *presContext = PresContext();
+  AutoRestore<nsIFrame*> ar(presContext->mCurrentInflationContainer);
+  if (nsLayoutUtils::IsContainerForFontSizeInflation(this)) {
+    // If we're a container for font size inflation, then shrink
+    // wrapping inside of us should not apply font size inflation.
+    presContext->mCurrentInflationContainer = nsnull;
+  }
+
   nscoord result;
   nscoord minWidth = GetMinWidth(aRenderingContext);
   if (minWidth > aWidthInCB) {
     result = minWidth;
   } else {
     nscoord prefWidth = GetPrefWidth(aRenderingContext);
     if (prefWidth > aWidthInCB) {
       result = aWidthInCB;
