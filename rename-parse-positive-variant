Rename ParsePositiveVariant to ParseNonNegativeVariant.  (Bug 481826)

diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -493,19 +493,19 @@ protected:
   PRBool ParseHSLColor(nscolor& aColor, char aStop);
   // ParseColorOpacity will enforce that the color ends with a ')'
   // after the opacity
   PRBool ParseColorOpacity(PRUint8& aOpacity);
   PRBool ParseEnum(nsCSSValue& aValue, const PRInt32 aKeywordTable[]);
   PRBool ParseVariant(nsCSSValue& aValue,
                       PRInt32 aVariantMask,
                       const PRInt32 aKeywordTable[]);
-  PRBool ParsePositiveVariant(nsCSSValue& aValue,
-                              PRInt32 aVariantMask,
-                              const PRInt32 aKeywordTable[]);
+  PRBool ParseNonNegativeVariant(nsCSSValue& aValue,
+                                 PRInt32 aVariantMask,
+                                 const PRInt32 aKeywordTable[]);
   PRBool ParseCounter(nsCSSValue& aValue);
   PRBool ParseAttr(nsCSSValue& aValue);
   PRBool ParseURL(nsCSSValue& aValue);
   PRBool TranslateDimension(nsCSSValue& aValue, PRInt32 aVariantMask,
                             float aNumber, const nsString& aUnit);
 
   void SetParsingCompoundProperty(PRBool aBool) {
     NS_ASSERTION(aBool == PR_TRUE || aBool == PR_FALSE, "bad PRBool value");
@@ -1726,21 +1726,21 @@ CSSParserImpl::ParseMediaQueryExpression
     REPORT_UNEXPECTED_TOKEN(PEMQExpectedFeatureNameEnd);
     SkipUntil(')');
     return PR_FALSE;
   }
 
   PRBool rv;
   switch (feature->mValueType) {
     case nsMediaFeature::eLength:
-      rv = ParsePositiveVariant(expr->mValue, VARIANT_LENGTH, nsnull);
+      rv = ParseNonNegativeVariant(expr->mValue, VARIANT_LENGTH, nsnull);
       break;
     case nsMediaFeature::eInteger:
     case nsMediaFeature::eBoolInteger:
-      rv = ParsePositiveVariant(expr->mValue, VARIANT_INTEGER, nsnull);
+      rv = ParseNonNegativeVariant(expr->mValue, VARIANT_INTEGER, nsnull);
       // Enforce extra restrictions for eBoolInteger
       if (rv &&
           feature->mValueType == nsMediaFeature::eBoolInteger &&
           expr->mValue.GetIntValue() > 1)
         rv = PR_FALSE;
       break;
     case nsMediaFeature::eIntRatio:
       {
@@ -1748,17 +1748,17 @@ CSSParserImpl::ParseMediaQueryExpression
         // either side of the '/'.
         nsRefPtr<nsCSSValue::Array> a = nsCSSValue::Array::Create(2);
         if (!a) {
           mScanner.SetLowLevelError(NS_ERROR_OUT_OF_MEMORY);
           SkipUntil(')');
           return PR_FALSE;
         }
         expr->mValue.SetArrayValue(a, eCSSUnit_Array);
-        // We don't bother with ParsePositiveVariant since we have to
+        // We don't bother with ParseNonNegativeVariant since we have to
         // check for != 0 as well; no need to worry about the UngetToken
         // since we're throwing out up to the next ')' anyway.
         rv = ParseVariant(a->Item(0), VARIANT_INTEGER, nsnull) &&
              a->Item(0).GetIntValue() > 0 &&
              ExpectSymbol('/', PR_TRUE) &&
              ParseVariant(a->Item(1), VARIANT_INTEGER, nsnull) &&
              a->Item(1).GetIntValue() > 0;
       }
@@ -4294,19 +4294,19 @@ CSSParserImpl::TranslateDimension(nsCSSV
   if ((type & aVariantMask) != 0) {
     aValue.SetFloatValue(aNumber, units);
     return PR_TRUE;
   }
   return PR_FALSE;
 }
 
 PRBool
-CSSParserImpl::ParsePositiveVariant(nsCSSValue& aValue,
-                                    PRInt32 aVariantMask,
-                                    const PRInt32 aKeywordTable[])
+CSSParserImpl::ParseNonNegativeVariant(nsCSSValue& aValue,
+                                       PRInt32 aVariantMask,
+                                       const PRInt32 aKeywordTable[])
 {
   if (ParseVariant(aValue, aVariantMask, aKeywordTable)) {
     if (eCSSUnit_Number == aValue.GetUnit() ||
         aValue.IsLengthUnit()){
       if (aValue.GetFloatValue() < 0) {
         UngetToken();
         return PR_FALSE;
       }
@@ -4825,22 +4825,22 @@ CSSParserImpl::ParseDirectionalBoxProper
   return PR_TRUE;
 }
 
 PRBool
 CSSParserImpl::ParseBoxCornerRadius(nsCSSProperty aPropID)
 {
   nsCSSValue dimenX, dimenY;
   // required first value
-  if (! ParsePositiveVariant(dimenX, VARIANT_HLP, nsnull))
+  if (! ParseNonNegativeVariant(dimenX, VARIANT_HLP, nsnull))
     return PR_FALSE;
   // optional second value (forbidden if first value is inherit/initial)
   if (dimenX.GetUnit() == eCSSUnit_Inherit ||
       dimenX.GetUnit() == eCSSUnit_Initial ||
-      ! ParsePositiveVariant(dimenY, VARIANT_LP, nsnull))
+      ! ParseNonNegativeVariant(dimenY, VARIANT_LP, nsnull))
     dimenY = dimenX;
 
   NS_ASSERTION(nsCSSProps::kTypeTable[aPropID] == eCSSType_ValuePair,
                nsPrintfCString(64, "type error (property='%s')",
                                nsCSSProps::GetStringValue(aPropID).get())
                .get());
   nsCSSValuePair& storage =
     *static_cast<nsCSSValuePair*>(mTempData.PropertyAt(aPropID));
@@ -4856,28 +4856,28 @@ CSSParserImpl::ParseBoxCornerRadii(nsCSS
 {
   // Rectangles are used as scratch storage.
   // top => top-left, right => top-right,
   // bottom => bottom-right, left => bottom-left.
   nsCSSRect dimenX, dimenY;
   PRInt32 countX = 0, countY = 0;
 
   NS_FOR_CSS_SIDES (side) {
-    if (! ParsePositiveVariant(dimenX.*nsCSSRect::sides[side],
-                               side > 0 ? VARIANT_LP : VARIANT_HLP, nsnull))
+    if (! ParseNonNegativeVariant(dimenX.*nsCSSRect::sides[side],
+                                  side > 0 ? VARIANT_LP : VARIANT_HLP, nsnull))
       break;
     countX++;
   }
   if (countX == 0)
     return PR_FALSE;
 
   if (ExpectSymbol('/', PR_TRUE)) {
     NS_FOR_CSS_SIDES (side) {
-      if (! ParsePositiveVariant(dimenY.*nsCSSRect::sides[side],
-                                 VARIANT_LP, nsnull))
+      if (! ParseNonNegativeVariant(dimenY.*nsCSSRect::sides[side],
+                                    VARIANT_LP, nsnull))
         break;
       countY++;
     }
     if (countY == 0)
       return PR_FALSE;
   }
   if (!ExpectEndProperty())
     return PR_FALSE;
@@ -5378,51 +5378,51 @@ CSSParserImpl::ParseSingleValueProperty(
                         nsCSSProps::kBorderStyleKTable);
   case eCSSProperty_border_bottom_width:
   case eCSSProperty_border_end_width_value: // for internal use
   case eCSSProperty_border_left_width_value: // for internal use
   case eCSSProperty_border_right_width_value: // for internal use
   case eCSSProperty_border_start_width_value: // for internal use
   case eCSSProperty_border_top_width:
   case eCSSProperty__moz_column_rule_width:
-    return ParsePositiveVariant(aValue, VARIANT_HKL,
-                                nsCSSProps::kBorderWidthKTable);
+    return ParseNonNegativeVariant(aValue, VARIANT_HKL,
+                                   nsCSSProps::kBorderWidthKTable);
   case eCSSProperty__moz_column_count:
     // Need to reject 0 in addition to negatives, so don't bother with
-    // ParsePositiveVariant.  If we accept 0, we need to change
+    // ParseNonNegativeVariant.  If we accept 0, we need to change
     // NS_STYLE_COLUMN_COUNT_AUTO to something else.
     return ParseVariant(aValue, VARIANT_AHI, nsnull) &&
            (aValue.GetUnit() != eCSSUnit_Integer ||
             aValue.GetIntValue() > 0 ||
             (UngetToken(), PR_FALSE));
   case eCSSProperty__moz_column_width:
-    return ParsePositiveVariant(aValue, VARIANT_AHL, nsnull);
+    return ParseNonNegativeVariant(aValue, VARIANT_AHL, nsnull);
   case eCSSProperty__moz_column_gap:
-    return ParsePositiveVariant(aValue, VARIANT_HL | VARIANT_NORMAL, nsnull);
+    return ParseNonNegativeVariant(aValue, VARIANT_HL | VARIANT_NORMAL, nsnull);
   case eCSSProperty_bottom:
   case eCSSProperty_top:
   case eCSSProperty_left:
   case eCSSProperty_right:
     return ParseVariant(aValue, VARIANT_AHLP, nsnull);
   case eCSSProperty_box_align:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kBoxAlignKTable);
   case eCSSProperty_box_direction:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kBoxDirectionKTable);
   case eCSSProperty_box_flex:
-    return ParsePositiveVariant(aValue, VARIANT_HN, nsnull);
+    return ParseNonNegativeVariant(aValue, VARIANT_HN, nsnull);
   case eCSSProperty_box_orient:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kBoxOrientKTable);
   case eCSSProperty_box_pack:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kBoxPackKTable);
   case eCSSProperty_box_ordinal_group:
-    return ParsePositiveVariant(aValue, VARIANT_HI, nsnull);
+    return ParseNonNegativeVariant(aValue, VARIANT_HI, nsnull);
 #ifdef MOZ_SVG
   case eCSSProperty_clip_path:
     return ParseVariant(aValue, VARIANT_HUO, nsnull);
   case eCSSProperty_clip_rule:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kFillRuleKTable);
   case eCSSProperty_color_interpolation:
   case eCSSProperty_color_interpolation_filters:
@@ -5476,35 +5476,34 @@ CSSParserImpl::ParseSingleValueProperty(
     return ParseVariant(aValue, VARIANT_HN, nsnull) &&
            // Enforce the restriction that the value is greater than 1.
            (aValue.GetUnit() != eCSSUnit_Number || 
             aValue.GetFloatValue() >= 1.0f);
   case eCSSProperty_stroke_opacity:
     return ParseVariant(aValue, VARIANT_HN,
                         nsnull);
   case eCSSProperty_stroke_width:
-    return ParsePositiveVariant(aValue, VARIANT_HLPN,
-                        nsnull);
+    return ParseNonNegativeVariant(aValue, VARIANT_HLPN, nsnull);
   case eCSSProperty_text_anchor:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kTextAnchorKTable);
   case eCSSProperty_text_rendering:
     return ParseVariant(aValue, VARIANT_AHK,
                         nsCSSProps::kTextRenderingKTable);
 #endif
   case eCSSProperty_box_sizing:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kBoxSizingKTable);
   case eCSSProperty_height:
-    return ParsePositiveVariant(aValue, VARIANT_AHLP, nsnull);
+    return ParseNonNegativeVariant(aValue, VARIANT_AHLP, nsnull);
   case eCSSProperty_width:
-    return ParsePositiveVariant(aValue, VARIANT_AHKLP,
-                                nsCSSProps::kWidthKTable);
+    return ParseNonNegativeVariant(aValue, VARIANT_AHKLP,
+                                   nsCSSProps::kWidthKTable);
   case eCSSProperty_force_broken_image_icon:
-    return ParsePositiveVariant(aValue, VARIANT_HI, nsnull);
+    return ParseNonNegativeVariant(aValue, VARIANT_HI, nsnull);
   case eCSSProperty_caption_side:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kCaptionSideKTable);
   case eCSSProperty_clear:
     return ParseVariant(aValue, VARIANT_HOK,
                         nsCSSProps::kClearKTable);
   case eCSSProperty_color:
     return ParseVariant(aValue, VARIANT_HC, nsnull);
@@ -5537,19 +5536,19 @@ CSSParserImpl::ParseSingleValueProperty(
     return ParseVariant(aValue, VARIANT_HOK,
                         nsCSSProps::kFloatKTable);
   case eCSSProperty_float_edge:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kFloatEdgeKTable);
   case eCSSProperty_font_family:
     return ParseFamily(aValue);
   case eCSSProperty_font_size:
-    return ParsePositiveVariant(aValue,
-                                VARIANT_HKLP | VARIANT_SYSFONT,
-                                nsCSSProps::kFontSizeKTable);
+    return ParseNonNegativeVariant(aValue,
+                                   VARIANT_HKLP | VARIANT_SYSFONT,
+                                   nsCSSProps::kFontSizeKTable);
   case eCSSProperty_font_size_adjust:
     return ParseVariant(aValue, VARIANT_HON | VARIANT_SYSFONT,
                         nsnull);
   case eCSSProperty_font_stretch:
     return ParseVariant(aValue, VARIANT_HMK | VARIANT_SYSFONT,
                         nsCSSProps::kFontStretchKTable);
   case eCSSProperty_font_style:
     return ParseVariant(aValue, VARIANT_HMK | VARIANT_SYSFONT,
@@ -5561,17 +5560,17 @@ CSSParserImpl::ParseSingleValueProperty(
     return ParseFontWeight(aValue);
   case eCSSProperty_ime_mode:
     return ParseVariant(aValue, VARIANT_AHK | VARIANT_NORMAL,
                         nsCSSProps::kIMEModeKTable);
   case eCSSProperty_letter_spacing:
   case eCSSProperty_word_spacing:
     return ParseVariant(aValue, VARIANT_HL | VARIANT_NORMAL, nsnull);
   case eCSSProperty_line_height:
-    return ParsePositiveVariant(aValue, VARIANT_HLPN | VARIANT_NORMAL | VARIANT_SYSFONT, nsnull);
+    return ParseNonNegativeVariant(aValue, VARIANT_HLPN | VARIANT_NORMAL | VARIANT_SYSFONT, nsnull);
   case eCSSProperty_list_style_image:
     return ParseVariant(aValue, VARIANT_HUO, nsnull);
   case eCSSProperty_list_style_position:
     return ParseVariant(aValue, VARIANT_HK, nsCSSProps::kListStylePositionKTable);
   case eCSSProperty_list_style_type:
     return ParseVariant(aValue, VARIANT_HOK, nsCSSProps::kListStyleKTable);
   case eCSSProperty_margin_bottom:
   case eCSSProperty_margin_end_value: // for internal use
@@ -5580,52 +5579,52 @@ CSSParserImpl::ParseSingleValueProperty(
   case eCSSProperty_margin_start_value: // for internal use
   case eCSSProperty_margin_top:
     return ParseVariant(aValue, VARIANT_AHLP, nsnull);
   case eCSSProperty_marker_offset:
     return ParseVariant(aValue, VARIANT_AHL, nsnull);
   case eCSSProperty_marks:
     return ParseMarks(aValue);
   case eCSSProperty_max_height:
-    return ParsePositiveVariant(aValue, VARIANT_HLPO, nsnull);
+    return ParseNonNegativeVariant(aValue, VARIANT_HLPO, nsnull);
   case eCSSProperty_max_width:
-    return ParsePositiveVariant(aValue, VARIANT_HKLPO,
-                                nsCSSProps::kWidthKTable);
+    return ParseNonNegativeVariant(aValue, VARIANT_HKLPO,
+                                   nsCSSProps::kWidthKTable);
   case eCSSProperty_min_height:
-    return ParsePositiveVariant(aValue, VARIANT_HLP, nsnull);
+    return ParseNonNegativeVariant(aValue, VARIANT_HLP, nsnull);
   case eCSSProperty_min_width:
-    return ParsePositiveVariant(aValue, VARIANT_HKLP,
-                                nsCSSProps::kWidthKTable);
+    return ParseNonNegativeVariant(aValue, VARIANT_HKLP,
+                                   nsCSSProps::kWidthKTable);
   case eCSSProperty_opacity:
     return ParseVariant(aValue, VARIANT_HN, nsnull);
   case eCSSProperty_orphans:
   case eCSSProperty_widows:
     return ParseVariant(aValue, VARIANT_HI, nsnull);
   case eCSSProperty_outline_color:
     return ParseVariant(aValue, VARIANT_HCK,
                         nsCSSProps::kOutlineColorKTable);
   case eCSSProperty_outline_style:
     return ParseVariant(aValue, VARIANT_HOK | VARIANT_AUTO,
                         nsCSSProps::kOutlineStyleKTable);
   case eCSSProperty_outline_width:
-    return ParsePositiveVariant(aValue, VARIANT_HKL,
-                                nsCSSProps::kBorderWidthKTable);
+    return ParseNonNegativeVariant(aValue, VARIANT_HKL,
+                                   nsCSSProps::kBorderWidthKTable);
   case eCSSProperty_outline_offset:
     return ParseVariant(aValue, VARIANT_HL, nsnull);
   case eCSSProperty_overflow_x:
   case eCSSProperty_overflow_y:
     return ParseVariant(aValue, VARIANT_AHK,
                         nsCSSProps::kOverflowSubKTable);
   case eCSSProperty_padding_bottom:
   case eCSSProperty_padding_end_value: // for internal use
   case eCSSProperty_padding_left_value: // for internal use
   case eCSSProperty_padding_right_value: // for internal use
   case eCSSProperty_padding_start_value: // for internal use
   case eCSSProperty_padding_top:
-    return ParsePositiveVariant(aValue, VARIANT_HLP, nsnull);
+    return ParseNonNegativeVariant(aValue, VARIANT_HLP, nsnull);
   case eCSSProperty_page:
     return ParseVariant(aValue, VARIANT_AUTO | VARIANT_IDENTIFIER, nsnull);
   case eCSSProperty_page_break_after:
   case eCSSProperty_page_break_before:
     return ParseVariant(aValue, VARIANT_AHK,
                         nsCSSProps::kPageBreakKTable);
   case eCSSProperty_page_break_inside:
     return ParseVariant(aValue, VARIANT_AHK,
@@ -6377,46 +6376,46 @@ CSSParserImpl::ParseBorderImage()
   nsCSSValue& verticalKeyword = arr->Item(10);
 
   // <uri>
   if (!ParseVariant(url, VARIANT_URL, nsnull)) {
     return PR_FALSE;
   }
 
   // [<number> | <percentage>]{1,4}
-  if (!ParsePositiveVariant(splitTop,
-                            VARIANT_NUMBER | VARIANT_PERCENT, nsnull)) {
-    return PR_FALSE;
-  }
-  if (!ParsePositiveVariant(splitRight,
-                            VARIANT_NUMBER | VARIANT_PERCENT, nsnull)) {
+  if (!ParseNonNegativeVariant(splitTop,
+                               VARIANT_NUMBER | VARIANT_PERCENT, nsnull)) {
+    return PR_FALSE;
+  }
+  if (!ParseNonNegativeVariant(splitRight,
+                               VARIANT_NUMBER | VARIANT_PERCENT, nsnull)) {
     splitRight = splitTop;
   }
-  if (!ParsePositiveVariant(splitBottom,
-                            VARIANT_NUMBER | VARIANT_PERCENT, nsnull)) {
+  if (!ParseNonNegativeVariant(splitBottom,
+                               VARIANT_NUMBER | VARIANT_PERCENT, nsnull)) {
     splitBottom = splitTop;
   }
-  if (!ParsePositiveVariant(splitLeft,
-                            VARIANT_NUMBER | VARIANT_PERCENT, nsnull)) {
+  if (!ParseNonNegativeVariant(splitLeft,
+                               VARIANT_NUMBER | VARIANT_PERCENT, nsnull)) {
     splitLeft = splitRight;
   }
 
   // [ / <border-width>{1,4} ]?
   if (ExpectSymbol('/', PR_TRUE)) {
     // if have '/', at least one value is required
-    if (!ParsePositiveVariant(borderWidthTop, VARIANT_LENGTH, nsnull)) {
-      return PR_FALSE;
-    }
-    if (!ParsePositiveVariant(borderWidthRight, VARIANT_LENGTH, nsnull)) {
+    if (!ParseNonNegativeVariant(borderWidthTop, VARIANT_LENGTH, nsnull)) {
+      return PR_FALSE;
+    }
+    if (!ParseNonNegativeVariant(borderWidthRight, VARIANT_LENGTH, nsnull)) {
       borderWidthRight = borderWidthTop;
     }
-    if (!ParsePositiveVariant(borderWidthBottom, VARIANT_LENGTH, nsnull)) {
+    if (!ParseNonNegativeVariant(borderWidthBottom, VARIANT_LENGTH, nsnull)) {
       borderWidthBottom = borderWidthTop;
     }
-    if (!ParsePositiveVariant(borderWidthLeft, VARIANT_LENGTH, nsnull)) {
+    if (!ParseNonNegativeVariant(borderWidthLeft, VARIANT_LENGTH, nsnull)) {
       borderWidthLeft = borderWidthRight;
     }
   }
 
   // [stretch | repeat | round]{0,2}
   // missing keywords are handled in nsRuleNode::ComputeBorderData()
   if (ParseEnum(horizontalKeyword, nsCSSProps::kBorderImageKTable)) {
     ParseEnum(verticalKeyword, nsCSSProps::kBorderImageKTable);
@@ -6431,21 +6430,21 @@ CSSParserImpl::ParseBorderImage()
 
   return PR_TRUE;
 }
 
 PRBool
 CSSParserImpl::ParseBorderSpacing()
 {
   nsCSSValue  xValue;
-  if (ParsePositiveVariant(xValue, VARIANT_HL, nsnull)) {
+  if (ParseNonNegativeVariant(xValue, VARIANT_HL, nsnull)) {
     if (xValue.IsLengthUnit()) {
       // We have one length. Get the optional second length.
       nsCSSValue yValue;
-      if (ParsePositiveVariant(yValue, VARIANT_LENGTH, nsnull)) {
+      if (ParseNonNegativeVariant(yValue, VARIANT_LENGTH, nsnull)) {
         // We have two numbers
         if (ExpectEndProperty()) {
           mTempData.mTable.mBorderSpacing.mXValue = xValue;
           mTempData.mTable.mBorderSpacing.mYValue = yValue;
           mTempData.SetPropertyBit(eCSSProperty_border_spacing);
           return PR_TRUE;
         }
         return PR_FALSE;
@@ -6966,19 +6965,19 @@ CSSParserImpl::ParseFont()
   nsCSSValue  size;
   if (! ParseVariant(size, VARIANT_KEYWORD | VARIANT_LP, nsCSSProps::kFontSizeKTable)) {
     return PR_FALSE;
   }
 
   // Get optional "/" line-height
   nsCSSValue  lineHeight;
   if (ExpectSymbol('/', PR_TRUE)) {
-    if (! ParsePositiveVariant(lineHeight,
-                               VARIANT_NUMBER | VARIANT_LP | VARIANT_NORMAL,
-                               nsnull)) {
+    if (! ParseNonNegativeVariant(lineHeight,
+                                  VARIANT_NUMBER | VARIANT_LP | VARIANT_NORMAL,
+                                  nsnull)) {
       return PR_FALSE;
     }
   }
   else {
     lineHeight.SetNormalValue();
   }
 
   // Get final mandatory font-family
@@ -7971,17 +7970,17 @@ CSSParserImpl::ParseCSSShadowList(PRBool
       cur->mValue.SetArrayValue(val, eCSSUnit_Array);
 
       // Y coordinate; this one is not optional
       if (!ParseVariant(val->Item(IndexY), VARIANT_LENGTH, nsnull)) {
         break;
       }
 
       // Optional radius. Ignore errors except if they pass a negative
-      // value which we must reject. If we use ParsePositiveVariant we can't
+      // value which we must reject. If we use ParseNonNegativeVariant we can't
       // tell the difference between an unspecified radius and a negative
       // radius, so that's why we don't use it.
       if (ParseVariant(val->Item(IndexRadius), VARIANT_LENGTH, nsnull) &&
           val->Item(IndexRadius).GetFloatValue() < 0) {
         break;
       }
 
       if (aIsBoxShadow) {
