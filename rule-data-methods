From: L. David Baron <dbaron@dbaron.org>

Add nsRuleData::ValueForBackgroundColor, etc., methods for each CSS property.  (Bug 636039)

diff --git a/layout/style/nsCSSPropList.h b/layout/style/nsCSSPropList.h
--- a/layout/style/nsCSSPropList.h
+++ b/layout/style/nsCSSPropList.h
@@ -63,17 +63,17 @@
   nsCSSProperty enumeration defined in nsCSSProps.h.
 
   -. 'method' is designed to be as input for CSS2Properties and similar
   callers.  It must always be the same as 'name' except it must use
   InterCaps and all hyphens ('-') must be removed.  Callers using this
   parameter must also define the CSS_PROP_DOMPROP_PREFIXED(prop) macro,
   either to be "Moz" ## prop or to just be prop, depending on whether
   they want Moz prefixes or not (i.e., whether the use is for internal
-  use or external use).
+  use such as nsRuleData::ValueFor* or external use).
 
   -. 'flags', a bitfield containing CSS_PROPERTY_* flags.
 
   -. 'datastruct' says which nsRuleData* struct this property goes in.
 
   -. 'member' gives the name of the member variable in the nsRuleData
   struct.
 
diff --git a/layout/style/nsRuleData.h b/layout/style/nsRuleData.h
--- a/layout/style/nsRuleData.h
+++ b/layout/style/nsRuleData.h
@@ -106,11 +106,53 @@ struct nsRuleData
   /**
    * Return a pointer to the value object within |this| corresponding
    * to property |aProperty|.
    *
    * This function must only be called if the given property is in
    * mSIDs.
    */
   nsCSSValue* ValueFor(nsCSSProperty aProperty);
+
+  /**
+   * Getters like ValueFor(aProperty), but for each property by name
+   * (ValueForBackgroundColor, etc.), and more efficient than ValueFor.
+   * These use the names used for the property on DOM interfaces (the
+   * 'method' field in nsCSSPropList.h).
+   *
+   * Like ValueFor(), the caller must check that the property is within
+   * mSIDs.
+   */
+  #define CSS_PROP_INCLUDE_NOT_CSS
+  #define CSS_PROP_DOMPROP_PREFIXED(prop_) prop_
+  #define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_,        \
+                   parsevariant_, kwtable_, stylestruct_, stylestructoffset_,\
+                   animtype_)                                                \
+    nsCSSValue* ValueFor##method_() {                                        \
+      NS_ABORT_IF_FALSE(mSIDs & NS_STYLE_INHERIT_BIT(stylestruct_),          \
+                        "Calling nsRuleData::ValueFor" #method_ " without "  \
+                        "NS_STYLE_INHERIT_BIT(" #stylestruct_ " in mSIDs."); \
+      nsRuleData##datastruct_ *cssstruct = m##datastruct_##Data;             \
+      NS_ABORT_IF_FALSE(cssstruct, "nsRuleNode::Get" #stylestruct_ "Data "   \
+                                   "set up nsRuleData incorrectly");         \
+      return &cssstruct->member_;                                            \
+    }                                                                        \
+    const nsCSSValue* ValueFor##method_() const {                            \
+      NS_ABORT_IF_FALSE(mSIDs & NS_STYLE_INHERIT_BIT(stylestruct_),          \
+                        "Calling nsRuleData::ValueFor" #method_ " without "  \
+                        "NS_STYLE_INHERIT_BIT(" #stylestruct_ " in mSIDs."); \
+      const nsRuleData##datastruct_ *cssstruct = m##datastruct_##Data;       \
+      NS_ABORT_IF_FALSE(cssstruct, "nsRuleNode::Get" #stylestruct_ "Data "   \
+                                   "set up nsRuleData incorrectly");         \
+      return &cssstruct->member_;                                            \
+    }
+  #define CSS_PROP_BACKENDONLY(name_, id_, method_, flags_, datastruct_,     \
+                               member_, parsevariant_, kwtable_)             \
+    /* empty; backend-only structs are not in nsRuleData  */
+  #include "nsCSSPropList.h"
+  #undef CSS_PROP_INCLUDE_NOT_CSS
+  #undef CSS_PROP
+  #undef CSS_PROP_DOMPROP_PREFIXED
+  #undef CSS_PROP_BACKENDONLY
+
 };
 
 #endif
