Remove pointless null checks that are extremely unlikely to fail.

diff --git a/layout/style/nsStyleSet.cpp b/layout/style/nsStyleSet.cpp
--- a/layout/style/nsStyleSet.cpp
+++ b/layout/style/nsStyleSet.cpp
@@ -643,20 +643,12 @@ nsStyleSet::ResolveStyleFor(nsIContent* 
                "content must be element");
 
   if (aContent && presContext) {
-    if (mRuleProcessors[eAgentSheet]        ||
-        mRuleProcessors[ePresHintSheet]     ||
-        mRuleProcessors[eUserSheet]         ||
-        mRuleProcessors[eHTMLPresHintSheet] ||
-        mRuleProcessors[eDocSheet]          ||
-        mRuleProcessors[eStyleAttrSheet]    ||
-        mRuleProcessors[eOverrideSheet]) {
-      ElementRuleProcessorData data(presContext, aContent, mRuleWalker);
-      FileRules(EnumRulesMatching, &data);
-      result = GetContext(presContext, aParentContext, nsnull).get();
+    ElementRuleProcessorData data(presContext, aContent, mRuleWalker);
+    FileRules(EnumRulesMatching, &data);
+    result = GetContext(presContext, aParentContext, nsnull).get();
 
-      // Now reset the walker back to the root of the tree.
-      mRuleWalker->Reset();
-    }
+    // Now reset the walker back to the root of the tree.
+    mRuleWalker->Reset();
   }
 
   return result;
@@ -670,23 +662,14 @@ nsStyleSet::ResolveStyleForRules(nsStyle
   nsPresContext *presContext = PresContext();
 
   if (presContext) {
-    if (mRuleProcessors[eAgentSheet]        ||
-        mRuleProcessors[ePresHintSheet]     ||
-        mRuleProcessors[eUserSheet]         ||
-        mRuleProcessors[eHTMLPresHintSheet] ||
-        mRuleProcessors[eDocSheet]          ||
-        mRuleProcessors[eStyleAttrSheet]    ||
-        mRuleProcessors[eOverrideSheet]) {
-      
-      mRuleWalker->SetLevel(eDocSheet, PR_FALSE);
-      for (PRInt32 i = 0; i < rules.Count(); i++) {
-        mRuleWalker->Forward(rules.ObjectAt(i));
-      }
-      result = GetContext(presContext, aParentContext, nsnull).get();
+    mRuleWalker->SetLevel(eDocSheet, PR_FALSE);
+    for (PRInt32 i = 0; i < rules.Count(); i++) {
+      mRuleWalker->Forward(rules.ObjectAt(i));
+    }
+    result = GetContext(presContext, aParentContext, nsnull).get();
 
-      // Now reset the walker back to the root of the tree.
-      mRuleWalker->Reset();
-    }
+    // Now reset the walker back to the root of the tree.
+    mRuleWalker->Reset();
   }
   return result;
 }
@@ -698,17 +681,9 @@ nsStyleSet::ResolveStyleForNonElement(ns
   nsPresContext *presContext = PresContext();
 
   if (presContext) {
-    if (mRuleProcessors[eAgentSheet]        ||
-        mRuleProcessors[ePresHintSheet]     ||
-        mRuleProcessors[eUserSheet]         ||
-        mRuleProcessors[eHTMLPresHintSheet] ||
-        mRuleProcessors[eDocSheet]          ||
-        mRuleProcessors[eStyleAttrSheet]    ||
-        mRuleProcessors[eOverrideSheet]) {
-      result = GetContext(presContext, aParentContext,
-                          nsCSSAnonBoxes::mozNonElement).get();
-      NS_ASSERTION(mRuleWalker->AtRoot(), "rule walker must be at root");
-    }
+    result = GetContext(presContext, aParentContext,
+                        nsCSSAnonBoxes::mozNonElement).get();
+    NS_ASSERTION(mRuleWalker->AtRoot(), "rule walker must be at root");
   }
 
   return result;
@@ -748,22 +723,14 @@ nsStyleSet::ResolvePseudoStyleFor(nsICon
                "aPseudoTag must be pseudo-element or anonymous box");
 
   if (aPseudoTag && presContext) {
-    if (mRuleProcessors[eAgentSheet]        ||
-        mRuleProcessors[ePresHintSheet]     ||
-        mRuleProcessors[eUserSheet]         ||
-        mRuleProcessors[eHTMLPresHintSheet] ||
-        mRuleProcessors[eDocSheet]          ||
-        mRuleProcessors[eStyleAttrSheet]    ||
-        mRuleProcessors[eOverrideSheet]) {
-      PseudoRuleProcessorData data(presContext, aParentContent, aPseudoTag,
-                                   aComparator, mRuleWalker);
-      FileRules(EnumPseudoRulesMatching, &data);
+    PseudoRuleProcessorData data(presContext, aParentContent, aPseudoTag,
+                                 aComparator, mRuleWalker);
+    FileRules(EnumPseudoRulesMatching, &data);
 
-      result = GetContext(presContext, aParentContext, aPseudoTag).get();
+    result = GetContext(presContext, aParentContext, aPseudoTag).get();
 
-      // Now reset the walker back to the root of the tree.
-      mRuleWalker->Reset();
-    }
+    // Now reset the walker back to the root of the tree.
+    mRuleWalker->Reset();
   }
 
   return result;
@@ -793,23 +760,15 @@ nsStyleSet::ProbePseudoStyleFor(nsIConte
                "aPseudoTag must be pseudo-element or anonymous box");
 
   if (aPseudoTag && presContext) {
-    if (mRuleProcessors[eAgentSheet]        ||
-        mRuleProcessors[ePresHintSheet]     ||
-        mRuleProcessors[eUserSheet]         ||
-        mRuleProcessors[eHTMLPresHintSheet] ||
-        mRuleProcessors[eDocSheet]          ||
-        mRuleProcessors[eStyleAttrSheet]    ||
-        mRuleProcessors[eOverrideSheet]) {
-      PseudoRuleProcessorData data(presContext, aParentContent, aPseudoTag,
-                                   nsnull, mRuleWalker);
-      FileRules(EnumPseudoRulesMatching, &data);
+    PseudoRuleProcessorData data(presContext, aParentContent, aPseudoTag,
+                                 nsnull, mRuleWalker);
+    FileRules(EnumPseudoRulesMatching, &data);
 
-      if (!mRuleWalker->AtRoot())
-        result = GetContext(presContext, aParentContext, aPseudoTag).get();
+    if (!mRuleWalker->AtRoot())
+      result = GetContext(presContext, aParentContext, aPseudoTag).get();
 
-      // Now reset the walker back to the root of the tree.
-      mRuleWalker->Reset();
-    }
+    // Now reset the walker back to the root of the tree.
+    mRuleWalker->Reset();
   }
 
   // For :before and :after pseudo-elements, having display: none or no
@@ -946,14 +905,7 @@ nsStyleSet::HasStateDependentStyle(nsPre
 {
   nsReStyleHint result = nsReStyleHint(0);
 
-  if (aContent->IsNodeOfType(nsINode::eELEMENT) &&
-      (mRuleProcessors[eAgentSheet]        ||
-       mRuleProcessors[ePresHintSheet]     ||
-       mRuleProcessors[eUserSheet]         ||
-       mRuleProcessors[eHTMLPresHintSheet] ||
-       mRuleProcessors[eDocSheet]          ||
-       mRuleProcessors[eStyleAttrSheet]    ||
-       mRuleProcessors[eOverrideSheet])) {
+  if (aContent->IsNodeOfType(nsINode::eELEMENT)) {
     StatefulData data(aPresContext, aContent, aStateMask);
     WalkRuleProcessors(SheetHasStatefulStyle, &data);
     result = data.mHint;
@@ -993,14 +945,7 @@ nsStyleSet::HasAttributeDependentStyle(n
 {
   nsReStyleHint result = nsReStyleHint(0);
 
-  if (aContent->IsNodeOfType(nsINode::eELEMENT) &&
-      (mRuleProcessors[eAgentSheet]        ||
-       mRuleProcessors[ePresHintSheet]     ||
-       mRuleProcessors[eUserSheet]         ||
-       mRuleProcessors[eHTMLPresHintSheet] ||
-       mRuleProcessors[eDocSheet]          ||
-       mRuleProcessors[eStyleAttrSheet]    ||
-       mRuleProcessors[eOverrideSheet])) {
+  if (aContent->IsNodeOfType(nsINode::eELEMENT)) {
     AttributeData data(aPresContext, aContent, aAttribute, aModType,
                        aStateMask);
     WalkRuleProcessors(SheetHasAttributeStyle, &data);
