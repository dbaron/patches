From: L. David Baron <dbaron@dbaron.org>

Bug 1489297 patch 3 - Report MemoryErrorCorrection from WMI.

Differential Revision: https://phabricator.services.mozilla.com/D5201

diff --git a/toolkit/crashreporter/CrashAnnotations.yaml b/toolkit/crashreporter/CrashAnnotations.yaml
--- a/toolkit/crashreporter/CrashAnnotations.yaml
+++ b/toolkit/crashreporter/CrashAnnotations.yaml
@@ -472,16 +472,23 @@ LowCommitSpaceEvents:
   type: integer
   ping: true
 
 MarshalActCtxManifestPath:
   description: >
     Proxy stream marshalling current activation context manifest path.
   type: string
 
+MemoryErrorCorrection:
+  description: >
+    Windows only, type of error correction used by system memory.  See
+    documentation for MemoryErrorCorrection property of
+    Win32_PhysicalMemoryArray WMI class.
+  type: string
+
 MozCrashReason:
   description: >
     Plaintext description of why Firefox crashed, this is usually set by
     assertions and the like.
   type: string
   ping: true
 
 Notes:
diff --git a/toolkit/xre/nsAppRunner.cpp b/toolkit/xre/nsAppRunner.cpp
--- a/toolkit/xre/nsAppRunner.cpp
+++ b/toolkit/xre/nsAppRunner.cpp
@@ -3703,16 +3703,28 @@ static bool QueryOneWMIProperty(IWbemSer
   return SUCCEEDED(hr);
 }
 
 /**
  * Uses WMI to read some information that may be useful for diagnosing
  * crashes. This function is best-effort; failures shouldn't burden the
  * caller. COM must be initialized before calling.
  */
+
+static const char kMemoryErrorCorrectionValues[][15] = {
+  "Reserved", // 0
+  "Other", // 1
+  "Unknown", // 2
+  "None", // 3
+  "Parity", // 4
+  "Single-bit ECC", // 5
+  "Multi-bit ECC", // 6
+  "CRC" // 7
+};
+
 static void AnnotateWMIData()
 {
   RefPtr<IWbemLocator> locator;
 
   HRESULT hr = CoCreateInstance(CLSID_WbemLocator, nullptr, CLSCTX_INPROC_SERVER,
                                 IID_IWbemLocator, getter_AddRefs(locator));
 
   if (FAILED(hr)) {
@@ -3744,16 +3756,33 @@ static void AnnotateWMIData()
   if (QueryOneWMIProperty(services, L"Win32_BIOS", L"Manufacturer", &value) &&
       V_VT(&value) == VT_BSTR) {
     CrashReporter::AnnotateCrashReport(
       CrashReporter::Annotation::BIOS_Manufacturer,
       NS_ConvertUTF16toUTF8(V_BSTR(&value)));
   }
 
   VariantClear(&value);
+
+  // Annotate information about type of memory error correction.
+  if (QueryOneWMIProperty(services, L"Win32_PhysicalMemoryArray",
+                          L"MemoryErrorCorrection", &value) &&
+      V_VT(&value) == VT_I4) {
+    long valueInt = V_I4(&value);
+    nsCString valueString;
+    if (valueInt < 0 || valueInt >= ArrayLength(kMemoryErrorCorrectionValues)) {
+      valueString.AssignLiteral("Unexpected value");
+    } else {
+      valueString.AssignASCII(kMemoryErrorCorrectionValues[valueInt]);
+    }
+    CrashReporter::AnnotateCrashReport(
+      CrashReporter::Annotation::MemoryErrorCorrection, valueString);
+  }
+
+  VariantClear(&value);
 }
 
 static void PR_CALLBACK AnnotateWMIData_ThreadStart(void*)
 {
   HRESULT hr = CoInitialize(nullptr);
 
   if (FAILED(hr)) {
     return;
