From: L. David Baron <dbaron@dbaron.org>

diff --git a/gfx/thebes/gfxFont.cpp b/gfx/thebes/gfxFont.cpp
--- a/gfx/thebes/gfxFont.cpp
+++ b/gfx/thebes/gfxFont.cpp
@@ -1701,17 +1701,17 @@ gfxFont::DrawOneGlyph(uint32_t aGlyphID,
     gfxPoint devPt(ToDeviceUnits(glyphX, runParams.devPerApp),
                    ToDeviceUnits(glyphY, runParams.devPerApp));
 
     if (fontParams.haveSVGGlyphs) {
         if (!runParams.paintSVGGlyphs) {
             return;
         }
         DrawMode mode = ForcePaintingDrawMode(runParams.drawMode);
-        if (RenderSVGGlyph(runParams.context, devPt, mode,
+        if (RenderSVGGlyph(runParams.dt, devPt, mode,
                            aGlyphID, fontParams.contextPaint,
                            runParams.callbacks, *aEmittedGlyphs)) {
             return;
         }
     }
 
     if (fontParams.haveColorGlyphs &&
         RenderColorGlyph(runParams.dt, fontParams.scaledFont,
@@ -2010,52 +2010,53 @@ gfxFont::Draw(gfxTextRun *aTextRun, uint
             *aPt = gfxPoint(origPt.x, origPt.y - advance);
         } else {
             *aPt = gfxPoint(origPt.x, origPt.y + advance);
         }
     }
 }
 
 bool
-gfxFont::RenderSVGGlyph(gfxContext *aContext, gfxPoint aPoint, DrawMode aDrawMode,
+gfxFont::RenderSVGGlyph(DrawTarget* aDrawTarget, gfxPoint aPoint, DrawMode aDrawMode,
                         uint32_t aGlyphId, gfxTextContextPaint *aContextPaint) const
 {
     if (!GetFontEntry()->HasSVGGlyph(aGlyphId)) {
         return false;
     }
 
     const gfxFloat devUnitsPerSVGUnit =
         GetAdjustedSize() / GetFontEntry()->UnitsPerEm();
-    gfxContextMatrixAutoSaveRestore matrixRestore(aContext);
-
-    aContext->Save();
-    aContext->SetMatrix(
-      aContext->CurrentMatrix().Translate(aPoint.x, aPoint.y).
-                                Scale(devUnitsPerSVGUnit, devUnitsPerSVGUnit));
-
-    aContextPaint->InitStrokeGeometry(aContext, devUnitsPerSVGUnit);
-
-    bool rv = GetFontEntry()->RenderSVGGlyph(aContext, aGlyphId,
+
+    // REVIEW: Do we need to AutoRestoreClips too?
+    AutoRestoreTransform autoRestoreTransform(aDrawTarget);
+
+    RefPtr<gfxContext> context = gfxContext::ContextForDrawTarget(aDrawTarget);
+
+    context->SetMatrix(
+      context->CurrentMatrix().Translate(aPoint.x, aPoint.y).
+                               Scale(devUnitsPerSVGUnit, devUnitsPerSVGUnit));
+
+    aContextPaint->InitStrokeGeometry(context, devUnitsPerSVGUnit);
+
+    bool rv = GetFontEntry()->RenderSVGGlyph(context, aGlyphId,
                                              int(aDrawMode), aContextPaint);
-    aContext->Restore();
-    aContext->NewPath();
     return rv;
 }
 
 bool
-gfxFont::RenderSVGGlyph(gfxContext *aContext, gfxPoint aPoint, DrawMode aDrawMode,
+gfxFont::RenderSVGGlyph(DrawTarget* aDrawTarget, gfxPoint aPoint, DrawMode aDrawMode,
                         uint32_t aGlyphId, gfxTextContextPaint *aContextPaint,
                         gfxTextRunDrawCallbacks *aCallbacks,
                         bool& aEmittedGlyphs) const
 {
     if (aCallbacks && aEmittedGlyphs) {
         aCallbacks->NotifyGlyphPathEmitted();
         aEmittedGlyphs = false;
     }
-    return RenderSVGGlyph(aContext, aPoint, aDrawMode, aGlyphId, aContextPaint);
+    return RenderSVGGlyph(aDrawTarget, aPoint, aDrawMode, aGlyphId, aContextPaint);
 }
 
 bool
 gfxFont::RenderColorGlyph(mozilla::gfx::DrawTarget* dt,
                           mozilla::gfx::ScaledFont* scaledFont,
                           GlyphRenderingOptions* aRenderingOptions,
                           mozilla::gfx::DrawOptions aDrawOptions,
                           const mozilla::gfx::Point& aPoint,
diff --git a/gfx/thebes/gfxFont.h b/gfx/thebes/gfxFont.h
--- a/gfx/thebes/gfxFont.h
+++ b/gfx/thebes/gfxFont.h
@@ -2072,19 +2072,21 @@ protected:
     // Helper to calculate various derived metrics from the results of
     // InitMetricsFromSfntTables or equivalent platform code
     void CalculateDerivedMetrics(Metrics& aMetrics);
 
     // some fonts have bad metrics, this method sanitize them.
     // if this font has bad underline offset, aIsBadUnderlineFont should be true.
     void SanitizeMetrics(Metrics *aMetrics, bool aIsBadUnderlineFont);
 
-    bool RenderSVGGlyph(gfxContext *aContext, gfxPoint aPoint, DrawMode aDrawMode,
+    bool RenderSVGGlyph(mozilla::gfx::DrawTarget* aDrawTarget,
+                        gfxPoint aPoint, DrawMode aDrawMode,
                         uint32_t aGlyphId, gfxTextContextPaint *aContextPaint) const;
-    bool RenderSVGGlyph(gfxContext *aContext, gfxPoint aPoint, DrawMode aDrawMode,
+    bool RenderSVGGlyph(mozilla::gfx::DrawTarget* aDrawTarget,
+                        gfxPoint aPoint, DrawMode aDrawMode,
                         uint32_t aGlyphId, gfxTextContextPaint *aContextPaint,
                         gfxTextRunDrawCallbacks *aCallbacks,
                         bool& aEmittedGlyphs) const;
 
     bool RenderColorGlyph(mozilla::gfx::DrawTarget* dt,
                           mozilla::gfx::ScaledFont* scaledFont,
                           mozilla::gfx::GlyphRenderingOptions* renderingOptions,
                           mozilla::gfx::DrawOptions drawOptions,
