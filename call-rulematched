From: L. David Baron <dbaron@dbaron.org>

Call RuleMatched method on CSS rules when they are matched.  (Bug 522595)  r=bzbarsky

diff --git a/content/canvas/src/nsCanvasRenderingContext2D.cpp b/content/canvas/src/nsCanvasRenderingContext2D.cpp
--- a/content/canvas/src/nsCanvasRenderingContext2D.cpp
+++ b/content/canvas/src/nsCanvasRenderingContext2D.cpp
@@ -1877,16 +1877,18 @@ CreateFontStyleRule(const nsAString& aFo
                                    docURL,
                                    baseURL,
                                    principal,
                                    rule->GetDeclaration(),
                                    &changed);
     if (NS_FAILED(rv))
         return rv;
 
+    rule->RuleMatched();
+
     rule.forget(aResult);
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCanvasRenderingContext2D::SetFont(const nsAString& font)
 {
     nsresult rv;
diff --git a/content/svg/content/src/nsSVGElement.cpp b/content/svg/content/src/nsSVGElement.cpp
--- a/content/svg/content/src/nsSVGElement.cpp
+++ b/content/svg/content/src/nsSVGElement.cpp
@@ -721,18 +721,20 @@ NS_IMETHODIMP
 nsSVGElement::WalkContentStyleRules(nsRuleWalker* aRuleWalker)
 {
 #ifdef DEBUG
 //  printf("nsSVGElement(%p)::WalkContentStyleRules()\n", this);
 #endif
   if (!mContentStyleRule)
     UpdateContentStyleRule();
 
-  if (mContentStyleRule)  
+  if (mContentStyleRule) {
+    mContentStyleRule->RuleMatched();
     aRuleWalker->Forward(mContentStyleRule);
+  }
 
   return NS_OK;
 }
 
 // PresentationAttributes-FillStroke
 /* static */ const nsGenericElement::MappedAttributeEntry
 nsSVGElement::sFillStrokeMap[] = {
   { &nsGkAtoms::fill },
diff --git a/layout/style/nsCSSRuleProcessor.cpp b/layout/style/nsCSSRuleProcessor.cpp
--- a/layout/style/nsCSSRuleProcessor.cpp
+++ b/layout/style/nsCSSRuleProcessor.cpp
@@ -2129,16 +2129,17 @@ static void ContentEnumFunc(nsICSSStyleR
       // for performance, require that every implementation of
       // nsICSSStyleRule return the same pointer for nsIStyleRule (why
       // would anything multiply inherit nsIStyleRule anyway?)
 #ifdef DEBUG
       nsCOMPtr<nsIStyleRule> iRule = do_QueryInterface(aRule);
       NS_ASSERTION(static_cast<nsIStyleRule*>(aRule) == iRule.get(),
                    "Please fix QI so this performance optimization is valid");
 #endif
+      aRule->RuleMatched();
       data->mRuleWalker->Forward(static_cast<nsIStyleRule*>(aRule));
       // nsStyleSet will deal with the !important rule
     }
   }
 }
 
 NS_IMETHODIMP
 nsCSSRuleProcessor::RulesMatching(ElementRuleProcessorData *aData)
@@ -2195,16 +2196,17 @@ nsCSSRuleProcessor::RulesMatching(AnonBo
         // for performance, require that every implementation of
         // nsICSSStyleRule return the same pointer for nsIStyleRule (why
         // would anything multiply inherit nsIStyleRule anyway?)
 #ifdef DEBUG
         nsCOMPtr<nsIStyleRule> iRule = do_QueryInterface(value->mRule);
         NS_ASSERTION(static_cast<nsIStyleRule*>(value->mRule) == iRule.get(),
                      "Please fix QI so this performance optimization is valid");
 #endif
+        aRule->RuleMatched();
         aData->mRuleWalker->Forward(static_cast<nsIStyleRule*>(value->mRule));
       }
     }
   }
   return NS_OK;
 }
 
 #ifdef MOZ_XUL
diff --git a/layout/style/nsCSSStyleRule.cpp b/layout/style/nsCSSStyleRule.cpp
--- a/layout/style/nsCSSStyleRule.cpp
+++ b/layout/style/nsCSSStyleRule.cpp
@@ -1251,16 +1251,17 @@ public:
   virtual nsCSSSelectorList* Selector(void);
 
   virtual PRUint32 GetLineNumber(void) const;
   virtual void SetLineNumber(PRUint32 aLineNumber);
 
   virtual nsCSSDeclaration* GetDeclaration(void) const;
 
   virtual nsIStyleRule* GetImportantRule(void);
+  virtual void RuleMatched();
 
   NS_IMETHOD GetStyleSheet(nsIStyleSheet*& aSheet) const;
   NS_IMETHOD SetStyleSheet(nsICSSStyleSheet* aSheet);
   
   NS_IMETHOD SetParentRule(nsICSSGroupRule* aRule);
 
   virtual nsresult GetCssText(nsAString& aCssText);
   virtual nsresult SetCssText(const nsAString& aCssText);
@@ -1417,16 +1418,21 @@ nsIStyleRule* CSSStyleRuleImpl::GetImpor
     mImportantRule = new CSSImportantRule(mDeclaration);
     if (!mImportantRule)
       return nsnull;
     NS_ADDREF(mImportantRule);
   }
   return mImportantRule;
 }
 
+/* virtual */ void
+CSSStyleRuleImpl::RuleMatched()
+{
+}
+
 NS_IMETHODIMP
 CSSStyleRuleImpl::GetStyleSheet(nsIStyleSheet*& aSheet) const
 {
 // XXX What about inner, etc.
   return nsCSSRule::GetStyleSheet(aSheet);
 }
 
 NS_IMETHODIMP
diff --git a/layout/style/nsHTMLCSSStyleSheet.cpp b/layout/style/nsHTMLCSSStyleSheet.cpp
--- a/layout/style/nsHTMLCSSStyleSheet.cpp
+++ b/layout/style/nsHTMLCSSStyleSheet.cpp
@@ -143,23 +143,27 @@ NS_IMPL_ISUPPORTS3(HTMLCSSStyleSheetImpl
 
 NS_IMETHODIMP
 HTMLCSSStyleSheetImpl::RulesMatching(ElementRuleProcessorData* aData)
 {
   nsIContent* content = aData->mContent;
 
   // just get the one and only style rule from the content's STYLE attribute
   nsICSSStyleRule* rule = content->GetInlineStyleRule();
-  if (rule)
+  if (rule) {
+    rule->RuleMatched();
     aData->mRuleWalker->Forward(rule);
+  }
 
 #ifdef MOZ_SMIL
   rule = content->GetSMILOverrideStyleRule();
-  if (rule)
+  if (rule) {
+    rule->RuleMatched();
     aData->mRuleWalker->Forward(rule);
+  }
 #endif // MOZ_SMIL
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
 HTMLCSSStyleSheetImpl::RulesMatching(PseudoElementRuleProcessorData* aData)
 {
diff --git a/layout/style/nsICSSStyleRule.h b/layout/style/nsICSSStyleRule.h
--- a/layout/style/nsICSSStyleRule.h
+++ b/layout/style/nsICSSStyleRule.h
@@ -273,20 +273,20 @@ struct nsCSSSelectorList {
 private: 
   nsCSSSelectorList* Clone(PRBool aDeep) const;
 
   // These are not supported and are not implemented! 
   nsCSSSelectorList(const nsCSSSelectorList& aCopy);
   nsCSSSelectorList& operator=(const nsCSSSelectorList& aCopy); 
 };
 
-// IID for the nsICSSStyleRule interface {3ffbd89e-3c83-4e9b-9b1f-424c6cebac1b}
-#define NS_ICSS_STYLE_RULE_IID     \
-{ 0x3ffbd89e, 0x3c83, 0x4e9b, \
- { 0x9b, 0x1f, 0x42, 0x4c, 0x6c, 0xeb, 0xac, 0x1b } }
+// e665007e-5d4a-433a-9056-4310701c08b9
+#define NS_ICSS_STYLE_RULE_IID \
+{ 0xe665007e, 0x5d4a, 0x433a, \
+  { 0x90, 0x56, 0x43, 0x10, 0x70, 0x1c, 0x08, 0xb9 } }
 
 class nsICSSStyleRule : public nsICSSRule {
 public:
   NS_DECLARE_STATIC_IID_ACCESSOR(NS_ICSS_STYLE_RULE_IID)
 
   // null for style attribute
   virtual nsCSSSelectorList* Selector(void) = 0;
 
@@ -302,16 +302,22 @@ public:
    * declaration is modified.
    *
    * |DeclarationChanged| handles replacing the object in the container
    * sheet or group rule if |aHandleContainer| is true.
    */
   virtual already_AddRefed<nsICSSStyleRule>
     DeclarationChanged(PRBool aHandleContainer) = 0;
 
+  /**
+   * The rule processor must call this method before calling
+   * nsRuleWalker::Forward on this rule during rule matching.
+   */
+  virtual void RuleMatched() = 0;
+
   // hooks for DOM rule
   virtual nsresult GetCssText(nsAString& aCssText) = 0;
   virtual nsresult SetCssText(const nsAString& aCssText) = 0;
   virtual nsresult GetParentStyleSheet(nsICSSStyleSheet** aSheet) = 0;
   virtual nsresult GetParentRule(nsICSSGroupRule** aParentRule) = 0;
   virtual nsresult GetSelectorText(nsAString& aSelectorText) = 0;
   virtual nsresult SetSelectorText(const nsAString& aSelectorText) = 0;
 };
diff --git a/layout/style/nsStyleAnimation.cpp b/layout/style/nsStyleAnimation.cpp
--- a/layout/style/nsStyleAnimation.cpp
+++ b/layout/style/nsStyleAnimation.cpp
@@ -805,16 +805,18 @@ StyleWithDeclarationAdded(nsCSSProperty 
 
   // Parse specified value into a temporary nsICSSStyleRule
   nsCOMPtr<nsICSSStyleRule> styleRule =
     BuildStyleRule(aProperty, aTargetElement, aSpecifiedValue);
   if (!styleRule) {
     return nsnull;
   }
 
+  styleRule->RuleMatched();
+
   // Create a temporary nsStyleContext for the style rule
   nsCOMArray<nsIStyleRule> ruleArray;
   ruleArray.AppendObject(styleRule);
   nsStyleSet* styleSet = styleContext->PresContext()->StyleSet();
   return styleSet->ResolveStyleForRules(styleContext->GetParent(),
                                         styleContext->GetPseudo(),
                                         styleContext->GetPseudoType(),
                                         styleContext->GetRuleNode(),
