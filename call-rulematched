From: L. David Baron <dbaron@dbaron.org>

Call RuleMatched method on CSS rules when they are matched.  (Bug 522595)  r=bzbarsky

diff --git a/layout/style/nsCSSRuleProcessor.cpp b/layout/style/nsCSSRuleProcessor.cpp
--- a/layout/style/nsCSSRuleProcessor.cpp
+++ b/layout/style/nsCSSRuleProcessor.cpp
@@ -1997,16 +1997,17 @@ static void ContentEnumFunc(nsICSSStyleR
       // for performance, require that every implementation of
       // nsICSSStyleRule return the same pointer for nsIStyleRule (why
       // would anything multiply inherit nsIStyleRule anyway?)
 #ifdef DEBUG
       nsCOMPtr<nsIStyleRule> iRule = do_QueryInterface(aRule);
       NS_ASSERTION(static_cast<nsIStyleRule*>(aRule) == iRule.get(),
                    "Please fix QI so this performance optimization is valid");
 #endif
+      aRule->RuleMatched();
       data->mRuleWalker->Forward(static_cast<nsIStyleRule*>(aRule));
       // nsStyleSet will deal with the !important rule
     }
   }
 }
 
 NS_IMETHODIMP
 nsCSSRuleProcessor::RulesMatching(ElementRuleProcessorData *aData)
@@ -2065,16 +2066,17 @@ static void PseudoEnumFunc(nsICSSStyleRu
     // for performance, require that every implementation of
     // nsICSSStyleRule return the same pointer for nsIStyleRule (why
     // would anything multiply inherit nsIStyleRule anyway?)
 #ifdef DEBUG
     nsCOMPtr<nsIStyleRule> iRule = do_QueryInterface(aRule);
     NS_ASSERTION(static_cast<nsIStyleRule*>(aRule) == iRule.get(),
                  "Please fix QI so this performance optimization is valid");
 #endif
+    aRule->RuleMatched();
     data->mRuleWalker->Forward(static_cast<nsIStyleRule*>(aRule));
     // nsStyleSet will deal with the !important rule
   }
 }
 
 NS_IMETHODIMP
 nsCSSRuleProcessor::RulesMatching(PseudoRuleProcessorData* aData)
 {
diff --git a/layout/style/nsCSSStyleRule.cpp b/layout/style/nsCSSStyleRule.cpp
--- a/layout/style/nsCSSStyleRule.cpp
+++ b/layout/style/nsCSSStyleRule.cpp
@@ -1234,16 +1234,17 @@ public:
   virtual nsCSSSelectorList* Selector(void);
 
   virtual PRUint32 GetLineNumber(void) const;
   virtual void SetLineNumber(PRUint32 aLineNumber);
 
   virtual nsCSSDeclaration* GetDeclaration(void) const;
 
   virtual already_AddRefed<nsIStyleRule> GetImportantRule(void);
+  virtual void RuleMatched();
 
   NS_IMETHOD GetStyleSheet(nsIStyleSheet*& aSheet) const;
   NS_IMETHOD SetStyleSheet(nsICSSStyleSheet* aSheet);
   
   NS_IMETHOD SetParentRule(nsICSSGroupRule* aRule);
 
   virtual nsresult GetCssText(nsAString& aCssText);
   virtual nsresult SetCssText(const nsAString& aCssText);
@@ -1401,16 +1402,21 @@ already_AddRefed<nsIStyleRule> CSSStyleR
     if (!mImportantRule)
       return nsnull;
     NS_ADDREF(mImportantRule);
   }
   NS_ADDREF(mImportantRule);
   return mImportantRule;
 }
 
+/* virtual */ void
+CSSStyleRuleImpl::RuleMatched()
+{
+}
+
 NS_IMETHODIMP
 CSSStyleRuleImpl::GetStyleSheet(nsIStyleSheet*& aSheet) const
 {
 // XXX What about inner, etc.
   return nsCSSRule::GetStyleSheet(aSheet);
 }
 
 NS_IMETHODIMP
diff --git a/layout/style/nsHTMLCSSStyleSheet.cpp b/layout/style/nsHTMLCSSStyleSheet.cpp
--- a/layout/style/nsHTMLCSSStyleSheet.cpp
+++ b/layout/style/nsHTMLCSSStyleSheet.cpp
@@ -138,23 +138,27 @@ NS_IMPL_ISUPPORTS3(HTMLCSSStyleSheetImpl
 NS_IMETHODIMP
 HTMLCSSStyleSheetImpl::RulesMatching(ElementRuleProcessorData* aData)
 {
   nsIContent* content = aData->mContent;
   
   if (content) {
     // just get the one and only style rule from the content's STYLE attribute
     nsICSSStyleRule* rule = content->GetInlineStyleRule();
-    if (rule)
+    if (rule) {
+      rule->RuleMatched();
       aData->mRuleWalker->Forward(rule);
+    }
 
 #ifdef MOZ_SMIL
     rule = content->GetSMILOverrideStyleRule();
-    if (rule)
+    if (rule) {
+      rule->RuleMatched();
       aData->mRuleWalker->Forward(rule);
+    }
 #endif // MOZ_SMIL
   }
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
 HTMLCSSStyleSheetImpl::RulesMatching(PseudoRuleProcessorData* aData)
diff --git a/layout/style/nsICSSStyleRule.h b/layout/style/nsICSSStyleRule.h
--- a/layout/style/nsICSSStyleRule.h
+++ b/layout/style/nsICSSStyleRule.h
@@ -285,16 +285,22 @@ public:
    * |DeclarationChanged| handles replacing the object in the container
    * sheet or group rule if |aHandleContainer| is true.
    */
   virtual already_AddRefed<nsICSSStyleRule>
     DeclarationChanged(PRBool aHandleContainer) = 0;
 
   virtual already_AddRefed<nsIStyleRule> GetImportantRule(void) = 0;
 
+  /**
+   * The rule processor must call this method before calling
+   * nsRuleWalker::Forward on this rule during rule matching.
+   */
+  virtual void RuleMatched() = 0;
+
   // hooks for DOM rule
   virtual nsresult GetCssText(nsAString& aCssText) = 0;
   virtual nsresult SetCssText(const nsAString& aCssText) = 0;
   virtual nsresult GetParentStyleSheet(nsICSSStyleSheet** aSheet) = 0;
   virtual nsresult GetParentRule(nsICSSGroupRule** aParentRule) = 0;
   virtual nsresult GetSelectorText(nsAString& aSelectorText) = 0;
   virtual nsresult SetSelectorText(const nsAString& aSelectorText) = 0;
 };
