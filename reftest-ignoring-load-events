Fix the ignoring of load events for previous documents check so that it also works for (most) cases of the assertion check.  (Bug 477409)

diff --git a/layout/tools/reftest/reftest.js b/layout/tools/reftest/reftest.js
--- a/layout/tools/reftest/reftest.js
+++ b/layout/tools/reftest/reftest.js
@@ -98,16 +98,17 @@ var gAssertionCount = 0;
 var gIOService;
 var gDebug;
 var gWindowUtils;
 
 var gCurrentTestStartTime;
 var gSlowestTestTime = 0;
 var gSlowestTestURL;
 var gClearingForAssertionCheck = false;
+var gAwaitingLoadFor = null;
 
 const EXPECTED_PASS = 0;
 const EXPECTED_FAIL = 1;
 const EXPECTED_RANDOM = 2;
 const EXPECTED_DEATH = 3;  // test must be skipped to avoid e.g. crash/hang
 const EXPECTED_LOAD = 4; // test without a reference (just test that it does
                          // not assert, crash, hang, or leak)
 
@@ -480,16 +481,17 @@ function StartCurrentURI(aState)
     gCurrentURL = gURLs[0]["url" + aState].spec;
 
     if (gURICanvases[gCurrentURL] && gURLs[0].expected != EXPECTED_LOAD &&
         gURLs[0].maxAsserts == 0) {
         // Pretend the document loaded --- DocumentLoaded will notice
         // there's already a canvas for this URL
         setTimeout(DocumentLoaded, 0);
     } else {
+        gAwaitingLoadFor = gCurrentURL;
         gBrowser.loadURI(gCurrentURL);
     }
 }
 
 function DoneTests()
 {
     dump("REFTEST FINISHED: Slowest test took " + gSlowestTestTime +
          "ms (" + gSlowestTestURL + ")\n");
@@ -537,25 +539,26 @@ function resetZoom() {
 }
     
 function OnDocumentLoad(event)
 {
     if (event.target != gBrowser.contentDocument)
         // Ignore load events for subframes.
         return;
         
+    if (gBrowser.contentDocument.location.href != gAwaitingLoadFor) {
+        // Ignore load events for previous documents.
+        return;
+    }
+
     if (gClearingForAssertionCheck) {
         DoAssertionCheck();
         return;
     }
 
-    if (gBrowser.contentDocument.location.href != gCurrentURL)
-        // Ignore load events for previous documents.
-        return;
-
     var contentRootElement = gBrowser.contentDocument.documentElement;
 
     function shouldWait() {
         // use getAttribute because className works differently in HTML and SVG
         return contentRootElement.hasAttribute('class') &&
                contentRootElement.getAttribute('class').split(/\s+/)
                                  .indexOf("reftest-wait") != -1;
     }
@@ -901,16 +904,17 @@ function LoadFailed()
     FinishTestItem();
 }
 
 function FinishTestItem()
 {
     // Replace document with about:blank in case there are
     // assertions when unloading.
     gClearingForAssertionCheck = true;
+    gAwaitingLoadFor = "about:blank";
     gBrowser.loadURI("about:blank");
 }
 
 function DoAssertionCheck()
 {
     gClearingForAssertionCheck = false;
 
     if (gDebug.isDebugBuild) {
