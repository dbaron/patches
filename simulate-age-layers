From: L. David Baron <dbaron@dbaron.org>

Make DOMWindowUtils::AdvanceTimeAndRefresh age the ActiveLayerTracker.

FIXME: Test failures in layout/style/test/test_animations_omta.html
(and I didn't even try any other test files)

diff --git a/dom/base/nsDOMWindowUtils.cpp b/dom/base/nsDOMWindowUtils.cpp
--- a/dom/base/nsDOMWindowUtils.cpp
+++ b/dom/base/nsDOMWindowUtils.cpp
@@ -101,16 +101,17 @@
 #include "nsIStyleSheetService.h"
 #include "nsContentPermissionHelper.h"
 #include "nsCSSPseudoElements.h"            // for CSSPseudoElementType
 #include "nsNetUtil.h"
 #include "nsDocument.h"
 #include "HTMLImageElement.h"
 #include "HTMLCanvasElement.h"
 #include "mozilla/css/ImageLoader.h"
+#include "ActiveLayerTracker.h"
 #include "mozilla/layers/APZCTreeManager.h" // for layers::ZoomToRectBehavior
 #include "mozilla/dom/Promise.h"
 #include "mozilla/StyleSheetInlines.h"
 #include "mozilla/gfx/GPUProcessManager.h"
 #include "mozilla/dom/TimeoutManager.h"
 #include "mozilla/PreloadedStyleSheet.h"
 #include "mozilla/layers/WebRenderBridgeChild.h"
 #include "mozilla/layers/WebRenderLayerManager.h"
@@ -2469,16 +2470,18 @@ nsDOMWindowUtils::AdvanceTimeAndRefresh(
   nsCOMPtr<nsIDocument> doc = GetDocument();
   if (doc) {
     PendingAnimationTracker* tracker = doc->GetPendingAnimationTracker();
     if (tracker) {
       tracker->TriggerPendingAnimationsNow();
     }
   }
 
+  ActiveLayerTracker::SimulateTimeAdvance(aMilliseconds);
+
   nsPresContext* presContext = GetPresContext();
   if (presContext) {
     nsRefreshDriver* driver = presContext->RefreshDriver();
     driver->AdvanceTimeAndRefresh(aMilliseconds);
 
     RefPtr<LayerTransactionChild> transaction = GetLayerTransaction();
     if (transaction && transaction->IPCOpen()) {
       transaction->SendSetTestSampleTime(driver->MostRecentRefresh());
diff --git a/layout/painting/ActiveLayerTracker.cpp b/layout/painting/ActiveLayerTracker.cpp
--- a/layout/painting/ActiveLayerTracker.cpp
+++ b/layout/painting/ActiveLayerTracker.cpp
@@ -107,16 +107,17 @@ public:
   // Number of restyle operations detected
   uint8_t mRestyleCounts[ACTIVITY_COUNT];
   bool mContentActive;
 };
 
 class LayerActivityTracker final : public nsExpirationTracker<LayerActivity,4> {
 public:
   // 75-100ms is a good timeout period. We use 4 generations of 25ms each.
+  // FIXME: Nope, this is 4 generations of 100ms each!
   enum { GENERATION_MS = 100 };
   explicit LayerActivityTracker(nsIEventTarget* aEventTarget)
     : nsExpirationTracker<LayerActivity,4>(GENERATION_MS,
                                            "LayerActivityTracker",
                                            aEventTarget)
     , mDestroying(false)
   {}
   ~LayerActivityTracker() {
@@ -502,15 +503,34 @@ ActiveLayerTracker::SetCurrentScrollHand
   if (!gLayerActivityTracker) {
     gLayerActivityTracker = new LayerActivityTracker(
       SystemGroup::EventTargetFor(TaskCategory::Other));
   }
   gLayerActivityTracker->mCurrentScrollHandlerFrame = aFrame;
 }
 
 /* static */ void
+ActiveLayerTracker::SimulateTimeAdvance(int64_t aMilliseconds)
+{
+  if (aMilliseconds < 0) {
+    return;
+  }
+
+  if (gLayerActivityTracker) {
+    // Round to the nearest number of iterations.
+    uint32_t timerPeriod = gLayerActivityTracker->TimerPeriod();
+    uint32_t iterations = (aMilliseconds + timerPeriod / 2) / timerPeriod;
+    iterations = std::min(iterations, gLayerActivityTracker->GenerationCount());
+
+    while (iterations-- != 0) {
+      gLayerActivityTracker->AgeOneGeneration();
+    }
+  }
+}
+
+/* static */ void
 ActiveLayerTracker::Shutdown()
 {
   delete gLayerActivityTracker;
   gLayerActivityTracker = nullptr;
 }
 
 } // namespace mozilla
diff --git a/layout/painting/ActiveLayerTracker.h b/layout/painting/ActiveLayerTracker.h
--- a/layout/painting/ActiveLayerTracker.h
+++ b/layout/painting/ActiveLayerTracker.h
@@ -3,16 +3,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef ACTIVELAYERTRACKER_H_
 #define ACTIVELAYERTRACKER_H_
 
 #include "nsCSSPropertyID.h"
+#include "mozilla/Types.h"
 
 class nsIFrame;
 class nsIContent;
 class nsDisplayListBuilder;
 class nsDOMCSSDeclaration;
 
 namespace mozilla {
 
@@ -131,13 +132,19 @@ public:
   static bool IsContentActive(nsIFrame* aFrame);
 
   /**
    * Called before and after a scroll event handler is executed, with the
    * scrollframe or nullptr, respectively. This acts as a hint to treat
    * inline style changes during the handler differently.
    */
   static void SetCurrentScrollHandlerFrame(nsIFrame* aFrame);
+
+  /**
+   * Method to allow tests to simulate the advance of time.  Rounds to
+   * the granularity of the expiration tracker.
+   */
+  static void SimulateTimeAdvance(int64_t aMilliseconds);
 };
 
 } // namespace mozilla
 
 #endif /* ACTIVELAYERTRACKER_H_ */
diff --git a/xpcom/ds/nsExpirationTracker.h b/xpcom/ds/nsExpirationTracker.h
--- a/xpcom/ds/nsExpirationTracker.h
+++ b/xpcom/ds/nsExpirationTracker.h
@@ -134,16 +134,38 @@ public:
   {
     MOZ_ASSERT(NS_IsMainThread());
     if (mTimer) {
       mTimer->Cancel();
     }
     mObserver->Destroy();
   }
 
+  uint32_t GenerationCount() const
+  {
+    return K;
+  }
+
+  // The timer period (interval for aging one generation), in milliseconds.
+  uint32_t TimerPeriod() const
+  {
+    return mTimerPeriod;
+  }
+
+  // The bounds (in milliseconds) on object expiration, assuming
+  // accurate timer firing.
+  uint32_t MinExpirationInterval() const
+  {
+    return TimerPeriod() * (GenerationCount() - 1);
+  }
+  uint32_t MaxExpirationInterval() const
+  {
+    return TimerPeriod() * GenerationCount();
+  }
+
   /**
    * Add an object to be tracked. It must not already be tracked. It will
    * be added to the newest generation, i.e., as if it was just used.
    * @return an error on out-of-memory
    */
   nsresult AddObjectLocked(T* aObj, const AutoLock& aAutoLock)
   {
     if (NS_WARN_IF(!aObj)) {
@@ -371,17 +393,17 @@ protected:
 
   virtual Mutex& GetMutex() = 0;
 
 private:
   class ExpirationTrackerObserver;
   RefPtr<ExpirationTrackerObserver> mObserver;
   nsTArray<T*>       mGenerations[K];
   nsCOMPtr<nsITimer> mTimer;
-  uint32_t           mTimerPeriod;
+  const uint32_t     mTimerPeriod;
   uint32_t           mNewestGeneration;
   bool               mInAgeOneGeneration;
   const char* const  mName;   // Used for timer firing profiling.
   const nsCOMPtr<nsIEventTarget> mEventTarget;
 
   /**
    * Whenever "memory-pressure" is observed, it calls AgeAllGenerationsLocked()
    * to minimize memory usage.
@@ -527,16 +549,40 @@ public:
     : ::detail::SingleThreadedExpirationTracker<T, K>(aTimerPeriod,
                                                       aName,
                                                       aEventTarget)
   { }
 
   virtual ~nsExpirationTracker()
   { }
 
+#if defined(_MSC_VER) && _MSC_VER < 2000
+  // MSVC gives an internal compiler error from these using
+  // declarations, so work around the ICE, but limit the workaround to the
+  // major versions known to have the ICE (which we may need to bump
+  // later).
+  uint32_t GenerationCount() const {
+    return this->::detail::SingleThreadedExpirationTracker<T, K>::GenerationCount();
+  }
+  uint32_t TimerPeriod() const {
+    return this->::detail::SingleThreadedExpirationTracker<T, K>::TimerPeriod();
+  }
+  uint32_t MinExpirationInterval() const {
+    return this->::detail::SingleThreadedExpirationTracker<T, K>::MinExpirationInterval();
+  }
+  uint32_t MaxExpirationInterval() const {
+    return this->::detail::SingleThreadedExpirationTracker<T, K>::MaxExpirationInterval();
+  }
+#else
+  using ::detail::SingleThreadedExpirationTracker<T, K>::GenerationCount;
+  using ::detail::SingleThreadedExpirationTracker<T, K>::TimerPeriod;
+  using ::detail::SingleThreadedExpirationTracker<T, K>::MinExpirationInterval;
+  using ::detail::SingleThreadedExpirationTracker<T, K>::MaxExpirationInterval;
+#endif
+
   nsresult AddObject(T* aObj)
   {
     return this->AddObjectLocked(aObj, FakeLock());
   }
 
   void RemoveObject(T* aObj)
   {
     this->RemoveObjectLocked(aObj, FakeLock());
