Change which containing block's 'direction' property we use to determine which side's offset property to ignore when using the static position for absolutely positioned elements.  b=403328  Patch by Uri Bernstein <uriber@gmail.com>.  r+sr=dbaron  a=blocking1.9+

diff --git a/layout/generic/nsHTMLReflowState.cpp b/layout/generic/nsHTMLReflowState.cpp
--- a/layout/generic/nsHTMLReflowState.cpp
+++ b/layout/generic/nsHTMLReflowState.cpp
@@ -1124,14 +1124,12 @@ nsHTMLReflowState::InitAbsoluteConstrain
                                mComputedOffsets.right);
   }
 
-  PRUint8 direction = cbrs ? cbrs->mStyleVisibility->mDirection : NS_STYLE_DIRECTION_LTR;
-
   // Use the horizontal component of the hypothetical box in the cases
   // where it's needed.
   if (leftIsAuto && rightIsAuto) {
     // Use the 'direction' to dictate whether 'left' or 'right' is
     // treated like 'static-position'
-    if (NS_STYLE_DIRECTION_LTR == direction) {
+    if (NS_STYLE_DIRECTION_LTR == cbFrame->GetStyleVisibility()->mDirection) {
       if (hypotheticalBox.mLeftIsExact) {
         mComputedOffsets.left = hypotheticalBox.mLeft;
         leftIsAuto = PR_FALSE;
@@ -1262,12 +1260,13 @@ nsHTMLReflowState::InitAbsoluteConstrain
       // We're over-constrained so use 'direction' to dictate which
       // value to ignore.  (And note that the spec says to ignore 'left'
       // or 'right' rather than 'margin-left' or 'margin-right'.)
-      if (NS_STYLE_DIRECTION_LTR == direction) {
+      if (cbrs &&
+          NS_STYLE_DIRECTION_RTL == cbrs->mStyleVisibility->mDirection) {
+        // Ignore the specified value for 'left'.
+        mComputedOffsets.left += availMarginSpace;
+      } else {
         // Ignore the specified value for 'right'.
         mComputedOffsets.right += availMarginSpace;
-      } else {
-        // Ignore the specified value for 'left'.
-        mComputedOffsets.left += availMarginSpace;
       }
     } else if (marginLeftIsAuto) {
       if (marginRightIsAuto) {
