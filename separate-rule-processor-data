From: L. David Baron <dbaron@dbaron.org>

Separate RuleProcessorData and derived structs into their own header file to reduce include dependencies.

diff --git a/content/base/src/nsContentUtils.cpp b/content/base/src/nsContentUtils.cpp
--- a/content/base/src/nsContentUtils.cpp
+++ b/content/base/src/nsContentUtils.cpp
@@ -157,16 +157,17 @@ static NS_DEFINE_CID(kXTFServiceCID, NS_
 #include "nsIUGenCategory.h"
 #include "nsIDragService.h"
 #include "nsIChannelEventSink.h"
 #include "nsIInterfaceRequestor.h"
 #include "nsIOfflineCacheUpdate.h"
 #include "nsCPrefetchService.h"
 #include "nsIChromeRegistry.h"
 #include "nsIMIMEHeaderParam.h"
+#include "nsPresContext.h"
 
 #ifdef IBMBIDI
 #include "nsIBidiKeyboard.h"
 #endif
 #include "nsCycleCollectionParticipant.h"
 
 // for ReportToConsole
 #include "nsIStringBundle.h"
diff --git a/content/base/src/nsGenericElement.cpp b/content/base/src/nsGenericElement.cpp
--- a/content/base/src/nsGenericElement.cpp
+++ b/content/base/src/nsGenericElement.cpp
@@ -129,16 +129,17 @@
 #include "nsIView.h"
 #include "nsIViewManager.h"
 #include "nsIScrollableFrame.h"
 #include "nsIScrollableView.h"
 #include "nsIScrollableViewProvider.h"
 #include "nsXBLInsertionPoint.h"
 #include "nsICSSStyleRule.h" /* For nsCSSSelectorList */
 #include "nsCSSRuleProcessor.h"
+#include "nsRuleProcessorData.h"
 
 #ifdef MOZ_XUL
 #include "nsIXULDocument.h"
 #endif /* MOZ_XUL */
 
 #ifdef ACCESSIBILITY
 #include "nsIAccessibilityService.h"
 #include "nsIAccessibleEvent.h"
diff --git a/content/xbl/src/nsBindingManager.cpp b/content/xbl/src/nsBindingManager.cpp
--- a/content/xbl/src/nsBindingManager.cpp
+++ b/content/xbl/src/nsBindingManager.cpp
@@ -64,16 +64,17 @@
 #include "nsIXBLDocumentInfo.h"
 #include "nsXBLInsertionPoint.h"
 
 #include "nsIStyleSheet.h"
 #include "nsHTMLStyleSheet.h"
 #include "nsIHTMLCSSStyleSheet.h"
 
 #include "nsIStyleRuleProcessor.h"
+#include "nsRuleProcessorData.h"
 #include "nsIWeakReference.h"
 
 #include "jsapi.h"
 #include "nsIXPConnect.h"
 #include "nsDOMCID.h"
 #include "nsIDOMScriptObjectFactory.h"
 #include "nsIScriptGlobalObject.h"
 #include "nsTHashtable.h"
diff --git a/content/xbl/src/nsXBLPrototypeHandler.cpp b/content/xbl/src/nsXBLPrototypeHandler.cpp
--- a/content/xbl/src/nsXBLPrototypeHandler.cpp
+++ b/content/xbl/src/nsXBLPrototypeHandler.cpp
@@ -76,16 +76,17 @@
 #include "nsIXPConnect.h"
 #include "nsIDOMScriptObjectFactory.h"
 #include "nsDOMCID.h"
 #include "nsUnicharUtils.h"
 #include "nsReadableUtils.h"
 #include "nsCRT.h"
 #include "nsXBLEventHandler.h"
 #include "nsEventDispatcher.h"
+#include "nsPresContext.h"
 
 static NS_DEFINE_CID(kDOMScriptObjectFactoryCID,
                      NS_DOM_SCRIPT_OBJECT_FACTORY_CID);
 
 PRUint32 nsXBLPrototypeHandler::gRefCnt = 0;
 
 PRInt32 nsXBLPrototypeHandler::kMenuAccessKey = -1;
 PRInt32 nsXBLPrototypeHandler::kAccelKey = -1;
diff --git a/layout/style/Makefile.in b/layout/style/Makefile.in
--- a/layout/style/Makefile.in
+++ b/layout/style/Makefile.in
@@ -110,16 +110,17 @@ EXPORTS		= \
 		nsIHTMLCSSStyleSheet.h \
 		nsIInspectorCSSUtils.h \
 		nsIStyleRule.h \
 		nsIStyleRuleProcessor.h \
 		nsIStyleSheet.h \
 		nsLayoutStylesheetCache.h \
 		nsRuleData.h \
 		nsRuleNode.h \
+		nsRuleProcessorData.h \
 		nsRuleWalker.h \
 		nsStyleContext.h \
 		nsStyleCoord.h \
 		nsStyleSet.h \
 		nsStyleStruct.h \
 		nsStyleStructFwd.h \
 		nsStyleStructInlines.h \
 		nsStyleStructList.h \
diff --git a/layout/style/nsCSSRuleProcessor.cpp b/layout/style/nsCSSRuleProcessor.cpp
--- a/layout/style/nsCSSRuleProcessor.cpp
+++ b/layout/style/nsCSSRuleProcessor.cpp
@@ -41,16 +41,17 @@
  * ***** END LICENSE BLOCK ***** */
 
 /*
  * style rule processor for CSS style sheets, responsible for selector
  * matching and cascading
  */
 
 #include "nsCSSRuleProcessor.h"
+#include "nsRuleProcessorData.h"
 
 #define PL_ARENA_CONST_ALIGN_MASK 7
 #define NS_RULEHASH_ARENA_BLOCK_SIZE (256)
 #include "plarena.h"
 
 #include "nsCRT.h"
 #include "nsIAtom.h"
 #include "pldhash.h"
diff --git a/layout/style/nsCSSRuleProcessor.h b/layout/style/nsCSSRuleProcessor.h
--- a/layout/style/nsCSSRuleProcessor.h
+++ b/layout/style/nsCSSRuleProcessor.h
@@ -44,20 +44,20 @@
 
 #ifndef nsCSSRuleProcessor_h_
 #define nsCSSRuleProcessor_h_
 
 #include "nsIStyleRuleProcessor.h"
 #include "nsCSSStyleSheet.h"
 #include "nsTArray.h"
 #include "nsAutoPtr.h"
+#include "nsCSSRules.h"
 
 struct RuleCascadeData;
 struct nsCSSSelectorList;
-class nsCSSFontFaceRule;
 
 /**
  * The CSS style rule processor provides a mechanism for sibling style
  * sheets to combine their rule processing in order to allow proper
  * cascading to happen.
  *
  * CSS style rule processors keep a live reference on all style sheets
  * bound to them.  The CSS style sheets keep a weak reference to all the
diff --git a/layout/style/nsHTMLCSSStyleSheet.cpp b/layout/style/nsHTMLCSSStyleSheet.cpp
--- a/layout/style/nsHTMLCSSStyleSheet.cpp
+++ b/layout/style/nsHTMLCSSStyleSheet.cpp
@@ -49,16 +49,17 @@
 #include "nsIFrame.h"
 #include "nsICSSStyleRule.h"
 #include "nsIStyleRuleProcessor.h"
 #include "nsPresContext.h"
 #include "nsIDocument.h"
 #include "nsCOMPtr.h"
 #include "nsRuleWalker.h"
 #include "nsRuleData.h"
+#include "nsRuleProcessorData.h"
 
 // -----------------------------------------------------------
 
 class HTMLCSSStyleSheetImpl : public nsIHTMLCSSStyleSheet,
                               public nsIStyleRuleProcessor {
 public:
   HTMLCSSStyleSheetImpl();
 
diff --git a/layout/style/nsHTMLStyleSheet.cpp b/layout/style/nsHTMLStyleSheet.cpp
--- a/layout/style/nsHTMLStyleSheet.cpp
+++ b/layout/style/nsHTMLStyleSheet.cpp
@@ -64,16 +64,17 @@
 #include "nsIPresShell.h"
 #include "nsStyleConsts.h"
 #include "nsIDOMHTMLDocument.h"
 #include "nsIDOMHTMLElement.h"
 #include "nsCSSAnonBoxes.h"
 #include "nsRuleWalker.h"
 #include "nsRuleData.h"
 #include "nsContentErrors.h"
+#include "nsRuleProcessorData.h"
 
 NS_IMPL_ISUPPORTS1(nsHTMLStyleSheet::HTMLColorRule, nsIStyleRule)
 
 NS_IMETHODIMP
 nsHTMLStyleSheet::HTMLColorRule::MapRuleInfoInto(nsRuleData* aRuleData)
 {
   if (aRuleData->mSIDs & NS_STYLE_INHERIT_BIT(Color)) {
     if (aRuleData->mColorData->mColor.GetUnit() == eCSSUnit_Null &&
diff --git a/layout/style/nsHTMLStyleSheet.h b/layout/style/nsHTMLStyleSheet.h
--- a/layout/style/nsHTMLStyleSheet.h
+++ b/layout/style/nsHTMLStyleSheet.h
@@ -45,16 +45,17 @@
 #ifndef nsHTMLStyleSheet_h_
 #define nsHTMLStyleSheet_h_
 
 #include "nsIStyleSheet.h"
 #include "nsIStyleRuleProcessor.h"
 #include "nsIStyleRule.h"
 #include "pldhash.h"
 #include "nsCOMPtr.h"
+#include "nsColor.h"
 class nsMappedAttributes;
 
 class nsHTMLStyleSheet : public nsIStyleSheet, public nsIStyleRuleProcessor {
 public:
   nsHTMLStyleSheet(void);
   nsresult Init();
 
   NS_DECL_ISUPPORTS
diff --git a/layout/style/nsIStyleRuleProcessor.h b/layout/style/nsIStyleRuleProcessor.h
--- a/layout/style/nsIStyleRuleProcessor.h
+++ b/layout/style/nsIStyleRuleProcessor.h
@@ -40,190 +40,25 @@
  * internal abstract interface for containers (roughly origins within
  * the CSS cascade) that provide style rules matching an element or
  * pseudo-element
  */
 
 #ifndef nsIStyleRuleProcessor_h___
 #define nsIStyleRuleProcessor_h___
 
-#include <stdio.h>
-
 #include "nsISupports.h"
-#include "nsPresContext.h" // for nsCompatability
-#include "nsILinkHandler.h"
-#include "nsString.h"
 #include "nsChangeHint.h"
 
-class nsIStyleSheet;
+struct RuleProcessorData;
+struct ElementRuleProcessorData;
+struct PseudoRuleProcessorData;
+struct StateRuleProcessorData;
+struct AttributeRuleProcessorData;
 class nsPresContext;
-class nsIContent;
-class nsIAtom;
-class nsICSSPseudoComparator;
-class nsRuleWalker;
-class nsAttrValue;
-
-// The implementation of the constructor and destructor are currently in
-// nsCSSRuleProcessor.cpp.
-
-struct RuleProcessorData {
-  RuleProcessorData(nsPresContext* aPresContext,
-                    nsIContent* aContent, 
-                    nsRuleWalker* aRuleWalker,
-                    nsCompatibility* aCompat = nsnull);
-  
-  // NOTE: not |virtual|
-  ~RuleProcessorData();
-
-  // This should be used for all heap-allocation of RuleProcessorData
-  static RuleProcessorData* Create(nsPresContext* aPresContext,
-                                   nsIContent* aContent, 
-                                   nsRuleWalker* aRuleWalker,
-                                   nsCompatibility aCompat)
-  {
-    if (NS_LIKELY(aPresContext)) {
-      return new (aPresContext) RuleProcessorData(aPresContext, aContent,
-                                                  aRuleWalker, &aCompat);
-    }
-
-    return new RuleProcessorData(aPresContext, aContent, aRuleWalker,
-                                 &aCompat);
-  }
-  
-  void Destroy() {
-    nsPresContext * pc = mPresContext;
-    if (NS_LIKELY(pc)) {
-      this->~RuleProcessorData();
-      pc->FreeToShell(sizeof(RuleProcessorData), this);
-      return;
-    }
-    delete this;
-  }
-
-  // For placement new
-  void* operator new(size_t sz, RuleProcessorData* aSlot) CPP_THROW_NEW {
-    return aSlot;
-  }
-private:
-  void* operator new(size_t sz, nsPresContext* aContext) CPP_THROW_NEW {
-    return aContext->AllocateFromShell(sz);
-  }
-  void* operator new(size_t sz) CPP_THROW_NEW {
-    return ::operator new(sz);
-  }
-public:
-  const nsString* GetLang();
-
-  // Returns a 1-based index of the child in its parent.  If the child
-  // is not in its parent's child list (i.e., it is anonymous content),
-  // returns 0.
-  // If aCheckEdgeOnly is true, the function will return 1 if the result
-  // is 1, and something other than 1 (maybe or maybe not a valid
-  // result) otherwise.
-  PRInt32 GetNthIndex(PRBool aIsOfType, PRBool aIsFromEnd,
-                      PRBool aCheckEdgeOnly);
-
-  nsPresContext*    mPresContext;
-  nsIContent*       mContent;       // weak ref
-  nsIContent*       mParentContent; // if content, content->GetParent(); weak ref
-  nsRuleWalker*     mRuleWalker; // Used to add rules to our results.
-  nsIContent*       mScopedRoot;    // Root of scoped stylesheet (set and unset by the supplier of the scoped stylesheet
-  
-  nsIAtom*          mContentTag;    // if content, then content->GetTag()
-  nsIAtom*          mContentID;     // if styled content, then weak reference to styledcontent->GetID()
-  PRPackedBool      mIsHTMLContent; // if content, then does QI on HTMLContent, true or false
-  PRPackedBool      mIsLink;        // if content, calls nsStyleUtil::IsHTMLLink or nsStyleUtil::IsLink
-  PRPackedBool      mHasAttributes; // if content, content->GetAttrCount() > 0
-  nsCompatibility   mCompatMode;    // Possibly remove use of this in SelectorMatches?
-  nsLinkState       mLinkState;     // if a link, this is the state, otherwise unknown
-  PRInt32           mEventState;    // if content, eventStateMgr->GetContentState()
-  PRInt32           mNameSpaceID;   // if content, content->GetNameSapce()
-  const nsAttrValue* mClasses;      // if styled content, styledcontent->GetClasses()
-  // mPreviousSiblingData and mParentData are always RuleProcessorData
-  // and never a derived class.  They are allocated lazily, when
-  // selectors require matching of prior siblings or ancestors.
-  RuleProcessorData* mPreviousSiblingData;
-  RuleProcessorData* mParentData;
-
-protected:
-  nsString *mLanguage; // NULL means we haven't found out the language yet
-
-  // This node's index for :nth-child(), :nth-last-child(),
-  // :nth-of-type(), :nth-last-of-type().  If -2, needs to be computed.
-  // If -1, needs to be computed but known not to be 1.
-  // If 0, the node is not at any index in its parent.
-  // The first subscript is 0 for -child and 1 for -of-type, the second
-  // subscript is 0 for nth- and 1 for nth-last-.
-  PRInt32 mNthIndices[2][2];
-};
-
-struct ElementRuleProcessorData : public RuleProcessorData {
-  ElementRuleProcessorData(nsPresContext* aPresContext,
-                           nsIContent* aContent, 
-                           nsRuleWalker* aRuleWalker)
-  : RuleProcessorData(aPresContext,aContent,aRuleWalker)
-  {
-    NS_PRECONDITION(aPresContext, "null pointer");
-    NS_PRECONDITION(aContent, "null pointer");
-    NS_PRECONDITION(aRuleWalker, "null pointer");
-  }
-};
-
-struct PseudoRuleProcessorData : public RuleProcessorData {
-  PseudoRuleProcessorData(nsPresContext* aPresContext,
-                          nsIContent* aParentContent,
-                          nsIAtom* aPseudoTag,
-                          nsICSSPseudoComparator* aComparator,
-                          nsRuleWalker* aRuleWalker)
-  : RuleProcessorData(aPresContext, aParentContent, aRuleWalker)
-  {
-    NS_PRECONDITION(aPresContext, "null pointer");
-    NS_PRECONDITION(aPseudoTag, "null pointer");
-    NS_PRECONDITION(aRuleWalker, "null pointer");
-    mPseudoTag = aPseudoTag;
-    mComparator = aComparator;
-  }
-
-  nsIAtom*                 mPseudoTag;
-  nsICSSPseudoComparator*  mComparator;
-};
-
-struct StateRuleProcessorData : public RuleProcessorData {
-  StateRuleProcessorData(nsPresContext* aPresContext,
-                         nsIContent* aContent,
-                         PRInt32 aStateMask)
-    : RuleProcessorData(aPresContext, aContent, nsnull),
-      mStateMask(aStateMask)
-  {
-    NS_PRECONDITION(aPresContext, "null pointer");
-    NS_PRECONDITION(aContent, "null pointer");
-  }
-  const PRInt32 mStateMask; // |HasStateDependentStyle| for which state(s)?
-                            //  Constants defined in nsIEventStateManager.h .
-};
-
-struct AttributeRuleProcessorData : public RuleProcessorData {
-  AttributeRuleProcessorData(nsPresContext* aPresContext,
-                             nsIContent* aContent,
-                             nsIAtom* aAttribute,
-                             PRInt32 aModType,
-                             PRUint32 aStateMask)
-    : RuleProcessorData(aPresContext, aContent, nsnull),
-      mAttribute(aAttribute),
-      mModType(aModType),
-      mStateMask(aStateMask)
-  {
-    NS_PRECONDITION(aPresContext, "null pointer");
-    NS_PRECONDITION(aContent, "null pointer");
-  }
-  nsIAtom* mAttribute; // |HasAttributeDependentStyle| for which attribute?
-  PRInt32 mModType;    // The type of modification (see nsIDOMMutationEvent).
-  PRUint32 mStateMask; // The states that changed with the attr change.
-};
-
 
 // IID for the nsIStyleRuleProcessor interface {015575fe-7b6c-11d3-ba05-001083023c2b}
 #define NS_ISTYLE_RULE_PROCESSOR_IID     \
 {0x015575fe, 0x7b6c, 0x11d3, {0xba, 0x05, 0x00, 0x10, 0x83, 0x02, 0x3c, 0x2b}}
 
 /* The style rule processor interface is a mechanism to separate the matching
  * of style rules from style sheet instances.
  * Simple style sheets can and will act as their own processor. 
diff --git a/layout/style/nsIStyleRuleProcessor.h b/layout/style/nsRuleProcessorData.h
copy from layout/style/nsIStyleRuleProcessor.h
copy to layout/style/nsRuleProcessorData.h
--- a/layout/style/nsIStyleRuleProcessor.h
+++ b/layout/style/nsRuleProcessorData.h
@@ -32,27 +32,23 @@
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 /*
- * internal abstract interface for containers (roughly origins within
- * the CSS cascade) that provide style rules matching an element or
- * pseudo-element
+ * data structures passed to nsIStyleRuleProcessor methods (to pull loop
+ * invariant computations out of the loop)
  */
 
-#ifndef nsIStyleRuleProcessor_h___
-#define nsIStyleRuleProcessor_h___
+#ifndef nsRuleProcessorData_h_
+#define nsRuleProcessorData_h_
 
-#include <stdio.h>
-
-#include "nsISupports.h"
 #include "nsPresContext.h" // for nsCompatability
 #include "nsILinkHandler.h"
 #include "nsString.h"
 #include "nsChangeHint.h"
 
 class nsIStyleSheet;
 class nsPresContext;
 class nsIContent;
@@ -214,76 +210,9 @@ struct AttributeRuleProcessorData : publ
     NS_PRECONDITION(aPresContext, "null pointer");
     NS_PRECONDITION(aContent, "null pointer");
   }
   nsIAtom* mAttribute; // |HasAttributeDependentStyle| for which attribute?
   PRInt32 mModType;    // The type of modification (see nsIDOMMutationEvent).
   PRUint32 mStateMask; // The states that changed with the attr change.
 };
 
-
-// IID for the nsIStyleRuleProcessor interface {015575fe-7b6c-11d3-ba05-001083023c2b}
-#define NS_ISTYLE_RULE_PROCESSOR_IID     \
-{0x015575fe, 0x7b6c, 0x11d3, {0xba, 0x05, 0x00, 0x10, 0x83, 0x02, 0x3c, 0x2b}}
-
-/* The style rule processor interface is a mechanism to separate the matching
- * of style rules from style sheet instances.
- * Simple style sheets can and will act as their own processor. 
- * Sheets where rule ordering interlaces between multiple sheets, will need to 
- * share a single rule processor between them (CSS sheets do this for cascading order)
- *
- * @see nsIStyleRule (for significantly more detailed comments)
- */
-class nsIStyleRuleProcessor : public nsISupports {
-public:
-  NS_DECLARE_STATIC_IID_ACCESSOR(NS_ISTYLE_RULE_PROCESSOR_IID)
-
-  // Shorthand for:
-  //  nsCOMArray<nsIStyleRuleProcessor>::nsCOMArrayEnumFunc
-  typedef PRBool (* EnumFunc)(nsIStyleRuleProcessor*, void*);
-
-  /**
-   * Find the |nsIStyleRule|s matching the given content node and
-   * position the given |nsRuleWalker| at the |nsRuleNode| in the rule
-   * tree representing that ordered list of rules (with higher
-   * precedence being farther from the root of the lexicographic tree).
-   */
-  NS_IMETHOD RulesMatching(ElementRuleProcessorData* aData) = 0;
-
-  /**
-   * Just like the previous |RulesMatching|, except for a given content
-   * node <em>and pseudo-element</em>.
-   */
-  NS_IMETHOD RulesMatching(PseudoRuleProcessorData* aData) = 0;
-
-  /**
-   * Return how (as described by nsReStyleHint) style can depend on a
-   * change of the given content state on the given content node.  This
-   * test is used for optimization only, and may err on the side of
-   * reporting more dependencies than really exist.
-   *
-   * Event states are defined in nsIEventStateManager.h.
-   */
-  NS_IMETHOD HasStateDependentStyle(StateRuleProcessorData* aData,
-                                    nsReStyleHint* aResult) = 0;
-
-  /**
-   * Return how (as described by nsReStyleHint) style can depend on the
-   * presence or value of the given attribute for the given content
-   * node.  This test is used for optimization only, and may err on the
-   * side of reporting more dependencies than really exist.
-   */
-  NS_IMETHOD HasAttributeDependentStyle(AttributeRuleProcessorData* aData,
-                                        nsReStyleHint* aResult) = 0;
-
-  /**
-   * Do any processing that needs to happen as a result of a change in
-   * the characteristics of the medium, and return whether this rule
-   * processor's rules have changed (e.g., because of media queries).
-   */
-  NS_IMETHOD MediumFeaturesChanged(nsPresContext* aPresContext,
-                                   PRBool* aRulesChanged) = 0;
-};
-
-NS_DEFINE_STATIC_IID_ACCESSOR(nsIStyleRuleProcessor,
-                              NS_ISTYLE_RULE_PROCESSOR_IID)
-
-#endif /* nsIStyleRuleProcessor_h___ */
+#endif /* !defined(nsRuleProcessorData_h_) */
diff --git a/layout/style/nsStyleSet.cpp b/layout/style/nsStyleSet.cpp
--- a/layout/style/nsStyleSet.cpp
+++ b/layout/style/nsStyleSet.cpp
@@ -52,16 +52,17 @@
 #include "nsStyleContext.h"
 #include "nsICSSStyleRule.h"
 #include "nsCSSAnonBoxes.h"
 #include "nsCSSPseudoElements.h"
 #include "nsCSSRuleProcessor.h"
 #include "nsIContent.h"
 #include "nsIFrame.h"
 #include "nsContentUtils.h"
+#include "nsRuleProcessorData.h"
 
 NS_IMPL_ISUPPORTS1(nsEmptyStyleRule, nsIStyleRule)
 
 NS_IMETHODIMP
 nsEmptyStyleRule::MapRuleInfoInto(nsRuleData* aRuleData)
 {
   return NS_OK;
 }
diff --git a/layout/style/nsStyleSet.h b/layout/style/nsStyleSet.h
--- a/layout/style/nsStyleSet.h
+++ b/layout/style/nsStyleSet.h
@@ -53,16 +53,18 @@
 #include "nsRuleNode.h"
 #include "nsTArray.h"
 #include "nsCOMArray.h"
 #include "nsAutoPtr.h"
 #include "nsIStyleRule.h"
 
 class nsIURI;
 class nsCSSFontFaceRule;
+class nsRuleWalker;
+struct RuleProcessorData;
 
 class nsEmptyStyleRule : public nsIStyleRule
 {
   NS_DECL_ISUPPORTS
   NS_IMETHOD MapRuleInfoInto(nsRuleData* aRuleData);
 #ifdef DEBUG
   NS_IMETHOD List(FILE* out = stdout, PRInt32 aIndent = 0) const;
 #endif
