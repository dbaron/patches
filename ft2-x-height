From: L. David Baron <dbaron@dbaron.org>

Bug 611780 - Prefer the x-height metric from the font over measuring the height of an 'x'.

diff --git a/gfx/thebes/gfxFT2FontBase.cpp b/gfx/thebes/gfxFT2FontBase.cpp
--- a/gfx/thebes/gfxFT2FontBase.cpp
+++ b/gfx/thebes/gfxFT2FontBase.cpp
@@ -331,25 +331,16 @@ gfxFT2FontBase::InitMetrics()
     } else { // No strikeout info.
         mMetrics.strikeoutSize = mMetrics.underlineSize;
         // Use OpenType spec's suggested position for Roman font.
         mMetrics.strikeoutOffset = emHeight * 409.0 / 2048.0
             + 0.5 * mMetrics.strikeoutSize;
     }
     SnapLineToPixels(mMetrics.strikeoutOffset, mMetrics.strikeoutSize);
 
-    if (os2 && os2->sxHeight && yScale > 0.0) {
-        mMetrics.xHeight = os2->sxHeight * yScale;
-    } else {
-        // CSS 2.1, section 4.3.2 Lengths: "In the cases where it is
-        // impossible or impractical to determine the x-height, a value of
-        // 0.5em should be used."
-        mMetrics.xHeight = 0.5 * emHeight;
-    }
-
     // aveCharWidth is used for the width of text input elements so be
     // liberal rather than conservative in the estimate.
     if (os2 && os2->xAvgCharWidth) {
         // Round to pixels as this is compared with maxAdvance to guess
         // whether this is a fixed width font.
         mMetrics.aveCharWidth =
             ScaleRoundDesignUnits(os2->xAvgCharWidth, ftMetrics.x_scale);
     } else {
@@ -383,16 +374,25 @@ gfxFT2FontBase::InitMetrics()
     // Prefering a measured x over sxHeight because sxHeight doesn't consider
     // hinting, but maybe the x extents are not quite right in some fancy
     // script fonts.  CSS 2.1 suggests possibly using the height of an "o",
     // which would have a more consistent glyph across fonts.
     if (GetCharExtents('x', &extents) && extents.y_bearing < 0.0) {
         mMetrics.xHeight = -extents.y_bearing;
         mMetrics.aveCharWidth =
             std::max(mMetrics.aveCharWidth, extents.x_advance);
+    } else {
+        // CSS 2.1, section 4.3.2 Lengths: "In the cases where it is
+        // impossible or impractical to determine the x-height, a value of
+        // 0.5em should be used."
+        mMetrics.xHeight = 0.5 * emHeight;
+    }
+
+    if (os2 && os2->sxHeight && yScale > 0.0) {
+        mMetrics.xHeight = os2->sxHeight * yScale;
     }
 
     if (GetCharExtents('H', &extents) && extents.y_bearing < 0.0) {
         mMetrics.capHeight = -extents.y_bearing;
     }
 
     mMetrics.aveCharWidth =
         std::max(mMetrics.aveCharWidth, mMetrics.zeroOrAveCharWidth);
