Use the purple buffer in ExplainLiveExpectedGarbage.  (Bug 488603)

diff --git a/xpcom/base/nsCycleCollector.cpp b/xpcom/base/nsCycleCollector.cpp
--- a/xpcom/base/nsCycleCollector.cpp
+++ b/xpcom/base/nsCycleCollector.cpp
@@ -729,16 +729,20 @@ struct nsPurpleBuffer
     {
         memset(mCache, 0, sizeof(mCache));
         mBackingStore.Init();
     }
 
     void BumpGeneration();
     void SelectAgedPointers(GCGraphBuilder &builder);
 
+#ifdef DEBUG_CC
+    void NoteAllPointersWithoutUnmark(GCGraphBuilder &builder);
+#endif
+
     PRBool Exists(void *p)
     {
         PRUint32 idx = POINTER_INDEX(p);
         for (PRUint32 i = 0; i < ASSOCIATIVITY; ++i) {
             if (mCache[idx+i] == p)
                 return PR_TRUE;
         }
         PRUint32 gen;
@@ -1496,16 +1500,33 @@ AddPurpleRoot(GCGraphBuilder &builder, n
         return PR_FALSE;
     }
 
     cp->UnmarkPurple(root);
 
     return PR_TRUE;
 }
 
+#ifdef DEBUG_CC
+static PLDHashOperator
+noteAllCallback(const void* ptr, PRUint32& generation, void* userArg)
+{
+    GCGraphBuilder *builder = static_cast<GCGraphBuilder*>(userArg);
+    builder->NoteXPCOMRoot(static_cast<nsISupports *>(const_cast<void*>(ptr)));
+    return PL_DHASH_NEXT;
+}
+
+void
+nsPurpleBuffer::NoteAllPointersWithoutUnmark(GCGraphBuilder &builder)
+{
+    SpillAll();
+    mBackingStore.Enumerate(noteAllCallback, &builder);
+}
+#endif
+
 void 
 nsCycleCollector::SelectPurple(GCGraphBuilder &builder)
 {
     mPurpleBuf.BumpGeneration();
     mPurpleBuf.SelectAgedPointers(builder);
 }
 
 void
@@ -2567,16 +2588,21 @@ nsCycleCollector::ExplainLiveExpectedGar
 
         PRUint32 expectedGarbageCount = builder.Count();
 
         for (PRUint32 i = 0; i <= nsIProgrammingLanguage::MAX; ++i) {
             if (mRuntimes[i])
                 mRuntimes[i]->BeginCycleCollection(builder);
         }
 
+        // But just for extra information, add entries from the purple
+        // buffer too, since it may give us extra information about
+        // traversal deficiencies.
+        mPurpleBuf.NoteAllPointersWithoutUnmark(builder);
+
         MarkRoots(builder);
         ScanRoots();
 
         mScanInProgress = PR_FALSE;
 
         PRBool describeExtraRefcounts = PR_FALSE;
         PRBool findCycleRoots = PR_FALSE;
         {
