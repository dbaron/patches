From: L. David Baron <dbaron@dbaron.org>

Bug 234485:  Map xml:lang attribute into style so that it's used for font selection and hyphenation.

TODO: check that the tests pass
TODO: check that uniqueness is working with printfs

diff --git a/layout/reftests/text/auto-hyphenation-1.html b/layout/reftests/text/auto-hyphenation-1.xhtml
copy from layout/reftests/text/auto-hyphenation-1.html
copy to layout/reftests/text/auto-hyphenation-1.xhtml
--- a/layout/reftests/text/auto-hyphenation-1.html
+++ b/layout/reftests/text/auto-hyphenation-1.xhtml
@@ -1,10 +1,11 @@
 <!DOCTYPE html>
-<html>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head><title>Hyphenation test</title></head>
 <!-- simple test for automatic hyphenation -->
-<body lang="en-us">
+<body xml:lang="en-us">
 <div style="width: 5em; -moz-hyphens: auto; font-family:sans-serif;">
 supercalifragilisticexpialidocious
 </div>
 </body>
 </html>
 
diff --git a/layout/reftests/text/auto-hyphenation-10.html b/layout/reftests/text/auto-hyphenation-10.xhtml
copy from layout/reftests/text/auto-hyphenation-10.html
copy to layout/reftests/text/auto-hyphenation-10.xhtml
--- a/layout/reftests/text/auto-hyphenation-10.html
+++ b/layout/reftests/text/auto-hyphenation-10.xhtml
@@ -1,11 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
 <!DOCTYPE html>
-<html>
-<meta charset="UTF-8">
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head><title>Hyphenation test</title></head>
 <!-- check that hyphenation is not applied when language is not specified -->
 <body>
 <div style="width: 5em; -moz-hyphens: auto;">
 supercalifragilisticexpialidocious
 </div>
 </body>
 </html>
 
diff --git a/layout/reftests/text/auto-hyphenation-1.html b/layout/reftests/text/auto-hyphenation-11a.xhtml
copy from layout/reftests/text/auto-hyphenation-1.html
copy to layout/reftests/text/auto-hyphenation-11a.xhtml
--- a/layout/reftests/text/auto-hyphenation-1.html
+++ b/layout/reftests/text/auto-hyphenation-11a.xhtml
@@ -1,10 +1,11 @@
 <!DOCTYPE html>
-<html>
-<!-- simple test for automatic hyphenation -->
-<body lang="en-us">
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head><title>Hyphenation test</title></head>
+<!-- check that xml:lang beats lang -->
+<body xml:lang="en-us" lang="x-unknown-language">
 <div style="width: 5em; -moz-hyphens: auto; font-family:sans-serif;">
 supercalifragilisticexpialidocious
 </div>
 </body>
 </html>
 
diff --git a/layout/reftests/text/auto-hyphenation-1.html b/layout/reftests/text/auto-hyphenation-11b.xhtml
copy from layout/reftests/text/auto-hyphenation-1.html
copy to layout/reftests/text/auto-hyphenation-11b.xhtml
--- a/layout/reftests/text/auto-hyphenation-1.html
+++ b/layout/reftests/text/auto-hyphenation-11b.xhtml
@@ -1,10 +1,11 @@
 <!DOCTYPE html>
-<html>
-<!-- simple test for automatic hyphenation -->
-<body lang="en-us">
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head><title>Hyphenation test</title></head>
+<!-- check that xml:lang beats lang -->
+<body lang="x-unknown-language" xml:lang="en-us">
 <div style="width: 5em; -moz-hyphens: auto; font-family:sans-serif;">
 supercalifragilisticexpialidocious
 </div>
 </body>
 </html>
 
diff --git a/layout/reftests/text/auto-hyphenation-4.html b/layout/reftests/text/auto-hyphenation-12a.xhtml
copy from layout/reftests/text/auto-hyphenation-4.html
copy to layout/reftests/text/auto-hyphenation-12a.xhtml
--- a/layout/reftests/text/auto-hyphenation-4.html
+++ b/layout/reftests/text/auto-hyphenation-12a.xhtml
@@ -1,10 +1,12 @@
 <!DOCTYPE html>
-<html>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head><title>Hyphenation test</title></head>
+<!-- check that xml:lang beats lang -->
 <!-- check that hyphenation is not applied to unknown language -->
-<body lang="x-unknown-language">
+<body xml:lang="x-unknown-language" lang="en-us">
 <div style="width: 5em; -moz-hyphens: auto;">
 supercalifragilisticexpialidocious
 </div>
 </body>
 </html>
 
diff --git a/layout/reftests/text/auto-hyphenation-4.html b/layout/reftests/text/auto-hyphenation-12b.xhtml
copy from layout/reftests/text/auto-hyphenation-4.html
copy to layout/reftests/text/auto-hyphenation-12b.xhtml
--- a/layout/reftests/text/auto-hyphenation-4.html
+++ b/layout/reftests/text/auto-hyphenation-12b.xhtml
@@ -1,10 +1,12 @@
 <!DOCTYPE html>
-<html>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head><title>Hyphenation test</title></head>
+<!-- check that xml:lang beats lang -->
 <!-- check that hyphenation is not applied to unknown language -->
-<body lang="x-unknown-language">
+<body lang="en-us" xml:lang="x-unknown-language">
 <div style="width: 5em; -moz-hyphens: auto;">
 supercalifragilisticexpialidocious
 </div>
 </body>
 </html>
 
diff --git a/layout/reftests/text/auto-hyphenation-1a.html b/layout/reftests/text/auto-hyphenation-1a.xhtml
copy from layout/reftests/text/auto-hyphenation-1a.html
copy to layout/reftests/text/auto-hyphenation-1a.xhtml
--- a/layout/reftests/text/auto-hyphenation-1a.html
+++ b/layout/reftests/text/auto-hyphenation-1a.xhtml
@@ -1,10 +1,11 @@
 <!DOCTYPE html>
-<html>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head><title>Hyphenation test</title></head>
 <!-- adding random <span>s should not affect hyphenation -->
-<body lang="en-us">
+<body xml:lang="en-us">
 <div style="width: 5em; -moz-hyphens: auto; font-family:sans-serif;">
 super<span>cali</span>frag<span>ili</span>sti<span>cex</span>pialidoc<span>i</span>ous
 </div>
 </body>
 </html>
 
diff --git a/layout/reftests/text/auto-hyphenation-2.html b/layout/reftests/text/auto-hyphenation-2.xhtml
copy from layout/reftests/text/auto-hyphenation-2.html
copy to layout/reftests/text/auto-hyphenation-2.xhtml
--- a/layout/reftests/text/auto-hyphenation-2.html
+++ b/layout/reftests/text/auto-hyphenation-2.xhtml
@@ -1,12 +1,13 @@
 <!DOCTYPE html>
-<html>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head><title>Hyphenation test</title></head>
 <!-- mixed languages in a word should inhibit automatic hyphenation -->
-<body lang="en-us">
+<body xml:lang="en-us">
 <div style="width: 5em; -moz-hyphens: auto; font-family:sans-serif;">
 supercalifragilisticexpialidocious
-super<span lang="foo">cali</span>fragilisticexpialidocious
+super<span xml:lang="foo">cali</span>fragilisticexpialidocious
 supercalifragilisticexpialidocious
 </div>
 </body>
 </html>
 
diff --git a/layout/reftests/text/auto-hyphenation-3.html b/layout/reftests/text/auto-hyphenation-3.xhtml
copy from layout/reftests/text/auto-hyphenation-3.html
copy to layout/reftests/text/auto-hyphenation-3.xhtml
--- a/layout/reftests/text/auto-hyphenation-3.html
+++ b/layout/reftests/text/auto-hyphenation-3.xhtml
@@ -1,10 +1,11 @@
 <!DOCTYPE html>
-<html>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head><title>Hyphenation test</title></head>
 <!-- check that -moz-hyphens:none prevents break at &shy; -->
-<body lang="en-us">
+<body xml:lang="en-us">
 <div style="width: 5em; -moz-hyphens: none;">
-su&shy;per&shy;cal&shy;ifrag&shy;ilis&shy;tic&shy;ex&shy;pi&shy;ali&shy;do&shy;cious
+su&#173;per&#173;cal&#173;ifrag&#173;ilis&#173;tic&#173;ex&#173;pi&#173;ali&#173;do&#173;cious
 </div>
 </body>
 </html>
 
diff --git a/layout/reftests/text/auto-hyphenation-4.html b/layout/reftests/text/auto-hyphenation-4.xhtml
copy from layout/reftests/text/auto-hyphenation-4.html
copy to layout/reftests/text/auto-hyphenation-4.xhtml
--- a/layout/reftests/text/auto-hyphenation-4.html
+++ b/layout/reftests/text/auto-hyphenation-4.xhtml
@@ -1,10 +1,11 @@
 <!DOCTYPE html>
-<html>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head><title>Hyphenation test</title></head>
 <!-- check that hyphenation is not applied to unknown language -->
-<body lang="x-unknown-language">
+<body xml:lang="x-unknown-language">
 <div style="width: 5em; -moz-hyphens: auto;">
 supercalifragilisticexpialidocious
 </div>
 </body>
 </html>
 
diff --git a/layout/reftests/text/auto-hyphenation-5.html b/layout/reftests/text/auto-hyphenation-5.xhtml
copy from layout/reftests/text/auto-hyphenation-5.html
copy to layout/reftests/text/auto-hyphenation-5.xhtml
--- a/layout/reftests/text/auto-hyphenation-5.html
+++ b/layout/reftests/text/auto-hyphenation-5.xhtml
@@ -1,22 +1,22 @@
 <!DOCTYPE html>
-<html>
+<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
 <style type="text/css">
 div {
   margin:       10px;
   width:        10px;
   font-family:  monospace;
   -moz-hyphens: auto;
 }
 </style>
 </head>
 <!-- test some hyphenations that involve overlapping patterns -->
-<body lang="en-us">
+<body xml:lang="en-us">
 <div>
 photo
 </div>
 <div>
 photograph
 </div>
 <div>
 photographer
diff --git a/layout/reftests/text/auto-hyphenation-6.html b/layout/reftests/text/auto-hyphenation-6.xhtml
copy from layout/reftests/text/auto-hyphenation-6.html
copy to layout/reftests/text/auto-hyphenation-6.xhtml
--- a/layout/reftests/text/auto-hyphenation-6.html
+++ b/layout/reftests/text/auto-hyphenation-6.xhtml
@@ -1,10 +1,11 @@
 <!DOCTYPE html>
-<html>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head><title>Hyphenation test</title></head>
 <!-- style changes don't break hyphenation -->
-<body lang="en-us">
+<body xml:lang="en-us">
 <div style="width: 0; -moz-hyphens: auto;">
 hy<span style="color:red">phen</span>ation
 </div>
 </body>
 </html>
 
diff --git a/layout/reftests/text/auto-hyphenation-7.html b/layout/reftests/text/auto-hyphenation-7.xhtml
copy from layout/reftests/text/auto-hyphenation-7.html
copy to layout/reftests/text/auto-hyphenation-7.xhtml
--- a/layout/reftests/text/auto-hyphenation-7.html
+++ b/layout/reftests/text/auto-hyphenation-7.xhtml
@@ -1,10 +1,11 @@
 <!DOCTYPE html>
-<html>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head><title>Hyphenation test</title></head>
 <!-- style changes don't break hyphenation -->
-<body lang="en-us">
+<body xml:lang="en-us">
 <div style="width: 0; -moz-hyphens: auto;">
 h<span style="color:red">yphena</span>tion
 </div>
 </body>
 </html>
 
diff --git a/layout/reftests/text/auto-hyphenation-8.html b/layout/reftests/text/auto-hyphenation-8.xhtml
copy from layout/reftests/text/auto-hyphenation-8.html
copy to layout/reftests/text/auto-hyphenation-8.xhtml
--- a/layout/reftests/text/auto-hyphenation-8.html
+++ b/layout/reftests/text/auto-hyphenation-8.xhtml
@@ -1,10 +1,11 @@
 <!DOCTYPE html>
-<html>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head><title>Hyphenation test</title></head>
 <!-- check that hyphenation is not applied when language is not specified -->
 <body>
 <div style="width: 5em; -moz-hyphens: auto;">
 supercalifragilisticexpialidocious
 </div>
 </body>
 </html>
 
diff --git a/layout/reftests/text/auto-hyphenation-9.html b/layout/reftests/text/auto-hyphenation-9.xhtml
copy from layout/reftests/text/auto-hyphenation-9.html
copy to layout/reftests/text/auto-hyphenation-9.xhtml
--- a/layout/reftests/text/auto-hyphenation-9.html
+++ b/layout/reftests/text/auto-hyphenation-9.xhtml
@@ -1,11 +1,12 @@
+<?xml version="1.0" encoding="iso-8859-1" ?>
 <!DOCTYPE html>
-<html>
-<meta charset="iso-8859-1">
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head><title>Hyphenation test</title></head>
 <!-- check that hyphenation is not applied when language is not specified -->
 <body>
 <div style="width: 5em; -moz-hyphens: auto;">
 supercalifragilisticexpialidocious
 </div>
 </body>
 </html>
 
diff --git a/layout/reftests/text/reftest.list b/layout/reftests/text/reftest.list
--- a/layout/reftests/text/reftest.list
+++ b/layout/reftests/text/reftest.list
@@ -214,16 +214,32 @@ pref(gfx.font_rendering.graphite.enabled
 == auto-hyphenation-3.html auto-hyphenation-3-ref.html
 == auto-hyphenation-4.html auto-hyphenation-4-ref.html
 == auto-hyphenation-5.html auto-hyphenation-5-ref.html
 == auto-hyphenation-6.html auto-hyphenation-6-ref.html
 == auto-hyphenation-7.html auto-hyphenation-7-ref.html
 == auto-hyphenation-8.html auto-hyphenation-8-ref.html
 == auto-hyphenation-9.html auto-hyphenation-9-ref.html
 == auto-hyphenation-10.html auto-hyphenation-10-ref.html
+== auto-hyphenation-1.xhtml auto-hyphenation-1-ref.html
+!= auto-hyphenation-1.xhtml auto-hyphenation-1-notref.html
+== auto-hyphenation-1a.xhtml auto-hyphenation-1-ref.html
+== auto-hyphenation-2.xhtml auto-hyphenation-2-ref.html
+== auto-hyphenation-3.xhtml auto-hyphenation-3-ref.html
+== auto-hyphenation-4.xhtml auto-hyphenation-4-ref.html
+== auto-hyphenation-5.xhtml auto-hyphenation-5-ref.html
+== auto-hyphenation-6.xhtml auto-hyphenation-6-ref.html
+== auto-hyphenation-7.xhtml auto-hyphenation-7-ref.html
+== auto-hyphenation-8.xhtml auto-hyphenation-8-ref.html
+== auto-hyphenation-9.xhtml auto-hyphenation-9-ref.html
+== auto-hyphenation-10.xhtml auto-hyphenation-10-ref.html
+== auto-hyphenation-11a.xhtml auto-hyphenation-1-ref.html
+== auto-hyphenation-11b.xhtml auto-hyphenation-1-ref.html
+== auto-hyphenation-12a.xhtml auto-hyphenation-4-ref.html
+== auto-hyphenation-12b.xhtml auto-hyphenation-4-ref.html
 == auto-hyphenation-af-1.html auto-hyphenation-af-1-ref.html
 == auto-hyphenation-bg-1.html auto-hyphenation-bg-1-ref.html
 == auto-hyphenation-ca-1.html auto-hyphenation-ca-1-ref.html
 == auto-hyphenation-cy-1.html auto-hyphenation-cy-1-ref.html
 == auto-hyphenation-da-1.html auto-hyphenation-da-1-ref.html
 == auto-hyphenation-de-1901-1.html auto-hyphenation-de-1901-1-ref.html
 == auto-hyphenation-de-1996-1.html auto-hyphenation-de-1996-1-ref.html
 != auto-hyphenation-de-1901-1.html auto-hyphenation-de-1996-1.html
diff --git a/layout/style/nsHTMLStyleSheet.cpp b/layout/style/nsHTMLStyleSheet.cpp
--- a/layout/style/nsHTMLStyleSheet.cpp
+++ b/layout/style/nsHTMLStyleSheet.cpp
@@ -27,17 +27,19 @@
 #include "nsStyleConsts.h"
 #include "nsRuleWalker.h"
 #include "nsRuleData.h"
 #include "nsError.h"
 #include "nsRuleProcessorData.h"
 #include "nsCSSRuleProcessor.h"
 #include "mozilla/dom/Element.h"
 #include "nsCSSFrameConstructor.h"
+#include "nsHashKeys.h"
 
+using namespace mozilla;
 using namespace mozilla::dom;
 
 NS_IMPL_ISUPPORTS1(nsHTMLStyleSheet::HTMLColorRule, nsIStyleRule)
 
 /* virtual */ void
 nsHTMLStyleSheet::HTMLColorRule::MapRuleInfoInto(nsRuleData* aRuleData)
 {
   if (aRuleData->mSIDs & NS_STYLE_INHERIT_BIT(Color)) {
@@ -89,16 +91,41 @@ nsHTMLStyleSheet::TableQuirkColorRule::M
     // We do not check UseDocumentColors() here, because we want to
     // use the body color no matter what.
     if (color->GetUnit() == eCSSUnit_Null)
       color->SetIntValue(NS_STYLE_COLOR_INHERIT_FROM_BODY,
                          eCSSUnit_Enumerated);
   }
 }
 
+
+NS_IMPL_ISUPPORTS1(nsHTMLStyleSheet::LangRule, nsIStyleRule)
+
+/* virtual */ void
+nsHTMLStyleSheet::LangRule::MapRuleInfoInto(nsRuleData* aRuleData)
+{
+  if (aRuleData->mSIDs & NS_STYLE_INHERIT_BIT(Font)) {
+    nsCSSValue* lang = aRuleData->ValueForLang();
+    if (lang->GetUnit() == eCSSUnit_Null) {
+      lang->SetStringValue(mLang, eCSSUnit_Ident);
+    }
+  }
+}
+
+#ifdef DEBUG
+/* virtual */ void
+nsHTMLStyleSheet::LangRule::List(FILE* out, int32_t aIndent) const
+{
+  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  fputs("[lang rule] { language: \"", out);
+  fputs(NS_ConvertUTF16toUTF8(mLang).get(), out);
+  fputs("\" }\n", out);
+}
+#endif
+
 // -----------------------------------------------------------
 
 struct MappedAttrTableEntry : public PLDHashEntryHdr {
   nsMappedAttributes *mAttributes;
 };
 
 static PLDHashNumber
 MappedAttrTable_HashKey(PLDHashTable *table, const void *key)
@@ -133,34 +160,94 @@ MappedAttrTable_MatchEntry(PLDHashTable 
 static PLDHashTableOps MappedAttrTable_Ops = {
   PL_DHashAllocTable,
   PL_DHashFreeTable,
   MappedAttrTable_HashKey,
   MappedAttrTable_MatchEntry,
   PL_DHashMoveEntryStub,
   MappedAttrTable_ClearEntry,
   PL_DHashFinalizeStub,
-  NULL
+  nullptr
+};
+
+// -----------------------------------------------------------
+
+struct LangRuleTableEntry : public PLDHashEntryHdr {
+  nsRefPtr<nsHTMLStyleSheet::LangRule> mRule;
+};
+
+static PLDHashNumber
+LangRuleTable_HashKey(PLDHashTable *table, const void *key)
+{
+  const nsString *lang = static_cast<const nsString*>(key);
+  return HashString(*lang);
+}
+
+static void
+LangRuleTable_ClearEntry(PLDHashTable *table, PLDHashEntryHdr *hdr)
+{
+  LangRuleTableEntry *entry = static_cast<LangRuleTableEntry*>(hdr);
+
+  entry->~LangRuleTableEntry();
+  memset(entry, 0, sizeof(LangRuleTableEntry));
+}
+
+static bool
+LangRuleTable_MatchEntry(PLDHashTable *table, const PLDHashEntryHdr *hdr,
+                         const void *key)
+{
+  const nsString *lang = static_cast<const nsString*>(key);
+  const LangRuleTableEntry *entry = static_cast<const LangRuleTableEntry*>(hdr);
+
+  return entry->mRule->mLang == *lang;
+}
+
+static bool
+LangRuleTable_InitEntry(PLDHashTable *table, PLDHashEntryHdr *hdr,
+                        const void *key)
+{
+  const nsString *lang = static_cast<const nsString*>(key);
+
+  LangRuleTableEntry *entry = new (hdr) LangRuleTableEntry();
+
+  // Create the unique rule for this language
+  entry->mRule = new nsHTMLStyleSheet::LangRule(*lang);
+
+  return true;
+}
+
+static PLDHashTableOps LangRuleTable_Ops = {
+  PL_DHashAllocTable,
+  PL_DHashFreeTable,
+  LangRuleTable_HashKey,
+  LangRuleTable_MatchEntry,
+  PL_DHashMoveEntryStub,
+  LangRuleTable_ClearEntry,
+  PL_DHashFinalizeStub,
+  LangRuleTable_InitEntry
 };
 
 // -----------------------------------------------------------
 
 nsHTMLStyleSheet::nsHTMLStyleSheet(nsIURI* aURL, nsIDocument* aDocument)
   : mURL(aURL)
   , mDocument(aDocument)
   , mTableQuirkColorRule(new TableQuirkColorRule())
   , mTableTHRule(new TableTHRule())
 {
   MOZ_ASSERT(aURL);
   MOZ_ASSERT(aDocument);
   mMappedAttrTable.ops = nullptr;
+  mLangRuleTable.ops = nullptr;
 }
 
 nsHTMLStyleSheet::~nsHTMLStyleSheet()
 {
+  if (mLangRuleTable.ops)
+    PL_DHashTableFinish(&mLangRuleTable);
   if (mMappedAttrTable.ops)
     PL_DHashTableFinish(&mMappedAttrTable);
 }
 
 NS_IMPL_ISUPPORTS2(nsHTMLStyleSheet, nsIStyleSheet, nsIStyleRuleProcessor)
 
 /* virtual */ void
 nsHTMLStyleSheet::RulesMatching(ElementRuleProcessorData* aData)
@@ -207,16 +294,24 @@ nsHTMLStyleSheet::RulesMatching(ElementR
   } // end html element
 
   // just get the style rules from the content.  For SVG we do this even if
   // author style is disabled, because SVG presentational hints aren't
   // considered style.
   if (!ruleWalker->AuthorStyleDisabled() || aData->mElement->IsSVG()) {
     aData->mElement->WalkContentStyleRules(ruleWalker);
   }
+
+  // http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#language
+  // says that the xml:lang attribute overrides HTML's lang attribute,
+  // so we need to do this after WalkContentStyleRules.
+  nsString lang;
+  if (aData->mElement->GetAttr(kNameSpaceID_XML, nsGkAtoms::lang, lang)) {
+    ruleWalker->Forward(LangRuleFor(lang));
+  }
 }
 
 // Test if style is dependent on content state
 /* virtual */ nsRestyleHint
 nsHTMLStyleSheet::HasStateDependentStyle(StateRuleProcessorData* aData)
 {
   if (aData->mElement->IsHTML(nsGkAtoms::a) &&
       nsCSSRuleProcessor::IsLink(aData->mElement) &&
@@ -382,16 +477,20 @@ void
 nsHTMLStyleSheet::Reset(nsIURI* aURL)
 {
   mURL = aURL;
 
   mLinkRule          = nullptr;
   mVisitedRule       = nullptr;
   mActiveRule        = nullptr;
 
+  if (mLangRuleTable.ops) {
+    PL_DHashTableFinish(&mLangRuleTable);
+    mLangRuleTable.ops = nullptr;
+  }
   if (mMappedAttrTable.ops) {
     PL_DHashTableFinish(&mMappedAttrTable);
     mMappedAttrTable.ops = nullptr;
   }
 }
 
 nsresult
 nsHTMLStyleSheet::ImplLinkColorSetter(nsRefPtr<HTMLColorRule>& aRule, nscolor aColor)
@@ -469,16 +568,37 @@ nsHTMLStyleSheet::DropMappedAttributes(n
   uint32_t entryCount = mMappedAttrTable.entryCount - 1;
 #endif
 
   PL_DHashTableOperate(&mMappedAttrTable, aMapped, PL_DHASH_REMOVE);
 
   NS_ASSERTION(entryCount == mMappedAttrTable.entryCount, "not removed");
 }
 
+nsIStyleRule*
+nsHTMLStyleSheet::LangRuleFor(const nsString& aLanguage)
+{
+  if (!mLangRuleTable.ops) {
+    bool res = PL_DHashTableInit(&mLangRuleTable, &LangRuleTable_Ops,
+                                 nullptr, sizeof(LangRuleTableEntry), 16);
+    if (!res) {
+      NS_ASSERTION(false, "out of memory");
+      mLangRuleTable.ops = nullptr;
+      return nullptr;
+    }
+  }
+  LangRuleTableEntry *entry = static_cast<LangRuleTableEntry*>
+    (PL_DHashTableOperate(&mLangRuleTable, &aLanguage, PL_DHASH_ADD));
+  if (!entry) {
+    NS_ASSERTION(false, "out of memory");
+    return nullptr;
+  }
+  return entry->mRule;
+}
+
 #ifdef DEBUG
 /* virtual */ void
 nsHTMLStyleSheet::List(FILE* out, int32_t aIndent) const
 {
   // Indent
   for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
 
   fputs("HTML Style Sheet: ", out);
@@ -517,14 +637,15 @@ nsHTMLStyleSheet::DOMSizeOfIncludingThis
   // Measurement of the following members may be added later if DMD finds it is
   // worthwhile:
   // - mURL
   // - mLinkRule
   // - mVisitedRule
   // - mActiveRule
   // - mTableQuirkColorRule
   // - mTableTHRule
+  // - mLangRuleTable
   //
   // The following members are not measured:
   // - mDocument, because it's non-owning
 
   return n;
 }
diff --git a/layout/style/nsHTMLStyleSheet.h b/layout/style/nsHTMLStyleSheet.h
--- a/layout/style/nsHTMLStyleSheet.h
+++ b/layout/style/nsHTMLStyleSheet.h
@@ -15,16 +15,17 @@
 #include "nsAutoPtr.h"
 #include "nsColor.h"
 #include "nsCOMPtr.h"
 #include "nsIStyleRule.h"
 #include "nsIStyleRuleProcessor.h"
 #include "nsIStyleSheet.h"
 #include "pldhash.h"
 #include "mozilla/Attributes.h"
+#include "nsString.h"
 
 class nsMappedAttributes;
 
 class nsHTMLStyleSheet MOZ_FINAL : public nsIStyleSheet,
                                    public nsIStyleRuleProcessor
 {
 public:
   nsHTMLStyleSheet(nsIURI* aURL, nsIDocument* aDocument);
@@ -71,16 +72,18 @@ public:
   nsresult SetActiveLinkColor(nscolor aColor);
   nsresult SetVisitedLinkColor(nscolor aColor);
 
   // Mapped Attribute management methods
   already_AddRefed<nsMappedAttributes>
     UniqueMappedAttributes(nsMappedAttributes* aMapped);
   void DropMappedAttributes(nsMappedAttributes* aMapped);
 
+  nsIStyleRule* LangRuleFor(const nsString& aLanguage);
+
 private: 
   nsHTMLStyleSheet(const nsHTMLStyleSheet& aCopy) MOZ_DELETE;
   nsHTMLStyleSheet& operator=(const nsHTMLStyleSheet& aCopy) MOZ_DELETE;
 
   ~nsHTMLStyleSheet();
 
   class HTMLColorRule;
   friend class HTMLColorRule;
@@ -131,20 +134,41 @@ private:
   // Rule to handle quirk table colors
   class TableQuirkColorRule MOZ_FINAL : public GenericTableRule {
   public:
     TableQuirkColorRule() {}
 
     virtual void MapRuleInfoInto(nsRuleData* aRuleData) MOZ_OVERRIDE;
   };
 
+public: // for mLangRuleTable structures only
+
+  // Rule to handle xml:lang attributes, of which we have exactly one
+  // per language string, maintained in mLangRuleTable.
+  class LangRule MOZ_FINAL : public nsIStyleRule {
+  public:
+    LangRule(const nsSubstring& aLang) : mLang(aLang) {}
+
+    NS_DECL_ISUPPORTS
+
+    // nsIStyleRule interface
+    virtual void MapRuleInfoInto(nsRuleData* aRuleData) MOZ_OVERRIDE;
+  #ifdef DEBUG
+    virtual void List(FILE* out = stdout, int32_t aIndent = 0) const MOZ_OVERRIDE;
+  #endif
+
+    nsString mLang;
+  };
+
+private:
   nsCOMPtr<nsIURI>        mURL;
   nsIDocument*            mDocument;
   nsRefPtr<HTMLColorRule> mLinkRule;
   nsRefPtr<HTMLColorRule> mVisitedRule;
   nsRefPtr<HTMLColorRule> mActiveRule;
   nsRefPtr<TableQuirkColorRule> mTableQuirkColorRule;
   nsRefPtr<TableTHRule>   mTableTHRule;
 
   PLDHashTable            mMappedAttrTable;
+  PLDHashTable            mLangRuleTable;
 };
 
 #endif /* !defined(nsHTMLStyleSheet_h_) */
