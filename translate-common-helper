From: L. David Baron <dbaron@dbaron.org>

Create a common function for setting pieces of a transform matrix for a translation.

diff --git a/layout/style/nsStyleTransformMatrix.cpp b/layout/style/nsStyleTransformMatrix.cpp
--- a/layout/style/nsStyleTransformMatrix.cpp
+++ b/layout/style/nsStyleTransformMatrix.cpp
@@ -247,16 +247,30 @@ static void ProcessMatrix(float aMain[4]
    */
   if (aData->Item(6).GetUnit() == eCSSUnit_Percent)
     aY[1] = aData->Item(6).GetPercentValue();
   else
     SetCoordToValue(aData->Item(6), aContext, aPresContext, aCanStoreInRuleTree,
                     aDelta[1]);
 }
 
+static void ProcessTranslatePart(nscoord& aOffset, float& aPercent,
+                                 const nsCSSValue& aValue,
+                                 nsStyleContext* aContext,
+                                 nsPresContext* aPresContext,
+                                 PRBool& aCanStoreInRuleTree)
+{
+  if (aValue.GetUnit() == eCSSUnit_Percent) {
+    aPercent = aValue.GetPercentValue();
+  } else {
+    SetCoordToValue(aValue, aContext, aPresContext, aCanStoreInRuleTree,
+                    aOffset);
+  }
+}
+
 /* Helper function to process a translatex function. */
 static void ProcessTranslateX(nscoord aDelta[2], float aX[2],
                               const nsCSSValue::Array* aData,
                               nsStyleContext* aContext,
                               nsPresContext* aPresContext,
                               PRBool& aCanStoreInRuleTree)
 {
   NS_PRECONDITION(aData->Count() == 2, "Invalid array!");
@@ -267,21 +281,18 @@ static void ProcessTranslateX(nscoord aD
    * |  1  0 dx|
    * |  0  1  0|
    * |  0  0  1|
    * So E = value
    * 
    * Otherwise, we might have a percentage, so we want to set the dX component
    * to the percent.
    */
-  if (aData->Item(1).GetUnit() != eCSSUnit_Percent)
-    SetCoordToValue(aData->Item(1), aContext, aPresContext, aCanStoreInRuleTree,
-                    aDelta[0]);
-  else
-    aX[0] = aData->Item(1).GetPercentValue();
+  ProcessTranslatePart(aDelta[0], aX[0], aData->Item(1),
+                       aContext, aPresContext, aCanStoreInRuleTree);
 }
 
 /* Helper function to process a translatey function. */
 static void ProcessTranslateY(nscoord aDelta[2], float aY[2],
                               const nsCSSValue::Array* aData,
                               nsStyleContext* aContext,
                               nsPresContext* aPresContext,
                               PRBool& aCanStoreInRuleTree)
@@ -294,21 +305,18 @@ static void ProcessTranslateY(nscoord aD
    * |  1  0  0|
    * |  0  1 dy|
    * |  0  0  1|
    * So E = value
    * 
    * Otherwise, we might have a percentage, so we want to set the dY component
    * to the percent.
    */
-  if (aData->Item(1).GetUnit() != eCSSUnit_Percent)
-    SetCoordToValue(aData->Item(1), aContext, aPresContext, aCanStoreInRuleTree,
-                    aDelta[1]);
-  else
-    aY[1] = aData->Item(1).GetPercentValue();
+  ProcessTranslatePart(aDelta[1], aY[1], aData->Item(1),
+                       aContext, aPresContext, aCanStoreInRuleTree);
 }
 
 /* Helper function to process a translate function. */
 static void ProcessTranslate(nscoord aDelta[2], float aX[2], float aY[2],
                              const nsCSSValue::Array* aData,
                              nsStyleContext* aContext,
                              nsPresContext* aPresContext,
                              PRBool& aCanStoreInRuleTree)
@@ -318,30 +326,23 @@ static void ProcessTranslate(nscoord aDe
   /* There are several cases to consider.
    * First, we might have one value, or we might have two.  If we have
    * two, we need to consider both dX and dY components.
    * Next, the values might be lengths, or they might be percents.  If they're
    * percents, store them in the dX and dY components.  Otherwise, store them in
    * the main matrix.
    */
 
-  const nsCSSValue &dx = aData->Item(1);
-  if (dx.GetUnit() == eCSSUnit_Percent)
-    aX[0] = dx.GetPercentValue();
-  else
-    SetCoordToValue(dx, aContext, aPresContext, aCanStoreInRuleTree, aDelta[0]);
+  ProcessTranslatePart(aDelta[0], aX[0], aData->Item(1),
+                       aContext, aPresContext, aCanStoreInRuleTree);
 
   /* If we read in a Y component, set it appropriately */
   if (aData->Count() == 3) {
-    const nsCSSValue &dy = aData->Item(2);
-    if (dy.GetUnit() == eCSSUnit_Percent)
-      aY[1] = dy.GetPercentValue();
-    else
-      SetCoordToValue(dy, aContext, aPresContext, aCanStoreInRuleTree,
-                      aDelta[1]); 
+    ProcessTranslatePart(aDelta[1], aY[1], aData->Item(2),
+                         aContext, aPresContext, aCanStoreInRuleTree);
   }
 }
 
 /* Helper function to set up a scale matrix. */
 static void ProcessScaleHelper(float aXScale, float aYScale, float aMain[4])
 {
   /* We want our matrix to look like this:
    * | dx  0  0|
