From: L. David Baron <dbaron@dbaron.org>

In contexts where the CSS parser accepts numbers and lengths, treat unitless zero as a number rather than a length.  (Bug 595648)  r=bzbarsky  a=blocking2.0:betaN+

This patch has the side-effect of changing the representation of '0'
values in properties added by SVG to use the number representation
rather than the length representation.  This requires marking the
stroke-dashoffset:0 test in test_value_computation.html as known to
fail, since computed style code now returns 0 rather than 0px, and also
requires changing some inputs and results in some SMIL tests (which
seems like it's showing a bug that we can't interpolate between
equivalent values when we ought to be able to do so).

diff --git a/content/smil/test/db_smilCSSFromBy.js b/content/smil/test/db_smilCSSFromBy.js
--- a/content/smil/test/db_smilCSSFromBy.js
+++ b/content/smil/test/db_smilCSSFromBy.js
@@ -56,25 +56,25 @@ var _fromByTestLists =
     new AnimTestcaseFromBy("0", "50",  { fromComp: "0px", // 0 acts like 0px
                                          midComp:  "25px",
                                          toComp:   "50px"}),
     new AnimTestcaseFromBy("30", "10", { fromComp: "30px",
                                          midComp:  "35px",
                                          toComp:   "40px"}),
   ],
   lengthNoUnitsSVG: [
-    new AnimTestcaseFromBy("0", "50",  { fromComp: "0px", // 0 acts like 0px
+    new AnimTestcaseFromBy("0", "50",  { fromComp: "0",
                                          midComp:  "25",
                                          toComp:   "50"}),
     new AnimTestcaseFromBy("30", "10", { fromComp: "30",
                                          midComp:  "35",
                                          toComp:   "40"}),
   ],
   lengthPx: [
-    new AnimTestcaseFromBy("0", "8px", { fromComp: "0px", // 0 acts like 0px
+    new AnimTestcaseFromBy("0px", "8px", { fromComp: "0px",
                                          midComp: "4px",
                                          toComp: "8px"}),
     new AnimTestcaseFromBy("1px", "10px", { midComp: "6px", toComp: "11px"}),
   ],
   opacity: [
     new AnimTestcaseFromBy("1", "-1", { midComp: "0.5", toComp: "0"}),
     new AnimTestcaseFromBy("0.4", "-0.6", { midComp: "0.1", toComp: "0"}),
     new AnimTestcaseFromBy("0.8", "-1.4", { midComp: "0.1", toComp: "0"},
diff --git a/content/smil/test/db_smilCSSFromTo.js b/content/smil/test/db_smilCSSFromTo.js
--- a/content/smil/test/db_smilCSSFromTo.js
+++ b/content/smil/test/db_smilCSSFromTo.js
@@ -112,31 +112,31 @@ var _fromToTestLists = {
     new AnimTestcaseFromTo("50",  "0", { fromComp: "50px",
                                          midComp:  "25px",
                                          toComp:    "0px"}),
     new AnimTestcaseFromTo("30", "80", { fromComp: "30px",
                                          midComp:  "55px",
                                          toComp:   "80px"}),
   ],
   lengthNoUnitsSVG: [
-    new AnimTestcaseFromTo("0",  "20", { fromComp:  "0px", // 0 acts like 0px
+    new AnimTestcaseFromTo("0",  "20", { fromComp:  "0",
                                          midComp:  "10",
                                          toComp:   "20"}),
     new AnimTestcaseFromTo("50",  "0", { fromComp: "50",
                                          midComp:  "25",
-                                         toComp:    "0px"}), // 0 acts like 0px
+                                         toComp:    "0"}),
     new AnimTestcaseFromTo("30", "80", { fromComp: "30",
                                          midComp:  "55",
                                          toComp:   "80"}),
   ],
   lengthPx: [
-    new AnimTestcaseFromTo("0", "12px", { fromComp: "0px",  // 0 acts like 0px
+    new AnimTestcaseFromTo("0px", "12px", { fromComp: "0px",
                                           midComp:  "6px"}),
-    new AnimTestcaseFromTo("16px", "0", { midComp: "8px",
-                                          toComp:  "0px"}), // 0 acts like 0px
+    new AnimTestcaseFromTo("16px", "0px", { midComp: "8px",
+                                          toComp:  "0px"}),
     new AnimTestcaseFromTo("10px", "20px", { midComp: "15px"}),
     new AnimTestcaseFromTo("41px", "1px", { midComp: "21px"}),
   ],
   lengthPctSVG: [
     new AnimTestcaseFromTo("20.5%", "0.5%", { midComp: "10.5%" }),
   ],
   lengthPxPctSVG: [
     new AnimTestcaseFromTo("10px", "10%", { midComp: "15px"},
diff --git a/content/smil/test/db_smilCSSPaced.js b/content/smil/test/db_smilCSSPaced.js
--- a/content/smil/test/db_smilCSSPaced.js
+++ b/content/smil/test/db_smilCSSPaced.js
@@ -107,31 +107,31 @@ var _pacedTestLists =
                             comp2_3: "10px",
                             comp1:    "8px"
                           }),
   ],
   lengthNoUnitsSVG : [
     new AnimTestcasePaced("2; 0; 4",
                           { comp0:   "2",
                             comp1_6: "1",
-                            comp1_3: "0px",  // 0 acts like 0px
+                            comp1_3: "0",
                             comp2_3: "2",
                             comp1:   "4"
                           }),
     new AnimTestcasePaced("10; 12; 8",
                           { comp0:   "10",
                             comp1_6: "11",
                             comp1_3: "12",
                             comp2_3: "10",
                             comp1:   "8"
                           }),
   ],
   lengthPx : [
-    new AnimTestcasePaced("0; 2px; 6px",
-                          { comp0:   "0px", // 0 acts like 0px
+    new AnimTestcasePaced("0px; 2px; 6px",
+                          { comp0:   "0px",
                             comp1_6: "1px",
                             comp1_3: "2px",
                             comp2_3: "4px",
                             comp1:   "6px"
                           }),
   ],
   lengthPx : [
     new AnimTestcasePaced("0px; 2px; 6px",
diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -4354,16 +4354,28 @@ CSSParserImpl::ParseVariant(nsCSSValue& 
         PRInt32 value;
         if (nsCSSProps::FindKeyword(keyword, aKeywordTable, value)) {
           aValue.SetIntValue(value, eCSSUnit_Enumerated);
           return PR_TRUE;
         }
       }
     }
   }
+  // Check VARIANT_NUMBER and VARIANT_INTEGER before VARIANT_LENGTH or
+  // VARIANT_ZERO_ANGLE.
+  if (((aVariantMask & VARIANT_NUMBER) != 0) &&
+      (eCSSToken_Number == tk->mType)) {
+    aValue.SetFloatValue(tk->mNumber, eCSSUnit_Number);
+    return PR_TRUE;
+  }
+  if (((aVariantMask & VARIANT_INTEGER) != 0) &&
+      (eCSSToken_Number == tk->mType) && tk->mIntegerValid) {
+    aValue.SetIntValue(tk->mInteger, eCSSUnit_Integer);
+    return PR_TRUE;
+  }
   if (((aVariantMask & (VARIANT_LENGTH | VARIANT_ANGLE |
                         VARIANT_FREQUENCY | VARIANT_TIME)) != 0 &&
        eCSSToken_Dimension == tk->mType) ||
       ((aVariantMask & (VARIANT_LENGTH | VARIANT_ZERO_ANGLE)) != 0 &&
        eCSSToken_Number == tk->mType &&
        tk->mNumber == 0.0f)) {
     if (TranslateDimension(aValue, aVariantMask, tk->mNumber, tk->mIdent)) {
       return PR_TRUE;
@@ -4372,26 +4384,16 @@ CSSParserImpl::ParseVariant(nsCSSValue& 
     UngetToken();
     return PR_FALSE;
   }
   if (((aVariantMask & VARIANT_PERCENT) != 0) &&
       (eCSSToken_Percentage == tk->mType)) {
     aValue.SetPercentValue(tk->mNumber);
     return PR_TRUE;
   }
-  if (((aVariantMask & VARIANT_NUMBER) != 0) &&
-      (eCSSToken_Number == tk->mType)) {
-    aValue.SetFloatValue(tk->mNumber, eCSSUnit_Number);
-    return PR_TRUE;
-  }
-  if (((aVariantMask & VARIANT_INTEGER) != 0) &&
-      (eCSSToken_Number == tk->mType) && tk->mIntegerValid) {
-    aValue.SetIntValue(tk->mInteger, eCSSUnit_Integer);
-    return PR_TRUE;
-  }
   if (mNavQuirkMode && !IsParsingCompoundProperty()) { // NONSTANDARD: Nav interprets unitless numbers as px
     if (((aVariantMask & VARIANT_LENGTH) != 0) &&
         (eCSSToken_Number == tk->mType)) {
       aValue.SetFloatValue(tk->mNumber, eCSSUnit_Pixel);
       return PR_TRUE;
     }
   }
 
diff --git a/layout/style/test/property_database.js b/layout/style/test/property_database.js
--- a/layout/style/test/property_database.js
+++ b/layout/style/test/property_database.js
@@ -141,17 +141,17 @@ var gCSSProperties = {
 		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
 		get_computed: logical_box_prop_get_computed,
 		prerequisites: { "-moz-border-end-style": "solid" },
 		initial_values: [ "medium", "3px", "-moz-calc(4px - 1px)" ],
 		other_values: [ "thin", "thick", "1px", "2em",
 			"-moz-calc(2px)",
 			"-moz-calc(-2px)",
 			"-moz-calc(0em)",
-			"-moz-calc(0)",
+			"-moz-calc(0px)",
 			"-moz-calc(5em)",
 			"-moz-calc(3*25px)",
 			"-moz-calc(25px*3)",
 			"-moz-calc(3*25px + 5em)",
 		],
 		invalid_values: [ "5%" ]
 	},
 	"-moz-border-image": {
@@ -319,17 +319,17 @@ var gCSSProperties = {
 		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
 		get_computed: logical_box_prop_get_computed,
 		prerequisites: { "-moz-border-start-style": "solid" },
 		initial_values: [ "medium", "3px", "-moz-calc(4px - 1px)" ],
 		other_values: [ "thin", "thick", "1px", "2em",
 			"-moz-calc(2px)",
 			"-moz-calc(-2px)",
 			"-moz-calc(0em)",
-			"-moz-calc(0)",
+			"-moz-calc(0px)",
 			"-moz-calc(5em)",
 			"-moz-calc(3*25px)",
 			"-moz-calc(25px*3)",
 			"-moz-calc(3*25px + 5em)",
 		],
 		invalid_values: [ "5%" ]
 	},
 	"-moz-border-top-colors": {
@@ -408,17 +408,17 @@ var gCSSProperties = {
 	"-moz-column-gap": {
 		domProp: "MozColumnGap",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "normal", "1em", "-moz-calc(-2em + 3em)" ],
 		other_values: [ "2px", "4em",
 			"-moz-calc(2px)",
 			"-moz-calc(-2px)",
-			"-moz-calc(0)",
+			"-moz-calc(0px)",
 			"-moz-calc(0pt)",
 			"-moz-calc(5em)",
 			"-moz-calc(3*25px)",
 			"-moz-calc(25px*3)",
 			"-moz-calc(3*25px + 5em)",
 		],
 		invalid_values: [ "3%", "-1px" ]
 	},
@@ -1349,17 +1349,17 @@ var gCSSProperties = {
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		prerequisites: { "border-bottom-style": "solid" },
 		initial_values: [ "medium", "3px", "-moz-calc(4px - 1px)" ],
 		other_values: [ "thin", "thick", "1px", "2em",
 			"-moz-calc(2px)",
 			"-moz-calc(-2px)",
 			"-moz-calc(0em)",
-			"-moz-calc(0)",
+			"-moz-calc(0px)",
 			"-moz-calc(5em)",
 			"-moz-calc(3*25px)",
 			"-moz-calc(25px*3)",
 			"-moz-calc(3*25px + 5em)",
 		],
 		invalid_values: [ "5%" ]
 	},
 	"border-collapse": {
@@ -1411,17 +1411,17 @@ var gCSSProperties = {
 		inherited: false,
 		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
 		prerequisites: { "border-left-style": "solid" },
 		initial_values: [ "medium", "3px", "-moz-calc(4px - 1px)" ],
 		other_values: [ "thin", "thick", "1px", "2em",
 			"-moz-calc(2px)",
 			"-moz-calc(-2px)",
 			"-moz-calc(0em)",
-			"-moz-calc(0)",
+			"-moz-calc(0px)",
 			"-moz-calc(5em)",
 			"-moz-calc(3*25px)",
 			"-moz-calc(25px*3)",
 			"-moz-calc(3*25px + 5em)",
 		],
 		invalid_values: [ "5%" ]
 	},
 	"border-right": {
@@ -1456,17 +1456,17 @@ var gCSSProperties = {
 		inherited: false,
 		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
 		prerequisites: { "border-right-style": "solid" },
 		initial_values: [ "medium", "3px", "-moz-calc(4px - 1px)" ],
 		other_values: [ "thin", "thick", "1px", "2em",
 			"-moz-calc(2px)",
 			"-moz-calc(-2px)",
 			"-moz-calc(0em)",
-			"-moz-calc(0)",
+			"-moz-calc(0px)",
 			"-moz-calc(5em)",
 			"-moz-calc(3*25px)",
 			"-moz-calc(25px*3)",
 			"-moz-calc(3*25px + 5em)",
 		],
 		invalid_values: [ "5%" ]
 	},
 	"border-spacing": {
@@ -1519,17 +1519,17 @@ var gCSSProperties = {
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		prerequisites: { "border-top-style": "solid" },
 		initial_values: [ "medium", "3px", "-moz-calc(4px - 1px)" ],
 		other_values: [ "thin", "thick", "1px", "2em",
 			"-moz-calc(2px)",
 			"-moz-calc(-2px)",
 			"-moz-calc(0em)",
-			"-moz-calc(0)",
+			"-moz-calc(0px)",
 			"-moz-calc(5em)",
 			"-moz-calc(3*25px)",
 			"-moz-calc(25px*3)",
 			"-moz-calc(3*25px + 5em)",
 		],
 		invalid_values: [ "5%" ]
 	},
 	"border-width": {
@@ -2034,34 +2034,34 @@ var gCSSProperties = {
 		domProp: "maxHeight",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		prerequisites: { "display": "block" },
 		initial_values: [ "none" ],
 		other_values: [ "30px", "50%", "0",
 			"-moz-calc(2px)",
 			"-moz-calc(-2px)",
-			"-moz-calc(0)",
+			"-moz-calc(0px)",
 			"-moz-calc(50%)",
 			"-moz-calc(3*25px)",
 			"-moz-calc(25px*3)",
 			"-moz-calc(3*25px + 50%)",
 		],
 		invalid_values: [ "auto", "-moz-max-content", "-moz-min-content", "-moz-fit-content", "-moz-available" ]
 	},
 	"max-width": {
 		domProp: "maxWidth",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		prerequisites: { "display": "block" },
 		initial_values: [ "none" ],
 		other_values: [ "30px", "50%", "0", "-moz-max-content", "-moz-min-content", "-moz-fit-content", "-moz-available",
 			"-moz-calc(2px)",
 			"-moz-calc(-2px)",
-			"-moz-calc(0)",
+			"-moz-calc(0px)",
 			"-moz-calc(50%)",
 			"-moz-calc(3*25px)",
 			"-moz-calc(25px*3)",
 			"-moz-calc(3*25px + 50%)",
 		],
 		invalid_values: [ "auto" ]
 	},
 	"min-height": {
@@ -2156,17 +2156,17 @@ var gCSSProperties = {
 		domProp: "outlineWidth",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		prerequisites: { "outline-style": "solid" },
 		initial_values: [ "medium", "3px", "-moz-calc(4px - 1px)" ],
 		other_values: [ "thin", "thick", "1px", "2em",
 			"-moz-calc(2px)",
 			"-moz-calc(-2px)",
-			"-moz-calc(0)",
+			"-moz-calc(0px)",
 			"-moz-calc(0px)",
 			"-moz-calc(5em)",
 			"-moz-calc(3*25px)",
 			"-moz-calc(25px*3)",
 			"-moz-calc(3*25px + 5em)",
 		],
 		invalid_values: [ "5%" ]
 	},
@@ -2198,17 +2198,17 @@ var gCSSProperties = {
 		other_values: [ "auto", "scroll", "hidden" ],
 		invalid_values: []
 	},
 	"padding": {
 		domProp: "padding",
 		inherited: false,
 		type: CSS_TYPE_TRUE_SHORTHAND,
 		subproperties: [ "padding-top", "padding-right", "padding-bottom", "padding-left" ],
-		initial_values: [ "0", "0px 0 0em", "0% 0px 0em 0pt", "-moz-calc(0) -moz-calc(0em) -moz-calc(-2px) -moz-calc(-1%)" ],
+		initial_values: [ "0", "0px 0 0em", "0% 0px 0em 0pt", "-moz-calc(0px) -moz-calc(0em) -moz-calc(-2px) -moz-calc(-1%)" ],
 		other_values: [ "3px 0", "2em 4px 2pt", "1em 2em 3px 4px" ],
 		invalid_values: []
 	},
 	"padding-bottom": {
 		domProp: "paddingBottom",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "0", "0px", "0%", "-moz-calc(0pt)", "-moz-calc(0% + 0px)", "-moz-calc(-3px)", "-moz-calc(-1%)" ],
diff --git a/layout/style/test/test_value_computation.html b/layout/style/test/test_value_computation.html
--- a/layout/style/test/test_value_computation.html
+++ b/layout/style/test/test_value_computation.html
@@ -38,16 +38,20 @@
 <script class="testbody" type="text/javascript">
 
 /** Test for computation of values in property database **/
 
 var gBadComputed = {
   // These values are treated as auto.
   "page-break-after": [ "avoid" ],
   "page-break-before": [ "avoid" ],
+
+  // This is the only SVG-length property (i.e., length allowing
+  // unitless lengths) whose initial value is zero.
+  "stroke-dashoffset": [ "0" ],
 };
 
 var gBadComputedNoFrame = {
   // These are probably bogus tests...
   "border-radius": [ "0%", "-moz-calc(-1%)", "-moz-calc(0px) -moz-calc(0pt) -moz-calc(0%) -moz-calc(0em)" ],
   "border-bottom-left-radius": [ "0%", "-moz-calc(-1%)" ],
   "border-bottom-right-radius": [ "0%", "-moz-calc(-1%)" ],
   "border-top-left-radius": [ "0%", "-moz-calc(-1%)" ],
@@ -63,17 +67,17 @@ var gBadComputedNoFrame = {
   "-moz-padding-start": [ "0%", "-moz-calc(0% + 0px)", "-moz-calc(-1%)" ],
   "margin": [ "0% 0px 0em 0pt" ],
   "margin-bottom": [ "0%", "-moz-calc(0% + 0px)" ],
   "margin-left": [ "0%", "-moz-calc(0% + 0px)" ],
   "margin-right": [ "0%", "-moz-calc(0% + 0px)" ],
   "margin-top": [ "0%", "-moz-calc(0% + 0px)" ],
   "min-height": [ "-moz-calc(-1%)" ],
   "min-width": [ "-moz-calc(-1%)" ],
-  "padding": [ "0% 0px 0em 0pt", "-moz-calc(0) -moz-calc(0em) -moz-calc(-2px) -moz-calc(-1%)" ],
+  "padding": [ "0% 0px 0em 0pt", "-moz-calc(0px) -moz-calc(0em) -moz-calc(-2px) -moz-calc(-1%)" ],
   "padding-bottom": [ "0%", "-moz-calc(0% + 0px)", "-moz-calc(-1%)" ],
   "padding-left": [ "0%", "-moz-calc(0% + 0px)", "-moz-calc(-1%)" ],
   "padding-right": [ "0%", "-moz-calc(0% + 0px)", "-moz-calc(-1%)" ],
   "padding-top": [ "0%", "-moz-calc(0% + 0px)", "-moz-calc(-1%)" ],
 };
 
 function xfail_value(property, value, is_initial, has_frame) {
   if ((property in gBadComputed) &&
