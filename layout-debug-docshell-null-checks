Consolidate mDocShell null checks in nsLayoutDebuggingTools.  (Not part of default build.)

diff --git a/extensions/layout-debug/src/nsLayoutDebuggingTools.cpp b/extensions/layout-debug/src/nsLayoutDebuggingTools.cpp
--- a/extensions/layout-debug/src/nsLayoutDebuggingTools.cpp
+++ b/extensions/layout-debug/src/nsLayoutDebuggingTools.cpp
@@ -143,24 +143,25 @@ nsLayoutDebuggingTools::~nsLayoutDebuggi
 {
 }
 
 NS_IMPL_ISUPPORTS1(nsLayoutDebuggingTools, nsILayoutDebuggingTools)
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::Init(nsIDOMWindow *aWin)
 {
+    mPrefs = do_GetService(NS_PREF_CONTRACTID);
+
     {
         nsCOMPtr<nsPIDOMWindow> window = do_QueryInterface(aWin);
         if (!window)
             return NS_ERROR_UNEXPECTED;
         mDocShell = window->GetDocShell();
     }
-
-    mPrefs = do_GetService(NS_PREF_CONTRACTID);
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_UNEXPECTED);
 
     GetBoolPref("nglayout.debug.paint_flashing", &mPaintFlashing);
     GetBoolPref("nglayout.debug.paint_dumping", &mPaintDumping);
     GetBoolPref("nglayout.debug.invalidate_dumping", &mInvalidateDumping);
     GetBoolPref("nglayout.debug.event_dumping", &mEventDumping);
     GetBoolPref("nglayout.debug.motion_event_dumping", &mMotionEventDumping);
     GetBoolPref("nglayout.debug.crossing_event_dumping", &mCrossingEventDumping);
     GetBoolPref("layout.reflow.showframecounts", &mReflowCounts);
@@ -174,16 +175,17 @@ nsLayoutDebuggingTools::Init(nsIDOMWindo
     }
 
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::NewURILoaded()
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
     // Reset all the state that should be reset between pages.
 
     // XXX Some of these should instead be transferred between pages!
     mEditorMode = PR_FALSE;
     mVisualDebugging = PR_FALSE;
     mVisualEventDebugging = PR_FALSE;
 
     mReflowCounts = PR_FALSE;
@@ -319,16 +321,17 @@ nsLayoutDebuggingTools::GetReflowCounts(
 {
     *aShow = mReflowCounts;
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::SetReflowCounts(PRBool aShow)
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
     nsCOMPtr<nsIPresShell> shell(pres_shell(mDocShell)); 
     if (shell) {
 #ifdef MOZ_REFLOW_PERF
         shell->SetPaintFrameCount(aShow);
         SetBoolPrefAndRefresh("layout.reflow.showframecounts", aShow);
         mReflowCounts = aShow;
 #else
         printf("************************************************\n");
@@ -368,16 +371,17 @@ static void DumpAWebShell(nsIDocShellTre
     for (i = aIndent; --i >= 0; )
         fprintf(out, "  ");
     fputs(">\n", out);
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::DumpWebShells()
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
     nsCOMPtr<nsIDocShellTreeItem> shellAsItem(do_QueryInterface(mDocShell));
     DumpAWebShell(shellAsItem, stdout, 0);
     return NS_OK;
 }
 
 static
 void
 DumpContentRecur(nsIDocShell* aDocShell, FILE* out)
@@ -409,120 +413,121 @@ DumpContentRecur(nsIDocShell* aDocShell,
         }
     }
 #endif
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::DumpContent()
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
     DumpContentRecur(mDocShell, stdout);
     return NS_OK;
 }
 
 static void
 DumpFramesRecur(nsIDocShell* aDocShell, FILE* out)
 {
-    if (nsnull != aDocShell) {
-        fprintf(out, "webshell=%p \n", static_cast<void*>(aDocShell));
-        nsCOMPtr<nsIPresShell> shell(pres_shell(aDocShell));
-        if (shell) {
-            nsIFrame* root = shell->GetRootFrame();
-            if (root) {
-                nsIFrameDebug* fdbg = do_QueryFrame(root);
-                if (fdbg) {
-                    fdbg->List(out, 0);
-                }
+    fprintf(out, "webshell=%p \n", static_cast<void*>(aDocShell));
+    nsCOMPtr<nsIPresShell> shell(pres_shell(aDocShell));
+    if (shell) {
+        nsIFrame* root = shell->GetRootFrame();
+        if (root) {
+            nsIFrameDebug* fdbg = do_QueryFrame(root);
+            if (fdbg) {
+                fdbg->List(out, 0);
             }
         }
-        else {
-            fputs("null pres shell\n", out);
-        }
+    }
+    else {
+        fputs("null pres shell\n", out);
+    }
 
-        // dump the frames of the sub documents
-        PRInt32 i, n;
-        nsCOMPtr<nsIDocShellTreeNode> docShellAsNode(do_QueryInterface(aDocShell));
-        docShellAsNode->GetChildCount(&n);
-        for (i = 0; i < n; ++i) {
-            nsCOMPtr<nsIDocShellTreeItem> child;
-            docShellAsNode->GetChildAt(i, getter_AddRefs(child));
-            nsCOMPtr<nsIDocShell> childAsShell(do_QueryInterface(child));
-            if (childAsShell) {
-                DumpFramesRecur(childAsShell, out);
-            }
+    // dump the frames of the sub documents
+    PRInt32 i, n;
+    nsCOMPtr<nsIDocShellTreeNode> docShellAsNode(do_QueryInterface(aDocShell));
+    docShellAsNode->GetChildCount(&n);
+    for (i = 0; i < n; ++i) {
+        nsCOMPtr<nsIDocShellTreeItem> child;
+        docShellAsNode->GetChildAt(i, getter_AddRefs(child));
+        nsCOMPtr<nsIDocShell> childAsShell(do_QueryInterface(child));
+        if (childAsShell) {
+            DumpFramesRecur(childAsShell, out);
         }
     }
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::DumpFrames()
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
     DumpFramesRecur(mDocShell, stdout);
     return NS_OK;
 }
 
 static
 void
 DumpViewsRecur(nsIDocShell* aDocShell, FILE* out)
 {
 #ifdef DEBUG
-    if (aDocShell) {
-        fprintf(out, "docshell=%p \n", static_cast<void*>(aDocShell));
-        nsCOMPtr<nsIViewManager> vm(view_manager(aDocShell));
-        if (vm) {
-            nsIView* root;
-            vm->GetRootView(root);
-            if (nsnull != root) {
-                root->List(out);
-            }
+    fprintf(out, "docshell=%p \n", static_cast<void*>(aDocShell));
+    nsCOMPtr<nsIViewManager> vm(view_manager(aDocShell));
+    if (vm) {
+        nsIView* root;
+        vm->GetRootView(root);
+        if (nsnull != root) {
+            root->List(out);
         }
-        else {
-            fputs("null view manager\n", out);
-        }
+    }
+    else {
+        fputs("null view manager\n", out);
+    }
 
-        // dump the views of the sub documents
-        PRInt32 i, n;
-        nsCOMPtr<nsIDocShellTreeNode> docShellAsNode(do_QueryInterface(aDocShell));
-        docShellAsNode->GetChildCount(&n);
-        for (i = 0; i < n; i++) {
-            nsCOMPtr<nsIDocShellTreeItem> child;
-            docShellAsNode->GetChildAt(i, getter_AddRefs(child));
-            nsCOMPtr<nsIDocShell> childAsShell(do_QueryInterface(child));
-            if (childAsShell) {
-                DumpViewsRecur(childAsShell, out);
-            }
+    // dump the views of the sub documents
+    PRInt32 i, n;
+    nsCOMPtr<nsIDocShellTreeNode> docShellAsNode(do_QueryInterface(aDocShell));
+    docShellAsNode->GetChildCount(&n);
+    for (i = 0; i < n; i++) {
+        nsCOMPtr<nsIDocShellTreeItem> child;
+        docShellAsNode->GetChildAt(i, getter_AddRefs(child));
+        nsCOMPtr<nsIDocShell> childAsShell(do_QueryInterface(child));
+        if (childAsShell) {
+            DumpViewsRecur(childAsShell, out);
         }
     }
 #endif // DEBUG
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::DumpViews()
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
     DumpViewsRecur(mDocShell, stdout);
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::DumpStyleSheets()
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
 #ifdef DEBUG
     FILE *out = stdout;
     nsCOMPtr<nsIPresShell> shell(pres_shell(mDocShell)); 
     if (shell)
         shell->ListStyleSheets(out);
     else
         fputs("null pres shell\n", out);
 #endif
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::DumpStyleContexts()
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
 #ifdef DEBUG
     FILE *out = stdout;
     nsCOMPtr<nsIPresShell> shell(pres_shell(mDocShell)); 
     if (shell) {
         nsIFrame* root = shell->GetRootFrame();
         if (!root) {
             fputs("null root frame\n", out);
         } else {
@@ -533,16 +538,17 @@ nsLayoutDebuggingTools::DumpStyleContext
     }
 #endif
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsLayoutDebuggingTools::DumpReflowStats()
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
 #ifdef DEBUG
     nsCOMPtr<nsIPresShell> shell(pres_shell(mDocShell)); 
     if (shell) {
 #ifdef MOZ_REFLOW_PERF
         shell->DumpReflows();
 #else
         printf("************************************************\n");
         printf("Sorry, you have not built with MOZ_REFLOW_PERF=1\n");
@@ -564,16 +570,17 @@ void nsLayoutDebuggingTools::ForceRefres
         vm->UpdateView(root, NS_VMREFRESH_IMMEDIATE);
     }
 }
 
 nsresult
 nsLayoutDebuggingTools::SetBoolPrefAndRefresh(const char * aPrefName,
                                               PRBool aNewVal)
 {
+    NS_ENSURE_TRUE(mDocShell, NS_ERROR_NOT_INITIALIZED);
     NS_ENSURE_TRUE(mPrefs && aPrefName, NS_OK);
 
     mPrefs->SetBoolPref(aPrefName, aNewVal);
     mPrefs->SavePrefFile(nsnull);
 
     ForceRefresh();
 
     return NS_OK;
