Fix computed style for large integers by using double instead of float.  (Bug 373875)
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -3454,17 +3454,17 @@ nsComputedDOMStyle::SetValueToCoord(nsRO
     case eStyleUnit_Coord:
       {
         nscoord val = aCoord.GetCoordValue();
         aValue->SetAppUnits(PR_MAX(aMinAppUnits, PR_MIN(val, aMaxAppUnits)));
       }
       break;
       
     case eStyleUnit_Integer:
-      aValue->SetNumber(aCoord.GetIntValue());
+      aValue->SetNumber(aCoord.GetIntValue()); // XXX This should really be integer
       break;
       
     case eStyleUnit_Enumerated:
       NS_ASSERTION(aTable, "Must have table to handle this case");
       aValue->SetIdent(nsCSSProps::ValueToKeyword(aCoord.GetIntValue(),
                                                   aTable));
       break;
       
diff --git a/layout/style/nsROCSSPrimitiveValue.cpp b/layout/style/nsROCSSPrimitiveValue.cpp
--- a/layout/style/nsROCSSPrimitiveValue.cpp
+++ b/layout/style/nsROCSSPrimitiveValue.cpp
@@ -367,22 +367,22 @@ nsROCSSPrimitiveValue::GetFloatValue(PRU
     case CSS_PC :
       if (mType != CSS_PX)
         return NS_ERROR_DOM_INVALID_ACCESS_ERR;
       *aReturn = mValue.mAppUnits * 6.0f / float(mAppUnitsPerInch);
       break;
     case CSS_PERCENTAGE :
       if (mType != CSS_PERCENTAGE)
         return NS_ERROR_DOM_INVALID_ACCESS_ERR;
-      *aReturn = mValue.mFloat * 100;
+      *aReturn = float(mValue.mFloat * 100);
       break;
     case CSS_NUMBER :
       if (mType != CSS_NUMBER)
         return NS_ERROR_DOM_INVALID_ACCESS_ERR;
-      *aReturn = mValue.mFloat;
+      *aReturn = float(mValue.mFloat);
       break;
     case CSS_UNKNOWN :
     case CSS_EMS :
     case CSS_EXS :
     case CSS_DEG :
     case CSS_RAD :
     case CSS_GRAD :
     case CSS_MS :
diff --git a/layout/style/nsROCSSPrimitiveValue.h b/layout/style/nsROCSSPrimitiveValue.h
--- a/layout/style/nsROCSSPrimitiveValue.h
+++ b/layout/style/nsROCSSPrimitiveValue.h
@@ -68,38 +68,38 @@ public:
   nsROCSSPrimitiveValue(PRInt32 aAppUnitsPerInch);
   virtual ~nsROCSSPrimitiveValue();
 
   // FIXME Many of these methods should be out-of-line.
 
   void SetNumber(float aValue)
   {
     Reset();
-    mValue.mFloat = aValue;
+    mValue.mFloat = double(aValue);
     mType = CSS_NUMBER;
   }
 
   void SetNumber(PRInt32 aValue)
   {
     Reset();
-    mValue.mFloat = float(aValue);
+    mValue.mFloat = double(aValue);
     mType = CSS_NUMBER;
   }
 
   void SetNumber(PRUint32 aValue)
   {
     Reset();
-    mValue.mFloat = float(aValue);
+    mValue.mFloat = double(aValue);
     mType = CSS_NUMBER;
   }
 
   void SetPercent(float aValue)
   {
     Reset();
-    mValue.mFloat = aValue;
+    mValue.mFloat = double(aValue);
     mType = CSS_PERCENTAGE;
   }
 
   void SetAppUnits(nscoord aValue)
   {
     Reset();
     mValue.mAppUnits = aValue;
     mType = CSS_PX;
@@ -225,24 +225,24 @@ public:
         break;
     }
   }
 
 private:
   void GetEscapedURI(nsIURI *aURI, PRUnichar **aReturn);
 
   PRUint16 mType;
+  PRInt32 mAppUnitsPerInch;
 
   union {
     nscoord         mAppUnits;
-    float           mFloat;
+    double          mFloat;
     nsDOMCSSRGBColor* mColor;
     nsIDOMRect*     mRect;
     PRUnichar*      mString;
     nsIURI*         mURI;
     nsIAtom*        mAtom; // FIXME use nsCSSKeyword instead
   } mValue;
   
-  PRInt32 mAppUnitsPerInch;
 };
 
 #endif /* nsROCSSPrimitiveValue_h___ */
 
diff --git a/layout/style/test/Makefile.in b/layout/style/test/Makefile.in
--- a/layout/style/test/Makefile.in
+++ b/layout/style/test/Makefile.in
@@ -77,16 +77,17 @@ _TEST_FILES =	test_acid3_test46.html \
 		test_bug229915.html \
 		test_bug302186.html \
 		test_bug319381.html \
 		test_bug357614.html \
 		test_bug363146.html \
 		test_bug365932.html \
 		test_bug372770.html \
 		test_bug373293.html \
+		test_bug373875.html \
 		test_bug377947.html \
 		test_bug379440.html \
 		test_bug379741.html \
 		test_bug382027.html \
 		test_bug383075.html \
 		test_bug387615.html \
 		test_bug389464.html \
 		test_bug391034.html \
diff --git a/layout/style/test/test_bug373875.html b/layout/style/test/test_bug373875.html
new file mode 100644
--- /dev/null
+++ b/layout/style/test/test_bug373875.html
@@ -0,0 +1,32 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+https://bugzilla.mozilla.org/show_bug.cgi?id=373875
+-->
+<head>
+  <title>Test for Bug 373875</title>
+  <script type="application/javascript" src="/MochiKit/MochiKit.js"></script>
+  <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
+</head>
+<body>
+<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=373875">Mozilla Bug 373875</a>
+<p id="display"></p>
+<div id="content" style="display: none">
+  
+</div>
+<pre id="test">
+<script type="application/javascript">
+
+/** Test for Bug 373875 **/
+
+var e = document.getElementById("display");
+e.setAttribute("style", "z-index: 2147483647"); // maximum signed 32-bit
+is(e.style.zIndex, "2147483647", "element.style should roundtrip correctly");
+is(window.getComputedStyle(e).zIndex, "2147483647",
+   "element.style should roundtrip correctly");
+
+</script>
+</pre>
+</body>
+</html>
