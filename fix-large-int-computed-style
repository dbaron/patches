From: L. David Baron <dbaron@dbaron.org>

Fix computed style for large integers by using double instead of float.  (Bug 470769)  r+sr=bzbarsky

diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -3647,17 +3647,17 @@ nsComputedDOMStyle::SetValueToCoord(nsRO
     case eStyleUnit_Coord:
       {
         nscoord val = aCoord.GetCoordValue();
         aValue->SetAppUnits(NS_MAX(aMinAppUnits, NS_MIN(val, aMaxAppUnits)));
       }
       break;
       
     case eStyleUnit_Integer:
-      aValue->SetNumber(aCoord.GetIntValue());
+      aValue->SetNumber(aCoord.GetIntValue()); // XXX This should really be integer
       break;
       
     case eStyleUnit_Enumerated:
       NS_ASSERTION(aTable, "Must have table to handle this case");
       aValue->SetIdent(nsCSSProps::ValueToKeywordEnum(aCoord.GetIntValue(),
                                                       aTable));
       break;
       
diff --git a/layout/style/nsROCSSPrimitiveValue.cpp b/layout/style/nsROCSSPrimitiveValue.cpp
--- a/layout/style/nsROCSSPrimitiveValue.cpp
+++ b/layout/style/nsROCSSPrimitiveValue.cpp
@@ -44,17 +44,17 @@
 #include "prprf.h"
 #include "nsContentUtils.h"
 #include "nsXPIDLString.h"
 #include "nsCRT.h"
 #include "nsPresContext.h"
 #include "nsStyleUtil.h"
 
 nsROCSSPrimitiveValue::nsROCSSPrimitiveValue(PRInt32 aAppUnitsPerInch)
-  : mType(CSS_PX), mAppUnitsPerInch(aAppUnitsPerInch)
+  : mAppUnitsPerInch(aAppUnitsPerInch), mType(CSS_PX)
 {
   mValue.mAppUnits = 0;
 }
 
 
 nsROCSSPrimitiveValue::~nsROCSSPrimitiveValue()
 {
   Reset();
@@ -336,22 +336,22 @@ nsROCSSPrimitiveValue::GetFloatValue(PRU
     case CSS_PC :
       if (mType != CSS_PX)
         return NS_ERROR_DOM_INVALID_ACCESS_ERR;
       *aReturn = mValue.mAppUnits * 6.0f / float(mAppUnitsPerInch);
       break;
     case CSS_PERCENTAGE :
       if (mType != CSS_PERCENTAGE)
         return NS_ERROR_DOM_INVALID_ACCESS_ERR;
-      *aReturn = mValue.mFloat * 100;
+      *aReturn = float(mValue.mFloat * 100);
       break;
     case CSS_NUMBER :
       if (mType != CSS_NUMBER)
         return NS_ERROR_DOM_INVALID_ACCESS_ERR;
-      *aReturn = mValue.mFloat;
+      *aReturn = float(mValue.mFloat);
       break;
     case CSS_UNKNOWN :
     case CSS_EMS :
     case CSS_EXS :
     case CSS_DEG :
     case CSS_RAD :
     case CSS_GRAD :
     case CSS_MS :
diff --git a/layout/style/nsROCSSPrimitiveValue.h b/layout/style/nsROCSSPrimitiveValue.h
--- a/layout/style/nsROCSSPrimitiveValue.h
+++ b/layout/style/nsROCSSPrimitiveValue.h
@@ -68,38 +68,38 @@ public:
   nsROCSSPrimitiveValue(PRInt32 aAppUnitsPerInch);
   virtual ~nsROCSSPrimitiveValue();
 
   // FIXME Many of these methods should be out-of-line.
 
   void SetNumber(float aValue)
   {
     Reset();
-    mValue.mFloat = aValue;
+    mValue.mFloat = double(aValue);
     mType = CSS_NUMBER;
   }
 
   void SetNumber(PRInt32 aValue)
   {
     Reset();
-    mValue.mFloat = float(aValue);
+    mValue.mFloat = double(aValue);
     mType = CSS_NUMBER;
   }
 
   void SetNumber(PRUint32 aValue)
   {
     Reset();
-    mValue.mFloat = float(aValue);
+    mValue.mFloat = double(aValue);
     mType = CSS_NUMBER;
   }
 
   void SetPercent(float aValue)
   {
     Reset();
-    mValue.mFloat = aValue;
+    mValue.mFloat = double(aValue);
     mType = CSS_PERCENTAGE;
   }
 
   void SetAppUnits(nscoord aValue)
   {
     Reset();
     mValue.mAppUnits = aValue;
     mType = CSS_PX;
@@ -211,25 +211,25 @@ public:
       case CSS_RGBCOLOR:
         NS_ASSERTION(mValue.mColor, "Null RGBColor should never happen");
         NS_RELEASE(mValue.mColor);
         break;
     }
   }
 
 private:
+  PRInt32 mAppUnitsPerInch;
+
   PRUint16 mType;
 
   union {
     nscoord         mAppUnits;
-    float           mFloat;
+    double          mFloat;
     nsDOMCSSRGBColor* mColor;
     nsIDOMRect*     mRect;
     PRUnichar*      mString;
     nsIURI*         mURI;
     nsCSSKeyword    mKeyword;
   } mValue;
-  
-  PRInt32 mAppUnitsPerInch;
 };
 
 #endif /* nsROCSSPrimitiveValue_h___ */
 
diff --git a/layout/style/test/test_bug470769.html b/layout/style/test/test_bug470769.html
--- a/layout/style/test/test_bug470769.html
+++ b/layout/style/test/test_bug470769.html
@@ -18,15 +18,15 @@ https://bugzilla.mozilla.org/show_bug.cg
 <pre id="test">
 <script type="application/javascript">
 
 /** Test for Bug 470769 **/
 
 var e = document.getElementById("display");
 e.setAttribute("style", "z-index: 2147483647"); // maximum signed 32-bit
 is(e.style.zIndex, "2147483647", "element.style should roundtrip correctly");
-todo_is(window.getComputedStyle(e, "").zIndex, "2147483647",
+is(window.getComputedStyle(e, "").zIndex, "2147483647",
    "getComputedStyle should roundtrip correctly");
 
 </script>
 </pre>
 </body>
 </html>
