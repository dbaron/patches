Add a preference for visited link support.  (Bug 147777)  r+sr=bzbarsky

diff --git a/layout/build/nsLayoutStatics.cpp b/layout/build/nsLayoutStatics.cpp
--- a/layout/build/nsLayoutStatics.cpp
+++ b/layout/build/nsLayoutStatics.cpp
@@ -231,16 +231,18 @@ nsLayoutStatics::Initialize()
 #ifndef DEBUG_CC
   rv = nsCCUncollectableMarker::Init();
   if (NS_FAILED(rv)) {
     NS_ERROR("Could not initialize nsCCUncollectableMarker");
     return rv;
   }
 #endif
 
+  nsCSSRuleProcessor::Startup();
+
 #ifdef MOZ_XUL
   rv = nsXULPopupManager::Init();
   if (NS_FAILED(rv)) {
     NS_ERROR("Could not initialize nsXULPopupManager");
     return rv;
   }
 #endif
 
diff --git a/layout/style/nsCSSRuleProcessor.cpp b/layout/style/nsCSSRuleProcessor.cpp
--- a/layout/style/nsCSSRuleProcessor.cpp
+++ b/layout/style/nsCSSRuleProcessor.cpp
@@ -81,16 +81,20 @@
 #include "nsServiceManagerUtils.h"
 #include "nsTArray.h"
 #include "nsContentUtils.h"
 #include "nsIMediaList.h"
 #include "gfxPlatform.h"
 #include "gfxUserFontSet.h"
 #include "nsCSSRules.h"
 #include "nsFontFaceLoader.h"
+
+#define VISITED_PSEUDO_PREF "layout.css.visited_links_enabled"
+
+static PRBool gSupportVisitedPseudo = PR_TRUE;
 
 static NS_DEFINE_CID(kLookAndFeelCID, NS_LOOKANDFEEL_CID);
 static nsTArray< nsCOMPtr<nsIAtom> >* sSystemMetrics = 0;
 
 struct RuleValue {
   /**
    * |RuleValue|s are constructed before they become part of the
    * |RuleHash|, to act as rule/selector pairs.  |Add| is called when
@@ -748,16 +752,26 @@ nsCSSRuleProcessor::~nsCSSRuleProcessor(
   for (PRInt32 i = mSheets.Count() - 1; i >= 0; --i)
     mSheets[i]->DropRuleProcessor(this);
   mSheets.Clear();
   ClearRuleCascades();
 }
 
 NS_IMPL_ISUPPORTS1(nsCSSRuleProcessor, nsIStyleRuleProcessor)
 
+/* static */ void
+nsCSSRuleProcessor::Startup()
+{
+  nsContentUtils::AddBoolPrefVarCache(VISITED_PSEUDO_PREF,
+                                      &gSupportVisitedPseudo);
+  // We want to default to true, not false as AddBoolPrefVarCache does.
+  gSupportVisitedPseudo =
+    nsContentUtils::GetBoolPref(VISITED_PSEUDO_PREF, PR_TRUE);
+}
+
 static PRBool
 InitSystemMetrics()
 {
   NS_ASSERTION(!sSystemMetrics, "already initialized");
 
   sSystemMetrics = new nsTArray< nsCOMPtr<nsIAtom> >;
   NS_ENSURE_TRUE(sSystemMetrics, PR_FALSE);
 
@@ -914,16 +928,20 @@ RuleProcessorData::RuleProcessorData(nsP
     // NOTE: optimization: cannot be an XLink if no attributes (since it needs an 
     if(!mIsLink &&
        mHasAttributes && 
        !(mIsHTMLContent || aContent->IsNodeOfType(nsINode::eXUL)) && 
        nsStyleUtil::IsLink(aContent, linkHandler,
                            aRuleWalker != nsnull, &mLinkState)) {
       mIsLink = PR_TRUE;
     } 
+  }
+
+  if (mLinkState == eLinkState_Visited && !gSupportVisitedPseudo) {
+    mLinkState = eLinkState_Unvisited;
   }
 }
 
 RuleProcessorData::~RuleProcessorData()
 {
   MOZ_COUNT_DTOR(RuleProcessorData);
 
   // Destroy potentially long chains of previous sibling and parent data
diff --git a/layout/style/nsCSSRuleProcessor.h b/layout/style/nsCSSRuleProcessor.h
--- a/layout/style/nsCSSRuleProcessor.h
+++ b/layout/style/nsCSSRuleProcessor.h
@@ -67,16 +67,17 @@ public:
   nsCSSRuleProcessor(const nsCOMArray<nsICSSStyleSheet>& aSheets);
   virtual ~nsCSSRuleProcessor();
 
   NS_DECL_ISUPPORTS
 
 public:
   nsresult ClearRuleCascades();
 
+  static void Startup();
   static void FreeSystemMetrics();
 
   /*
    * Returns true if the given RuleProcessorData matches one of the
    * selectors in aSelectorList.  Note that this method will assume
    * the matching is not for styling purposes.
    */
   static PRBool SelectorListMatches(RuleProcessorData& aData,
diff --git a/layout/style/test/Makefile.in b/layout/style/test/Makefile.in
--- a/layout/style/test/Makefile.in
+++ b/layout/style/test/Makefile.in
@@ -112,16 +112,17 @@ _TEST_FILES =	test_acid3_test46.html \
 		test_parse_rule.html \
 		test_property_database.html \
 		test_property_syntax_errors.html \
 		test_selectors.html \
 		test_selectors_on_anonymous_content.html \
 		test_style_struct_copy_constructors.html \
 		test_value_computation.html \
 		test_value_storage.html \
+		test_visited_pref.html \
 		css_properties.js \
 		property_database.js \
 		unstyled.xml \
 		unstyled.css \
 		unstyled-frame.xml \
 		unstyled-frame.css \
 		redirect-1.css \
 		post-redirect-1.css \
diff --git a/layout/style/test/test_visited_pref.html b/layout/style/test/test_visited_pref.html
new file mode 100644
--- /dev/null
+++ b/layout/style/test/test_visited_pref.html
@@ -0,0 +1,71 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+https://bugzilla.mozilla.org/show_bug.cgi?id=147777
+-->
+<head>
+  <title>Test for visited link coloring pref Bug 147777</title>
+  <script type="application/javascript" src="/MochiKit/MochiKit.js"></script>
+  <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
+  <style type="text/css">
+
+  :link { float: left; }
+
+  :visited { float: right; }
+
+  </style>
+</head>
+<body>
+<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=147777">Mozilla Bug 147777</a>
+<p id="display"><a id="mylink" href="test_visited_pref.html">link to this page</a></p>
+<pre id="test">
+<script type="application/javascript">
+
+/** Test for Bug 147777 **/
+
+function reinsert_node(e) {
+  var sib = e.nextSibling;
+  var par = e.parentNode;
+  par.removeChild(e);
+  par.insertBefore(e, sib);
+}
+
+netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
+var prefService = Components.classes["@mozilla.org/preferences-service;1"].
+                    getService(Components.interfaces.nsIPrefService);
+var dispBranch = prefService.getBranch("layout.css.");
+
+function get_pref()
+{
+    netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
+    return dispBranch.getBoolPref("visited_links_enabled");
+}
+
+function set_pref(val)
+{
+    netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
+    dispBranch.setBoolPref("visited_links_enabled", val);
+}
+
+is(get_pref(), true, "pref defaults to true");
+
+var link = document.getElementById("mylink");
+var cs = getComputedStyle(link, "");
+is(cs.cssFloat, "right", ":visited selector applies given default preferences");
+
+set_pref(false);
+
+// we don't handle dynamic changes of this pref; it only takes effect
+// when a new page loads
+reinsert_node(link);
+
+is(cs.cssFloat, "left", ":visited selector does not apply given false preference");
+
+// Set the pref back for the rest of the tests.
+set_pref(true);
+
+</script>
+</pre>
+</body>
+</html>
diff --git a/modules/libpref/src/init/all.js b/modules/libpref/src/init/all.js
--- a/modules/libpref/src/init/all.js
+++ b/modules/libpref/src/init/all.js
@@ -1047,16 +1047,19 @@ pref("layout.selection.caret_style", 0);
 // Shift_JIS, ISO-2022-JP)
 pref("layout.enable_japanese_specific_transform", false);
 
 // pref to force frames to be resizable
 pref("layout.frames.force_resizability", false);
 
 // pref to report CSS errors to the error console
 pref("layout.css.report_errors", true);
+
+// Should the :visited selector ever match (otherwise :link matches instead)?
+pref("layout.css.visited_links_enabled", true);
 
 // pref for which side vertical scrollbars should be on
 // 0 = end-side in UI direction
 // 1 = end-side in document/content direction
 // 2 = right
 // 3 = left
 pref("layout.scrollbar.side", 0);
 
