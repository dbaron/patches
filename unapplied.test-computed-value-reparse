From: L. David Baron <dbaron@dbaron.org>

Test that we can usefully reparse computed values.

diff --git a/layout/style/test/test_value_computation.html b/layout/style/test/test_value_computation.html
--- a/layout/style/test/test_value_computation.html
+++ b/layout/style/test/test_value_computation.html
@@ -183,16 +183,37 @@ function test_value(property, val, is_in
        val_computed_n, initial_computed_n,
        "should not get initial value for '" + property + ":" + val + "' on elementn.");
     var swap = swap_when_frame(property, val);
     (xfail_value(property, val, is_initial, true) ? todo_isnot : (swap ? is : isnot))(
        val_computed_f, initial_computed_f,
        "should " + (swap ? "" : "not ") +
        "get initial value for '" + property + ":" + val + "' on elementf.");
   }
+
+  // Test idempotence of parse+compute+serialize
+  gRule2.style.removeProperty(property);
+  gRule2.style.setProperty(property, val_computed_n, "");
+  is(get_computed_value(getComputedStyle(gElementN, ""), property),
+     val_computed_n,
+     "parse+compute+serialize should be idempotent " +
+     "(using undisplayed value)");
+  is(get_computed_value(getComputedStyle(gElementF, ""), property),
+     val_computed_f,
+     "parse+compute+serialize should be idempotent-ish " +
+     "(crossing from display:none to not)");
+  if (val_computed_f != val_computed_n) {
+    gRule2.style.removeProperty(property);
+    gRule2.style.setProperty(property, val_computed_f, "");
+    is(get_computed_value(getComputedStyle(gElementF, ""), property),
+       val_computed_f,
+       "parse+compute+serialize should be idempotent " +
+       "(using displayed value)");
+  }
+
   if (is_initial)
     gRule1.style.removeProperty(property);
   gRule2.style.removeProperty(property);
 
   if ("prerequisites" in info) {
     var prereqs = info.prerequisites;
     for (var prereq in prereqs) {
       gRule1.style.removeProperty(prereq);
