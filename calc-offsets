From: L. David Baron <dbaron@dbaron.org>

Add support for calc() to the 'top', 'right', 'bottom', and 'left' properties.  (Bug 585715)

diff --git a/layout/generic/nsAbsoluteContainingBlock.cpp b/layout/generic/nsAbsoluteContainingBlock.cpp
--- a/layout/generic/nsAbsoluteContainingBlock.cpp
+++ b/layout/generic/nsAbsoluteContainingBlock.cpp
@@ -221,18 +221,19 @@ nsAbsoluteContainingBlock::Reflow(nsCont
 }
 
 static inline PRBool IsFixedPaddingSize(nsStyleUnit aUnit) {
   return aUnit == eStyleUnit_Coord;
 }
 static inline PRBool IsFixedMarginSize(nsStyleUnit aUnit) {
   return aUnit == eStyleUnit_Coord;
 }
-static inline PRBool IsFixedOffset(nsStyleUnit aUnit) {
-  return aUnit == eStyleUnit_Coord;
+static inline PRBool IsFixedOffset(const nsStyleCoord& aCoord) {
+  return aCoord.GetUnit() == eStyleUnit_Coord ||
+         (aCoord.IsCalcUnit() && !aCoord.CalcHasPercent());
 }
 
 PRBool
 nsAbsoluteContainingBlock::FrameDependsOnContainer(nsIFrame* f,
                                                    PRBool aCBWidthChanged,
                                                    PRBool aCBHeightChanged)
 {
   const nsStylePosition* pos = f->GetStylePosition();
@@ -283,22 +284,22 @@ nsAbsoluteContainingBlock::FrameDependsO
     }
     if (f->GetStyleVisibility()->mDirection == NS_STYLE_DIRECTION_RTL) {
       // Note that even if 'left' is a length, our position can
       // still depend on the containing block width, because if
       // 'right' is also a length we will discard 'left' and be
       // positioned relative to the containing block right edge.
       // 'left' length and 'right' auto is the only combination
       // we can be sure of.
-      if (!IsFixedOffset(pos->mOffset.GetLeftUnit()) ||
+      if (!IsFixedOffset(pos->mOffset.GetLeft()) ||
           pos->mOffset.GetRightUnit() != eStyleUnit_Auto) {
         return PR_TRUE;
       }
     } else {
-      if (!IsFixedOffset(pos->mOffset.GetLeftUnit())) {
+      if (!IsFixedOffset(pos->mOffset.GetLeft())) {
         return PR_TRUE;
       }
     }
   }
   if (aCBHeightChanged) {
     // See if f's height might have changed.
     // If border-top, border-bottom, padding-top, padding-bottom,
     // min-height, and max-height are all lengths or 'none',
@@ -316,17 +317,17 @@ nsAbsoluteContainingBlock::FrameDependsO
       return PR_TRUE;
     }
       
     // See if f's position might have changed.
     if (!IsFixedMarginSize(margin->mMargin.GetTopUnit()) ||
         !IsFixedMarginSize(margin->mMargin.GetBottomUnit())) {
       return PR_TRUE;
     }
-    if (!IsFixedOffset(pos->mOffset.GetTopUnit())) {
+    if (!IsFixedOffset(pos->mOffset.GetTop())) {
       return PR_TRUE;
     }
   }
   return PR_FALSE;
 }
 
 void
 nsAbsoluteContainingBlock::DestroyFrames(nsIFrame* aDelegatingFrame,
diff --git a/layout/generic/nsHTMLReflowState.cpp b/layout/generic/nsHTMLReflowState.cpp
--- a/layout/generic/nsHTMLReflowState.cpp
+++ b/layout/generic/nsHTMLReflowState.cpp
@@ -399,17 +399,17 @@ nsHTMLReflowState::InitResizeFlags(nsPre
      // FIXME: condition this on not-abspos?
      mStylePosition->mHeight.GetUnit() != eStyleUnit_Auto) ||
     (mStylePosition->MinHeightDependsOnContainer() &&
      // FIXME: condition this on not-abspos?
      mStylePosition->mMinHeight.GetUnit() != eStyleUnit_Auto) ||
     (mStylePosition->MaxHeightDependsOnContainer() &&
      // FIXME: condition this on not-abspos?
      mStylePosition->mMaxHeight.GetUnit() != eStyleUnit_Auto) ||
-    mStylePosition->mOffset.GetTopUnit() == eStyleUnit_Percent ||
+    mStylePosition->OffsetHasPercent(NS_SIDE_TOP) ||
     mStylePosition->mOffset.GetBottomUnit() != eStyleUnit_Auto ||
     frame->IsBoxFrame() ||
     (mStylePosition->mHeight.GetUnit() == eStyleUnit_Auto &&
      frame->GetIntrinsicSize().height.GetUnit() == eStyleUnit_Percent);
 
   if (mStyleText->mLineHeight.GetUnit() == eStyleUnit_Enumerated) {
     NS_ASSERTION(mStyleText->mLineHeight.GetIntValue() ==
                  NS_STYLE_LINE_HEIGHT_BLOCK_HEIGHT,
@@ -609,20 +609,20 @@ nsHTMLReflowState::ComputeRelativeOffset
   // and 'right' moves the boxes to the left. The computed values are always:
   // left=-right
   PRBool  leftIsAuto = eStyleUnit_Auto == mStylePosition->mOffset.GetLeftUnit();
   PRBool  rightIsAuto = eStyleUnit_Auto == mStylePosition->mOffset.GetRightUnit();
 
   // Check for percentage based values and an unconstrained containing
   // block width. Treat them like 'auto'
   if (NS_UNCONSTRAINEDSIZE == aContainingBlockWidth) {
-    if (eStyleUnit_Percent == mStylePosition->mOffset.GetLeftUnit()) {
+    if (mStylePosition->OffsetHasPercent(NS_SIDE_LEFT)) {
       leftIsAuto = PR_TRUE;
     }
-    if (eStyleUnit_Percent == mStylePosition->mOffset.GetRightUnit()) {
+    if (mStylePosition->OffsetHasPercent(NS_SIDE_RIGHT)) {
       rightIsAuto = PR_TRUE;
     }
   }
 
   // If neither 'left' not 'right' are auto, then we're over-constrained and
   // we ignore one of them
   if (!leftIsAuto && !rightIsAuto) {
     if (mCBReflowState &&
@@ -663,20 +663,20 @@ nsHTMLReflowState::ComputeRelativeOffset
   // move relatively positioned elements up and down. They also must be each 
   // other's negative
   PRBool  topIsAuto = eStyleUnit_Auto == mStylePosition->mOffset.GetTopUnit();
   PRBool  bottomIsAuto = eStyleUnit_Auto == mStylePosition->mOffset.GetBottomUnit();
 
   // Check for percentage based values and a containing block height that
   // depends on the content height. Treat them like 'auto'
   if (NS_AUTOHEIGHT == aContainingBlockHeight) {
-    if (eStyleUnit_Percent == mStylePosition->mOffset.GetTopUnit()) {
+    if (mStylePosition->OffsetHasPercent(NS_SIDE_TOP)) {
       topIsAuto = PR_TRUE;
     }
-    if (eStyleUnit_Percent == mStylePosition->mOffset.GetBottomUnit()) {
+    if (mStylePosition->OffsetHasPercent(NS_SIDE_BOTTOM)) {
       bottomIsAuto = PR_TRUE;
     }
   }
 
   // If neither is 'auto', 'bottom' is ignored
   if (!topIsAuto && !bottomIsAuto) {
     bottomIsAuto = PR_TRUE;
   }
diff --git a/layout/generic/nsLineLayout.cpp b/layout/generic/nsLineLayout.cpp
--- a/layout/generic/nsLineLayout.cpp
+++ b/layout/generic/nsLineLayout.cpp
@@ -683,18 +683,18 @@ IsPercentageAware(const nsIFrame* aFrame
   // Note that borders can't be aware of percentages
 
   const nsStylePosition* pos = aFrame->GetStylePosition();
 
   if ((pos->WidthDependsOnContainer() &&
        pos->mWidth.GetUnit() != eStyleUnit_Auto) ||
       pos->MaxWidthDependsOnContainer() ||
       pos->MinWidthDependsOnContainer() ||
-      eStyleUnit_Percent == pos->mOffset.GetRightUnit() ||
-      eStyleUnit_Percent == pos->mOffset.GetLeftUnit()) {
+      pos->OffsetHasPercent(NS_SIDE_RIGHT) ||
+      pos->OffsetHasPercent(NS_SIDE_LEFT)) {
     return PR_TRUE;
   }
 
   if (eStyleUnit_Auto == pos->mWidth.GetUnit()) {
     // We need to check for frames that shrink-wrap when they're auto
     // width.
     const nsStyleDisplay* disp = aFrame->GetStyleDisplay();
     if (disp->mDisplay == NS_STYLE_DISPLAY_INLINE_BLOCK ||
diff --git a/layout/reftests/css-calc/offsets-absolute-bottom-1.html b/layout/reftests/css-calc/offsets-absolute-bottom-1.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/css-calc/offsets-absolute-bottom-1.html
@@ -0,0 +1,24 @@
+<!DOCTYPE HTML>
+<title>Test for bottom:calc() on absolutely positioned elements</title>
+<style>
+body { margin: 0 }
+body > div { float: left; margin-top: -90px; height: 100px; margin-bottom: 90px; width: 3px; position: relative }
+div[style] { background: blue; position: absolute; height: 10px; width: 3px }
+div.space { height: 100px }
+</style>
+
+<!-- tests with a fixed-height container -->
+<div><div style="bottom: -moz-calc(-50px)"></div></div>
+<div><div style="bottom: -moz-calc(-50%)"></div></div>
+<div><div style="bottom: -moz-calc(-25px - 50%)"></div></div>
+<div><div style="bottom: -moz-calc(-150% / 2 + 30px)"></div></div>
+<div><div style="bottom: -moz-calc(-40px - 10% + 20% / 2)"></div></div>
+<div><div style="bottom: -moz-calc(-40px + 10%)"></div></div>
+
+<!-- tests with an auto-bottom container -->
+<div><div><div style="bottom: -moz-calc(-50px)"></div><div class="space"></div></div></div>
+<div><div><div style="bottom: -moz-calc(-50%)"></div><div class="space"></div></div></div>
+<div><div><div style="bottom: -moz-calc(-25px - 50%)"></div><div class="space"></div></div></div>
+<div><div><div style="bottom: -moz-calc(-150% / 2 + 30px)"></div><div class="space"></div></div></div>
+<div><div><div style="bottom: -moz-calc(-40px - 10% + 20% / 2)"></div><div class="space"></div></div></div>
+<div><div><div style="bottom: -moz-calc(-40px + 10%)"></div><div class="space"></div></div></div>
diff --git a/layout/reftests/css-calc/offsets-absolute-top-1-ref.html b/layout/reftests/css-calc/offsets-absolute-top-1-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/css-calc/offsets-absolute-top-1-ref.html
@@ -0,0 +1,23 @@
+<!DOCTYPE HTML>
+<title>Test for top:calc() on absolutely positioned elements</title>
+<style>
+body { margin: 0 }
+body > div { float: left; height: 100px; width: 3px; }
+div[style] { background: blue; position: relative; height: 10px; }
+</style>
+
+<!-- tests with a fixed-height container -->
+<div><div style="top: 50px"></div></div>
+<div><div style="top: 50px"></div></div>
+<div><div style="top: 75px"></div></div>
+<div><div style="top: 45px"></div></div>
+<div><div style="top: 40px"></div></div>
+<div><div style="top: 30px"></div></div>
+
+<!-- tests with an auto-top container -->
+<div><div style="top: 50px"></div></div>
+<div><div style="top: 50px"></div></div>
+<div><div style="top: 75px"></div></div>
+<div><div style="top: 45px"></div></div>
+<div><div style="top: 40px"></div></div>
+<div><div style="top: 30px"></div></div>
diff --git a/layout/reftests/css-calc/offsets-absolute-top-1.html b/layout/reftests/css-calc/offsets-absolute-top-1.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/css-calc/offsets-absolute-top-1.html
@@ -0,0 +1,24 @@
+<!DOCTYPE HTML>
+<title>Test for top:calc() on absolutely positioned elements</title>
+<style>
+body { margin: 0 }
+body > div { float: left; height: 100px; width: 3px; position: relative }
+div[style] { background: blue; position: absolute; height: 10px; width: 3px }
+div.space { height: 100px }
+</style>
+
+<!-- tests with a fixed-height container -->
+<div><div style="top: -moz-calc(50px)"></div></div>
+<div><div style="top: -moz-calc(50%)"></div></div>
+<div><div style="top: -moz-calc(25px + 50%)"></div></div>
+<div><div style="top: -moz-calc(150% / 2 - 30px)"></div></div>
+<div><div style="top: -moz-calc(40px + 10% - 20% / 2)"></div></div>
+<div><div style="top: -moz-calc(40px - 10%)"></div></div>
+
+<!-- tests with an auto-top container -->
+<div><div><div style="top: -moz-calc(50px)"></div><div class="space"></div></div></div>
+<div><div><div style="top: -moz-calc(50%)"></div><div class="space"></div></div></div>
+<div><div><div style="top: -moz-calc(25px + 50%)"></div><div class="space"></div></div></div>
+<div><div><div style="top: -moz-calc(150% / 2 - 30px)"></div><div class="space"></div></div></div>
+<div><div><div style="top: -moz-calc(40px + 10% - 20% / 2)"></div><div class="space"></div></div></div>
+<div><div><div style="top: -moz-calc(40px - 10%)"></div><div class="space"></div></div></div>
diff --git a/layout/reftests/css-calc/offsets-relative-bottom-1.html b/layout/reftests/css-calc/offsets-relative-bottom-1.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/css-calc/offsets-relative-bottom-1.html
@@ -0,0 +1,23 @@
+<!DOCTYPE HTML>
+<title>Test for bottom:calc() on relatively positioned elements</title>
+<style>
+body { margin: 0 }
+body > div { float: left; height: 100px; width: 3px; }
+div[style] { background: blue; position: relative; height: 10px; }
+</style>
+
+<!-- tests with a fixed-height container -->
+<div><div style="bottom: -moz-calc(-50px)"></div></div>
+<div><div style="bottom: -moz-calc(-50%)"></div></div>
+<div><div style="bottom: -moz-calc(-25px - 50%)"></div></div>
+<div><div style="bottom: -moz-calc(-150% / 2 + 30px)"></div></div>
+<div><div style="bottom: -moz-calc(-40px - 10% + 20% / 2)"></div></div>
+<div><div style="bottom: -moz-calc(-40px + 10%)"></div></div>
+
+<!-- tests with an auto-top container -->
+<div><div><div style="bottom: -moz-calc(-50px)"></div></div></div>
+<div><div><div style="bottom: -moz-calc(-50%)"></div></div></div>
+<div><div><div style="bottom: -moz-calc(-25px - 50%)"></div></div></div>
+<div><div><div style="bottom: -moz-calc(-150% / 2 + 30px)"></div></div></div>
+<div><div><div style="bottom: -moz-calc(-40px - 10% + 20% / 2)"></div></div></div>
+<div><div><div style="bottom: -moz-calc(-40px + 10%)"></div></div></div>
diff --git a/layout/reftests/css-calc/offsets-relative-top-1-ref.html b/layout/reftests/css-calc/offsets-relative-top-1-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/css-calc/offsets-relative-top-1-ref.html
@@ -0,0 +1,23 @@
+<!DOCTYPE HTML>
+<title>Test for top:calc() on relatively positioned elements</title>
+<style>
+body { margin: 0 }
+body > div { float: left; height: 100px; width: 3px; }
+div[style] { background: blue; position: relative; height: 10px; }
+</style>
+
+<!-- tests with a fixed-height container -->
+<div><div style="top: 50px"></div></div>
+<div><div style="top: 50px"></div></div>
+<div><div style="top: 75px"></div></div>
+<div><div style="top: 45px"></div></div>
+<div><div style="top: 40px"></div></div>
+<div><div style="top: 30px"></div></div>
+
+<!-- tests with an auto-top container -->
+<div><div style="top: 50px"></div></div>
+<div><div style="top: 0px"></div></div>
+<div><div style="top: 0px"></div></div>
+<div><div style="top: 0px"></div></div>
+<div><div style="top: 0px"></div></div>
+<div><div style="top: 0px"></div></div>
diff --git a/layout/reftests/css-calc/offsets-relative-top-1.html b/layout/reftests/css-calc/offsets-relative-top-1.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/css-calc/offsets-relative-top-1.html
@@ -0,0 +1,23 @@
+<!DOCTYPE HTML>
+<title>Test for top:calc() on relatively positioned elements</title>
+<style>
+body { margin: 0 }
+body > div { float: left; height: 100px; width: 3px; }
+div[style] { background: blue; position: relative; height: 10px; }
+</style>
+
+<!-- tests with a fixed-height container -->
+<div><div style="top: -moz-calc(50px)"></div></div>
+<div><div style="top: -moz-calc(50%)"></div></div>
+<div><div style="top: -moz-calc(25px + 50%)"></div></div>
+<div><div style="top: -moz-calc(150% / 2 - 30px)"></div></div>
+<div><div style="top: -moz-calc(40px + 10% - 20% / 2)"></div></div>
+<div><div style="top: -moz-calc(40px - 10%)"></div></div>
+
+<!-- tests with an auto-top container -->
+<div><div><div style="top: -moz-calc(50px)"></div></div></div>
+<div><div><div style="top: -moz-calc(50%)"></div></div></div>
+<div><div><div style="top: -moz-calc(25px + 50%)"></div></div></div>
+<div><div><div style="top: -moz-calc(150% / 2 - 30px)"></div></div></div>
+<div><div><div style="top: -moz-calc(40px + 10% - 20% / 2)"></div></div></div>
+<div><div><div style="top: -moz-calc(40px - 10%)"></div></div></div>
diff --git a/layout/reftests/css-calc/reftest.list b/layout/reftests/css-calc/reftest.list
--- a/layout/reftests/css-calc/reftest.list
+++ b/layout/reftests/css-calc/reftest.list
@@ -1,12 +1,16 @@
 == height-block-1.html height-block-1-ref.html
 == height-table-1.html height-table-1-ref.html
 == max-height-block-1.html max-height-block-1-ref.html
 == max-width-block-1.html width-block-1-ref.html
 == max-width-block-intrinsic-1.html max-width-block-intrinsic-1-ref.html
 == min-height-block-1.html height-block-1-ref.html
 == min-width-block-1.html width-block-1-ref.html
 == min-width-block-intrinsic-1.html min-width-block-intrinsic-1-ref.html
+== offsets-absolute-bottom-1.html offsets-absolute-top-1-ref.html
+== offsets-absolute-top-1.html offsets-absolute-top-1-ref.html
+== offsets-relative-bottom-1.html offsets-relative-top-1-ref.html
+== offsets-relative-top-1.html offsets-relative-top-1-ref.html
 == width-block-1.html width-block-1-ref.html
 == width-block-intrinsic-1.html width-block-intrinsic-1-ref.html
 == width-table-auto-1.html width-table-auto-1-ref.html
 == width-table-fixed-1.html width-table-fixed-1-ref.html
diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -5681,17 +5681,17 @@ CSSParserImpl::ParseSingleValueProperty(
   case eCSSProperty__moz_column_width:
     return ParseNonNegativeVariant(aValue, VARIANT_AHL | VARIANT_CALC, nsnull);
   case eCSSProperty__moz_column_gap:
     return ParseNonNegativeVariant(aValue, VARIANT_HL | VARIANT_NORMAL, nsnull);
   case eCSSProperty_bottom:
   case eCSSProperty_top:
   case eCSSProperty_left:
   case eCSSProperty_right:
-    return ParseVariant(aValue, VARIANT_AHLP, nsnull);
+    return ParseVariant(aValue, VARIANT_AHLP | VARIANT_CALC, nsnull);
   case eCSSProperty_box_align:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kBoxAlignKTable);
   case eCSSProperty_box_direction:
     return ParseVariant(aValue, VARIANT_HK,
                         nsCSSProps::kBoxDirectionKTable);
   case eCSSProperty_box_flex:
     return ParseNonNegativeVariant(aValue, VARIANT_HN, nsnull);
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -3626,17 +3626,18 @@ nsComputedDOMStyle::GetRelativeOffset(mo
   NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
 
   const nsStylePosition* positionData = GetStylePosition();
   PRInt32 sign = 1;
   nsStyleCoord coord = positionData->mOffset.Get(aSide);
 
   NS_ASSERTION(coord.GetUnit() == eStyleUnit_Coord ||
                coord.GetUnit() == eStyleUnit_Percent ||
-               coord.GetUnit() == eStyleUnit_Auto,
+               coord.GetUnit() == eStyleUnit_Auto ||
+               coord.IsCalcUnit(),
                "Unexpected unit");
 
   if (coord.GetUnit() == eStyleUnit_Auto) {
     coord = positionData->mOffset.Get(NS_OPPOSITE_SIDE(aSide));
     sign = -1;
   }
   PercentageBaseGetter baseGetter;
   if (aSide == NS_SIDE_LEFT || aSide == NS_SIDE_RIGHT) {
diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -5523,22 +5523,23 @@ nsRuleNode::ComputePositionData(void* aS
                                 const nsRuleDataStruct& aData,
                                 nsStyleContext* aContext,
                                 nsRuleNode* aHighestNode,
                                 const RuleDetail aRuleDetail,
                                 const PRBool aCanStoreInRuleTree)
 {
   COMPUTE_START_RESET(Position, (), pos, parentPos, Position, posData)
 
-  // box offsets: length, percent, auto, inherit
+  // box offsets: length, percent, calc, auto, inherit
   nsStyleCoord  coord;
   NS_FOR_CSS_SIDES(side) {
     nsStyleCoord parentCoord = parentPos->mOffset.Get(side);
     if (SetCoord(posData.mOffset.*(nsCSSRect::sides[side]),
-                 coord, parentCoord, SETCOORD_LPAH | SETCOORD_INITIAL_AUTO,
+                 coord, parentCoord,
+                 SETCOORD_LPAH | SETCOORD_INITIAL_AUTO | SETCOORD_STORE_CALC,
                  aContext, mPresContext, canStoreInRuleTree)) {
       pos->mOffset.Set(side, coord);
     }
   }
 
   SetCoord(posData.mWidth, pos->mWidth, parentPos->mWidth,
            SETCOORD_LPAEH | SETCOORD_INITIAL_AUTO | SETCOORD_STORE_CALC,
            aContext, mPresContext, canStoreInRuleTree);
diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -1060,39 +1060,53 @@ struct nsStylePosition {
   }
 
   nsChangeHint CalcDifference(const nsStylePosition& aOther) const;
 #ifdef DEBUG
   static nsChangeHint MaxDifference();
 #endif
   static PRBool ForceCompare() { return PR_TRUE; }
 
-  nsStyleSides  mOffset;                // [reset] coord, percent, auto
+  nsStyleSides  mOffset;                // [reset] coord, percent, calc, auto
   nsStyleCoord  mWidth;                 // [reset] coord, percent, enum, calc, auto
   nsStyleCoord  mMinWidth;              // [reset] coord, percent, enum, calc
   nsStyleCoord  mMaxWidth;              // [reset] coord, percent, enum, calc, none
   nsStyleCoord  mHeight;                // [reset] coord, percent, calc, auto
   nsStyleCoord  mMinHeight;             // [reset] coord, percent, calc
   nsStyleCoord  mMaxHeight;             // [reset] coord, percent, calc, none
   PRUint8       mBoxSizing;             // [reset] see nsStyleConsts.h
   nsStyleCoord  mZIndex;                // [reset] integer, auto
 
   PRBool WidthDependsOnContainer() const
     { return WidthCoordDependsOnContainer(mWidth); }
   PRBool MinWidthDependsOnContainer() const
     { return WidthCoordDependsOnContainer(mMinWidth); }
   PRBool MaxWidthDependsOnContainer() const
     { return WidthCoordDependsOnContainer(mMaxWidth); }
+
+  // Note that these functions count 'auto' as depending on the
+  // container since that's the case for absolutely positioned elements.
+  // However, some callers do not care about this case and should check
+  // for it, since it is the most common case.
+  // FIXME: We should probably change the assumption to be the other way
+  // around.
   PRBool HeightDependsOnContainer() const
     { return HeightCoordDependsOnContainer(mHeight); }
   PRBool MinHeightDependsOnContainer() const
     { return HeightCoordDependsOnContainer(mMinHeight); }
   PRBool MaxHeightDependsOnContainer() const
     { return HeightCoordDependsOnContainer(mMaxHeight); }
 
+  PRBool OffsetHasPercent(mozilla::css::Side aSide) const
+  {
+    const nsStyleCoord coord = mOffset.Get(aSide);
+    return coord.GetUnit() == eStyleUnit_Percent ||
+           (coord.IsCalcUnit() && coord.CalcHasPercent());
+  }
+
 private:
   static PRBool WidthCoordDependsOnContainer(const nsStyleCoord &aCoord);
   static PRBool HeightCoordDependsOnContainer(const nsStyleCoord &aCoord)
   {
     return aCoord.GetUnit() == eStyleUnit_Auto || // CSS 2.1, 10.6.4, item (5)
            aCoord.GetUnit() == eStyleUnit_Percent ||
            (aCoord.IsCalcUnit() && aCoord.CalcHasPercent());
   }
diff --git a/layout/style/test/property_database.js b/layout/style/test/property_database.js
--- a/layout/style/test/property_database.js
+++ b/layout/style/test/property_database.js
@@ -1336,17 +1336,24 @@ var gCSSProperties = {
 	"bottom": {
 		domProp: "bottom",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		/* FIXME: run tests with multiple prerequisites */
 		prerequisites: { "position": "relative" },
 		/* XXX 0 may or may not be equal to auto */
 		initial_values: [ "auto" ],
-		other_values: [ "32px", "-3em", "12%" ],
+		other_values: [ "32px", "-3em", "12%",
+			"-moz-calc(2px)",
+			"-moz-calc(50%)",
+			"-moz-calc(3*25px)",
+			"-moz-calc(25px*3)",
+			"-moz-calc(3*25px + 50%)",
+			"-moz-min(30%, 30em,200px, min(500px ,40em))",
+		],
 		invalid_values: []
 	},
 	"caption-side": {
 		domProp: "captionSide",
 		inherited: true,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "top" ],
 		other_values: [ "right", "left", "bottom", "top-outside", "bottom-outside" ],
@@ -1613,17 +1620,24 @@ var gCSSProperties = {
 	"left": {
 		domProp: "left",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		/* FIXME: run tests with multiple prerequisites */
 		prerequisites: { "position": "relative" },
 		/* XXX 0 may or may not be equal to auto */
 		initial_values: [ "auto" ],
-		other_values: [ "32px", "-3em", "12%" ],
+		other_values: [ "32px", "-3em", "12%",
+			"-moz-calc(2px)",
+			"-moz-calc(50%)",
+			"-moz-calc(3*25px)",
+			"-moz-calc(25px*3)",
+			"-moz-calc(3*25px + 50%)",
+			"-moz-min(30%, 30em,200px, min(500px ,40em))",
+		],
 		invalid_values: []
 	},
 	"letter-spacing": {
 		domProp: "letterSpacing",
 		inherited: true,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "normal" ],
 		other_values: [ "0", "0px", "1em", "2px", "-3px",
@@ -2088,17 +2102,24 @@ var gCSSProperties = {
 	"right": {
 		domProp: "right",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		/* FIXME: run tests with multiple prerequisites */
 		prerequisites: { "position": "relative" },
 		/* XXX 0 may or may not be equal to auto */
 		initial_values: [ "auto" ],
-		other_values: [ "32px", "-3em", "12%" ],
+		other_values: [ "32px", "-3em", "12%",
+			"-moz-calc(2px)",
+			"-moz-calc(50%)",
+			"-moz-calc(3*25px)",
+			"-moz-calc(25px*3)",
+			"-moz-calc(3*25px + 50%)",
+			"-moz-min(30%, 30em,200px, min(500px ,40em))",
+		],
 		invalid_values: []
 	},
 	"size": {
 		/* XXX not a real property; applies only to page context */
 		domProp: "size",
 		inherited: false,
 		backend_only: true,
 		type: CSS_TYPE_LONGHAND,
@@ -2230,17 +2251,24 @@ var gCSSProperties = {
 	"top": {
 		domProp: "top",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		/* FIXME: run tests with multiple prerequisites */
 		prerequisites: { "position": "relative" },
 		/* XXX 0 may or may not be equal to auto */
 		initial_values: [ "auto" ],
-		other_values: [ "32px", "-3em", "12%" ],
+		other_values: [ "32px", "-3em", "12%",
+			"-moz-calc(2px)",
+			"-moz-calc(50%)",
+			"-moz-calc(3*25px)",
+			"-moz-calc(25px*3)",
+			"-moz-calc(3*25px + 50%)",
+			"-moz-min(30%, 30em,200px, min(500px ,40em))",
+		],
 		invalid_values: []
 	},
 	"-moz-transition": {
 		domProp: "MozTransition",
 		inherited: false,
 		type: CSS_TYPE_TRUE_SHORTHAND,
 		subproperties: [ "-moz-transition-property", "-moz-transition-duration", "-moz-transition-timing-function", "-moz-transition-delay" ],
 		initial_values: [ "all 0s ease 0s" ],
