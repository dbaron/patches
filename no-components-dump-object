From: L. David Baron <dbaron@dbaron.org>

Dump information about the object for the no-Components-in-scope warning.

diff --git a/js/src/xpconnect/src/xpcwrappednativescope.cpp b/js/src/xpconnect/src/xpcwrappednativescope.cpp
--- a/js/src/xpconnect/src/xpcwrappednativescope.cpp
+++ b/js/src/xpconnect/src/xpcwrappednativescope.cpp
@@ -37,16 +37,17 @@
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 /* Class used to manage the wrapped native objects within a JS scope. */
 
 #include "xpcprivate.h"
 #include "XPCWrapper.h"
+#include "jsproxy.h"
 
 /***************************************************************************/
 
 #ifdef XPC_TRACK_SCOPE_STATS
 static int DEBUG_TotalScopeCount;
 static int DEBUG_TotalLiveScopeCount;
 static int DEBUG_TotalMaxScopeCount;
 static int DEBUG_TotalScopeTraversalCount;
@@ -751,16 +752,17 @@ GetScopeOfObject(JSObject* obj)
 
     // obj is one of our nsXPConnectWrappedNative objects.
     return ((XPCWrappedNative*)supports)->GetScope();
 }
 
 
 #ifdef DEBUG
 void DEBUG_CheckForComponentsInScope(JSContext* cx, JSObject* obj,
+                                     JSObject* startingObj,
                                      JSBool OKIfNotInitialized,
                                      XPCJSRuntime* runtime)
 {
     if(OKIfNotInitialized)
         return;
 
     if(!(JS_GetOptions(cx) & JSOPTION_PRIVATE_IS_NSISUPPORTS))
         return;
@@ -772,20 +774,31 @@ void DEBUG_CheckForComponentsInScope(JSC
 
     // This is pretty much always bad. It usually means that native code is
     // making a callback to an interface implemented in JavaScript, but the
     // document where the JS object was created has already been cleared and the
     // global properties of that document's window are *gone*. Generally this
     // indicates a problem that should be addressed in the design and use of the
     // callback code.
     NS_ERROR("XPConnect is being called on a scope without a 'Components' property!  (stack follows)");
+    printf("The current JS stack is:\n");
     js_DumpStackFrame(cx);
+
+    printf("And the object whose scope lacks a 'Components' property is:\n");
+    js_DumpObject(startingObj);
+    if (startingObj->isProxy()) {
+        JSObject *innerObj = startingObj->getProxyPrivate().toObjectOrNull();
+        if (innerObj) {
+            printf("which is a proxy for:\n");
+            js_DumpObject(innerObj);
+        }
+    }
 }
 #else
-#define DEBUG_CheckForComponentsInScope(ccx, obj, OKIfNotInitialized, runtime) \
+#define DEBUG_CheckForComponentsInScope(ccx, obj, startingObj, OKIfNotInitialized, runtime) \
     ((void)0)
 #endif
 
 // static
 XPCWrappedNativeScope*
 XPCWrappedNativeScope::FindInJSObjectScope(JSContext* cx, JSObject* obj,
                                            JSBool OKIfNotInitialized,
                                            XPCJSRuntime* runtime)
@@ -802,16 +815,20 @@ XPCWrappedNativeScope::FindInJSObjectSco
     if(scope)
         return scope;
 
     // Else we'll have to look up the parent chain to get the scope
 
     JSAutoEnterCompartment ac;
     ac.enterAndIgnoreErrors(cx, obj);
 
+#ifdef DEBUG
+    JSObject *startingObj = obj;
+#endif
+
     obj = JS_GetGlobalForObject(cx, obj);
 
     if(!runtime)
     {
         runtime = nsXPConnect::GetRuntimeInstance();
         NS_ASSERTION(runtime, "This should never be null!");
     }
 
@@ -830,17 +847,18 @@ XPCWrappedNativeScope::FindInJSObjectSco
                 found = cur;
                 break;
             }
         }
     }
 
     if(found) {
         // This cannot be called within the map lock!
-        DEBUG_CheckForComponentsInScope(cx, obj, OKIfNotInitialized, runtime);
+        DEBUG_CheckForComponentsInScope(cx, obj, startingObj,
+                                        OKIfNotInitialized, runtime);
         return found;
     }
 
     // Failure to find the scope is only OK if the caller told us it might fail.
     // This flag would only be set in the call from
     // XPCWrappedNativeScope::GetNewOrUsed
     NS_ASSERTION(OKIfNotInitialized, "No scope has this global object!");
     return nsnull;
