From: L. David Baron <dbaron@dbaron.org>

Bug 898209 patch 14:  Add constructor flags to ElementRestyler's regular constructor so we can avoid manipulating mHintsHandled from the outside.  r=heycam

This is the first of two patches added on top to address review comments
on patch 2.

diff --git a/layout/base/RestyleManager.cpp b/layout/base/RestyleManager.cpp
--- a/layout/base/RestyleManager.cpp
+++ b/layout/base/RestyleManager.cpp
@@ -1933,17 +1933,18 @@ ElementRestyler::ElementRestyler(nsPresC
   , mDesiredA11yNotifications(eSendAllNotifications)
   , mKidsDesiredA11yNotifications(mDesiredA11yNotifications)
   , mOurA11yNotification(eDontNotify)
   , mVisibleKidsOfHiddenElement(aVisibleKidsOfHiddenElement)
 {
 }
 
 ElementRestyler::ElementRestyler(const ElementRestyler& aParentRestyler,
-                                 nsIFrame* aFrame)
+                                 nsIFrame* aFrame,
+                                 uint32_t aConstructorFlags)
   : mPresContext(aParentRestyler.mPresContext)
   , mFrame(aFrame)
   , mParentContent(aParentRestyler.mContent)
     // XXXldb Why does it make sense to use aParentContent?  (See
     // comment above assertion at start of ElementRestyler::Restyle.)
   , mContent(mFrame->GetContent() ? mFrame->GetContent() : mParentContent)
   , mChangeList(aParentRestyler.mChangeList)
   , mHintsHandled(NS_SubtractHint(aParentRestyler.mHintsHandled,
@@ -2558,31 +2559,32 @@ ElementRestyler::Restyle(nsRestyleHint a
               // the <body> would miss reflowing fixed-pos nodes that also need
               // reflow).  In the cases when the out-of-flow _is_ a geometric
               // descendant of a frame we already have a reflow hint for,
               // reflow coalescing should keep us from doing the work twice.
 
               // |nsFrame::GetParentStyleContextFrame| checks being out
               // of flow so that this works correctly.
               do {
-                ElementRestyler oofRestyler(*this, outOfFlowFrame);
+                ElementRestyler oofRestyler(*this, outOfFlowFrame,
+                                            FOR_OUT_OF_FLOW_CHILD);
                 oofRestyler.mHintsHandled =
                   NS_SubtractHint(oofRestyler.mHintsHandled,
                                   nsChangeHint_AllReflowHints);
                 oofRestyler.Restyle(childRestyleHint);
               } while ((outOfFlowFrame = outOfFlowFrame->GetNextContinuation()));
 
               // reresolve placeholder's context under the same parent
               // as the out-of-flow frame
-              ElementRestyler phRestyler(*this, child);
+              ElementRestyler phRestyler(*this, child, 0);
               phRestyler.Restyle(childRestyleHint);
             }
             else {  // regular child frame
               if (child != resolvedChild) {
-                ElementRestyler childRestyler(*this, child);
+                ElementRestyler childRestyler(*this, child, 0);
                 childRestyler.Restyle(childRestyleHint);
               }
             }
           }
         }
       }
       // XXX need to do overflow frames???
 
diff --git a/layout/base/RestyleManager.h b/layout/base/RestyleManager.h
--- a/layout/base/RestyleManager.h
+++ b/layout/base/RestyleManager.h
@@ -275,18 +275,22 @@ public:
                   nsIFrame* aFrame,
                   nsStyleChangeList* aChangeList,
                   nsChangeHint aHintsHandledByAncestors,
                   RestyleTracker& aRestyleTracker,
                   TreeMatchContext &aTreeMatchContext,
                   nsTArray<nsIContent*>& aVisibleKidsOfHiddenElement);
 
   // Construct for an element whose parent is being restyled.
+  enum ConstructorFlags {
+    FOR_OUT_OF_FLOW_CHILD = 1<<0
+  };
   ElementRestyler(const ElementRestyler& aParentRestyler,
-                  nsIFrame* aFrame);
+                  nsIFrame* aFrame,
+                  uint32_t aConstructorFlags);
 
   // Construct for a frame whose parent is being restyled, but whose
   // style context is the parent style context for its parent frame.
   // (This is only used for table frames, whose style contexts are used
   // as the parent style context for their outer table frame (table
   // wrapper frame).  We should probably try to get rid of this
   // exception and have the inheritance go the other way.)
   enum ParentContextFromChildFrame { PARENT_CONTEXT_FROM_CHILD_FRAME };
