From: L. David Baron <dbaron@dbaron.org>

Make nsStyleAnimation extract -moz-column-rule-color correctly.  (Bug 147777)

diff --git a/layout/style/nsCSSPropList.h b/layout/style/nsCSSPropList.h
--- a/layout/style/nsCSSPropList.h
+++ b/layout/style/nsCSSPropList.h
@@ -1263,18 +1263,18 @@ CSS_PROP_COLUMN(
     -moz-column-rule-color,
     _moz_column_rule_color,
     MozColumnRuleColor,
     CSS_PROPERTY_IGNORED_WHEN_COLORS_DISABLED,
     Column,
     mColumnRuleColor,
     eCSSType_Value,
     nsnull,
-    offsetof(nsStyleColumn, mColumnRuleColor),
-    eStyleAnimType_Color)
+    CSS_PROP_NO_OFFSET,
+    eStyleAnimType_Custom)
 CSS_PROP_COLUMN(
     -moz-column-rule-style,
     _moz_column_rule_style,
     MozColumnRuleStyle,
     0,
     Column,
     mColumnRuleStyle,
     eCSSType_Value,
diff --git a/layout/style/nsStyleAnimation.cpp b/layout/style/nsStyleAnimation.cpp
--- a/layout/style/nsStyleAnimation.cpp
+++ b/layout/style/nsStyleAnimation.cpp
@@ -1605,16 +1605,29 @@ nsStyleAnimation::ExtractComputedValue(n
         #else
           if (!styleOutline->GetOutlineColor(color))
             color = aStyleContext->GetStyleColor()->mColor;
         #endif
           aComputedValue.SetColorValue(color);
           break;
         }
 
+        case eCSSProperty__moz_column_rule_color: {
+          const nsStyleColumn *styleColumn =
+            static_cast<const nsStyleColumn*>(styleStruct);
+          nscolor color;
+          if (styleColumn->mColumnRuleColorIsForeground) {
+            color = aStyleContext->GetStyleColor()->mColor;
+          } else {
+            color = styleColumn->mColumnRuleColor;
+          }
+          aComputedValue.SetColorValue(color);
+          break;
+        }
+
         case eCSSProperty__moz_column_count: {
           const nsStyleColumn *styleColumn =
             static_cast<const nsStyleColumn*>(styleStruct);
           if (styleColumn->mColumnCount == NS_STYLE_COLUMN_COUNT_AUTO) {
             aComputedValue.SetAutoValue();
           } else {
             aComputedValue.SetIntValue(styleColumn->mColumnCount,
                                        eUnit_Integer);
diff --git a/layout/style/test/test_transitions_events.html b/layout/style/test/test_transitions_events.html
--- a/layout/style/test/test_transitions_events.html
+++ b/layout/style/test/test_transitions_events.html
@@ -15,16 +15,17 @@ https://bugzilla.mozilla.org/show_bug.cg
 
 #one { -moz-transition-duration: 500ms; -moz-transition-property: all; }
 #two { -moz-transition: margin-left 1s; }
 #three { -moz-transition: margin 0.5s 0.25s; }
 
 #four, #five, #six, #seven::before, #seven::after {
   -moz-transition: 500ms color;
   border-color: black; /* don't derive from color */
+  -moz-column-rule-color: black; /* don't derive from color */
 }
 
 #four {
   /* give the reversing transition a long duration; the reversing will
      still be quick */
   -moz-transition-duration: 30s;
   -moz-transition-timing-function: cubic-bezier(0, 1, 1, 0);
 }
@@ -64,16 +65,17 @@ function $(id) { return document.getElem
 function cs(id) { return getComputedStyle($(id), ""); }
 
 var got_one_root = false;
 var got_one_target = false;
 var got_one_target_bordertop = false;
 var got_one_target_borderright = false;
 var got_one_target_borderbottom = false;
 var got_one_target_borderleft = false;
+var got_one_target_columnrule = false;
 var got_two_target = false;
 var got_three_top = false;
 var got_three_right = false;
 var got_three_bottom = false;
 var got_three_left = false;
 var got_four_root = false;
 var got_body = false;
 
@@ -118,49 +120,59 @@ document.documentElement.addEventListene
          " propertyName='" + event.propertyName + "'");
     }
   }, false);
 
 $("one").addEventListener("transitionend",
   function(event) {
     switch (event.propertyName) {
       case "color":
-        ok(!got_one_target, "transitionend on one on target");
+        ok(!got_one_target,
+           "transitionend on one on target (color)");
         got_one_target = true;
         event.stopPropagation();
         break;
       case "border-top-color":
-        ok(!got_one_target_bordertop, "transitionend on one on target");
+        ok(!got_one_target_bordertop,
+           "transitionend on one on target (border-top-color)");
         got_one_target_bordertop = true;
         event.stopPropagation();
         break;
       case "border-right-color":
-        ok(!got_one_target_borderright, "transitionend on one on target");
+        ok(!got_one_target_borderright,
+           "transitionend on one on target (border-right-color)");
         got_one_target_borderright = true;
         // Let this event through to body
         break;
       case "border-bottom-color":
-        ok(!got_one_target_borderbottom, "transitionend on one on target");
+        ok(!got_one_target_borderbottom,
+           "transitionend on one on target (border-bottom-color)");
         got_one_target_borderbottom = true;
         event.stopPropagation();
         break;
       case "border-left-color":
-        ok(!got_one_target_borderleft, "transitionend on one on target");
+        ok(!got_one_target_borderleft,
+           "transitionend on one on target (border-left-color)");
         got_one_target_borderleft = true;
         event.stopPropagation();
         break;
+      case "-moz-column-rule-color":
+        ok(!got_one_target_columnrule,
+           "transitionend on one on target (-moz-column-rule-color)");
+        got_one_target_columnrule = true;
+        event.stopPropagation();
+        break;
       default:
         ok(false, "unexpected property name " + event.propertyName +
                   " for transitionend on one on target");
     }
     is(event.elapsedTime, 0.5,
        "elapsedTime for transitionend on one");
     is(cs("one").getPropertyValue(event.propertyName), "rgb(0, 255, 0)",
        "computed style of " + event.propertyName + " for transitionend on one");
-    got_one_target = true;
     finished_test();
   }, false);
 
 started_test();
 started_test();
 started_test();
 started_test();
 started_test();
