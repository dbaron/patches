Check consistency before returning 'border' shorthand.  (Bug 376075)  r+sr=bzbarsky

diff --git a/layout/style/nsCSSDeclaration.cpp b/layout/style/nsCSSDeclaration.cpp
--- a/layout/style/nsCSSDeclaration.cpp
+++ b/layout/style/nsCSSDeclaration.cpp
@@ -617,16 +617,17 @@ nsCSSDeclaration::GetValue(nsCSSProperty
     return NS_OK;
   }
   if (initialCount != 0 || inheritCount != 0) {
     // Case (2): partially initial or inherit.
     return NS_OK;
   }
 
   // XXXldb Can we share shorthand logic with ToString?
+  nsCSSCompressedDataBlock *data = importantCount ? mImportantData : mData;
   switch (aProperty) {
     case eCSSProperty_margin: 
     case eCSSProperty_padding: 
     case eCSSProperty_border_color: 
     case eCSSProperty_border_style: 
     case eCSSProperty_border_width: {
       const nsCSSProperty* subprops =
         nsCSSProps::SubpropertyEntryFor(aProperty);
@@ -650,18 +651,16 @@ nsCSSDeclaration::GetValue(nsCSSProperty
     case eCSSProperty__moz_outline_radius: {
       const nsCSSProperty* subprops =
         nsCSSProps::SubpropertyEntryFor(aProperty);
       NS_ASSERTION(nsCSSProps::kTypeTable[subprops[0]] == eCSSType_ValuePair &&
                    nsCSSProps::kTypeTable[subprops[1]] == eCSSType_ValuePair &&
                    nsCSSProps::kTypeTable[subprops[2]] == eCSSType_ValuePair &&
                    nsCSSProps::kTypeTable[subprops[3]] == eCSSType_ValuePair,
                    "type mismatch");
-      nsCSSCompressedDataBlock *data = GetValueIsImportant(aProperty)
-                                     ? mImportantData : mData;
       const nsCSSValuePair* vals[4] = {
         static_cast<const nsCSSValuePair*>(data->StorageFor(subprops[0])),
         static_cast<const nsCSSValuePair*>(data->StorageFor(subprops[1])),
         static_cast<const nsCSSValuePair*>(data->StorageFor(subprops[2])),
         static_cast<const nsCSSValuePair*>(data->StorageFor(subprops[3]))
       };
 
       AppendCSSValueToString(aProperty, vals[0]->mXValue, aValue);
@@ -684,19 +683,44 @@ nsCSSDeclaration::GetValue(nsCSSProperty
         AppendCSSValueToString(aProperty, vals[1]->mYValue, aValue);
         aValue.Append(PRUnichar(' '));
         AppendCSSValueToString(aProperty, vals[2]->mYValue, aValue);
         aValue.Append(PRUnichar(' '));
         AppendCSSValueToString(aProperty, vals[3]->mYValue, aValue);
       }
       break;
     }
-    case eCSSProperty_border:
-      // XXX More consistency checking needed before falling through.
+    case eCSSProperty_border: {
+      const nsCSSProperty* subproptables[3] = {
+        nsCSSProps::SubpropertyEntryFor(eCSSProperty_border_color),
+        nsCSSProps::SubpropertyEntryFor(eCSSProperty_border_style),
+        nsCSSProps::SubpropertyEntryFor(eCSSProperty_border_width)
+      };
+      PRBool match = PR_TRUE;
+      for (const nsCSSProperty** subprops = subproptables,
+               **subprops_end = subproptables + NS_ARRAY_LENGTH(subproptables);
+           subprops < subprops_end; ++subprops) {
+        // Check only the first four subprops in each table, since the
+        // others are extras for dimensional box properties.
+        const nsCSSValue *firstSide =
+          static_cast<const nsCSSValue*>(data->StorageFor((*subprops)[0]));
+        for (PRInt32 side = 1; side < 4; ++side) {
+          const nsCSSValue *otherSide =
+            static_cast<const nsCSSValue*>(data->StorageFor((*subprops)[side]));
+          if (*firstSide != *otherSide)
+            match = PR_FALSE;
+        }
+      }
+      if (!match) {
+        // We can't express what we have in the border shorthand
+        break;
+      }
+      // tweak aProperty and fall through
       aProperty = eCSSProperty_border_top;
+    }
     case eCSSProperty_border_top:
     case eCSSProperty_border_right:
     case eCSSProperty_border_bottom:
     case eCSSProperty_border_left:
     case eCSSProperty_border_start:
     case eCSSProperty_border_end:
     case eCSSProperty__moz_column_rule:
     case eCSSProperty_outline: {
diff --git a/layout/style/test/Makefile.in b/layout/style/test/Makefile.in
--- a/layout/style/test/Makefile.in
+++ b/layout/style/test/Makefile.in
@@ -112,16 +112,17 @@ _TEST_FILES =	test_acid3_test46.html \
 		test_media_queries_dynamic_xbl.html \
 		test_namespace_rule.html \
 		test_of_type_selectors.xhtml \
 		test_parse_rule.html \
 		test_property_database.html \
 		test_property_syntax_errors.html \
 		test_selectors.html \
 		test_selectors_on_anonymous_content.html \
+		test_shorthand_property_getters.html \
 		test_style_struct_copy_constructors.html \
 		test_value_computation.html \
 		test_value_storage.html \
 		test_visited_pref.html \
 		css_properties.js \
 		property_database.js \
 		unstyled.xml \
 		unstyled.css \
diff --git a/layout/style/test/test_shorthand_property_getters.html b/layout/style/test/test_shorthand_property_getters.html
new file mode 100644
--- /dev/null
+++ b/layout/style/test/test_shorthand_property_getters.html
@@ -0,0 +1,49 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+https://bugzilla.mozilla.org/show_bug.cgi?id=376075
+-->
+<head>
+  <title>Test for Bug 376075</title>
+  <script type="application/javascript" src="/MochiKit/MochiKit.js"></script>
+  <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
+</head>
+<body>
+<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=376075">Mozilla Bug 376075</a>
+<p id="display"></p>
+<div id="content" style="display: none">
+  
+</div>
+<pre id="test">
+<script type="application/javascript">
+
+/** Test for Bug 376075 **/
+
+var e = document.getElementById("display");
+
+// Test that we only serialize the 'border' shorthand when appropriate.
+e.setAttribute("style", "border-left: medium solid blue; border-right: medium solid blue; border-top: medium blue solid; border-bottom: blue medium solid");
+isnot(e.style.border, "", "should be able to serialize border");
+e.setAttribute("style", "border-left: medium solid blue; border-right: medium solid blue; border-top: medium blue solid; border-bottom: green medium solid");
+is(e.style.border, "", "should not be able to serialize border");
+e.setAttribute("style", "border-width: 3px 3px 3px 3px; border-style: solid; border-color: green");
+isnot(e.style.border, "", "should be able to serialize border");
+e.setAttribute("style", "border-width: 3px 3px 3px 3px; border-style: solid; border-color: green blue blue blue");
+is(e.style.border, "", "should not be able to serialize border");
+e.setAttribute("style", "border-width: 3px 3px 3px 3px; border-style: solid; border-color: blue green blue blue");
+is(e.style.border, "", "should not be able to serialize border");
+e.setAttribute("style", "border-width: 3px 3px 3px 3px; border-style: solid; border-color: blue blue green blue");
+is(e.style.border, "", "should not be able to serialize border");
+e.setAttribute("style", "border-width: 3px 3px 3px 3px; border-style: solid; border-color: blue blue blue green");
+is(e.style.border, "", "should not be able to serialize border");
+e.setAttribute("style", "border-width: 3px 2px 3px 3px; border-style: solid; border-color: green");
+is(e.style.border, "", "should not be able to serialize border");
+e.setAttribute("style", "border-width: 3px 3px 3px 3px; border-style: solid dashed; border-color: green");
+is(e.style.border, "", "should not be able to serialize border");
+
+
+</script>
+</pre>
+</body>
+</html>
