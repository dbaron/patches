From: L. David Baron <dbaron@dbaron.org>

Switch calc() to saturating operations on nscoord.  (Bug 363249)

diff --git a/layout/style/CSSCalc.h b/layout/style/CSSCalc.h
--- a/layout/style/CSSCalc.h
+++ b/layout/style/CSSCalc.h
@@ -138,20 +138,65 @@ ComputeCalc(const nsCSSValue& aValue, Ca
   }
 }
 
 /**
  * Basic*CalcOps provide a partial implementation of the CalcOps
  * template parameter to ComputeCalc, for those callers whose merging
  * just consists of mathematics (rather than tree construction).
  */
-template <typename T>
-struct BasicCalcOpsAdditive
+
+struct BasicCoordCalcOps
 {
-  typedef T result_type;
+  typedef nscoord result_type;
+
+  result_type
+  MergeAdditive(nsCSSUnit aCalcFunction,
+                result_type aValue1, result_type aValue2)
+  {
+    if (aCalcFunction == eCSSUnit_Calc_Plus) {
+      return NSCoordSaturatingAdd(aValue1, aValue2);
+    }
+    if (aCalcFunction == eCSSUnit_Calc_Minus) {
+      return NSCoordSaturatingSubtract(aValue1, aValue2, 0);
+    }
+    if (aCalcFunction == eCSSUnit_Calc_Minimum) {
+      return NS_MIN(aValue1, aValue2);
+    }
+    NS_ABORT_IF_FALSE(aCalcFunction == eCSSUnit_Calc_Maximum,
+                      "unexpected unit");
+    return NS_MAX(aValue1, aValue2);
+  }
+
+  result_type
+  MergeMultiplicativeL(nsCSSUnit aCalcFunction,
+                       float aValue1, result_type aValue2)
+  {
+    NS_ABORT_IF_FALSE(aCalcFunction == eCSSUnit_Calc_Times_L,
+                      "unexpected unit");
+    return NSCoordSaturatingMultiply(aValue2, aValue1);
+  }
+
+  result_type
+  MergeMultiplicativeR(nsCSSUnit aCalcFunction,
+                       result_type aValue1, float aValue2)
+  {
+    NS_ABORT_IF_FALSE(aCalcFunction == eCSSUnit_Calc_Times_R ||
+                      aCalcFunction == eCSSUnit_Calc_Divided,
+                      "unexpected unit");
+    if (aCalcFunction == eCSSUnit_Calc_Divided) {
+      aValue2 = 1.0f / aValue2;
+    }
+    return NSCoordSaturatingMultiply(aValue1, aValue2);
+  }
+};
+
+struct BasicFloatCalcOps
+{
+  typedef float result_type;
 
   result_type
   MergeAdditive(nsCSSUnit aCalcFunction,
                 result_type aValue1, result_type aValue2)
   {
     if (aCalcFunction == eCSSUnit_Calc_Plus) {
       return aValue1 + aValue2;
     }
@@ -160,44 +205,17 @@ struct BasicCalcOpsAdditive
     }
     if (aCalcFunction == eCSSUnit_Calc_Minimum) {
       return NS_MIN(aValue1, aValue2);
     }
     NS_ABORT_IF_FALSE(aCalcFunction == eCSSUnit_Calc_Maximum,
                       "unexpected unit");
     return NS_MAX(aValue1, aValue2);
   }
-};
 
-struct BasicCoordCalcOps : public BasicCalcOpsAdditive<nscoord>
-{
-  result_type
-  MergeMultiplicativeL(nsCSSUnit aCalcFunction,
-                       float aValue1, result_type aValue2)
-  {
-    NS_ABORT_IF_FALSE(aCalcFunction == eCSSUnit_Calc_Times_L,
-                      "unexpected unit");
-    return NSToCoordRound(aValue1 * aValue2);
-  }
-
-  result_type
-  MergeMultiplicativeR(nsCSSUnit aCalcFunction,
-                       result_type aValue1, float aValue2)
-  {
-    if (aCalcFunction == eCSSUnit_Calc_Times_R) {
-      return NSToCoordRound(aValue1 * aValue2);
-    }
-    NS_ABORT_IF_FALSE(aCalcFunction == eCSSUnit_Calc_Divided,
-                      "unexpected unit");
-    return NSToCoordRound(aValue1 / aValue2);
-  }
-};
-
-struct BasicFloatCalcOps : public BasicCalcOpsAdditive<float>
-{
   result_type
   MergeMultiplicativeL(nsCSSUnit aCalcFunction,
                        float aValue1, result_type aValue2)
   {
     NS_ABORT_IF_FALSE(aCalcFunction == eCSSUnit_Calc_Times_L,
                       "unexpected unit");
     return aValue1 * aValue2;
   }
