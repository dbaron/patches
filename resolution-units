From: L. David Baron <dbaron@dbaron.org>

Change our interpretation of resolution units in CSS to match updates to the spec:  i.e., device pixels per CSS inch (instead of device pixels per physical inch).  (Bug 771390)  r=bzbarsky

Given that this makes GetResolution work like GetDevicePixelRatio, I
believe this should also fix bug 662061 (on resolution's behavior when
zooming)?

diff --git a/layout/style/nsMediaFeatures.cpp b/layout/style/nsMediaFeatures.cpp
--- a/layout/style/nsMediaFeatures.cpp
+++ b/layout/style/nsMediaFeatures.cpp
@@ -243,19 +243,20 @@ GetMonochrome(nsPresContext* aPresContex
     aResult.SetIntValue(0, eCSSUnit_Integer);
     return NS_OK;
 }
 
 static nsresult
 GetResolution(nsPresContext* aPresContext, const nsMediaFeature*,
               nsCSSValue& aResult)
 {
-    // Resolution values are in device pixels, not CSS pixels.
-    nsDeviceContext *dx = GetDeviceContextFor(aPresContext);
-    float dpi = float(dx->AppUnitsPerPhysicalInch()) / float(dx->AppUnitsPerDevPixel());
+    // Resolution measures device pixels per CSS (inch/cm/pixel).  We
+    // return it in device pixels per CSS inches.
+    float dpi = float(nsPresContext::AppUnitsPerCSSInch()) /
+                float(aPresContext->AppUnitsPerDevPixel());
     aResult.SetFloatValue(dpi, eCSSUnit_Inch);
     return NS_OK;
 }
 
 static nsresult
 GetScan(nsPresContext* aPresContext, const nsMediaFeature*,
         nsCSSValue& aResult)
 {
diff --git a/layout/style/test/test_media_queries.html b/layout/style/test/test_media_queries.html
--- a/layout/style/test/test_media_queries.html
+++ b/layout/style/test/test_media_queries.html
@@ -478,23 +478,25 @@ function run() {
     }
   } while (!query_applies("(max-resolution: " + resolution + "dpi)"));
 
   // resolution should now be Math.ceil() of the actual resolution.
   var dpi_high;
   var dpi_low = resolution - 1;
   if (query_applies("(min-resolution: " + resolution + "dpi)")) {
     // It's exact!
+    is(resolution % 96, 0, "resolution should be a multiple of 96dpi");
     should_apply("(resolution: " + resolution + "dpi)");
     should_not_apply("(resolution: " + (resolution + 1) + "dpi)");
     should_not_apply("(resolution: " + (resolution - 1) + "dpi)");
     dpi_high = resolution + 1;
   } else {
 	// We have no way to test resolution applying since it need not be
 	// an integer.
+    ok(false, "resolution should be a multiple of 96dpi");
     should_not_apply("(resolution: " + resolution + "dpi)");
     should_not_apply("(resolution: " + (resolution - 1) + "dpi)");
     dpi_high = resolution;
   }
 
   should_apply("(min-resolution: " + dpi_low + "dpi)");
   should_not_apply("not all and (min-resolution: " + dpi_low + "dpi)");
   should_apply("not all and (min-resolution: " + dpi_high + "dpi)");
