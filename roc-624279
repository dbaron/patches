From: Robert O'Callahan <robert@ocallahan.org>

Bug 624279. Setup print mode for non-reftest-wait documents as soon as 'load' fires. This ensures that the initial reflow will happen in print mode. r=dbaron

This patch also ensures that the root element at the time of 'load' firing
is the element we always look for test metadata on --- even if the document
is removed from the window, or the root element is removed or replaced by
another root element, etc.

diff --git a/layout/tools/reftest/reftest.js b/layout/tools/reftest/reftest.js
--- a/layout/tools/reftest/reftest.js
+++ b/layout/tools/reftest/reftest.js
@@ -964,19 +964,17 @@ const STATE_WAITING_TO_FIRE_INVALIDATE_E
 // When reftest-wait has been removed from the root element, we can move to the
 // next state.
 const STATE_WAITING_FOR_REFTEST_WAIT_REMOVAL = 1;
 // When all MozAfterPaint events and all explicit paint waits are flushed, we're
 // done and can move to the COMPLETED state.
 const STATE_WAITING_TO_FINISH = 2;
 const STATE_COMPLETED = 3;
 
-function WaitForTestEnd() {
-    var currentDoc = gBrowser.contentDocument;
-    var contentRootElement = currentDoc ? currentDoc.documentElement : null;
+function WaitForTestEnd(contentRootElement) {
     var stopAfterPaintReceived = false;
     var state = STATE_WAITING_TO_FIRE_INVALIDATE_EVENT;
 
     function FlushRendering() {
         var anyPendingPaintsGeneratedInDescendants = false;
 
         function flushWindow(win) {
             var utils = win.QueryInterface(CI.nsIInterfaceRequestor)
@@ -1171,46 +1169,49 @@ function OnDocumentLoad(event)
     if (currentDoc.location.href != gCurrentURL) {
         LogInfo("OnDocumentLoad fired for previous document");
         // Ignore load events for previous documents.
         return;
     }
 
     var contentRootElement = currentDoc ? currentDoc.documentElement : null;
     setupZoom(contentRootElement);
+    var inPrintMode = false;
 
     function AfterOnLoadScripts() {
-        if (doPrintMode(contentRootElement)) {
-            LogInfo("AfterOnLoadScripts setting up print mode");
-            setupPrintMode();
-        }
-
         // Take a snapshot now. We need to do this before we check whether
         // we should wait, since this might trigger dispatching of
         // MozPaintWait events and make shouldWaitForExplicitPaintWaiters() true
         // below.
         InitCurrentCanvasWithSnapshot();
 
-        if (shouldWaitForExplicitPaintWaiters()) {
+        if (shouldWaitForExplicitPaintWaiters() ||
+            (!inPrintMode && doPrintMode(contentRootElement))) {
             LogInfo("AfterOnLoadScripts belatedly entering WaitForTestEnd");
             // Go into reftest-wait mode belatedly.
-            WaitForTestEnd();
+            WaitForTestEnd(contentRootElement);
         } else {
             RecordResult();
         }
     }
 
     if (shouldWaitForReftestWaitRemoval(contentRootElement) ||
         shouldWaitForExplicitPaintWaiters()) {
         // Go into reftest-wait mode immediately after painting has been
         // unsuppressed, after the onload event has finished dispatching.
         gFailureReason = "timed out waiting for test to complete (trying to get into WaitForTestEnd)";
         LogInfo("OnDocumentLoad triggering WaitForTestEnd");
-        setTimeout(WaitForTestEnd, 0);
+        setTimeout(WaitForTestEnd, 0, contentRootElement);
     } else {
+        if (doPrintMode(contentRootElement)) {
+            LogInfo("OnDocumentLoad setting up print mode");
+            setupPrintMode();
+            inPrintMode = true;
+        }
+
         // Since we can't use a bubbling-phase load listener from chrome,
         // this is a capturing phase listener.  So do setTimeout twice, the
         // first to get us after the onload has fired in the content, and
         // the second to get us after any setTimeout(foo, 0) in the content.
         gFailureReason = "timed out waiting for test to complete (waiting for onload scripts to complete)";
         LogInfo("OnDocumentLoad triggering AfterOnLoadScripts");
         setTimeout(setTimeout, 0, AfterOnLoadScripts, 0);
     }
