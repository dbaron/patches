From: L. David Baron <dbaron@dbaron.org>

Instrument pres shell arena #ifdef NS_TRACE_MALLOC.

diff --git a/layout/base/Makefile.in b/layout/base/Makefile.in
--- a/layout/base/Makefile.in
+++ b/layout/base/Makefile.in
@@ -78,6 +78,7 @@ REQUIRES	= xpcom \
 		  shistory \
 		  caps \
 		  thebes \
+		  tracemalloc \
 		  $(NULL)
 
 ifdef ACCESSIBILITY
diff --git a/layout/base/PresShell.cpp b/layout/base/PresShell.cpp
--- a/layout/base/PresShell.cpp
+++ b/layout/base/PresShell.cpp
@@ -185,6 +185,12 @@
 #include "nsIAccessibleEvent.h"
 #endif
 
+// For frame arena debugging.
+#ifdef NS_TRACE_MALLOC
+#include "nsTraceMalloc.h"
+#endif
+#include "nsDataHashtable.h"
+
 // For style data reconstruction
 #include "nsStyleChangeList.h"
 #include "nsCSSFrameConstructor.h"
@@ -651,6 +657,9 @@ private:
   // i.e., 0, 4, 8, 12, 16, 20, ...
   void*       mRecyclers[gMaxRecycledSize >> 2];
 #endif
+#ifdef NS_TRACE_MALLOC
+  nsDataHashtable<nsVoidPtrHashKey, nsTMStackTraceID> mAllocStacks;
+#endif
 };
 
 FrameArena::FrameArena(PRUint32 aArenaSize)
@@ -665,12 +674,29 @@ FrameArena::FrameArena(PRUint32 aArenaSi
   // Zero out the recyclers array
   memset(mRecyclers, 0, sizeof(mRecyclers));
 #endif
-}
+#ifdef NS_TRACE_MALLOC
+  mAllocStacks.Init();
+#endif
+}
+
+#ifdef NS_TRACE_MALLOC
+PR_STATIC_CALLBACK(PLDHashOperator)
+PrintStacks(const void *aPtr, nsTMStackTraceID aStackID, void* aData)
+{
+  printf("Object at address %p leaked:\n", aPtr);
+  NS_TraceMallocPrintStackTrace(stdout, aStackID);
+  printf("\n");
+  return PL_DHASH_NEXT;
+}
+#endif
 
 FrameArena::~FrameArena()
 {
   NS_ASSERTION(mFrameCount == 0,
                "Some objects allocated with AllocateFrame were not freed");
+#ifdef NS_TRACE_MALLOC
+  mAllocStacks.EnumerateRead(PrintStacks, nullptr);
+#endif
  
 #if !defined(DEBUG_TRACEMALLOC_FRAMEARENA)
   // Free the arena in the pool and finish using it
@@ -715,6 +741,9 @@ FrameArena::AllocateFrame(size_t aSize)
   if (result != nullptr)
     ++mFrameCount;
 #endif
+#ifdef NS_TRACE_MALLOC
+  mAllocStacks.Put(result, NS_TraceMallocGetStackTrace());
+#endif
 
   return result;
 }
@@ -728,6 +757,9 @@ FrameArena::FreeFrame(size_t aSize, void
   // Mark the memory with 0xdd in DEBUG builds so that there will be
   // problems if someone tries to access memory that they've freed.
   memset(aPtr, 0xdd, aSize);
+#endif
+#ifdef NS_TRACE_MALLOC
+  mAllocStacks.Remove(aPtr);
 #endif
 #if defined(DEBUG_TRACEMALLOC_FRAMEARENA)
   PR_Free(aPtr);
