From: L. David Baron <dbaron@dbaron.org>

Make grid rows know if they're in a scroll frame.  (Bug 413027)

diff --git a/layout/xul/base/src/grid/nsGrid.cpp b/layout/xul/base/src/grid/nsGrid.cpp
--- a/layout/xul/base/src/grid/nsGrid.cpp
+++ b/layout/xul/base/src/grid/nsGrid.cpp
@@ -377,7 +377,7 @@ nsGrid::BuildRows(nsIBox* aBox, PRInt32 
        row = new nsGridRow[aRowCount];
     } else {
       for (PRInt32 i=0; i < mRowCount; i++)
-        mRows[i].Init(nsnull, false);
+        mRows[i].Init(nsnull, false, false);
 
       row = mRows;
     }
@@ -387,7 +387,7 @@ nsGrid::BuildRows(nsIBox* aBox, PRInt32 
        row = new nsGridRow[aRowCount];
     } else {
        for (PRInt32 i=0; i < mColumnCount; i++)
-         mColumns[i].Init(nsnull, false);
+         mColumns[i].Init(nsnull, false, false);
 
        row = mColumns;
     }
@@ -401,7 +401,7 @@ nsGrid::BuildRows(nsIBox* aBox, PRInt32 
     if (layout) {
       nsCOMPtr<nsIGridPart> monument( do_QueryInterface(layout) );
       if (monument) {
-         monument->BuildRows(aBox, row);
+         monument->BuildRows(aBox, row, aBox->GetParentBox() != mBox);
       }
     }
   }
diff --git a/layout/xul/base/src/grid/nsGridLayout2.cpp b/layout/xul/base/src/grid/nsGridLayout2.cpp
--- a/layout/xul/base/src/grid/nsGridLayout2.cpp
+++ b/layout/xul/base/src/grid/nsGridLayout2.cpp
@@ -248,10 +248,10 @@ nsGridLayout2::GetMaxSize(nsIBox* aBox, 
 }
 
 PRInt32
-nsGridLayout2::BuildRows(nsIBox* aBox, nsGridRow* aRows)
+nsGridLayout2::BuildRows(nsIBox* aBox, nsGridRow* aRows, bool aInScrollFrame)
 {
   if (aBox) {
-    aRows[0].Init(aBox, true);
+    aRows[0].Init(aBox, true, aInScrollFrame);
     return 1;
   }
   return 0;
diff --git a/layout/xul/base/src/grid/nsGridLayout2.h b/layout/xul/base/src/grid/nsGridLayout2.h
--- a/layout/xul/base/src/grid/nsGridLayout2.h
+++ b/layout/xul/base/src/grid/nsGridLayout2.h
@@ -77,7 +77,7 @@ public:
   virtual nsSize GetPrefSize(nsIBox* aBox, nsBoxLayoutState& aBoxLayoutState);
   virtual void CountRowsColumns(nsIBox* aBox, PRInt32& aRowCount, PRInt32& aComputedColumnCount) { aRowCount++; }
   virtual void DirtyRows(nsIBox* aBox, nsBoxLayoutState& aState) { }
-  virtual PRInt32 BuildRows(nsIBox* aBox, nsGridRow* aRows);
+  virtual PRInt32 BuildRows(nsIBox* aBox, nsGridRow* aRows, bool aInScrollFrame);
   virtual nsMargin GetTotalMargin(nsIBox* aBox, bool aIsHorizontal);
   virtual Type GetType() { return eGrid; }
   virtual void ChildrenInserted(nsIBox* aBox, nsBoxLayoutState& aState,
diff --git a/layout/xul/base/src/grid/nsGridRow.cpp b/layout/xul/base/src/grid/nsGridRow.cpp
--- a/layout/xul/base/src/grid/nsGridRow.cpp
+++ b/layout/xul/base/src/grid/nsGridRow.cpp
@@ -62,10 +62,11 @@ nsGridRow::nsGridRow():mIsBogus(false
 }
 
 void
-nsGridRow::Init(nsIBox* aBox, bool aIsBogus)
+nsGridRow::Init(nsIBox* aBox, bool aIsBogus, bool aInScrollFrame)
 {
   mBox = aBox;
   mIsBogus = aIsBogus;
+  mInScrollFrame = aInScrollFrame;
   mFlex = -1;
   mPref = -1;
   mMin = -1;
diff --git a/layout/xul/base/src/grid/nsGridRow.h b/layout/xul/base/src/grid/nsGridRow.h
--- a/layout/xul/base/src/grid/nsGridRow.h
+++ b/layout/xul/base/src/grid/nsGridRow.h
@@ -59,7 +59,7 @@ public:
    nsGridRow();
    ~nsGridRow();
    
-   void Init(nsIBox* aBox, bool aIsBogus);
+   void Init(nsIBox* aBox, bool aIsBogus, bool aInScrollFrame);
    void MarkDirty(nsBoxLayoutState& aState);
 
 // accessors
@@ -73,7 +73,8 @@ public:
 
 public:
 
-   bool    mIsBogus;
+   bool mIsBogus;
+   bool mInScrollFrame;
    nsIBox* mBox;
    nscoord mFlex;
    nscoord mPref;
diff --git a/layout/xul/base/src/grid/nsGridRowGroupLayout.cpp b/layout/xul/base/src/grid/nsGridRowGroupLayout.cpp
--- a/layout/xul/base/src/grid/nsGridRowGroupLayout.cpp
+++ b/layout/xul/base/src/grid/nsGridRowGroupLayout.cpp
@@ -253,7 +253,7 @@ nsGridRowGroupLayout::CountRowsColumns(n
  * Fill out the given row structure recursively
  */
 PRInt32 
-nsGridRowGroupLayout::BuildRows(nsIBox* aBox, nsGridRow* aRows)
+nsGridRowGroupLayout::BuildRows(nsIBox* aBox, nsGridRow* aRows, bool aInScrollFrame)
 { 
   PRInt32 rowCount = 0;
 
@@ -270,14 +270,15 @@ nsGridRowGroupLayout::BuildRows(nsIBox* 
       if (layout) {
         nsCOMPtr<nsIGridPart> monument( do_QueryInterface(layout) );
         if (monument) {
-          rowCount += monument->BuildRows(deepChild, &aRows[rowCount]);
+          rowCount += monument->BuildRows(deepChild, &aRows[rowCount],
+                                          aInScrollFrame || deepChild != child);
           child = child->GetNextBox();
           deepChild = child;
           continue;
         }
       }
 
-      aRows[rowCount].Init(child, true);
+      aRows[rowCount].Init(child, true, aInScrollFrame);
 
       child = child->GetNextBox();
 
diff --git a/layout/xul/base/src/grid/nsGridRowGroupLayout.h b/layout/xul/base/src/grid/nsGridRowGroupLayout.h
--- a/layout/xul/base/src/grid/nsGridRowGroupLayout.h
+++ b/layout/xul/base/src/grid/nsGridRowGroupLayout.h
@@ -62,7 +62,7 @@ public:
   virtual nsSize GetMaxSize(nsIBox* aBox, nsBoxLayoutState& aBoxLayoutState);
   virtual void CountRowsColumns(nsIBox* aBox, PRInt32& aRowCount, PRInt32& aComputedColumnCount);
   virtual void DirtyRows(nsIBox* aBox, nsBoxLayoutState& aState);
-  virtual PRInt32 BuildRows(nsIBox* aBox, nsGridRow* aRows);
+  virtual PRInt32 BuildRows(nsIBox* aBox, nsGridRow* aRows, bool aInScrollFrame);
   virtual nsMargin GetTotalMargin(nsIBox* aBox, bool aIsHorizontal);
   virtual PRInt32 GetRowCount() { return mRowCount; }
   virtual Type GetType() { return eRowGroup; }
diff --git a/layout/xul/base/src/grid/nsGridRowLeafLayout.cpp b/layout/xul/base/src/grid/nsGridRowLeafLayout.cpp
--- a/layout/xul/base/src/grid/nsGridRowLeafLayout.cpp
+++ b/layout/xul/base/src/grid/nsGridRowLeafLayout.cpp
@@ -347,10 +347,10 @@ nsGridRowLeafLayout::CountRowsColumns(ns
 }
 
 PRInt32
-nsGridRowLeafLayout::BuildRows(nsIBox* aBox, nsGridRow* aRows)
+nsGridRowLeafLayout::BuildRows(nsIBox* aBox, nsGridRow* aRows, bool aInScrollFrame)
 { 
   if (aBox) {
-      aRows[0].Init(aBox, false);
+      aRows[0].Init(aBox, false, aInScrollFrame);
       return 1;
   }
 
diff --git a/layout/xul/base/src/grid/nsGridRowLeafLayout.h b/layout/xul/base/src/grid/nsGridRowLeafLayout.h
--- a/layout/xul/base/src/grid/nsGridRowLeafLayout.h
+++ b/layout/xul/base/src/grid/nsGridRowLeafLayout.h
@@ -66,7 +66,7 @@ public:
   NS_IMETHOD Layout(nsIBox* aBox, nsBoxLayoutState& aBoxLayoutState);
   virtual void CountRowsColumns(nsIBox* aBox, PRInt32& aRowCount, PRInt32& aComputedColumnCount);
   virtual void DirtyRows(nsIBox* aBox, nsBoxLayoutState& aState);
-  virtual PRInt32 BuildRows(nsIBox* aBox, nsGridRow* aRows);
+  virtual PRInt32 BuildRows(nsIBox* aBox, nsGridRow* aRows, bool aInScrollFrame);
   virtual Type GetType() { return eRowLeaf; }
 
 protected:
diff --git a/layout/xul/base/src/grid/nsIGridPart.h b/layout/xul/base/src/grid/nsIGridPart.h
--- a/layout/xul/base/src/grid/nsIGridPart.h
+++ b/layout/xul/base/src/grid/nsIGridPart.h
@@ -101,7 +101,7 @@ public:
    */
   virtual void CountRowsColumns(nsIBox* aBox, PRInt32& aRowCount, PRInt32& aComputedColumnCount)=0;
   virtual void DirtyRows(nsIBox* aBox, nsBoxLayoutState& aState)=0;
-  virtual PRInt32 BuildRows(nsIBox* aBox, nsGridRow* aRows)=0;
+  virtual PRInt32 BuildRows(nsIBox* aBox, nsGridRow* aRows, bool aInScrollFrame)=0;
   virtual nsMargin GetTotalMargin(nsIBox* aBox, bool aIsHorizontal)=0;
   virtual PRInt32 GetRowCount() { return 1; }
   
