From: L. David Baron <dbaron@dbaron.org>

Bug 1367577 - Convert theme widget types to an enum ThemeWidgetType.

MozReview-Commit-ID: JcbdtZG9Nwb

diff --git a/gfx/src/nsITheme.h b/gfx/src/nsITheme.h
--- a/gfx/src/nsITheme.h
+++ b/gfx/src/nsITheme.h
@@ -8,16 +8,17 @@
 
 #ifndef nsITheme_h_
 #define nsITheme_h_
 
 #include "nsISupports.h"
 #include "nsCOMPtr.h"
 #include "nsColor.h"
 #include "Units.h"
+#include "nsThemeConstants.h"
 
 struct nsRect;
 class nsAttrValue;
 class nsPresContext;
 class nsRenderingContext;
 class nsDeviceContext;
 class nsIFrame;
 class nsIAtom;
@@ -52,40 +53,40 @@ public:
    * @param aContext the context to draw into
    * @param aFrame the frame for the widget that we're drawing
    * @param aWidgetType the -moz-appearance value to draw
    * @param aRect the rectangle defining the area occupied by the widget
    * @param aDirtyRect the rectangle that needs to be drawn
    */
   NS_IMETHOD DrawWidgetBackground(nsRenderingContext* aContext,
                                   nsIFrame* aFrame,
-                                  uint8_t aWidgetType,
+                                  mozilla::ThemeWidgetType aWidgetType,
                                   const nsRect& aRect,
                                   const nsRect& aDirtyRect) = 0;
 
   /**
    * Get the computed CSS border for the widget, in pixels.
    */
   NS_IMETHOD GetWidgetBorder(nsDeviceContext* aContext, 
                              nsIFrame* aFrame,
-                             uint8_t aWidgetType,
+                             mozilla::ThemeWidgetType aWidgetType,
                              nsIntMargin* aResult)=0;
 
   /**
    * This method can return false to indicate that the CSS padding
    * value should be used.  Otherwise, it will fill in aResult with the
    * computed padding, in pixels, and return true.
    *
    * XXXldb This ought to be required to return true for non-containers
    * so that we don't let specified padding that has no effect change
    * the computed padding and potentially the size.
    */
   virtual bool GetWidgetPadding(nsDeviceContext* aContext,
                                   nsIFrame* aFrame,
-                                  uint8_t aWidgetType,
+                                  mozilla::ThemeWidgetType aWidgetType,
                                   nsIntMargin* aResult) = 0;
 
   /**
    * On entry, *aResult is positioned at 0,0 and sized to the new size
    * of aFrame (aFrame->GetSize() may be stale and should not be used).
    * This method can return false to indicate that no special
    * overflow area is required by the native widget. Otherwise it will
    * fill in aResult with the desired overflow area, in appunits, relative
@@ -94,65 +95,68 @@ public:
    * This overflow area is used to determine what area needs to be
    * repainted when the widget changes.  However, it does not affect the
    * widget's size or what area is reachable by scrollbars.  (In other
    * words, in layout terms, it affects visual overflow but not
    * scrollable overflow.)
    */
   virtual bool GetWidgetOverflow(nsDeviceContext* aContext,
                                    nsIFrame* aFrame,
-                                   uint8_t aWidgetType,
+                                   mozilla::ThemeWidgetType aWidgetType,
                                    /*INOUT*/ nsRect* aOverflowRect)
   { return false; }
 
   /**
    * Get the minimum border-box size of a widget, in *pixels* (in
    * |aResult|).  If |aIsOverridable| is set to true, this size is a
    * minimum size; if false, this size is the only valid size for the
    * widget.
    */
   NS_IMETHOD GetMinimumWidgetSize(nsPresContext* aPresContext,
                                   nsIFrame* aFrame,
-                                  uint8_t aWidgetType,
+                                  mozilla::ThemeWidgetType aWidgetType,
                                   mozilla::LayoutDeviceIntSize* aResult,
                                   bool* aIsOverridable)=0;
 
 
   enum Transparency {
     eOpaque = 0,
     eTransparent,
     eUnknownTransparency
   };
 
   /**
    * Returns what we know about the transparency of the widget.
    */
-  virtual Transparency GetWidgetTransparency(nsIFrame* aFrame, uint8_t aWidgetType)
+  virtual Transparency GetWidgetTransparency(nsIFrame* aFrame,
+                                             mozilla::ThemeWidgetType aWidgetType)
   { return eUnknownTransparency; }
 
   /**
    * Sets |*aShouldRepaint| to indicate whether an attribute or content state
    * change should trigger a repaint.  Call with null |aAttribute| (and
    * null |aOldValue|) for content state changes.
    */
-  NS_IMETHOD WidgetStateChanged(nsIFrame* aFrame, uint8_t aWidgetType, 
+  NS_IMETHOD WidgetStateChanged(nsIFrame* aFrame,
+                                mozilla::ThemeWidgetType aWidgetType, 
                                 nsIAtom* aAttribute, bool* aShouldRepaint,
                                 const nsAttrValue* aOldValue)=0;
 
   NS_IMETHOD ThemeChanged()=0;
 
-  virtual bool WidgetAppearanceDependsOnWindowFocus(uint8_t aWidgetType)
+  virtual bool WidgetAppearanceDependsOnWindowFocus(mozilla::ThemeWidgetType aWidgetType)
   { return false; }
 
   virtual bool NeedToClearBackgroundBehindWidget(nsIFrame* aFrame,
-                                                 uint8_t aWidgetType)
+                                                 mozilla::ThemeWidgetType aWidgetType)
   { return false; }
 
   virtual bool WidgetProvidesFontSmoothingBackgroundColor(nsIFrame* aFrame,
-                                      uint8_t aWidgetType, nscolor* aColor)
+                                      mozilla::ThemeWidgetType aWidgetType,
+                                      nscolor* aColor)
   { return false; }
 
   /**
    * ThemeGeometryType values are used for describing themed nsIFrames in
    * calls to nsIWidget::UpdateThemeGeometries. We don't simply pass the
    * -moz-appearance value ("widget type") of the frame because the widget may
    * want to treat different frames with the same -moz-appearance differently
    * based on other properties of the frame. So we give the theme a first look
@@ -169,32 +173,32 @@ public:
 
   /**
    * Returns the theme geometry type that should be used in the ThemeGeometry
    * array that's passed to the widget using nsIWidget::UpdateThemeGeometries.
    * A return value of eThemeGeometryTypeUnknown means that this frame will
    * not be included in the ThemeGeometry array.
    */
   virtual ThemeGeometryType ThemeGeometryTypeForWidget(nsIFrame* aFrame,
-                                                       uint8_t aWidgetType)
+                                                       mozilla::ThemeWidgetType aWidgetType)
   { return eThemeGeometryTypeUnknown; }
 
   /**
    * Can the nsITheme implementation handle this widget?
    */
   virtual bool ThemeSupportsWidget(nsPresContext* aPresContext,
                                      nsIFrame* aFrame,
-                                     uint8_t aWidgetType)=0;
+                                     mozilla::ThemeWidgetType aWidgetType) = 0;
 
-  virtual bool WidgetIsContainer(uint8_t aWidgetType)=0;
+  virtual bool WidgetIsContainer(mozilla::ThemeWidgetType aWidgetType) = 0;
 
   /**
    * Does the nsITheme implementation draw its own focus ring for this widget?
    */
-  virtual bool ThemeDrawsFocusForWidget(uint8_t aWidgetType)=0;
+  virtual bool ThemeDrawsFocusForWidget(mozilla::ThemeWidgetType aWidgetType) = 0;
   
   /**
     * Should we insert a dropmarker inside of combobox button?
    */
   virtual bool ThemeNeedsComboboxDropmarker()=0;
 
   /**
    * Should we hide scrollbars?
diff --git a/gfx/src/nsThemeConstants.h b/gfx/src/nsThemeConstants.h
--- a/gfx/src/nsThemeConstants.h
+++ b/gfx/src/nsThemeConstants.h
@@ -1,299 +1,308 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-// No appearance at all.
-#define NS_THEME_NONE                                      0
+namespace mozilla {
 
-// A typical dialog button.
-#define NS_THEME_BUTTON                                    1
+enum ThemeWidgetType : uint8_t {
+
+  // No appearance at all.
+  NS_THEME_NONE,
 
-// A radio element within a radio group.
-#define NS_THEME_RADIO                                     2
+  // A typical dialog button.
+  NS_THEME_BUTTON,
 
-// A checkbox element. 
-#define NS_THEME_CHECKBOX                                  3
+  // A radio element within a radio group.
+  NS_THEME_RADIO,
 
-// appearance:auto (only used in the style system, not in layout)
-#define NS_THEME_AUTO                                      4
+  // A checkbox element. 
+  NS_THEME_CHECKBOX,
 
-// A rectangular button that contains complex content
-// like images (e.g. HTML <button> elements)
-#define NS_THEME_BUTTON_BEVEL                              7
+  // appearance:auto (only used in the style system, not in layout)
+  NS_THEME_AUTO,
 
-// A themed focus outline (for outline:auto)
-#define NS_THEME_FOCUS_OUTLINE                             8
+  // A rectangular button that contains complex content
+  // like images (e.g. HTML <button> elements)
+  NS_THEME_BUTTON_BEVEL,
 
-// The toolbox that contains the toolbars.
-#define NS_THEME_TOOLBOX                                   11
+  // A themed focus outline (for outline:auto)
+  NS_THEME_FOCUS_OUTLINE,
 
-// A toolbar in an application window.
-#define NS_THEME_TOOLBAR                                   12
+  // The toolbox that contains the toolbars.
+  NS_THEME_TOOLBOX,
 
-// A single toolbar button (with no associated dropdown)
-#define NS_THEME_TOOLBARBUTTON                             13
+  // A toolbar in an application window.
+  NS_THEME_TOOLBAR,
 
-// A dual toolbar button (e.g., a Back button with a dropdown)
-#define NS_THEME_DUALBUTTON                                14
+  // A single toolbar button (with no associated dropdown)
+  NS_THEME_TOOLBARBUTTON,
 
-// The dropdown portion of a toolbar button
-#define NS_THEME_TOOLBARBUTTON_DROPDOWN                    15
+  // A dual toolbar button (e.g., a Back button with a dropdown)
+  NS_THEME_DUALBUTTON,
 
-// Various arrows that go in buttons
-#define NS_THEME_BUTTON_ARROW_UP                           16
-#define NS_THEME_BUTTON_ARROW_DOWN                         17
-#define NS_THEME_BUTTON_ARROW_NEXT                         18
-#define NS_THEME_BUTTON_ARROW_PREVIOUS                     19
+  // The dropdown portion of a toolbar button
+  NS_THEME_TOOLBARBUTTON_DROPDOWN,
 
-// A separator.  Can be horizontal or vertical.
-#define NS_THEME_SEPARATOR                                 20
+  // Various arrows that go in buttons
+  NS_THEME_BUTTON_ARROW_UP,
+  NS_THEME_BUTTON_ARROW_DOWN,
+  NS_THEME_BUTTON_ARROW_NEXT,
+  NS_THEME_BUTTON_ARROW_PREVIOUS,
 
-// The gripper for a toolbar.
-#define NS_THEME_TOOLBARGRIPPER                            21
+  // A separator.  Can be horizontal or vertical.
+  NS_THEME_SEPARATOR,
 
-// A splitter.  Can be horizontal or vertical.
-#define NS_THEME_SPLITTER                                  22
+  // The gripper for a toolbar.
+  NS_THEME_TOOLBARGRIPPER,
 
-// A status bar in a main application window.
-#define NS_THEME_STATUSBAR                                 23
+  // A splitter.  Can be horizontal or vertical.
+  NS_THEME_SPLITTER,
 
-// A single pane of a status bar.
-#define NS_THEME_STATUSBARPANEL                            24
+  // A status bar in a main application window.
+  NS_THEME_STATUSBAR,
+
+  // A single pane of a status bar.
+  NS_THEME_STATUSBARPANEL,
 
-// The resizer background area in a status bar 
-// for the resizer widget in the corner of a window.
-#define NS_THEME_RESIZERPANEL                              25
+  // The resizer background area in a status bar 
+  // for the resizer widget in the corner of a window.
+  NS_THEME_RESIZERPANEL,
 
-// The resizer itself.
-#define NS_THEME_RESIZER                                   26
+  // The resizer itself.
+  NS_THEME_RESIZER,
 
-// List boxes
-#define NS_THEME_LISTBOX                                   31
+  // List boxes
+  NS_THEME_LISTBOX,
 
-// A listbox item
-#define NS_THEME_LISTITEM                                  32
+  // A listbox item
+  NS_THEME_LISTITEM,
 
-// A tree widget
-#define NS_THEME_TREEVIEW                                  41
+  // A tree widget
+  NS_THEME_TREEVIEW,
 
-// A tree item
-#define NS_THEME_TREEITEM                                  42
+  // A tree item
+  NS_THEME_TREEITEM,
 
-// A tree widget twisty
-#define NS_THEME_TREETWISTY                                43
+  // A tree widget twisty
+  NS_THEME_TREETWISTY,
 
-// A tree widget branch line
-#define NS_THEME_TREELINE                                  44
+  // A tree widget branch line
+  NS_THEME_TREELINE,
 
-// A listbox or tree widget header
-#define NS_THEME_TREEHEADER                                45
+  // A listbox or tree widget header
+  NS_THEME_TREEHEADER,
 
-// An individual header cell
-#define NS_THEME_TREEHEADERCELL                            46
+  // An individual header cell
+  NS_THEME_TREEHEADERCELL,
 
-// The sort arrow for a header.
-#define NS_THEME_TREEHEADERSORTARROW                       47
+  // The sort arrow for a header.
+  NS_THEME_TREEHEADERSORTARROW,
 
-// Open tree widget twisty
-#define NS_THEME_TREETWISTYOPEN                            48
+  // Open tree widget twisty
+  NS_THEME_TREETWISTYOPEN,
 
-// A horizontal progress bar.
-#define NS_THEME_PROGRESSBAR                               51
+  // A horizontal progress bar.
+  NS_THEME_PROGRESSBAR,
 
-// The progress bar's progress indicator
-#define NS_THEME_PROGRESSCHUNK                             52
+  // The progress bar's progress indicator
+  NS_THEME_PROGRESSCHUNK,
 
-// A vertical progress bar.
-#define NS_THEME_PROGRESSBAR_VERTICAL                      53
+  // A vertical progress bar.
+  NS_THEME_PROGRESSBAR_VERTICAL,
 
-// A vertical progress chunk
-#define NS_THEME_PROGRESSCHUNK_VERTICAL                    54
+  // A vertical progress chunk
+  NS_THEME_PROGRESSCHUNK_VERTICAL,
 
-// A horizontal meter bar.
-#define NS_THEME_METERBAR                                  55
+  // A horizontal meter bar.
+  NS_THEME_METERBAR,
 
-// The meter bar's meter indicator
-#define NS_THEME_METERCHUNK                                56
+  // The meter bar's meter indicator
+  NS_THEME_METERCHUNK,
 
-// A single tab in a tab widget.
-#define NS_THEME_TAB                                       61
+  // A single tab in a tab widget.
+  NS_THEME_TAB,
 
-// A single pane (inside the tabpanels container)
-#define NS_THEME_TABPANEL                                  62
+  // A single pane (inside the tabpanels container)
+  NS_THEME_TABPANEL,
 
-// The tab panels container.
-#define NS_THEME_TABPANELS                                 65
+  // The tab panels container.
+  NS_THEME_TABPANELS,
 
-// The tabs scroll arrows (left/right)
-#define NS_THEME_TAB_SCROLL_ARROW_BACK                     66
-#define NS_THEME_TAB_SCROLL_ARROW_FORWARD                  67
+  // The tabs scroll arrows (left/right)
+  NS_THEME_TAB_SCROLL_ARROW_BACK,
+  NS_THEME_TAB_SCROLL_ARROW_FORWARD,
 
-// A tooltip
-#define NS_THEME_TOOLTIP                                   71
+  // A tooltip
+  NS_THEME_TOOLTIP,
 
-// A spin control (up/down control for time/date pickers)
-#define NS_THEME_SPINNER                                   72
+  // A spin control (up/down control for time/date pickers)
+  NS_THEME_SPINNER,
 
-// The up button of a spin control
-#define NS_THEME_SPINNER_UPBUTTON                          73
+  // The up button of a spin control
+  NS_THEME_SPINNER_UPBUTTON,
 
-// The down button of a spin control
-#define NS_THEME_SPINNER_DOWNBUTTON                        74
+  // The down button of a spin control
+  NS_THEME_SPINNER_DOWNBUTTON,
 
-// The textfield of a spin control
-#define NS_THEME_SPINNER_TEXTFIELD                         75
+  // The textfield of a spin control
+  NS_THEME_SPINNER_TEXTFIELD,
 
-// For HTML's <input type=number>
-#define NS_THEME_NUMBER_INPUT                              76
+  // For HTML's <input type=number>
+  NS_THEME_NUMBER_INPUT,
 
-// A scrollbar.
-#define NS_THEME_SCROLLBAR                                 80
+  // A scrollbar.
+  NS_THEME_SCROLLBAR,
 
-// A small scrollbar.
-#define NS_THEME_SCROLLBAR_SMALL                           81
+  // A small scrollbar.
+  NS_THEME_SCROLLBAR_SMALL,
+
+  // The scrollbar slider
+  NS_THEME_SCROLLBAR_HORIZONTAL,
+  NS_THEME_SCROLLBAR_VERTICAL,
 
-// The scrollbar slider
-#define NS_THEME_SCROLLBAR_HORIZONTAL                      82
-#define NS_THEME_SCROLLBAR_VERTICAL                        83
+  // A scrollbar button (up/down/left/right)
+  NS_THEME_SCROLLBARBUTTON_UP,
+  NS_THEME_SCROLLBARBUTTON_DOWN,
+  NS_THEME_SCROLLBARBUTTON_LEFT,
+  NS_THEME_SCROLLBARBUTTON_RIGHT,
 
-// A scrollbar button (up/down/left/right)
-#define NS_THEME_SCROLLBARBUTTON_UP                        84
-#define NS_THEME_SCROLLBARBUTTON_DOWN                      85
-#define NS_THEME_SCROLLBARBUTTON_LEFT                      86
-#define NS_THEME_SCROLLBARBUTTON_RIGHT                     87
+  // The scrollbar track
+  NS_THEME_SCROLLBARTRACK_HORIZONTAL,
+  NS_THEME_SCROLLBARTRACK_VERTICAL,
 
-// The scrollbar track
-#define NS_THEME_SCROLLBARTRACK_HORIZONTAL                 88
-#define NS_THEME_SCROLLBARTRACK_VERTICAL                   89
+  // The scrollbar thumb
+  NS_THEME_SCROLLBARTHUMB_HORIZONTAL,
+  NS_THEME_SCROLLBARTHUMB_VERTICAL,
 
-// The scrollbar thumb
-#define NS_THEME_SCROLLBARTHUMB_HORIZONTAL                 90
-#define NS_THEME_SCROLLBARTHUMB_VERTICAL                   91
+  // A non-disappearing scrollbar.
+  NS_THEME_SCROLLBAR_NON_DISAPPEARING,
 
-// A non-disappearing scrollbar.
-#define NS_THEME_SCROLLBAR_NON_DISAPPEARING                92
+  // A textfield or text area
+  NS_THEME_TEXTFIELD,
 
-// A textfield or text area
-#define NS_THEME_TEXTFIELD                                 95
+  // The caret of a text area
+  NS_THEME_CARET,
 
-// The caret of a text area
-#define NS_THEME_CARET                                     96
+  // A multiline text field
+  NS_THEME_TEXTFIELD_MULTILINE,
 
-// A multiline text field
-#define NS_THEME_TEXTFIELD_MULTILINE                       97
+  // A searchfield
+  NS_THEME_SEARCHFIELD,
 
-// A searchfield
-#define NS_THEME_SEARCHFIELD                               98
+  // A dropdown list.
+  NS_THEME_MENULIST,
 
-// A dropdown list.
-#define NS_THEME_MENULIST                                  101
+  // The dropdown button(s) that open up a dropdown list.
+  NS_THEME_MENULIST_BUTTON,
 
-// The dropdown button(s) that open up a dropdown list.
-#define NS_THEME_MENULIST_BUTTON                           102
+  // The text part of a dropdown list, to left of button
+  NS_THEME_MENULIST_TEXT,
 
-// The text part of a dropdown list, to left of button
-#define NS_THEME_MENULIST_TEXT                             103
+  // An editable textfield with a dropdown list (a combobox)
+  NS_THEME_MENULIST_TEXTFIELD,
 
-// An editable textfield with a dropdown list (a combobox)
-#define NS_THEME_MENULIST_TEXTFIELD                        104
+  // A slider
+  NS_THEME_SCALE_HORIZONTAL,
+  NS_THEME_SCALE_VERTICAL,
 
-// A slider
-#define NS_THEME_SCALE_HORIZONTAL                          111
-#define NS_THEME_SCALE_VERTICAL                            112
+  // A slider's thumb
+  NS_THEME_SCALETHUMB_HORIZONTAL,
+  NS_THEME_SCALETHUMB_VERTICAL,
 
-// A slider's thumb
-#define NS_THEME_SCALETHUMB_HORIZONTAL                     113
-#define NS_THEME_SCALETHUMB_VERTICAL                       114
+  // If the platform supports it, the left/right chunks
+  // of the slider thumb
+  NS_THEME_SCALETHUMBSTART,
+  NS_THEME_SCALETHUMBEND,
 
-// If the platform supports it, the left/right chunks
-// of the slider thumb
-#define NS_THEME_SCALETHUMBSTART                           115
-#define NS_THEME_SCALETHUMBEND                             116
+  // The ticks for a slider.
+  NS_THEME_SCALETHUMBTICK,
 
-// The ticks for a slider.
-#define NS_THEME_SCALETHUMBTICK                            117
+  // nsRangeFrame and its subparts
+  NS_THEME_RANGE,
+  NS_THEME_RANGE_THUMB,
 
-// nsRangeFrame and its subparts
-#define NS_THEME_RANGE                                     120
-#define NS_THEME_RANGE_THUMB                               121
+  // A groupbox
+  NS_THEME_GROUPBOX,
 
-// A groupbox
-#define NS_THEME_GROUPBOX                                  149
+  // A generic container that always repaints on state
+  // changes.  This is a hack to make checkboxes and
+  // radio buttons work.
+  NS_THEME_CHECKBOX_CONTAINER,
+  NS_THEME_RADIO_CONTAINER,
 
-// A generic container that always repaints on state
-// changes.  This is a hack to make checkboxes and
-// radio buttons work.
-#define NS_THEME_CHECKBOX_CONTAINER                        150
-#define NS_THEME_RADIO_CONTAINER                           151
+  // The label part of a checkbox or radio button, used for painting
+  // a focus outline.
+  NS_THEME_CHECKBOX_LABEL,
+  NS_THEME_RADIO_LABEL,
 
-// The label part of a checkbox or radio button, used for painting
-// a focus outline.
-#define NS_THEME_CHECKBOX_LABEL                            152
-#define NS_THEME_RADIO_LABEL                               153
+  // The focus outline box inside of a button
+  NS_THEME_BUTTON_FOCUS,
 
-// The focus outline box inside of a button
-#define NS_THEME_BUTTON_FOCUS                              154
-
-// Window and dialog backgrounds
-#define NS_THEME_WINDOW                                    200
-#define NS_THEME_DIALOG                                    201
+  // Window and dialog backgrounds
+  NS_THEME_WINDOW,
+  NS_THEME_DIALOG,
 
-// Menu Bar background
-#define NS_THEME_MENUBAR                                   210
-// Menu Popup background
-#define NS_THEME_MENUPOPUP                                 211
-// <menu> and <menuitem> appearances
-#define NS_THEME_MENUITEM                                  212
-#define NS_THEME_CHECKMENUITEM                             213
-#define NS_THEME_RADIOMENUITEM                             214
+  // Menu Bar background
+  NS_THEME_MENUBAR,
+  // Menu Popup background
+  NS_THEME_MENUPOPUP,
+  // <menu> and <menuitem> appearances
+  NS_THEME_MENUITEM,
+  NS_THEME_CHECKMENUITEM,
+  NS_THEME_RADIOMENUITEM,
 
-// menu checkbox/radio appearances
-#define NS_THEME_MENUCHECKBOX                              215
-#define NS_THEME_MENURADIO                                 216
-#define NS_THEME_MENUSEPARATOR                             217
-#define NS_THEME_MENUARROW                                 218
-// An image in the menu gutter, like in bookmarks or history
-#define NS_THEME_MENUIMAGE                                 219
-// For text on non-iconic menuitems only
-#define NS_THEME_MENUITEMTEXT                              220
+  // menu checkbox/radio appearances
+  NS_THEME_MENUCHECKBOX,
+  NS_THEME_MENURADIO,
+  NS_THEME_MENUSEPARATOR,
+  NS_THEME_MENUARROW,
+  // An image in the menu gutter, like in bookmarks or history
+  NS_THEME_MENUIMAGE,
+  // For text on non-iconic menuitems only
+  NS_THEME_MENUITEMTEXT,
+
+  // Vista Rebars
+  NS_THEME_WIN_COMMUNICATIONS_TOOLBOX,
+  NS_THEME_WIN_MEDIA_TOOLBOX,
+  NS_THEME_WIN_BROWSERTABBAR_TOOLBOX,
 
-// Vista Rebars
-#define NS_THEME_WIN_COMMUNICATIONS_TOOLBOX                221
-#define NS_THEME_WIN_MEDIA_TOOLBOX                         222
-#define NS_THEME_WIN_BROWSERTABBAR_TOOLBOX                 223
+  // Titlebar elements on the Mac
+  NS_THEME_MAC_FULLSCREEN_BUTTON,
 
-// Titlebar elements on the Mac
-#define NS_THEME_MAC_FULLSCREEN_BUTTON                     226
+  // Mac help button
+  NS_THEME_MAC_HELP_BUTTON,
 
-// Mac help button
-#define NS_THEME_MAC_HELP_BUTTON                           227
-
-// Vista glass
-#define NS_THEME_WIN_BORDERLESS_GLASS                      229
-#define NS_THEME_WIN_GLASS                                 230
+  // Vista glass
+  NS_THEME_WIN_BORDERLESS_GLASS,
+  NS_THEME_WIN_GLASS,
 
-// Windows themed window frame elements
-#define NS_THEME_WINDOW_TITLEBAR                           231
-#define NS_THEME_WINDOW_TITLEBAR_MAXIMIZED                 232
-#define NS_THEME_WINDOW_FRAME_LEFT                         233
-#define NS_THEME_WINDOW_FRAME_RIGHT                        234
-#define NS_THEME_WINDOW_FRAME_BOTTOM                       235
-#define NS_THEME_WINDOW_BUTTON_CLOSE                       236
-#define NS_THEME_WINDOW_BUTTON_MINIMIZE                    237
-#define NS_THEME_WINDOW_BUTTON_MAXIMIZE                    238
-#define NS_THEME_WINDOW_BUTTON_RESTORE                     239
-#define NS_THEME_WINDOW_BUTTON_BOX                         240
-#define NS_THEME_WINDOW_BUTTON_BOX_MAXIMIZED               241
+  // Windows themed window frame elements
+  NS_THEME_WINDOW_TITLEBAR,
+  NS_THEME_WINDOW_TITLEBAR_MAXIMIZED,
+  NS_THEME_WINDOW_FRAME_LEFT,
+  NS_THEME_WINDOW_FRAME_RIGHT,
+  NS_THEME_WINDOW_FRAME_BOTTOM,
+  NS_THEME_WINDOW_BUTTON_CLOSE,
+  NS_THEME_WINDOW_BUTTON_MINIMIZE,
+  NS_THEME_WINDOW_BUTTON_MAXIMIZE,
+  NS_THEME_WINDOW_BUTTON_RESTORE,
+  NS_THEME_WINDOW_BUTTON_BOX,
+  NS_THEME_WINDOW_BUTTON_BOX_MAXIMIZED,
 
-// moz-apperance style used in setting proper glass margins
-#define NS_THEME_WIN_EXCLUDE_GLASS                         242
+  // moz-apperance style used in setting proper glass margins
+  NS_THEME_WIN_EXCLUDE_GLASS,
+
+  NS_THEME_MAC_VIBRANCY_LIGHT,
+  NS_THEME_MAC_VIBRANCY_DARK,
+  NS_THEME_MAC_DISCLOSURE_BUTTON_OPEN,
+  NS_THEME_MAC_DISCLOSURE_BUTTON_CLOSED,
 
-#define NS_THEME_MAC_VIBRANCY_LIGHT                        243
-#define NS_THEME_MAC_VIBRANCY_DARK                         244
-#define NS_THEME_MAC_DISCLOSURE_BUTTON_OPEN                245
-#define NS_THEME_MAC_DISCLOSURE_BUTTON_CLOSED              246
+  NS_THEME_GTK_INFO_BAR,
+  NS_THEME_MAC_SOURCE_LIST,
+  NS_THEME_MAC_SOURCE_LIST_SELECTION,
+  NS_THEME_MAC_ACTIVE_SOURCE_LIST_SELECTION,
 
-#define NS_THEME_GTK_INFO_BAR                              247
-#define NS_THEME_MAC_SOURCE_LIST                           248
-#define NS_THEME_MAC_SOURCE_LIST_SELECTION                 249
-#define NS_THEME_MAC_ACTIVE_SOURCE_LIST_SELECTION          250
+  ThemeWidgetType_COUNT
+};
+
+} // namespace mozilla
