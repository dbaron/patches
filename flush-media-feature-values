From: L. David Baron <dbaron@dbaron.org>

Bug 1089417 patch 11 - Flush pending media feature value changes where needed.

diff --git a/dom/base/nsDocument.cpp b/dom/base/nsDocument.cpp
--- a/dom/base/nsDocument.cpp
+++ b/dom/base/nsDocument.cpp
@@ -12593,18 +12593,26 @@ nsIDocument::FlushUserFontSet()
   if (!mGetUserFontSetCalled) {
     return; // No one cares about this font set yet, but we want to be careful
             // to not unset our mFontFaceSetDirty bit, so when someone really
             // does we'll create it.
   }
 
   if (mFontFaceSetDirty) {
     if (gfxPlatform::GetPlatform()->DownloadableFontsEnabled()) {
+      nsIPresShell* shell = GetShell();
+
+      // We have to flush pending media feature values changes before doing
+      // something that might rebuild CSS rule processors.
+      nsPresContext* presContext = shell->GetPresContext();
+      if (presContext) {
+        presContext->FlushPendingMediaFeatureValuesChanged();
+      }
+
       nsTArray<nsFontFaceRuleContainer> rules;
-      nsIPresShell* shell = GetShell();
       if (shell) {
         // XXXheycam ServoStyleSets don't support exposing @font-face rules yet.
         if (shell->StyleSet()->IsGecko()) {
           if (!shell->StyleSet()->AsGecko()->AppendFontFaceRules(rules)) {
             // FIXME: What if it had rules before?
             return;
           }
         } else {
diff --git a/layout/base/PresShell.cpp b/layout/base/PresShell.cpp
--- a/layout/base/PresShell.cpp
+++ b/layout/base/PresShell.cpp
@@ -4236,23 +4236,27 @@ PresShell::DocumentStatesChanged(nsIDocu
     // XXXheycam ServoStyleSets don't support document state selectors,
     // but these are only used in chrome documents, which we are not
     // aiming to support yet.
     NS_WARNING("stylo: ServoStyleSets cannot respond to document state "
                "changes yet (only matters for chrome documents). See bug 1290285.");
     return;
   }
 
-  if (mDidInitialize &&
-      styleSet->HasDocumentStateDependentStyle(mDocument->GetRootElement(),
-                                               aStateMask)) {
-    mPresContext->RestyleManager()->PostRestyleEvent(mDocument->GetRootElement(),
-                                                     eRestyle_Subtree,
-                                                     nsChangeHint(0));
-    VERIFY_STYLE_TREE;
+  if (mDidInitialize) {
+    // We have to flush pending media feature values changes before doing
+    // something that might rebuild CSS rule processors.
+    mPresContext->FlushPendingMediaFeatureValuesChanged();
+
+    Element* rootElement = mDocument->GetRootElement();
+    if (styleSet->HasDocumentStateDependentStyle(rootElement, aStateMask)) {
+      mPresContext->RestyleManager()->
+        PostRestyleEvent(rootElement, eRestyle_Subtree, nsChangeHint(0));
+      VERIFY_STYLE_TREE;
+    }
   }
 
   if (aStateMask.HasState(NS_DOCUMENT_STATE_WINDOW_INACTIVE)) {
     nsIFrame* root = mFrameConstructor->GetRootFrame();
     if (root) {
       root->SchedulePaint();
     }
   }
diff --git a/layout/base/RestyleManager.cpp b/layout/base/RestyleManager.cpp
--- a/layout/base/RestyleManager.cpp
+++ b/layout/base/RestyleManager.cpp
@@ -253,16 +253,21 @@ RestyleManager::ContentStateChanged(nsIC
   // XXXbz it would be good if this function only took Elements, but
   // we'd have to make ESM guarantee that usefully.
   if (!aContent->IsElement()) {
     return NS_OK;
   }
 
   Element* aElement = aContent->AsElement();
 
+  // We have to flush pending media feature values changes before doing
+  // something that might rebuild CSS rule processors.
+  // FIXME: Should this be in RestyleManagerBase?
+  mPresContext->FlushPendingMediaFeatureValuesChanged();
+
   nsChangeHint changeHint;
   nsRestyleHint restyleHint;
   ContentStateChangedInternal(aElement, aStateMask, &changeHint, &restyleHint);
 
   PostRestyleEvent(aElement, restyleHint, changeHint);
   return NS_OK;
 }
 
@@ -296,16 +301,20 @@ RestyleManager::AttributeChanged(Element
                                  const nsAttrValue* aOldValue)
 {
   // Hold onto the PresShell to prevent ourselves from being destroyed.
   // XXXbz how, exactly, would this attribute change cause us to be
   // destroyed from inside this function?
   nsCOMPtr<nsIPresShell> shell = PresContext()->GetPresShell();
   mozilla::Unused << shell; // Unused within this function
 
+  // We have to flush pending media feature values changes before doing
+  // something that might rebuild CSS rule processors.
+  mPresContext->FlushPendingMediaFeatureValuesChanged();
+
   // Get the frame associated with the content which is the highest in the frame tree
   nsIFrame* primaryFrame = aElement->GetPrimaryFrame();
 
 #if 0
   NS_FRAME_LOG(NS_FRAME_TRACE_CALLS,
      ("RestyleManager::AttributeChanged: content=%p[%s] frame=%p",
       aContent, ContentTag(aElement, 0), frame));
 #endif
