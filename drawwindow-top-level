From: L. David Baron <dbaron@dbaron.org>

Run the drawWindow tests on a toplevel window.

diff --git a/content/canvas/test/chrome/chrome.ini b/content/canvas/test/chrome/chrome.ini
--- a/content/canvas/test/chrome/chrome.ini
+++ b/content/canvas/test/chrome/chrome.ini
@@ -1,4 +1,6 @@
 [DEFAULT]
 support-files = nonchrome_webgl_debug_renderer_info.html
 
 [test_webgl_debug_renderer_info.html]
+[test_drawWindow_widget_layers.html]
+support-files = ../file_drawWindow_source.html ../file_drawWindow_common.js
diff --git a/content/canvas/test/test_drawWindow.html b/content/canvas/test/chrome/test_drawWindow_widget_layers.html
copy from content/canvas/test/test_drawWindow.html
copy to content/canvas/test/chrome/test_drawWindow_widget_layers.html
--- a/content/canvas/test/test_drawWindow.html
+++ b/content/canvas/test/chrome/test_drawWindow_widget_layers.html
@@ -1,33 +1,50 @@
 <!DOCTYPE HTML>
 <html>
 <head>
   <meta charset="utf-8">
   <title>Test for canvas drawWindow</title>
-  <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
-  <script type="application/javascript" src="/tests/SimpleTest/WindowSnapshot.js"></script>
+  <script type="application/javascript" src="chrome://mochikit/content/MochiKit/packed.js"></script>
+  <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
   <script type="application/javascript" src="file_drawWindow_common.js"></script>
-  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
+  <link rel="stylesheet" type="text/css" href="chrome://mochikit/content/tests/SimpleTest/test.css" />
   <script type="application/javascript">
 
   SimpleTest.waitForExplicitFinish();
-  window.addEventListener("load", runTests, false);
+  window.addEventListener("load", openIframe, false);
 
-  function runTests(event) {
+  var sourceWindow;
+
+  function openIframe(event) {
     if (event.target != document) {
       return;
     }
 
+    // Need to open as a toplevel chrome window so that
+    // DRAWWINDOW_USE_WIDGET_LAYERS is honored.
+    sourceWindow = SpecialPowers.wrap(window).open("file_drawWindow_source.html", "", "chrome,width=200,height=100");
+    sourceWindow = SpecialPowers.unwrap(sourceWindow);
+    sourceWindow.addEventListener("load", runTests, false);
+  }
+
+  function runTests(event) {
+    if (event.target != sourceWindow.document) {
+      return;
+    }
+
     var cxInterfaceWrap = SpecialPowers.wrap(CanvasRenderingContext2D);
+    var flags = cxInterfaceWrap.DRAWWINDOW_USE_WIDGET_LAYERS |
+                cxInterfaceWrap.DRAWWINDOW_DRAW_CARET |
+                cxInterfaceWrap.DRAWWINDOW_DRAW_VIEW;
+    runDrawWindowTests(sourceWindow, flags, false);
 
-    runDrawWindowTests(document.getElementById("source").contentWindow, 0);
+    sourceWindow.close();
 
     SimpleTest.finish();
   }
 
   </script>
 </head>
 <body>
 <a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=">Mozilla Bug </a>
-<iframe id="source" src="file_drawWindow_source.html" width="200" height="100"></iframe>
 </body>
 </html>
diff --git a/content/canvas/test/file_drawWindow_common.js b/content/canvas/test/file_drawWindow_common.js
--- a/content/canvas/test/file_drawWindow_common.js
+++ b/content/canvas/test/file_drawWindow_common.js
@@ -1,9 +1,9 @@
-function runDrawWindowTests(win, drawWindowFlags) {
+function runDrawWindowTests(win, drawWindowFlags, transparentBackground) {
   const CANVAS_WIDTH = 200;
   const CANVAS_HEIGHT = 100;
 
   function make_canvas() {
     var canvas = document.createElement("canvas");
     canvas.setAttribute("height", CANVAS_HEIGHT);
     canvas.setAttribute("width", CANVAS_WIDTH);
     document.body.appendChild(canvas);
@@ -46,28 +46,29 @@ function runDrawWindowTests(win, drawWin
   refCx.fillStyle = "yellow";
   refCx.fillRect(90, 10, 20, 20);
   assertSnapshots(testCanvas, refCanvas, true /* equal */,
                   "full draw of source on white background", "reference");
 
   clearTest("white");
   testWrapCx.drawWindow(win, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT,
                         "rgb(255, 255, 0)", drawWindowFlags);
-  assertSnapshots(testCanvas, refCanvas, false /* not equal */,
+  assertSnapshots(testCanvas, refCanvas,
+                  !transparentBackground /* not equal */,
                   "full draw of source on yellow background", "reference");
 
   clearRef("yellow");
   refCx.fillStyle = "fuchsia";
   refCx.fillRect(10, 10, 20, 20);
   refCx.fillStyle = "aqua";
   refCx.fillRect(50, 10, 20, 20);
   refCx.fillStyle = "yellow";
   refCx.fillRect(90, 10, 20, 20);
 
-  assertSnapshots(testCanvas, refCanvas, true /* equal */,
+  assertSnapshots(testCanvas, refCanvas, transparentBackground /* equal */,
                   "full draw of source on yellow background", "reference");
 
   // Test drawing a region within the document.
 
   clear("white");
 
   testCx.translate(17, 31);
   testWrapCx.drawWindow(win, 40, 0, 40, 40,
@@ -81,32 +82,40 @@ function runDrawWindowTests(win, drawWin
                   "reference");
 
   clear("blue");
 
   testCx.translate(17, 31);
   testWrapCx.drawWindow(win, 40, 0, 35, 45,
                         "green", drawWindowFlags);
 
-  refCx.fillStyle = "green";
+  if (transparentBackground) {
+    refCx.fillStyle = "green";
+  } else {
+    refCx.fillStyle = "white";
+  }
   refCx.fillRect(17, 31, 35, 45);
   refCx.fillStyle = "aqua";
   refCx.fillRect(17 + 10, 31 + 10, 20, 20);
 
   assertSnapshots(testCanvas, refCanvas, true /* equal */,
                   "draw of subrect of source with different background",
                   "reference");
 
   // Test transparency of background not disturbing what is behind
   clear("blue");
 
   testCx.translate(17, 31);
   testWrapCx.drawWindow(win, 40, 0, 35, 45,
                         "transparent", drawWindowFlags);
 
+  if (!transparentBackground) {
+    refCx.fillStyle = "white";
+    refCx.fillRect(17, 31, 35, 45);
+  }
   refCx.fillStyle = "aqua";
   refCx.fillRect(17 + 10, 31 + 10, 20, 20);
 
   assertSnapshots(testCanvas, refCanvas, true /* equal */,
                   "draw of subrect of source with different background",
                   "reference");
 
   // Test that multiple drawWindow calls draw at correct positions.
@@ -119,21 +128,30 @@ function runDrawWindowTests(win, drawWin
   // 35, 0 is 15, 10 from the corner of the aqua square
   testWrapCx.drawWindow(win, 35, 0, 50, 40,
                         "transparent", drawWindowFlags);
   testCx.translate(15, 0);
   // 85, 5 is 5, 5 from the corner of the yellow square
   testWrapCx.drawWindow(win, 85, 5, 30, 25,
                         "transparent", drawWindowFlags);
 
-  refCx.fillStyle = "maroon";
-  refCx.fillRect(9, 3, 30, 25);
-  refCx.fillStyle = "fuchsia";
-  refCx.fillRect(9 + 5, 3 + 2, 20, 20);
+  if (transparentBackground) {
+    refCx.fillStyle = "maroon";
+    refCx.fillRect(9, 3, 30, 25);
+    refCx.fillStyle = "fuchsia";
+    refCx.fillRect(9 + 5, 3 + 2, 20, 20);
+  } else {
+    refCx.fillStyle = "white";
+    refCx.fillRect(9, 3, 50, 40);
+  }
   refCx.fillStyle = "aqua";
   refCx.fillRect(9 + 15, 3 + 10, 20, 20);
+  if (!transparentBackground) {
+    refCx.fillStyle = "white";
+    refCx.fillRect(9 + 15, 3, 30, 25);
+  }
   refCx.fillStyle = "yellow";
   refCx.fillRect(9 + 15 + 5, 3 + 0 + 5, 20, 20);
 
   assertSnapshots(testCanvas, refCanvas, true /* equal */,
                   "multiple drawWindow calls on top of each other",
                   "reference");
 }
diff --git a/content/canvas/test/test_drawWindow.html b/content/canvas/test/test_drawWindow.html
--- a/content/canvas/test/test_drawWindow.html
+++ b/content/canvas/test/test_drawWindow.html
@@ -14,17 +14,18 @@
 
   function runTests(event) {
     if (event.target != document) {
       return;
     }
 
     var cxInterfaceWrap = SpecialPowers.wrap(CanvasRenderingContext2D);
 
-    runDrawWindowTests(document.getElementById("source").contentWindow, 0);
+    runDrawWindowTests(document.getElementById("source").contentWindow,
+                       0, true);
 
     SimpleTest.finish();
   }
 
   </script>
 </head>
 <body>
 <a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=">Mozilla Bug </a>
