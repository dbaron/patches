From: L. David Baron <dbaron@dbaron.org>

Run the drawWindow tests on a toplevel window.

diff --git a/content/canvas/test/test_drawWindow.html b/content/canvas/test/test_drawWindow.html
--- a/content/canvas/test/test_drawWindow.html
+++ b/content/canvas/test/test_drawWindow.html
@@ -7,163 +7,201 @@
   <script type="application/javascript" src="/tests/SimpleTest/WindowSnapshot.js"></script>
   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
   <script type="application/javascript">
 
   const CANVAS_WIDTH = 200;
   const CANVAS_HEIGHT = 100;
 
   SimpleTest.waitForExplicitFinish();
-  window.addEventListener("load", runTests, false);
+  window.addEventListener("load", openIframe, false);
+
+  var sourceWindow;
+
+  function openIframe(event) {
+    if (event.target != document) {
+      return;
+    }
+
+    // Need to open as a toplevel chrome window so that
+    // DRAWWINDOW_USE_WIDGET_LAYERS is honored.
+    sourceWindow = SpecialPowers.wrap(window).open("file_drawWindow_source.html", "", "chrome,width=200,height=100");
+    sourceWindow = SpecialPowers.unwrap(sourceWindow);
+    sourceWindow.addEventListener("load", runTests, false);
+  }
 
   function runTests(event) {
-    if (event.target != document) {
+    if (event.target != sourceWindow.document) {
       return;
     }
 
     var refCanvas = document.getElementById("refCanvas");
     var testCanvas = document.getElementById("testCanvas");
 
     var refCx = refCanvas.getContext("2d");
     var testCx = testCanvas.getContext("2d");
 
     var refWrapCx = SpecialPowers.wrap(refCx);
     var testWrapCx = SpecialPowers.wrap(testCx);
 
-    var sourceFrame = document.getElementById("source");
-    var sourceWindow = sourceFrame.contentWindow;
-
     function clearRef(fillStyle) {
       refCx.setTransform(1, 0, 0, 1, 0, 0);
       refCx.fillStyle = fillStyle;
       refCx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
     }
     function clearTest(fillStyle) {
       testCx.setTransform(1, 0, 0, 1, 0, 0);
       testCx.fillStyle = fillStyle;
       testCx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
     }
     function clear(fillStyle) {
       clearRef(fillStyle);
       clearTest(fillStyle);
     }
 
-    function testWithFlags(drawWindowFlags) {
+    var sourceIframe = document.getElementById("source").contentWindow;
+
+    function testWithFlags(win, drawWindowFlags) {
+      ok(win == sourceWindow || win == sourceIframe,
+         "expected a known win argument");
+
+      var transparentBackground = win == sourceIframe;
+
       // Basic tests of drawing the whole document on a background
 
       clear("white");
-      testWrapCx.drawWindow(sourceWindow, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT,
+      testWrapCx.drawWindow(win, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT,
                             "rgb(255, 255, 255)", drawWindowFlags);
       refCx.fillStyle = "fuchsia";
       refCx.fillRect(10, 10, 20, 20);
       refCx.fillStyle = "aqua";
       refCx.fillRect(50, 10, 20, 20);
       refCx.fillStyle = "yellow";
       refCx.fillRect(90, 10, 20, 20);
       assertSnapshots(testCanvas, refCanvas, true /* equal */,
                       "full draw of source on white background", "reference");
 
       clearTest("white");
-      testWrapCx.drawWindow(sourceWindow, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT,
+      testWrapCx.drawWindow(win, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT,
                             "rgb(255, 255, 0)", drawWindowFlags);
-      assertSnapshots(testCanvas, refCanvas, false /* not equal */,
+      assertSnapshots(testCanvas, refCanvas,
+                      !transparentBackground /* not equal */,
                       "full draw of source on yellow background", "reference");
 
       clearRef("yellow");
       refCx.fillStyle = "fuchsia";
       refCx.fillRect(10, 10, 20, 20);
       refCx.fillStyle = "aqua";
       refCx.fillRect(50, 10, 20, 20);
       refCx.fillStyle = "yellow";
       refCx.fillRect(90, 10, 20, 20);
 
-      assertSnapshots(testCanvas, refCanvas, true /* equal */,
+      assertSnapshots(testCanvas, refCanvas, transparentBackground /* equal */,
                       "full draw of source on yellow background", "reference");
 
       // Test drawing a region within the document.
 
       clear("white");
 
       testCx.translate(17, 31);
-      testWrapCx.drawWindow(sourceWindow, 40, 0, 40, 40,
+      testWrapCx.drawWindow(win, 40, 0, 40, 40,
                             "white", drawWindowFlags);
 
       refCx.fillStyle = "aqua";
       refCx.fillRect(17 + 10, 31 + 10, 20, 20);
 
       assertSnapshots(testCanvas, refCanvas, true /* equal */,
                       "draw of subrect of source with matching background",
                       "reference");
 
       clear("blue");
 
       testCx.translate(17, 31);
-      testWrapCx.drawWindow(sourceWindow, 40, 0, 35, 45,
+      testWrapCx.drawWindow(win, 40, 0, 35, 45,
                             "green", drawWindowFlags);
 
-      refCx.fillStyle = "green";
+      if (transparentBackground) {
+        refCx.fillStyle = "green";
+      } else {
+        refCx.fillStyle = "white";
+      }
       refCx.fillRect(17, 31, 35, 45);
       refCx.fillStyle = "aqua";
       refCx.fillRect(17 + 10, 31 + 10, 20, 20);
 
       assertSnapshots(testCanvas, refCanvas, true /* equal */,
                       "draw of subrect of source with different background",
                       "reference");
 
       // Test transparency of background not disturbing what is behind
       clear("blue");
 
       testCx.translate(17, 31);
-      testWrapCx.drawWindow(sourceWindow, 40, 0, 35, 45,
+      testWrapCx.drawWindow(win, 40, 0, 35, 45,
                             "transparent", drawWindowFlags);
 
+      if (!transparentBackground) {
+        refCx.fillStyle = "white";
+        refCx.fillRect(17, 31, 35, 35);
+      }
       refCx.fillStyle = "aqua";
       refCx.fillRect(17 + 10, 31 + 10, 20, 20);
 
       assertSnapshots(testCanvas, refCanvas, true /* equal */,
                       "draw of subrect of source with different background",
                       "reference");
 
       // Test that multiple drawWindow calls draw at correct positions.
       clear("blue");
 
       testCx.translate(9, 3);
       // 5, 8 is 5, 2 from the corner of the fuchsia square
-      testWrapCx.drawWindow(sourceWindow, 5, 8, 30, 25,
+      testWrapCx.drawWindow(win, 5, 8, 30, 25,
                             "maroon", drawWindowFlags);
       // 35, 0 is 15, 10 from the corner of the aqua square
-      testWrapCx.drawWindow(sourceWindow, 35, 0, 50, 40,
+      testWrapCx.drawWindow(win, 35, 0, 50, 40,
                             "transparent", drawWindowFlags);
       testCx.translate(15, 0);
       // 85, 5 is 5, 5 from the corner of the yellow square
-      testWrapCx.drawWindow(sourceWindow, 85, 5, 30, 25,
+      testWrapCx.drawWindow(win, 85, 5, 30, 25,
                             "transparent", drawWindowFlags);
 
-      refCx.fillStyle = "maroon";
-      refCx.fillRect(9, 3, 30, 25);
-      refCx.fillStyle = "fuchsia";
-      refCx.fillRect(9 + 5, 3 + 2, 20, 20);
+      if (transparentBackground) {
+        refCx.fillStyle = "maroon";
+        refCx.fillRect(9, 3, 30, 25);
+        refCx.fillStyle = "fuchsia";
+        refCx.fillRect(9 + 5, 3 + 2, 20, 20);
+      } else {
+        refCx.fillStyle = "white";
+        refCx.fillRect(9, 3, 50, 40);
+      }
       refCx.fillStyle = "aqua";
       refCx.fillRect(9 + 15, 3 + 10, 20, 20);
+      if (!transparentBackground) {
+        refCx.fillStyle = "white";
+        refCx.fillRect(9 + 15, 3, 30, 25);
+      }
       refCx.fillStyle = "yellow";
       refCx.fillRect(9 + 15 + 5, 3 + 0 + 5, 20, 20);
 
       assertSnapshots(testCanvas, refCanvas, true /* equal */,
                       "multiple drawWindow calls on top of each other",
                       "reference");
     }
 
     var cxInterfaceWrap = SpecialPowers.wrap(CanvasRenderingContext2D);
 
-    testWithFlags(0);
-    testWithFlags(cxInterfaceWrap.DRAWWINDOW_USE_WIDGET_LAYERS);
-    testWithFlags(cxInterfaceWrap.DRAWWINDOW_USE_WIDGET_LAYERS |
+    testWithFlags(sourceIframe, 0);
+    testWithFlags(sourceWindow,
+                  cxInterfaceWrap.DRAWWINDOW_USE_WIDGET_LAYERS |
                   cxInterfaceWrap.DRAWWINDOW_DRAW_CARET |
                   cxInterfaceWrap.DRAWWINDOW_DRAW_VIEW);
 
+    sourceWindow.close();
+
     SimpleTest.finish();
   }
 
   </script>
 </head>
 <body>
 <a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=">Mozilla Bug </a>
 <iframe id="source" src="file_drawWindow_source.html" width="200" height="100"></iframe>
