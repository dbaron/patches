From: L. David Baron <dbaron@dbaron.org>

Bug 855081 patch 2:  Use a single buffer for the demangled names.  r=jesup

diff --git a/tools/jprof/bfd.cpp b/tools/jprof/bfd.cpp
--- a/tools/jprof/bfd.cpp
+++ b/tools/jprof/bfd.cpp
@@ -182,41 +182,47 @@ void leaky::ReadSymbols(const char *aFil
     }
     symbolFile = lib;
   }
 
   asymbol* store;
   store = bfd_make_empty_symbol(symbolFile);
 
   // Scan symbols
+  size_t demangle_buffer_size = 128;
+  char *demangle_buffer = (char*) malloc(demangle_buffer_size);
   bfd_byte* from = (bfd_byte *) minisyms;
   bfd_byte* fromend = from + symcount * size;
   for (; from < fromend; from += size) {
     asymbol *sym;
     sym = bfd_minisymbol_to_symbol(symbolFile, kDynamic, (const PTR) from, store);
 
     symbol_info syminfo;
     bfd_get_symbol_info (symbolFile, sym, &syminfo);
 
 //    if ((syminfo.type == 'T') || (syminfo.type == 't')) {
       const char* nm = bfd_asymbol_name(sym);
       if (nm && nm[0]) {
         char* dnm = nullptr;
         if (strncmp("__thunk", nm, 7)) {
-          dnm = abi::__cxa_demangle(nm, 0, 0, 0);
+          dnm =
+            abi::__cxa_demangle(nm, demangle_buffer, &demangle_buffer_size, 0);
+          if (dnm) {
+            demangle_buffer = dnm;
+          }
         }
         (*sp)->Init(dnm ? dnm : nm, syminfo.value + aBaseAddress);
-        if (dnm) {
-          free(dnm);
-        }
         NEXT_SYMBOL;
       }
 //    }
   }
 
+  free(demangle_buffer);
+  demangle_buffer = nullptr;
+
   bfd_close(symbolFile);
 
   int interesting = sp - externalSymbols;
   if (!quiet) {
     printf("%s provided %d symbols\n", aFileName,
            interesting - initialSymbols);
   }
   usefulSymbols = interesting;
