From: L. David Baron <dbaron@dbaron.org>

Bug 1277448 patch 2 - Pass __func__ to NS_DebugBreak and friends.  r?froydnj

This will allow them to print the function name in patches 3 and 4.

Note that this does not modify the nsIDebug interface, since that
requires finding relevant JS callers, some of which may be in
extensions.

MozReview-Commit-ID: 43XNc0aTJmM

diff --git a/dom/ipc/ContentChild.cpp b/dom/ipc/ContentChild.cpp
--- a/dom/ipc/ContentChild.cpp
+++ b/dom/ipc/ContentChild.cpp
@@ -751,17 +751,17 @@ ContentChild::SetProcessName(const nsASt
     printf_stderr("\n\nCHILDCHILDCHILDCHILD\n  [%s] debug me @%d\n\n", name,
                   getpid());
     sleep(30);
 #elif defined(OS_WIN)
     // Windows has a decent JIT debugging story, so NS_DebugBreak does the
     // right thing.
     NS_DebugBreak(NS_DEBUG_BREAK,
                  "Invoking NS_DebugBreak() to debug child process",
-                 nullptr, __FILE__, __LINE__);
+                 nullptr, __FILE__, __func__, __LINE__);
 #endif
   }
 
   mProcessName = aName;
   mozilla::ipc::SetThisProcessName(NS_LossyConvertUTF16toASCII(aName).get());
 }
 
 NS_IMETHODIMP
diff --git a/dom/media/AudioStream.cpp b/dom/media/AudioStream.cpp
--- a/dom/media/AudioStream.cpp
+++ b/dom/media/AudioStream.cpp
@@ -29,17 +29,17 @@ namespace mozilla {
 #undef LOG
 #undef LOGW
 #undef LOGE
 
 LazyLogModule gAudioStreamLog("AudioStream");
 // For simple logs
 #define LOG(x, ...) MOZ_LOG(gAudioStreamLog, mozilla::LogLevel::Debug, ("%p " x, this, ##__VA_ARGS__))
 #define LOGW(x, ...) MOZ_LOG(gAudioStreamLog, mozilla::LogLevel::Warning, ("%p " x, this, ##__VA_ARGS__))
-#define LOGE(x, ...) NS_DebugBreak(NS_DEBUG_WARNING, nsPrintfCString("%p " x, this, ##__VA_ARGS__).get(), nullptr, __FILE__, __LINE__)
+#define LOGE(x, ...) NS_DebugBreak(NS_DEBUG_WARNING, nsPrintfCString("%p " x, this, ##__VA_ARGS__).get(), nullptr, __FILE__, __func__, __LINE__)
 
 /**
  * Keep a list of frames sent to the audio engine in each DataCallback along
  * with the playback rate at the moment. Since the playback rate and number of
  * underrun frames can vary in each callback. We need to keep the whole history
  * in order to calculate the playback position of the audio engine correctly.
  */
 class FrameHistory {
diff --git a/dom/media/MediaCache.cpp b/dom/media/MediaCache.cpp
--- a/dom/media/MediaCache.cpp
+++ b/dom/media/MediaCache.cpp
@@ -34,17 +34,17 @@
 namespace mozilla {
 
 #undef LOG
 #undef LOGI
 #undef LOGE
 LazyLogModule gMediaCacheLog("MediaCache");
 #define LOG(...) MOZ_LOG(gMediaCacheLog, LogLevel::Debug, (__VA_ARGS__))
 #define LOGI(...) MOZ_LOG(gMediaCacheLog, LogLevel::Info, (__VA_ARGS__))
-#define LOGE(...) NS_DebugBreak(NS_DEBUG_WARNING, nsPrintfCString(__VA_ARGS__).get(), nullptr, __FILE__, __LINE__)
+#define LOGE(...) NS_DebugBreak(NS_DEBUG_WARNING, nsPrintfCString(__VA_ARGS__).get(), nullptr, __FILE__, __func__, __LINE__)
 
 // For HTTP seeking, if number of bytes needing to be
 // seeked forward is less than this value then a read is
 // done rather than a byte range request.
 //
 // If we assume a 100Mbit connection, and assume reissuing an HTTP seek causes
 // a delay of 200ms, then in that 200ms we could have simply read ahead 2MB. So
 // setting SEEK_VS_READ_THRESHOLD to 1MB sounds reasonable.
diff --git a/dom/media/MediaDecoderStateMachine.cpp b/dom/media/MediaDecoderStateMachine.cpp
--- a/dom/media/MediaDecoderStateMachine.cpp
+++ b/dom/media/MediaDecoderStateMachine.cpp
@@ -60,29 +60,29 @@ using namespace mozilla::media;
             ##__VA_ARGS__)
 #define LOGV(x, ...)                                                           \
   DDMOZ_LOG(gMediaDecoderLog,                                                  \
             LogLevel::Verbose,                                                 \
             "Decoder=%p " x,                                                   \
             mDecoderID,                                                        \
             ##__VA_ARGS__)
 #define LOGW(x, ...) NS_WARNING(nsPrintfCString(FMT(x, ##__VA_ARGS__)).get())
-#define LOGE(x, ...) NS_DebugBreak(NS_DEBUG_WARNING, nsPrintfCString(FMT(x, ##__VA_ARGS__)).get(), nullptr, __FILE__, __LINE__)
+#define LOGE(x, ...) NS_DebugBreak(NS_DEBUG_WARNING, nsPrintfCString(FMT(x, ##__VA_ARGS__)).get(), nullptr, __FILE__, __func__, __LINE__)
 
 // Used by StateObject and its sub-classes
 #define SFMT(x, ...) "Decoder=%p state=%s " x, mMaster->mDecoderID, ToStateStr(GetState()), ##__VA_ARGS__
 #define SLOG(x, ...)                                                           \
   DDMOZ_LOGEX(mMaster,                                                         \
               gMediaDecoderLog,                                                \
               LogLevel::Debug,                                                 \
               "state=%s " x,                                                   \
               ToStateStr(GetState()),                                          \
               ##__VA_ARGS__)
 #define SLOGW(x, ...) NS_WARNING(nsPrintfCString(SFMT(x, ##__VA_ARGS__)).get())
-#define SLOGE(x, ...) NS_DebugBreak(NS_DEBUG_WARNING, nsPrintfCString(SFMT(x, ##__VA_ARGS__)).get(), nullptr, __FILE__, __LINE__)
+#define SLOGE(x, ...) NS_DebugBreak(NS_DEBUG_WARNING, nsPrintfCString(SFMT(x, ##__VA_ARGS__)).get(), nullptr, __FILE__, __func__, __LINE__)
 
 // Certain constants get stored as member variables and then adjusted by various
 // scale factors on a per-decoder basis. We want to make sure to avoid using these
 // constants directly, so we put them in a namespace.
 namespace detail {
 
 // Resume a suspended video decoder to the current playback position plus this
 // time premium for compensating the seeking delay.
diff --git a/ipc/chromium/src/base/logging.cc b/ipc/chromium/src/base/logging.cc
--- a/ipc/chromium/src/base/logging.cc
+++ b/ipc/chromium/src/base/logging.cc
@@ -40,17 +40,17 @@ Logger::~Logger()
   case LOG_FATAL:
     prlevel = LogLevel::Error;
     xpcomlevel = NS_DEBUG_ABORT;
     break;
   }
 
   MOZ_LOG(gChromiumPRLog, prlevel, ("%s:%i: %s", mFile, mLine, mMsg ? mMsg.get() : "<no message>"));
   if (xpcomlevel != -1)
-    NS_DebugBreak(xpcomlevel, mMsg.get(), NULL, mFile, mLine);
+    NS_DebugBreak(xpcomlevel, mMsg.get(), NULL, mFile, nullptr, mLine);
 }
 
 void
 Logger::printf(const char* fmt, ...)
 {
   va_list args;
   va_start(args, fmt);
   mMsg = mozilla::VsmprintfAppend(std::move(mMsg), fmt, args);
diff --git a/security/sandbox/chromium-shim/sandbox/win/loggingCallbacks.h b/security/sandbox/chromium-shim/sandbox/win/loggingCallbacks.h
--- a/security/sandbox/chromium-shim/sandbox/win/loggingCallbacks.h
+++ b/security/sandbox/chromium-shim/sandbox/win/loggingCallbacks.h
@@ -61,17 +61,18 @@ Log(const char* aMessageType,
                    &msgStream);
     }
   }
 
   std::string msg = msgStream.str();
 #if defined(DEBUG)
   // Use NS_DebugBreak directly as we want child process prefix, but not source
   // file or line number.
-  NS_DebugBreak(NS_DEBUG_WARNING, nullptr, msg.c_str(), nullptr, -1);
+  NS_DebugBreak(NS_DEBUG_WARNING, nullptr, msg.c_str(), nullptr,
+                aFunctionName, -1);
 #endif
 
   if (nsContentUtils::IsInitialized()) {
     nsContentUtils::LogMessageToConsole(msg.c_str());
   }
 
   // As we don't always have the facility to log to console use MOZ_LOG as well.
   LOG_D("%s", msg.c_str());
diff --git a/toolkit/components/downloads/DownloadPlatform.cpp b/toolkit/components/downloads/DownloadPlatform.cpp
--- a/toolkit/components/downloads/DownloadPlatform.cpp
+++ b/toolkit/components/downloads/DownloadPlatform.cpp
@@ -69,17 +69,18 @@ DownloadPlatform* DownloadPlatform::GetD
 
 #ifdef MOZ_WIDGET_GTK
 static void gio_set_metadata_done(GObject *source_obj, GAsyncResult *res, gpointer user_data)
 {
   GError *err = nullptr;
   g_file_set_attributes_finish(G_FILE(source_obj), res, nullptr, &err);
   if (err) {
 #ifdef DEBUG
-    NS_DebugBreak(NS_DEBUG_WARNING, "Set file metadata failed: ", err->message, __FILE__, __LINE__);
+    NS_DebugBreak(NS_DEBUG_WARNING, "Set file metadata failed: ", err->message,
+                  __FILE__, __func__, __LINE__);
 #endif
     g_error_free(err);
   }
 }
 #endif
 
 #ifdef XP_MACOSX
 // Caller is responsible for freeing any result (CF Create Rule)
diff --git a/toolkit/xre/nsEmbedFunctions.cpp b/toolkit/xre/nsEmbedFunctions.cpp
--- a/toolkit/xre/nsEmbedFunctions.cpp
+++ b/toolkit/xre/nsEmbedFunctions.cpp
@@ -590,17 +590,17 @@ XRE_InitChildProcess(int aArgc,
                   XRE_ChildProcessTypeToString(XRE_GetProcessType()),
                   base::GetCurrentProcId());
     sleep(GetDebugChildPauseTime());
   }
 #elif defined(OS_WIN)
   if (PR_GetEnv("MOZ_DEBUG_CHILD_PROCESS")) {
     NS_DebugBreak(NS_DEBUG_BREAK,
                   "Invoking NS_DebugBreak() to debug child process",
-                  nullptr, __FILE__, __LINE__);
+                  nullptr, __FILE__, __func__, __LINE__);
   } else if (PR_GetEnv("MOZ_DEBUG_CHILD_PAUSE")) {
     printf_stderr("\n\nCHILDCHILDCHILDCHILD (process type %s)\n  debug me @ %d\n\n",
                   XRE_ChildProcessTypeToString(XRE_GetProcessType()),
                   base::GetCurrentProcId());
     ::Sleep(GetDebugChildPauseTime());
   }
 #endif
 
diff --git a/toolkit/xre/nsSigHandlers.cpp b/toolkit/xre/nsSigHandlers.cpp
--- a/toolkit/xre/nsSigHandlers.cpp
+++ b/toolkit/xre/nsSigHandlers.cpp
@@ -131,33 +131,36 @@ my_glib_log_func(const gchar *log_domain
                  const gchar *message, gpointer user_data);
 }
 
 /* static */ void
 my_glib_log_func(const gchar *log_domain, GLogLevelFlags log_level,
                  const gchar *message, gpointer user_data)
 {
   if (log_level & (G_LOG_LEVEL_ERROR | G_LOG_FLAG_FATAL | G_LOG_FLAG_RECURSION)) {
-    NS_DebugBreak(NS_DEBUG_ASSERTION, message, "glib assertion", __FILE__, __LINE__);
+    NS_DebugBreak(NS_DEBUG_ASSERTION, message, "glib assertion",
+                  __FILE__, __func__, __LINE__);
   } else if (log_level & (G_LOG_LEVEL_CRITICAL | G_LOG_LEVEL_WARNING)) {
-    NS_DebugBreak(NS_DEBUG_WARNING, message, "glib warning", __FILE__, __LINE__);
+    NS_DebugBreak(NS_DEBUG_WARNING, message, "glib warning",
+                  __FILE__, __func__, __LINE__);
   }
 
   orig_log_func(log_domain, log_level, message, nullptr);
 }
 
 #endif
 
 #ifdef SA_SIGINFO
 static void fpehandler(int signum, siginfo_t *si, void *context)
 {
   /* Integer divide by zero or integer overflow. */
   /* Note: FPE_INTOVF is ignored on Intel, PowerPC and SPARC systems. */
   if (si->si_code == FPE_INTDIV || si->si_code == FPE_INTOVF) {
-    NS_DebugBreak(NS_DEBUG_ABORT, "Divide by zero", nullptr, __FILE__, __LINE__);
+    NS_DebugBreak(NS_DEBUG_ABORT, "Divide by zero", nullptr,
+                  __FILE__, __func__, __LINE__);
   }
 
 #ifdef XP_MACOSX
   ucontext_t *uc = (ucontext_t *)context;
 
 #if defined(__i386__) || defined(__amd64__)
   _STRUCT_FP_CONTROL *ctrl = &uc->uc_mcontext->__fs.__fpu_fcw;
   ctrl->__invalid = ctrl->__denorm = ctrl->__zdiv = ctrl->__ovrfl = ctrl->__undfl = ctrl->__precis = 1;
diff --git a/xpcom/base/nsDebug.h b/xpcom/base/nsDebug.h
--- a/xpcom/base/nsDebug.h
+++ b/xpcom/base/nsDebug.h
@@ -45,25 +45,26 @@
  *
  *   NS_WARNING_ASSERTION(NS_SUCCEEDED(rv), "operation failed");
  *
  * @note This is C++-only
  */
 #ifdef __cplusplus
 #ifdef DEBUG
 inline MOZ_MUST_USE bool NS_warn_if_impl(bool aCondition, const char* aExpr,
-                                         const char* aFile, int32_t aLine)
+                                         const char* aFile,
+                                         const char* aFunction, int32_t aLine)
 {
   if (MOZ_UNLIKELY(aCondition)) {
-    NS_DebugBreak(NS_DEBUG_WARNING, nullptr, aExpr, aFile, aLine);
+    NS_DebugBreak(NS_DEBUG_WARNING, nullptr, aExpr, aFile, aFunction, aLine);
   }
   return aCondition;
 }
 #define NS_WARN_IF(condition) \
-  NS_warn_if_impl(condition, #condition, __FILE__, __LINE__)
+  NS_warn_if_impl(condition, #condition, __FILE__, __func__, __LINE__)
 #else
 #define NS_WARN_IF(condition) (bool)(condition)
 #endif
 #endif
 
 /**
  * Test an assertion for truth. If the expression is not true then
  * emit a warning.
@@ -72,17 +73,18 @@ inline MOZ_MUST_USE bool NS_warn_if_impl
  *
  * Note also that the non-debug version of this macro does <b>not</b>
  * evaluate the message argument.
  */
 #ifdef DEBUG
 #define NS_WARNING_ASSERTION(_expr, _msg)                     \
   do {                                                        \
     if (!(_expr)) {                                           \
-      NS_DebugBreak(NS_DEBUG_WARNING, _msg, #_expr, __FILE__, __LINE__); \
+      NS_DebugBreak(NS_DEBUG_WARNING, _msg, #_expr,           \
+                    __FILE__, __func__, __LINE__);            \
     }                                                         \
   } while(false)
 #else
 #define NS_WARNING_ASSERTION(_expr, _msg)  do { /* nothing */ } while(false)
 #endif
 
 /**
  * Test an assertion for truth. If the expression is not true then
@@ -92,54 +94,58 @@ inline MOZ_MUST_USE bool NS_warn_if_impl
  * evaluate the message argument.
  */
 #ifdef DEBUG
 inline void MOZ_PretendNoReturn()
   MOZ_PRETEND_NORETURN_FOR_STATIC_ANALYSIS {}
 #define NS_ASSERTION(expr, str)                               \
   do {                                                        \
     if (!(expr)) {                                            \
-      NS_DebugBreak(NS_DEBUG_ASSERTION, str, #expr, __FILE__, __LINE__); \
-      MOZ_PretendNoReturn();                                         \
+      NS_DebugBreak(NS_DEBUG_ASSERTION, str, #expr,           \
+                    __FILE__, __func__, __LINE__);            \
+      MOZ_PretendNoReturn();                                  \
     }                                                         \
   } while(0)
 #else
 #define NS_ASSERTION(expr, str)        do { /* nothing */ } while(0)
 #endif
 
 /**
  * Log an error message.
  */
 #ifdef DEBUG
 #define NS_ERROR(str)                                         \
   do {                                                        \
-    NS_DebugBreak(NS_DEBUG_ASSERTION, str, "Error", __FILE__, __LINE__); \
+    NS_DebugBreak(NS_DEBUG_ASSERTION, str, "Error",           \
+                  __FILE__, __func__, __LINE__);              \
     MOZ_PretendNoReturn();                                    \
   } while(0)
 #else
 #define NS_ERROR(str)                  do { /* nothing */ } while(0)
 #endif
 
 /**
  * Log a warning message.
  */
 #ifdef DEBUG
 #define NS_WARNING(str)                                       \
-  NS_DebugBreak(NS_DEBUG_WARNING, str, nullptr, __FILE__, __LINE__)
+  NS_DebugBreak(NS_DEBUG_WARNING, str, nullptr,               \
+                __FILE__, __func__, __LINE__)
 #else
 #define NS_WARNING(str)                do { /* nothing */ } while(0)
 #endif
 
 /**
  * Trigger a debugger breakpoint, only in debug builds.
  */
 #ifdef DEBUG
 #define NS_BREAK()                                            \
   do {                                                        \
-    NS_DebugBreak(NS_DEBUG_BREAK, nullptr, nullptr, __FILE__, __LINE__); \
+    NS_DebugBreak(NS_DEBUG_BREAK, nullptr, nullptr,           \
+                  __FILE__, __func__, __LINE__);              \
     MOZ_PretendNoReturn();                                    \
   } while(0)
 #else
 #define NS_BREAK()                     do { /* nothing */ } while(0)
 #endif
 
 /******************************************************************************
 ** Macros for static assertions.  These are used by the sixgill tool.
diff --git a/xpcom/base/nsDebugImpl.cpp b/xpcom/base/nsDebugImpl.cpp
--- a/xpcom/base/nsDebugImpl.cpp
+++ b/xpcom/base/nsDebugImpl.cpp
@@ -117,38 +117,44 @@ nsDebugImpl::Release()
 {
   return 1;
 }
 
 NS_IMETHODIMP
 nsDebugImpl::Assertion(const char* aStr, const char* aExpr,
                        const char* aFile, int32_t aLine)
 {
-  NS_DebugBreak(NS_DEBUG_ASSERTION, aStr, aExpr, aFile, aLine);
+  // NOTE: We should perhaps add an aFunction parameter to the nsIDebug
+  // methods, but it doesn't currently seem worthwhile, since it requires
+  // finding all JS callers, including those in extensions.
+  NS_DebugBreak(NS_DEBUG_ASSERTION, aStr, aExpr, aFile, nullptr, aLine);
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsDebugImpl::Warning(const char* aStr, const char* aFile, int32_t aLine)
 {
-  NS_DebugBreak(NS_DEBUG_WARNING, aStr, nullptr, aFile, aLine);
+  // NOTE: See nsDebugImpl::Assertion above.
+  NS_DebugBreak(NS_DEBUG_WARNING, aStr, nullptr, aFile, nullptr, aLine);
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsDebugImpl::Break(const char* aFile, int32_t aLine)
 {
-  NS_DebugBreak(NS_DEBUG_BREAK, nullptr, nullptr, aFile, aLine);
+  // NOTE: See nsDebugImpl::Assertion above.
+  NS_DebugBreak(NS_DEBUG_BREAK, nullptr, nullptr, aFile, nullptr, aLine);
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsDebugImpl::Abort(const char* aFile, int32_t aLine)
 {
-  NS_DebugBreak(NS_DEBUG_ABORT, nullptr, nullptr, aFile, aLine);
+  // NOTE: See nsDebugImpl::Assertion above.
+  NS_DebugBreak(NS_DEBUG_ABORT, nullptr, nullptr, aFile, nullptr, aLine);
   return NS_OK;
 }
 
 // From toolkit/library/rust/lib.rs
 extern "C" void intentional_panic(const char* message);
 
 NS_IMETHODIMP
 nsDebugImpl::RustPanic(const char* aMessage)
@@ -314,17 +320,17 @@ FixedBuffer::append(const char* aBuf, si
     buffer[curlen] = '\0';
   }
 
   return true;
 }
 
 EXPORT_XPCOM_API(void)
 NS_DebugBreak(uint32_t aSeverity, const char* aStr, const char* aExpr,
-              const char* aFile, int32_t aLine)
+              const char* aFile, const char* aFunction, int32_t aLine)
 {
   // Allow messages to be printed during GC if we are recording or replaying.
   recordreplay::AutoEnsurePassThroughThreadEvents pt;
 
   FixedBuffer nonPIDBuf;
   FixedBuffer buf;
   const char* sevString = "WARNING";
 
diff --git a/xpcom/build/nsXPCOM.h b/xpcom/build/nsXPCOM.h
--- a/xpcom/build/nsXPCOM.h
+++ b/xpcom/build/nsXPCOM.h
@@ -199,21 +199,23 @@ enum
  * environment variable, this function may cause the application to
  * print the warning, print a stacktrace, break into a debugger, or abort
  * immediately.
  *
  * @param aSeverity A NS_DEBUG_* value
  * @param aStr   A readable error message (ASCII, may be null)
  * @param aExpr  The expression evaluated (may be null)
  * @param aFile  The source file containing the assertion (may be null)
+ * @param aFile  The source function containing the assertion (may be null)
  * @param aLine  The source file line number (-1 indicates no line number)
  */
 XPCOM_API(void) NS_DebugBreak(uint32_t aSeverity,
                               const char* aStr, const char* aExpr,
-                              const char* aFile, int32_t aLine);
+                              const char* aFile, const char* aFunction,
+                              int32_t aLine);
 
 /**
  * Perform a stack-walk to a debugging log under various
  * circumstances. Used to aid debugging of leaked object graphs.
  *
  * The NS_Log* functions are available in both debug and release
  * builds of XPCOM, but the output will be useless unless binary
  * debugging symbols for all modules in the stacktrace are available.
