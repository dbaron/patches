From: L. David Baron <dbaron@dbaron.org>

Debugging code for android reftest issue.  (Bug 627842)  DO NOT CHECK IN

diff --git a/layout/generic/nsTextFrameThebes.cpp b/layout/generic/nsTextFrameThebes.cpp
--- a/layout/generic/nsTextFrameThebes.cpp
+++ b/layout/generic/nsTextFrameThebes.cpp
@@ -113,16 +113,20 @@
 #include "gfxContext.h"
 #include "gfxTextRunWordCache.h"
 #include "gfxImageSurface.h"
 
 #include "mozilla/dom/Element.h"
 #include "mozilla/Util.h" // for DebugOnly
 #include "mozilla/LookAndFeel.h"
 
+#ifdef ANDROID
+#include <android/log.h>
+#endif
+
 #ifdef NS_DEBUG
 #undef NOISY_BLINK
 #undef NOISY_REFLOW
 #undef NOISY_TRIM
 #else
 #undef NOISY_BLINK
 #undef NOISY_REFLOW
 #undef NOISY_TRIM
@@ -557,16 +561,29 @@ MakeTextRun(const PRUnichar *aText, PRUi
             PRUint32 aFlags)
 {
     nsAutoPtr<gfxTextRun> textRun;
     if (aLength == 0) {
         textRun = aFontGroup->MakeEmptyTextRun(aParams, aFlags);
     } else if (aLength == 1 && aText[0] == ' ') {
         textRun = aFontGroup->MakeSpaceTextRun(aParams, aFlags);
     } else {
+#ifdef ANDROID
+        if (aLength == 5) {
+          if (!nsCRT::strncmp(aText, NS_LITERAL_STRING("Hello").get(), 5)) {
+              __android_log_print(ANDROID_LOG_INFO, "Gecko", "Rendering 'Hello' at font size %.16f\n", aFontGroup->GetStyle()->size);
+          } else if (!nsCRT::strncmp(aText, NS_LITERAL_STRING("World").get(), 5)) {
+              __android_log_print(ANDROID_LOG_INFO, "Gecko", "Rendering 'World' at font size %.16f\n", aFontGroup->GetStyle()->size);
+          }
+        } else if (aLength == 10) {
+          if (!nsCRT::strncmp(aText, NS_LITERAL_STRING("HelloWorld").get(), 10)) {
+              __android_log_print(ANDROID_LOG_INFO, "Gecko", "Rendering 'HelloWorld' at font size %.16f\n", aFontGroup->GetStyle()->size);
+          }
+        }
+#endif
         textRun = gfxTextRunWordCache::MakeTextRun(aText, aLength, aFontGroup,
             aParams, aFlags);
     }
     if (!textRun)
         return nsnull;
     nsresult rv = gTextRuns->AddObject(textRun);
     if (NS_FAILED(rv)) {
         gTextRuns->RemoveFromCache(textRun);
@@ -584,16 +601,29 @@ MakeTextRun(const PRUint8 *aText, PRUint
             PRUint32 aFlags)
 {
     nsAutoPtr<gfxTextRun> textRun;
     if (aLength == 0) {
         textRun = aFontGroup->MakeEmptyTextRun(aParams, aFlags);
     } else if (aLength == 1 && aText[0] == ' ') {
         textRun = aFontGroup->MakeSpaceTextRun(aParams, aFlags);
     } else {
+#ifdef ANDROID
+        if (aLength == 5) {
+          if (!nsCRT::strncmp(reinterpret_cast<const char*>(aText), "Hello", 5)) {
+              __android_log_print(ANDROID_LOG_INFO, "Gecko", "Rendering 'Hello' at font size %.16f\n", aFontGroup->GetStyle()->size);
+          } else if (!nsCRT::strncmp(reinterpret_cast<const char*>(aText), "World", 5)) {
+              __android_log_print(ANDROID_LOG_INFO, "Gecko", "Rendering 'World' at font size %.16f\n", aFontGroup->GetStyle()->size);
+          }
+        } else if (aLength == 10) {
+          if (!nsCRT::strncmp(reinterpret_cast<const char*>(aText), "HelloWorld", 10)) {
+              __android_log_print(ANDROID_LOG_INFO, "Gecko", "Rendering 'HelloWorld' at font size %.16f\n", aFontGroup->GetStyle()->size);
+          }
+        }
+#endif
         textRun = gfxTextRunWordCache::MakeTextRun(aText, aLength, aFontGroup,
             aParams, aFlags);
     }
     if (!textRun)
         return nsnull;
     nsresult rv = gTextRuns->AddObject(textRun);
     if (NS_FAILED(rv)) {
         gTextRuns->RemoveFromCache(textRun);
