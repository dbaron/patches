
# HG changeset patch
# User David Anderson <danderson@mozilla.com>
# Date 1261527685 28800
# Node ID 167467b7b43980475254beb71c588b5c8a0e1eb6
# Parent a73a47b3bb8309460da7a5489e4d87d6277abbcd
Fixed lazy import regression in upvar resolution, take two (bug 535930, r=dmandelin).

diff --git a/js/src/jstracer.cpp b/js/src/jstracer.cpp
--- a/js/src/jstracer.cpp
+++ b/js/src/jstracer.cpp
@@ -3773,16 +3773,32 @@ TraceRecorder::set(jsval* p, LIns* i, bo
                             ? nativespOffset(p)
                             : nativeGlobalOffset(p)));
 
         writeBack(i, base, disp, demote);
     }
 }
 
 JS_REQUIRES_STACK LIns*
+TraceRecorder::attemptImport(jsval* p)
+{
+    if (LIns* i = tracker.get(p))
+        return i;
+
+    /* If the variable was not known, it could require a lazy import. */
+    CountSlotsVisitor countVisitor(p);
+    VisitStackSlots(countVisitor, cx, callDepth);
+
+    if (countVisitor.stopped() || size_t(p - cx->fp->slots) < cx->fp->script->nslots)
+        return get(p);
+
+    return NULL;
+}
+
+JS_REQUIRES_STACK LIns*
 TraceRecorder::get(jsval* p)
 {
     checkForGlobalObjectReallocation();
     LIns* x = tracker.get(p);
     if (x)
         return x;
     if (isGlobal(p)) {
         unsigned slot = nativeGlobalSlot(p);
@@ -12117,18 +12133,18 @@ TraceRecorder::upvar(JSScript* script, J
      * vr directly with the result, so it is a reference to the same location.
      * It does not work to assign the result to v, because v is an already
      * existing reference that points to something else.
      */
     uint32 cookie = uva->vector[index];
     jsval& vr = js_GetUpvar(cx, script->staticLevel, cookie);
     v = vr;
 
-    if (known(&vr))
-        return get(&vr);
+    if (LIns* ins = attemptImport(&vr))
+        return ins;
 
     /*
      * The upvar is not in the current trace, so get the upvar value exactly as
      * the interpreter does and unbox.
      */
     uint32 level = script->staticLevel - UPVAR_FRAME_SKIP(cookie);
     uint32 cookieSlot = UPVAR_FRAME_SLOT(cookie);
     JSStackFrame* fp = cx->display[level];
diff --git a/js/src/jstracer.h b/js/src/jstracer.h
--- a/js/src/jstracer.h
+++ b/js/src/jstracer.h
@@ -1098,16 +1098,17 @@ class TraceRecorder
 
     nanojit::LIns* addName(nanojit::LIns* ins, const char* name);
 
     nanojit::LIns* writeBack(nanojit::LIns* i, nanojit::LIns* base, ptrdiff_t offset,
                              bool demote);
     JS_REQUIRES_STACK void set(jsval* p, nanojit::LIns* l, bool initializing = false,
                                bool demote = true);
     JS_REQUIRES_STACK nanojit::LIns* get(jsval* p);
+    JS_REQUIRES_STACK nanojit::LIns* attemptImport(jsval* p);
     JS_REQUIRES_STACK nanojit::LIns* addr(jsval* p);
 
     JS_REQUIRES_STACK bool known(jsval* p);
     JS_REQUIRES_STACK void checkForGlobalObjectReallocation();
 
     JS_REQUIRES_STACK TypeConsensus selfTypeStability(SlotMap& smap);
     JS_REQUIRES_STACK TypeConsensus peerTypeStability(SlotMap& smap, const void* ip,
                                                       TreeFragment** peer);
diff --git a/js/src/trace-test/tests/basic/bug535930.js b/js/src/trace-test/tests/basic/bug535930.js
new file mode 100644
--- /dev/null
+++ b/js/src/trace-test/tests/basic/bug535930.js
@@ -0,0 +1,19 @@
+(function () {
+    p = function () {
+        Set()
+    };
+    var Set = function () {};
+    for (var x = 0; x < 5; x++) {
+        Set = function (z) {
+            return function () {
+                [z]
+            }
+        } (x)
+    }
+})()
+
+/*
+ * bug 535930, mistakenly generated code to GetUpvar and crashed inside the call.
+ * so don't crash.
+ */
+
