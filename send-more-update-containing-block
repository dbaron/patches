From: L. David Baron <dbaron@dbaron.org>

Bug 1479859 - Send nsChangeHint_UpdateContainingBlock when containing block-ness changes due to one property change, while another property that might trigger containing block-ness doesn't do so because of the frame type.

diff --git a/layout/style/ComputedStyle.cpp b/layout/style/ComputedStyle.cpp
--- a/layout/style/ComputedStyle.cpp
+++ b/layout/style/ComputedStyle.cpp
@@ -234,24 +234,27 @@ ComputedStyle::CalcStyleDifference(Compu
 
     // This depends on data in nsStyleDisplay and nsStyleEffects, so we do it
     // here
 
     // Note that it's perhaps good for this test to be last because it
     // doesn't use Peek* functions to get the structs on the old
     // context.  But this isn't a big concern because these struct
     // getters should be called during frame construction anyway.
-    if (ThreadsafeStyleDisplay()->IsAbsPosContainingBlockForAppropriateFrame(*this) ==
-        aNewContext->ThreadsafeStyleDisplay()->
-          IsAbsPosContainingBlockForAppropriateFrame(*aNewContext) &&
-        ThreadsafeStyleDisplay()->IsFixedPosContainingBlockForAppropriateFrame(*this) ==
-        aNewContext->ThreadsafeStyleDisplay()->
-          IsFixedPosContainingBlockForAppropriateFrame(*aNewContext)) {
+    const nsStyleDisplay *oldDisp = ThreadsafeStyleDisplay();
+    const nsStyleDisplay *newDisp = aNewContext->ThreadsafeStyleDisplay();
+    if (oldDisp->IsAbsPosContainingBlockForNonSVGTextFrames() ==
+        newDisp->IsAbsPosContainingBlockForNonSVGTextFrames() &&
+        oldDisp->IsFixedPosContainingBlockForNonSVGTextFrames(*this) ==
+        newDisp->IsFixedPosContainingBlockForNonSVGTextFrames(*aNewContext) &&
+        oldDisp->IsFixedPosContainingBlockForTransformSupportingFrames() ==
+        newDisp-> IsFixedPosContainingBlockForTransformSupportingFrames()) {
       // While some styles that cause the frame to be a containing block
-      // has changed, the overall result hasn't.
+      // has changed, the overall result cannot have changed (no matter
+      // what the frame type is).
       hint &= ~nsChangeHint_UpdateContainingBlock;
     }
   }
 
   MOZ_ASSERT(NS_IsHintSubset(hint, nsChangeHint_AllHints),
              "Added a new hint without bumping AllHints?");
   return hint & ~nsChangeHint_NeutralChange;
 }
diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -2393,77 +2393,83 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
   inline mozilla::StyleDisplay GetDisplay(const nsIFrame* aContextFrame) const;
   inline bool IsFloating(const nsIFrame* aContextFrame) const;
   inline bool IsRelativelyPositioned(const nsIFrame* aContextFrame) const;
   inline bool IsAbsolutelyPositioned(const nsIFrame* aContextFrame) const;
 
   // These methods are defined in nsStyleStructInlines.h.
 
   /**
-   * Returns whether the element is a containing block for its
-   * absolutely positioned descendants.
-   * aContextFrame is the frame for which this is the nsStyleDisplay.
-   */
-  inline bool IsAbsPosContainingBlock(const nsIFrame* aContextFrame) const;
-
-  /**
-   * The same as IsAbsPosContainingBlock, except skipping the tests that
-   * are based on the frame rather than the ComputedStyle (thus
-   * potentially returning a false positive).
-   */
-  inline bool IsAbsPosContainingBlockForAppropriateFrame(
-    mozilla::ComputedStyle&) const;
-
-  /**
    * Returns true when the element has the transform property
    * or a related property, and supports CSS transforms.
    * aContextFrame is the frame for which this is the nsStyleDisplay.
    */
   inline bool HasTransform(const nsIFrame* aContextFrame) const;
 
   /**
    * Returns true when the element has the perspective property,
    * and supports CSS transforms. aContextFrame is the frame for
    * which this is the nsStyleDisplay.
    */
   inline bool HasPerspective(const nsIFrame* aContextFrame) const;
 
   /**
+   * Returns whether the element is a containing block for its
+   * absolutely positioned descendants.
+   * aContextFrame is the frame for which this is the nsStyleDisplay.
+   */
+  inline bool IsAbsPosContainingBlock(const nsIFrame* aContextFrame) const;
+
+  /**
+   * Tests for only the sub-parts of IsAbsPosContainingBlock that apply
+   * to nearly all frames, except those that are SVG text frames.
+   *
+   * This should be used only when the caller has the style but not the
+   * frame (i.e., when calculating style changes).
+   *
+   * NOTE: This (unlike IsAbsPosContainingBlock) does not include
+   * IsFixPosContainingBlockForNonSVGTextFrames.
+   */
+  inline bool IsAbsPosContainingBlockForNonSVGTextFrames() const;
+
+  /**
    * Returns true when the element is a containing block for its fixed-pos
    * descendants.
    * aContextFrame is the frame for which this is the nsStyleDisplay.
    */
   inline bool IsFixedPosContainingBlock(const nsIFrame* aContextFrame) const;
 
   /**
-   * The same as IsFixedPosContainingBlock, except skipping the tests that
-   * are based on the frame rather than the ComputedStyle (thus
-   * potentially returning a false positive).
+   * Tests for only the sub-parts of IsFixedPosContainingBlock that apply
+   * to:
+   *  - nearly all frames, except those that are SVG text frames.
+   *  - frames that support CSS transforms and are not SVG text frames.
+   *
+   * This should be used only when the caller has the style but not the
+   * frame (i.e., when calculating style changes).
    */
-  inline bool IsFixedPosContainingBlockForAppropriateFrame(
+  inline bool IsFixedPosContainingBlockForNonSVGTextFrames(
     mozilla::ComputedStyle&) const;
+  inline bool IsFixedPosContainingBlockForTransformSupportingFrames() const;
 
   /**
    * Returns the final combined transform.
    **/
   already_AddRefed<nsCSSValueSharedList> GetCombinedTransform() const {
     if (mCombinedTransform) {
       return do_AddRef(mCombinedTransform);
     }
 
     // backward compatible to gecko-backed style system.
     return mSpecifiedTransform ? do_AddRef(mSpecifiedTransform) : nullptr;
   }
 
 private:
   // Helpers for above functions, which do some but not all of the tests
   // for them (since transform must be tested separately for each).
-  inline bool HasAbsPosContainingBlockStyleInternal() const;
-  inline bool HasFixedPosContainingBlockStyleInternal(
-    mozilla::ComputedStyle&) const;
   void GenerateCombinedTransform();
 };
 
 struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsStyleTable
 {
   explicit nsStyleTable(const nsPresContext* aContext);
   nsStyleTable(const nsStyleTable& aOther);
   ~nsStyleTable();
diff --git a/layout/style/nsStyleStructInlines.h b/layout/style/nsStyleStructInlines.h
--- a/layout/style/nsStyleStructInlines.h
+++ b/layout/style/nsStyleStructInlines.h
@@ -149,17 +149,17 @@ nsStyleDisplay::HasTransform(const nsIFr
 bool
 nsStyleDisplay::HasPerspective(const nsIFrame* aContextFrame) const
 {
   MOZ_ASSERT(aContextFrame->StyleDisplay() == this, "unexpected aContextFrame");
   return HasPerspectiveStyle() && aContextFrame->IsFrameOfType(nsIFrame::eSupportsCSSTransforms);
 }
 
 bool
-nsStyleDisplay::HasFixedPosContainingBlockStyleInternal(
+nsStyleDisplay::IsFixedPosContainingBlockForNonSVGTextFrames(
   mozilla::ComputedStyle& aStyle) const
 {
   // NOTE: Any CSS properties that influence the output of this function
   // should have the FIXPOS_CB flag set on them.
   NS_ASSERTION(aStyle.ThreadsafeStyleDisplay() == this, "unexpected aStyle");
 
   if (IsContainPaint()) {
     return true;
@@ -168,69 +168,61 @@ nsStyleDisplay::HasFixedPosContainingBlo
   if (mWillChangeBitField & NS_STYLE_WILL_CHANGE_FIXPOS_CB) {
     return true;
   }
 
   return aStyle.ThreadsafeStyleEffects()->HasFilters();
 }
 
 bool
-nsStyleDisplay::IsFixedPosContainingBlockForAppropriateFrame(
-  mozilla::ComputedStyle& aStyle) const
+nsStyleDisplay::IsFixedPosContainingBlockForTransformSupportingFrames() const
 {
   // NOTE: Any CSS properties that influence the output of this function
   // should have the FIXPOS_CB flag set on them.
-  return HasFixedPosContainingBlockStyleInternal(aStyle) ||
-         HasTransformStyle() || HasPerspectiveStyle();
+  return HasTransformStyle() || HasPerspectiveStyle();
 }
 
 bool
 nsStyleDisplay::IsFixedPosContainingBlock(const nsIFrame* aContextFrame) const
 {
+  mozilla::ComputedStyle *style = aContextFrame->Style();
+  NS_ASSERTION(style->ThreadsafeStyleDisplay() == this,
+               "unexpected aContextFrame");
   // NOTE: Any CSS properties that influence the output of this function
   // should have the FIXPOS_CB flag set on them.
-  if (!HasFixedPosContainingBlockStyleInternal(*aContextFrame->Style()) &&
-      !HasTransform(aContextFrame) && !HasPerspective(aContextFrame)) {
+  if (!IsFixedPosContainingBlockForNonSVGTextFrames(*style) &&
+      (!IsFixedPosContainingBlockForTransformSupportingFrames() ||
+       !aContextFrame->IsFrameOfType(nsIFrame::eSupportsCSSTransforms))) {
     return false;
   }
   return !nsSVGUtils::IsInSVGTextSubtree(aContextFrame);
 }
 
 bool
-nsStyleDisplay::HasAbsPosContainingBlockStyleInternal() const
+nsStyleDisplay::IsAbsPosContainingBlockForNonSVGTextFrames() const
 {
   // NOTE: Any CSS properties that influence the output of this function
   // should have the ABSPOS_CB set on them.
   return IsAbsolutelyPositionedStyle() ||
          IsRelativelyPositionedStyle() ||
          (mWillChangeBitField & NS_STYLE_WILL_CHANGE_ABSPOS_CB);
 }
 
 bool
-nsStyleDisplay::IsAbsPosContainingBlockForAppropriateFrame(
-  mozilla::ComputedStyle& aStyle) const
-{
-  NS_ASSERTION(aStyle.ThreadsafeStyleDisplay() == this, "unexpected aStyle");
-  // NOTE: Any CSS properties that influence the output of this function
-  // should have the ABSPOS_CB set on them.
-  return HasAbsPosContainingBlockStyleInternal() ||
-         IsFixedPosContainingBlockForAppropriateFrame(aStyle);
-}
-
-bool
 nsStyleDisplay::IsAbsPosContainingBlock(const nsIFrame* aContextFrame) const
 {
-  NS_ASSERTION(aContextFrame->Style()->ThreadsafeStyleDisplay() == this,
+  mozilla::ComputedStyle *style = aContextFrame->Style();
+  NS_ASSERTION(style->ThreadsafeStyleDisplay() == this,
                "unexpected aContextFrame");
   // NOTE: Any CSS properties that influence the output of this function
   // should have the ABSPOS_CB set on them.
-  if (!HasAbsPosContainingBlockStyleInternal() &&
-      !HasFixedPosContainingBlockStyleInternal(*aContextFrame->Style()) &&
-      !HasTransform(aContextFrame) &&
-      !HasPerspective(aContextFrame)) {
+  if (!IsAbsPosContainingBlockForNonSVGTextFrames() &&
+      !IsFixedPosContainingBlockForNonSVGTextFrames(*style) &&
+      (!IsFixedPosContainingBlockForTransformSupportingFrames() ||
+       !aContextFrame->IsFrameOfType(nsIFrame::eSupportsCSSTransforms))) {
     return false;
   }
   return !nsSVGUtils::IsInSVGTextSubtree(aContextFrame);
 }
 
 bool
 nsStyleDisplay::IsRelativelyPositioned(const nsIFrame* aContextFrame) const
 {
diff --git a/testing/web-platform/meta/MANIFEST.json b/testing/web-platform/meta/MANIFEST.json
--- a/testing/web-platform/meta/MANIFEST.json
+++ b/testing/web-platform/meta/MANIFEST.json
@@ -163634,16 +163634,40 @@
       [
        "/css/filter-effects/filter-cb-abspos-inline-001-ref.html",
        "=="
       ]
      ],
      {}
     ]
    ],
+   "css/filter-effects/filter-cb-abspos-inline-002.html": [
+    [
+     "/css/filter-effects/filter-cb-abspos-inline-002.html",
+     [
+      [
+       "/css/filter-effects/filter-cb-abspos-inline-001-ref.html",
+       "=="
+      ]
+     ],
+     {}
+    ]
+   ],
+   "css/filter-effects/filter-cb-abspos-inline-003.html": [
+    [
+     "/css/filter-effects/filter-cb-abspos-inline-003.html",
+     [
+      [
+       "/css/filter-effects/filter-cb-abspos-inline-003-ref.html",
+       "=="
+      ]
+     ],
+     {}
+    ]
+   ],
    "css/filter-effects/filter-contrast-001.html": [
     [
      "/css/filter-effects/filter-contrast-001.html",
      [
       [
        "/css/filter-effects/filter-contrast-001-ref.html",
        "=="
       ]
@@ -265920,16 +265944,21 @@
      {}
     ]
    ],
    "css/filter-effects/filter-cb-abspos-inline-001-ref.html": [
     [
      {}
     ]
    ],
+   "css/filter-effects/filter-cb-abspos-inline-003-ref.html": [
+    [
+     {}
+    ]
+   ],
    "css/filter-effects/filter-contrast-001-ref.html": [
     [
      {}
     ]
    ],
    "css/filter-effects/filter-contrast-002-ref.html": [
     [
      {}
@@ -554238,16 +554267,28 @@
   "css/filter-effects/filter-cb-abspos-inline-001-ref.html": [
    "ae45dd6229ebb3acb7a2c4e6f8710ba39c6e81cd",
    "support"
   ],
   "css/filter-effects/filter-cb-abspos-inline-001.html": [
    "f9040d30c64dd43d70c77d099440f8dc5d17d80f",
    "reftest"
   ],
+  "css/filter-effects/filter-cb-abspos-inline-002.html": [
+   "2de0c91eed493d873e9a66128e70bbae0bd502a8",
+   "reftest"
+  ],
+  "css/filter-effects/filter-cb-abspos-inline-003-ref.html": [
+   "a946e7a6f307010daa3be7e34b6b01b5ae202907",
+   "support"
+  ],
+  "css/filter-effects/filter-cb-abspos-inline-003.html": [
+   "37437f0df3d7ac7d0768d1ef80261f676c792e14",
+   "reftest"
+  ],
   "css/filter-effects/filter-contrast-001-ref.html": [
    "5e8966407b958bf34926eab4ed111a69406723e3",
    "support"
   ],
   "css/filter-effects/filter-contrast-001.html": [
    "03978e2eaa82b9b3f1ad897299e46626969a5720",
    "reftest"
   ],
diff --git a/testing/web-platform/tests/css/filter-effects/filter-cb-abspos-inline-002.html b/testing/web-platform/tests/css/filter-effects/filter-cb-abspos-inline-002.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/css/filter-effects/filter-cb-abspos-inline-002.html
@@ -0,0 +1,40 @@
+<!DOCTYPE html>
+<meta charset=UTF-8>
+<title>CSS Filter: Establishing containing block for absolutely-positioned elements, on an inline element</title>
+<link rel="author" title="L. David Baron" href="https://dbaron.org/">
+<link rel="author" title="Mozilla Corporation" href="http://mozilla.com/">
+<link rel="match" href="filter-cb-abspos-inline-001-ref.html">
+<link rel="help" href="https://drafts.fxtf.org/filter-effects-1/#FilterProperty">
+<link rel="help" href="https://drafts.fxtf.org/filter-effects-1/#supported-filter-functions">
+<meta name="flags" content="dom">
+<meta name="assert" content="A value other than none for the filter property results in the creation of a containing block for absolute and fixed positioned descendants unless the element it applies to is a document root element in the current browsing context.">
+<meta name="assert" content="A value of 100% leaves the input unchanged.">
+<style>
+
+#cb {
+    perspective: 100px;
+}
+
+#abspos {
+    position: absolute;
+    top: 0;
+    left: 0;
+    width: 10px;
+    height: 10px;
+    background: blue;
+}
+
+</style>
+<script>
+
+window.addEventListener("load", function window_load(event) {
+    var body = document.body;
+    body.offsetTop; // flush layout
+    document.getElementById("cb").style.filter = "brightness(100%)";
+});
+
+</script>
+
+<div>
+    <span id="cb">Blue box should cover top-left corner of this sentence.<span id="abspos"></span></span>
+</div>
diff --git a/testing/web-platform/tests/css/filter-effects/filter-cb-abspos-inline-003-ref.html b/testing/web-platform/tests/css/filter-effects/filter-cb-abspos-inline-003-ref.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/css/filter-effects/filter-cb-abspos-inline-003-ref.html
@@ -0,0 +1,10 @@
+<!DOCTYPE html>
+<meta charset=UTF-8>
+<title>CSS Filter: Establishing containing block for absolutely-positioned elements, on an inline element</title>
+<link rel="author" title="L. David Baron" href="https://dbaron.org/">
+<link rel="author" title="Mozilla Corporation" href="http://mozilla.com/">
+<meta name="flags" content="">
+
+<div>
+    <span id="cb">The blue box should not be visible.</span>
+</div>
diff --git a/testing/web-platform/tests/css/filter-effects/filter-cb-abspos-inline-003.html b/testing/web-platform/tests/css/filter-effects/filter-cb-abspos-inline-003.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/css/filter-effects/filter-cb-abspos-inline-003.html
@@ -0,0 +1,41 @@
+<!DOCTYPE html>
+<meta charset=UTF-8>
+<title>CSS Filter: Establishing containing block for absolutely-positioned elements, on an inline element</title>
+<link rel="author" title="L. David Baron" href="https://dbaron.org/">
+<link rel="author" title="Mozilla Corporation" href="http://mozilla.com/">
+<link rel="match" href="filter-cb-abspos-inline-003-ref.html">
+<link rel="help" href="https://drafts.fxtf.org/filter-effects-1/#FilterProperty">
+<link rel="help" href="https://drafts.fxtf.org/filter-effects-1/#supported-filter-functions">
+<meta name="flags" content="dom">
+<meta name="assert" content="A value other than none for the filter property results in the creation of a containing block for absolute and fixed positioned descendants unless the element it applies to is a document root element in the current browsing context.">
+<meta name="assert" content="A value of 100% leaves the input unchanged.">
+<!-- Would be good to have a citation that filter clips overflow, but I can't find it... -->
+<style>
+
+#cb {
+    perspective: 100px;
+}
+
+#abspos {
+    position: absolute;
+    top: 0;
+    right: 0;
+    width: 10px;
+    height: 10px;
+    background: blue;
+}
+
+</style>
+<script>
+
+window.addEventListener("load", function window_load(event) {
+    var body = document.body;
+    body.offsetTop; // flush layout
+    document.getElementById("cb").style.filter = "";
+});
+
+</script>
+
+<div>
+    <span id="cb" style="filter: brightness(100%)">The blue box should not be visible.<span id="abspos"></span></span>
+</div>
