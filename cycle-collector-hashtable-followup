Followup fixes to making cycle collector use more efficient hashtables.  b=377606

diff --git a/js/src/xpconnect/src/nsXPConnect.cpp b/js/src/xpconnect/src/nsXPConnect.cpp
--- a/js/src/xpconnect/src/nsXPConnect.cpp
+++ b/js/src/xpconnect/src/nsXPConnect.cpp
@@ -115,8 +115,6 @@ typedef nsBaseHashtable<nsVoidPtrHashKey
 typedef nsBaseHashtable<nsVoidPtrHashKey, nsISupports*, nsISupports*> ScopeSet;
 #endif
 
-#define OBJ_REFCOUNT_ENTRIES 100000
-
 static const PLDHashTableOps RefCountOps =
 {
     PL_DHashAllocTable,
@@ -159,8 +157,7 @@ struct JSObjectRefcounts
     void InitRefCounts()
     {
         if(!PL_DHashTableInit(&mRefCounts, &RefCountOps, nsnull,
-                              sizeof(ObjRefCount),
-                              PL_DHASH_DEFAULT_CAPACITY(OBJ_REFCOUNT_ENTRIES)))
+                              sizeof(ObjRefCount), 65536))
             mRefCounts.ops = nsnull;
     }
     void Clear()
diff --git a/xpcom/base/nsCycleCollector.cpp b/xpcom/base/nsCycleCollector.cpp
--- a/xpcom/base/nsCycleCollector.cpp
+++ b/xpcom/base/nsCycleCollector.cpp
@@ -326,8 +326,6 @@ InitPtrInfo(PLDHashTable *table, PLDHash
     return PR_TRUE;
 }
 
-#define GCTABLE_N_ENTRIES 100000
-
 static PLDHashTableOps GCTableOps = {
     PL_DHashAllocTable,
     PL_DHashFreeTable,
@@ -356,7 +354,7 @@ struct GCTable
     void Init()
     {
         if (!PL_DHashTableInit(&mTab, &GCTableOps, nsnull, sizeof(PtrInfo),
-                               PL_DHASH_DEFAULT_CAPACITY(GCTABLE_N_ENTRIES)))
+                               32768)
             mTab.ops = nsnull;
     }
     void Clear()
