From: L. David Baron <dbaron@dbaron.org>

Add backend for the performance parts of a top-like extension.

diff --git a/dom/base/nsGlobalWindow.cpp b/dom/base/nsGlobalWindow.cpp
--- a/dom/base/nsGlobalWindow.cpp
+++ b/dom/base/nsGlobalWindow.cpp
@@ -175,16 +175,17 @@
 #include "nsXPCOMCID.h"
 #include "mozilla/Logging.h"
 #include "prenv.h"
 #include "prprf.h"
 
 #include "mozilla/dom/MessageChannel.h"
 #include "mozilla/dom/indexedDB/IDBFactory.h"
 #include "mozilla/dom/Promise.h"
+#include "mozilla/dom/PagePerformanceTracker.h"
 
 #ifdef MOZ_GAMEPAD
 #include "mozilla/dom/Gamepad.h"
 #include "mozilla/dom/GamepadService.h"
 #endif
 
 #include "mozilla/dom/VRDevice.h"
 
@@ -12776,16 +12777,18 @@ void
 nsGlobalWindow::RunTimeout(nsTimeout *aTimeout)
 {
   // If a modal dialog is open for this window, return early. Pending
   // timeouts will run when the modal dialog is dismissed.
   if (IsInModalState() || mTimeoutsSuspendDepth) {
     return;
   }
 
+  AutoCountPerformance<nsPIDOMWindow> ap(this);
+
   NS_ASSERTION(IsInnerWindow(), "Timeout running on outer window!");
   NS_ASSERTION(!IsFrozen(), "Timeout running on a window in the bfcache!");
 
   nsTimeout *nextTimeout;
   nsTimeout *last_expired_timeout, *last_insertion_point;
   uint32_t firingDepth = mTimeoutFiringDepth + 1;
 
   // Make sure that the window and the script context don't go away as
diff --git a/layout/inspector/PagePerformanceTracker.cpp b/layout/inspector/PagePerformanceTracker.cpp
new file mode 100644
--- /dev/null
+++ b/layout/inspector/PagePerformanceTracker.cpp
@@ -0,0 +1,63 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "mozilla/dom/PagePerformanceTracker.h"
+#include "nsIDocument.h"
+#include "nsTArray.h"
+#include "mozilla/TimeStamp.h"
+
+using namespace mozilla;
+using namespace dom;
+
+struct PagePerformanceTrackerData {
+  // stack state
+  nsTArray< nsCOMPtr<nsIDocument> > mCounterStack;
+  TimeStamp mLastEvent;
+
+  void AccumulateTime() {
+    if (!mCounterStack.IsEmpty()) {
+      nsIDocument *topDocument = mCounterStack.LastElement();
+      TimeStamp currentTime = TimeStamp::Now();
+      AccumulateTime(topDocument, currentTime - mLastEvent);
+      mLastEvent = currentTime;
+    }
+  }
+
+  void AccumulateTime(nsIDocument* aDocument, TimeDuration aDuration)
+  {
+    // FIXME: WRITE ME
+  }
+
+  // accumulated data
+};
+
+static PagePerformanceTrackerData *gData = nullptr;
+
+/* static */ bool
+PagePerformanceTracker::gRecordingPerformance = false;
+
+/* static */ void
+PagePerformanceTracker::EnterCounter(nsIDocument* aDocument)
+{
+  PagePerformanceTrackerData *data = gData;
+  if (!data) {
+    data = gData = new PagePerformanceTrackerData();
+  }
+
+  // FIXME: Find the document we care about from aDocument
+
+  data->AccumulateTime();
+  data->mCounterStack.AppendElement(aDocument);
+}
+
+/* static */ void
+PagePerformanceTracker::ExitCounter()
+{
+  PagePerformanceTrackerData *data = gData;
+  MOZ_ASSERT(data, "unbalanced enter/exit");
+  MOZ_ASSERT(!data->mCounterStack.IsEmpty(), "unbalanced enter/exit");
+
+  data->AccumulateTime();
+  data->mCounterStack.RemoveElementAt(data->mCounterStack.Length() - 1);
+}
diff --git a/layout/inspector/PagePerformanceTracker.h b/layout/inspector/PagePerformanceTracker.h
new file mode 100644
--- /dev/null
+++ b/layout/inspector/PagePerformanceTracker.h
@@ -0,0 +1,115 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_PagePerformanceTracker_h_
+#define mozilla_dom_PagePerformanceTracker_h_
+
+#include "nsIDocument.h"
+#include "nsIPresShell.h"
+#include "nsViewManager.h"
+#include "nsPIDOMWindow.h"
+
+namespace mozilla {
+namespace dom {
+
+class PagePerformanceTracker {
+public:
+  static bool gRecordingPerformance;
+
+  /**
+   * Notify that we're beginning or ending processing of events for
+   * a document.  Should only be called when gRecordingPerformance is
+   * true when EnterCounter would be called.
+   *
+   * Use AutoCountPerformance RAII class instead of calling directly.
+   */
+  static void EnterCounter(nsIDocument* aDocument);
+  static void ExitCounter();
+};
+
+template <class DocumentRelatedObject>
+struct DocumentRelatedObjectTraits
+{
+};
+
+template <class DocumentRelatedObject>
+class AutoCountPerformance
+{
+public:
+  AutoCountPerformance(DocumentRelatedObject* aObject)
+    : mRecordingPerformance(PagePerformanceTracker::gRecordingPerformance)
+  {
+    if (mRecordingPerformance) {
+      nsIDocument *doc = 
+        DocumentRelatedObjectTraits<DocumentRelatedObject>::FindDocument(aObject);
+      if (doc) {
+        PagePerformanceTracker::EnterCounter(doc);
+      } else {
+        mRecordingPerformance = false;
+      }
+    }
+  }
+
+  ~AutoCountPerformance()
+  {
+    if (mRecordingPerformance) {
+      PagePerformanceTracker::ExitCounter();
+    }
+  }
+
+private:
+  bool mRecordingPerformance;
+};
+
+template <>
+struct DocumentRelatedObjectTraits<nsIPresShell>
+{
+  static nsIDocument*
+  FindDocument(nsIPresShell* aPresShell)
+  {
+    if (!aPresShell) {
+      return nullptr;
+    }
+
+    return aPresShell->GetDocument();
+  }
+};
+
+template <>
+struct DocumentRelatedObjectTraits<nsViewManager>
+{
+  static nsIDocument*
+  FindDocument(nsViewManager* aViewManager)
+  {
+    if (!aViewManager) {
+      return nullptr;
+    }
+
+    nsIPresShell *presShell = aViewManager->GetPresShell();
+    return DocumentRelatedObjectTraits<nsIPresShell>::FindDocument(presShell);
+  }
+};
+
+template <>
+struct DocumentRelatedObjectTraits<nsPIDOMWindow>
+{
+  static nsIDocument*
+  FindDocument(nsPIDOMWindow* aDOMWindow)
+  {
+    if (!aDOMWindow) {
+      return nullptr;
+    }
+
+    if (aDOMWindow->IsOuterWindow()) {
+      aDOMWindow = aDOMWindow->GetCurrentInnerWindow();
+    }
+
+    return aDOMWindow->GetExtantDoc();
+  }
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif /* !defined(mozilla_dom_PagePerformanceTracker_h_) */
diff --git a/layout/inspector/inPerfMonitor.cpp b/layout/inspector/inPerfMonitor.cpp
new file mode 100644
--- /dev/null
+++ b/layout/inspector/inPerfMonitor.cpp
@@ -0,0 +1,36 @@
+/* vim: set shiftwidth=2 tabstop=8 autoindent cindent expandtab: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is __________________________________________.
+ *
+ * The Initial Developer of the Original Code is the Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   L. David Baron <dbaron@dbaron.org>, Mozilla Corporation (original author)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
diff --git a/layout/inspector/inPerfMonitor.h b/layout/inspector/inPerfMonitor.h
new file mode 100644
--- /dev/null
+++ b/layout/inspector/inPerfMonitor.h
@@ -0,0 +1,36 @@
+/* vim: set shiftwidth=2 tabstop=8 autoindent cindent expandtab: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is __________________________________________.
+ *
+ * The Initial Developer of the Original Code is the Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   L. David Baron <dbaron@dbaron.org>, Mozilla Corporation (original author)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
diff --git a/layout/inspector/moz.build b/layout/inspector/moz.build
--- a/layout/inspector/moz.build
+++ b/layout/inspector/moz.build
@@ -21,24 +21,30 @@ XPIDL_SOURCES += [
 
 XPIDL_MODULE = 'inspector'
 
 EXPORTS += [
     'nsFontFace.h',
     'nsFontFaceList.h',
 ]
 
+EXPORTS.mozilla.dom += [
+    'PagePerformanceTracker.h',
+]
+
 UNIFIED_SOURCES += [
     'inCSSValueSearch.cpp',
     'inDeepTreeWalker.cpp',
     'inDOMUtils.cpp',
     'inLayoutUtils.cpp',
+    'inPerfMonitor.cpp',
     'inSearchLoop.cpp',
     'nsFontFace.cpp',
     'nsFontFaceList.cpp',
+    'PagePerformanceTracker.cpp',
 ]
 
 if CONFIG['MOZ_XUL']:
     UNIFIED_SOURCES += [
         'inDOMView.cpp',
     ]
 
 # REVIEW: This covers clang and non-Windows icc, right?
diff --git a/view/nsViewManager.cpp b/view/nsViewManager.cpp
--- a/view/nsViewManager.cpp
+++ b/view/nsViewManager.cpp
@@ -23,16 +23,17 @@
 #include "nsRefreshDriver.h"
 #include "mozilla/Preferences.h"
 #include "nsContentUtils.h" // for nsAutoScriptBlocker
 #include "nsLayoutUtils.h"
 #include "Layers.h"
 #include "gfxPlatform.h"
 #include "gfxPrefs.h"
 #include "nsIDocument.h"
+#include "mozilla/dom/PagePerformanceTracker.h"
 
 /**
    XXX TODO XXX
 
    DeCOMify newly private methods
    Optimize view storage
 */
 
@@ -742,16 +743,18 @@ void nsViewManager::DidPaintWindow()
 void
 nsViewManager::DispatchEvent(WidgetGUIEvent *aEvent,
                              nsView* aView,
                              nsEventStatus* aStatus)
 {
   PROFILER_LABEL("nsViewManager", "DispatchEvent",
     js::ProfileEntry::Category::EVENTS);
 
+  dom::AutoCountPerformance<nsViewManager> ap(this);
+
   WidgetMouseEvent* mouseEvent = aEvent->AsMouseEvent();
   if ((mouseEvent &&
        // Ignore mouse events that we synthesize.
        mouseEvent->reason == WidgetMouseEvent::eReal &&
        // Ignore mouse exit and enter (we'll get moves if the user
        // is really moving the mouse) since we get them when we
        // create and destroy widgets.
        mouseEvent->mMessage != eMouseExitFromWidget &&
