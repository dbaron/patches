From: L. David Baron <dbaron@dbaron.org>

Bug N patch 1 - Depend on the animation-only style flush for updating animations

diff --git a/layout/base/RestyleManager.cpp b/layout/base/RestyleManager.cpp
--- a/layout/base/RestyleManager.cpp
+++ b/layout/base/RestyleManager.cpp
@@ -1707,16 +1707,17 @@ RestyleManager::ProcessPendingRestyles()
   // Before we process any restyles, we need to ensure that style
   // resulting from any animations is up-to-date, so that if any style
   // changes we cause trigger transitions, we have the correct old style
   // for starting the transition.
   bool haveNonAnimation =
     mHavePendingNonAnimationRestyles || mDoRebuildAllStyleData;
   if (haveNonAnimation) {
     IncrementAnimationGeneration();
+    // FIXME: ... and we do this!
     UpdateOnlyAnimationStyles();
   } else {
     // If we don't have non-animation style updates, then we have queued
     // up animation style updates from the refresh driver tick.  This
     // doesn't necessarily include *all* animation style updates, since
     // we might be suppressing main-thread updates for some animations,
     // so we don't want to call UpdateOnlyAnimationStyles, which updates
     // all animations.  In other words, the work that we're about to do
@@ -1730,16 +1731,17 @@ RestyleManager::ProcessPendingRestyles()
     // want to tell the transition manager to act as though we're in
     // UpdateOnlyAnimationStyles.
     //
     // FIXME: In the future, we might want to refactor the way the
     // animation and transition manager do their refresh driver ticks so
     // that we can use UpdateOnlyAnimationStyles, with a different
     // boolean argument, for this update as well, instead of having them
     // post style updates in their WillRefresh methods.
+    // ... fix this!
     mPresContext->TransitionManager()->SetInAnimationOnlyStyleUpdate(true);
   }
 
   ProcessRestyles(mPendingRestyles);
 
   if (!haveNonAnimation) {
     mPresContext->TransitionManager()->SetInAnimationOnlyStyleUpdate(false);
   }
diff --git a/layout/base/nsPresShell.cpp b/layout/base/nsPresShell.cpp
--- a/layout/base/nsPresShell.cpp
+++ b/layout/base/nsPresShell.cpp
@@ -4070,16 +4070,17 @@ PresShell::FlushPendingNotifications(moz
 
       mPresContext->FlushCounterStyles();
 
       // Flush any requested SMIL samples.
       if (mDocument->HasAnimationController()) {
         mDocument->GetAnimationController()->FlushResampleRequests();
       }
 
+      // FIXME: ... and we do this!
       if (aFlush.mFlushAnimations &&
           !mPresContext->StyleUpdateForAllAnimationsIsUpToDate()) {
         if (mPresContext->AnimationManager()) {
           mPresContext->AnimationManager()->
             FlushAnimations(CommonAnimationManager::Cannot_Throttle);
         }
         if (mPresContext->TransitionManager()) {
           mPresContext->TransitionManager()->
diff --git a/layout/style/AnimationCommon.cpp b/layout/style/AnimationCommon.cpp
--- a/layout/style/AnimationCommon.cpp
+++ b/layout/style/AnimationCommon.cpp
@@ -461,16 +461,17 @@ CommonAnimationManager::WillRefresh(Time
     // Someone might be keeping mPresContext alive past the point
     // where it has been torn down; don't bother doing anything in
     // this case.  But do get rid of all our animations so we stop
     // triggering refreshes.
     RemoveAllElementCollections();
     return;
   }
 
+  // FIXME: We do this...
   FlushAnimations(Can_Throttle);
 }
 
 #ifdef DEBUG
 /* static */ void
 CommonAnimationManager::Initialize()
 {
   const auto& info = CommonAnimationManager::sLayerAnimationInfo;
