From: L. David Baron <dbaron@dbaron.org>

Remove unused system metrics from nsILookAndFeel and implementations.  (Bug 599657)  r=roc  a=joedrew

diff --git a/widget/public/nsILookAndFeel.h b/widget/public/nsILookAndFeel.h
--- a/widget/public/nsILookAndFeel.h
+++ b/widget/public/nsILookAndFeel.h
@@ -38,21 +38,20 @@
 #ifndef __nsILookAndFeel
 #define __nsILookAndFeel
 #include "nsISupports.h"
 #include "nsColor.h"
 
   // for |#ifdef NS_DEBUG|
 struct nsSize;
 
-
-// {3fd2930f-1040-4d08-b638-0b3f134e6b6f}
+// 2e89c566-0a31-4c93-bdff-222651df45a0
 #define NS_ILOOKANDFEEL_IID \
-{ 0xc23ca876, 0x6ecf, 0x49c6, \
-    { 0xb2, 0xb4, 0x5b, 0xe5, 0x16, 0xb5, 0x0e, 0x28 } }
+{ 0x2e89c566, 0x0a31, 0x4c93, \
+  { 0xbd, 0xff, 0x22, 0x26, 0x51, 0xdf, 0x45, 0xa0 } }
 
 class nsILookAndFeel: public nsISupports {
 public:
     NS_DECLARE_STATIC_IID_ACCESSOR(NS_ILOOKANDFEEL_IID)
 
   // When modifying this list, also modify nsXPLookAndFeel::sColorPrefs
   // in widget/src/xpwidgts/nsXPLookAndFeel.cpp.
   typedef enum {
@@ -174,48 +173,26 @@ public:
 
     // keep this one last, please
     eColor_LAST_COLOR
   } nsColorID;
 
   // When modifying this list, also modify nsXPLookAndFeel::sIntPrefs
   // in widget/src/xpwidgts/nsXPLookAndFeel.cpp.
   typedef enum {
-    eMetric_WindowTitleHeight,
-    eMetric_WindowBorderWidth,
-    eMetric_WindowBorderHeight,
-    eMetric_Widget3DBorder,
-    eMetric_TextFieldBorder,                              // Native border size
-    eMetric_TextFieldHeight,
-    eMetric_TextVerticalInsidePadding,                    // needed only because of GTK
-    eMetric_TextShouldUseVerticalInsidePadding,           // needed only because of GTK
-    eMetric_TextHorizontalInsideMinimumPadding,  
-    eMetric_TextShouldUseHorizontalInsideMinimumPadding,  // needed only because of GTK
-    eMetric_ButtonHorizontalInsidePaddingNavQuirks,  
-    eMetric_ButtonHorizontalInsidePaddingOffsetNavQuirks, 
-    eMetric_CheckboxSize,
-    eMetric_RadioboxSize,
-    
-    eMetric_ListShouldUseHorizontalInsideMinimumPadding,  // needed only because of GTK
-    eMetric_ListHorizontalInsideMinimumPadding,         
-
-    eMetric_ListShouldUseVerticalInsidePadding,           // needed only because of GTK
-    eMetric_ListVerticalInsidePadding,                    // needed only because of GTK
-
     eMetric_CaretBlinkTime,                               // default, may be overriden by OS
     eMetric_CaretWidth,                                   // pixel width of caret
     eMetric_ShowCaretDuringSelection,                       // show the caret when text is selected?
     eMetric_SelectTextfieldsOnKeyFocus,                   // select textfields when focused via tab/accesskey?
     eMetric_SubmenuDelay,                                 // delay before submenus open
     eMetric_MenusCanOverlapOSBar,                         // can popups overlap menu/task bar?
     eMetric_SkipNavigatingDisabledMenuItem,               // skip navigating to disabled menu item?
     eMetric_DragThresholdX,                               // begin a drag if the mouse is moved further than the threshold while the button is down
     eMetric_DragThresholdY,
     eMetric_UseAccessibilityTheme,                        // Accessibility theme being used?
-    eMetric_IsScreenReaderActive,                         // Screen reader being used?
 
     eMetric_ScrollArrowStyle,                             // position of scroll arrows in a scrollbar
     eMetric_ScrollSliderStyle,                            // is scroll thumb proportional or fixed?
 
     eMetric_ScrollButtonLeftMouseButtonAction,            // each button can take one of four values:
     eMetric_ScrollButtonMiddleMouseButtonAction,          // 0 - scrolls one  line, 1 - scrolls one page
     eMetric_ScrollButtonRightMouseButtonAction,           // 2 - scrolls to end, 3 - button ignored
  
@@ -347,24 +324,16 @@ public:
   enum {
     eMetric_ScrollThumbStyleNormal,
     eMetric_ScrollThumbStyleProportional
   };
   
   // When modifying this list, also modify nsXPLookAndFeel::sFloatPrefs
   // in widget/src/xpwidgts/nsXPLookAndFeel.cpp.
   typedef enum {
-    eMetricFloat_TextFieldVerticalInsidePadding,
-    eMetricFloat_TextFieldHorizontalInsidePadding,
-    eMetricFloat_TextAreaVerticalInsidePadding,
-    eMetricFloat_TextAreaHorizontalInsidePadding,
-    eMetricFloat_ListVerticalInsidePadding,
-    eMetricFloat_ListHorizontalInsidePadding,
-    eMetricFloat_ButtonVerticalInsidePadding,
-    eMetricFloat_ButtonHorizontalInsidePadding,
     eMetricFloat_IMEUnderlineRelativeSize,
     eMetricFloat_SpellCheckerUnderlineRelativeSize,
 
     // The width/height ratio of the cursor. If used, the CaretWidth int metric
     // should be added to the calculated caret width.
     eMetricFloat_CaretAspectRatio
   } nsMetricFloatID;
 
diff --git a/widget/src/android/nsLookAndFeel.cpp b/widget/src/android/nsLookAndFeel.cpp
--- a/widget/src/android/nsLookAndFeel.cpp
+++ b/widget/src/android/nsLookAndFeel.cpp
@@ -325,79 +325,16 @@ nsLookAndFeel::GetMetric(const nsMetricI
 {
     nsresult rv = nsXPLookAndFeel::GetMetric(aID, aMetric);
     if (NS_SUCCEEDED(rv))
         return rv;
 
     rv = NS_OK;
 
     switch (aID) {
-        case eMetric_WindowTitleHeight:
-        case eMetric_WindowBorderWidth:
-        case eMetric_WindowBorderHeight:
-            aMetric = 0;
-            break;
-
-        case eMetric_Widget3DBorder:
-            aMetric = 4;
-            break;
-
-        case eMetric_TextFieldHeight:
-            aMetric = 15;
-            break;
-
-        case eMetric_TextFieldBorder:
-            aMetric = 2;
-            break;
-
-        case eMetric_TextVerticalInsidePadding:
-            aMetric = 0;
-            break;
-
-        case eMetric_TextShouldUseVerticalInsidePadding:
-            aMetric = 0;
-            break;
-
-        case eMetric_TextHorizontalInsideMinimumPadding:
-            aMetric = 15;
-            break;
-
-        case eMetric_TextShouldUseHorizontalInsideMinimumPadding:
-            aMetric = 1;
-            break;
-
-        case eMetric_ButtonHorizontalInsidePaddingNavQuirks:
-            aMetric = 10;
-            break;
-
-        case eMetric_ButtonHorizontalInsidePaddingOffsetNavQuirks:
-            aMetric = 8;
-            break;
-
-        case eMetric_CheckboxSize:
-        case eMetric_RadioboxSize:
-            aMetric = 15;
-            break;
-
-        case eMetric_ListShouldUseHorizontalInsideMinimumPadding:
-            aMetric = 15;
-            break;
-
-        case eMetric_ListHorizontalInsideMinimumPadding:
-            aMetric = 15;
-            break;
-
-        case eMetric_ListShouldUseVerticalInsidePadding:
-            aMetric = 1;
-            break;
-
-        case eMetric_ListVerticalInsidePadding:
-            aMetric = 1;
-            break;
-
         case eMetric_CaretBlinkTime:
             aMetric = 500;
             break;
 
         case eMetric_CaretWidth:
             aMetric = 1;
             break;
 
@@ -452,48 +389,16 @@ nsLookAndFeel::GetMetric(const nsMetricF
                          float &aMetric)
 {
     nsresult rv = nsXPLookAndFeel::GetMetric(aID, aMetric);
     if (NS_SUCCEEDED(rv))
         return rv;
     rv = NS_OK;
 
     switch (aID) {
-        case eMetricFloat_TextFieldVerticalInsidePadding:
-            aMetric = 0.25f;
-            break;
-
-        case eMetricFloat_TextFieldHorizontalInsidePadding:
-            aMetric = 0.95f; // large number on purpose so minimum padding is used
-            break;
-
-        case eMetricFloat_TextAreaVerticalInsidePadding:
-            aMetric = 0.40f;
-            break;
-
-        case eMetricFloat_TextAreaHorizontalInsidePadding:
-            aMetric = 0.40f; // large number on purpose so minimum padding is used
-            break;
-
-        case eMetricFloat_ListVerticalInsidePadding:
-            aMetric = 0.10f;
-            break;
-
-        case eMetricFloat_ListHorizontalInsidePadding:
-            aMetric = 0.40f;
-            break;
-
-        case eMetricFloat_ButtonVerticalInsidePadding:
-            aMetric = 0.25f;
-            break;
-
-        case eMetricFloat_ButtonHorizontalInsidePadding:
-            aMetric = 0.25f;
-            break;
-
         case eMetricFloat_IMEUnderlineRelativeSize:
             aMetric = 1.0f;
             break;
 
         case eMetricFloat_SpellCheckerUnderlineRelativeSize:
             aMetric = 1.0f;
             break;
 
diff --git a/widget/src/beos/nsLookAndFeel.cpp b/widget/src/beos/nsLookAndFeel.cpp
--- a/widget/src/beos/nsLookAndFeel.cpp
+++ b/widget/src/beos/nsLookAndFeel.cpp
@@ -304,74 +304,16 @@ NS_IMETHODIMP nsLookAndFeel::GetMetric(c
    * nsDeviceContextBeOS::GetSystemAttribute.  The metrics given there
    * were a bit different from these.  If these are inaccurate, it might
    * be worth looking at cvs history for the ones there to see if they
    * were better.
    */
 
   switch (aID) 
   {
-    case eMetric_WindowTitleHeight:
-      // 2*horizontal scrollbar height
-      aMetric = 28;
-      break;
-    case eMetric_WindowBorderWidth:
-      aMetric = 2;
-      break;
-    case eMetric_WindowBorderHeight:
-      aMetric = 2;
-      break;
-    case eMetric_Widget3DBorder:
-      aMetric = 5;
-      break;
-    case eMetric_TextFieldBorder:
-      aMetric = 3;
-      break;
-    case eMetric_TextFieldHeight:
-      aMetric = 24;
-      break;
-    case eMetric_TextVerticalInsidePadding:
-      aMetric = 0;
-      break;    
-    case eMetric_TextShouldUseVerticalInsidePadding:
-      aMetric = 0;
-      break;
-    case eMetric_TextHorizontalInsideMinimumPadding:
-      aMetric = 3;
-      break;
-    case eMetric_TextShouldUseHorizontalInsideMinimumPadding:
-      aMetric = 1;
-      break;    
-    case eMetric_ButtonHorizontalInsidePaddingNavQuirks:
-      aMetric = 10;
-      break;
-    case eMetric_ButtonHorizontalInsidePaddingOffsetNavQuirks:
-      aMetric = 8;
-      break;
-    case eMetric_CheckboxSize:
-      aMetric = 12;
-      break;
-    case eMetric_RadioboxSize:
-      aMetric = 12;
-      break;
-
-    case eMetric_ListShouldUseHorizontalInsideMinimumPadding:
-      aMetric = 0;
-      break;
-    case eMetric_ListHorizontalInsideMinimumPadding:
-      aMetric = 3;
-      break;
-      
-    case eMetric_ListShouldUseVerticalInsidePadding:
-      aMetric = 0;
-      break;
-    case eMetric_ListVerticalInsidePadding:
-      aMetric = 0;
-      break;
-      
     case eMetric_CaretBlinkTime:
       aMetric = 500;
       break;
     case eMetric_CaretWidth:
       aMetric = 1;
       break;
     case eMetric_ShowCaretDuringSelection:
       aMetric = 1;
@@ -457,40 +399,16 @@ NS_IMETHODIMP nsLookAndFeel::GetMetric(c
 NS_IMETHODIMP nsLookAndFeel::GetMetric(const nsMetricFloatID aID, float & aMetric)
 {
   nsresult res = nsXPLookAndFeel::GetMetric(aID, aMetric);
   if (NS_SUCCEEDED(res))
     return res;
   res = NS_OK;
 
   switch (aID) {
-    case eMetricFloat_TextFieldVerticalInsidePadding:
-        aMetric = 0.25f;
-        break;
-    case eMetricFloat_TextFieldHorizontalInsidePadding:
-        aMetric = 0.95f;
-        break;
-    case eMetricFloat_TextAreaVerticalInsidePadding:
-        aMetric = 0.40f;
-        break;
-    case eMetricFloat_TextAreaHorizontalInsidePadding:
-        aMetric = 0.40f;
-        break;
-    case eMetricFloat_ListVerticalInsidePadding:
-        aMetric = 0.10f;
-        break;
-    case eMetricFloat_ListHorizontalInsidePadding:
-        aMetric = 0.40f;
-        break;
-    case eMetricFloat_ButtonVerticalInsidePadding:
-        aMetric = 0.25f;
-        break;
-    case eMetricFloat_ButtonHorizontalInsidePadding:
-        aMetric = 0.25f;
-        break;
     case eMetricFloat_IMEUnderlineRelativeSize:
         aMetric = 1.0f;
         break;
     case eMetricFloat_SpellCheckerUnderlineRelativeSize:
         aMetric = 1.0f;
         break;
     default:
         aMetric = -1.0;
diff --git a/widget/src/cocoa/nsLookAndFeel.mm b/widget/src/cocoa/nsLookAndFeel.mm
--- a/widget/src/cocoa/nsLookAndFeel.mm
+++ b/widget/src/cocoa/nsLookAndFeel.mm
@@ -312,70 +312,16 @@ NS_IMETHODIMP nsLookAndFeel::GetMetric(c
   NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT;
 
   nsresult res = nsXPLookAndFeel::GetMetric(aID, aMetric);
   if (NS_SUCCEEDED(res))
     return res;
   res = NS_OK;
   
   switch (aID) {
-    case eMetric_WindowTitleHeight:
-      aMetric = 0;
-      break;
-    case eMetric_WindowBorderWidth:
-      aMetric = 4;
-      break;
-    case eMetric_WindowBorderHeight:
-      aMetric = 4;
-      break;
-    case eMetric_Widget3DBorder:
-      aMetric = 4;
-      break;
-    case eMetric_TextFieldHeight:
-      aMetric = 16;
-      break;
-    case eMetric_TextFieldBorder:
-      aMetric = 2;
-      break;
-    case eMetric_ButtonHorizontalInsidePaddingNavQuirks:
-      aMetric = 20;
-      break;
-    case eMetric_ButtonHorizontalInsidePaddingOffsetNavQuirks:
-      aMetric = 0;
-      break;
-    case eMetric_CheckboxSize:
-      aMetric = 14;
-      break;
-    case eMetric_RadioboxSize:
-      aMetric = 14;
-      break;
-    case eMetric_TextHorizontalInsideMinimumPadding:
-      aMetric = 4;
-      break;
-    case eMetric_TextVerticalInsidePadding:
-      aMetric = 4;
-      break;
-    case eMetric_TextShouldUseVerticalInsidePadding:
-      aMetric = 1;
-      break;
-    case eMetric_TextShouldUseHorizontalInsideMinimumPadding:
-      aMetric = 1;
-      break;
-    case eMetric_ListShouldUseHorizontalInsideMinimumPadding:
-      aMetric = 0;
-      break;
-    case eMetric_ListHorizontalInsideMinimumPadding:
-      aMetric = 4;
-      break;
-    case eMetric_ListShouldUseVerticalInsidePadding:
-      aMetric = 1;
-      break;
-    case eMetric_ListVerticalInsidePadding:
-      aMetric = 3;
-      break;
     case eMetric_CaretBlinkTime:
       aMetric = 567;
       break;
     case eMetric_CaretWidth:
       aMetric = 1;
       break;
     case eMetric_ShowCaretDuringSelection:
       aMetric = 0;
@@ -491,40 +437,16 @@ NS_IMETHODIMP nsLookAndFeel::GetMetric(c
 NS_IMETHODIMP nsLookAndFeel::GetMetric(const nsMetricFloatID aID, float & aMetric)
 {
   nsresult res = nsXPLookAndFeel::GetMetric(aID, aMetric);
   if (NS_SUCCEEDED(res))
     return res;
   res = NS_OK;
   
   switch (aID) {
-    case eMetricFloat_TextFieldVerticalInsidePadding:
-      aMetric = 0.25f;
-      break;
-    case eMetricFloat_TextFieldHorizontalInsidePadding:
-      aMetric = 0.95f;
-      break;
-    case eMetricFloat_TextAreaVerticalInsidePadding:
-      aMetric = 0.40f;
-      break;
-    case eMetricFloat_TextAreaHorizontalInsidePadding:
-      aMetric = 0.40f;
-      break;
-    case eMetricFloat_ListVerticalInsidePadding:
-      aMetric = 0.08f;
-      break;
-    case eMetricFloat_ListHorizontalInsidePadding:
-      aMetric = 0.40f;
-      break;
-    case eMetricFloat_ButtonVerticalInsidePadding:
-      aMetric = 0.5f;
-      break;
-    case eMetricFloat_ButtonHorizontalInsidePadding:
-      aMetric = 0.5f;
-      break;
     case eMetricFloat_IMEUnderlineRelativeSize:
       aMetric = 2.0f;
       break;
     case eMetricFloat_SpellCheckerUnderlineRelativeSize:
       aMetric = 2.0f;
       break;
     default:
       aMetric = -1.0;
diff --git a/widget/src/gtk2/nsLookAndFeel.cpp b/widget/src/gtk2/nsLookAndFeel.cpp
--- a/widget/src/gtk2/nsLookAndFeel.cpp
+++ b/widget/src/gtk2/nsLookAndFeel.cpp
@@ -406,82 +406,16 @@ NS_IMETHODIMP nsLookAndFeel::GetMetric(c
     }
 
     res = nsXPLookAndFeel::GetMetric(aID, aMetric);
     if (NS_SUCCEEDED(res))
         return res;
     res = NS_OK;
 
     switch (aID) {
-    case eMetric_WindowTitleHeight:
-        aMetric = 0;
-        break;
-    case eMetric_WindowBorderWidth:
-        // XXXldb Why is this commented out?
-        //    aMetric = mStyle->klass->xthickness;
-        break;
-    case eMetric_WindowBorderHeight:
-        // XXXldb Why is this commented out?
-        //    aMetric = mStyle->klass->ythickness;
-        break;
-    case eMetric_Widget3DBorder:
-        // XXXldb Why is this commented out?
-        //    aMetric = 4;
-        break;
-    case eMetric_TextFieldHeight:
-        {
-            GtkRequisition req;
-            GtkWidget *text = gtk_entry_new();
-            // needed to avoid memory leak
-            g_object_ref_sink(GTK_OBJECT(text));
-            gtk_widget_size_request(text,&req);
-            aMetric = req.height;
-            gtk_widget_destroy(text);
-            g_object_unref(text);
-        }
-        break;
-    case eMetric_TextFieldBorder:
-        aMetric = 2;
-        break;
-    case eMetric_TextVerticalInsidePadding:
-        aMetric = 0;
-        break;
-    case eMetric_TextShouldUseVerticalInsidePadding:
-        aMetric = 0;
-        break;
-    case eMetric_TextHorizontalInsideMinimumPadding:
-        aMetric = 15;
-        break;
-    case eMetric_TextShouldUseHorizontalInsideMinimumPadding:
-        aMetric = 1;
-        break;
-    case eMetric_ButtonHorizontalInsidePaddingNavQuirks:
-        aMetric = 10;
-        break;
-    case eMetric_ButtonHorizontalInsidePaddingOffsetNavQuirks:
-        aMetric = 8;
-        break;
-    case eMetric_CheckboxSize:
-        aMetric = 15;
-        break;
-    case eMetric_RadioboxSize:
-        aMetric = 15;
-        break;
-    case eMetric_ListShouldUseHorizontalInsideMinimumPadding:
-        aMetric = 15;
-        break;
-    case eMetric_ListHorizontalInsideMinimumPadding:
-        aMetric = 15;
-        break;
-    case eMetric_ListShouldUseVerticalInsidePadding:
-        aMetric = 1;
-        break;
-    case eMetric_ListVerticalInsidePadding:
-        aMetric = 1;
-        break;
     case eMetric_CaretBlinkTime:
         {
             GtkSettings *settings;
             gint blink_time;
             gboolean blink;
 
             settings = gtk_settings_get_default ();
             g_object_get (settings,
@@ -648,40 +582,16 @@ NS_IMETHODIMP nsLookAndFeel::GetMetric(c
 {
     nsresult res = NS_OK;
     res = nsXPLookAndFeel::GetMetric(aID, aMetric);
     if (NS_SUCCEEDED(res))
         return res;
     res = NS_OK;
 
     switch (aID) {
-    case eMetricFloat_TextFieldVerticalInsidePadding:
-        aMetric = 0.25f;
-        break;
-    case eMetricFloat_TextFieldHorizontalInsidePadding:
-        aMetric = 0.95f; // large number on purpose so minimum padding is used
-        break;
-    case eMetricFloat_TextAreaVerticalInsidePadding:
-        aMetric = 0.40f;    
-        break;
-    case eMetricFloat_TextAreaHorizontalInsidePadding:
-        aMetric = 0.40f; // large number on purpose so minimum padding is used
-        break;
-    case eMetricFloat_ListVerticalInsidePadding:
-        aMetric = 0.10f;
-        break;
-    case eMetricFloat_ListHorizontalInsidePadding:
-        aMetric = 0.40f;
-        break;
-    case eMetricFloat_ButtonVerticalInsidePadding:
-        aMetric = 0.25f;
-        break;
-    case eMetricFloat_ButtonHorizontalInsidePadding:
-        aMetric = 0.25f;
-        break;
     case eMetricFloat_IMEUnderlineRelativeSize:
         aMetric = 1.0f;
         break;
     case eMetricFloat_SpellCheckerUnderlineRelativeSize:
         aMetric = 1.0f;
         break;
     case eMetricFloat_CaretAspectRatio:
         aMetric = sCaretRatio;
diff --git a/widget/src/os2/nsLookAndFeel.cpp b/widget/src/os2/nsLookAndFeel.cpp
--- a/widget/src/os2/nsLookAndFeel.cpp
+++ b/widget/src/os2/nsLookAndFeel.cpp
@@ -274,70 +274,16 @@ nsresult nsLookAndFeel::NativeGetColor(c
 NS_IMETHODIMP nsLookAndFeel::GetMetric(const nsMetricID aID, PRInt32 & aMetric)
 {
   nsresult res = nsXPLookAndFeel::GetMetric(aID, aMetric);
   if (NS_SUCCEEDED(res))
       return res;
   res = NS_OK;
 
   switch (aID) {
-    case eMetric_WindowTitleHeight:
-        aMetric = WinQuerySysValue( HWND_DESKTOP, SV_CYTITLEBAR);
-        break;
-    case eMetric_WindowBorderWidth:
-        aMetric = WinQuerySysValue( HWND_DESKTOP, SV_CXSIZEBORDER);
-        break;
-    case eMetric_WindowBorderHeight:
-        aMetric = WinQuerySysValue( HWND_DESKTOP, SV_CYSIZEBORDER);
-        break;
-    case eMetric_Widget3DBorder:
-        aMetric = WinQuerySysValue( HWND_DESKTOP, SV_CXBORDER);
-        break;
-    case eMetric_TextFieldBorder:
-        aMetric = 3;
-        break;
-    case eMetric_TextFieldHeight:
-        aMetric = 24;
-        break;
-    case eMetric_ButtonHorizontalInsidePaddingNavQuirks:
-        aMetric = 10;
-        break;
-    case eMetric_ButtonHorizontalInsidePaddingOffsetNavQuirks:
-        aMetric = 8;
-        break;
-    case eMetric_CheckboxSize:
-        aMetric = 12;
-        break;
-    case eMetric_RadioboxSize:
-        aMetric = 12;
-        break;
-    case eMetric_TextHorizontalInsideMinimumPadding:
-        aMetric = 3;
-        break;
-    case eMetric_TextVerticalInsidePadding:
-        aMetric = 0;
-        break;
-    case eMetric_TextShouldUseVerticalInsidePadding:
-        aMetric = 0;
-        break;
-    case eMetric_TextShouldUseHorizontalInsideMinimumPadding:
-        aMetric = 1;
-        break;
-    case eMetric_ListShouldUseHorizontalInsideMinimumPadding:
-        aMetric = 0;
-        break;
-    case eMetric_ListHorizontalInsideMinimumPadding:
-        aMetric = 3;
-        break;
-    case eMetric_ListShouldUseVerticalInsidePadding:
-        aMetric = 0;
-        break;
-    case eMetric_ListVerticalInsidePadding:
-        aMetric = 0;
-        break;
     case eMetric_CaretBlinkTime:
         aMetric = WinQuerySysValue( HWND_DESKTOP, SV_CURSORRATE);
         break;
     case eMetric_CaretWidth:
         aMetric = 1;
         break;
     case eMetric_ShowCaretDuringSelection:
         aMetric = 0;
@@ -409,40 +355,16 @@ NS_IMETHODIMP nsLookAndFeel::GetMetric(c
 NS_IMETHODIMP nsLookAndFeel::GetMetric(const nsMetricFloatID aID, float & aMetric)
 {
   nsresult res = nsXPLookAndFeel::GetMetric(aID, aMetric);
   if (NS_SUCCEEDED(res))
     return res;
   res = NS_OK;
 
   switch (aID) {
-    case eMetricFloat_TextFieldVerticalInsidePadding:
-        aMetric = 0.25f;
-        break;
-    case eMetricFloat_TextFieldHorizontalInsidePadding:
-        aMetric = 1.025f;
-        break;
-    case eMetricFloat_TextAreaVerticalInsidePadding:
-        aMetric = 0.40f;
-        break;
-    case eMetricFloat_TextAreaHorizontalInsidePadding:
-        aMetric = 0.40f;
-        break;
-    case eMetricFloat_ListVerticalInsidePadding:
-        aMetric = 0.10f;
-        break;
-    case eMetricFloat_ListHorizontalInsidePadding:
-        aMetric = 0.40f;
-        break;
-    case eMetricFloat_ButtonVerticalInsidePadding:
-        aMetric = 0.25f;
-        break;
-    case eMetricFloat_ButtonHorizontalInsidePadding:
-        aMetric = 0.25f;
-        break;
     case eMetricFloat_IMEUnderlineRelativeSize:
         aMetric = 1.0f;
         break;
     case eMetricFloat_SpellCheckerUnderlineRelativeSize:
         aMetric = 1.0f;
         break;
     default:
         aMetric = -1.0;
diff --git a/widget/src/qt/nsLookAndFeel.cpp b/widget/src/qt/nsLookAndFeel.cpp
--- a/widget/src/qt/nsLookAndFeel.cpp
+++ b/widget/src/qt/nsLookAndFeel.cpp
@@ -300,45 +300,26 @@ nsresult nsLookAndFeel::NativeGetColor(c
       res    = NS_ERROR_FAILURE;
       break;
   }
   return res;
 }
 
 #ifdef NS_LOOKANDFEEL_DEBUG
 static const char *metricToString[] = {
-    "eMetric_WindowTitleHeight",
-    "eMetric_WindowBorderWidth",
-    "eMetric_WindowBorderHeight",
-    "eMetric_Widget3DBorder",
-    "eMetric_TextFieldBorder",
-    "eMetric_TextFieldHeight",
-    "eMetric_TextVerticalInsidePadding",
-    "eMetric_TextShouldUseVerticalInsidePadding",
-    "eMetric_TextHorizontalInsideMinimumPadding", 
-    "eMetric_TextShouldUseHorizontalInsideMinimumPadding",
-    "eMetric_ButtonHorizontalInsidePaddingNavQuirks",  
-    "eMetric_ButtonHorizontalInsidePaddingOffsetNavQuirks", 
-    "eMetric_CheckboxSize",
-    "eMetric_RadioboxSize",
-    "eMetric_ListShouldUseHorizontalInsideMinimumPadding",
-    "eMetric_ListHorizontalInsideMinimumPadding", 
-    "eMetric_ListShouldUseVerticalInsidePadding",
-    "eMetric_ListVerticalInsidePadding",
     "eMetric_CaretBlinkTime",
     "eMetric_CaretWidth",
     "eMetric_ShowCaretDuringSelection",
     "eMetric_SelectTextfieldsOnKeyFocus",
     "eMetric_SubmenuDelay",
     "eMetric_MenusCanOverlapOSBar",
     "eMetric_SkipNavigatingDisabledMenuItem",
     "eMetric_DragThresholdX",
     "eMetric_DragThresholdY",
     "eMetric_UseAccessibilityTheme",
-    "eMetric_IsScreenReaderActive",
     "eMetric_ScrollArrowStyle",
     "eMetric_ScrollSliderStyle",
     "eMetric_ScrollButtonLeftMouseButtonAction",
     "eMetric_ScrollButtonMiddleMouseButtonAction",
     "eMetric_ScrollButtonRightMouseButtonAction",
     "eMetric_TreeOpenDelay",
     "eMetric_TreeCloseDelay",
     "eMetric_TreeLazyScrollDelay",
@@ -366,88 +347,16 @@ NS_IMETHODIMP nsLookAndFeel::GetMetric(c
   if (NS_SUCCEEDED(res))
       return res;
 
   res = NS_OK;
 
   QStyle* qStyle = qApp->style();
 
   switch (aID) {
-    case eMetric_WindowTitleHeight:
-      aMetric = qStyle->pixelMetric(QStyle::PM_TitleBarHeight);
-      break;
-
-    case eMetric_WindowBorderWidth:
-      // There was once code in nsDeviceContextQt::GetSystemAttribute to
-      // use the border width obtained from a widget in its Init method.
-      break;
-
-    case eMetric_WindowBorderHeight:
-      // There was once code in nsDeviceContextQt::GetSystemAttribute to
-      // use the border width obtained from a widget in its Init method.
-      break;
-
-    case eMetric_Widget3DBorder:
-      aMetric = 4;
-      break;
-
-    case eMetric_TextFieldHeight:
-      aMetric = 15;
-      break;
-
-    case eMetric_TextFieldBorder:
-      aMetric = 2;
-      break;
-
-    case eMetric_TextVerticalInsidePadding:
-      aMetric = 0;
-      break;
-
-    case eMetric_TextShouldUseVerticalInsidePadding:
-      aMetric = 0;
-      break;
-
-    case eMetric_TextHorizontalInsideMinimumPadding:
-      aMetric = 15;
-      break;
-
-    case eMetric_TextShouldUseHorizontalInsideMinimumPadding:
-      aMetric = 1;
-      break;
-
-    case eMetric_ButtonHorizontalInsidePaddingNavQuirks:
-      aMetric = 10;
-      break;
-
-    case eMetric_ButtonHorizontalInsidePaddingOffsetNavQuirks:
-      aMetric = 8;
-      break;
-
-    case eMetric_CheckboxSize:
-    case eMetric_RadioboxSize:
-      aMetric = 15;
-      aMetric = qStyle->pixelMetric(QStyle::PM_CheckListButtonSize);
-      break;
-
-    case eMetric_ListShouldUseHorizontalInsideMinimumPadding:
-      aMetric = 15;
-      break;
-
-    case eMetric_ListHorizontalInsideMinimumPadding:
-      aMetric = 15;
-      break;
-
-    case eMetric_ListShouldUseVerticalInsidePadding:
-      aMetric = 1;
-      break;
-
-    case eMetric_ListVerticalInsidePadding:
-      aMetric = 1;
-      break;
-
     case eMetric_CaretBlinkTime:
       aMetric = 500;
       break;
 
     case eMetric_CaretWidth:
       aMetric = 1;
       break;
 
@@ -502,24 +411,16 @@ NS_IMETHODIMP nsLookAndFeel::GetMetric(c
       aMetric = 0;
       res = NS_ERROR_FAILURE;
   }
   return res;
 }
 
 #ifdef NS_LOOKANDFEEL_DEBUG
 static const char *floatMetricToString[] = {
-    "eMetricFloat_TextFieldVerticalInsidePadding",
-    "eMetricFloat_TextFieldHorizontalInsidePadding",
-    "eMetricFloat_TextAreaVerticalInsidePadding",
-    "eMetricFloat_TextAreaHorizontalInsidePadding",
-    "eMetricFloat_ListVerticalInsidePadding",
-    "eMetricFloat_ListHorizontalInsidePadding",
-    "eMetricFloat_ButtonVerticalInsidePadding",
-    "eMetricFloat_ButtonHorizontalInsidePadding",
     "eMetricFloat_IMEUnderlineRelativeSize"
 };
 #endif
 
 NS_IMETHODIMP nsLookAndFeel::GetMetric(const nsMetricFloatID aID,
                                        float &aMetric)
 {
 #ifdef NS_LOOKANDFEEL_DEBUG
@@ -527,48 +428,16 @@ NS_IMETHODIMP nsLookAndFeel::GetMetric(c
 #endif
 
   nsresult res = nsXPLookAndFeel::GetMetric(aID, aMetric);
   if (NS_SUCCEEDED(res))
       return res;
   res = NS_OK;
 
   switch (aID) {
-    case eMetricFloat_TextFieldVerticalInsidePadding:
-      aMetric = 0.25f;
-      break;
-
-    case eMetricFloat_TextFieldHorizontalInsidePadding:
-      aMetric = 0.95f; // large number on purpose so minimum padding is used
-      break;
-
-    case eMetricFloat_TextAreaVerticalInsidePadding:
-      aMetric = 0.40f;
-      break;
-
-    case eMetricFloat_TextAreaHorizontalInsidePadding:
-      aMetric = 0.40f; // large number on purpose so minimum padding is used
-      break;
-
-    case eMetricFloat_ListVerticalInsidePadding:
-      aMetric = 0.10f;
-      break;
-
-    case eMetricFloat_ListHorizontalInsidePadding:
-      aMetric = 0.40f;
-      break;
-
-    case eMetricFloat_ButtonVerticalInsidePadding:
-      aMetric = 0.25f;
-      break;
-
-    case eMetricFloat_ButtonHorizontalInsidePadding:
-      aMetric = 0.25f;
-      break;
-
     case eMetricFloat_IMEUnderlineRelativeSize:
       aMetric = 1.0f;
       break;
 
     case eMetricFloat_SpellCheckerUnderlineRelativeSize:
       aMetric = 1.0f;
       break;
 
diff --git a/widget/src/windows/nsLookAndFeel.cpp b/widget/src/windows/nsLookAndFeel.cpp
--- a/widget/src/windows/nsLookAndFeel.cpp
+++ b/widget/src/windows/nsLookAndFeel.cpp
@@ -350,72 +350,16 @@ nsresult nsLookAndFeel::NativeGetColor(c
 NS_IMETHODIMP nsLookAndFeel::GetMetric(const nsMetricID aID, PRInt32 & aMetric)
 {
   nsresult res = nsXPLookAndFeel::GetMetric(aID, aMetric);
   if (NS_SUCCEEDED(res))
     return res;
   res = NS_OK;
 
   switch (aID) {
-    case eMetric_WindowTitleHeight:
-        aMetric = ::GetSystemMetrics(SM_CYCAPTION);
-        break;
-#ifndef WINCE
-    case eMetric_WindowBorderWidth:
-        aMetric = ::GetSystemMetrics(SM_CXFRAME);
-        break;
-    case eMetric_WindowBorderHeight:
-        aMetric = ::GetSystemMetrics(SM_CYFRAME);
-        break;
-#endif
-    case eMetric_Widget3DBorder:
-        aMetric = ::GetSystemMetrics(SM_CXEDGE);
-        break;
-    case eMetric_TextFieldBorder:
-        aMetric = 3;
-        break;
-    case eMetric_TextFieldHeight:
-        aMetric = 24;
-        break;
-    case eMetric_ButtonHorizontalInsidePaddingNavQuirks:
-        aMetric = 10;
-        break;
-    case eMetric_ButtonHorizontalInsidePaddingOffsetNavQuirks:
-        aMetric = 8;
-        break;
-    case eMetric_CheckboxSize:
-        aMetric = 12;
-        break;
-    case eMetric_RadioboxSize:
-        aMetric = 12;
-        break;
-    case eMetric_TextHorizontalInsideMinimumPadding:
-        aMetric = 3;
-        break;
-    case eMetric_TextVerticalInsidePadding:
-        aMetric = 0;
-        break;
-    case eMetric_TextShouldUseVerticalInsidePadding:
-        aMetric = 0;
-        break;
-    case eMetric_TextShouldUseHorizontalInsideMinimumPadding:
-        aMetric = 1;
-        break;
-    case eMetric_ListShouldUseHorizontalInsideMinimumPadding:
-        aMetric = 0;
-        break;
-    case eMetric_ListHorizontalInsideMinimumPadding:
-        aMetric = 3;
-        break;
-    case eMetric_ListShouldUseVerticalInsidePadding:
-        aMetric = 0;
-        break;
-    case eMetric_ListVerticalInsidePadding:
-        aMetric = 0;
-        break;
     case eMetric_CaretBlinkTime:
         aMetric = (PRInt32)::GetCaretBlinkTime();
         break;
     case eMetric_CaretWidth:
         aMetric = 1;
         break;
     case eMetric_ShowCaretDuringSelection:
         aMetric = 0;
@@ -454,21 +398,16 @@ NS_IMETHODIMP nsLookAndFeel::GetMetric(c
         // e.g. normal contrast with large fonts, low contrast, etc.
         // The high contrast flag really means -- use this theme and don't override it.
         HIGHCONTRAST contrastThemeInfo;
         contrastThemeInfo.cbSize = sizeof(contrastThemeInfo);
         ::SystemParametersInfo(SPI_GETHIGHCONTRAST, 0, &contrastThemeInfo, 0);
 
         aMetric = ((contrastThemeInfo.dwFlags & HCF_HIGHCONTRASTON) != 0);
         break;
-    case eMetric_IsScreenReaderActive:
-        // This will default to the Windows' default
-        // (off by default) on error.
-        aMetric = GetSystemParam(SPI_GETSCREENREADER, 0);
-      break;
 #endif
     case eMetric_ScrollArrowStyle:
         aMetric = eMetric_ScrollArrowStyleSingle;
         break;
     case eMetric_ScrollSliderStyle:
         aMetric = eMetric_ScrollThumbStyleProportional;
         break;
     case eMetric_TreeOpenDelay:
@@ -623,40 +562,16 @@ NS_IMETHODIMP nsLookAndFeel::GetMetric(c
 NS_IMETHODIMP nsLookAndFeel::GetMetric(const nsMetricFloatID aID, float & aMetric)
 {
   nsresult res = nsXPLookAndFeel::GetMetric(aID, aMetric);
   if (NS_SUCCEEDED(res))
     return res;
   res = NS_OK;
 
   switch (aID) {
-    case eMetricFloat_TextFieldVerticalInsidePadding:
-        aMetric = 0.25f;
-        break;
-    case eMetricFloat_TextFieldHorizontalInsidePadding:
-        aMetric = 1.025f;
-        break;
-    case eMetricFloat_TextAreaVerticalInsidePadding:
-        aMetric = 0.40f;
-        break;
-    case eMetricFloat_TextAreaHorizontalInsidePadding:
-        aMetric = 0.40f;
-        break;
-    case eMetricFloat_ListVerticalInsidePadding:
-        aMetric = 0.10f;
-        break;
-    case eMetricFloat_ListHorizontalInsidePadding:
-        aMetric = 0.40f;
-        break;
-    case eMetricFloat_ButtonVerticalInsidePadding:
-        aMetric = 0.25f;
-        break;
-    case eMetricFloat_ButtonHorizontalInsidePadding:
-        aMetric = 0.25f;
-        break;
     case eMetricFloat_IMEUnderlineRelativeSize:
         aMetric = 1.0f;
         break;
     case eMetricFloat_SpellCheckerUnderlineRelativeSize:
         aMetric = 1.0f;
         break;
     default:
         aMetric = -1.0;
diff --git a/widget/src/xpwidgets/nsXPLookAndFeel.cpp b/widget/src/xpwidgets/nsXPLookAndFeel.cpp
--- a/widget/src/xpwidgets/nsXPLookAndFeel.cpp
+++ b/widget/src/xpwidgets/nsXPLookAndFeel.cpp
@@ -52,52 +52,23 @@
 #ifdef DEBUG
 #include "nsSize.h"
 #endif
 
 NS_IMPL_ISUPPORTS2(nsXPLookAndFeel, nsILookAndFeel, nsIObserver)
 
 nsLookAndFeelIntPref nsXPLookAndFeel::sIntPrefs[] =
 {
-  { "ui.windowTitleHeight", eMetric_WindowTitleHeight, PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.windowBorderWidth", eMetric_WindowBorderWidth, PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.windowBorderHeight", eMetric_WindowBorderHeight, PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.widget3DBorder", eMetric_Widget3DBorder, PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.textFieldBorder", eMetric_TextFieldBorder, PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.textFieldHeight", eMetric_TextFieldHeight, PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.buttonHorizontalInsidePaddingNavQuirks",
-    eMetric_ButtonHorizontalInsidePaddingNavQuirks, PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.buttonHorizontalInsidePaddingOffsetNavQuirks",
-    eMetric_ButtonHorizontalInsidePaddingOffsetNavQuirks, PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.checkboxSize", eMetric_CheckboxSize, PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.radioboxSize", eMetric_RadioboxSize, PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.textHorizontalInsideMinimumPadding",
-    eMetric_TextHorizontalInsideMinimumPadding, PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.textVerticalInsidePadding", eMetric_TextVerticalInsidePadding,
-    PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.textShouldUseVerticalInsidePadding",
-    eMetric_TextShouldUseVerticalInsidePadding, PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.textShouldUseHorizontalInsideMinimumPadding",
-    eMetric_TextShouldUseHorizontalInsideMinimumPadding, PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.listShouldUseHorizontalInsideMinimumPadding",
-    eMetric_ListShouldUseHorizontalInsideMinimumPadding, PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.listHorizontalInsideMinimumPadding",
-    eMetric_ListHorizontalInsideMinimumPadding, PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.listShouldUseVerticalInsidePadding",
-    eMetric_ListShouldUseVerticalInsidePadding, PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.listVerticalInsidePadding", eMetric_ListVerticalInsidePadding,
-    PR_FALSE, nsLookAndFeelTypeInt, 0 },
   { "ui.caretBlinkTime", eMetric_CaretBlinkTime, PR_FALSE, nsLookAndFeelTypeInt, 0 },
   { "ui.caretWidth", eMetric_CaretWidth, PR_FALSE, nsLookAndFeelTypeInt, 0 },
   { "ui.caretVisibleWithSelection", eMetric_ShowCaretDuringSelection, PR_FALSE, nsLookAndFeelTypeInt, 0 },
   { "ui.submenuDelay", eMetric_SubmenuDelay, PR_FALSE, nsLookAndFeelTypeInt, 0 },
   { "ui.dragThresholdX", eMetric_DragThresholdX, PR_FALSE, nsLookAndFeelTypeInt, 0 },
   { "ui.dragThresholdY", eMetric_DragThresholdY, PR_FALSE, nsLookAndFeelTypeInt, 0 },
   { "ui.useAccessibilityTheme", eMetric_UseAccessibilityTheme, PR_FALSE, nsLookAndFeelTypeInt, 0 },
-  { "ui.isScreenReaderActive", eMetric_IsScreenReaderActive, PR_FALSE, nsLookAndFeelTypeInt, 0 },
   { "ui.menusCanOverlapOSBar", eMetric_MenusCanOverlapOSBar,
     PR_FALSE, nsLookAndFeelTypeInt, 0 },
   { "ui.skipNavigatingDisabledMenuItem", eMetric_SkipNavigatingDisabledMenuItem, PR_FALSE, nsLookAndFeelTypeInt, 0 },
   { "ui.treeOpenDelay",
     eMetric_TreeOpenDelay, PR_FALSE, nsLookAndFeelTypeInt, 0 },
   { "ui.treeCloseDelay",
     eMetric_TreeCloseDelay, PR_FALSE, nsLookAndFeelTypeInt, 0 },
   { "ui.treeLazyScrollDelay",
@@ -121,32 +92,16 @@ nsLookAndFeelIntPref nsXPLookAndFeel::sI
   { "ui.IMESelectedConvertedTextUnderlineStyle",
     eMetric_IMESelectedConvertedTextUnderline, PR_FALSE, nsLookAndFeelTypeInt, 0 },
   { "ui.SpellCheckerUnderlineStyle",
     eMetric_SpellCheckerUnderlineStyle, PR_FALSE, nsLookAndFeelTypeInt, 0 },
 };
 
 nsLookAndFeelFloatPref nsXPLookAndFeel::sFloatPrefs[] =
 {
-  { "ui.textFieldVerticalInsidePadding",
-    eMetricFloat_TextFieldVerticalInsidePadding, PR_FALSE, nsLookAndFeelTypeFloat, 0 },
-  { "ui.textFieldHorizontalInsidePadding",
-    eMetricFloat_TextFieldHorizontalInsidePadding, PR_FALSE, nsLookAndFeelTypeFloat, 0 },
-  { "ui.textAreaVerticalInsidePadding", eMetricFloat_TextAreaVerticalInsidePadding,
-    PR_FALSE, nsLookAndFeelTypeFloat, 0 },
-  { "ui.textAreaHorizontalInsidePadding",
-    eMetricFloat_TextAreaHorizontalInsidePadding, PR_FALSE, nsLookAndFeelTypeFloat, 0 },
-  { "ui.listVerticalInsidePadding",
-    eMetricFloat_ListVerticalInsidePadding, PR_FALSE, nsLookAndFeelTypeFloat, 0 },
-  { "ui.listHorizontalInsidePadding",
-    eMetricFloat_ListHorizontalInsidePadding, PR_FALSE, nsLookAndFeelTypeFloat, 0 },
-  { "ui.buttonVerticalInsidePadding", eMetricFloat_ButtonVerticalInsidePadding,
-    PR_FALSE, nsLookAndFeelTypeFloat, 0 },
-  { "ui.buttonHorizontalInsidePadding", eMetricFloat_ButtonHorizontalInsidePadding,
-    PR_FALSE, nsLookAndFeelTypeFloat, 0 },
   { "ui.IMEUnderlineRelativeSize", eMetricFloat_IMEUnderlineRelativeSize,
     PR_FALSE, nsLookAndFeelTypeFloat, 0 },
   { "ui.SpellCheckerUnderlineRelativeSize",
     eMetricFloat_SpellCheckerUnderlineRelativeSize, PR_FALSE,
     nsLookAndFeelTypeFloat, 0 },
   { "ui.caretAspectRatio", eMetricFloat_CaretAspectRatio, PR_FALSE,
     nsLookAndFeelTypeFloat, 0 },
 };
