From: L. David Baron <dbaron@dbaron.org>

Remove option for aTakeOwnership==PR_FALSE for nsStyleAnimation::Value setters for complex types.  (Bug 523450)  r=dholbert

diff --git a/layout/style/nsStyleAnimation.cpp b/layout/style/nsStyleAnimation.cpp
--- a/layout/style/nsStyleAnimation.cpp
+++ b/layout/style/nsStyleAnimation.cpp
@@ -524,18 +524,18 @@ nsStyleAnimation::AddWeighted(double aCo
               aCoeff2 * (pair2->*member).GetPercentValue());
             break;
           default:
             NS_ABORT_IF_FALSE(PR_FALSE, "unexpected unit");
             return PR_FALSE;
         }
       }
 
-      aResultValue.SetCSSValuePairValue(result.forget(), eUnit_CSSValuePair,
-                                        PR_TRUE);
+      aResultValue.SetAndAdoptCSSValuePairValue(result.forget(),
+                                                eUnit_CSSValuePair);
       break;
     }
     case eUnit_Dasharray: {
       const nsCSSValueList *list1 = aValue1.GetCSSValueListValue();
       const nsCSSValueList *list2 = aValue2.GetCSSValueListValue();
 
       PRUint32 len1 = 0, len2 = 0;
       for (const nsCSSValueList *v = list1; v; v = v->mNext) {
@@ -582,18 +582,18 @@ nsStyleAnimation::AddWeighted(double aCo
           list1 = aValue1.GetCSSValueListValue();
         }
         list2 = list2->mNext;
         if (!list2) {
           list2 = aValue2.GetCSSValueListValue();
         }
       }
 
-      aResultValue.SetCSSValueListValue(result.forget(), eUnit_Dasharray,
-                                        PR_TRUE);
+      aResultValue.SetAndAdoptCSSValueListValue(result.forget(),
+                                                eUnit_Dasharray);
       break;
     }
     case eUnit_Shadow: {
       // This is implemented according to:
       // http://dev.w3.org/csswg/css3-transitions/#animation-of-property-types-
       // and the third item in the summary of:
       // http://lists.w3.org/Archives/Public/www-style/2009Jul/0050.html
       const nsCSSValueList *shadow1 = aValue1.GetCSSValueListValue();
@@ -629,18 +629,17 @@ nsStyleAnimation::AddWeighted(double aCo
                               resultTail)) {
             return PR_FALSE;
             break;
           }
 
           longShadow = longShadow->mNext;
         }
       }
-      aResultValue.SetCSSValueListValue(result.forget(), eUnit_Shadow,
-                                        PR_TRUE);
+      aResultValue.SetAndAdoptCSSValueListValue(result.forget(), eUnit_Shadow);
       break;
     }
     default:
       NS_NOTREACHED("Can't interpolate using the given common unit");
       success = PR_FALSE;
       break;
   }
   return success;
@@ -1037,18 +1036,18 @@ nsStyleAnimation::ExtractComputedValue(n
                 case eStyleUnit_Percent:
                   value.SetPercentValue(coord.GetPercentValue());
                   break;
                 default:
                   NS_ABORT_IF_FALSE(PR_FALSE, "unexpected unit");
                   return PR_FALSE;
               }
             }
-            aComputedValue.SetCSSValueListValue(result.forget(),
-                                                eUnit_Dasharray, PR_TRUE);
+            aComputedValue.SetAndAdoptCSSValueListValue(result.forget(),
+                                                        eUnit_Dasharray);
           } else {
             aComputedValue.SetNoneValue();
           }
           break;
         }
 
         default:
           NS_ABORT_IF_FALSE(PR_FALSE, "missing property implementation");
@@ -1096,17 +1095,17 @@ nsStyleAnimation::ExtractComputedValue(n
       const nsStyleCoord &vert =
         corners->Get(NS_FULL_TO_HALF_CORNER(fullCorner, PR_TRUE));
       nsCSSValuePair *pair = new nsCSSValuePair;
       if (!pair) {
         return PR_FALSE;
       }
       StyleCoordToCSSValue(horiz, pair->mXValue);
       StyleCoordToCSSValue(vert, pair->mYValue);
-      aComputedValue.SetCSSValuePairValue(pair, eUnit_CSSValuePair, PR_TRUE);
+      aComputedValue.SetAndAdoptCSSValuePairValue(pair, eUnit_CSSValuePair);
       return PR_TRUE;
     }
     case eStyleAnimType_nscoord:
       aComputedValue.SetCoordValue(*static_cast<const nscoord*>(
         StyleDataAtOffset(styleStruct, ssOffset)));
       return PR_TRUE;
     case eStyleAnimType_EnumU8:
       aComputedValue.SetIntValue(*static_cast<const PRUint8*>(
@@ -1142,17 +1141,17 @@ nsStyleAnimation::ExtractComputedValue(n
       }
       return PR_FALSE;
     }
     case eStyleAnimType_Shadow: {
       const nsCSSShadowArray *shadowArray =
         *static_cast<const nsRefPtr<nsCSSShadowArray>*>(
           StyleDataAtOffset(styleStruct, ssOffset));
       if (!shadowArray) {
-        aComputedValue.SetCSSValueListValue(nsnull, eUnit_Shadow, PR_TRUE);
+        aComputedValue.SetAndAdoptCSSValueListValue(nsnull, eUnit_Shadow);
         return PR_TRUE;
       }
       nsAutoPtr<nsCSSValueList> result;
       nsCSSValueList **resultTail = getter_Transfers(result);
       for (PRUint32 i = 0, i_end = shadowArray->Length(); i < i_end; ++i) {
         const nsCSSShadowItem *shadow = shadowArray->ShadowAt(i);
         // X, Y, Radius, Spread, Color, Inset
         nsRefPtr<nsCSSValue::Array> arr = nsCSSValue::Array::Create(6);
@@ -1181,18 +1180,18 @@ nsStyleAnimation::ExtractComputedValue(n
         nsCSSValueList *resultItem = new nsCSSValueList;
         if (!resultItem) {
           return PR_FALSE;
         }
         resultItem->mValue.SetArrayValue(arr, eCSSUnit_Array);
         *resultTail = resultItem;
         resultTail = &resultItem->mNext;
       }
-      aComputedValue.SetCSSValueListValue(result.forget(), eUnit_Shadow,
-                                          PR_TRUE);
+      aComputedValue.SetAndAdoptCSSValueListValue(result.forget(),
+                                                  eUnit_Shadow);
       return PR_TRUE;
     }
     case eStyleAnimType_None:
       NS_NOTREACHED("shouldn't use on non-animatable properties");
   }
   return PR_FALSE;
 }
 
@@ -1334,49 +1333,36 @@ void
 nsStyleAnimation::Value::SetColorValue(nscolor aColor)
 {
   FreeValue();
   mUnit = eUnit_Color;
   mValue.mColor = aColor;
 }
 
 void
-nsStyleAnimation::Value::SetCSSValuePairValue(nsCSSValuePair *aValuePair,
-                                              Unit aUnit,
-                                              PRBool aTakeOwnership)
+nsStyleAnimation::Value::SetAndAdoptCSSValuePairValue(
+                           nsCSSValuePair *aValuePair, Unit aUnit)
 {
   FreeValue();
   NS_ABORT_IF_FALSE(IsCSSValuePairUnit(aUnit), "bad unit");
   NS_ABORT_IF_FALSE(aValuePair != nsnull, "value pairs may not be null");
   mUnit = aUnit;
-  if (aTakeOwnership) {
-    mValue.mCSSValuePair = aValuePair;
-  } else {
-    mValue.mCSSValuePair = new nsCSSValuePair(*aValuePair);
-    if (!mValue.mCSSValuePair) {
-      mUnit = eUnit_Null;
-    }
-  }
+  mValue.mCSSValuePair = aValuePair; // take ownership
 }
 
 void
-nsStyleAnimation::Value::SetCSSValueListValue(nsCSSValueList *aValueList,
-                                              Unit aUnit,
-                                              PRBool aTakeOwnership)
+nsStyleAnimation::Value::SetAndAdoptCSSValueListValue(
+                           nsCSSValueList *aValueList, Unit aUnit)
 {
   FreeValue();
   NS_ABORT_IF_FALSE(IsCSSValueListUnit(aUnit), "bad unit");
   NS_ABORT_IF_FALSE(aUnit != eUnit_Dasharray || aValueList != nsnull,
                     "dasharrays may not be null");
   mUnit = aUnit;
-  if (aTakeOwnership) {
-    mValue.mCSSValueList = aValueList;
-  } else {
-    mValue.mCSSValueList = aValueList ? aValueList->Clone() : nsnull;
-  }
+  mValue.mCSSValueList = aValueList; // take ownership
 }
 
 void
 nsStyleAnimation::Value::FreeValue()
 {
   if (IsCSSValueListUnit(mUnit)) {
     delete mValue.mCSSValueList;
   } else if (IsCSSValuePairUnit(mUnit)) {
diff --git a/layout/style/nsStyleAnimation.h b/layout/style/nsStyleAnimation.h
--- a/layout/style/nsStyleAnimation.h
+++ b/layout/style/nsStyleAnimation.h
@@ -306,20 +306,20 @@ public:
     void SetNormalValue();
     void SetAutoValue();
     void SetNoneValue();
     void SetIntValue(PRInt32 aInt, Unit aUnit);
     void SetCoordValue(nscoord aCoord);
     void SetPercentValue(float aPercent);
     void SetFloatValue(float aFloat);
     void SetColorValue(nscolor aColor);
-    void SetCSSValueListValue(nsCSSValueList *aValue, Unit aUnit,
-                              PRBool aTakeOwnership);
-    void SetCSSValuePairValue(nsCSSValuePair *aValue, Unit aUnit,
-                              PRBool aTakeOwnership);
+    // These setters take ownership of |aValue|, and are therefore named
+    // "SetAndAdopt*".
+    void SetAndAdoptCSSValueListValue(nsCSSValueList *aValue, Unit aUnit);
+    void SetAndAdoptCSSValuePairValue(nsCSSValuePair *aValue, Unit aUnit);
 
     Value& operator=(const Value& aOther);
 
     PRBool operator==(const Value& aOther) const;
     PRBool operator!=(const Value& aOther) const
       { return !(*this == aOther); }
 
   private:
