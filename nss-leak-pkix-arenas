From: L. David Baron <dbaron@dbaron.org>

Fix (or comment on) leaky design flaws in libPKIX arenas.  (Bug 391775, Bug 391776)

diff --git a/security/nss/lib/libpkix/pkix_pl_nss/system/pkix_pl_mem.c b/security/nss/lib/libpkix/pkix_pl_nss/system/pkix_pl_mem.c
--- a/security/nss/lib/libpkix/pkix_pl_nss/system/pkix_pl_mem.c
+++ b/security/nss/lib/libpkix/pkix_pl_nss/system/pkix_pl_mem.c
@@ -151,16 +151,18 @@ PKIX_PL_Realloc(
                 PKIX_MEM_DEBUG("\tCalling PORT_ArenaAlloc.\n");
                 result = PORT_ArenaAlloc(nssContext->arena, size);
 
                 if (result){
                         PKIX_MEM_DEBUG("\tCalling PORT_Memcpy.\n");
                         PORT_Memcpy(result, ptr, size);
                 }
                 *pMemory = result;
+
+                /* FIXME: not ok to just leak for lifetime of app */
         } else {
                 PKIX_MEM_DEBUG("\tCalling PR_Realloc.\n");
                 result = (void *) PR_Realloc(ptr, size);
 
                 if (result == NULL) {
                         if (size == 0){
                                 *pMemory = NULL;
                         } else {
@@ -190,12 +192,14 @@ PKIX_PL_Free(
         PKIX_PL_NssContext *context = NULL;
 
         PKIX_ENTER(MEM, "PKIX_PL_Free");
 
         context = (PKIX_PL_NssContext *) plContext;
         if (context == NULL || context->arena == NULL) {
             PKIX_MEM_DEBUG("\tCalling PR_Free.\n");
             (void) PR_Free(ptr);
+        } else {
+            /* FIXME: not ok to just leak for lifetime of app */
         }
 
         PKIX_RETURN(MEM);
 }
diff --git a/security/nss/lib/libpkix/pkix_pl_nss/system/pkix_pl_object.c b/security/nss/lib/libpkix/pkix_pl_nss/system/pkix_pl_object.c
--- a/security/nss/lib/libpkix/pkix_pl_nss/system/pkix_pl_object.c
+++ b/security/nss/lib/libpkix/pkix_pl_nss/system/pkix_pl_object.c
@@ -800,34 +800,21 @@ cleanup:
  * FUNCTION: PKIX_PL_Object_IncRef (see comments in pkix_pl_system.h)
  */
 PKIX_Error *
 PKIX_PL_Object_IncRef(
         PKIX_PL_Object *object,
         void *plContext)
 {
         PKIX_PL_Object *objectHeader = NULL;
-        PKIX_PL_NssContext *context = NULL;
         PKIX_Int32 refCount = 0;
 
         PKIX_ENTER(OBJECT, "PKIX_PL_Object_IncRef");
         PKIX_NULLCHECK_ONE(object);
 
-        if (plContext){
-                /* 
-                 * PKIX_PL_NssContext is not a complete PKIX Type, it doesn't
-                 * have a header therefore we cannot verify its type before
-                 * casting.
-                 */  
-                context = (PKIX_PL_NssContext *) plContext;
-                if (context->arena != NULL) {
-                        goto cleanup;
-                }
-        }
-
         if (object == (PKIX_PL_Object*)PKIX_ALLOC_ERROR()) {
                 goto cleanup;
         }
 
         /* Shift pointer from user data to object header */
         PKIX_CHECK(pkix_pl_Object_GetHeader(object, &objectHeader, plContext),
                     PKIX_RECEIVEDCORRUPTEDOBJECTARGUMENT);
 
@@ -848,33 +835,20 @@ cleanup:
  */
 PKIX_Error *
 PKIX_PL_Object_DecRef(
         PKIX_PL_Object *object,
         void *plContext)
 {
         PKIX_Int32 refCount = 0;
         PKIX_PL_Object *objectHeader = NULL;
-        PKIX_PL_NssContext *context = NULL;
             
         PKIX_ENTER(OBJECT, "PKIX_PL_Object_DecRef");
         PKIX_NULLCHECK_ONE(object);
 
-        if (plContext){
-                /* 
-                 * PKIX_PL_NssContext is not a complete PKIX Type, it doesn't
-                 * have a header therefore we cannot verify its type before
-                 * casting.
-                 */  
-                context = (PKIX_PL_NssContext *) plContext;
-                if (context->arena != NULL) {
-                        goto cleanup;
-                }
-        }
-
         if (object == (PKIX_PL_Object*)PKIX_ALLOC_ERROR()) {
                 goto cleanup;
         }
 
         /* Shift pointer from user data to object header */
         PKIX_CHECK(pkix_pl_Object_GetHeader(object, &objectHeader, plContext),
                     PKIX_RECEIVEDCORRUPTEDOBJECTARGUMENT);
 
