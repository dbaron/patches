Fix (or comment on) leaky design flaws in libPKIX arenas.  (Bug 391775, Bug 391776)

diff --git a/security/nss/lib/libpkix/pkix_pl_nss/system/pkix_pl_mem.c b/security/nss/lib/libpkix/pkix_pl_nss/system/pkix_pl_mem.c
--- a/security/nss/lib/libpkix/pkix_pl_nss/system/pkix_pl_mem.c
+++ b/security/nss/lib/libpkix/pkix_pl_nss/system/pkix_pl_mem.c
@@ -156,6 +156,8 @@ PKIX_PL_Realloc(
                         PORT_Memcpy(result, ptr, size);
                 }
                 *pMemory = result;
+
+                /* FIXME: not ok to just leak for lifetime of app */
         } else {
                 PKIX_MEM_DEBUG("\tCalling PR_Realloc.\n");
                 result = (void *) PR_Realloc(ptr, size);
@@ -195,6 +197,8 @@ PKIX_PL_Free(
         if (context == NULL || context->arena == NULL) {
             PKIX_MEM_DEBUG("\tCalling PR_Free.\n");
             (void) PR_Free(ptr);
+        } else {
+            /* FIXME: not ok to just leak for lifetime of app */
         }
 
         PKIX_RETURN(MEM);
@@ -210,16 +214,8 @@ PKIX_PL_Memcpy(
         void **pDest,
         void *plContext)
 {
-        PKIX_PL_NssContext *nssContext = NULL;
-
         PKIX_ENTER(MEM, "PKIX_PL_Memcpy");
         PKIX_NULLCHECK_TWO(source, pDest);
-
-        nssContext = (PKIX_PL_NssContext *)plContext; 
-
-        if (nssContext != NULL && nssContext->arena != NULL) {
-                 PKIX_ERROR_ALLOC_ERROR();
-        }
 
         PKIX_MEM_DEBUG("\tCalling PORT_Memcpy.\n");
         (void) PORT_Memcpy(*pDest, source, length);
diff --git a/security/nss/lib/libpkix/pkix_pl_nss/system/pkix_pl_object.c b/security/nss/lib/libpkix/pkix_pl_nss/system/pkix_pl_object.c
--- a/security/nss/lib/libpkix/pkix_pl_nss/system/pkix_pl_object.c
+++ b/security/nss/lib/libpkix/pkix_pl_nss/system/pkix_pl_object.c
@@ -817,23 +817,10 @@ PKIX_PL_Object_IncRef(
         void *plContext)
 {
         PKIX_PL_Object *objectHeader = NULL;
-        PKIX_PL_NssContext *context = NULL;
         PKIX_Int32 refCount = 0;
 
         PKIX_ENTER(OBJECT, "PKIX_PL_Object_IncRef");
         PKIX_NULLCHECK_ONE(object);
-
-        if (plContext){
-                /* 
-                 * PKIX_PL_NssContext is not a complete PKIX Type, it doesn't
-                 * have a header therefore we cannot verify its type before
-                 * casting.
-                 */  
-                context = (PKIX_PL_NssContext *) plContext;
-                if (context->arena != NULL) {
-                        goto cleanup;
-                }
-        }
 
         if (object == (PKIX_PL_Object*)PKIX_ALLOC_ERROR()) {
                 goto cleanup;
@@ -865,22 +852,9 @@ PKIX_PL_Object_DecRef(
 {
         PKIX_Int32 refCount = 0;
         PKIX_PL_Object *objectHeader = NULL;
-        PKIX_PL_NssContext *context = NULL;
             
         PKIX_ENTER(OBJECT, "PKIX_PL_Object_DecRef");
         PKIX_NULLCHECK_ONE(object);
-
-        if (plContext){
-                /* 
-                 * PKIX_PL_NssContext is not a complete PKIX Type, it doesn't
-                 * have a header therefore we cannot verify its type before
-                 * casting.
-                 */  
-                context = (PKIX_PL_NssContext *) plContext;
-                if (context->arena != NULL) {
-                        goto cleanup;
-                }
-        }
 
         if (object == (PKIX_PL_Object*)PKIX_ALLOC_ERROR()) {
                 goto cleanup;
