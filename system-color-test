Add a test for completeness of system color support.

diff --git a/layout/style/test/Makefile.in b/layout/style/test/Makefile.in
--- a/layout/style/test/Makefile.in
+++ b/layout/style/test/Makefile.in
@@ -45,6 +45,19 @@ include $(DEPTH)/config/autoconf.mk
 
 MODULE		= layout
 
+REQUIRES	= xpcom \
+		  string \
+		  widget \
+		  gfx \
+		  content \
+		  thebes \
+		  locale \
+		  necko \
+		  dom \
+		  $(NULL)
+
+MOZILLA_INTERNAL_API = 1
+
 # XXX Yuck.  We can't transfer everything from autoconf to HOST_CFLAGS,
 # but it would be nice to pick up anything affecting nsCSSPropList.h
 # automatically.
@@ -59,7 +72,26 @@ HOST_CPPSRCS	= \
 
 HOST_SIMPLE_PROGRAMS	= $(addprefix host_, $(HOST_CPPSRCS:.cpp=$(HOST_BIN_SUFFIX)))
 
+CPPSRCS		= \
+		TestSystemColorSupport.cpp \
+		$(NULL)
+
+SIMPLE_PROGRAMS	= $(CPPSRCS:.cpp=$(BIN_SUFFIX))
+
+CPP_UNIT_TESTS	= \
+		TestSystemColorSupport \
+		$(NULL)
+
 include $(topsrcdir)/config/rules.mk
+
+LIBS		+= \
+		$(XPCOM_LIBS) \
+		$(NSPR_LIBS) \
+		$(NULL)
+
+LOCAL_INCLUDES	= \
+		-I$(srcdir)/../../../xpcom/tests \
+		$(NULL)
 
 css_properties.js: host_ListCSSProperties$(HOST_BIN_SUFFIX) css_properties_like_longhand.js Makefile
 	$(RM) $@
@@ -67,6 +99,14 @@ css_properties.js: host_ListCSSPropertie
 	cat $(srcdir)/css_properties_like_longhand.js >> $@
 
 GARBAGE += css_properties.js
+
+TestSystemColorSupport.$(OBJ_SUFFIX): SystemColorList.h
+
+SystemColorList.h: $(srcdir)/extract-color-table.pl $(srcdir)/../nsCSSProps.cpp
+	$(RM) $@
+	perl $^ > $@
+
+GARBAGE += SystemColorList.h
 
 _TEST_FILES =	test_bug73586.html \
 		test_bug74880.html \
diff --git a/layout/style/test/TestSystemColorSupport.cpp b/layout/style/test/TestSystemColorSupport.cpp
new file mode 100644
--- /dev/null
+++ b/layout/style/test/TestSystemColorSupport.cpp
@@ -0,0 +1,112 @@
+/* vim: set shiftwidth=4 tabstop=8 autoindent cindent expandtab: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is TestSystemColorSupport.
+ *
+ * The Initial Developer of the Original Code is the Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2008
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   L. David Baron <dbaron@dbaron.org>, Mozilla Corporation (original author)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+/* Test that the platform provides support for all CSS system colors */
+
+#include "nsILookAndFeel.h"
+#include "TestHarness.h"
+#include "nsServiceManagerUtils.h"
+#include "nsCSSKeywords.h"
+#include "nsStyleConsts.h"
+#include <string.h>
+
+#include "SystemColorList.h"
+
+#define UNINITIALIZED_COLOR NS_RGBA(0xde, 0xad, 0xbe, 0xef)
+
+PRBool
+expected_fail(nsCSSKeyword aKeyword)
+{
+    return
+#ifndef XP_MAC
+        aKeyword == eCSSKeyword__moz_oddrowbackground || // bug 429188
+#endif
+        PR_FALSE;
+}
+
+int
+main()
+{
+    ScopedXPCOM xpcom("TestSystemColorSupport");
+    if (xpcom.failed()) {
+        return 1;
+    }
+
+    nsCOMPtr<nsILookAndFeel> lf =
+        do_GetService("@mozilla.org/widget/lookandfeel;1");
+    if (!lf) {
+        printf("FAIL Couldn't get look-and-feel service.\n");
+        return 1;
+    }
+
+    int have_failure = 0;
+    for (const ColorTableEntry* entry = kColorKTable;
+         entry->keyword != eCSSKeyword_UNKNOWN; ++entry) {
+        if (entry->value < 0) {
+            // It's not a system color
+            printf("Skipping color %d\n", int(entry->value));
+            continue;
+        }
+        nsILookAndFeel::nsColorID colorID =
+            nsILookAndFeel::nsColorID(entry->value);
+        nscolor color = UNINITIALIZED_COLOR;
+        nsresult rv = lf->GetColor(colorID, color);
+        PRBool xfail = expected_fail(entry->keyword);
+        PRBool didfail;
+        if (NS_FAILED(rv)) {
+            didfail = PR_TRUE;
+            printf("%s Got failure result 0x%08X for color %d (keyword %s)\n",
+                   xfail ? "EXPECTED FAIL" : "FAIL",
+                   rv, int(colorID), entry->keywordName);
+        } else if (color == UNINITIALIZED_COLOR) {
+            didfail = PR_TRUE;
+            printf("%s Color was not filled in for color %d (keyword %s)\n",
+                   xfail ? "EXPECTED FAIL" : "FAIL",
+                   int(colorID), entry->keywordName);
+        } else {
+            didfail = PR_FALSE;
+            printf("%s Got color %08X for color %d (keyword %s)\n",
+                   xfail ? "FAIL (UNEXPECTED PASS!)" : "PASS",
+                   color, int(colorID), entry->keywordName);
+
+        }
+        if (didfail != xfail) {
+            have_failure = PR_TRUE;
+        }
+    }
+    return have_failure;
+}
diff --git a/layout/style/test/extract-color-table.pl b/layout/style/test/extract-color-table.pl
new file mode 100755
--- /dev/null
+++ b/layout/style/test/extract-color-table.pl
@@ -0,0 +1,65 @@
+#!/usr/bin/perl
+# vim: set shiftwidth=4 tabstop=8 autoindent expandtab:
+# ***** BEGIN LICENSE BLOCK *****
+# Version: MPL 1.1/GPL 2.0/LGPL 2.1
+#
+# The contents of this file are subject to the Mozilla Public License Version
+# 1.1 (the "License"); you may not use this file except in compliance with
+# the License. You may obtain a copy of the License at
+# http://www.mozilla.org/MPL/
+#
+# Software distributed under the License is distributed on an "AS IS" basis,
+# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+# for the specific language governing rights and limitations under the
+# License.
+#
+# The Original Code is extract-color-table.pl.
+#
+# The Initial Developer of the Original Code is the Mozilla Foundation.
+# Portions created by the Initial Developer are Copyright (C) 2008
+# the Initial Developer. All Rights Reserved.
+#
+# Contributor(s):
+#   L. David Baron <dbaron@dbaron.org>, Mozilla Corporation (original author)
+#
+# Alternatively, the contents of this file may be used under the terms of
+# either the GNU General Public License Version 2 or later (the "GPL"), or
+# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+# in which case the provisions of the GPL or the LGPL are applicable instead
+# of those above. If you wish to allow use of your version of this file only
+# under the terms of either the GPL or the LGPL, and not to allow others to
+# use your version of this file under the terms of the MPL, indicate your
+# decision by deleting the provisions above and replace them with the notice
+# and other provisions required by the GPL or the LGPL. If you do not delete
+# the provisions above, a recipient may use your version of this file under
+# the terms of any one of the MPL, the GPL or the LGPL.
+#
+# ***** END LICENSE BLOCK *****
+
+# It's far easier to extract the color table from the C++ file than to
+# link with the layout component.
+
+print <<EOM
+struct ColorTableEntry {
+    nsCSSKeyword keyword;
+    const char *keywordName;
+    PRInt32 value;
+};
+EOM
+;
+
+while (<>) {
+    if (/^const PRInt32 nsCSSProps::kColorKTable\[\] = {$/) {
+        print "const ColorTableEntry kColorKTable[] = {";
+        last;
+    }
+}
+
+while (<>) {
+    if (/^}/) {
+        print;
+        last;
+    }
+    s/^  ([^,]*),([^,]*)(,?)$/  { \1, "\1", \2 }\3/;
+    print;
+}
