From: L. David Baron <dbaron@dbaron.org>

Make import-tests.py generate the current state of the reftest manifest, and warn that the file is autogenerated.  (Bug 817810)  No review.

diff --git a/layout/reftests/w3c-css/import-tests.py b/layout/reftests/w3c-css/import-tests.py
--- a/layout/reftests/w3c-css/import-tests.py
+++ b/layout/reftests/w3c-css/import-tests.py
@@ -43,16 +43,20 @@ gPrefixedProperties = [
     "column-rule-color",
     "column-rule-style",
     "column-rule-width",
     "columns",
     "column-span",
     "column-width"
 ]
 
+gDefaultPreferences = {
+    "css3-conditional": "pref(layout.css.supports-rule.enabled,true)"
+}
+
 gLog = None
 gFailList = {}
 gDestPath = None
 gSrcPath = None
 support_dirs_mapped = set()
 filemap = {}
 speclinkmap = {}
 propsaddedfor = []
@@ -239,16 +243,18 @@ def read_options():
             the local clone of the hg repository must be given on the command
             line.'''
     (gOptions, gArgs) = op.parse_args()
     if len(gArgs) != 1:
         op.error("Too few arguments specified.")
 
 def setup_paths():
     global gSubtrees, gDestPath, gSrcPath
+    # FIXME: generate gSrcPath with consistent trailing / regardless of input.
+    # (We currently expect the argument to have a trailing slash.)
     gSrcPath = gArgs[0]
     if not os.path.isdir(gSrcPath) or \
     not os.path.isdir(os.path.join(gSrcPath, ".hg")):
         raise StandardError("source path does not appear to be a mercurial clone")
 
     gDestPath = os.path.join(os.path.dirname(os.path.realpath(__file__)), "received")
     newSubtrees = []
     for relPath in gSubtrees:
@@ -279,20 +285,29 @@ def main():
     write_log_header()
     remove_existing_dirs()
     populate_test_files()
 
     for t in gTestfiles:
         add_test_items(t, spec=None)
 
     listfile = open(os.path.join(gDestPath, "reftest.list"), "w")
+    listfile.write("# THIS FILE IS AUTOGENERATED BY {0}\n# DO NOT EDIT!\n".format(os.path.basename(__file__)))
+    lastDefaultPreferences = None
     for test in tests:
+        defaultPreferences = gDefaultPreferences.get(test[1].split("/")[0], None)
+        if defaultPreferences != lastDefaultPreferences:
+            if defaultPreferences is None:
+                listfile.write("\ndefault-preferences\n\n")
+            else:
+                listfile.write("\ndefault-preferences {0}\n\n".format(defaultPreferences))
+            lastDefaultPreferences = defaultPreferences
         key = 0
         while not test[key] in gTestFlags.keys() and key < len(test):
-          key = key + 1
+            key = key + 1
         testKey = test[key]
         if 'ahem' in gTestFlags[testKey]:
             test = ["HTTP(../../..)"] + test
         if testKey in gFailList:
             test = ["fails"] + test
         listfile.write(" ".join(test) + "\n")
     listfile.close()
 
diff --git a/layout/reftests/w3c-css/received/reftest.list b/layout/reftests/w3c-css/received/reftest.list
--- a/layout/reftests/w3c-css/received/reftest.list
+++ b/layout/reftests/w3c-css/received/reftest.list
@@ -1,8 +1,10 @@
+# THIS FILE IS AUTOGENERATED BY import-tests.py
+# DO NOT EDIT!
 == css3-namespace/prefix-001.xml css3-namespace/ref-lime-1.xml
 == css3-namespace/prefix-002.xml css3-namespace/ref-lime-1.xml
 == css3-namespace/prefix-003.xml css3-namespace/ref-lime-1-generic.xml
 == css3-namespace/prefix-004.xml css3-namespace/ref-lime-2-generic.xml
 == css3-namespace/prefix-005.xml css3-namespace/ref-lime-2-generic.xml
 == css3-namespace/prefix-006.xml css3-namespace/ref-lime-2.xml
 == css3-namespace/scope-001.xml css3-namespace/ref-lime-1.xml
 == css3-namespace/scope-002.xml css3-namespace/ref-lime-1.xml
