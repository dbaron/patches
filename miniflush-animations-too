From: L. David Baron <dbaron@dbaron.org>

Bug 996796 patch 1 - Perform a miniflush on both animations and transitions before processing restyles.

This affects the correctness of transitions that take over from a
running animation.  (In the current code this can happen on a single
element; once the cascading changes in bug 960465 are complete it can
only happen via inheritance.)

The final two added tests fail without the patch and pass with the patch.

FIXME: Make sure a bug is filed for these todo's if they're not fixed
later in the patch stack.

diff --git a/layout/base/RestyleManager.cpp b/layout/base/RestyleManager.cpp
--- a/layout/base/RestyleManager.cpp
+++ b/layout/base/RestyleManager.cpp
@@ -1432,16 +1432,17 @@ RestyleManager::ProcessPendingRestyles()
   // resulting from any throttled animations (animations that we're
   // running entirely on the compositor thread) is up-to-date, so that
   // if any style changes we cause trigger transitions, we have the
   // correct old style for starting the transition.
   if (nsLayoutUtils::AreAsyncAnimationsEnabled() &&
       mPendingRestyles.Count() > 0) {
     ++mAnimationGeneration;
     mPresContext->TransitionManager()->UpdateAllThrottledStyles();
+    mPresContext->AnimationManager()->UpdateAllThrottledStyles();
   }
 
   mPendingRestyles.ProcessRestyles();
 
 #ifdef DEBUG
   uint32_t oldPendingRestyleCount = mPendingRestyles.Count();
 #endif
 
diff --git a/layout/style/test/test_animations_omta_start.html b/layout/style/test/test_animations_omta_start.html
--- a/layout/style/test/test_animations_omta_start.html
+++ b/layout/style/test/test_animations_omta_start.html
@@ -115,17 +115,64 @@ function testBackwardsFill() {
       gUtils.advanceTimeAndRefresh(100);
       waitForAllPaints(function() {
         var transform = gUtils.getOMTAStyle(target, "transform");
         is(transform, "matrix(1, 0, 0, 1, 1, 0)",
            "transform is set on compositor thread after delayed start " +
            "with backwards fill");
         target.removeAttribute("style");
         gUtils.restoreNormalRefresh();
-        SimpleTest.finish();
+        testTransitionTakingOver();
+      });
+    });
+  });
+}
+
+function testTransitionTakingOver() {
+  gUtils.advanceTimeAndRefresh(0);
+
+  var parent = newTarget();
+  var child = newTarget();
+  parent.appendChild(child);
+  parent.style.transform = "translate(0px)";
+  parent.style.animation = "10s anim-transform-2 linear";
+  parent.style.opacity = "1.0";
+  child.style.transform = "inherit";
+  child.style.transition = "10s transform linear";
+  child.style.opacity = "1.0";
+
+  var childCS = getComputedStyle(child, "");
+
+  gUtils.advanceTimeAndRefresh(0);
+  waitForAllPaints(function() {
+    gUtils.advanceTimeAndRefresh(4000);
+    waitForAllPaints(function() {
+      child.style.transform = "translate(100px)";
+      var transform = gUtils.getOMTAStyle(child, "transform");
+      // FIXME: Bug with inheritance!
+      todo_is(transform, "matrix(1, 0, 0, 1, 40, 0)",
+         "transition that interrupted animation is correct");
+      gUtils.advanceTimeAndRefresh(0);
+      waitForAllPaints(function() {
+        var transform = gUtils.getOMTAStyle(child, "transform");
+        // FIXME: Bug with inheritance!
+        todo_is(transform, "matrix(1, 0, 0, 1, 40, 0)",
+           "transition that interrupted animation is correct");
+        gUtils.advanceTimeAndRefresh(5000);
+        waitForAllPaints(function() {
+          var transform = gUtils.getOMTAStyle(child, "transform");
+          is(transform, "matrix(1, 0, 0, 1, 70, 0)",
+             "transition that interrupted animation is correct");
+          is(childCS.transform, "matrix(1, 0, 0, 1, 70, 0)",
+             "transition that interrupted animation is correct");
+          parent.removeAttribute("style");
+          child.removeAttribute("style");
+          gUtils.restoreNormalRefresh();
+          SimpleTest.finish();
+        });
       });
     });
   });
 }
 
 </script>
 </pre>
 </body>
