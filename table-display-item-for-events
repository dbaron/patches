From: L. David Baron <dbaron@dbaron.org>

Always create nsDisplayTableBorderBackground when we're doing event delivery.  (Bug 541668)

diff --git a/layout/tables/nsTableFrame.cpp b/layout/tables/nsTableFrame.cpp
--- a/layout/tables/nsTableFrame.cpp
+++ b/layout/tables/nsTableFrame.cpp
@@ -1322,20 +1322,23 @@ nsTableFrame::BuildDisplayList(nsDisplay
     // opacity and visibility optimizations
     if (deflate.IsZero()) {
       nsresult rv = DisplayBackgroundUnconditional(aBuilder, aLists, PR_FALSE);
       NS_ENSURE_SUCCESS(rv, rv);
     }
   }
 
   nsDisplayTableItem* item = nsnull;
-  // This background is created if any of the table parts are visible.
+  // This background is created if any of the table parts are visible,
+  // or if we're doing event handling (since DisplayGenericTablePart
+  // needs the item for the |sortEventBackgrounds|-dependent code).
   // Specific visibility decisions are delegated to the table background
   // painter, which handles borders and backgrounds for the table.
-  if (AnyTablePartHasBorderOrBackground(this)) {
+  if (aBuilder->IsForEventDelivery() ||
+      AnyTablePartHasBorderOrBackground(this)) {
     item = new (aBuilder) nsDisplayTableBorderBackground(this);
     nsresult rv = aLists.BorderBackground()->AppendNewToTop(item);
     NS_ENSURE_SUCCESS(rv, rv);
   }
 
   return DisplayGenericTablePart(aBuilder, this, aDirtyRect, aLists, item);
 }
 
diff --git a/layout/tables/test/Makefile.in b/layout/tables/test/Makefile.in
--- a/layout/tables/test/Makefile.in
+++ b/layout/tables/test/Makefile.in
@@ -41,12 +41,13 @@ srcdir		= @srcdir@
 VPATH		= @srcdir@
 relativesrcdir  = layout/tables/test
 
 include $(DEPTH)/config/autoconf.mk
 include $(topsrcdir)/config/rules.mk
 
 _TEST_FILES = \
 		test_bug337124.html \
+		test_bug541668_table_event_delivery.html \
 		$(NULL)
 
 libs:: $(_TEST_FILES)
 	$(INSTALL) $(foreach f,$^,"$f") $(DEPTH)/_tests/testing/mochitest/tests/$(relativesrcdir)
diff --git a/layout/tables/test/test_bug541668_table_event_delivery.html b/layout/tables/test/test_bug541668_table_event_delivery.html
new file mode 100644
--- /dev/null
+++ b/layout/tables/test/test_bug541668_table_event_delivery.html
@@ -0,0 +1,50 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+https://bugzilla.mozilla.org/show_bug.cgi?id=541668
+-->
+<head>
+  <title>Test for Bug 541668</title>
+  <script type="application/javascript" src="/MochiKit/packed.js"></script>
+  <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="application/javascript" src="/tests/SimpleTest/EventUtils.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
+</head>
+<body>
+<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=541668">Mozilla Bug 541668</a>
+<table id="display">
+  <tr>
+    <td rowspan="2">
+      <div id="target" style="background:fuchsia;height:200px;width:200px"></div>
+    </td>
+    <td>Cell</td>
+  </tr>
+  <tr>
+    <td>Cell</td>
+  </tr>
+</table>
+<pre id="test">
+<script type="application/javascript">
+
+/** Test for Bug 541668 **/
+
+SimpleTest.waitForExplicitFinish();
+SimpleTest.waitForFocus(run_test);
+
+function run_test()
+{
+  var target = document.getElementById("target");
+
+  var got_mousemove = false;
+  target.addEventListener("mousemove",
+                          function(event) { got_mousemove = true },
+                          false);
+  synthesizeMouse(target, 150, 150, { type: "mousemove" });
+  is(got_mousemove, true, "should get mousemove on block");
+  SimpleTest.finish();
+}
+
+</script>
+</pre>
+</body>
+</html>
