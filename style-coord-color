From: L. David Baron <dbaron@dbaron.org>

Add support for color values to nsStyleCoord so nsStyleAnimation can animate colors.  (Bug 504652)  r=bzbarsky

diff --git a/layout/style/nsStyleCoord.cpp b/layout/style/nsStyleCoord.cpp
--- a/layout/style/nsStyleCoord.cpp
+++ b/layout/style/nsStyleCoord.cpp
@@ -122,16 +122,22 @@ void nsStyleCoord::Reset(void)
 }
 
 void nsStyleCoord::SetCoordValue(nscoord aValue)
 {
   mUnit = eStyleUnit_Coord;
   mValue.mInt = aValue;
 }
 
+void nsStyleCoord::SetColorValue(nscolor aValue)
+{
+  mUnit = eStyleUnit_Color;
+  mValue.mColor = aValue;
+}
+
 void nsStyleCoord::SetIntValue(PRInt32 aValue, nsStyleUnit aUnit)
 {
   NS_ASSERTION((aUnit == eStyleUnit_Enumerated) ||
                (aUnit == eStyleUnit_Integer), "not an int value");
   if ((aUnit == eStyleUnit_Enumerated) ||
       (aUnit == eStyleUnit_Integer)) {
     mUnit = aUnit;
     mValue.mInt = aValue;
diff --git a/layout/style/nsStyleCoord.h b/layout/style/nsStyleCoord.h
--- a/layout/style/nsStyleCoord.h
+++ b/layout/style/nsStyleCoord.h
@@ -37,35 +37,38 @@
 
 /* representation of length values in computed style data */
 
 #ifndef nsStyleCoord_h___
 #define nsStyleCoord_h___
 
 #include "nscore.h"
 #include "nsCoord.h"
+#include "nsColor.h"
 #include "nsCRT.h"
 #include "nsStyleConsts.h"
 class nsString;
 
 enum nsStyleUnit {
   eStyleUnit_Null         = 0,      // (no value) value is not specified
   eStyleUnit_Normal       = 1,      // (no value)
   eStyleUnit_Auto         = 2,      // (no value)
   eStyleUnit_None         = 3,      // (no value)
   eStyleUnit_Percent      = 10,     // (float) 1.0 == 100%
   eStyleUnit_Factor       = 11,     // (float) a multiplier
   eStyleUnit_Coord        = 20,     // (nscoord) value is twips
   eStyleUnit_Integer      = 30,     // (int) value is simple integer
-  eStyleUnit_Enumerated   = 32      // (int) value has enumerated meaning
+  eStyleUnit_Enumerated   = 32,     // (int) value has enumerated meaning
+  eStyleUnit_Color        = 40      // (nscolor)
 };
 
 typedef union {
   PRInt32     mInt;   // nscoord is a PRInt32 for now
   float       mFloat;
+  nscolor     mColor;
 } nsStyleUnion;
 
 /**
  * Class that hold a single size specification used by the style
  * system.  The size specification consists of two parts -- a number
  * and a unit.  The number is an integer, a floating point value, an
  * nscoord, or undefined, and the unit is an nsStyleUnit.  Checking
  * the unit is a must before asking for the value in any particular
@@ -88,26 +91,28 @@ public:
 
   nsStyleUnit GetUnit(void) const {
     return mUnit;
   }
   nscoord     GetCoordValue(void) const;
   PRInt32     GetIntValue(void) const;
   float       GetPercentValue(void) const;
   float       GetFactorValue(void) const;
+  nscolor     GetColorValue() const;
   void        GetUnionValue(nsStyleUnion& aValue) const;
 
   void  Reset(void);  // sets to null
   void  SetCoordValue(nscoord aValue);
   void  SetIntValue(PRInt32 aValue, nsStyleUnit aUnit);
   void  SetPercentValue(float aValue);
   void  SetFactorValue(float aValue);
   void  SetNormalValue(void);
   void  SetAutoValue(void);
   void  SetNoneValue(void);
+  void  SetColorValue(nscolor aValue);
 
 public:
   nsStyleUnit   mUnit;
   nsStyleUnion  mValue;
 };
 
 
 /**
@@ -241,16 +246,25 @@ inline float nsStyleCoord::GetFactorValu
 {
   NS_ASSERTION(mUnit == eStyleUnit_Factor, "not a factor value");
   if (mUnit == eStyleUnit_Factor) {
     return mValue.mFloat;
   }
   return 0.0f;
 }
 
+inline nscolor nsStyleCoord::GetColorValue() const
+{
+  NS_ASSERTION((mUnit == eStyleUnit_Color), "not a color value");
+  if (mUnit == eStyleUnit_Color) {
+    return mValue.mColor;
+  }
+  return NS_RGBA(0, 0, 0, 0);
+}
+
 inline void nsStyleCoord::GetUnionValue(nsStyleUnion& aValue) const
 {
   memcpy(&aValue, &mValue, sizeof(nsStyleUnion));
 }
 
 // -------------------------
 // nsStyleSides inlines
 //
