From: L. David Baron <dbaron@dbaron.org>

Bug 604836 - Compute maxDescent from height and ascender instead of from descender to avoid accumulation of rounding up.

TODO: IS THIS PATCH NO LONGER NEEDED?  (See comment 15 in bug.)

diff --git a/gfx/thebes/gfxFT2Utils.cpp b/gfx/thebes/gfxFT2Utils.cpp
--- a/gfx/thebes/gfxFT2Utils.cpp
+++ b/gfx/thebes/gfxFT2Utils.cpp
@@ -79,18 +79,24 @@ gfxFT2LockedFace::GetMetrics(gfxFont::Me
         aMetrics->strikeoutSize = underlineSize;
 
         *aSpaceGlyph = 0;
         return;
     }
 
     const FT_Size_Metrics& ftMetrics = mFace->size->metrics;
 
-    aMetrics->maxAscent = FLOAT_FROM_26_6(ftMetrics.ascender);
+    // freetype rounds the ascender, descender, and height
+    // independently, so that ascender + descender can sometimes be
+    // greater than height.  We want the height to be correct, so we'll
+    // throw away its ascender value.  (descender may be more important
+    // because of underline positioning.)
     aMetrics->maxDescent = -FLOAT_FROM_26_6(ftMetrics.descender);
+    aMetrics->maxAscent = FLOAT_FROM_26_6(ftMetrics.height) -
+                          aMetrics->maxDescent;
     aMetrics->maxAdvance = FLOAT_FROM_26_6(ftMetrics.max_advance);
     gfxFloat lineHeight = FLOAT_FROM_26_6(ftMetrics.height);
 
     gfxFloat emHeight;
     // Scale for vertical design metric conversion: pixels per design unit.
     // If this remains at 0.0, we can't use metrics from OS/2 etc.
     gfxFloat yScale = 0.0;
     if (FT_IS_SCALABLE(mFace)) {
@@ -146,20 +152,26 @@ gfxFT2LockedFace::GetMetrics(gfxFont::Me
         if (os2->fsSelection & kUseTypoMetricsMask) {
             aMetrics->maxAscent = NS_round(aMetrics->emAscent);
             aMetrics->maxDescent = NS_round(aMetrics->emDescent);
         } else {
             // maxAscent/maxDescent get used for frame heights, and some fonts
             // don't have the HHEA table ascent/descent set (bug 279032).
             // We use NS_round here to parallel the pixel-rounded values that
             // freetype gives us for ftMetrics.ascender/descender.
-            aMetrics->maxAscent =
-                std::max(aMetrics->maxAscent, NS_round(aMetrics->emAscent));
-            aMetrics->maxDescent =
-                std::max(aMetrics->maxDescent, NS_round(aMetrics->emDescent));
+            // However, because we might have rebalanced the rounding
+            // between ascender and descender in order to preserve height,
+            // only do this if it would actually increase height.
+            if (NS_round(aMetrics->emAscent + aMetrics->emDescent) >
+                NS_round(aMetrics->maxAscent + aMetrics->maxDescent)) {
+                aMetrics->maxAscent =
+                    std::max(aMetrics->maxAscent, NS_round(aMetrics->emAscent));
+                aMetrics->maxDescent =
+                    std::max(aMetrics->maxDescent, NS_round(aMetrics->emDescent));
+            }
         }
     } else {
         aMetrics->emAscent = aMetrics->maxAscent;
         aMetrics->emDescent = aMetrics->maxDescent;
     }
 
     cairo_text_extents_t extents;
     *aSpaceGlyph = GetCharExtents(' ', &extents);
