From: L. David Baron <dbaron@dbaron.org>

Bug 604836 - Compute maxDescent from height and ascender instead of from descender to avoid accumulation of rounding up.

TODO: IS THIS PATCH NO LONGER NEEDED?  (See comment 15 in bug.)

diff --git a/gfx/thebes/gfxFT2FontBase.cpp b/gfx/thebes/gfxFT2FontBase.cpp
--- a/gfx/thebes/gfxFT2FontBase.cpp
+++ b/gfx/thebes/gfxFT2FontBase.cpp
@@ -262,18 +262,24 @@ gfxFT2FontBase::InitMetrics()
                 (*setCoords)(face, mCoords.Length(), mCoords.Elements());
             }
 #endif
         }
     }
 
     const FT_Size_Metrics& ftMetrics = face->size->metrics;
 
-    mMetrics.maxAscent = FLOAT_FROM_26_6(ftMetrics.ascender);
+    // freetype rounds the ascender, descender, and height
+    // independently, so that ascender + descender can sometimes be
+    // greater than height.  We want the height to be correct, so we'll
+    // throw away its ascender value.  (descender may be more important
+    // because of underline positioning.)
     mMetrics.maxDescent = -FLOAT_FROM_26_6(ftMetrics.descender);
+    mMetrics.maxAscent = FLOAT_FROM_26_6(ftMetrics.height) -
+                          mMetrics.maxDescent;
     mMetrics.maxAdvance = FLOAT_FROM_26_6(ftMetrics.max_advance);
     gfxFloat lineHeight = FLOAT_FROM_26_6(ftMetrics.height);
 
     gfxFloat emHeight;
     // Scale for vertical design metric conversion: pixels per design unit.
     // If this remains at 0.0, we can't use metrics from OS/2 etc.
     gfxFloat yScale = 0.0;
     if (FT_IS_SCALABLE(face)) {
@@ -332,20 +338,26 @@ gfxFT2FontBase::InitMetrics()
         if (os2->fsSelection & kUseTypoMetricsMask) {
             mMetrics.maxAscent = NS_round(mMetrics.emAscent);
             mMetrics.maxDescent = NS_round(mMetrics.emDescent);
         } else {
             // maxAscent/maxDescent get used for frame heights, and some fonts
             // don't have the HHEA table ascent/descent set (bug 279032).
             // We use NS_round here to parallel the pixel-rounded values that
             // freetype gives us for ftMetrics.ascender/descender.
-            mMetrics.maxAscent =
-                std::max(mMetrics.maxAscent, NS_round(mMetrics.emAscent));
-            mMetrics.maxDescent =
-                std::max(mMetrics.maxDescent, NS_round(mMetrics.emDescent));
+            // However, because we might have rebalanced the rounding
+            // between ascender and descender in order to preserve height,
+            // only do this if it would actually increase height.
+            if (NS_round(mMetrics.emAscent + mMetrics.emDescent) >
+                NS_round(mMetrics.maxAscent + mMetrics.maxDescent)) {
+                mMetrics.maxAscent =
+                    std::max(mMetrics.maxAscent, NS_round(mMetrics.emAscent));
+                mMetrics.maxDescent =
+                    std::max(mMetrics.maxDescent, NS_round(mMetrics.emDescent));
+            }
         }
     } else {
         mMetrics.emAscent = mMetrics.maxAscent;
         mMetrics.emDescent = mMetrics.maxDescent;
     }
 
     // gfxFont::Metrics::underlineOffset is the position of the top of the
     // underline.
