Back out previous logging patches for bug 469514.

diff --git a/xpcom/io/nsStreamUtils.cpp b/xpcom/io/nsStreamUtils.cpp
--- a/xpcom/io/nsStreamUtils.cpp
+++ b/xpcom/io/nsStreamUtils.cpp
@@ -93,21 +93,16 @@ public:
     NS_IMETHOD OnInputStreamReady(nsIAsyncInputStream *stream)
     {
         mStream = stream;
 
         nsresult rv =
             mTarget->Dispatch(this, NS_DISPATCH_NORMAL);
         if (NS_FAILED(rv)) {
             NS_WARNING("Dispatch failed");
-#ifdef DEBUG
-            (void)fprintf(stdout,
-                          "### mTarget (%p) may not be accepting events!\n",
-                          mTarget.get());
-#endif
             return NS_ERROR_FAILURE;
         }
 
         return NS_OK;
     }
 
     NS_IMETHOD Run()
     {
@@ -177,21 +172,16 @@ public:
     NS_IMETHOD OnOutputStreamReady(nsIAsyncOutputStream *stream)
     {
         mStream = stream;
 
         nsresult rv =
             mTarget->Dispatch(this, NS_DISPATCH_NORMAL);
         if (NS_FAILED(rv)) {
             NS_WARNING("PostEvent failed");
-#ifdef DEBUG
-            (void)fprintf(stdout,
-                          "### mTarget (%p) may not be accepting events!\n",
-                          mTarget.get());
-#endif
             return NS_ERROR_FAILURE;
         }
 
         return NS_OK;
     }
 
     NS_IMETHOD Run()
     {
diff --git a/xpcom/threads/nsThreadManager.cpp b/xpcom/threads/nsThreadManager.cpp
--- a/xpcom/threads/nsThreadManager.cpp
+++ b/xpcom/threads/nsThreadManager.cpp
@@ -38,31 +38,16 @@
 
 #include "nsThreadManager.h"
 #include "nsThread.h"
 #include "nsIClassInfoImpl.h"
 #include "nsTArray.h"
 #include "nsAutoPtr.h"
 #include "nsAutoLock.h"
 
-#ifdef DEBUG
-#include "nsStackWalk.h"
-
-static void
-thread_stack_callback(void *aPC, void *)
-{
-  char buf[1024];
-  nsCodeAddressDetails details;
-
-  (void)NS_DescribeCodeAddress(aPC, &details);
-  (void)NS_FormatCodeAddressDetails(aPC, &details, buf, sizeof(buf));
-  (void)fprintf(stdout, buf);
-}
-#endif
-
 typedef nsTArray< nsRefPtr<nsThread> > nsThreadArray;
 
 //-----------------------------------------------------------------------------
 
 static void
 ReleaseObject(void *data)
 {
   static_cast<nsISupports *>(data)->Release();
@@ -242,21 +227,16 @@ nsThreadManager::NewThread(PRUint32 crea
   if (NS_FAILED(rv)) {
     NS_RELEASE(thr);
     return rv;
   }
 
   // At this point, we expect that the thread has been registered in mThread;
   // however, it is possible that it could have also been replaced by now, so
   // we cannot really assert that it was added.
-#ifdef DEBUG
-  (void)fprintf(stdout, "### Creating thread with address %p\n", thr);
-  (void)NS_StackWalk(thread_stack_callback, 0, nsnull);
-  (void)fprintf(stdout, "\n\n");
-#endif
 
   *result = thr;
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsThreadManager::GetThreadFromPRThread(PRThread *thread, nsIThread **result)
 {
