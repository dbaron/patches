Remove unused height output from nsLineLayout::EndSpan.  b=407086  r+sr=roc

diff --git a/layout/generic/nsFirstLetterFrame.cpp b/layout/generic/nsFirstLetterFrame.cpp
--- a/layout/generic/nsFirstLetterFrame.cpp
+++ b/layout/generic/nsFirstLetterFrame.cpp
@@ -293,8 +293,7 @@ nsFirstLetterFrame::Reflow(nsPresContext
 
     ll->BeginSpan(this, &aReflowState, bp.left, availSize.width);
     ll->ReflowFrame(kid, aReflowStatus, &aMetrics, pushedFrame);
-    nsSize size;
-    ll->EndSpan(this, size);
+    ll->EndSpan(this);
   }
 
   // Place and size the child and update the output metrics
diff --git a/layout/generic/nsInlineFrame.cpp b/layout/generic/nsInlineFrame.cpp
--- a/layout/generic/nsInlineFrame.cpp
+++ b/layout/generic/nsInlineFrame.cpp
@@ -536,11 +536,9 @@ nsInlineFrame::ReflowFrames(nsPresContex
   // line-height calculations. However, continuations of an inline
   // that are empty we force to empty so that things like collapsed
   // whitespace in an inline element don't affect the line-height.
-  nsSize size;
-  lineLayout->EndSpan(this, size);
+  aMetrics.width = lineLayout->EndSpan(this);
 
   // Compute final width
-  aMetrics.width = size.width;
   if (nsnull == GetPrevContinuation()) {
     aMetrics.width += ltr ? aReflowState.mComputedBorderPadding.left
                           : aReflowState.mComputedBorderPadding.right;
diff --git a/layout/generic/nsLineLayout.cpp b/layout/generic/nsLineLayout.cpp
--- a/layout/generic/nsLineLayout.cpp
+++ b/layout/generic/nsLineLayout.cpp
@@ -445,8 +445,8 @@ nsLineLayout::BeginSpan(nsIFrame* aFrame
   return rv;
 }
 
-void
-nsLineLayout::EndSpan(nsIFrame* aFrame, nsSize& aSizeResult)
+nscoord
+nsLineLayout::EndSpan(nsIFrame* aFrame)
 {
   NS_ASSERTION(mSpanDepth > 0, "end-span without begin-span");
 #ifdef NOISY_REFLOW
@@ -455,23 +455,12 @@ nsLineLayout::EndSpan(nsIFrame* aFrame, 
   printf(": EndSpan width=%d\n", mCurrentSpan->mX - mCurrentSpan->mLeftEdge);
 #endif
   PerSpanData* psd = mCurrentSpan;
-  nscoord width = 0;
-  nscoord maxHeight = 0;
-  if (nsnull != psd->mLastFrame) {
-    width = psd->mX - psd->mLeftEdge;
-    PerFrameData* pfd = psd->mFirstFrame;
-    while (nsnull != pfd) {
-      if (pfd->mBounds.height > maxHeight)
-        maxHeight = pfd->mBounds.height;
-      pfd = pfd->mNext;
-    }
-  }
-  aSizeResult.width = width;
-  aSizeResult.height = maxHeight;
+  nscoord widthResult = psd->mLastFrame ? (psd->mX - psd->mLeftEdge) : 0;
 
   mSpanDepth--;
   mCurrentSpan->mReflowState = nsnull;  // no longer valid so null it out!
   mCurrentSpan = mCurrentSpan->mParent;
+  return widthResult;
 }
 
 PRInt32
diff --git a/layout/generic/nsLineLayout.h b/layout/generic/nsLineLayout.h
--- a/layout/generic/nsLineLayout.h
+++ b/layout/generic/nsLineLayout.h
@@ -97,7 +97,8 @@ public:
                      nscoord aLeftEdge,
                      nscoord aRightEdge);
 
-  void EndSpan(nsIFrame* aFrame, nsSize& aSizeResult);
+  // Returns the width of the span
+  nscoord EndSpan(nsIFrame* aFrame);
 
   PRInt32 GetCurrentSpanCount() const;
 
