From: L. David Baron <dbaron@dbaron.org>

Bug 896138 patch 8:  Add setter for RestyleManager::mInStyleRefresh rather than using friend.  r=heycam (within review comments for patch 4)

(The friend declaration is still needed for access to RestyleElement,
which I'd rather leave private.)

diff --git a/layout/base/RestyleManager.h b/layout/base/RestyleManager.h
--- a/layout/base/RestyleManager.h
+++ b/layout/base/RestyleManager.h
@@ -174,16 +174,21 @@ public:
     PostRestyleEventCommon(aElement, aRestyleHint, aMinChangeHint, true);
   }
 
   void PostRestyleEventForLazyConstruction()
   {
     PostRestyleEventInternal(true);
   }
 
+  void SetInStyleRefresh(bool aInStyleRefresh)
+  {
+    mInStyleRefresh = aInStyleRefresh;
+  }
+
   void FlushOverflowChangedTracker()
   {
     mOverflowChangedTracker.Flush();
   }
 
 private:
   enum DesiredA11yNotifications {
     eSkipNotifications,
@@ -250,17 +255,17 @@ public:
   void PostRebuildAllStyleDataEvent(nsChangeHint aExtraHint);
 
   void SetPromoteReflowsToReframeRoot(bool aPromote)
     { mPromoteReflowsToReframeRoot = aPromote; }
 
 private:
   /* aMinHint is the minimal change that should be made to the element */
   // XXXbz do we really need the aPrimaryFrame argument here?
-  void RestyleElement(Element* aElement,
+  void RestyleElement(Element*        aElement,
                       nsIFrame*       aPrimaryFrame,
                       nsChangeHint    aMinHint,
                       RestyleTracker& aRestyleTracker,
                       bool            aRestyleDescendants);
 
   nsresult StyleChangeReflow(nsIFrame* aFrame, nsChangeHint aHint);
 
   // Returns true if this function managed to successfully move a frame, and
diff --git a/layout/base/RestyleTracker.cpp b/layout/base/RestyleTracker.cpp
--- a/layout/base/RestyleTracker.cpp
+++ b/layout/base/RestyleTracker.cpp
@@ -134,17 +134,17 @@ RestyleTracker::ProcessOneRestyle(Elemen
 void
 RestyleTracker::DoProcessRestyles()
 {
   PROFILER_LABEL("CSS", "ProcessRestyles");
   // Make sure to not rebuild quote or counter lists while we're
   // processing restyles
   mRestyleManager->PresContext()->FrameConstructor()->BeginUpdate();
 
-  mRestyleManager->mInStyleRefresh = true;
+  mRestyleManager->SetInStyleRefresh(true);
 
   // loop so that we process any restyle events generated by processing
   while (mPendingRestyles.Count()) {
     if (mHaveLaterSiblingRestyles) {
       // Convert them to individual restyles on all the later siblings
       nsAutoTArray<nsRefPtr<Element>, RESTYLE_ARRAY_STACKSIZE> laterSiblingArr;
       LaterSiblingCollector siblingCollector = { this, &laterSiblingArr };
       mPendingRestyles.Enumerate(CollectLaterSiblings, &siblingCollector);
@@ -236,19 +236,19 @@ RestyleTracker::DoProcessRestyles()
                           currentRestyle->mRestyleHint,
                           currentRestyle->mChangeHint);
       }
     }
   }
 
   mRestyleManager->FlushOverflowChangedTracker();
 
-  // Set mInStyleRefresh to false now, since the EndUpdate call might
+  // SetInStyleRefresh(false) now, since the EndUpdate call might
   // add more restyles.
-  mRestyleManager->mInStyleRefresh = false;
+  mRestyleManager->SetInStyleRefresh(false);
 
   mRestyleManager->PresContext()->FrameConstructor()->EndUpdate();
 
 #ifdef DEBUG
   mRestyleManager->PresContext()->PresShell()->VerifyStyleTree();
 #endif
 }
 
