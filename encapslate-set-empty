From: L. David Baron <dbaron@dbaron.org>

Bug 1381080 patch 2 - Encapsulate setting to empty buffer in a new method.  r=erahm

This is needed for patch 4.

MozReview-Commit-ID: 7xKQv37cy5k

diff --git a/xpcom/string/nsTSubstring.cpp b/xpcom/string/nsTSubstring.cpp
--- a/xpcom/string/nsTSubstring.cpp
+++ b/xpcom/string/nsTSubstring.cpp
@@ -683,19 +683,17 @@ nsTSubstring_CharT::SetCapacity(size_typ
 bool
 nsTSubstring_CharT::SetCapacity(size_type aCapacity, const fallible_t&)
 {
   // capacity does not include room for the terminating null char
 
   // if our capacity is reduced to zero, then free our buffer.
   if (aCapacity == 0) {
     ::ReleaseData(mData, mDataFlags);
-    mData = char_traits::sEmptyBuffer;
-    mLength = 0;
-    mDataFlags = DataFlags::TERMINATED;
+    SetToEmptyBuffer();
     return true;
   }
 
   char_type* oldData;
   DataFlags oldFlags;
   if (!MutatePrep(aCapacity, &oldData, &oldFlags)) {
     return false;  // out-of-memory
   }
diff --git a/xpcom/string/nsTSubstring.h b/xpcom/string/nsTSubstring.h
--- a/xpcom/string/nsTSubstring.h
+++ b/xpcom/string/nsTSubstring.h
@@ -988,19 +988,17 @@ public:
 
   /**
    * If the string uses a shared buffer, this method
    * clears the pointer without releasing the buffer.
    */
   void ForgetSharedBuffer()
   {
     if (mDataFlags & DataFlags::SHARED) {
-      mData = char_traits::sEmptyBuffer;
-      mLength = 0;
-      mDataFlags = DataFlags::TERMINATED;
+      SetToEmptyBuffer();
     }
   }
 
 public:
 
   /**
    * this is public to support automatic conversion of tuple to string
    * base type, which helps avoid converting to nsTAString.
@@ -1078,16 +1076,23 @@ protected:
 #else
 #undef XPCOM_STRING_CONSTRUCTOR_OUT_OF_LINE
     : nsTStringRepr_CharT(aData, aLength, aDataFlags, aClassFlags)
   {
     MOZ_RELEASE_ASSERT(CheckCapacity(aLength), "String is too large.");
   }
 #endif /* DEBUG || FORCE_BUILD_REFCNT_LOGGING */
 
+  void SetToEmptyBuffer()
+  {
+    mData = char_traits::sEmptyBuffer;
+    mLength = 0;
+    mDataFlags = DataFlags::TERMINATED;
+  }
+
   /**
    * this function releases mData and does not change the value of
    * any of its member variables.  in other words, this function acts
    * like a destructor.
    */
   void NS_FASTCALL Finalize();
 
   /**
