From: L. David Baron <dbaron@dbaron.org>

Ensure that a counter increment that would go past our internal limits doesn't change the counter.

Per CSS WG resolution, afternoon of 2013-02-05.

diff --git a/layout/base/nsCounterManager.cpp b/layout/base/nsCounterManager.cpp
--- a/layout/base/nsCounterManager.cpp
+++ b/layout/base/nsCounterManager.cpp
@@ -53,16 +53,17 @@ void nsCounterUseNode::Calc(nsCounterLis
 void nsCounterChangeNode::Calc(nsCounterList *aList)
 {
     NS_ASSERTION(!aList->IsDirty(),
                  "Why are we calculating with a dirty list?");
     if (mType == RESET) {
         mValueAfter = mChangeValue;
     } else {
         NS_ASSERTION(mType == INCREMENT, "invalid type");
+        // FIXME: don't change the value if this would cause us to wrap
         mValueAfter = aList->ValueBefore(this) + mChangeValue;
     }
 }
 
 // The text that should be displayed for this counter.
 void
 nsCounterUseNode::GetText(nsString& aResult)
 {
diff --git a/layout/generic/nsBulletFrame.cpp b/layout/generic/nsBulletFrame.cpp
--- a/layout/generic/nsBulletFrame.cpp
+++ b/layout/generic/nsBulletFrame.cpp
@@ -412,16 +412,17 @@ nsBulletFrame::SetListItemOrdinal(int32_
         // Use ordinal specified by the value attribute
         mOrdinal = attr->GetIntegerValue();
       }
     }
   }
 
   *aChanged = oldOrdinal != mOrdinal;
 
+  // FIXME: do nothing if this causes us to wrap
   return mOrdinal + aIncrement;
 }
 
 
 // XXX change roman/alpha to use unsigned math so that maxint and
 // maxnegint will work
 
 /**
