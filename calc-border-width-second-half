From: L. David Baron <dbaron@dbaron.org>

Fix missing computation half of calc() for border-*-width.  (Bug 363249)  r=bzbarsky  a2.0=blocking2.0:beta6

diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -5021,20 +5021,22 @@ nsRuleNode::ComputeBorderData(void* aSta
         NS_ASSERTION(value.GetIntValue() == NS_STYLE_BORDER_WIDTH_THIN ||
                      value.GetIntValue() == NS_STYLE_BORDER_WIDTH_MEDIUM ||
                      value.GetIntValue() == NS_STYLE_BORDER_WIDTH_THICK,
                      "Unexpected enum value");
         border->SetBorderWidth(side,
                                (mPresContext->GetBorderWidthTable())[value.GetIntValue()]);
       }
       // OK to pass bad aParentCoord since we're not passing SETCOORD_INHERIT
-      else if (SetCoord(value, coord, nsStyleCoord(), SETCOORD_LENGTH,
+      else if (SetCoord(value, coord, nsStyleCoord(),
+                        SETCOORD_LENGTH | SETCOORD_CALC_LENGTH_ONLY,
                         aContext, mPresContext, canStoreInRuleTree)) {
         NS_ASSERTION(coord.GetUnit() == eStyleUnit_Coord, "unexpected unit");
-        border->SetBorderWidth(side, coord.GetCoordValue());
+        // clamp negative calc() to 0.
+        border->SetBorderWidth(side, NS_MAX(coord.GetCoordValue(), 0));
       }
       else if (eCSSUnit_Inherit == value.GetUnit()) {
         canStoreInRuleTree = PR_FALSE;
         border->SetBorderWidth(side,
                                parentBorder->GetComputedBorder().side(side));
       }
       else if (eCSSUnit_Initial == value.GetUnit()) {
         border->SetBorderWidth(side,
diff --git a/layout/style/test/property_database.js b/layout/style/test/property_database.js
--- a/layout/style/test/property_database.js
+++ b/layout/style/test/property_database.js
@@ -124,18 +124,28 @@ var gCSSProperties = {
 		invalid_values: []
 	},
 	"-moz-border-end-width": {
 		domProp: "MozBorderEndWidth",
 		inherited: false,
 		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
 		get_computed: logical_box_prop_get_computed,
 		prerequisites: { "-moz-border-end-style": "solid" },
-		initial_values: [ "medium", "3px" ],
-		other_values: [ "thin", "thick", "1px", "2em" ],
+		initial_values: [ "medium", "3px", "-moz-calc(4px - 1px)" ],
+		other_values: [ "thin", "thick", "1px", "2em",
+			"-moz-calc(2px)",
+			"-moz-calc(-2px)",
+			"-moz-calc(0em)",
+			"-moz-calc(0)",
+			"-moz-calc(5em)",
+			"-moz-calc(3*25px)",
+			"-moz-calc(25px*3)",
+			"-moz-calc(3*25px + 5em)",
+			"-moz-min(3em, 30em,200px, min(500px ,40em))",
+		],
 		invalid_values: [ "5%" ]
 	},
 	"-moz-border-image": {
 		domProp: "MozBorderImage",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "none" ],
 		other_values: [ "url('border.png') 27 27 27 27",
@@ -298,18 +308,28 @@ var gCSSProperties = {
 		invalid_values: []
 	},
 	"-moz-border-start-width": {
 		domProp: "MozBorderStartWidth",
 		inherited: false,
 		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
 		get_computed: logical_box_prop_get_computed,
 		prerequisites: { "-moz-border-start-style": "solid" },
-		initial_values: [ "medium", "3px" ],
-		other_values: [ "thin", "thick", "1px", "2em" ],
+		initial_values: [ "medium", "3px", "-moz-calc(4px - 1px)" ],
+		other_values: [ "thin", "thick", "1px", "2em",
+			"-moz-calc(2px)",
+			"-moz-calc(-2px)",
+			"-moz-calc(0em)",
+			"-moz-calc(0)",
+			"-moz-calc(5em)",
+			"-moz-calc(3*25px)",
+			"-moz-calc(25px*3)",
+			"-moz-calc(3*25px + 5em)",
+			"-moz-min(3em, 30em,200px, min(500px ,40em))",
+		],
 		invalid_values: [ "5%" ]
 	},
 	"-moz-border-top-colors": {
 		domProp: "MozBorderTopColors",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "none" ],
 		other_values: [ "red green", "red #fc3", "#ff00cc", "currentColor", "blue currentColor orange currentColor" ],
@@ -1281,18 +1301,18 @@ var gCSSProperties = {
 		other_values: [ "contain", "cover", "100px auto", "auto 100px", "100% auto", "auto 100%", "25% 50px", "3em 40%" ],
 		invalid_values: [ "contain contain", "cover cover", "cover auto", "auto cover", "contain cover", "cover contain", "-5px 3px", "3px -5px", "auto -5px", "-5px auto" ]
 	},
 	"border": {
 		domProp: "border",
 		inherited: false,
 		type: CSS_TYPE_TRUE_SHORTHAND,
 		subproperties: [ "border-bottom-color", "border-bottom-style", "border-bottom-width", "border-left-color", "border-left-style", "border-left-width", "border-right-color", "border-right-style", "border-right-width", "border-top-color", "border-top-style", "border-top-width", "-moz-border-top-colors", "-moz-border-right-colors", "-moz-border-bottom-colors", "-moz-border-left-colors", "-moz-border-image" ],
-		initial_values: [ "none", "medium", "currentColor", "thin", "none medium currentcolor" ],
-		other_values: [ "solid", "medium solid", "green solid", "10px solid", "thick solid" ],
+		initial_values: [ "none", "medium", "currentColor", "thin", "none medium currentcolor", "-moz-calc(4px - 1px) none" ],
+		other_values: [ "solid", "medium solid", "green solid", "10px solid", "thick solid", "-moz-calc(2px) solid blue" ],
 		invalid_values: [ "5%" ]
 	},
 	"border-bottom": {
 		domProp: "borderBottom",
 		inherited: false,
 		type: CSS_TYPE_TRUE_SHORTHAND,
 		subproperties: [ "border-bottom-color", "border-bottom-style", "border-bottom-width" ],
 		initial_values: [ "none", "medium", "currentColor", "thin", "none medium currentcolor" ],
@@ -1317,18 +1337,28 @@ var gCSSProperties = {
 		other_values: [ "solid", "dashed", "dotted", "double", "outset", "inset", "groove", "ridge" ],
 		invalid_values: []
 	},
 	"border-bottom-width": {
 		domProp: "borderBottomWidth",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		prerequisites: { "border-bottom-style": "solid" },
-		initial_values: [ "medium", "3px" ],
-		other_values: [ "thin", "thick", "1px", "2em" ],
+		initial_values: [ "medium", "3px", "-moz-calc(4px - 1px)" ],
+		other_values: [ "thin", "thick", "1px", "2em",
+			"-moz-calc(2px)",
+			"-moz-calc(-2px)",
+			"-moz-calc(0em)",
+			"-moz-calc(0)",
+			"-moz-calc(5em)",
+			"-moz-calc(3*25px)",
+			"-moz-calc(25px*3)",
+			"-moz-calc(3*25px + 5em)",
+			"-moz-min(3em, 30em,200px, min(500px ,40em))",
+		],
 		invalid_values: [ "5%" ]
 	},
 	"border-collapse": {
 		domProp: "borderCollapse",
 		inherited: true,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "separate" ],
 		other_values: [ "collapse" ],
@@ -1370,18 +1400,28 @@ var gCSSProperties = {
 		other_values: [ "solid", "dashed", "dotted", "double", "outset", "inset", "groove", "ridge" ],
 		invalid_values: []
 	},
 	"border-left-width": {
 		domProp: "borderLeftWidth",
 		inherited: false,
 		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
 		prerequisites: { "border-left-style": "solid" },
-		initial_values: [ "medium", "3px" ],
-		other_values: [ "thin", "thick", "1px", "2em" ],
+		initial_values: [ "medium", "3px", "-moz-calc(4px - 1px)" ],
+		other_values: [ "thin", "thick", "1px", "2em",
+			"-moz-calc(2px)",
+			"-moz-calc(-2px)",
+			"-moz-calc(0em)",
+			"-moz-calc(0)",
+			"-moz-calc(5em)",
+			"-moz-calc(3*25px)",
+			"-moz-calc(25px*3)",
+			"-moz-calc(3*25px + 5em)",
+			"-moz-min(3em, 30em,200px, min(500px ,40em))",
+		],
 		invalid_values: [ "5%" ]
 	},
 	"border-right": {
 		domProp: "borderRight",
 		inherited: false,
 		type: CSS_TYPE_TRUE_SHORTHAND,
 		subproperties: [ "border-right-color", "border-right-style", "border-right-width" ],
 		initial_values: [ "none", "medium", "currentColor", "thin", "none medium currentcolor" ],
@@ -1406,18 +1446,28 @@ var gCSSProperties = {
 		other_values: [ "solid", "dashed", "dotted", "double", "outset", "inset", "groove", "ridge" ],
 		invalid_values: []
 	},
 	"border-right-width": {
 		domProp: "borderRightWidth",
 		inherited: false,
 		type: CSS_TYPE_SHORTHAND_AND_LONGHAND,
 		prerequisites: { "border-right-style": "solid" },
-		initial_values: [ "medium", "3px" ],
-		other_values: [ "thin", "thick", "1px", "2em" ],
+		initial_values: [ "medium", "3px", "-moz-calc(4px - 1px)" ],
+		other_values: [ "thin", "thick", "1px", "2em",
+			"-moz-calc(2px)",
+			"-moz-calc(-2px)",
+			"-moz-calc(0em)",
+			"-moz-calc(0)",
+			"-moz-calc(5em)",
+			"-moz-calc(3*25px)",
+			"-moz-calc(25px*3)",
+			"-moz-calc(3*25px + 5em)",
+			"-moz-min(3em, 30em,200px, min(500px ,40em))",
+		],
 		invalid_values: [ "5%" ]
 	},
 	"border-spacing": {
 		domProp: "borderSpacing",
 		inherited: true,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "0", "0 0", "0px", "0 0px", "-moz-calc(0px)", "-moz-calc(0px) -moz-calc(0em)", "-moz-calc(2em - 2em) -moz-calc(3px + 7px - 10px)", "-moz-calc(-5px)", "-moz-calc(-5px) -moz-calc(-5px)" ],
 		other_values: [ "3px", "4em 2px", "4em 0", "0px 2px", "-moz-calc(7px)", "0 -moz-calc(7px)", "-moz-calc(7px) 0", "-moz-calc(0px) -moz-calc(7px)", "-moz-calc(7px) -moz-calc(0px)", "7px -moz-calc(0px)", "-moz-calc(0px) 7px", "7px -moz-calc(0px)", "3px -moz-calc(2em)" ],
@@ -1460,28 +1510,38 @@ var gCSSProperties = {
 		other_values: [ "solid", "dashed", "dotted", "double", "outset", "inset", "groove", "ridge" ],
 		invalid_values: []
 	},
 	"border-top-width": {
 		domProp: "borderTopWidth",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		prerequisites: { "border-top-style": "solid" },
-		initial_values: [ "medium", "3px" ],
-		other_values: [ "thin", "thick", "1px", "2em" ],
+		initial_values: [ "medium", "3px", "-moz-calc(4px - 1px)" ],
+		other_values: [ "thin", "thick", "1px", "2em",
+			"-moz-calc(2px)",
+			"-moz-calc(-2px)",
+			"-moz-calc(0em)",
+			"-moz-calc(0)",
+			"-moz-calc(5em)",
+			"-moz-calc(3*25px)",
+			"-moz-calc(25px*3)",
+			"-moz-calc(3*25px + 5em)",
+			"-moz-min(3em, 30em,200px, min(500px ,40em))",
+		],
 		invalid_values: [ "5%" ]
 	},
 	"border-width": {
 		domProp: "borderWidth",
 		inherited: false,
 		type: CSS_TYPE_TRUE_SHORTHAND,
 		subproperties: [ "border-top-width", "border-right-width", "border-bottom-width", "border-left-width" ],
 		prerequisites: { "border-style": "solid" },
-		initial_values: [ "medium", "3px", "medium medium", "3px medium medium", "medium 3px medium medium" ],
-		other_values: [ "thin", "thick", "1px", "2em", "2px 0 0px 1em" ],
+		initial_values: [ "medium", "3px", "medium medium", "3px medium medium", "medium 3px medium medium", "-moz-calc(3px) 3px -moz-calc(5px - 2px) -moz-calc(2px - -1px)" ],
+		other_values: [ "thin", "thick", "1px", "2em", "2px 0 0px 1em", "-moz-calc(2em)" ],
 		invalid_values: [ "5%" ]
 	},
 	"bottom": {
 		domProp: "bottom",
 		inherited: false,
 		type: CSS_TYPE_LONGHAND,
 		/* FIXME: run tests with multiple prerequisites */
 		prerequisites: { "position": "relative" },
