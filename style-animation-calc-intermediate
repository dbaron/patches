From: L. David Baron <dbaron@dbaron.org>

Allow calc() as an intermediate common animation unit between lengths, percentages, and calc().  (Bug 520234)

diff --git a/layout/style/nsStyleAnimation.cpp b/layout/style/nsStyleAnimation.cpp
--- a/layout/style/nsStyleAnimation.cpp
+++ b/layout/style/nsStyleAnimation.cpp
@@ -68,24 +68,31 @@ namespace css = mozilla::css;
  *
  * @param   aFirstUnit One unit to resolve.
  * @param   aFirstUnit The other unit to resolve.
  * @return  A "common" unit that both source units can be converted into, or
  *          eUnit_Null if that's not possible.
  */
 static
 nsStyleAnimation::Unit
-GetCommonUnit(nsStyleAnimation::Unit aFirstUnit,
+GetCommonUnit(nsCSSProperty aProperty,
+              nsStyleAnimation::Unit aFirstUnit,
               nsStyleAnimation::Unit aSecondUnit)
 {
-  // XXXdholbert Naive implementation for now: simply require that the input
-  // units match.
   if (aFirstUnit != aSecondUnit) {
-    // NOTE: Some unit-pairings will need special handling,
-    // e.g. percent vs coord (bug 520234)
+    if (nsCSSProps::PropHasFlags(aProperty, CSS_PROPERTY_STORES_CALC) &&
+        (aFirstUnit == nsStyleAnimation::eUnit_Coord ||
+         aFirstUnit == nsStyleAnimation::eUnit_Percent ||
+         aFirstUnit == nsStyleAnimation::eUnit_Calc) &&
+        (aSecondUnit == nsStyleAnimation::eUnit_Coord ||
+         aSecondUnit == nsStyleAnimation::eUnit_Percent ||
+         aSecondUnit == nsStyleAnimation::eUnit_Calc)) {
+      // We can use calc() as the common unit.
+      return nsStyleAnimation::eUnit_Calc;
+    }
     return nsStyleAnimation::eUnit_Null;
   }
   return aFirstUnit;
 }
 
 // Greatest Common Divisor
 static PRUint32
 gcd(PRUint32 a, PRUint32 b)
@@ -117,23 +124,36 @@ lcm(PRUint32 a, PRUint32 b)
 struct CalcValue {
   float mLength, mPercent;
   PRBool mHasPercent;
 };
 
 static CalcValue
 ExtractCalcValue(const nsStyleAnimation::Value& aValue)
 {
+  CalcValue result;
+  if (aValue.GetUnit() == nsStyleAnimation::eUnit_Coord) {
+    result.mLength =
+      nsPresContext::AppUnitsToFloatCSSPixels(aValue.GetCoordValue());
+    result.mPercent = 0.0f;
+    result.mHasPercent = PR_FALSE;
+    return result;
+  }
+  if (aValue.GetUnit() == nsStyleAnimation::eUnit_Percent) {
+    result.mLength = 0.0f;
+    result.mPercent = aValue.GetPercentValue();
+    result.mHasPercent = PR_TRUE;
+    return result;
+  }
   NS_ABORT_IF_FALSE(aValue.GetUnit() == nsStyleAnimation::eUnit_Calc,
                     "unexpected unit");
   nsCSSValue *val = aValue.GetCSSValueValue();
   NS_ABORT_IF_FALSE(val->GetUnit() == eCSSUnit_Calc, "unexpected unit");
   nsCSSValue::Array *arr = val->GetArrayValue();
   NS_ABORT_IF_FALSE(arr->Count() == 1, "unexpected length");
-  CalcValue result;
 
   const nsCSSValue &topval = arr->Item(0);
   if (topval.GetUnit() == eCSSUnit_Pixel) {
     result.mLength = topval.GetFloatValue();
     result.mPercent = 0.0f;
     result.mHasPercent = PR_FALSE;
   } else {
     NS_ABORT_IF_FALSE(topval.GetUnit() == eCSSUnit_Calc_Plus,
@@ -178,17 +198,18 @@ SetCalcValue(const nsStyleCoord::Calc* a
 // -------------
 
 PRBool
 nsStyleAnimation::ComputeDistance(nsCSSProperty aProperty,
                                   const Value& aStartValue,
                                   const Value& aEndValue,
                                   double& aDistance)
 {
-  Unit commonUnit = GetCommonUnit(aStartValue.GetUnit(), aEndValue.GetUnit());
+  Unit commonUnit =
+    GetCommonUnit(aProperty, aStartValue.GetUnit(), aEndValue.GetUnit());
 
   switch (commonUnit) {
     case eUnit_Null:
     case eUnit_Auto:
     case eUnit_None:
     case eUnit_Normal:
     case eUnit_UnparsedString:
       return PR_FALSE;
@@ -1228,17 +1249,18 @@ AddTransformLists(const nsCSSValueList* 
 }
 
 PRBool
 nsStyleAnimation::AddWeighted(nsCSSProperty aProperty,
                               double aCoeff1, const Value& aValue1,
                               double aCoeff2, const Value& aValue2,
                               Value& aResultValue)
 {
-  Unit commonUnit = GetCommonUnit(aValue1.GetUnit(), aValue2.GetUnit());
+  Unit commonUnit =
+    GetCommonUnit(aProperty, aValue1.GetUnit(), aValue2.GetUnit());
   // Maybe need a followup method to convert the inputs into the common
   // unit-type, if they don't already match it. (Or would it make sense to do
   // that in GetCommonUnit? in which case maybe ConvertToCommonUnit would be
   // better.)
 
   switch (commonUnit) {
     case eUnit_Null:
     case eUnit_Auto:
