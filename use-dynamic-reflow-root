From: L. David Baron <dbaron@dbaron.org>

Bug 1159042 patch 4 - Use NS_FRAME_DYNAMIC_REFLOW_ROOT.

Causes test failures (ran Linux 64 debug only):
 - Marionnette
 - Mochitest 1
 - Mochitest browser-chrome 3
 - Crashtest

diff --git a/layout/base/nsPresShell.cpp b/layout/base/nsPresShell.cpp
--- a/layout/base/nsPresShell.cpp
+++ b/layout/base/nsPresShell.cpp
@@ -2541,17 +2541,18 @@ PresShell::VerifyHasDirtyRootAncestor(ns
   // handles the root frame correctly.
   if (!aFrame->GetParent()) {
     return;
   }
 
   // Make sure that there is a reflow root ancestor of |aFrame| that's
   // in mDirtyRoots already.
   while (aFrame && (aFrame->GetStateBits() & NS_FRAME_HAS_DIRTY_CHILDREN)) {
-    if (((aFrame->GetStateBits() & NS_FRAME_REFLOW_ROOT) ||
+    if (((aFrame->GetStateBits() &
+          (NS_FRAME_REFLOW_ROOT | NS_FRAME_DYNAMIC_REFLOW_ROOT)) ||
          !aFrame->GetParent()) &&
         mDirtyRoots.Contains(aFrame)) {
       return;
     }
 
     aFrame = aFrame->GetParent();
   }
   NS_NOTREACHED("Frame has dirty bits set but isn't scheduled to be "
@@ -2623,17 +2624,18 @@ PresShell::FrameNeedsReflow(nsIFrame *aF
         targetNeedsReflowFromParent = false;
         break;
       case eInferFromBitToAdd:
         targetNeedsReflowFromParent = (aBitToAdd == NS_FRAME_IS_DIRTY);
         break;
     }
 
 #define FRAME_IS_REFLOW_ROOT(_f)                   \
-  ((_f->GetStateBits() & NS_FRAME_REFLOW_ROOT) &&  \
+  ((_f->GetStateBits() & \
+    (NS_FRAME_REFLOW_ROOT | NS_FRAME_DYNAMIC_REFLOW_ROOT)) && \
    (_f != subtreeRoot || !targetNeedsReflowFromParent))
 
 
     // Mark the intrinsic widths as dirty on the frame, all of its ancestors,
     // and all of its descendants, if needed:
 
     if (aIntrinsicDirty != nsIPresShell::eResize) {
       // Mark argument and all ancestors dirty. (Unless we hit a reflow
diff --git a/layout/generic/nsHTMLReflowState.cpp b/layout/generic/nsHTMLReflowState.cpp
--- a/layout/generic/nsHTMLReflowState.cpp
+++ b/layout/generic/nsHTMLReflowState.cpp
@@ -2484,16 +2484,17 @@ nsCSSOffsetState::InitOffsets(WritingMod
     needPaddingProp = false;
   }
   else if (frame->IsSVGText()) {
     ComputedPhysicalPadding().SizeTo(0, 0, 0, 0);
     needPaddingProp = false;
   }
   else if (aPadding) { // padding is an input arg
     ComputedPhysicalPadding() = *aPadding;
+    // FIXME
     needPaddingProp = frame->StylePadding()->IsWidthDependent() ||
 	  (frame->GetStateBits() & NS_FRAME_REFLOW_ROOT);
   }
   else {
     needPaddingProp = ComputePadding(aWM, aPercentBasis, aFrameType);
   }
 
   if (isThemed) {
