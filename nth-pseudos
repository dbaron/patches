Implement :nth-child(), :nth-last-child(), :nth-of-type(), :nth-last-of-type().  Patch by Daniel Glazman <daniel@glazman.org> and me.  b=75375

diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -276,6 +276,10 @@ protected:
   nsSelectorParsingStatus ParsePseudoClassWithIdentArg(nsCSSSelector& aSelector,
                                                        nsIAtom*       aPseudo,
                                                        nsresult&      aErrorCode);
+
+  nsSelectorParsingStatus ParsePseudoClassWithIntPairArg(nsCSSSelector& aSelector,
+                                                         nsIAtom*       aPseudo,
+                                                         nsresult&      aErrorCode);
 
   nsSelectorParsingStatus ParseNegatedSimpleSelector(PRInt32&       aDataMask,
                                                      nsCSSSelector& aSelector,
@@ -2564,7 +2568,8 @@ CSSParserImpl::ParsePseudoSelector(PRInt
        isTree ||
 #endif
        nsCSSPseudoClasses::notPseudo == pseudo ||
-       nsCSSPseudoClasses::HasStringArg(pseudo))) {
+       nsCSSPseudoClasses::HasStringArg(pseudo)) ||
+       nsCSSPseudoClasses::HasIntPairArg(pseudo)) {
     // There are no other function pseudos
     REPORT_UNEXPECTED_TOKEN(PEPseudoSelNonFunc);
     UngetToken();
@@ -2602,7 +2607,13 @@ CSSParserImpl::ParsePseudoSelector(PRInt
         return parsingStatus;
       }
     }
-    // XXX are there more pseudo classes which accept arguments ?
+    else if (nsCSSPseudoClasses::HasIntParArg(pseudo)) {
+      nsSelectorParsingStatus parsingStatus =
+        ParsePseudoClassWithIntPairArg(aSelector, pseudo, aErrorCode);
+      if (eSelectorParsingStatus_Continue != parsingStatus) {
+        return parsingStatus;
+      }
+    }
     else {
       aSelector.AddPseudoClass(pseudo);
     }
@@ -2781,6 +2792,118 @@ CSSParserImpl::ParsePseudoClassWithIdent
 
   return eSelectorParsingStatus_Continue;
 }
+
+CSSParserImpl::nsSelectorParsingStatus
+CSSParserImpl::ParsePseudoClassWithIntPairArg(nsCSSSelector& aSelector,
+                                              nsIAtom*       aPseudo,
+                                              nsresult&      aErrorCode)
+{
+  PRInt32 numbers;
+  numbers[0] = 0;
+  numbers[1] = 0;
+  PRBool lookForB = PR_TRUE;
+  PRBool foundA = PR_FALSE;
+  
+  // Check if we have the first parenthesis
+  if (!ExpectSymbol(aErrorCode, '(', PR_FALSE)) {
+    REPORT_UNEXPECTED_TOKEN(NS_LITERAL_STRING("Missing argument in pseudo-class :nth-*()"));
+    return eSelectorParsingStatus_Error;
+  }
+
+  if (! GetToken(aErrorCode, PR_TRUE)) {
+    REPORT_UNEXPECTED_EOF();
+    aParsingStatus = SELECTOR_PARSING_STOPPED_ERROR;
+    return;
+  }
+  
+  if (eCSSToken_Ident == mToken.mType) {
+    if (mToken.mIdent.EqualsIgnoreCase("odd")) {
+      numbers[0] = 2;
+      numbers[1] = 1;
+      foundA = PR_TRUE;
+      lookForB  = PR_FALSE;
+    }
+    else if (mToken.mIdent.EqualsIgnoreCase("even")) {
+      numbers[0] = 2;
+      numbers[1] = 0;
+      foundA = PR_TRUE;
+      lookForB = PR_FALSE;
+    }
+    else if (mToken.mIdent.EqualsIgnoreCase("n")) {
+      numbers[0] = 1;
+      foundA = PR_TRUE;
+    }
+    else if (mToken.mIdent.EqualsIgnoreCase("-n")) {
+      numbers[0] = -1;
+      foundA = PR_TRUE;
+    }
+    else {
+      REPORT_UNEXPECTED_TOKEN(NS_LITERAL_STRING("Malformed argument in pseudo-class :nth-*()"));
+      return eSelectorParsingStatus_Error;
+    }
+  }
+  else if (eCSSToken_Number == mToken.mType) {
+    if (!mToken.mIntegerValid) {
+      REPORT_UNEXPECTED_TOKEN(NS_LITERAL_STRING("Malformed argument in pseudo-class :nth-*()"));
+      return eSelectorParsingStatus_Error;
+    }
+    numbers[1] = mToken.mInteger;
+    foundA = PR_TRUE;
+    lookForB = PR_FALSE;
+  }
+  else if (eCSSToken_Dimension == mToken.mType) {
+    // XXX NEED TO MAKE mIntegerValid actually set here!
+    if (!mToken.mIntegerValid ||
+        !mToken.mIdent.EqualsIgnoreCase("n")) {
+      REPORT_UNEXPECTED_TOKEN(NS_LITERAL_STRING("Malformed argument in pseudo-class :nth-*()"));
+      return eSelectorParsingStatus_Error;
+    }
+    numbers[0] = NS_STATIC_CAST(PRInt32, mToken.mNumber);
+    foundA = PR_TRUE;
+    lookForB = PR_TRUE;
+  }
+  else {
+    REPORT_UNEXPECTED_TOKEN(NS_LITERAL_STRING("Wrong argument type in pseudo-class :nth-*()"));
+    return eSelectorParsingStatus_Error;
+  }
+
+  if (lookForB) {
+    if (! GetToken(aErrorCode, PR_TRUE)) {
+      REPORT_UNEXPECTED_EOF();
+      return eSelectorParsingStatus_Error;
+    }
+    if (!mToken.IsSymbol(')')) {
+      if (eCSSToken_Number != mToken.mType) {
+        REPORT_UNEXPECTED_TOKEN(NS_LITERAL_STRING("Missing integer argument in pseudo-class :nth-*()"));
+        return eSelectorParsingStatus_Error;
+      }
+      if (!mToken.mIntegerValid) {
+        REPORT_UNEXPECTED_TOKEN(NS_LITERAL_STRING("Wrong argument type in pseudo-class :nth-*() : float"));
+        return eSelectorParsingStatus_Error;
+      }
+      numbers[1] = mToken.mInteger;
+    }
+    else {
+      UngetToken();
+      if (!foundA) {
+        // XXX Is this really an error?
+        REPORT_UNEXPECTED_TOKEN(NS_LITERAL_STRING("Missing argument in pseudo-class :nth-*()"));
+        return eSelectorParsingStatus_Error;
+       }
+    }
+  }
+  if (! GetToken(aErrorCode, PR_TRUE)) {
+    REPORT_UNEXPECTED_EOF();
+    return eSelectorParsingStatus_Error;
+  }
+  if (!mToken.IsSymbol(')')) {
+    REPORT_UNEXPECTED_TOKEN(NS_LITERAL_STRING("Missing closing ')' in negation pseudo-class :nth-*()"));
+    return eSelectorParsingStatus_Error;
+  }
+  aSelector.AddPseudoClass(aPseudo, numbers);
+  return eSelectorParsingStatus_Continue;
+}
+
 
 /**
  * This is the format for selectors:
diff --git a/layout/style/nsCSSPseudoClassList.h b/layout/style/nsCSSPseudoClassList.h
--- a/layout/style/nsCSSPseudoClassList.h
+++ b/layout/style/nsCSSPseudoClassList.h
@@ -78,6 +78,10 @@ CSS_PSEUDO_CLASS(lastChild, ":last-child
 CSS_PSEUDO_CLASS(lastChild, ":last-child")
 CSS_PSEUDO_CLASS(lastNode, ":-moz-last-node")
 CSS_PSEUDO_CLASS(onlyChild, ":only-child")
+CSS_PSEUDO_CLASS(nthChild, ":nth-child")
+CSS_PSEUDO_CLASS(nthLastChild, ":nth-last-child")
+CSS_PSEUDO_CLASS(nthOfType, ":nth-of-type")
+CSS_PSEUDO_CLASS(nthLastOfType, ":nth-last-of-type")
 
 // Image, object, etc state pseudo-classes
 CSS_PSEUDO_CLASS(mozBroken, ":-moz-broken")
