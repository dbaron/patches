From: L. David Baron <dbaron@dbaron.org>

Make sure all style rules have non-empty List implementations.

diff --git a/content/html/content/src/nsHTMLBodyElement.cpp b/content/html/content/src/nsHTMLBodyElement.cpp
--- a/content/html/content/src/nsHTMLBodyElement.cpp
+++ b/content/html/content/src/nsHTMLBodyElement.cpp
@@ -251,16 +251,18 @@ BodyRule::MapRuleInfoInto(nsRuleData* aD
     }
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 BodyRule::List(FILE* out, int32_t aIndent) const
 {
+  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  printf("[body rule] {}\n");
 }
 #endif
 
 //----------------------------------------------------------------------
 
 
 NS_IMPL_NS_NEW_HTML_ELEMENT(Body)
 
diff --git a/layout/style/AnimationCommon.cpp b/layout/style/AnimationCommon.cpp
--- a/layout/style/AnimationCommon.cpp
+++ b/layout/style/AnimationCommon.cpp
@@ -180,17 +180,26 @@ AnimValuesStyleRule::MapRuleInfoInto(nsR
     }
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 AnimValuesStyleRule::List(FILE* out, int32_t aIndent) const
 {
-  // WRITE ME?
+  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  printf("[anim values] { ");
+  for (uint32_t i = 0, i_end = mPropertyValuePairs.Length(); i < i_end; ++i) {
+    const PropertyValuePair &pair = mPropertyValuePairs[i];
+    nsAutoString value;
+    nsStyleAnimation::UncomputeValue(pair.mProperty, pair.mValue, value);
+    printf("%s: %s; ", nsCSSProps::GetStringValue(pair.mProperty).get(),
+                       NS_ConvertUTF16toUTF8(value).get());
+  }
+  printf("}\n");
 }
 #endif
 
 void
 ComputedTimingFunction::Init(const nsTimingFunction &aFunction)
 {
   mType = aFunction.mType;
   if (mType == nsTimingFunction::Function) {
diff --git a/layout/style/nsCSSRules.cpp b/layout/style/nsCSSRules.cpp
--- a/layout/style/nsCSSRules.cpp
+++ b/layout/style/nsCSSRules.cpp
@@ -1996,17 +1996,24 @@ nsCSSKeyframeRule::MapRuleInfoInto(nsRul
 
   mDeclaration->MapNormalRuleInfoInto(aRuleData);
 }
 
 #ifdef DEBUG
 void
 nsCSSKeyframeRule::List(FILE* out, int32_t aIndent) const
 {
-  // FIXME: WRITE ME
+  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+
+  nsAutoString tmp;
+  DoGetKeyText(tmp);
+  fputs(NS_ConvertUTF16toUTF8(tmp).get(), out);
+  fputs(" ", out);
+  mDeclaration->List(out, aIndent);
+  fputs("\n", out);
 }
 #endif
 
 /* virtual */ int32_t
 nsCSSKeyframeRule::GetType() const
 {
   return Rule::KEYFRAME_RULE;
 }
@@ -2016,17 +2023,17 @@ nsCSSKeyframeRule::GetType(uint16_t* aTy
 {
   *aType = nsIDOMCSSRule::MOZ_KEYFRAME_RULE;
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCSSKeyframeRule::GetCssText(nsAString& aCssText)
 {
-  nsCSSKeyframeRule::GetKeyText(aCssText);
+  DoGetKeyText(aCssText);
   aCssText.AppendLiteral(" { ");
   nsAutoString tmp;
   mDeclaration->ToString(tmp);
   aCssText.Append(tmp);
   aCssText.AppendLiteral(" }");
   return NS_OK;
 }
 
@@ -2047,28 +2054,34 @@ NS_IMETHODIMP
 nsCSSKeyframeRule::GetParentRule(nsIDOMCSSRule** aParentRule)
 {
   return Rule::GetParentRule(aParentRule);
 }
 
 NS_IMETHODIMP
 nsCSSKeyframeRule::GetKeyText(nsAString& aKeyText)
 {
+  DoGetKeyText(aCssText);
+  return NS_OK;
+}
+
+void
+nsCSSKeyframeRule::DoGetKeyText(nsAString& aKeyText) const
+{
   aKeyText.Truncate();
   uint32_t i = 0, i_end = mKeys.Length();
   NS_ABORT_IF_FALSE(i_end != 0, "must have some keys");
   for (;;) {
     aKeyText.AppendFloat(mKeys[i] * 100.0f);
     aKeyText.Append(PRUnichar('%'));
     if (++i == i_end) {
       break;
     }
     aKeyText.AppendLiteral(", ");
   }
-  return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCSSKeyframeRule::SetKeyText(const nsAString& aKeyText)
 {
   nsCSSParser parser;
 
   InfallibleTArray<float> newSelectors;
@@ -2162,17 +2175,20 @@ NS_INTERFACE_MAP_BEGIN(nsCSSKeyframesRul
   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIStyleRule)
   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(MozCSSKeyframesRule)
 NS_INTERFACE_MAP_END_INHERITING(GroupRule)
 
 #ifdef DEBUG
 void
 nsCSSKeyframesRule::List(FILE* out, int32_t aIndent) const
 {
-  // FIXME: WRITE ME
+  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
+
+  fprintf(out, "@keyframes %s", NS_ConvertUTF16toUTF8(mName).get());
+  GroupRule::List(out, aIndent);
 }
 #endif
 
 /* virtual */ int32_t
 nsCSSKeyframesRule::GetType() const
 {
   return Rule::KEYFRAMES_RULE;
 }
@@ -2445,17 +2461,21 @@ NS_INTERFACE_MAP_BEGIN(nsCSSPageRule)
 NS_INTERFACE_MAP_END
 
 IMPL_STYLE_RULE_INHERIT_GET_DOM_RULE_WEAK(nsCSSPageRule, Rule)
 
 #ifdef DEBUG
 void
 nsCSSPageRule::List(FILE* out, int32_t aIndent) const
 {
-  // FIXME: WRITE ME
+  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
+
+  fputs("@page ", out);
+  mDeclaration->List(out, aIndent);
+  fputs("\n", out);
 }
 #endif
 
 /* virtual */ int32_t
 nsCSSPageRule::GetType() const
 {
   return Rule::PAGE_RULE;
 }
@@ -2560,22 +2580,18 @@ CSSSupportsRule::CSSSupportsRule(const C
 }
 
 #ifdef DEBUG
 /* virtual */ void
 CSSSupportsRule::List(FILE* out, int32_t aIndent) const
 {
   for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
 
-  nsAutoString buffer;
-
   fputs("@supports ", out);
-
-  fputs(NS_LossyConvertUTF16toASCII(mCondition).get(), out);
-
+  fputs(NS_ConvertUTF16toUTF8(mCondition).get(), out);
   css::GroupRule::List(out, aIndent);
 }
 #endif
 
 /* virtual */ int32_t
 CSSSupportsRule::GetType() const
 {
   return Rule::SUPPORTS_RULE;
diff --git a/layout/style/nsCSSRules.h b/layout/style/nsCSSRules.h
--- a/layout/style/nsCSSRules.h
+++ b/layout/style/nsCSSRules.h
@@ -366,16 +366,18 @@ public:
 
   const nsTArray<float>& GetKeys() const     { return mKeys; }
   mozilla::css::Declaration* Declaration()   { return mDeclaration; }
 
   void ChangeDeclaration(mozilla::css::Declaration* aDeclaration);
 
   virtual size_t SizeOfIncludingThis(nsMallocSizeOfFun aMallocSizeOf) const MOZ_OVERRIDE;
 
+  void DoGetKeyText(nsAString &aResult) const;
+
 private:
   nsAutoTArray<float, 1>                     mKeys;
   nsAutoPtr<mozilla::css::Declaration>       mDeclaration;
   // lazily created when needed:
   nsRefPtr<nsCSSKeyframeStyleDeclaration>    mDOMDeclaration;
 };
 
 class nsCSSKeyframesRule MOZ_FINAL : public mozilla::css::GroupRule,
diff --git a/layout/style/nsHTMLStyleSheet.cpp b/layout/style/nsHTMLStyleSheet.cpp
--- a/layout/style/nsHTMLStyleSheet.cpp
+++ b/layout/style/nsHTMLStyleSheet.cpp
@@ -53,26 +53,30 @@ nsHTMLStyleSheet::HTMLColorRule::MapRule
       color->SetColorValue(mColor);
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 nsHTMLStyleSheet::HTMLColorRule::List(FILE* out, int32_t aIndent) const
 {
+  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  printf("[html color rule] {}\n");
 }
 #endif
 
  
 NS_IMPL_ISUPPORTS1(nsHTMLStyleSheet::GenericTableRule, nsIStyleRule)
 
 #ifdef DEBUG
 /* virtual */ void
 nsHTMLStyleSheet::GenericTableRule::List(FILE* out, int32_t aIndent) const
 {
+  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  printf("[generic table rule] {}\n");
 }
 #endif
 
 /* virtual */ void
 nsHTMLStyleSheet::TableTHRule::MapRuleInfoInto(nsRuleData* aRuleData)
 {
   if (aRuleData->mSIDs & NS_STYLE_INHERIT_BIT(Text)) {
     nsCSSValue* textAlign = aRuleData->ValueForTextAlign();
diff --git a/layout/style/nsStyleSet.cpp b/layout/style/nsStyleSet.cpp
--- a/layout/style/nsStyleSet.cpp
+++ b/layout/style/nsStyleSet.cpp
@@ -40,16 +40,18 @@ NS_IMPL_ISUPPORTS1(nsEmptyStyleRule, nsI
 nsEmptyStyleRule::MapRuleInfoInto(nsRuleData* aRuleData)
 {
 }
 
 #ifdef DEBUG
 /* virtual */ void
 nsEmptyStyleRule::List(FILE* out, int32_t aIndent) const
 {
+  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  printf("[empty style rule] {}\n");
 }
 #endif
 
 NS_IMPL_ISUPPORTS1(nsInitialStyleRule, nsIStyleRule)
 
 /* virtual */ void
 nsInitialStyleRule::MapRuleInfoInto(nsRuleData* aRuleData)
 {
@@ -84,16 +86,18 @@ nsInitialStyleRule::MapRuleInfoInto(nsRu
     }
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 nsInitialStyleRule::List(FILE* out, int32_t aIndent) const
 {
+  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  printf("[initial style rule] {}\n");
 }
 #endif
 
 static const nsStyleSet::sheetType gCSSSheetTypes[] = {
   nsStyleSet::eAgentSheet,
   nsStyleSet::eUserSheet,
   nsStyleSet::eDocSheet,
   nsStyleSet::eOverrideSheet
