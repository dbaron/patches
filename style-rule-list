From: L. David Baron <dbaron@dbaron.org>

Make sure all style rules have non-empty List implementations.

diff --git a/content/html/content/src/nsHTMLBodyElement.cpp b/content/html/content/src/nsHTMLBodyElement.cpp
--- a/content/html/content/src/nsHTMLBodyElement.cpp
+++ b/content/html/content/src/nsHTMLBodyElement.cpp
@@ -251,16 +251,18 @@ BodyRule::MapRuleInfoInto(nsRuleData* aD
     }
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 BodyRule::List(FILE* out, int32_t aIndent) const
 {
+  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  printf("[body rule] {}\n");
 }
 #endif
 
 //----------------------------------------------------------------------
 
 
 NS_IMPL_NS_NEW_HTML_ELEMENT(Body)
 
diff --git a/layout/style/AnimationCommon.cpp b/layout/style/AnimationCommon.cpp
--- a/layout/style/AnimationCommon.cpp
+++ b/layout/style/AnimationCommon.cpp
@@ -180,17 +180,26 @@ AnimValuesStyleRule::MapRuleInfoInto(nsR
     }
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 AnimValuesStyleRule::List(FILE* out, int32_t aIndent) const
 {
-  // WRITE ME?
+  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  printf("[anim values] { ");
+  for (uint32_t i = 0, i_end = mPropertyValuePairs.Length(); i < i_end; ++i) {
+    const PropertyValuePair &pair = mPropertyValuePairs[i];
+    nsAutoString value;
+    nsStyleAnimation::UncomputeValue(pair.mProperty, pair.mValue, value);
+    printf("%s: %s; ", nsCSSProps::GetStringValue(pair.mProperty).get(),
+                       NS_ConvertUTF16toUTF8(value).get());
+  }
+  printf("}\n");
 }
 #endif
 
 void
 ComputedTimingFunction::Init(const nsTimingFunction &aFunction)
 {
   mType = aFunction.mType;
   if (mType == nsTimingFunction::Function) {
diff --git a/layout/style/nsHTMLStyleSheet.cpp b/layout/style/nsHTMLStyleSheet.cpp
--- a/layout/style/nsHTMLStyleSheet.cpp
+++ b/layout/style/nsHTMLStyleSheet.cpp
@@ -53,26 +53,30 @@ nsHTMLStyleSheet::HTMLColorRule::MapRule
       color->SetColorValue(mColor);
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 nsHTMLStyleSheet::HTMLColorRule::List(FILE* out, int32_t aIndent) const
 {
+  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  printf("[html color rule] {}\n");
 }
 #endif
 
  
 NS_IMPL_ISUPPORTS1(nsHTMLStyleSheet::GenericTableRule, nsIStyleRule)
 
 #ifdef DEBUG
 /* virtual */ void
 nsHTMLStyleSheet::GenericTableRule::List(FILE* out, int32_t aIndent) const
 {
+  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  printf("[generic table rule] {}\n");
 }
 #endif
 
 /* virtual */ void
 nsHTMLStyleSheet::TableTHRule::MapRuleInfoInto(nsRuleData* aRuleData)
 {
   if (aRuleData->mSIDs & NS_STYLE_INHERIT_BIT(Text)) {
     nsCSSValue* textAlign = aRuleData->ValueForTextAlign();
diff --git a/layout/style/nsStyleSet.cpp b/layout/style/nsStyleSet.cpp
--- a/layout/style/nsStyleSet.cpp
+++ b/layout/style/nsStyleSet.cpp
@@ -40,16 +40,18 @@ NS_IMPL_ISUPPORTS1(nsEmptyStyleRule, nsI
 nsEmptyStyleRule::MapRuleInfoInto(nsRuleData* aRuleData)
 {
 }
 
 #ifdef DEBUG
 /* virtual */ void
 nsEmptyStyleRule::List(FILE* out, int32_t aIndent) const
 {
+  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  printf("[empty style rule] {}\n");
 }
 #endif
 
 NS_IMPL_ISUPPORTS1(nsInitialStyleRule, nsIStyleRule)
 
 /* virtual */ void
 nsInitialStyleRule::MapRuleInfoInto(nsRuleData* aRuleData)
 {
@@ -84,16 +86,18 @@ nsInitialStyleRule::MapRuleInfoInto(nsRu
     }
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 nsInitialStyleRule::List(FILE* out, int32_t aIndent) const
 {
+  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  printf("[initial style rule] {}\n");
 }
 #endif
 
 static const nsStyleSet::sheetType gCSSSheetTypes[] = {
   nsStyleSet::eAgentSheet,
   nsStyleSet::eUserSheet,
   nsStyleSet::eDocSheet,
   nsStyleSet::eOverrideSheet
