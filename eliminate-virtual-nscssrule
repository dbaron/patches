From: L. David Baron <dbaron@dbaron.org>

Eliminate all virtual functions from nsCSSRule to eliminate its vtable pointer.  (Bug 596140)

diff --git a/layout/style/Makefile.in b/layout/style/Makefile.in
--- a/layout/style/Makefile.in
+++ b/layout/style/Makefile.in
@@ -111,17 +111,16 @@ CPPSRCS		= \
 		nsCSSDataBlock.cpp \
 		Declaration.cpp \
 		nsCSSKeywords.cpp \
 		Loader.cpp \
 		nsCSSParser.cpp \
 		nsCSSProps.cpp \
 		nsCSSPseudoClasses.cpp \
 		nsCSSPseudoElements.cpp \
-		nsCSSRule.cpp \
 		nsCSSRuleProcessor.cpp \
 		nsCSSRules.cpp \
 		nsCSSScanner.cpp \
 		nsCSSStruct.cpp \
 		nsCSSStyleRule.cpp \
 		nsCSSStyleSheet.cpp \
 		nsCSSValue.cpp \
 		nsComputedDOMStyle.cpp \
diff --git a/layout/style/nsCSSRule.cpp b/layout/style/nsCSSRule.cpp
deleted file mode 100644
--- a/layout/style/nsCSSRule.cpp
+++ /dev/null
@@ -1,94 +0,0 @@
-/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: MPL 1.1/GPL 2.0/LGPL 2.1
- *
- * The contents of this file are subject to the Mozilla Public License Version
- * 1.1 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * http://www.mozilla.org/MPL/
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- *
- * The Original Code is mozilla.org code.
- *
- * The Initial Developer of the Original Code is
- * Netscape Communications Corporation.
- * Portions created by the Initial Developer are Copyright (C) 1999
- * the Initial Developer. All Rights Reserved.
- *
- * Contributor(s):
- *
- * Alternatively, the contents of this file may be used under the terms of
- * either of the GNU General Public License Version 2 or later (the "GPL"),
- * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
- * in which case the provisions of the GPL or the LGPL are applicable instead
- * of those above. If you wish to allow use of your version of this file only
- * under the terms of either the GPL or the LGPL, and not to allow others to
- * use your version of this file under the terms of the MPL, indicate your
- * decision by deleting the provisions above and replace them with the notice
- * and other provisions required by the GPL or the LGPL. If you do not delete
- * the provisions above, a recipient may use your version of this file under
- * the terms of any one of the MPL, the GPL or the LGPL.
- *
- * ***** END LICENSE BLOCK ***** */
-
-/* base class for all rule types in a CSS style sheet */
-
-#include "nsCSSRule.h"
-#include "nsCRT.h"
-#include "nsCSSStyleSheet.h"
-
-nsCSSRule::nsCSSRule(void)
-  : mSheet(nsnull),
-    mParentRule(nsnull)
-{
-}
-
-nsCSSRule::nsCSSRule(const nsCSSRule& aCopy)
-  : mSheet(aCopy.mSheet),
-    mParentRule(aCopy.mParentRule)
-{
-}
-
-
-nsCSSRule::~nsCSSRule(void)
-{
-}
-
-NS_IMPL_ADDREF(nsCSSRule)
-NS_IMPL_RELEASE(nsCSSRule)
-
-/* virtual */ already_AddRefed<nsIStyleSheet>
-nsCSSRule::GetStyleSheet() const
-{
-  NS_IF_ADDREF(mSheet);
-  return mSheet;
-}
-
-/* virtual */ void
-nsCSSRule::SetStyleSheet(nsCSSStyleSheet* aSheet)
-{
-  // We don't reference count this up reference. The style sheet
-  // will tell us when it's going away or when we're detached from
-  // it.
-  mSheet = aSheet;
-}
-
-/* virtual */ void
-nsCSSRule::SetParentRule(nsICSSGroupRule* aRule)
-{
-  // We don't reference count this up reference. The group rule
-  // will tell us when it's going away or when we're detached from
-  // it.
-  mParentRule = aRule;
-}
-
-/* virtual */ void
-nsCSSRule::MapRuleInfoInto(nsRuleData* aRuleData)
-{
-  // The nsIStyleRule contract is not appropriate for all CSS rules.
-  NS_NOTREACHED("nsCSSRule::MapRuleInfoInto");
-}
diff --git a/layout/style/nsCSSRule.h b/layout/style/nsCSSRule.h
--- a/layout/style/nsCSSRule.h
+++ b/layout/style/nsCSSRule.h
@@ -36,47 +36,58 @@
  * ***** END LICENSE BLOCK ***** */
 
 /* base class for all rule types in a CSS style sheet */
 
 #ifndef nsCSSRule_h___
 #define nsCSSRule_h___
 
 #include "nsISupports.h"
+#include "nsCOMPtr.h"
+#include "nsCSSStyleSheet.h"
 
-class nsIStyleSheet;
-class nsCSSStyleSheet;
-struct nsRuleData;
 class nsICSSGroupRule;
-template<class T> struct already_AddRefed;
 
 class nsCSSRule {
 public:
-  nsCSSRule(void);
-  nsCSSRule(const nsCSSRule& aCopy);
-  virtual ~nsCSSRule(void);
+  nsCSSRule(void)
+    : mSheet(nsnull),
+      mParentRule(nsnull)
+  {
+  }
 
-  // for implementing nsISupports
-  NS_IMETHOD_(nsrefcnt) AddRef();
-  NS_IMETHOD_(nsrefcnt) Release();
-protected:
-  nsAutoRefCnt mRefCnt;
-  NS_DECL_OWNINGTHREAD
-public:
+  nsCSSRule(const nsCSSRule& aCopy)
+    : mSheet(aCopy.mSheet),
+      mParentRule(aCopy.mParentRule)
+  {
+  }
 
-  virtual already_AddRefed<nsIStyleSheet> GetStyleSheet() const;
-  virtual void SetStyleSheet(nsCSSStyleSheet* aSheet);
+  already_AddRefed<nsIStyleSheet>
+  GetStyleSheet() const
+  {
+    NS_IF_ADDREF(mSheet);
+    return mSheet;
+  }
 
-  virtual void SetParentRule(nsICSSGroupRule* aRule);
+  void
+  SetStyleSheet(nsCSSStyleSheet* aSheet)
+  {
+    // We don't reference count this up reference. The style sheet
+    // will tell us when it's going away or when we're detached from
+    // it.
+    mSheet = aSheet;
+  }
 
-  // nsIStyleRule methods
-  // The new mapping function.
-  virtual void MapRuleInfoInto(nsRuleData* aRuleData);
+  void
+  SetParentRule(nsICSSGroupRule* aRule)
+  {
+    // We don't reference count this up reference. The group rule
+    // will tell us when it's going away or when we're detached from
+    // it.
+    mParentRule = aRule;
+  }
 
 protected:
   nsCSSStyleSheet*    mSheet;
   nsICSSGroupRule*    mParentRule;
-#ifdef DEBUG_REFS
-  PRInt32 mInstance;
-#endif
 };
 
 #endif /* nsCSSRule_h___ */
diff --git a/layout/style/nsCSSRules.cpp b/layout/style/nsCSSRules.cpp
--- a/layout/style/nsCSSRules.cpp
+++ b/layout/style/nsCSSRules.cpp
@@ -188,19 +188,20 @@ CSSGroupRuleRuleListImpl::Item(PRUint32 
 //
 class CSSCharsetRuleImpl : public nsCSSRule,
                            public nsICSSRule,
                            public nsIDOMCSSCharsetRule
 {
 public:
   CSSCharsetRuleImpl(const nsAString& aEncoding);
   CSSCharsetRuleImpl(const CSSCharsetRuleImpl& aCopy);
-  virtual ~CSSCharsetRuleImpl(void);
-
-  NS_DECL_ISUPPORTS_INHERITED
+private:
+  ~CSSCharsetRuleImpl() {}
+public:
+  NS_DECL_ISUPPORTS
 
   DECL_STYLE_RULE_INHERIT
 
   // nsIStyleRule methods
 #ifdef DEBUG
   virtual void List(FILE* out = stdout, PRInt32 aIndent = 0) const;
 #endif
 
@@ -226,22 +227,18 @@ CSSCharsetRuleImpl::CSSCharsetRuleImpl(c
 }
 
 CSSCharsetRuleImpl::CSSCharsetRuleImpl(const CSSCharsetRuleImpl& aCopy)
   : nsCSSRule(aCopy),
     mEncoding(aCopy.mEncoding)
 {
 }
 
-CSSCharsetRuleImpl::~CSSCharsetRuleImpl(void)
-{
-}
-
-NS_IMPL_ADDREF_INHERITED(CSSCharsetRuleImpl, nsCSSRule)
-NS_IMPL_RELEASE_INHERITED(CSSCharsetRuleImpl, nsCSSRule)
+NS_IMPL_ADDREF(CSSCharsetRuleImpl)
+NS_IMPL_RELEASE(CSSCharsetRuleImpl)
 
 DOMCI_DATA(CSSCharsetRule, CSSCharsetRuleImpl)
 
 // QueryInterface implementation for CSSCharsetRuleImpl
 NS_INTERFACE_MAP_BEGIN(CSSCharsetRuleImpl)
   NS_INTERFACE_MAP_ENTRY(nsICSSRule)
   NS_INTERFACE_MAP_ENTRY(nsIStyleRule)
   NS_INTERFACE_MAP_ENTRY(nsIDOMCSSRule)
@@ -358,19 +355,21 @@ CSSCharsetRuleImpl::GetParentRule(nsIDOM
 //
 class CSSImportRuleImpl : public nsCSSRule,
                           public nsICSSImportRule,
                           public nsIDOMCSSImportRule
 {
 public:
   CSSImportRuleImpl(nsMediaList* aMedia);
   CSSImportRuleImpl(const CSSImportRuleImpl& aCopy);
-  virtual ~CSSImportRuleImpl(void);
+private:
+  ~CSSImportRuleImpl();
+public:
 
-  NS_DECL_ISUPPORTS_INHERITED
+  NS_DECL_ISUPPORTS
 
   DECL_STYLE_RULE_INHERIT
 
   // nsIStyleRule methods
 #ifdef DEBUG
   virtual void List(FILE* out = stdout, PRInt32 aIndent = 0) const;
 #endif
 
@@ -416,25 +415,25 @@ CSSImportRuleImpl::CSSImportRuleImpl(con
   nsRefPtr<nsCSSStyleSheet> sheet;
   if (aCopy.mChildSheet) {
     sheet = aCopy.mChildSheet->Clone(nsnull, this, nsnull, nsnull);
   }
   SetSheet(sheet);
   // SetSheet sets mMedia appropriately
 }
 
-CSSImportRuleImpl::~CSSImportRuleImpl(void)
+CSSImportRuleImpl::~CSSImportRuleImpl()
 {
   if (mChildSheet) {
     mChildSheet->SetOwnerRule(nsnull);
   }
 }
 
-NS_IMPL_ADDREF_INHERITED(CSSImportRuleImpl, nsCSSRule)
-NS_IMPL_RELEASE_INHERITED(CSSImportRuleImpl, nsCSSRule)
+NS_IMPL_ADDREF(CSSImportRuleImpl)
+NS_IMPL_RELEASE(CSSImportRuleImpl)
 
 DOMCI_DATA(CSSImportRule, CSSImportRuleImpl)
 
 // QueryInterface implementation for CSSImportRuleImpl
 NS_INTERFACE_MAP_BEGIN(CSSImportRuleImpl)
   NS_INTERFACE_MAP_ENTRY(nsICSSImportRule)
   NS_INTERFACE_MAP_ENTRY(nsICSSRule)
   NS_INTERFACE_MAP_ENTRY(nsIStyleRule)
@@ -659,16 +658,19 @@ nsCSSGroupRule::~nsCSSGroupRule()
 {
   mRules.EnumerateForwards(SetParentRuleReference, nsnull);
   if (mRuleCollection) {
     mRuleCollection->DropReference();
     NS_RELEASE(mRuleCollection);
   }
 }
 
+NS_IMPL_ADDREF(nsCSSGroupRule)
+NS_IMPL_RELEASE(nsCSSGroupRule)
+
 IMPL_STYLE_RULE_INHERIT2(nsCSSGroupRule, nsCSSRule)
 
 static PRBool
 SetStyleSheetReference(nsICSSRule* aRule, void* aSheet)
 {
   nsCSSStyleSheet* sheet = (nsCSSStyleSheet*)aSheet;
   aRule->SetStyleSheet(sheet);
   return PR_TRUE;
@@ -882,18 +884,18 @@ nsCSSMediaRule::nsCSSMediaRule(const nsC
 
 nsCSSMediaRule::~nsCSSMediaRule()
 {
   if (mMedia) {
     mMedia->SetStyleSheet(nsnull);
   }
 }
 
-NS_IMPL_ADDREF_INHERITED(nsCSSMediaRule, nsCSSRule)
-NS_IMPL_RELEASE_INHERITED(nsCSSMediaRule, nsCSSRule)
+NS_IMPL_ADDREF_INHERITED(nsCSSMediaRule, nsCSSGroupRule)
+NS_IMPL_RELEASE_INHERITED(nsCSSMediaRule, nsCSSGroupRule)
 
 DOMCI_DATA(CSSMediaRule, nsCSSMediaRule)
 
 // QueryInterface implementation for nsCSSMediaRule
 NS_INTERFACE_MAP_BEGIN(nsCSSMediaRule)
   NS_INTERFACE_MAP_ENTRY(nsICSSGroupRule)
   NS_INTERFACE_MAP_ENTRY(nsICSSRule)
   NS_INTERFACE_MAP_ENTRY(nsIStyleRule)
@@ -1045,18 +1047,18 @@ nsCSSDocumentRule::nsCSSDocumentRule(con
   , mURLs(new URL(*aCopy.mURLs))
 {
 }
 
 nsCSSDocumentRule::~nsCSSDocumentRule(void)
 {
 }
 
-NS_IMPL_ADDREF_INHERITED(nsCSSDocumentRule, nsCSSRule)
-NS_IMPL_RELEASE_INHERITED(nsCSSDocumentRule, nsCSSRule)
+NS_IMPL_ADDREF_INHERITED(nsCSSDocumentRule, nsCSSGroupRule)
+NS_IMPL_RELEASE_INHERITED(nsCSSDocumentRule, nsCSSGroupRule)
 
 DOMCI_DATA(CSSMozDocumentRule, nsCSSDocumentRule)
 
 // QueryInterface implementation for nsCSSDocumentRule
 NS_INTERFACE_MAP_BEGIN(nsCSSDocumentRule)
   NS_INTERFACE_MAP_ENTRY(nsICSSGroupRule)
   NS_INTERFACE_MAP_ENTRY(nsICSSRule)
   NS_INTERFACE_MAP_ENTRY(nsIStyleRule)
@@ -1231,19 +1233,20 @@ nsCSSDocumentRule::URL::~URL()
 //
 class CSSNameSpaceRuleImpl : public nsCSSRule,
                              public nsICSSNameSpaceRule,
                              public nsIDOMCSSRule
 {
 public:
   CSSNameSpaceRuleImpl(void);
   CSSNameSpaceRuleImpl(const CSSNameSpaceRuleImpl& aCopy);
-  virtual ~CSSNameSpaceRuleImpl(void);
-
-  NS_DECL_ISUPPORTS_INHERITED
+private:
+  ~CSSNameSpaceRuleImpl();
+public:
+  NS_DECL_ISUPPORTS
 
   DECL_STYLE_RULE_INHERIT
 
   // nsIStyleRule methods
 #ifdef DEBUG
   virtual void List(FILE* out = stdout, PRInt32 aIndent = 0) const;
 #endif
 
@@ -1276,23 +1279,23 @@ CSSNameSpaceRuleImpl::CSSNameSpaceRuleIm
 CSSNameSpaceRuleImpl::CSSNameSpaceRuleImpl(const CSSNameSpaceRuleImpl& aCopy)
   : nsCSSRule(aCopy),
     mPrefix(aCopy.mPrefix),
     mURLSpec(aCopy.mURLSpec)
 {
   NS_IF_ADDREF(mPrefix);
 }
 
-CSSNameSpaceRuleImpl::~CSSNameSpaceRuleImpl(void)
+CSSNameSpaceRuleImpl::~CSSNameSpaceRuleImpl()
 {
   NS_IF_RELEASE(mPrefix);
 }
 
-NS_IMPL_ADDREF_INHERITED(CSSNameSpaceRuleImpl, nsCSSRule)
-NS_IMPL_RELEASE_INHERITED(CSSNameSpaceRuleImpl, nsCSSRule)
+NS_IMPL_ADDREF(CSSNameSpaceRuleImpl)
+NS_IMPL_RELEASE(CSSNameSpaceRuleImpl)
 
 DOMCI_DATA(CSSNameSpaceRule, CSSNameSpaceRuleImpl)
 
 // QueryInterface implementation for CSSNameSpaceRuleImpl
 NS_INTERFACE_MAP_BEGIN(CSSNameSpaceRuleImpl)
   NS_INTERFACE_MAP_ENTRY(nsICSSNameSpaceRule)
   NS_INTERFACE_MAP_ENTRY(nsICSSRule)
   NS_INTERFACE_MAP_ENTRY(nsIStyleRule)
@@ -1768,18 +1771,18 @@ nsCSSFontFaceStyleDecl::GetParentRule(ns
 
 /* virtual */ already_AddRefed<nsICSSRule>
 nsCSSFontFaceRule::Clone() const
 {
   nsCOMPtr<nsICSSRule> clone = new nsCSSFontFaceRule(*this);
   return clone.forget();
 }
 
-NS_IMPL_ADDREF_INHERITED(nsCSSFontFaceRule, nsCSSRule)
-NS_IMPL_RELEASE_INHERITED(nsCSSFontFaceRule, nsCSSRule)
+NS_IMPL_ADDREF(nsCSSFontFaceRule)
+NS_IMPL_RELEASE(nsCSSFontFaceRule)
 
 DOMCI_DATA(CSSFontFaceRule, nsCSSFontFaceRule)
 
 // QueryInterface implementation for nsCSSFontFaceRule
 NS_INTERFACE_MAP_BEGIN(nsCSSFontFaceRule)
   NS_INTERFACE_MAP_ENTRY(nsICSSRule)
   NS_INTERFACE_MAP_ENTRY(nsIStyleRule)
   NS_INTERFACE_MAP_ENTRY(nsIDOMCSSFontFaceRule)
diff --git a/layout/style/nsCSSRules.h b/layout/style/nsCSSRules.h
--- a/layout/style/nsCSSRules.h
+++ b/layout/style/nsCSSRules.h
@@ -71,16 +71,24 @@ nsIDOMCSSRule* GetDOMRuleWeak(nsresult* 
 // so they can be shared between nsCSSMediaRule and nsCSSDocumentRule
 class nsCSSGroupRule : public nsCSSRule, public nsICSSGroupRule
 {
 protected:
   nsCSSGroupRule();
   nsCSSGroupRule(const nsCSSGroupRule& aCopy);
   ~nsCSSGroupRule();
 
+  // Implement part of nsISupports.
+  NS_IMETHOD_(nsrefcnt) AddRef();
+  NS_IMETHOD_(nsrefcnt) Release();
+protected:
+  nsAutoRefCnt mRefCnt;
+  NS_DECL_OWNINGTHREAD
+public:
+
   // implement part of nsIStyleRule and nsICSSRule
   DECL_STYLE_RULE_INHERIT_NO_DOMRULE
 
   // to help implement nsIStyleRule
 #ifdef DEBUG
   virtual void List(FILE* out = stdout, PRInt32 aIndent = 0) const;
 #endif
 
@@ -249,17 +257,17 @@ private:
   void* operator new(size_t size) CPP_THROW_NEW;
 };
 
 class nsCSSFontFaceRule : public nsCSSRule,
                           public nsICSSRule,
                           public nsIDOMCSSFontFaceRule
 {
 public:
-  NS_DECL_ISUPPORTS_INHERITED
+  NS_DECL_ISUPPORTS
 
   // nsIStyleRule methods
 #ifdef DEBUG
   virtual void List(FILE* out = stdout, PRInt32 aIndent = 0) const;
 #endif
 
   // nsICSSRule methods
   DECL_STYLE_RULE_INHERIT
diff --git a/layout/style/nsCSSStyleRule.cpp b/layout/style/nsCSSStyleRule.cpp
--- a/layout/style/nsCSSStyleRule.cpp
+++ b/layout/style/nsCSSStyleRule.cpp
@@ -1279,17 +1279,17 @@ public:
 private:
   // for |Clone|
   CSSStyleRuleImpl(const CSSStyleRuleImpl& aCopy);
   // for |DeclarationChanged|
   CSSStyleRuleImpl(CSSStyleRuleImpl& aCopy,
                    css::Declaration *aDeclaration);
 public:
 
-  NS_DECL_ISUPPORTS_INHERITED
+  NS_DECL_ISUPPORTS
 
   virtual nsCSSSelectorList* Selector(void);
 
   virtual PRUint32 GetLineNumber(void) const;
   virtual void SetLineNumber(PRUint32 aLineNumber);
 
   virtual css::Declaration* GetDeclaration(void) const;
 
@@ -1322,18 +1322,18 @@ public:
 #ifdef DEBUG
   virtual void List(FILE* out = stdout, PRInt32 aIndent = 0) const;
 #endif
 
 private:
   // These are not supported and are not implemented!
   CSSStyleRuleImpl& operator=(const CSSStyleRuleImpl& aCopy);
 
-protected:
-  virtual ~CSSStyleRuleImpl(void);
+private:
+  ~CSSStyleRuleImpl();
 
 protected:
   nsCSSSelectorList*      mSelector; // null for style attribute
   css::Declaration*       mDeclaration;
   CSSImportantRule*       mImportantRule; // initialized by RuleMatched
   DOMCSSStyleRuleImpl*    mDOMRule;
   PRUint32                mLineNumber : 31;
   PRPackedBool            mWasMatched : 1;
@@ -1387,17 +1387,17 @@ CSSStyleRuleImpl::CSSStyleRuleImpl(CSSSt
   // aCopy.mDeclaration if we are taking ownership.
   if (mDeclaration == aCopy.mDeclaration) {
     // This should only ever happen if the declaration was modifiable.
     mDeclaration->AssertMutable();
     aCopy.mDeclaration = nsnull;
   }
 }
 
-CSSStyleRuleImpl::~CSSStyleRuleImpl(void)
+CSSStyleRuleImpl::~CSSStyleRuleImpl()
 {
   delete mSelector;
   delete mDeclaration;
   NS_IF_RELEASE(mImportantRule);
   if (mDOMRule) {
     mDOMRule->DOMDeclaration()->DropReference();
     NS_RELEASE(mDOMRule);
   }
@@ -1406,18 +1406,18 @@ CSSStyleRuleImpl::~CSSStyleRuleImpl(void
 // QueryInterface implementation for CSSStyleRuleImpl
 NS_INTERFACE_MAP_BEGIN(CSSStyleRuleImpl)
   NS_INTERFACE_MAP_ENTRY(nsICSSStyleRule)
   NS_INTERFACE_MAP_ENTRY(nsICSSRule)
   NS_INTERFACE_MAP_ENTRY(nsIStyleRule)
   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsICSSStyleRule)
 NS_INTERFACE_MAP_END
 
-NS_IMPL_ADDREF_INHERITED(CSSStyleRuleImpl, nsCSSRule)
-NS_IMPL_RELEASE_INHERITED(CSSStyleRuleImpl, nsCSSRule)
+NS_IMPL_ADDREF(CSSStyleRuleImpl)
+NS_IMPL_RELEASE(CSSStyleRuleImpl)
 
 nsCSSSelectorList* CSSStyleRuleImpl::Selector(void)
 {
   return mSelector;
 }
 
 PRUint32 CSSStyleRuleImpl::GetLineNumber(void) const
 {
