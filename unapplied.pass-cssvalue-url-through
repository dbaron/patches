From: L. David Baron <dbaron@dbaron.org>

Pass mozilla::css::URLValue objects through the style system so that we can send correct Referer headers.

TODO: Fix paint server handling in StyleAnimationValue too (from bug 607537).

diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -34,17 +34,16 @@
 #include "imgRequestProxy.h"
 #include "Orientation.h"
 #include "CounterStyleManager.h"
 #include <cstddef> // offsetof()
 #include <utility>
 #include "X11UndefineNone.h"
 
 class nsIFrame;
-class nsIURI;
 class nsTextFrame;
 class imgIContainer;
 class nsPresContext;
 struct nsStyleDisplay;
 struct nsStyleVisibility;
 namespace mozilla {
 class ComputedStyle;
 namespace dom {
diff --git a/layout/svg/SVGObserverUtils.cpp b/layout/svg/SVGObserverUtils.cpp
--- a/layout/svg/SVGObserverUtils.cpp
+++ b/layout/svg/SVGObserverUtils.cpp
@@ -167,31 +167,32 @@ SVGRenderingObserver::ContentRemoved(nsI
  * SVGIDRenderingObserver object also adds itself to an
  * SVGRenderingObserverList object belonging to the referenced
  * element.
  *
  * XXX: it would be nice to have a clear and concise executive summary of the
  * benefits/necessity of maintaining a second observer list.
  */
 
-SVGIDRenderingObserver::SVGIDRenderingObserver(URLAndReferrerInfo* aURI,
+SVGIDRenderingObserver::SVGIDRenderingObserver(mozilla::css::URLValue* aURI,
                                                nsIContent* aObservingContent,
                                                bool aReferenceImage)
   : mObservedElementTracker(this)
 {
   // Start watching the target element
   nsCOMPtr<nsIURI> uri;
   nsCOMPtr<nsIURI> referrer;
   uint32_t referrerPolicy = mozilla::net::RP_Unset;
   if (aURI) {
     uri = aURI->GetURI();
     referrer = aURI->GetReferrer();
     referrerPolicy = aURI->GetReferrerPolicy();
   }
 
+  // FIXME: Should pass more information from mozilla::css::URLValue.
   mObservedElementTracker.Reset(aObservingContent, uri, referrer,
                                 referrerPolicy, true, aReferenceImage);
   StartObserving();
 }
 
 SVGIDRenderingObserver::~SVGIDRenderingObserver()
 {
   StopObserving();
@@ -302,24 +303,24 @@ SVGFilterObserverList::SVGFilterObserver
                                              nsIFrame* aFilteredFrame)
 {
   for (uint32_t i = 0; i < aFilters.Length(); i++) {
     if (aFilters[i].GetType() != NS_STYLE_FILTER_URL)
       continue;
 
     // aFilteredFrame can be null if this filter belongs to a
     // CanvasRenderingContext2D.
-    RefPtr<URLAndReferrerInfo> filterURL;
+    RefPtr<mozilla::css::URLValue> filterURL;
     if (aFilteredFrame) {
       filterURL = SVGObserverUtils::GetFilterURI(aFilteredFrame, i);
     } else {
       nsCOMPtr<nsIURI> resolvedURI =
         aFilters[i].GetURL()->ResolveLocalRef(aFilteredElement);
       if (resolvedURI) {
-        filterURL = new URLAndReferrerInfo(
+        filterURL = new mozilla::css::URLValue(
           resolvedURI,
           aFilters[i].GetURL()->mExtraData->GetReferrer(),
           aFilters[i].GetURL()->mExtraData->GetReferrerPolicy());
       }
     }
 
     RefPtr<SVGFilterObserver> observer =
       new SVGFilterObserver(filterURL, aFilteredElement, this);
@@ -407,17 +408,17 @@ SVGMarkerObserver::OnRenderingChange()
 NS_IMPL_ISUPPORTS(SVGMaskObserverList, nsISupports)
 
 SVGMaskObserverList::SVGMaskObserverList(nsIFrame* aFrame)
  : mFrame(aFrame)
 {
   const nsStyleSVGReset *svgReset = aFrame->StyleSVGReset();
 
   for (uint32_t i = 0; i < svgReset->mMask.mImageCount; i++) {
-    RefPtr<URLAndReferrerInfo> maskUri =
+    RefPtr<mozilla::css::URLValue> maskUri =
       SVGObserverUtils::GetMaskURI(aFrame, i);
     bool hasRef = false;
     if (maskUri) {
       maskUri->GetURI()->GetHasRef(&hasRef);
     }
 
     // Accrording to maskUri, nsSVGPaintingProperty's ctor may trigger an
     // external SVG resource download, so we should pass maskUri in only if
@@ -551,57 +552,57 @@ GetOrCreateMaskProperty(nsIFrame* aFrame
   prop = new SVGMaskObserverList(aFrame);
   NS_ADDREF(prop);
   aFrame->SetProperty(SVGObserverUtils::MaskProperty(), prop);
   return prop;
 }
 
 template<class T>
 static T*
-GetEffectProperty(URLAndReferrerInfo* aURI, nsIFrame* aFrame,
+GetEffectProperty(mozilla::css::URLValue* aURI, nsIFrame* aFrame,
   const mozilla::FramePropertyDescriptor<T>* aProperty)
 {
   if (!aURI)
     return nullptr;
 
   T* prop = aFrame->GetProperty(aProperty);
   if (prop)
     return prop;
   prop = new T(aURI, aFrame, false);
   NS_ADDREF(prop);
   aFrame->SetProperty(aProperty, prop);
   return prop;
 }
 
 SVGMarkerObserver*
-SVGObserverUtils::GetMarkerProperty(URLAndReferrerInfo* aURI, nsIFrame* aFrame,
+SVGObserverUtils::GetMarkerProperty(mozilla::css::URLValue* aURI, nsIFrame* aFrame,
   const mozilla::FramePropertyDescriptor<SVGMarkerObserver>* aProperty)
 {
   MOZ_ASSERT(aFrame->IsSVGGeometryFrame() &&
              static_cast<SVGGeometryElement*>(aFrame->GetContent())->IsMarkable(),
              "Bad frame");
   return GetEffectProperty(aURI, aFrame, aProperty);
 }
 
 SVGTextPathObserver*
-SVGObserverUtils::GetTextPathProperty(URLAndReferrerInfo* aURI, nsIFrame* aFrame,
+SVGObserverUtils::GetTextPathProperty(mozilla::css::URLValue* aURI, nsIFrame* aFrame,
   const mozilla::FramePropertyDescriptor<SVGTextPathObserver>* aProperty)
 {
   return GetEffectProperty(aURI, aFrame, aProperty);
 }
 
 nsSVGPaintingProperty*
-SVGObserverUtils::GetPaintingProperty(URLAndReferrerInfo* aURI, nsIFrame* aFrame,
+SVGObserverUtils::GetPaintingProperty(mozilla::css::URLValue* aURI, nsIFrame* aFrame,
   const mozilla::FramePropertyDescriptor<nsSVGPaintingProperty>* aProperty)
 {
   return GetEffectProperty(aURI, aFrame, aProperty);
 }
 
 nsSVGPaintingProperty*
-SVGObserverUtils::GetPaintingPropertyForURI(URLAndReferrerInfo* aURI,
+SVGObserverUtils::GetPaintingPropertyForURI(mozilla::css::URLValue* aURI,
   nsIFrame* aFrame,
   URIObserverHashtablePropertyDescriptor aProperty)
 {
   if (!aURI)
     return nullptr;
 
   SVGObserverUtils::URIObserverHashtable *hashtable =
     aFrame->GetProperty(aProperty);
@@ -625,17 +626,17 @@ SVGObserverUtils::GetEffectProperties(ns
   NS_ASSERTION(!aFrame->GetPrevContinuation(), "aFrame should be first continuation");
 
   EffectProperties result;
   const nsStyleSVGReset *style = aFrame->StyleSVGReset();
 
   result.mFilterObservers = GetOrCreateFilterObserverListForCSS(aFrame);
 
   if (style->mClipPath.GetType() == StyleShapeSourceType::URL) {
-    RefPtr<URLAndReferrerInfo> pathURI = SVGObserverUtils::GetClipPathURI(aFrame);
+    RefPtr<mozilla::css::URLValue> pathURI = SVGObserverUtils::GetClipPathURI(aFrame);
     result.mClipPath =
       GetPaintingProperty(pathURI, aFrame, ClipPathProperty());
   } else {
     result.mClipPath = nullptr;
   }
 
   MOZ_ASSERT(style->mMask.mImageCount > 0);
   result.mMaskObservers = style->HasMask()
@@ -661,17 +662,17 @@ SVGObserverUtils::GetPaintServer(nsIFram
       frame = grandparent;
     }
   }
 
   const nsStyleSVG* svgStyle = frame->StyleSVG();
   if ((svgStyle->*aPaint).Type() != eStyleSVGPaintType_Server)
     return nullptr;
 
-  RefPtr<URLAndReferrerInfo> paintServerURL =
+  RefPtr<mozilla::css::URLValue> paintServerURL =
     SVGObserverUtils::GetPaintURI(frame, aPaint);
   nsSVGPaintingProperty *property =
     SVGObserverUtils::GetPaintingProperty(paintServerURL, frame, aType);
   if (!property)
     return nullptr;
   nsIFrame* result = property->GetReferencedFrame();
   if (!result)
     return nullptr;
@@ -785,17 +786,17 @@ SVGObserverUtils::UpdateEffects(nsIFrame
   // Ensure that the filter is repainted correctly
   // We can't do that in OnRenderingChange as the referenced frame may
   // not be valid
   GetOrCreateFilterObserverListForCSS(aFrame);
 
   if (aFrame->IsSVGGeometryFrame() &&
       static_cast<SVGGeometryElement*>(aFrame->GetContent())->IsMarkable()) {
     // Set marker properties here to avoid reference loops
-    RefPtr<URLAndReferrerInfo> markerURL =
+    RefPtr<mozilla::css::URLValue> markerURL =
       GetMarkerURI(aFrame, &nsStyleSVG::mMarkerStart);
     GetMarkerProperty(markerURL, aFrame, MarkerBeginProperty());
     markerURL = GetMarkerURI(aFrame, &nsStyleSVG::mMarkerMid);
     GetMarkerProperty(markerURL, aFrame, MarkerMiddleProperty());
     markerURL = GetMarkerURI(aFrame, &nsStyleSVG::mMarkerEnd);
     GetMarkerProperty(markerURL, aFrame, MarkerEndProperty());
   }
 }
@@ -1012,102 +1013,102 @@ SVGObserverUtils::GetBaseURLForLocalRef(
     if (isEqualsExceptRef) {
       return originalURI.forget();
     }
   }
 
   return baseURI.forget();
 }
 
-static already_AddRefed<URLAndReferrerInfo>
+static already_AddRefed<mozilla::css::URLValue>
 ResolveURLUsingLocalRef(nsIFrame* aFrame, const css::URLValueData* aURL)
 {
   MOZ_ASSERT(aFrame);
 
   if (!aURL) {
     return nullptr;
   }
 
   nsCOMPtr<nsIURI> uri = aURL->GetURI();
-  RefPtr<URLAndReferrerInfo> result;
+  RefPtr<mozilla::css::URLValue> result;
 
   // Non-local-reference URL.
   if (!aURL->IsLocalRef()) {
     if (!uri) {
       return nullptr;
     }
-    result = new URLAndReferrerInfo(uri,
+    result = new mozilla::css::URLValue(uri,
                                     aURL->mExtraData->GetReferrer(),
                                     aURL->mExtraData->GetReferrerPolicy());
     return result.forget();
   }
 
   nsCOMPtr<nsIURI> baseURI =
     SVGObserverUtils::GetBaseURLForLocalRef(aFrame->GetContent(), uri);
 
   nsCOMPtr<nsIURI> resolvedURI = aURL->ResolveLocalRef(baseURI);
   if (!resolvedURI) {
     return nullptr;
   }
 
-  result = new URLAndReferrerInfo(resolvedURI,
+  result = new mozilla::css::URLValue(resolvedURI,
                                   aURL->mExtraData->GetReferrer(),
                                   aURL->mExtraData->GetReferrerPolicy());
   return result.forget();
 }
 
-already_AddRefed<URLAndReferrerInfo>
+already_AddRefed<mozilla::css::URLValue>
 SVGObserverUtils::GetMarkerURI(nsIFrame* aFrame,
                                RefPtr<css::URLValue> nsStyleSVG::* aMarker)
 {
   return ResolveURLUsingLocalRef(aFrame, aFrame->StyleSVG()->*aMarker);
 }
 
-already_AddRefed<URLAndReferrerInfo>
+already_AddRefed<mozilla::css::URLValue>
 SVGObserverUtils::GetClipPathURI(nsIFrame* aFrame)
 {
   const nsStyleSVGReset* svgResetStyle = aFrame->StyleSVGReset();
   MOZ_ASSERT(svgResetStyle->mClipPath.GetType() == StyleShapeSourceType::URL);
 
   css::URLValue* url = svgResetStyle->mClipPath.GetURL();
   return ResolveURLUsingLocalRef(aFrame, url);
 }
 
-already_AddRefed<URLAndReferrerInfo>
+already_AddRefed<mozilla::css::URLValue>
 SVGObserverUtils::GetFilterURI(nsIFrame* aFrame, uint32_t aIndex)
 {
   const nsStyleEffects* effects = aFrame->StyleEffects();
   MOZ_ASSERT(effects->mFilters.Length() > aIndex);
   MOZ_ASSERT(effects->mFilters[aIndex].GetType() == NS_STYLE_FILTER_URL);
 
   return ResolveURLUsingLocalRef(aFrame, effects->mFilters[aIndex].GetURL());
 }
 
-already_AddRefed<URLAndReferrerInfo>
+already_AddRefed<mozilla::css::URLValue>
 SVGObserverUtils::GetFilterURI(nsIFrame* aFrame, const nsStyleFilter& aFilter)
 {
   MOZ_ASSERT(aFrame->StyleEffects()->mFilters.Length());
   MOZ_ASSERT(aFilter.GetType() == NS_STYLE_FILTER_URL);
 
   return ResolveURLUsingLocalRef(aFrame, aFilter.GetURL());
 }
 
-already_AddRefed<URLAndReferrerInfo>
+already_AddRefed<mozilla::css::URLValue>
 SVGObserverUtils::GetPaintURI(nsIFrame* aFrame,
                               nsStyleSVGPaint nsStyleSVG::* aPaint)
 {
   const nsStyleSVG* svgStyle = aFrame->StyleSVG();
   MOZ_ASSERT((svgStyle->*aPaint).Type() ==
              nsStyleSVGPaintType::eStyleSVGPaintType_Server);
 
   return ResolveURLUsingLocalRef(aFrame,
                                  (svgStyle->*aPaint).GetPaintServer());
 }
 
-already_AddRefed<URLAndReferrerInfo>
+already_AddRefed<mozilla::css::URLValue>
 SVGObserverUtils::GetMaskURI(nsIFrame* aFrame, uint32_t aIndex)
 {
   const nsStyleSVGReset* svgReset = aFrame->StyleSVGReset();
   MOZ_ASSERT(svgReset->mMask.mLayers.Length() > aIndex);
 
   css::URLValueData* data =
     svgReset->mMask.mLayers[aIndex].mImage.GetURLValue();
   return ResolveURLUsingLocalRef(aFrame, data);
diff --git a/layout/svg/SVGObserverUtils.h b/layout/svg/SVGObserverUtils.h
--- a/layout/svg/SVGObserverUtils.h
+++ b/layout/svg/SVGObserverUtils.h
@@ -17,64 +17,33 @@
 #include "nsIMutationObserver.h"
 #include "nsInterfaceHashtable.h"
 #include "nsISupportsBase.h"
 #include "nsISupportsImpl.h"
 #include "nsStubMutationObserver.h"
 #include "nsSVGUtils.h"
 #include "nsTHashtable.h"
 #include "nsURIHashKey.h"
+#include "nsCSSValue.h"
 #include "nsCycleCollectionParticipant.h"
 
 class nsAtom;
 class nsIPresShell;
 class nsIURI;
 class nsSVGClipPathFrame;
 class nsSVGPaintServerFrame;
 class nsSVGFilterFrame;
 class nsSVGMaskFrame;
 namespace mozilla {
 class SVGFilterObserverList;
 }
 
 namespace mozilla {
 
 /*
- * This class contains URL and referrer information (referrer and referrer
- * policy).
- * We use it to pass to svg system instead of nsIURI. The object brings referrer
- * and referrer policy so we can send correct Referer headers.
- */
-class URLAndReferrerInfo
-{
-public:
-  URLAndReferrerInfo(nsIURI* aURI, nsIURI* aReferrer,
-                     mozilla::net::ReferrerPolicy aReferrerPolicy)
-    : mURI(aURI)
-    , mReferrer(aReferrer)
-    , mReferrerPolicy(aReferrerPolicy)
- {
-   MOZ_ASSERT(aURI);
- }
-
-  NS_INLINE_DECL_REFCOUNTING(URLAndReferrerInfo)
-
-  nsIURI* GetURI() { return mURI; }
-  nsIURI* GetReferrer() { return mReferrer; }
-  mozilla::net::ReferrerPolicy GetReferrerPolicy() { return mReferrerPolicy; }
-
-private:
-  ~URLAndReferrerInfo() = default;
-
-  nsCOMPtr<nsIURI> mURI;
-  nsCOMPtr<nsIURI> mReferrer;
-  mozilla::net::ReferrerPolicy mReferrerPolicy;
-};
-
-/*
  * This interface allows us to be notified when a piece of SVG content is
  * re-rendered.
  *
  * Concrete implementations of this interface need to implement
  * "GetTarget()" to specify the piece of SVG content that they'd like to
  * monitor, and they need to implement "OnRenderingChange" to specify how
  * we'll react when that content gets re-rendered. They also need to implement
  * a constructor and destructor, which should call StartObserving and
@@ -165,17 +134,17 @@ protected:
  * property object is attached to the referencing frame.
  */
 class SVGIDRenderingObserver : public SVGRenderingObserver
 {
 public:
   typedef mozilla::dom::Element Element;
   typedef mozilla::dom::IDTracker IDTracker;
 
-  SVGIDRenderingObserver(URLAndReferrerInfo* aURI, nsIContent* aObservingContent,
+  SVGIDRenderingObserver(mozilla::css::URLValue* aURI, nsIContent* aObservingContent,
                          bool aReferenceImage);
   virtual ~SVGIDRenderingObserver();
 
 protected:
   Element* GetTarget() override { return mObservedElementTracker.get(); }
 
   void OnRenderingChange() override;
 
@@ -235,17 +204,17 @@ private:
   nsIPresShell *mFramePresShell;
 };
 
 class nsSVGRenderingObserverProperty : public SVGIDRenderingObserver
 {
 public:
   NS_DECL_ISUPPORTS
 
-  nsSVGRenderingObserverProperty(URLAndReferrerInfo* aURI, nsIFrame *aFrame,
+  nsSVGRenderingObserverProperty(mozilla::css::URLValue* aURI, nsIFrame *aFrame,
                                  bool aReferenceImage)
     : SVGIDRenderingObserver(aURI, aFrame->GetContent(), aReferenceImage)
     , mFrameReference(aFrame)
   {}
 
 protected:
   virtual ~nsSVGRenderingObserverProperty() {}
 
@@ -268,17 +237,17 @@ protected:
  * It fires invalidations when the SVG filter element's id changes or when
  * the SVG filter element's content changes.
  *
  * The SVGFilterObserverList class manages a list of SVGFilterObservers.
  */
 class SVGFilterObserver final : public SVGIDRenderingObserver
 {
 public:
-  SVGFilterObserver(URLAndReferrerInfo* aURI,
+  SVGFilterObserver(mozilla::css::URLValue* aURI,
                     nsIContent* aObservingContent,
                     SVGFilterObserverList* aFilterChainObserver)
     : SVGIDRenderingObserver(aURI, aObservingContent, false)
     , mFilterObserverList(aFilterChainObserver)
   {
   }
 
   bool ReferencesValidResource() { return GetFilterFrame(); }
@@ -368,27 +337,27 @@ protected:
   virtual void OnRenderingChange() override;
 
   nsSVGFrameReferenceFromProperty mFrameReference;
 };
 
 class SVGMarkerObserver final: public nsSVGRenderingObserverProperty
 {
 public:
-  SVGMarkerObserver(URLAndReferrerInfo* aURI, nsIFrame* aFrame, bool aReferenceImage)
+  SVGMarkerObserver(mozilla::css::URLValue* aURI, nsIFrame* aFrame, bool aReferenceImage)
     : nsSVGRenderingObserverProperty(aURI, aFrame, aReferenceImage) {}
 
 protected:
   virtual void OnRenderingChange() override;
 };
 
 class SVGTextPathObserver final : public nsSVGRenderingObserverProperty
 {
 public:
-  SVGTextPathObserver(URLAndReferrerInfo* aURI, nsIFrame* aFrame, bool aReferenceImage)
+  SVGTextPathObserver(mozilla::css::URLValue* aURI, nsIFrame* aFrame, bool aReferenceImage)
     : nsSVGRenderingObserverProperty(aURI, aFrame, aReferenceImage)
     , mValid(true) {}
 
   virtual bool ObservesReflow() override { return false; }
 
 protected:
   virtual void OnRenderingChange() override;
 
@@ -399,17 +368,17 @@ private:
   bool TargetIsValid();
 
   bool mValid;
 };
 
 class nsSVGPaintingProperty final : public nsSVGRenderingObserverProperty
 {
 public:
-  nsSVGPaintingProperty(URLAndReferrerInfo* aURI, nsIFrame* aFrame, bool aReferenceImage)
+  nsSVGPaintingProperty(mozilla::css::URLValue* aURI, nsIFrame* aFrame, bool aReferenceImage)
     : nsSVGRenderingObserverProperty(aURI, aFrame, aReferenceImage) {}
 
 protected:
   virtual void OnRenderingChange() override;
 };
 
 class SVGMaskObserverList final : public nsISupports
 {
@@ -494,17 +463,17 @@ public:
 private:
   nsTHashtable<nsPtrHashKey<SVGRenderingObserver>> mObservers;
 };
 
 class SVGObserverUtils
 {
 public:
   typedef mozilla::dom::Element Element;
-  typedef nsInterfaceHashtable<nsRefPtrHashKey<URLAndReferrerInfo>,
+  typedef nsInterfaceHashtable<nsRefPtrHashKey<mozilla::css::URLValue>,
     nsIMutationObserver> URIObserverHashtable;
 
   using PaintingPropertyDescriptor =
     const mozilla::FramePropertyDescriptor<nsSVGPaintingProperty>*;
   using URIObserverHashtablePropertyDescriptor =
     const mozilla::FramePropertyDescriptor<URIObserverHashtable>*;
 
   static void DestroyFilterProperty(SVGFilterObserverListForCSSProp* aProp)
@@ -683,74 +652,74 @@ public:
    */
   static void InvalidateDirectRenderingObservers(Element* aElement, uint32_t aFlags = 0);
   static void InvalidateDirectRenderingObservers(nsIFrame* aFrame, uint32_t aFlags = 0);
 
   /**
    * Get an SVGMarkerObserver for the frame, creating a fresh one if necessary
    */
   static SVGMarkerObserver *
-  GetMarkerProperty(URLAndReferrerInfo* aURI, nsIFrame* aFrame,
+  GetMarkerProperty(mozilla::css::URLValue* aURI, nsIFrame* aFrame,
     const mozilla::FramePropertyDescriptor<SVGMarkerObserver>* aProperty);
   /**
    * Get an SVGTextPathObserver for the frame, creating a fresh one if necessary
    */
   static SVGTextPathObserver *
-  GetTextPathProperty(URLAndReferrerInfo* aURI, nsIFrame* aFrame,
+  GetTextPathProperty(mozilla::css::URLValue* aURI, nsIFrame* aFrame,
     const mozilla::FramePropertyDescriptor<SVGTextPathObserver>* aProperty);
   /**
    * Get an nsSVGPaintingProperty for the frame, creating a fresh one if necessary
    */
   static nsSVGPaintingProperty*
-  GetPaintingProperty(URLAndReferrerInfo* aURI, nsIFrame* aFrame,
+  GetPaintingProperty(mozilla::css::URLValue* aURI, nsIFrame* aFrame,
       const mozilla::FramePropertyDescriptor<nsSVGPaintingProperty>* aProperty);
   /**
    * Get an nsSVGPaintingProperty for the frame for that URI, creating a fresh
    * one if necessary
    */
   static nsSVGPaintingProperty*
-  GetPaintingPropertyForURI(URLAndReferrerInfo* aURI,
+  GetPaintingPropertyForURI(mozilla::css::URLValue* aURI,
                             nsIFrame* aFrame,
                             URIObserverHashtablePropertyDescriptor aProp);
 
   /**
    * A helper function to resolve marker's URL.
    */
-  static already_AddRefed<URLAndReferrerInfo>
+  static already_AddRefed<mozilla::css::URLValue>
   GetMarkerURI(nsIFrame* aFrame,
                RefPtr<mozilla::css::URLValue> nsStyleSVG::* aMarker);
 
   /**
    * A helper function to resolve clip-path URL.
    */
-  static already_AddRefed<URLAndReferrerInfo>
+  static already_AddRefed<mozilla::css::URLValue>
   GetClipPathURI(nsIFrame* aFrame);
 
   /**
    * A helper function to resolve filter URL.
    */
-  static already_AddRefed<URLAndReferrerInfo>
+  static already_AddRefed<mozilla::css::URLValue>
   GetFilterURI(nsIFrame* aFrame, uint32_t aIndex);
 
   /**
    * A helper function to resolve filter URL.
    */
-  static already_AddRefed<URLAndReferrerInfo>
+  static already_AddRefed<mozilla::css::URLValue>
   GetFilterURI(nsIFrame* aFrame, const nsStyleFilter& aFilter);
 
   /**
    * A helper function to resolve paint-server URL.
    */
-  static already_AddRefed<URLAndReferrerInfo>
+  static already_AddRefed<mozilla::css::URLValue>
   GetPaintURI(nsIFrame* aFrame, nsStyleSVGPaint nsStyleSVG::* aPaint);
 
   /**
    * A helper function to resolve SVG mask URL.
    */
-  static already_AddRefed<URLAndReferrerInfo>
+  static already_AddRefed<mozilla::css::URLValue>
   GetMaskURI(nsIFrame* aFrame, uint32_t aIndex);
 
   /**
    * Return a baseURL for resolving a local-ref URL.
    *
    * @param aContent an element which uses a local-ref property. Here are some
    *                 examples:
    *                   <rect fill=url(#foo)>
diff --git a/layout/svg/nsSVGGradientFrame.cpp b/layout/svg/nsSVGGradientFrame.cpp
--- a/layout/svg/nsSVGGradientFrame.cpp
+++ b/layout/svg/nsSVGGradientFrame.cpp
@@ -367,22 +367,24 @@ nsSVGGradientFrame::GetReferencedGradien
     // Convert href to an nsIURI
     nsCOMPtr<nsIURI> targetURI;
     nsCOMPtr<nsIURI> base = mContent->GetBaseURI();
     nsContentUtils::NewURIWithDocumentCharset(getter_AddRefs(targetURI), href,
                                               mContent->GetUncomposedDoc(), base);
 
     // There's no clear refererer policy spec about non-CSS SVG resource references
     // Bug 1415044 to investigate which referrer we should use
-    RefPtr<URLAndReferrerInfo> target =
-      new URLAndReferrerInfo(targetURI,
-                             mContent->OwnerDoc()->GetDocumentURI(),
-                             mContent->OwnerDoc()->GetReferrerPolicy());
+    RefPtr<mozilla::css::URLValue> url =
+      new mozilla::css::URLValue(targetURI,
+                                 nsCSSValue::BufferFromString(href),
+                                 mContent->GetOwnerDoc()->GetDocumentURI(),
+                                 mContent->NodePrincipal(),
+                                 mContent->OwnerDoc()->GetReferrerPolicy());
 
-    property = SVGObserverUtils::GetPaintingProperty(target, this,
+    property = SVGObserverUtils::GetPaintingProperty(url, this,
       SVGObserverUtils::HrefAsPaintingProperty());
     if (!property)
       return nullptr;
   }
 
   nsIFrame *result = property->GetReferencedFrame();
   if (!result)
     return nullptr;
diff --git a/layout/svg/nsSVGPatternFrame.cpp b/layout/svg/nsSVGPatternFrame.cpp
--- a/layout/svg/nsSVGPatternFrame.cpp
+++ b/layout/svg/nsSVGPatternFrame.cpp
@@ -601,22 +601,24 @@ nsSVGPatternFrame::GetReferencedPattern(
     // Convert href to an nsIURI
     nsCOMPtr<nsIURI> targetURI;
     nsCOMPtr<nsIURI> base = mContent->GetBaseURI();
     nsContentUtils::NewURIWithDocumentCharset(getter_AddRefs(targetURI), href,
                                               mContent->GetUncomposedDoc(), base);
 
     // There's no clear refererer policy spec about non-CSS SVG resource references
     // Bug 1415044 to investigate which referrer we should use
-    RefPtr<URLAndReferrerInfo> target =
-      new URLAndReferrerInfo(targetURI,
-                             mContent->OwnerDoc()->GetDocumentURI(),
-                             mContent->OwnerDoc()->GetReferrerPolicy());
+    RefPtr<mozilla::css::URLValue> url =
+      new mozilla::css::URLValue(targetURI,
+                                 nsCSSValue::BufferFromString(href),
+                                 mContent->GetOwnerDoc()->GetDocumentURI(),
+                                 mContent->NodePrincipal(),
+                                 mContent->OwnerDoc()->GetReferrerPolicy());
 
-    property = SVGObserverUtils::GetPaintingProperty(target, this,
+    property = SVGObserverUtils::GetPaintingProperty(url, this,
       SVGObserverUtils::HrefAsPaintingProperty());
     if (!property)
       return nullptr;
   }
 
   nsIFrame *result = property->GetReferencedFrame();
   if (!result)
     return nullptr;
