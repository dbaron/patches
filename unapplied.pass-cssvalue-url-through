From: L. David Baron <dbaron@dbaron.org>

Pass nsCSSValue::URL objects through the style system so that we can send correct Referer headers.

TODO: Fix paint server handling in nsStyleAnimation too (from bug 607537).

diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -4168,17 +4168,17 @@ nsComputedDOMStyle::GetSVGPaintFor(bool 
     case eStyleSVGPaintType_Server:
     {
       nsDOMCSSValueList *valueList = GetROCSSValueList(false);
       valueList->AppendCSSValue(val);
 
       nsROCSSPrimitiveValue* fallback = new nsROCSSPrimitiveValue;
       valueList->AppendCSSValue(fallback);
 
-      val->SetURI(paint->mPaint.mPaintServer);
+      val->SetURI(paint->mPaint.mPaintServer->mURI);
       SetToRGBAColor(fallback, paint->mFallbackColor);
       return valueList;
     }
     case eStyleSVGPaintType_ObjectFill:
     {
       val->SetIdent(eCSSKeyword__moz_objectfill);
       break;
     }
@@ -4207,47 +4207,47 @@ nsComputedDOMStyle::DoGetStroke()
 CSSValue*
 nsComputedDOMStyle::DoGetMarkerEnd()
 {
   nsROCSSPrimitiveValue* val = new nsROCSSPrimitiveValue;
 
   const nsStyleSVG* svg = StyleSVG();
 
   if (svg->mMarkerEnd)
-    val->SetURI(svg->mMarkerEnd);
+    val->SetURI(svg->mMarkerEnd->mURI);
   else
     val->SetIdent(eCSSKeyword_none);
 
   return val;
 }
 
 CSSValue*
 nsComputedDOMStyle::DoGetMarkerMid()
 {
   nsROCSSPrimitiveValue* val = new nsROCSSPrimitiveValue;
 
   const nsStyleSVG* svg = StyleSVG();
 
   if (svg->mMarkerMid)
-    val->SetURI(svg->mMarkerMid);
+    val->SetURI(svg->mMarkerMid->mURI);
   else
     val->SetIdent(eCSSKeyword_none);
 
   return val;
 }
 
 CSSValue*
 nsComputedDOMStyle::DoGetMarkerStart()
 {
   nsROCSSPrimitiveValue* val = new nsROCSSPrimitiveValue;
 
   const nsStyleSVG* svg = StyleSVG();
 
   if (svg->mMarkerStart)
-    val->SetURI(svg->mMarkerStart);
+    val->SetURI(svg->mMarkerStart->mURI);
   else
     val->SetIdent(eCSSKeyword_none);
 
   return val;
 }
 
 CSSValue*
 nsComputedDOMStyle::DoGetStrokeDasharray()
@@ -4472,47 +4472,47 @@ nsComputedDOMStyle::DoGetStopColor()
 CSSValue*
 nsComputedDOMStyle::DoGetClipPath()
 {
   nsROCSSPrimitiveValue* val = new nsROCSSPrimitiveValue;
 
   const nsStyleSVGReset* svg = StyleSVGReset();
 
   if (svg->mClipPath)
-    val->SetURI(svg->mClipPath);
+    val->SetURI(svg->mClipPath->mURI);
   else
     val->SetIdent(eCSSKeyword_none);
 
   return val;
 }
 
 CSSValue*
 nsComputedDOMStyle::DoGetFilter()
 {
   nsROCSSPrimitiveValue* val = new nsROCSSPrimitiveValue;
 
   const nsStyleSVGReset* svg = StyleSVGReset();
 
   if (svg->mFilter)
-    val->SetURI(svg->mFilter);
+    val->SetURI(svg->mFilter->mURI);
   else
     val->SetIdent(eCSSKeyword_none);
 
   return val;
 }
 
 CSSValue*
 nsComputedDOMStyle::DoGetMask()
 {
   nsROCSSPrimitiveValue* val = new nsROCSSPrimitiveValue;
 
   const nsStyleSVGReset* svg = StyleSVGReset();
 
   if (svg->mMask)
-    val->SetURI(svg->mMask);
+    val->SetURI(svg->mMask->mURI);
   else
     val->SetIdent(eCSSKeyword_none);
 
   return val;
 }
 
 CSSValue*
 nsComputedDOMStyle::DoGetMaskType()
diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -7319,18 +7319,18 @@ SetSVGPaint(const nsCSSValue& aValue, co
                       color, aCanStoreInRuleTree)) {
     aResult.SetType(eStyleSVGPaintType_Color);
     aResult.mPaint.mColor = color;
   } else if (aValue.GetUnit() == eCSSUnit_Pair) {
     const nsCSSValuePair& pair = aValue.GetPairValue();
 
     if (pair.mXValue.GetUnit() == eCSSUnit_URL) {
       aResult.SetType(eStyleSVGPaintType_Server);
-      aResult.mPaint.mPaintServer = pair.mXValue.GetURLValue();
-      NS_IF_ADDREF(aResult.mPaint.mPaintServer);
+      aResult.mPaint.mPaintServer = pair.mXValue.GetURLStructValue();
+      aResult.mPaint.mPaintServer->AddRef();
     } else if (pair.mXValue.GetUnit() == eCSSUnit_Enumerated) {
 
       switch (pair.mXValue.GetIntValue()) {
       case NS_COLOR_OBJECTFILL:
         aResult.SetType(eStyleSVGPaintType_ObjectFill);
         break;
       case NS_COLOR_OBJECTSTROKE:
         aResult.SetType(eStyleSVGPaintType_ObjectStroke);
@@ -7449,41 +7449,41 @@ nsRuleNode::ComputeSVGData(void* aStartS
   SetDiscrete(*aRuleData->ValueForImageRendering(),
               svg->mImageRendering, canStoreInRuleTree,
               SETDSC_ENUMERATED, parentSVG->mImageRendering,
               NS_STYLE_IMAGE_RENDERING_AUTO, 0, 0, 0, 0);
 
   // marker-end: url, none, inherit
   const nsCSSValue* markerEndValue = aRuleData->ValueForMarkerEnd();
   if (eCSSUnit_URL == markerEndValue->GetUnit()) {
-    svg->mMarkerEnd = markerEndValue->GetURLValue();
+    svg->mMarkerEnd = markerEndValue->GetURLStructValue();
   } else if (eCSSUnit_None == markerEndValue->GetUnit() ||
              eCSSUnit_Initial == markerEndValue->GetUnit()) {
     svg->mMarkerEnd = nullptr;
   } else if (eCSSUnit_Inherit == markerEndValue->GetUnit()) {
     canStoreInRuleTree = false;
     svg->mMarkerEnd = parentSVG->mMarkerEnd;
   }
 
   // marker-mid: url, none, inherit
   const nsCSSValue* markerMidValue = aRuleData->ValueForMarkerMid();
   if (eCSSUnit_URL == markerMidValue->GetUnit()) {
-    svg->mMarkerMid = markerMidValue->GetURLValue();
+    svg->mMarkerMid = markerMidValue->GetURLStructValue();
   } else if (eCSSUnit_None == markerMidValue->GetUnit() ||
              eCSSUnit_Initial == markerMidValue->GetUnit()) {
     svg->mMarkerMid = nullptr;
   } else if (eCSSUnit_Inherit == markerMidValue->GetUnit()) {
     canStoreInRuleTree = false;
     svg->mMarkerMid = parentSVG->mMarkerMid;
   }
 
   // marker-start: url, none, inherit
   const nsCSSValue* markerStartValue = aRuleData->ValueForMarkerStart();
   if (eCSSUnit_URL == markerStartValue->GetUnit()) {
-    svg->mMarkerStart = markerStartValue->GetURLValue();
+    svg->mMarkerStart = markerStartValue->GetURLStructValue();
   } else if (eCSSUnit_None == markerStartValue->GetUnit() ||
              eCSSUnit_Initial == markerStartValue->GetUnit()) {
     svg->mMarkerStart = nullptr;
   } else if (eCSSUnit_Inherit == markerStartValue->GetUnit()) {
     canStoreInRuleTree = false;
     svg->mMarkerStart = parentSVG->mMarkerStart;
   }
 
@@ -7716,17 +7716,17 @@ nsRuleNode::ComputeSVGResetData(void* aS
     SetColor(*lightingColorValue, parentSVGReset->mLightingColor,
              mPresContext, aContext, svgReset->mLightingColor,
              canStoreInRuleTree);
   }
 
   // clip-path: url, none, inherit
   const nsCSSValue* clipPathValue = aRuleData->ValueForClipPath();
   if (eCSSUnit_URL == clipPathValue->GetUnit()) {
-    svgReset->mClipPath = clipPathValue->GetURLValue();
+    svgReset->mClipPath = clipPathValue->GetURLStructValue();
   } else if (eCSSUnit_None == clipPathValue->GetUnit() ||
              eCSSUnit_Initial == clipPathValue->GetUnit()) {
     svgReset->mClipPath = nullptr;
   } else if (eCSSUnit_Inherit == clipPathValue->GetUnit()) {
     canStoreInRuleTree = false;
     svgReset->mClipPath = parentSVGReset->mClipPath;
   }
 
@@ -7752,29 +7752,29 @@ nsRuleNode::ComputeSVGResetData(void* aS
               svgReset->mVectorEffect,
               canStoreInRuleTree, SETDSC_ENUMERATED,
               parentSVGReset->mVectorEffect,
               NS_STYLE_VECTOR_EFFECT_NONE, 0, 0, 0, 0);
 
   // filter: url, none, inherit
   const nsCSSValue* filterValue = aRuleData->ValueForFilter();
   if (eCSSUnit_URL == filterValue->GetUnit()) {
-    svgReset->mFilter = filterValue->GetURLValue();
+    svgReset->mFilter = filterValue->GetURLStructValue();
   } else if (eCSSUnit_None == filterValue->GetUnit() ||
              eCSSUnit_Initial == filterValue->GetUnit()) {
     svgReset->mFilter = nullptr;
   } else if (eCSSUnit_Inherit == filterValue->GetUnit()) {
     canStoreInRuleTree = false;
     svgReset->mFilter = parentSVGReset->mFilter;
   }
 
   // mask: url, none, inherit
   const nsCSSValue* maskValue = aRuleData->ValueForMask();
   if (eCSSUnit_URL == maskValue->GetUnit()) {
-    svgReset->mMask = maskValue->GetURLValue();
+    svgReset->mMask = maskValue->GetURLStructValue();
   } else if (eCSSUnit_None == maskValue->GetUnit() ||
              eCSSUnit_Initial == maskValue->GetUnit()) {
     svgReset->mMask = nullptr;
   } else if (eCSSUnit_Inherit == maskValue->GetUnit()) {
     canStoreInRuleTree = false;
     svgReset->mMask = parentSVGReset->mMask;
   }
 
diff --git a/layout/style/nsStyleStruct.cpp b/layout/style/nsStyleStruct.cpp
--- a/layout/style/nsStyleStruct.cpp
+++ b/layout/style/nsStyleStruct.cpp
@@ -1050,17 +1050,17 @@ nsChangeHint nsStyleSVGReset::CalcDiffer
 
   return hint;
 }
 
 // nsStyleSVGPaint implementation
 nsStyleSVGPaint::~nsStyleSVGPaint()
 {
   if (mType == eStyleSVGPaintType_Server) {
-    NS_IF_RELEASE(mPaint.mPaintServer);
+    mPaint.mPaintServer->Release();
   }
 }
 
 void
 nsStyleSVGPaint::SetType(nsStyleSVGPaintType aType)
 {
   if (mType == eStyleSVGPaintType_Server) {
     this->~nsStyleSVGPaint();
@@ -1074,17 +1074,17 @@ nsStyleSVGPaint& nsStyleSVGPaint::operat
   if (this == &aOther)
     return *this;
 
   SetType(aOther.mType);
 
   mFallbackColor = aOther.mFallbackColor;
   if (mType == eStyleSVGPaintType_Server) {
     mPaint.mPaintServer = aOther.mPaint.mPaintServer;
-    NS_IF_ADDREF(mPaint.mPaintServer);
+    mPaint.mPaintServer->AddRef();
   } else {
     mPaint.mColor = aOther.mPaint.mColor;
   }
   return *this;
 }
 
 bool nsStyleSVGPaint::operator==(const nsStyleSVGPaint& aOther) const
 {
diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -26,17 +26,16 @@
 #include "nsCOMArray.h"
 #include "nsTArray.h"
 #include "nsIAtom.h"
 #include "nsCSSValue.h"
 #include "imgRequestProxy.h"
 #include <algorithm>
 
 class nsIFrame;
-class nsIURI;
 class imgIContainer;
 
 // Includes nsStyleStructID.
 #include "nsStyleStructFwd.h"
 
 // Bits for each struct.
 // NS_STYLE_INHERIT_BIT defined in nsStyleStructFwd.h
 #define NS_STYLE_INHERIT_MASK             0x007fffff
@@ -2172,17 +2171,17 @@ enum nsStyleSVGOpacitySource {
   eStyleSVGOpacitySource_ObjectFillOpacity,
   eStyleSVGOpacitySource_ObjectStrokeOpacity
 };
 
 struct nsStyleSVGPaint
 {
   union {
     nscolor mColor;
-    nsIURI *mPaintServer;
+    nsCSSValue::URL *mPaintServer;
   } mPaint;
   nsStyleSVGPaintType mType;
   nscolor mFallbackColor;
 
   nsStyleSVGPaint() : mType(nsStyleSVGPaintType(0)) { mPaint.mPaintServer = nullptr; }
   ~nsStyleSVGPaint();
   void SetType(nsStyleSVGPaintType aType);
   nsStyleSVGPaint& operator=(const nsStyleSVGPaint& aOther);
@@ -2210,19 +2209,19 @@ struct nsStyleSVG {
   static nsChangeHint MaxDifference() {
     return NS_CombineHint(NS_CombineHint(nsChangeHint_UpdateEffects,
              NS_CombineHint(nsChangeHint_NeedReflow, nsChangeHint_NeedDirtyReflow)), // XXX remove nsChangeHint_NeedDirtyReflow: bug 876085
                                          nsChangeHint_RepaintFrame);
   }
 
   nsStyleSVGPaint  mFill;             // [inherited]
   nsStyleSVGPaint  mStroke;           // [inherited]
-  nsCOMPtr<nsIURI> mMarkerEnd;        // [inherited]
-  nsCOMPtr<nsIURI> mMarkerMid;        // [inherited]
-  nsCOMPtr<nsIURI> mMarkerStart;      // [inherited]
+  nsRefPtr<nsCSSValue::URL> mMarkerEnd; // [inherited]
+  nsRefPtr<nsCSSValue::URL> mMarkerMid; // [inherited]
+  nsRefPtr<nsCSSValue::URL> mMarkerStart; // [inherited]
   nsStyleCoord    *mStrokeDasharray;  // [inherited] coord, percent, factor
 
   nsStyleCoord     mStrokeDashoffset; // [inherited] coord, percent, factor
   nsStyleCoord     mStrokeWidth;      // [inherited] coord, percent, factor
 
   float            mFillOpacity;      // [inherited]
   float            mStrokeMiterlimit; // [inherited]
   float            mStrokeOpacity;    // [inherited]
@@ -2265,19 +2264,19 @@ struct nsStyleSVGReset {
     aContext->FreeToShell(sizeof(nsStyleSVGReset), this);
   }
 
   nsChangeHint CalcDifference(const nsStyleSVGReset& aOther) const;
   static nsChangeHint MaxDifference() {
     return NS_CombineHint(nsChangeHint_UpdateEffects, NS_STYLE_HINT_REFLOW);
   }
 
-  nsCOMPtr<nsIURI> mClipPath;         // [reset]
-  nsCOMPtr<nsIURI> mFilter;           // [reset]
-  nsCOMPtr<nsIURI> mMask;             // [reset]
+  nsRefPtr<nsCSSValue::URL> mClipPath;// [reset]
+  nsRefPtr<nsCSSValue::URL> mFilter;  // [reset]
+  nsRefPtr<nsCSSValue::URL> mMask;    // [reset]
   nscolor          mStopColor;        // [reset]
   nscolor          mFloodColor;       // [reset]
   nscolor          mLightingColor;    // [reset]
 
   float            mStopOpacity;      // [reset]
   float            mFloodOpacity;     // [reset]
 
   uint8_t          mDominantBaseline; // [reset] see nsStyleConsts.h
diff --git a/layout/svg/nsSVGEffects.cpp b/layout/svg/nsSVGEffects.cpp
--- a/layout/svg/nsSVGEffects.cpp
+++ b/layout/svg/nsSVGEffects.cpp
@@ -68,27 +68,29 @@ nsSVGRenderingObserver::StopListening()
 
 #ifdef _MSC_VER
 // Disable "warning C4355: 'this' : used in base member initializer list".
 // We can ignore that warning because we know that mElement's constructor 
 // doesn't dereference the pointer passed to it.
 #pragma warning(push)
 #pragma warning(disable:4355)
 #endif
-nsSVGIDRenderingObserver::nsSVGIDRenderingObserver(nsIURI *aURI,
+nsSVGIDRenderingObserver::nsSVGIDRenderingObserver(nsCSSValue::URL *aURI,
                                                    nsIFrame *aFrame,
                                                    bool aReferenceImage)
   : mElement(this), mFrame(aFrame),
     mFramePresShell(aFrame->PresContext()->PresShell())
 #ifdef _MSC_VER
 #pragma warning(pop)
 #endif
 {
   // Start watching the target element
-  mElement.Reset(aFrame->GetContent(), aURI, true, aReferenceImage);
+  // FIXME: Should pass more information from nsCSSValue::URL.
+  mElement.Reset(aFrame->GetContent(), aURI ? aURI->mURI : nullptr,
+                 true, aReferenceImage);
   StartListening();
 }
 
 nsSVGIDRenderingObserver::~nsSVGIDRenderingObserver()
 {
   StopListening();
 }
 
@@ -340,35 +342,36 @@ nsSVGPaintingProperty::DoUpdate()
     nsSVGEffects::InvalidateRenderingObservers(mFrame);
     mFrame->InvalidateFrameSubtree();
   } else {
     InvalidateAllContinuations(mFrame);
   }
 }
 
 static nsSVGRenderingObserver *
-CreateFilterProperty(nsIURI *aURI, nsIFrame *aFrame, bool aReferenceImage)
+CreateFilterProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame, bool aReferenceImage)
 { return new nsSVGFilterProperty(aURI, aFrame, aReferenceImage); }
 
 static nsSVGRenderingObserver *
-CreateMarkerProperty(nsIURI *aURI, nsIFrame *aFrame, bool aReferenceImage)
+CreateMarkerProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame, bool aReferenceImage)
 { return new nsSVGMarkerProperty(aURI, aFrame, aReferenceImage); }
 
 static nsSVGRenderingObserver *
-CreateTextPathProperty(nsIURI *aURI, nsIFrame *aFrame, bool aReferenceImage)
+CreateTextPathProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame, bool aReferenceImage)
 { return new nsSVGTextPathProperty(aURI, aFrame, aReferenceImage); }
 
 static nsSVGRenderingObserver *
-CreatePaintingProperty(nsIURI *aURI, nsIFrame *aFrame, bool aReferenceImage)
+CreatePaintingProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame, bool aReferenceImage)
 { return new nsSVGPaintingProperty(aURI, aFrame, aReferenceImage); }
 
 static nsSVGRenderingObserver *
-GetEffectProperty(nsIURI *aURI, nsIFrame *aFrame,
+GetEffectProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame,
                   const FramePropertyDescriptor *aProperty,
-                  nsSVGRenderingObserver * (* aCreate)(nsIURI *, nsIFrame *, bool))
+                  nsSVGRenderingObserver * (* aCreate)(nsCSSValue::URL *,
+                                                       nsIFrame *, bool))
 {
   if (!aURI)
     return nullptr;
 
   FrameProperties props = aFrame->Properties();
   nsSVGRenderingObserver *prop =
     static_cast<nsSVGRenderingObserver*>(props.Get(aProperty));
   if (prop)
@@ -377,36 +380,36 @@ GetEffectProperty(nsIURI *aURI, nsIFrame
   if (!prop)
     return nullptr;
   NS_ADDREF(prop);
   props.Set(aProperty, static_cast<nsISupports*>(prop));
   return prop;
 }
 
 nsSVGMarkerProperty *
-nsSVGEffects::GetMarkerProperty(nsIURI *aURI, nsIFrame *aFrame,
+nsSVGEffects::GetMarkerProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame,
                                 const FramePropertyDescriptor *aProp)
 {
   NS_ABORT_IF_FALSE(aFrame->GetType() == nsGkAtoms::svgPathGeometryFrame &&
                       static_cast<nsSVGPathGeometryElement*>(aFrame->GetContent())->IsMarkable(),
                     "Bad frame");
   return static_cast<nsSVGMarkerProperty*>(
           GetEffectProperty(aURI, aFrame, aProp, CreateMarkerProperty));
 }
 
 nsSVGTextPathProperty *
-nsSVGEffects::GetTextPathProperty(nsIURI *aURI, nsIFrame *aFrame,
+nsSVGEffects::GetTextPathProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame,
                                   const FramePropertyDescriptor *aProp)
 {
   return static_cast<nsSVGTextPathProperty*>(
           GetEffectProperty(aURI, aFrame, aProp, CreateTextPathProperty));
 }
 
 nsSVGPaintingProperty *
-nsSVGEffects::GetPaintingProperty(nsIURI *aURI, nsIFrame *aFrame,
+nsSVGEffects::GetPaintingProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame,
                                   const FramePropertyDescriptor *aProp)
 {
   return static_cast<nsSVGPaintingProperty*>(
           GetEffectProperty(aURI, aFrame, aProp, CreatePaintingProperty));
 }
 
 static nsSVGRenderingObserver *
 GetEffectPropertyForURI(nsIURI *aURI, nsIFrame *aFrame,
diff --git a/layout/svg/nsSVGEffects.h b/layout/svg/nsSVGEffects.h
--- a/layout/svg/nsSVGEffects.h
+++ b/layout/svg/nsSVGEffects.h
@@ -17,16 +17,17 @@
 #include "nsISupportsBase.h"
 #include "nsISupportsImpl.h"
 #include "nsReferencedElement.h"
 #include "nsStubMutationObserver.h"
 #include "nsSVGUtils.h"
 #include "nsTHashtable.h"
 #include "nsTraceRefcnt.h"
 #include "nsURIHashKey.h"
+#include "nsCSSValue.h"
 
 class nsIAtom;
 class nsIPresShell;
 class nsIURI;
 class nsSVGClipPathFrame;
 class nsSVGPaintServerFrame;
 class nsSVGFilterFrame;
 class nsSVGMaskFrame;
@@ -105,18 +106,18 @@ protected:
  * 
  * When a frame references a supporting resource, we create a property
  * object derived from nsSVGIDRenderingObserver to manage the relationship. The
  * property object is attached to the referencing frame.
  */
 class nsSVGIDRenderingObserver : public nsSVGRenderingObserver {
 public:
   typedef mozilla::dom::Element Element;
-  nsSVGIDRenderingObserver(nsIURI* aURI, nsIFrame *aFrame,
-                         bool aReferenceImage);
+  nsSVGIDRenderingObserver(nsCSSValue::URL* aURI, nsIFrame *aFrame,
+                           bool aReferenceImage);
   virtual ~nsSVGIDRenderingObserver();
 
 protected:
   Element* GetTarget() MOZ_OVERRIDE { return mElement.get(); }
 
   // This is called when the referenced resource changes.
   virtual void DoUpdate() MOZ_OVERRIDE;
 
@@ -148,17 +149,17 @@ protected:
   // we test the presshell to see if it's destroying itself. If it is,
   // then the frame pointer is not valid and we know the frame has gone away.
   nsIPresShell *mFramePresShell;
 };
 
 class nsSVGFilterProperty :
   public nsSVGIDRenderingObserver, public nsISVGFilterProperty {
 public:
-  nsSVGFilterProperty(nsIURI *aURI, nsIFrame *aFilteredFrame,
+  nsSVGFilterProperty(nsCSSValue::URL *aURI, nsIFrame *aFilteredFrame,
                       bool aReferenceImage)
     : nsSVGIDRenderingObserver(aURI, aFilteredFrame, aReferenceImage) {}
 
   /**
    * @return the filter frame, or null if there is no filter frame
    */
   nsSVGFilterFrame *GetFilterFrame();
 
@@ -170,26 +171,28 @@ public:
 
 private:
   // nsSVGRenderingObserver
   virtual void DoUpdate() MOZ_OVERRIDE;
 };
 
 class nsSVGMarkerProperty : public nsSVGIDRenderingObserver {
 public:
-  nsSVGMarkerProperty(nsIURI *aURI, nsIFrame *aFrame, bool aReferenceImage)
+  nsSVGMarkerProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame,
+                      bool aReferenceImage)
     : nsSVGIDRenderingObserver(aURI, aFrame, aReferenceImage) {}
 
 protected:
   virtual void DoUpdate() MOZ_OVERRIDE;
 };
 
 class nsSVGTextPathProperty : public nsSVGIDRenderingObserver {
 public:
-  nsSVGTextPathProperty(nsIURI *aURI, nsIFrame *aFrame, bool aReferenceImage)
+  nsSVGTextPathProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame,
+                        bool aReferenceImage)
     : nsSVGIDRenderingObserver(aURI, aFrame, aReferenceImage)
     , mValid(true) {}
 
   virtual bool ObservesReflow() MOZ_OVERRIDE { return false; }
 
 protected:
   virtual void DoUpdate() MOZ_OVERRIDE;
 
@@ -199,17 +202,18 @@ private:
    */
   bool TargetIsValid();
 
   bool mValid;
 };
  
 class nsSVGPaintingProperty : public nsSVGIDRenderingObserver {
 public:
-  nsSVGPaintingProperty(nsIURI *aURI, nsIFrame *aFrame, bool aReferenceImage)
+  nsSVGPaintingProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame,
+                        bool aReferenceImage)
     : nsSVGIDRenderingObserver(aURI, aFrame, aReferenceImage) {}
 
 protected:
   virtual void DoUpdate() MOZ_OVERRIDE;
 };
 
 /**
  * A manager for one-shot nsSVGRenderingObserver tracking.
@@ -413,29 +417,29 @@ public:
    */
   static void InvalidateDirectRenderingObservers(Element *aElement, uint32_t aFlags = 0);
   static void InvalidateDirectRenderingObservers(nsIFrame *aFrame, uint32_t aFlags = 0);
 
   /**
    * Get an nsSVGMarkerProperty for the frame, creating a fresh one if necessary
    */
   static nsSVGMarkerProperty *
-  GetMarkerProperty(nsIURI *aURI, nsIFrame *aFrame,
+  GetMarkerProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame,
                     const FramePropertyDescriptor *aProperty);
   /**
    * Get an nsSVGTextPathProperty for the frame, creating a fresh one if necessary
    */
   static nsSVGTextPathProperty *
-  GetTextPathProperty(nsIURI *aURI, nsIFrame *aFrame,
+  GetTextPathProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame,
                       const FramePropertyDescriptor *aProperty);
   /**
    * Get an nsSVGPaintingProperty for the frame, creating a fresh one if necessary
    */
   static nsSVGPaintingProperty *
-  GetPaintingProperty(nsIURI *aURI, nsIFrame *aFrame,
+  GetPaintingProperty(nsCSSValue::URL *aURI, nsIFrame *aFrame,
                       const FramePropertyDescriptor *aProperty);
   /**
    * Get an nsSVGPaintingProperty for the frame for that URI, creating a fresh
    * one if necessary
    */
   static nsSVGPaintingProperty *
   GetPaintingPropertyForURI(nsIURI *aURI, nsIFrame *aFrame,
                             const FramePropertyDescriptor *aProp);
diff --git a/layout/svg/nsSVGGradientFrame.cpp b/layout/svg/nsSVGGradientFrame.cpp
--- a/layout/svg/nsSVGGradientFrame.cpp
+++ b/layout/svg/nsSVGGradientFrame.cpp
@@ -324,21 +324,27 @@ nsSVGGradientFrame::GetReferencedGradien
     if (href.IsEmpty()) {
       mNoHRefURI = true;
       return nullptr; // no URL
     }
 
     // Convert href to an nsIURI
     nsCOMPtr<nsIURI> targetURI;
     nsCOMPtr<nsIURI> base = mContent->GetBaseURI();
+    nsIDocument *doc = mContent->GetOwnerDoc(); // REVIEW: was GetCurrentDoc
     nsContentUtils::NewURIWithDocumentCharset(getter_AddRefs(targetURI), href,
-                                              mContent->GetCurrentDoc(), base);
+                                              doc, base);
+    nsRefPtr<nsCSSValue::URL> url =
+      new nsCSSValue::URL(targetURI,
+                          nsCSSValue::BufferFromString(href),
+                          doc->GetDocumentURI(),
+                          mContent->NodePrincipal());
 
     property =
-      nsSVGEffects::GetPaintingProperty(targetURI, this, nsSVGEffects::HrefProperty());
+      nsSVGEffects::GetPaintingProperty(url, this, nsSVGEffects::HrefProperty());
     if (!property)
       return nullptr;
   }
 
   nsIFrame *result = property->GetReferencedFrame();
   if (!result)
     return nullptr;
 
diff --git a/layout/svg/nsSVGPatternFrame.cpp b/layout/svg/nsSVGPatternFrame.cpp
--- a/layout/svg/nsSVGPatternFrame.cpp
+++ b/layout/svg/nsSVGPatternFrame.cpp
@@ -529,21 +529,27 @@ nsSVGPatternFrame::GetReferencedPattern(
     if (href.IsEmpty()) {
       mNoHRefURI = true;
       return nullptr; // no URL
     }
 
     // Convert href to an nsIURI
     nsCOMPtr<nsIURI> targetURI;
     nsCOMPtr<nsIURI> base = mContent->GetBaseURI();
+    nsIDocument *doc = mContent->GetOwnerDoc(); // REVIEW: was GetCurrentDoc
     nsContentUtils::NewURIWithDocumentCharset(getter_AddRefs(targetURI), href,
-                                              mContent->GetCurrentDoc(), base);
+                                              doc, base);
+    nsRefPtr<nsCSSValue::URL> url =
+      new nsCSSValue::URL(targetURI,
+                          nsCSSValue::BufferFromString(href),
+                          doc->GetDocumentURI(),
+                          mContent->NodePrincipal());
 
     property =
-      nsSVGEffects::GetPaintingProperty(targetURI, this, nsSVGEffects::HrefProperty());
+      nsSVGEffects::GetPaintingProperty(url, this, nsSVGEffects::HrefProperty());
     if (!property)
       return nullptr;
   }
 
   nsIFrame *result = property->GetReferencedFrame();
   if (!result)
     return nullptr;
 
diff --git a/layout/svg/nsSVGTextPathFrame.cpp b/layout/svg/nsSVGTextPathFrame.cpp
--- a/layout/svg/nsSVGTextPathFrame.cpp
+++ b/layout/svg/nsSVGTextPathFrame.cpp
@@ -92,21 +92,27 @@ nsSVGTextPathFrame::GetPathFrame()
     nsAutoString href;
     tp->mStringAttributes[SVGTextPathElement::HREF].GetAnimValue(href, tp);
     if (href.IsEmpty()) {
       return nullptr; // no URL
     }
 
     nsCOMPtr<nsIURI> targetURI;
     nsCOMPtr<nsIURI> base = mContent->GetBaseURI();
+    nsIDocument *doc = mContent->GetOwnerDoc(); // REVIEW: was GetCurrentDoc
     nsContentUtils::NewURIWithDocumentCharset(getter_AddRefs(targetURI), href,
-                                              mContent->GetCurrentDoc(), base);
+                                              doc, base);
+    nsRefPtr<nsCSSValue::URL> url =
+      new nsCSSValue::URL(targetURI,
+                          nsCSSValue::BufferFromString(href),
+                          doc->GetDocumentURI(),
+                          mContent->NodePrincipal());
 
     property =
-      nsSVGEffects::GetTextPathProperty(targetURI, this, nsSVGEffects::HrefProperty());
+      nsSVGEffects::GetTextPathProperty(url, this, nsSVGEffects::HrefProperty());
     if (!property)
       return nullptr;
   }
 
   nsIFrame *frame = property->GetReferencedFrame(nsGkAtoms::svgPathGeometryFrame, nullptr);
   return frame && frame->GetContent()->Tag() == nsGkAtoms::path ? frame : nullptr;
 }
 
