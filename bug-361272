Use gtk_window_present_with_time rather than avoiding gtk_window_present for things inside windows.  b=361272

diff -r d992283fce2c widget/public/nsGUIEvent.h
--- a/widget/public/nsGUIEvent.h	Mon Jan 22 20:08:45 2007 -0800
+++ b/widget/public/nsGUIEvent.h	Tue Jan 23 10:42:29 2007 -0800
@@ -384,8 +384,7 @@ public:
   PRUint32    message;
   // In widget relative coordinates, not modified by layout code.
   nsPoint     refPoint;
-  // Elapsed time, in milliseconds, from the time the system was
-  // started to the time the message was created
+  // Platform-specific time associated with the event.
   PRUint32    time;
   // Flags to hold event flow stage and capture/bubble cancellation
   // status. This is used also to indicate whether the event is trusted.
diff -r d992283fce2c widget/src/gtk2/nsCommonWidget.cpp
--- a/widget/src/gtk2/nsCommonWidget.cpp	Mon Jan 22 20:08:45 2007 -0800
+++ b/widget/src/gtk2/nsCommonWidget.cpp	Tue Jan 23 11:13:33 2007 -0800
@@ -39,6 +39,8 @@
 #include "nsCommonWidget.h"
 #include "nsGtkKeyUtils.h"
 
+static PRUint32 gCurrentEventTime = 0;
+
 nsCommonWidget::nsCommonWidget()
 {
     mIsTopLevel       = PR_FALSE;
@@ -90,6 +92,8 @@ nsCommonWidget::InitButtonEvent(nsMouseE
     aEvent.isMeta    = (aGdkEvent->state & GDK_MOD4_MASK)
         ? PR_TRUE : PR_FALSE;
 
+    aEvent.time = aGdkEvent->time;
+
     switch (aGdkEvent->type) {
     case GDK_2BUTTON_PRESS:
         aEvent.clickCount = 2;
@@ -138,6 +142,7 @@ nsCommonWidget::InitMouseScrollEvent(nsM
     aEvent.isMeta    = (aGdkEvent->state & GDK_MOD4_MASK)
         ? PR_TRUE : PR_FALSE;
     
+    aEvent.time = aGdkEvent->time;
 }
 
 void
@@ -152,6 +157,7 @@ nsCommonWidget::InitKeyEvent(nsKeyEvent 
         ? PR_TRUE : PR_FALSE;
     aEvent.isMeta    = (aGdkEvent->state & GDK_MOD4_MASK)
         ? PR_TRUE : PR_FALSE;
+
     aEvent.time      = aGdkEvent->time;
 }
 
@@ -211,6 +217,9 @@ nsCommonWidget::DispatchEvent(nsGUIEvent
     // hold a widget reference while we dispatch this event
     NS_ADDREF(aEvent->widget);
 
+    NS_ASSERTION(gCurrentEventTime == 0, "yikes, recursive event dispatch");
+    gCurrentEventTime = aEvent->time;
+
     // send it to the standard callback
     if (mEventCallback)
         aStatus = (* mEventCallback)(aEvent);
@@ -218,6 +227,8 @@ nsCommonWidget::DispatchEvent(nsGUIEvent
     // dispatch to event listener if event was not consumed
     if ((aStatus != nsEventStatus_eIgnore) && mEventListener)
         aStatus = mEventListener->ProcessEvent(*aEvent);
+
+    gCurrentEventTime = 0;
 
     NS_IF_RELEASE(aEvent->widget);
 
@@ -462,3 +473,9 @@ nsCommonWidget::AreBoundsSane(void)
 
     return PR_FALSE;
 }
+
+/* static */ PRUint32
+nsCommonWidget::GetCurrentEventTime()
+{
+    return gCurrentEventTime;
+}
diff -r d992283fce2c widget/src/gtk2/nsCommonWidget.h
--- a/widget/src/gtk2/nsCommonWidget.h	Mon Jan 22 20:08:45 2007 -0800
+++ b/widget/src/gtk2/nsCommonWidget.h	Tue Jan 23 11:11:59 2007 -0800
@@ -129,6 +129,12 @@ public:
     // called to check and see if a widget's dimensions are sane
     PRBool AreBoundsSane(void);
 
+    /**
+     * Return the event's time if we are currently dispatching an event
+     * that has a time associated with it, otherwise return 0.
+     */
+    static PRUint32 GetCurrentEventTime();
+
 protected:
     nsCOMPtr<nsIWidget> mParent;
     // Is this a toplevel window?
diff -r d992283fce2c widget/src/gtk2/nsWindow.cpp
--- a/widget/src/gtk2/nsWindow.cpp	Mon Jan 22 20:08:45 2007 -0800
+++ b/widget/src/gtk2/nsWindow.cpp	Tue Jan 23 11:30:47 2007 -0800
@@ -278,12 +278,17 @@ typedef GdkCursor*  (*_gdk_cursor_new_fr
                                                       gint y);
 static _gdk_display_get_default_fn    _gdk_display_get_default;
 static _gdk_cursor_new_from_pixbuf_fn _gdk_cursor_new_from_pixbuf;
-static PRBool sPixbufCursorChecked;
 
 // needed for GetAttention calls
 // gdk_window_set_urgency_hint was added in 2.8
 typedef void (*_gdk_window_set_urgency_hint_fn)(GdkWindow *window,
                                                 gboolean urgency);
+static _gdk_window_set_urgency_hint_fn _gdk_window_set_urgency_hint = nsnull;
+
+// gtk_window_present_with_time was added in 2.8
+typedef void (*_gtk_window_present_with_time_fn)(GtkWindow *window,
+                                                 guint32    timestamp);
+static _gtk_window_present_with_time_fn _gtk_window_present_with_time = nsnull;
 
 #define kWindowPositionSlop 20
 
@@ -317,6 +322,20 @@ nsWindow::nsWindow()
 
         // It's OK if either of these fail, but it may not be one day.
         initialize_prefs();
+
+        PRLibrary* lib;
+        _gdk_cursor_new_from_pixbuf = (_gdk_cursor_new_from_pixbuf_fn)
+            PR_FindFunctionSymbolAndLibrary("gdk_cursor_new_from_pixbuf", &lib);
+        _gdk_display_get_default = (_gdk_display_get_default_fn)
+            PR_FindFunctionSymbolAndLibrary("gdk_display_get_default", &lib);
+
+        _gdk_window_set_urgency_hint = (_gdk_window_set_urgency_hint_fn)
+               PR_FindFunctionSymbolAndLibrary("gdk_window_set_urgency_hint", &lib);
+
+        _gtk_window_present_with_time = (_gtk_window_present_with_time_fn)
+               PR_FindFunctionSymbolAndLibrary("gtk_window_present_with_time", &lib);
+
+        // XXX Should we bother with PR_UnloadLibrary(lib) sometime?
     }
 
     if (mLastDragMotionWindow == this)
@@ -741,11 +760,15 @@ nsWindow::SetFocus(PRBool aRaise)
         // Set focus to the window
         if (gRaiseWindows && aRaise && toplevelWidget &&
             !GTK_WIDGET_HAS_FOCUS(toplevelWidget) &&
-            // If we're really a child of owningWindow
-            gdk_window_get_parent(mDrawingarea->clip_window) ==
-              owningWindow->mDrawingarea->inner_window &&
-            owningWindow->mIsShown && GTK_IS_WINDOW(owningWindow->mShell))
-          gtk_window_present(GTK_WINDOW(owningWindow->mShell));
+            owningWindow->mIsShown && GTK_IS_WINDOW(owningWindow->mShell)) {
+          PRUint32 time = nsCommonWidget::GetCurrentEventTime();
+          if (time && _gtk_window_present_with_time) {
+            _gtk_window_present_with_time(GTK_WINDOW(owningWindow->mShell),
+                                          time);
+          } else {
+            gtk_window_present(GTK_WINDOW(owningWindow->mShell));
+          }
+        }
         
         gtk_widget_grab_focus(owningWidget);
         owningWindow->mContainerBlockFocus = PR_FALSE;
@@ -938,14 +961,6 @@ nsWindow::SetCursor(imgIContainer* aCurs
         return window->SetCursor(aCursor, aHotspotX, aHotspotY);
     }
 
-    if (!sPixbufCursorChecked) {
-        PRLibrary* lib;
-        _gdk_cursor_new_from_pixbuf = (_gdk_cursor_new_from_pixbuf_fn)
-            PR_FindFunctionSymbolAndLibrary("gdk_cursor_new_from_pixbuf", &lib);
-        _gdk_display_get_default = (_gdk_display_get_default_fn)
-            PR_FindFunctionSymbolAndLibrary("gdk_display_get_default", &lib);
-        sPixbufCursorChecked = PR_TRUE;
-    }
     mCursor = nsCursor(-1);
 
     // Get first image frame
@@ -1801,6 +1816,8 @@ nsWindow::OnEnterNotifyEvent(GtkWidget *
     event.refPoint.x = nscoord(aEvent->x);
     event.refPoint.y = nscoord(aEvent->y);
 
+    event.time = aEvent->time;
+
     LOG(("OnEnterNotify: %p\n", (void *)this));
 
     nsEventStatus status;
@@ -1819,6 +1836,8 @@ nsWindow::OnLeaveNotifyEvent(GtkWidget *
     event.refPoint.x = nscoord(aEvent->x);
     event.refPoint.y = nscoord(aEvent->y);
 
+    event.time = aEvent->time;
+
     LOG(("OnLeaveNotify: %p\n", (void *)this));
 
     nsEventStatus status;
@@ -1833,6 +1852,8 @@ nsWindow::OnMotionNotifyEvent(GtkWidget 
     sIsDraggingOutOf = PR_FALSE;
 
     // see if we can compress this event
+    // XXXldb Why skip every other motion event when we have multiple,
+    // but not more than that?
     XEvent xevent;
     PRPackedBool synthEvent = PR_FALSE;
     while (XCheckWindowEvent(GDK_WINDOW_XDISPLAY(aEvent->window),
@@ -1858,6 +1879,8 @@ nsWindow::OnMotionNotifyEvent(GtkWidget 
             ? PR_TRUE : PR_FALSE;
         event.isAlt     = (xevent.xmotion.state & GDK_MOD1_MASK)
             ? PR_TRUE : PR_FALSE;
+
+        event.time = xevent.xmotion.time;
     }
     else {
         event.refPoint.x = nscoord(aEvent->x);
@@ -1869,6 +1892,8 @@ nsWindow::OnMotionNotifyEvent(GtkWidget 
             ? PR_TRUE : PR_FALSE;
         event.isAlt     = (aEvent->state & GDK_MOD1_MASK)
             ? PR_TRUE : PR_FALSE;
+
+        event.time = aEvent->time;
     }
 
     nsEventStatus status;
@@ -2399,6 +2424,7 @@ nsWindow::OnDragMotionEvent(GtkWidget *a
 
     event.refPoint.x = retx;
     event.refPoint.y = rety;
+    event.time = aTime;
 
     innerMostWidget->AddRef();
 
@@ -2515,6 +2541,7 @@ nsWindow::OnDragDropEvent(GtkWidget *aWi
 
     event.refPoint.x = retx;
     event.refPoint.y = rety;
+    event.time = aTime;
 
     nsEventStatus status;
     innerMostWidget->DispatchEvent(&event, status);
@@ -3571,15 +3598,8 @@ nsWindow::SetUrgencyHint(GtkWidget *top_
     if (!top_window)
         return;
 
-    // Try to get a pointer to gdk_window_set_urgency_hint
-    PRLibrary* lib;
-    _gdk_window_set_urgency_hint_fn _gdk_window_set_urgency_hint = nsnull;
-    _gdk_window_set_urgency_hint = (_gdk_window_set_urgency_hint_fn)
-           PR_FindFunctionSymbolAndLibrary("gdk_window_set_urgency_hint", &lib);
-
     if (_gdk_window_set_urgency_hint) {
         _gdk_window_set_urgency_hint(top_window->window, state);
-        PR_UnloadLibrary(lib);
     }
     else if (state) {
         gdk_window_show_unraised(top_window->window);
