From: L. David Baron <dbaron@dbaron.org>

Make the three CSS_PROP_INCLUDE_NOT_CSS properties much more like normal CSS properties, and (importantly) give them property IDs in the longhand range.  Replace CSS_PROP_INCLUDE_NOT_CSS with CSS_PROP_STUB_NOT_CSS for callers that need stubs.  (Bug 636039, patch 13)  r=bzbarsky

diff --git a/layout/style/nsCSSDataBlock.cpp b/layout/style/nsCSSDataBlock.cpp
--- a/layout/style/nsCSSDataBlock.cpp
+++ b/layout/style/nsCSSDataBlock.cpp
@@ -331,18 +331,20 @@ nsCSSExpandedDataBlock::~nsCSSExpandedDa
 }
 
 const size_t
 nsCSSExpandedDataBlock::kOffsetTable[] = {
     #define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_,        \
                      parsevariant_, kwtable_, stylestruct_, stylestructoffset_,\
                      animtype_)                                                \
         offsetof(nsCSSExpandedDataBlock, m##datastruct_.member_),
+    #define CSS_PROP_STUB_NOT_CSS size_t(-1),
     #include "nsCSSPropList.h"
     #undef CSS_PROP
+    #undef CSS_PROP_STUB_NOT_CSS
 };
 
 void
 nsCSSExpandedDataBlock::DoExpand(nsCSSCompressedDataBlock *aBlock,
                                  PRBool aImportant)
 {
     /*
      * Save needless copying and allocation by copying the memory
diff --git a/layout/style/nsCSSPropList.h b/layout/style/nsCSSPropList.h
--- a/layout/style/nsCSSPropList.h
+++ b/layout/style/nsCSSPropList.h
@@ -3252,57 +3252,63 @@ CSS_PROP_SVG(
     CSS_PROPERTY_PARSE_VALUE,
     SVG,
     mTextRendering,
     VARIANT_HK,
     kTextRenderingKTable,
     offsetof(nsStyleSVG, mTextRendering),
     eStyleAnimType_EnumU8)
 
-// Callers that want information on the properties that are in
-// the style structs but not in the nsCSS* structs should define
-// |CSS_PROP_INCLUDE_NOT_CSS|.  (Some of these are also in nsRuleData*,
-// and a distinction might be needed at some point.)
-// The first 3 parameters don't matter, but some compilers don't like
-// empty arguments to macros.
-#ifdef CSS_PROP_INCLUDE_NOT_CSS
+#ifndef CSS_PROP_LIST_EXCLUDE_INTERNAL
+// We have a few properties that are in style structs but are not stored
+// in style sheets (or nsCSS* structs).  Some fields in these property
+// definitions are bogus (e.g., they work for nsRuleData* offsets but
+// not nsCSS* offsets).  Callers that care about these bogus fields can
+// define CSS_PROP_STUB_NOT_CSS to define a replacement for these
+// entries.
+#ifdef CSS_PROP_STUB_NOT_CSS
+CSS_PROP_STUB_NOT_CSS
+CSS_PROP_STUB_NOT_CSS
+CSS_PROP_STUB_NOT_CSS
+#else
 CSS_PROP_VISIBILITY(
-    X,
-    X,
+    -x-lang,
+    _x_lang,
     Lang,
-    CSS_PROPERTY_PARSE_VALUE,
+    CSS_PROPERTY_PARSE_INACCESSIBLE,
     Display,
     mLang,
     0,
     nsnull,
     CSS_PROP_NO_OFFSET,
     eStyleAnimType_None)
 CSS_PROP_TABLE(
-    X,
-    X,
+    -x-cols,
+    _x_cols,
     Cols,
-    CSS_PROPERTY_PARSE_VALUE,
+    CSS_PROPERTY_PARSE_INACCESSIBLE,
     Table,
     mCols,
     0,
     nsnull,
     CSS_PROP_NO_OFFSET,
     eStyleAnimType_None)
 CSS_PROP_TABLE(
-    X,
-    X,
+    -x-span,
+    _x_span,
     Span,
-    CSS_PROPERTY_PARSE_VALUE,
+    CSS_PROPERTY_PARSE_INACCESSIBLE,
     Table,
     mSpan,
     0,
     nsnull,
     CSS_PROP_NO_OFFSET,
     eStyleAnimType_None)
-#endif /* defined(CSS_PROP_INCLUDE_NOT_CSS) */
+#endif /* !defined(CSS_PROP_STUB_NOT_CSS) */
+#endif /* !defined(CSS_PROP_EXCLUDE_INTERNAL) */
 
 #ifdef USED_CSS_PROP
 
 #undef USED_CSS_PROP
 #undef CSS_PROP_FONT
 #undef CSS_PROP_COLOR
 #undef CSS_PROP_BACKGROUND
 #undef CSS_PROP_LIST
diff --git a/layout/style/nsRuleData.h b/layout/style/nsRuleData.h
--- a/layout/style/nsRuleData.h
+++ b/layout/style/nsRuleData.h
@@ -120,17 +120,16 @@ struct nsRuleData
    * Getters like ValueFor(aProperty), but for each property by name
    * (ValueForBackgroundColor, etc.), and more efficient than ValueFor.
    * These use the names used for the property on DOM interfaces (the
    * 'method' field in nsCSSPropList.h).
    *
    * Like ValueFor(), the caller must check that the property is within
    * mSIDs.
    */
-  #define CSS_PROP_INCLUDE_NOT_CSS
   #define CSS_PROP_DOMPROP_PREFIXED(prop_) prop_
   #define CSS_PROP(name_, id_, method_, flags_, datastruct_, member_,        \
                    parsevariant_, kwtable_, stylestruct_, stylestructoffset_,\
                    animtype_)                                                \
     nsCSSValue* ValueFor##method_() {                                        \
       NS_ABORT_IF_FALSE(mSIDs & NS_STYLE_INHERIT_BIT(stylestruct_),          \
                         "Calling nsRuleData::ValueFor" #method_ " without "  \
                         "NS_STYLE_INHERIT_BIT(" #stylestruct_ " in mSIDs."); \
@@ -147,16 +146,15 @@ struct nsRuleData
       NS_ABORT_IF_FALSE(cssstruct, "nsRuleNode::Get" #stylestruct_ "Data "   \
                                    "set up nsRuleData incorrectly");         \
       return &cssstruct->member_;                                            \
     }
   #define CSS_PROP_BACKENDONLY(name_, id_, method_, flags_, datastruct_,     \
                                member_, parsevariant_, kwtable_)             \
     /* empty; backend-only structs are not in nsRuleData  */
   #include "nsCSSPropList.h"
-  #undef CSS_PROP_INCLUDE_NOT_CSS
   #undef CSS_PROP
   #undef CSS_PROP_DOMPROP_PREFIXED
   #undef CSS_PROP_BACKENDONLY
 
 };
 
 #endif
diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -1303,16 +1303,18 @@ nsRuleNode::PropagateDependentBit(PRUint
 
 /* the information for a property (or in some cases, a rect group of
    properties) */
 
 struct PropertyCheckData {
   size_t offset;
   // These duplicate the data in nsCSSProps::kFlagsTable, except that
   // we have some extra entries for CSS_PROP_INCLUDE_NOT_CSS.
+  // FIXME: CSS_PROP_INCLUDE_NOT_CSS no longer exists; we could avoid
+  // this duplication.
   PRUint32 flags;
 };
 
 /*
  * a callback function that that can revise the result of
  * CheckSpecifiedProperties before finishing; aResult is the current
  * result, and it returns the revised one.
  */
@@ -1420,20 +1422,16 @@ CheckTextCallback(const nsRuleDataStruct
       aResult = nsRuleNode::eRulePartialMixed;
     else if (aResult == nsRuleNode::eRuleFullReset)
       aResult = nsRuleNode::eRuleFullMixed;
   }
 
   return aResult;
 }
 
-// for nsCSSPropList.h, so we get information on things in the style
-// structs but not nsCSS*
-#define CSS_PROP_INCLUDE_NOT_CSS
-
 #define CHECK_DATA_FOR_PROPERTY(name_, id_, method_, flags_, datastruct_,     \
                                 member_, parsevariant_, kwtable_,             \
                                 stylestructoffset_, animtype_)                \
   { offsetof(nsRuleData##datastruct_, member_), flags_ },
 
 static const PropertyCheckData FontCheckProperties[] = {
 #define CSS_PROP_FONT CHECK_DATA_FOR_PROPERTY
 #include "nsCSSPropList.h"
@@ -1567,17 +1565,16 @@ static const PropertyCheckData SVGResetC
 };
 
 static const PropertyCheckData ColumnCheckProperties[] = {
 #define CSS_PROP_COLUMN CHECK_DATA_FOR_PROPERTY
 #include "nsCSSPropList.h"
 #undef CSS_PROP_COLUMN
 };
 
-#undef CSS_PROP_INCLUDE_NOT_CSS
 #undef CHECK_DATA_FOR_PROPERTY
 
 static const StructCheckData gCheckProperties[] = {
 
 #define STYLE_STRUCT(name, checkdata_cb, ctor_args) \
   {name##CheckProperties, \
    sizeof(name##CheckProperties)/sizeof(PropertyCheckData), \
    checkdata_cb},
diff --git a/layout/style/test/ListCSSProperties.cpp b/layout/style/test/ListCSSProperties.cpp
--- a/layout/style/test/ListCSSProperties.cpp
+++ b/layout/style/test/ListCSSProperties.cpp
@@ -113,16 +113,19 @@ const char* gShorthandPropertiesWithDOMP
 };
 
 
 #define ARRAY_LENGTH(a_) (sizeof(a_)/sizeof((a_)[0]))
 
 const char *gInaccessibleProperties[] = {
     // Don't print the properties that aren't accepted by the parser, per
     // CSSParserImpl::ParseProperty
+    "-x-cols",
+    "-x-lang",
+    "-x-span",
     "-x-system-font",
     "border-end-color-value",
     "border-end-style-value",
     "border-end-width-value",
     "border-left-color-value",
     "border-left-color-ltr-source",
     "border-left-color-rtl-source",
     "border-left-style-value",
