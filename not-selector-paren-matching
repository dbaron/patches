From: L. David Baron <dbaron@dbaron.org>

Correct parenthesis-matching inside of :not().  (Bug 586070)  r=bzbarsky  a2.0=bsmedberg

diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -3214,21 +3214,23 @@ CSSParserImpl::ParseNegatedSimpleSelecto
     parsingStatus = ParseAttributeSelector(aDataMask, *newSel);
   }
   else {
     // then it should be a type element or universal selector
     parsingStatus = ParseTypeOrUniversalSelector(aDataMask, *newSel, PR_TRUE);
   }
   if (eSelectorParsingStatus_Error == parsingStatus) {
     REPORT_UNEXPECTED_TOKEN(PENegationBadInner);
+    SkipUntil(')');
     return parsingStatus;
   }
   // close the parenthesis
   if (!ExpectSymbol(')', PR_TRUE)) {
     REPORT_UNEXPECTED_TOKEN(PENegationNoClose);
+    SkipUntil(')');
     return eSelectorParsingStatus_Error;
   }
 
   NS_ASSERTION(newSel->mNameSpace == kNameSpaceID_Unknown ||
                (!newSel->mIDList && !newSel->mClassList &&
                 !newSel->mPseudoClassList && !newSel->mAttrList),
                "Need to fix the serialization code to deal with this");
 
diff --git a/layout/style/test/test_unclosed_parentheses.html b/layout/style/test/test_unclosed_parentheses.html
--- a/layout/style/test/test_unclosed_parentheses.html
+++ b/layout/style/test/test_unclosed_parentheses.html
@@ -132,27 +132,52 @@ var declarations = [
   "border-top-width: -moz-calc(2em +",
   "border-top-width: -moz-calc(2em + ",
   "border-top-width: -moz-calc(2em *",
   "border-top-width: -moz-calc(2em * ",
   "border-top-width: -moz-calc((2em)",
   "border-top-width: -moz-calc((2em) ",
 ];
 
+var selectors = [
+  ":not(",
+  ":not( ",
+  ":not(-",
+  ":not(- ",
+  ":not(>",
+  ":not(> ",
+  ":not(div p",
+  ":not(div p ",
+  ":not(div >",
+  ":not(div > ",
+];
+
 var textNode = document.createTextNode("");
 document.getElementById("style").appendChild(textNode);
 var cs = getComputedStyle(document.getElementById("display"), "");
 
 for (var i = 0; i < declarations.length; ++i) {
   var sheet = "@namespace html url(http://www.w3.org/1999/xhtml);\n" +
               "#display { color: green; " + declarations[i] +
               " x x x x x x x ; color: red; ) ; z-index: " + (i + 1) + " }";
   textNode.data = sheet;
   is(cs.color, "rgb(0, 128, 0)",
      "color for declaration '" + declarations[i] + "'");
   is(cs.zIndex, i+1,
      "z-index for declaration '" + declarations[i] + "'");
 }
 
+for (var i = 0; i < selectors.length; ++i) {
+  var sheet = "@namespace html url(http://www.w3.org/1999/xhtml);\n" +
+              "#display { color: green } " +
+              selectors[i] + " x x x x x x x , #display { color: red } #display { color: red } ) , #display { color: red } " +
+              "#display { z-index: " + (i + 1) + " }";
+  textNode.data = sheet;
+  is(cs.color, "rgb(0, 128, 0)",
+     "color for selector '" + selectors[i] + "'");
+  is(cs.zIndex, i+1,
+     "z-index for selector '" + selectors[i] + "'");
+}
+
 </script>
 </pre>
 </body>
 </html>
