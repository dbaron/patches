From: L. David Baron <dbaron@dbaron.org>

Make nsUTF8ToUnicode use SSE.h  (Bug 513422)  r=vlad

diff --git a/intl/uconv/src/nsUTF8ToUnicode.cpp b/intl/uconv/src/nsUTF8ToUnicode.cpp
--- a/intl/uconv/src/nsUTF8ToUnicode.cpp
+++ b/intl/uconv/src/nsUTF8ToUnicode.cpp
@@ -30,37 +30,22 @@
  * use your version of this file under the terms of the MPL, indicate your
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
+  // So SSE.h will include emmintrin.h in an appropriate way:
+#define MOZILLA_SSE_INCLUDE_HEADER_FOR_SSE2
+
 #include "nsUCSupport.h"
 #include "nsUTF8ToUnicode.h"
-
-#if defined(__GNUC__) && defined(__SSE2__)
-// on x86_64 environment or using -msse2 such as MacOS X
-#define GCC_SSE2
-#endif
-#if (defined(_M_IX86) || defined(_M_AMD64)) && defined(_MSC_VER) && _MSC_VER >= 1400
-#define WIN_SSE2
-#endif
-
-#if defined(GCC_SSE2) || defined(WIN_SSE2)
-#include "emmintrin.h"
-#endif
-
-#if defined(GCC_SSE2) || defined(_M_AMD64)
-// x86_64 supports SSE2 instruction.
-#define __sse2_available 1
-#elif defined(WIN_SSE2)
-extern "C" int __sse2_available;
-#endif
+#include "mozilla/SSE.h"
 
 #define UNICODE_BYTE_ORDER_MARK    0xFEFF
 
 NS_IMETHODIMP NS_NewUTF8ToUnicode(nsISupports* aOuter,
                                   const nsIID& aIID,
                                   void** aResult)
 {
   if (!aResult) {
@@ -141,24 +126,24 @@ NS_IMETHODIMP nsUTF8ToUnicode::Reset()
 // Fast ASCII -> UTF16 inner loop implementations
 //
 // Convert_ascii_run will update src and dst to the new values, and
 // len must be the maximum number ascii chars that it would be valid
 // to take from src and place into dst.  (That is, the minimum of the
 // number of bytes left in src and the number of unichars available in
 // dst.)
 
-#if defined(GCC_SSE2) || defined(WIN_SSE2)
+#ifdef MOZILLA_COMPILE_WITH_SSE2
 
 static inline void
 Convert_ascii_run (const char *&src,
                    PRUnichar *&dst,
                    PRInt32 len)
 {
-  if (len > 15 && __sse2_available) {
+  if (len > 15 && mozilla::use_sse2()) {
     __m128i in, out1, out2;
     __m128d *outp1, *outp2;
     __m128i zeroes;
     PRUint32 offset;
 
     // align input to 16 bytes
     while ((NS_PTR_TO_UINT32(src) & 15) && len > 0) {
       if (*src & 0x80U)
