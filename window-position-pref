From: L. David Baron <dbaron@dbaron.org>

Add preference to GTK2 widget code to report window position as 0,0, to debug how much of a performance problem the window position is when nytimes.com tabs are open.

diff --git a/modules/libpref/init/all.js b/modules/libpref/init/all.js
--- a/modules/libpref/init/all.js
+++ b/modules/libpref/init/all.js
@@ -5281,16 +5281,20 @@ pref("dom.vr.puppet.submitframe", 0);
 // When content is failing to submit frames on time or the lower level VR platform API's
 // are rejecting frames, it determines the rate at which RAF callbacks will be called.
 pref("dom.vr.display.rafMaxDuration", 50);
 // VR test system.
 pref("dom.vr.test.enabled", false);
 // Enable the VR Service, which interfaces with VR hardware in a separate thread
 pref("dom.vr.service.enabled", false);
 
+// Pref to debug how much of a performance problem getting the window
+// position is.
+pref("widget.gtk2.ignore-window-position", false);
+
 // If the user puts a finger down on an element and we think the user
 // might be executing a pan gesture, how long do we wait before
 // tentatively deciding the gesture is actually a tap and activating
 // the target element?
 pref("ui.touch_activation.delay_ms", 100);
 
 // If the user has clicked an element, how long do we keep the
 // :active state before it is cleared by the mouse sequences
diff --git a/widget/gtk/nsWindow.cpp b/widget/gtk/nsWindow.cpp
--- a/widget/gtk/nsWindow.cpp
+++ b/widget/gtk/nsWindow.cpp
@@ -346,16 +346,17 @@ private:
 
 static NS_DEFINE_IID(kCDragServiceCID,  NS_DRAGSERVICE_CID);
 
 // The window from which the focus manager asks us to dispatch key events.
 static nsWindow         *gFocusWindow          = nullptr;
 static bool              gBlockActivateEvent   = false;
 static bool              gGlobalsInitialized   = false;
 static bool              gRaiseWindows         = true;
+static bool              gIgnoreWindowPosition = false;
 
 #if GTK_CHECK_VERSION(3,4,0)
 static uint32_t          gLastTouchID = 0;
 #endif
 
 #define NS_WINDOW_TITLE_MAX_LENGTH 4095
 
 // If after selecting profile window, the startup fail, please refer to
@@ -1482,20 +1483,24 @@ nsWindow::SetFocus(bool aRaise)
     return NS_OK;
 }
 
 LayoutDeviceIntRect
 nsWindow::GetScreenBounds()
 {
     LayoutDeviceIntRect rect;
     if (mIsTopLevel && mContainer) {
+        if (gIgnoreWindowPosition) {
+            rect.MoveTo(0, 0);
+        } else {
         // use the point including window decorations
         gint x, y;
         gdk_window_get_root_origin(gtk_widget_get_window(GTK_WIDGET(mContainer)), &x, &y);
         rect.MoveTo(GdkPointToDevicePixels({ x, y }));
+        }
     } else {
         rect.MoveTo(WidgetToScreenOffset());
     }
     // mBounds.Size() is the window bounds, not the window-manager frame
     // bounds (bug 581863).  gdk_window_get_frame_extents would give the
     // frame bounds, but mBounds.Size() is returned here for consistency
     // with Resize.
     rect.SizeTo(mBounds.Size());
@@ -6294,16 +6299,19 @@ drag_data_received_event_cb(GtkWidget *a
 }
 
 static nsresult
 initialize_prefs(void)
 {
     gRaiseWindows =
         Preferences::GetBool("mozilla.widget.raise-on-setfocus", true);
 
+    Preferences::AddBoolVarCache(&gIgnoreWindowPosition,
+                                 "widget.gtk2.ignore-window-position");
+
     return NS_OK;
 }
 
 static GdkWindow *
 get_inner_gdk_window (GdkWindow *aWindow,
                       gint x, gint y,
                       gint *retx, gint *rety)
 {
