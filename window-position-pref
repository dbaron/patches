From: L. David Baron <dbaron@dbaron.org>

Add preference to GTK2 widget code to report window position as 0,0, to debug how much of a performance problem the window position is when nytimes.com tabs are open.

diff --git a/modules/libpref/src/init/all.js b/modules/libpref/src/init/all.js
--- a/modules/libpref/src/init/all.js
+++ b/modules/libpref/src/init/all.js
@@ -4154,16 +4154,20 @@ pref("jsloader.reuseGlobal", false);
 
 // When we're asked to take a screenshot, don't wait more than 2000ms for the
 // event loop to become idle before actually taking the screenshot.
 pref("dom.browserElement.maxScreenshotDelayMS", 2000);
 
 // Whether we should show the placeholder when the element is focused but empty.
 pref("dom.placeholder.show_on_focus", true);
 
+// Pref to debug how much of a performance problem getting the window
+// position is.
+pref("widget.gtk2.ignore-window-position", false);
+
 // UAProfile settings
 pref("wap.UAProf.url", "");
 pref("wap.UAProf.tagname", "x-wap-profile");
 
 // Retrieval mode for MMS
 // manual: Manual retrieval mode.
 // automatic: Automatic retrieval mode even in roaming.
 // automatic-home: Automatic retrieval mode in home network.
diff --git a/widget/gtk2/nsWindow.cpp b/widget/gtk2/nsWindow.cpp
--- a/widget/gtk2/nsWindow.cpp
+++ b/widget/gtk2/nsWindow.cpp
@@ -253,16 +253,17 @@ static guint32 sRetryGrabTime;
 
 static NS_DEFINE_IID(kCDragServiceCID,  NS_DRAGSERVICE_CID);
 
 // The window from which the focus manager asks us to dispatch key events.
 static nsWindow         *gFocusWindow          = NULL;
 static bool              gBlockActivateEvent   = false;
 static bool              gGlobalsInitialized   = false;
 static bool              gRaiseWindows         = true;
+static bool              gIgnoreWindowPosition = false;
 static nsWindow         *gPluginFocusWindow    = NULL;
 
 
 #define NS_WINDOW_TITLE_MAX_LENGTH 4095
 
 // If after selecting profile window, the startup fail, please refer to
 // http://bugzilla.gnome.org/show_bug.cgi?id=88940
 
@@ -1459,20 +1460,24 @@ nsWindow::SetFocus(bool aRaise)
 
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsWindow::GetScreenBounds(nsIntRect &aRect)
 {
     if (mIsTopLevel && mContainer) {
+        if (gIgnoreWindowPosition) {
+            aRect.MoveTo(0, 0);
+        } else {
         // use the point including window decorations
         gint x, y;
         gdk_window_get_root_origin(gtk_widget_get_window(GTK_WIDGET(mContainer)), &x, &y);
         aRect.MoveTo(x, y);
+        }
     }
     else {
         aRect.MoveTo(WidgetToScreenOffset());
     }
     // mBounds.Size() is the window bounds, not the window-manager frame
     // bounds (bug 581863).  gdk_window_get_frame_extents would give the
     // frame bounds, but mBounds.Size() is returned here for consistency
     // with Resize.
@@ -5713,16 +5718,19 @@ drag_data_received_event_cb(GtkWidget *a
 }
 
 static nsresult
 initialize_prefs(void)
 {
     gRaiseWindows =
         Preferences::GetBool("mozilla.widget.raise-on-setfocus", true);
 
+    Preferences::AddBoolVarCache(&gIgnoreWindowPosition,
+                                 "widget.gtk2.ignore-window-position");
+
     return NS_OK;
 }
 
 static GdkWindow *
 get_inner_gdk_window (GdkWindow *aWindow,
                       gint x, gint y,
                       gint *retx, gint *rety)
 {
