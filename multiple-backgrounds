Implement multiple background images.  (Bug 322475)

diff --git a/layout/base/nsStyleConsts.h b/layout/base/nsStyleConsts.h
--- a/layout/base/nsStyleConsts.h
+++ b/layout/base/nsStyleConsts.h
@@ -199,24 +199,16 @@
 #endif
 #define NS_STYLE_COLOR_MOZ_USE_TEXT_COLOR      2
 
 // See nsStyleColor
 #define NS_COLOR_MOZ_HYPERLINKTEXT              -1
 #define NS_COLOR_MOZ_VISITEDHYPERLINKTEXT       -2
 #define NS_COLOR_MOZ_ACTIVEHYPERLINKTEXT        -3
 #define NS_COLOR_CURRENTCOLOR                   -4
-
-// See nsStyleBackground
-#define NS_STYLE_BG_COLOR_TRANSPARENT           0x01
-#define NS_STYLE_BG_IMAGE_NONE                  0x02
-#define NS_STYLE_BG_X_POSITION_PERCENT          0x04
-#define NS_STYLE_BG_X_POSITION_LENGTH           0x08
-#define NS_STYLE_BG_Y_POSITION_PERCENT          0x10
-#define NS_STYLE_BG_Y_POSITION_LENGTH           0x20
 
 // See nsStyleBackground
 #define NS_STYLE_BG_ATTACHMENT_SCROLL     0
 #define NS_STYLE_BG_ATTACHMENT_FIXED      1
 
 // See nsStyleBackground
 #define NS_STYLE_BG_CLIP_BORDER           0
 #define NS_STYLE_BG_CLIP_PADDING          1
diff --git a/layout/style/nsStyleStruct.cpp b/layout/style/nsStyleStruct.cpp
--- a/layout/style/nsStyleStruct.cpp
+++ b/layout/style/nsStyleStruct.cpp
@@ -1156,22 +1156,22 @@ nsStyleBackground::nsStyleBackground(nsP
 {
   mBackgroundColor = aPresContext->DefaultBackgroundColor();
 }
 
 nsStyleBackground::nsStyleBackground(const nsStyleBackground& aSource)
   : mBackgroundFlags(aSource.mBackgroundFlags),
     mBackgroundAttachment(aSource.mBackgroundAttachment),
     mBackgroundClip(aSource.mBackgroundClip),
-    mBackgroundInlinePolicy(aSource.mBackgroundInlinePolicy),
     mBackgroundOrigin(aSource.mBackgroundOrigin),
     mBackgroundRepeat(aSource.mBackgroundRepeat),
     mBackgroundXPosition(aSource.mBackgroundXPosition),
     mBackgroundYPosition(aSource.mBackgroundYPosition),
     mBackgroundColor(aSource.mBackgroundColor),
+    mBackgroundInlinePolicy(aSource.mBackgroundInlinePolicy),
     mBackgroundImage(aSource.mBackgroundImage)
 {
 }
 
 nsStyleBackground::~nsStyleBackground()
 {
 }
 
diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -54,16 +54,17 @@
 #include "nsVoidArray.h"
 #include "nsStyleCoord.h"
 #include "nsStyleConsts.h"
 #include "nsChangeHint.h"
 #include "nsPresContext.h"
 #include "nsIPresShell.h"
 #include "nsCOMPtr.h"
 #include "nsCOMArray.h"
+#include "nsTArray.h"
 #include "nsIAtom.h"
 #include "nsIURI.h"
 #include "nsCSSValue.h"
 
 class nsIFrame;
 class imgIRequest;
 
 // Includes nsStyleStructID.
@@ -156,43 +157,44 @@ struct nsStyleBackground {
     aContext->FreeToShell(sizeof(nsStyleBackground), this);
   }
 
   nsChangeHint CalcDifference(const nsStyleBackground& aOther) const;
 #ifdef DEBUG
   static nsChangeHint MaxDifference();
 #endif
 
-  // On Linux (others?), there is an extra byte being used up by
-  // inheritance so we only have 3 bytes to fit these 6 things into.
-  // Fortunately, the properties are enums which have few possible
-  // values.
-  PRUint8 mBackgroundFlags;            // [reset] See nsStyleConsts.h
-  PRUint8 mBackgroundAttachment   : 4; // [reset] See nsStyleConsts.h
-  PRUint8 mBackgroundClip         : 3; // [reset] See nsStyleConsts.h
-  PRUint8 mBackgroundInlinePolicy : 2; // [reset] See nsStyleConsts.h
-  PRUint8 mBackgroundOrigin       : 3; // [reset] See nsStyleConsts.h
-  PRUint8 mBackgroundRepeat       : 4; // [reset] See nsStyleConsts.h
+  // Empty |nsTArray|s use only a single word.  An empty array
+  // implies that the value is the default value for the property.
+  nsTArray<PRUint8> mBackgroundAttachment; // [reset] See nsStyleConsts.h
+  nsTArray<PRUint8> mBackgroundClip;   // [reset] See nsStyleConsts.h
+  nsTArray<PRUint8> mBackgroundOrigin; // [reset] See nsStyleConsts.h
+  nsTArray<PRUint8> mBackgroundRepeat; // [reset] See nsStyleConsts.h
 
-  // Note: a member of this union is valid IFF the appropriate bit flag
-  // is set in mBackgroundFlags.
-  union {
-    nscoord mCoord;
-    float   mFloat;
-  } mBackgroundXPosition,         // [reset]
-    mBackgroundYPosition;         // [reset]
+  struct Position {
+    union {
+      nscoord mCoord; // for lengths
+      float   mFloat; // for percents
+    } mXPosition, mYPosition;
+    PRPackedBool mXIsPercent;
+    PRPackedBool mYIsPercent;
+  };
+  nsTArray<Position> mBackgroundPosition; // [reset]
 
   nscolor mBackgroundColor;       // [reset]
-  nsCOMPtr<imgIRequest> mBackgroundImage; // [reset]
+  nscolor mFallbackBackgroundColor; // [reset]
+  PRPackedBool mHaveFallbackBackgroundColor; // [reset]
+  PRUint8 mBackgroundInlinePolicy; // [reset] See nsStyleConsts.h
+  // An empty array means 'background-image: none'.
+  nsTArray< nsCOMPtr<imgIRequest> > mBackgroundImage; // [reset]
 
   PRBool IsTransparent() const
   {
-    return (mBackgroundFlags &
-            (NS_STYLE_BG_COLOR_TRANSPARENT | NS_STYLE_BG_IMAGE_NONE)) ==
-            (NS_STYLE_BG_COLOR_TRANSPARENT | NS_STYLE_BG_IMAGE_NONE);
+    return mBackgroundImage.Length() == 0 &&
+           NS_GET_A(mBackgroundColor) == 0;
   }
 
   // We have to take slower codepaths for fixed background attachment,
   // but we don't want to do that when there's no image.
   // Not inline because it uses an nsCOMPtr<imgIRequest>
   // FIXME: Should be in nsStyleStructInlines.h.
   PRBool HasFixedBackground() const;
 };
