From: L. David Baron <dbaron@dbaron.org>

Add storage for calc() expressions to nsStyleCoord.  (Bug 363249)

diff --git a/layout/style/nsStyleCoord.cpp b/layout/style/nsStyleCoord.cpp
--- a/layout/style/nsStyleCoord.cpp
+++ b/layout/style/nsStyleCoord.cpp
@@ -152,16 +152,27 @@ void nsStyleCoord::SetAngleValue(float a
     mUnit = aUnit;
     mValue.mFloat = aValue;
   } else {
     NS_NOTREACHED("not an angle value");
     Reset();
   }
 }
 
+void nsStyleCoord::SetPointerValue(void* aValue, nsStyleUnit aUnit)
+{
+  mUnit = aUnit;
+  if (IsPointerValue()) {
+    mValue.mPointer = aValue;
+  } else {
+    NS_NOTREACHED("not a pointer value");
+    Reset();
+  }
+}
+
 void nsStyleCoord::SetNormalValue()
 {
   mUnit = eStyleUnit_Normal;
   mValue.mInt = 0;
 }
 
 void nsStyleCoord::SetAutoValue()
 {
diff --git a/layout/style/nsStyleCoord.h b/layout/style/nsStyleCoord.h
--- a/layout/style/nsStyleCoord.h
+++ b/layout/style/nsStyleCoord.h
@@ -53,22 +53,27 @@ enum nsStyleUnit {
   eStyleUnit_None         = 3,      // (no value)
   eStyleUnit_Percent      = 10,     // (float) 1.0 == 100%
   eStyleUnit_Factor       = 11,     // (float) a multiplier
   eStyleUnit_Degree       = 12,     // (float) angle in degrees
   eStyleUnit_Grad         = 13,     // (float) angle in grads
   eStyleUnit_Radian       = 14,     // (float) angle in radians
   eStyleUnit_Coord        = 20,     // (nscoord) value is twips
   eStyleUnit_Integer      = 30,     // (int) value is simple integer
-  eStyleUnit_Enumerated   = 32      // (int) value has enumerated meaning
+  eStyleUnit_Enumerated   = 32,     // (int) value has enumerated meaning
+  eStyleUnit_Calc         = 40,     // (nsCSSValue::Array*) weak pointer to
+                                    // calc tree owned by style rule
+  eStyleUnit_Calc_Min     = 41,     // (nsCSSValue::Array*) see _Calc
+  eStyleUnit_Calc_Max     = 42      // (nsCSSValue::Array*) see _Calc
 };
 
 typedef union {
   PRInt32     mInt;   // nscoord is a PRInt32 for now
   float       mFloat;
+  void*       mPointer; // Avoid dragging in nsCSSValue headers
 } nsStyleUnion;
 
 /**
  * Class that hold a single size specification used by the style
  * system.  The size specification consists of two parts -- a number
  * and a unit.  The number is an integer, a floating point value, an
  * nscoord, or undefined, and the unit is an nsStyleUnit.  Checking
  * the unit is a must before asking for the value in any particular
@@ -92,33 +97,39 @@ public:
     NS_ASSERTION(mUnit != eStyleUnit_Null, "reading uninitialized value");
     return mUnit;
   }
 
   PRBool IsAngleValue() const {
     return eStyleUnit_Degree <= mUnit && mUnit <= eStyleUnit_Radian;
   }
 
+  PRBool IsPointerValue() const {
+    return eStyleUnit_Calc <= mUnit && mUnit <= eStyleUnit_Calc_Max;
+  }
+
   nscoord     GetCoordValue() const;
   PRInt32     GetIntValue() const;
   float       GetPercentValue() const;
   float       GetFactorValue() const;
   float       GetAngleValue() const;
   double      GetAngleValueInRadians() const;
+  void*       GetPointerValue() const;
   void        GetUnionValue(nsStyleUnion& aValue) const;
 
   void  Reset();  // sets to null
   void  SetCoordValue(nscoord aValue);
   void  SetIntValue(PRInt32 aValue, nsStyleUnit aUnit);
   void  SetPercentValue(float aValue);
   void  SetFactorValue(float aValue);
   void  SetAngleValue(float aValue, nsStyleUnit aUnit);
   void  SetNormalValue();
   void  SetAutoValue();
   void  SetNoneValue();
+  void  SetPointerValue(void* aValue, nsStyleUnit aUnit);
 
 public:
   nsStyleUnit   mUnit;
   nsStyleUnion  mValue;
 };
 
 
 /**
@@ -268,16 +279,26 @@ inline float nsStyleCoord::GetAngleValue
   NS_ASSERTION(mUnit >= eStyleUnit_Degree &&
                mUnit <= eStyleUnit_Radian, "not an angle value");
   if (mUnit >= eStyleUnit_Degree && mUnit <= eStyleUnit_Radian) {
     return mValue.mFloat;
   }
   return 0.0f;
 }
 
+inline void* nsStyleCoord::GetPointerValue() const
+{
+  NS_ASSERTION(IsPointerValue(), "not a pointer value");
+  if (IsPointerValue()) {
+    return mValue.mPointer;
+  }
+  return nsnull;
+}
+
+
 inline void nsStyleCoord::GetUnionValue(nsStyleUnion& aValue) const
 {
   memcpy(&aValue, &mValue, sizeof(nsStyleUnion));
 }
 
 // -------------------------
 // nsStyleSides inlines
 //
