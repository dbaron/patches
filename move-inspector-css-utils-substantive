From: L. David Baron <dbaron@dbaron.org>

Remove InspectorCSSUtils, part 2: Move remaining substantive code to inDOMUtils.  (Bug 371655)

diff --git a/layout/inspector/src/Makefile.in b/layout/inspector/src/Makefile.in
--- a/layout/inspector/src/Makefile.in
+++ b/layout/inspector/src/Makefile.in
@@ -81,9 +81,14 @@ CPPSRCS += \
   inDOMView.cpp \
   $(NULL)
 endif
 
 FORCE_STATIC_LIB = 1
 # This library is used by other shared libs in a static build
 FORCE_USE_PIC = 1
 
+LOCAL_INCLUDES	+= \
+		-I$(srcdir)/../../style \
+		-I$(topsrcdir)/content/xbl/src \
+		$(NULL)
+
 include $(topsrcdir)/config/rules.mk
diff --git a/layout/inspector/src/inDOMUtils.cpp b/layout/inspector/src/inDOMUtils.cpp
--- a/layout/inspector/src/inDOMUtils.cpp
+++ b/layout/inspector/src/inDOMUtils.cpp
@@ -38,23 +38,30 @@
 
 #include "inDOMUtils.h"
 #include "inLayoutUtils.h"
 
 #include "nsIServiceManager.h"
 #include "nsString.h"
 #include "nsIDOMElement.h"
 #include "nsIDocument.h"
+#include "nsIPresShell.h"
 #include "nsIDOMDocument.h"
 #include "nsIDOMCharacterData.h"
 #include "nsRuleNode.h"
 #include "nsIStyleRule.h"
 #include "nsICSSStyleRule.h"
 #include "nsICSSStyleRuleDOMWrapper.h"
 #include "nsIDOMWindowInternal.h"
+#include "nsXBLBinding.h"
+#include "nsXBLPrototypeBinding.h"
+#include "nsIDOMElement.h"
+#include "nsIMutableArray.h"
+#include "nsBindingManager.h"
+#include "nsComputedDOMStyle.h"
 
 static NS_DEFINE_CID(kInspectorCSSUtilsCID, NS_INSPECTORCSSUTILS_CID);
 
 ///////////////////////////////////////////////////////////////////////////////
 
 inDOMUtils::inDOMUtils()
 {
   mCSSUtils = do_GetService(kInspectorCSSUtilsCID);
@@ -155,17 +162,17 @@ inDOMUtils::GetCSSStyleRules(nsIDOMEleme
                              nsISupportsArray **_retval)
 {
   NS_ENSURE_ARG_POINTER(aElement);
 
   *_retval = nsnull;
 
   nsRuleNode* ruleNode = nsnull;
   nsCOMPtr<nsIContent> content = do_QueryInterface(aElement);
-  mCSSUtils->GetRuleNodeForContent(content, &ruleNode);
+  GetRuleNodeForContent(content, &ruleNode);
   if (!ruleNode) {
     // This can fail for content nodes that are not in the document or
     // if the document they're in doesn't have a presshell.  Bail out.
     return NS_OK;
   }
 
   nsCOMPtr<nsISupportsArray> rules;
   NS_NewISupportsArray(getter_AddRefs(rules));
@@ -208,17 +215,38 @@ inDOMUtils::GetRuleLine(nsIDOMCSSStyleRu
   *_retval = cssrule->GetLineNumber();
   return NS_OK;
 }
 
 NS_IMETHODIMP 
 inDOMUtils::GetBindingURLs(nsIDOMElement *aElement, nsIArray **_retval)
 {
   NS_ENSURE_ARG_POINTER(aElement);
-  return mCSSUtils->GetBindingURLs(aElement, _retval);
+
+  *_retval = nsnull;
+
+  nsCOMPtr<nsIMutableArray> urls = do_CreateInstance(NS_ARRAY_CONTRACTID);
+  if (!urls)
+    return NS_ERROR_FAILURE;
+
+  nsCOMPtr<nsIContent> content = do_QueryInterface(aElement);
+  NS_ASSERTION(content, "elements must implement nsIContent");
+
+  nsIDocument *ownerDoc = content->GetOwnerDoc();
+  if (ownerDoc) {
+    nsXBLBinding *binding = ownerDoc->BindingManager()->GetBinding(content);
+
+    while (binding) {
+      urls->AppendElement(binding->PrototypeBinding()->BindingURI(), PR_FALSE);
+      binding = binding->GetBaseBinding();
+    }
+  }
+
+  NS_ADDREF(*_retval = urls);
+  return NS_OK;
 }
 
 NS_IMETHODIMP
 inDOMUtils::SetContentState(nsIDOMElement *aElement, PRInt32 aState)
 {
   NS_ENSURE_ARG_POINTER(aElement);
   
   nsCOMPtr<nsIEventStateManager> esm = inLayoutUtils::GetEventStateManagerFor(aElement);
@@ -245,8 +273,25 @@ inDOMUtils::GetContentState(nsIDOMElemen
     content = do_QueryInterface(aElement);
   
     return esm->GetContentState(content, *aState);
   }
 
   return NS_ERROR_FAILURE;
 }
 
+/* static */ nsresult
+inDOMUtils::GetRuleNodeForContent(nsIContent* aContent, nsRuleNode** aRuleNode)
+{
+    *aRuleNode = nsnull;
+
+    nsIDocument* doc = aContent->GetDocument();
+    NS_ENSURE_TRUE(doc, NS_ERROR_UNEXPECTED);
+
+    nsIPresShell *presShell = doc->GetPrimaryShell();
+    NS_ENSURE_TRUE(presShell, NS_ERROR_UNEXPECTED);
+
+    nsRefPtr<nsStyleContext> sContext =
+        nsComputedDOMStyle::GetStyleContextForContent(aContent, nsnull,
+                                                      presShell);
+    *aRuleNode = sContext->GetRuleNode();
+    return NS_OK;
+}
diff --git a/layout/inspector/src/inDOMUtils.h b/layout/inspector/src/inDOMUtils.h
--- a/layout/inspector/src/inDOMUtils.h
+++ b/layout/inspector/src/inDOMUtils.h
@@ -39,27 +39,31 @@
 #define __inDOMUtils_h__
 
 #include "inIDOMUtils.h"
 
 #include "nsIEventStateManager.h"
 #include "nsISupportsArray.h"
 #include "nsIInspectorCSSUtils.h"
 
+class nsRuleNode;
+
 class inDOMUtils : public inIDOMUtils
 {
 public:
   NS_DECL_ISUPPORTS
   NS_DECL_INIDOMUTILS
 
   inDOMUtils();
   virtual ~inDOMUtils();
 
-protected:
+private:
   nsCOMPtr<nsIInspectorCSSUtils> mCSSUtils;
 
+  static nsresult GetRuleNodeForContent(nsIContent* aContent,
+                                        nsRuleNode** aRuleNode);
 };
 
 // {40B22006-5DD5-42f2-BFE7-7DBF0757AB8B}
 #define IN_DOMUTILS_CID \
 { 0x40b22006, 0x5dd5, 0x42f2, { 0xbf, 0xe7, 0x7d, 0xbf, 0x7, 0x57, 0xab, 0x8b } }
 
 #endif // __inDOMUtils_h__
diff --git a/layout/style/nsIInspectorCSSUtils.h b/layout/style/nsIInspectorCSSUtils.h
--- a/layout/style/nsIInspectorCSSUtils.h
+++ b/layout/style/nsIInspectorCSSUtils.h
@@ -47,20 +47,20 @@
 class nsRuleNode;
 class nsIStyleRule;
 class nsIFrame;
 struct nsRect;
 class nsIContent;
 class nsIDOMElement;
 class nsIArray;
 
-// 35dfc2a6-b069-4014-ad4b-01927e77d828
+// 5cfdb02f-0962-454c-b015-b05123927021
 #define NS_IINSPECTORCSSUTILS_IID \
-  { 0x35dfc2a6, 0xb069, 0x4014, \
-    {0xad, 0x4b, 0x01, 0x92, 0x7e, 0x77, 0xd8, 0x28 } }
+  { 0x5cfdb02f, 0x0962, 0x454c, \
+    { 0xb0, 0x15, 0xb0, 0x51, 0x23, 0x92, 0x70, 0x21 } }
 
 // 7ef2f07f-6e34-410b-8336-88acd1cd16b7
 #define NS_INSPECTORCSSUTILS_CID \
   { 0x7ef2f07f, 0x6e34, 0x410b, \
     {0x83, 0x36, 0x88, 0xac, 0xd1, 0xcd, 0x16, 0xb7 } }
 
 class nsIInspectorCSSUtils : public nsISupports {
 public:
@@ -71,20 +71,13 @@ public:
     // implementation of this interface).
     NS_IMETHOD LookupCSSProperty(const nsAString& aName, nsCSSProperty *aProp) = 0;
 
     // Hooks to inline methods on nsRuleNode that have trouble linking
     // on certain debug builds (MacOSX Mach-O with gcc).
     NS_IMETHOD GetRuleNodeParent(nsRuleNode *aNode, nsRuleNode **aParent) = 0;
     NS_IMETHOD GetRuleNodeRule(nsRuleNode *aNode, nsIStyleRule **aRule) = 0;
     NS_IMETHOD IsRuleNodeRoot(nsRuleNode *aNode, PRBool *aIsRoot) = 0;
-
-    // Hooks to methods that need nsStyleContext
-    NS_IMETHOD GetRuleNodeForContent(nsIContent* aContent,
-                                     nsRuleNode** aParent) = 0;
-
-    // Hooks to XBL
-    NS_IMETHOD GetBindingURLs(nsIDOMElement *aElement, nsIArray **aResult) = 0;
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(nsIInspectorCSSUtils, NS_IINSPECTORCSSUTILS_IID)
 
 #endif /* nsIInspectorCSSUtils_h___ */
diff --git a/layout/style/nsInspectorCSSUtils.cpp b/layout/style/nsInspectorCSSUtils.cpp
--- a/layout/style/nsInspectorCSSUtils.cpp
+++ b/layout/style/nsInspectorCSSUtils.cpp
@@ -39,27 +39,19 @@
 
 /* XPCOM interface to provide some internal information to DOM inspector */
 
 #include "nsInspectorCSSUtils.h"
 #include "nsIStyleRule.h"
 #include "nsRuleNode.h"
 #include "nsString.h"
 #include "nsGkAtoms.h"
-#include "nsIDocument.h"
-#include "nsIPresShell.h"
 #include "nsAutoPtr.h"
 #include "nsIFrame.h"
 #include "nsStyleSet.h"
-#include "nsXBLBinding.h"
-#include "nsXBLPrototypeBinding.h"
-#include "nsIDOMElement.h"
-#include "nsIMutableArray.h"
-#include "nsBindingManager.h"
-#include "nsComputedDOMStyle.h"
 
 nsInspectorCSSUtils::nsInspectorCSSUtils()
 {
     nsCSSProps::AddRefTable();
 }
 
 nsInspectorCSSUtils::~nsInspectorCSSUtils()
 {
@@ -91,56 +83,8 @@ nsInspectorCSSUtils::GetRuleNodeRule(nsR
 }
 
 NS_IMETHODIMP
 nsInspectorCSSUtils::IsRuleNodeRoot(nsRuleNode *aNode, PRBool *aIsRoot)
 {
     *aIsRoot = aNode->IsRoot();
     return NS_OK;
 }
-
-NS_IMETHODIMP
-nsInspectorCSSUtils::GetRuleNodeForContent(nsIContent* aContent,
-                                           nsRuleNode** aRuleNode)
-{
-    *aRuleNode = nsnull;
-
-    nsIDocument* doc = aContent->GetDocument();
-    NS_ENSURE_TRUE(doc, NS_ERROR_UNEXPECTED);
-
-    nsIPresShell *presShell = doc->GetPrimaryShell();
-    NS_ENSURE_TRUE(presShell, NS_ERROR_UNEXPECTED);
-
-    nsRefPtr<nsStyleContext> sContext =
-        nsComputedDOMStyle::GetStyleContextForContent(aContent, nsnull,
-                                                      presShell);
-    *aRuleNode = sContext->GetRuleNode();
-    return NS_OK;
-}
-
-NS_IMETHODIMP
-nsInspectorCSSUtils::GetBindingURLs(nsIDOMElement *aElement,
-                                    nsIArray **aResult)
-{
-    *aResult = nsnull;
-
-    nsCOMPtr<nsIMutableArray> urls = do_CreateInstance(NS_ARRAY_CONTRACTID);
-    if (!urls)
-        return NS_ERROR_FAILURE;
-
-    nsCOMPtr<nsIContent> content = do_QueryInterface(aElement);
-    NS_ASSERTION(content, "elements must implement nsIContent");
-
-    nsIDocument *ownerDoc = content->GetOwnerDoc();
-    if (ownerDoc) {
-        nsXBLBinding *binding =
-            ownerDoc->BindingManager()->GetBinding(content);
-
-        while (binding) {
-            urls->AppendElement(binding->PrototypeBinding()->BindingURI(),
-                                PR_FALSE);
-            binding = binding->GetBaseBinding();
-        }
-    }
-
-    NS_ADDREF(*aResult = urls);
-    return NS_OK;
-}
diff --git a/layout/style/nsInspectorCSSUtils.h b/layout/style/nsInspectorCSSUtils.h
--- a/layout/style/nsInspectorCSSUtils.h
+++ b/layout/style/nsInspectorCSSUtils.h
@@ -57,14 +57,11 @@ public:
 
     NS_DECL_ISUPPORTS
 
     // nsIInspectorCSSUtils
     NS_IMETHOD LookupCSSProperty(const nsAString& aName, nsCSSProperty *aProp);
     NS_IMETHOD GetRuleNodeParent(nsRuleNode *aNode, nsRuleNode **aParent);
     NS_IMETHOD GetRuleNodeRule(nsRuleNode *aNode, nsIStyleRule **aRule);
     NS_IMETHOD IsRuleNodeRoot(nsRuleNode *aNode, PRBool *aIsRoot);
-    NS_IMETHOD GetRuleNodeForContent(nsIContent* aContent,
-                                     nsRuleNode** aRuleNode);
-    NS_IMETHOD GetBindingURLs(nsIDOMElement *aElement, nsIArray **aResult);
 };
 
 #endif /* nsInspectorCSSUtils_h___ */
