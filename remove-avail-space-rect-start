Begin removing mAvailSpaceRect and mBandHasFloats from nsBlockReflowState by converting the current state-mutation GetAvailableSpace to a getter GetFloatAvailableSpace to replace it, and reimplementing the state mutation in terms of the getter.  (Bug 25888)

diff --git a/layout/generic/nsBlockReflowState.cpp b/layout/generic/nsBlockReflowState.cpp
--- a/layout/generic/nsBlockReflowState.cpp
+++ b/layout/generic/nsBlockReflowState.cpp
@@ -329,48 +329,48 @@ nsBlockReflowState::ComputeBlockAvailSpa
     aResult.width = mContentArea.width - leftOffset - rightOffset;
   }
 
 #ifdef REALLY_NOISY_REFLOW
   printf("  CBAS: result %d %d %d %d\n", aResult.x, aResult.y, aResult.width, aResult.height);
 #endif
 }
 
-void
-nsBlockReflowState::GetAvailableSpace(nscoord aY, PRBool aRelaxHeightConstraint)
+PRBool
+nsBlockReflowState::GetFloatAvailableSpace(nscoord aY,
+                                           PRBool aRelaxHeightConstraint,
+                                           nsRect& aResult) const
 {
 #ifdef DEBUG
   // Verify that the caller setup the coordinate system properly
   nscoord wx, wy;
   mFloatManager->GetTranslation(wx, wy);
   NS_ASSERTION((wx == mFloatManagerX) && (wy == mFloatManagerY),
                "bad coord system");
 #endif
 
   PRBool hasFloats;
-  mAvailSpaceRect = 
+  aResult = 
     mFloatManager->GetBand(aY - BorderPadding().top, 
                            aRelaxHeightConstraint ? nscoord_MAX
                                                   : mContentArea.height,
                            mContentArea.width,
                            &hasFloats);
-  mBandHasFloats = hasFloats;
   // Keep the width >= 0 for compatibility with nsSpaceManager.
-  if (mAvailSpaceRect.width < 0)
-    mAvailSpaceRect.width = 0;
+  if (aResult.width < 0)
+    aResult.width = 0;
 
 #ifdef DEBUG
   if (nsBlockFrame::gNoisyReflow) {
     nsFrame::IndentBy(stdout, nsBlockFrame::gNoiseIndent);
     printf("GetAvailableSpace: band=%d,%d,%d,%d hasfloats=%d\n",
-           mAvailSpaceRect.x, mAvailSpaceRect.y,
-           mAvailSpaceRect.width, mAvailSpaceRect.height,
-           mBandHasFloats);
+           aResult.x, aResult.y, aResult.width, aResult.height, hasFloats);
   }
 #endif
+  return hasFloats;
 }
 
 /*
  * Reconstruct the vertical margin before the line |aLine| in order to
  * do an incremental reflow that begins with |aLine| without reflowing
  * the line before it.  |aLine| may point to the fencepost at the end of
  * the line list, and it is used this way since we (for now, anyway)
  * always need to recover margins at the end of a block.
diff --git a/layout/generic/nsBlockReflowState.h b/layout/generic/nsBlockReflowState.h
--- a/layout/generic/nsBlockReflowState.h
+++ b/layout/generic/nsBlockReflowState.h
@@ -78,22 +78,34 @@ public:
   // Set up a property on the block that points to our temporary mOverflowPlaceholders
   // list, if that list is or could become non-empty during this reflow. Must be
   // called after the block has done DrainOverflowLines because DrainOverflowLines
   // can setup mOverflowPlaceholders even if the block is in unconstrained height
   // reflow (it may have previously been reflowed with constrained height).
   void SetupOverflowPlaceholdersProperty();
 
   /**
-   * Get the available reflow space for the current y coordinate. The
-   * available space is relative to our coordinate system (0,0) is our
-   * upper left corner.
+   * Get the available reflow space (the area not occupied by floats)
+   * for the current y coordinate. The available space is relative to
+   * our coordinate system, which is the content box, with (0, 0) in the
+   * upper left.
+   *
+   * Returns whether there are floats present at the given vertical
+   * coordinate and within the width of the content rect.
    */
+  PRBool GetFloatAvailableSpace(nsRect& aResult) const
+    { return GetFloatAvailableSpace(mY, PR_FALSE, aResult); }
+  PRBool GetFloatAvailableSpace(nscoord aY, PRBool aRelaxHeightConstraint,
+                                nsRect& aResult) const;
+  /* FIXME: To be removed */
   void GetAvailableSpace() { GetAvailableSpace(mY, PR_FALSE); }
-  void GetAvailableSpace(nscoord aY, PRBool aRelaxHeightConstraint);
+  void GetAvailableSpace(nscoord aY, PRBool aRelaxHeightConstraint) {
+    mBandHasFloats =
+      GetFloatAvailableSpace(aY, aRelaxHeightConstraint, mAvailSpaceRect);
+  }
 
   /*
    * The following functions all return PR_TRUE if they were able to
    * place the float, PR_FALSE if the float did not fit in available
    * space.
    */
   PRBool InitFloat(nsLineLayout&       aLineLayout,
                    nsPlaceholderFrame* aPlaceholderFrame,
