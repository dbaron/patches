Change evaluation of media queries like (width) where actual values are lengths; treat zero lengths as false in such cases, per http://lists.w3.org/Archives/Public/www-style/2008Aug/0190.html and spec clarification.

diff --git a/layout/style/nsCSSStyleSheet.cpp b/layout/style/nsCSSStyleSheet.cpp
--- a/layout/style/nsCSSStyleSheet.cpp
+++ b/layout/style/nsCSSStyleSheet.cpp
@@ -183,20 +183,23 @@ nsMediaExpression::Matches(nsPresContext
   const nsCSSValue& required = mValue;
 
   // If we don't have the feature, the match fails.
   if (actual.GetUnit() == eCSSUnit_Null) {
     return PR_FALSE;
   }
 
   // If the expression had no value to match, the match succeeds,
-  // unless the value is an integer 0.
+  // unless the value is an integer 0 or a zero length.
   if (required.GetUnit() == eCSSUnit_Null) {
-    return actual.GetUnit() != eCSSUnit_Integer ||
-           actual.GetIntValue() != 0;
+    if (actual.GetUnit() == eCSSUnit_Integer)
+      return actual.GetIntValue() != 0;
+    if (actual.IsLengthUnit())
+      return actual.GetFloatValue() != 0;
+    return PR_TRUE;
   }
 
   NS_ASSERTION(mFeature->mRangeType == nsMediaFeature::eMinMaxAllowed ||
                mRange == nsMediaExpression::eEqual, "yikes");
   PRInt32 cmp; // -1 (actual < required)
                //  0 (actual == required)
                //  1 (actual > required)
   switch (mFeature->mValueType) {
diff --git a/layout/style/test/test_media_queries.html b/layout/style/test/test_media_queries.html
--- a/layout/style/test/test_media_queries.html
+++ b/layout/style/test/test_media_queries.html
@@ -37,24 +37,16 @@ function run() {
   }
 
   function should_apply(q) {
     ok(query_applies(q), q + " should apply");
   }
 
   function should_not_apply(q) {
     ok(!query_applies(q), q + " should not apply");
-  }
-
-  function todo_should_apply(q) {
-    todo(query_applies(q), q + " should apply");
-  }
-
-  function todo_should_not_apply(q) {
-    todo(!query_applies(q), q + " should not apply");
   }
 
   /*
    * Functions to test whether a query is parseable at all.  (Should not
    * be used for parse errors within expressions.)
    */
   var parse_test_style_element = document.createElement("style");
   parse_test_style_element.type = "text/css";
@@ -96,26 +88,16 @@ function run() {
   function expression_should_be_parseable(e) {
     ok(expression_is_parseable(e),
        "expression " + e + " should be parseable");
   }
 
   function expression_should_not_be_parseable(e) {
     ok(!expression_is_parseable(e),
        "expression " + e + " should not be parseable");
-  }
-
-  function todo_expression_should_be_parseable(e) {
-    todo(expression_is_parseable(e),
-         "expression " + e + " should be parseable");
-  }
-
-  function todo_expression_should_not_be_parseable(e) {
-    todo(!expression_is_parseable(e),
-         "expression " + e + " should not be parseable");
   }
 
   // The no-type syntax doesn't mix with the not and only keywords.
   query_should_be_parseable("(orientation)");
   query_should_not_be_parseable("not (orientation)");
   query_should_not_be_parseable("only (orientation)");
   query_should_be_parseable("all and (orientation)");
   query_should_be_parseable("not all and (orientation)");
@@ -174,31 +156,26 @@ function run() {
     should_apply("all and (min-" + feature + ": " +
                  (Math.floor(value/em_size) - 1) + "em)");
     should_apply("all and (max-" + feature + ": " +
                  (Math.ceil(value/em_size) + 1) + "em)");
     should_not_apply("all and (max-" + feature + ": " +
                      (Math.floor(value/em_size) - 1) + "em)");
   }
 
-  // FIXME: The TODOs in this section are because the spec is still a
-  // bit unclear here.  Until I'm sure that the spec is really asking
-  // for the more complex implementation, I'm going to stick with the
-  // simpler one.  See
-  // http://lists.w3.org/Archives/Public/www-style/2008Jun/0212.html
   iframe_style.width = "0";
   should_apply("all and (height)");
-  todo_should_not_apply("all and (width)");
+  should_not_apply("all and (width)");
   iframe_style.height = "0";
-  todo_should_not_apply("all and (height)");
-  todo_should_not_apply("all and (width)");
+  should_not_apply("all and (height)");
+  should_not_apply("all and (width)");
   should_apply("all and (device-height)");
   should_apply("all and (device-width)");
   iframe_style.width = width_val + "px";
-  todo_should_not_apply("all and (height)");
+  should_not_apply("all and (height)");
   should_apply("all and (width)");
   iframe_style.height = height_val + "px";
   should_apply("all and (height)");
   should_apply("all and (width)");
 
   // ratio that reduces to 59/40
   iframe_style.width = "236px";
   iframe_style.height = "160px";
