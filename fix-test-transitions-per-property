From: L. David Baron <dbaron@dbaron.org>

Switch test_transitions_per_property to testing interpolation 1/4 of the way through instead of 1/2, so it will catch getting the halves backwards.

diff --git a/layout/style/test/test_transitions_per_property.html b/layout/style/test/test_transitions_per_property.html
--- a/layout/style/test/test_transitions_per_property.html
+++ b/layout/style/test/test_transitions_per_property.html
@@ -19,18 +19,21 @@ https://bugzilla.mozilla.org/show_bug.cg
 <a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=435441">Mozilla Bug 435441</a>
 
 <!--
   fixed-height container so percentage heights compute to different
   (i.e., nonzero) values
   fixed-width container so that percentages for margin-top and
   margin-bottom are all relative to the same size container (rather than
   one that depends on whether we're tall enough to need a scrollbar)
+
+  Use a 20px font size so that percentage line-height and vertical-align
+  doesn't accumulate rounding error.
   -->
-<div style="height: 50px; width: 300px">
+<div style="height: 50px; width: 300px; font-size: 20px">
 
 <div id="display">
 
 </div>
 </div>
 <pre id="test">
 <script type="application/javascript">
 
@@ -193,24 +196,29 @@ for (prop in gCSSProperties) {
     div.style.removeProperty(prop);
     div.style.removeProperty("-moz-transition");
     if ("prerequisites" in info) {
       var prereqs = info.prerequisites;
       for (var prereq in prereqs) {
         div.style.removeProperty(prereq);
       }
     }
+
+    if (div.style.cssText != "") {
+      ok(false, "properties left on div: " + div.style.cssText);
+    }
   }
 }
 
-// Do 4-second linear transitions with -2 second transition delay and
+// Do 4-second linear transitions with -1 second transition delay and
 // linear timing function so that we can expect the transition to be
-// right in the middle just after changing the property.
+// one quarter of the way through the value space right after changing
+// the property.
 div.style.setProperty("-moz-transition-duration", "4s", "");
-div.style.setProperty("-moz-transition-delay", "-2s", "");
+div.style.setProperty("-moz-transition-delay", "-1s", "");
 div.style.setProperty("-moz-transition-timing-function", "linear", "");
 for (prop in supported_properties) {
   var tinfo = supported_properties[prop];
   var info = gCSSProperties[prop];
 
   isnot(info.type, CSS_TYPE_TRUE_SHORTHAND,
         prop + " must not be a shorthand");
   if ("prerequisites" in info) {
@@ -224,17 +232,17 @@ for (prop in supported_properties) {
     tinfo[idx](prop);
   }
 
   // Make sure to unset the property and stop transitions on it.
   div.style.setProperty("-moz-transition-property", prop, "");
   div.style.setProperty("-moz-transition-delay", "-6s", "");
   div.style.removeProperty(prop);
   cs.getPropertyValue(prop);
-  div.style.setProperty("-moz-transition-delay", "-2s", "");
+  div.style.setProperty("-moz-transition-delay", "-1s", "");
 
   if ("prerequisites" in info) {
     var prereqs = info.prerequisites;
     for (var prereq in prereqs) {
       div.style.removeProperty(prereq);
     }
   }
 }
@@ -242,178 +250,178 @@ div.style.removeProperty("-moz-transitio
 
 function test_length_transition(prop) {
   div.style.setProperty("-moz-transition-property", "none", "");
   div.style.setProperty(prop, "4px", "");
   is(cs.getPropertyValue(prop), "4px",
      "length-valued property " + prop + ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
   div.style.setProperty(prop, "12px", "");
-  is(cs.getPropertyValue(prop), "8px",
+  is(cs.getPropertyValue(prop), "6px",
      "length-valued property " + prop + ": interpolation of lengths");
 }
 
 // Test using float values in the range [0, 1] (e.g. opacity)
 function test_float_zeroToOne_transition(prop) {
   div.style.setProperty("-moz-transition-property", "none", "");
   div.style.setProperty(prop, "0.3", "");
   is(cs.getPropertyValue(prop), "0.3",
      "float-valued property " + prop + ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
   div.style.setProperty(prop, "0.8", "");
-  is(cs.getPropertyValue(prop), "0.55",
+  is(cs.getPropertyValue(prop), "0.425",
      "float-valued property " + prop + ": interpolation of floats");
 }
 
 // Test using float values in the range [1, infinity) (e.g. stroke-miterlimit)
 function test_float_aboveOne_transition(prop) {
   div.style.setProperty("-moz-transition-property", "none", "");
   div.style.setProperty(prop, "1", "");
   is(cs.getPropertyValue(prop), "1",
      "float-valued property " + prop + ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
   div.style.setProperty(prop, "2.1", "");
-  is(cs.getPropertyValue(prop), "1.55",
+  is(cs.getPropertyValue(prop), "1.275",
      "float-valued property " + prop + ": interpolation of floats");
 }
 
 function test_percent_transition(prop) {
   div.style.setProperty("-moz-transition-property", "none", "");
   div.style.setProperty(prop, "25%", "");
   var av = cs.getPropertyValue(prop);
   var a = any_unit_to_num(av);
   div.style.setProperty(prop, "75%", "");
   var bv = cs.getPropertyValue(prop);
   var b = any_unit_to_num(bv);
   isnot(b, a, "different percentages (" + av + " and " + bv +
               ") should be different for " + prop);
   div.style.setProperty("-moz-transition-property", prop, "");
   div.style.setProperty(prop, "25%", "");
   var res = cs.getPropertyValue(prop);
-  is(any_unit_to_num(res) * 2, a + b,
+  is(any_unit_to_num(res) * 4, 3 * b + a,
      "percent-valued property " + prop + ": interpolation of percents: " +
-     res + " should be halfway between " + av + " and " + bv);
+     res + " should be a quarter of the way between " + bv + " and " + av);
   ok(has_num(res),
      "percent-valued property " + prop + ": percent computes to number");
 }
 
 function test_color_transition(prop) {
   div.style.setProperty("-moz-transition-property", "none", "");
   div.style.setProperty(prop, "rgb(255, 28, 0)", "");
   is(cs.getPropertyValue(prop), "rgb(255, 28, 0)",
      "color-valued property " + prop + ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
-  div.style.setProperty(prop, "rgb(77, 84, 128)", "");
-  is(cs.getPropertyValue(prop), "rgb(166, 56, 64)",
+  div.style.setProperty(prop, "rgb(75, 84, 128)", "");
+  is(cs.getPropertyValue(prop), "rgb(210, 42, 32)",
      "color-valued property " + prop + ": interpolation of colors");
 
   div.style.setProperty("-moz-transition-property", "none", "");
   div.style.setProperty(prop, "rgb(128, 64, 0)", "");
   (prop == "color" ? div.parentNode : div).style.
     setProperty("color", "rgb(0, 0, 128)", "");
   is(cs.getPropertyValue(prop), "rgb(128, 64, 0)",
      "color-valued property " + prop + ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
   div.style.setProperty(prop, "currentColor", "");
-  is(cs.getPropertyValue(prop), "rgb(64, 32, 64)",
+  is(cs.getPropertyValue(prop), "rgb(96, 48, 32)",
      "color-valued property " + prop + ": interpolation of currentColor");
   (prop == "color" ? div.parentNode : div).style.removeProperty("color");
 }
 
 function test_border_color_transition(prop) {
   div.style.setProperty("-moz-transition-property", "none", "");
   div.style.setProperty(prop, "rgb(128, 64, 0)", "");
   div.style.setProperty("color", "rgb(0, 0, 128)", "");
   is(cs.getPropertyValue(prop), "rgb(128, 64, 0)",
      "color-valued property " + prop + ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
   div.style.removeProperty(prop);
-  is(cs.getPropertyValue(prop), "rgb(64, 32, 64)",
+  is(cs.getPropertyValue(prop), "rgb(96, 48, 32)",
      "color-valued property " + prop + ": interpolation of initial value");
   div.style.removeProperty("color");
 }
 
 function test_shadow_transition(prop) {
   var spreadStr = (prop == "-moz-box-shadow") ? " 0px" : "";
 
   div.style.setProperty("-moz-transition-property", "none", "");
   div.style.setProperty(prop, "none", "");
   is(cs.getPropertyValue(prop), "none",
      "shadow-valued property " + prop + ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
   div.style.setProperty(prop, "4px 8px 3px red", "");
-  is(cs.getPropertyValue(prop), "rgba(255, 0, 0, 0.5) 2px 4px 1.5px" + spreadStr,
+  is(cs.getPropertyValue(prop), "rgba(255, 0, 0, 0.25) 1px 2px 0.75px" + spreadStr,
      "shadow-valued property " + prop + ": interpolation of shadows");
 
   div.style.setProperty("-moz-transition-property", "none", "");
-  div.style.setProperty(prop, "green 4px 4px, 2px 2px blue", "");
-  is(cs.getPropertyValue(prop), "rgb(0, 128, 0) 4px 4px 0px" + spreadStr + ", rgb(0, 0, 255) 2px 2px 0px" + spreadStr,
+  div.style.setProperty(prop, "#038000 4px 4px, 2px 2px blue", "");
+  is(cs.getPropertyValue(prop), "rgb(3, 128, 0) 4px 4px 0px" + spreadStr + ", rgb(0, 0, 255) 2px 2px 0px" + spreadStr,
      "shadow-valued property " + prop + ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
   div.style.setProperty(prop, "8px 8px 8px red", "");
-  is(cs.getPropertyValue(prop), "rgb(128, 64, 0) 6px 6px 4px" + spreadStr + ", rgba(0, 0, 255, 0.5) 1px 1px 0px" + spreadStr,
+  is(cs.getPropertyValue(prop), "rgb(66, 96, 0) 5px 5px 2px" + spreadStr + ", rgba(0, 0, 255, 0.75) 1.5px 1.5px 0px" + spreadStr,
      "shadow-valued property " + prop + ": interpolation of shadows");
 
   if (prop == "-moz-box-shadow") {
     div.style.setProperty(prop, "8px 8px 8px red inset", "");
     is(cs.getPropertyValue(prop), "rgb(255, 0, 0) 8px 8px 8px 0px inset",
        "shadow-valued property " + prop + ": non-interpolable cases");
     div.style.setProperty(prop, "8px 8px 8px 8px red inset", "");
-    is(cs.getPropertyValue(prop), "rgb(255, 0, 0) 8px 8px 8px 4px inset",
+    is(cs.getPropertyValue(prop), "rgb(255, 0, 0) 8px 8px 8px 2px inset",
        "shadow-valued property " + prop + ": interpolation of spread");
     // Leave in same state whether in the |if| or not.
     div.style.setProperty(prop, "8px 8px 8px red", "");
     is(cs.getPropertyValue(prop), "rgb(255, 0, 0) 8px 8px 8px 0px",
        "shadow-valued property " + prop + ": non-interpolable cases");
   }
 
   var defaultColor = cs.getPropertyValue("color") + " ";
   div.style.setProperty(prop, "2px 2px 2px", "");
   is(cs.getPropertyValue(prop), defaultColor + "2px 2px 2px" + spreadStr,
      "shadow-valued property " + prop + ": non-interpolable cases");
-  div.style.setProperty(prop, "4px 8px 6px", "");
+  div.style.setProperty(prop, "6px 14px 10px", "");
   is(cs.getPropertyValue(prop), defaultColor + "3px 5px 4px" + spreadStr,
      "shadow-valued property " + prop + ": interpolation without color");
 }
 
 function test_dasharray_transition(prop) {
   div.style.setProperty("-moz-transition-property", "none", "");
   div.style.setProperty(prop, "3", "");
   is(cs.getPropertyValue(prop), "3",
      "dasharray-valued property " + prop +
      ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
-  div.style.setProperty(prop, "9px", "");
+  div.style.setProperty(prop, "15px", "");
   is(cs.getPropertyValue(prop), "6",
      "dasharray-valued property " + prop + ": interpolation of dasharray");
   div.style.setProperty(prop, "none", "");
   is(cs.getPropertyValue(prop), "none",
      "dasharray-valued property " + prop + ": non-interpolability of none");
   div.style.setProperty(prop, "6,8px,4,4", "");
   is(cs.getPropertyValue(prop), "6, 8px, 4, 4",
      "dasharray-valued property " + prop +
      ": computed value before transition");
-  div.style.setProperty(prop, "10, 10,10,10px", "");
+  div.style.setProperty(prop, "14, 12,16,16px", "");
   is(cs.getPropertyValue(prop), "8, 9, 7, 7",
      "dasharray-valued property " + prop + ": interpolation of dasharray");
   div.style.setProperty(prop, "none", "");
   is(cs.getPropertyValue(prop), "none",
      "dasharray-valued property " + prop + ": non-interpolability of none");
-  div.style.setProperty(prop, "4,8,2", "");
-  is(cs.getPropertyValue(prop), "4, 8, 2",
+  div.style.setProperty(prop, "8,16,4", "");
+  is(cs.getPropertyValue(prop), "8, 16, 4",
      "dasharray-valued property " + prop +
      ": computed value before transition");
-  div.style.setProperty(prop, "2,4,6,8", "");
-  is(cs.getPropertyValue(prop), "3, 6, 4, 6, 5, 3, 5, 8, 2, 4, 7, 5",
+  div.style.setProperty(prop, "4,8,12,16", "");
+  is(cs.getPropertyValue(prop), "7, 14, 6, 10, 13, 5, 9, 16, 4, 8, 15, 7",
      "dasharray-valued property " + prop + ": interpolation of dasharray");
-  div.style.setProperty(prop, "2,50%,6,8", "");
-  is(cs.getPropertyValue(prop), "2, 50%, 6, 8",
+  div.style.setProperty(prop, "2,50%,6,10", "");
+  is(cs.getPropertyValue(prop), "2, 50%, 6, 10",
      "dasharray-valued property " + prop + ": non-interpolability of mixed units");
-  div.style.setProperty(prop, "4,20%,2,2", "");
-  is(cs.getPropertyValue(prop), "3, 35%, 4, 5",
+  div.style.setProperty(prop, "6,30%,2,2", "");
+  is(cs.getPropertyValue(prop), "3, 45%, 5, 8",
      "dasharray-valued property " + prop + ": interpolation of dasharray");
 }
 
 function test_radius_transition(prop) {
   div.style.setProperty("-moz-transition-property", "none", "");
 
   // FIXME: Test a square for now, since we haven't updated to the spec
   // for vertical components being relative to the height.
@@ -422,158 +430,158 @@ function test_radius_transition(prop) {
   div.style.setProperty("border", "none", "");
   div.style.setProperty("padding", "0", "");
 
   div.style.setProperty(prop, "3px", "");
   is(cs.getPropertyValue(prop), "3px",
      "radius-valued property " + prop +
      ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
-  div.style.setProperty(prop, "9px", "");
+  div.style.setProperty(prop, "15px", "");
   is(cs.getPropertyValue(prop), "6px",
      "radius-valued property " + prop + ": interpolation of radius");
   div.style.setProperty(prop, "5%", "");
   is(cs.getPropertyValue(prop), "10px",
      "radius-valued property " + prop + ": non-interpolability of unit change");
   div.style.setProperty(prop, "25%", "");
-  is(cs.getPropertyValue(prop), "30px",
+  is(cs.getPropertyValue(prop), "20px",
      "radius-valued property " + prop + ": interpolation of radius");
   div.style.setProperty(prop, "3px 8px", "");
   is(cs.getPropertyValue(prop), "3px 8px",
      "radius-valued property " + prop + ": non-interpolability of unit change");
-  div.style.setProperty(prop, "9px 10px", "");
+  div.style.setProperty(prop, "15px 12px", "");
   is(cs.getPropertyValue(prop), "6px 9px",
      "radius-valued property " + prop + ": interpolation of radius");
   div.style.setProperty(prop, "5% 15%", "");
   is(cs.getPropertyValue(prop), "10px 30px",
      "radius-valued property " + prop + ": non-interpolability of unit change");
   div.style.setProperty(prop, "25%", "");
-  is(cs.getPropertyValue(prop), "30px 40px",
+  is(cs.getPropertyValue(prop), "20px 35px",
      "radius-valued property " + prop + ": interpolation of radius");
 
   div.style.removeProperty("width");
   div.style.removeProperty("height");
   div.style.removeProperty("border");
   div.style.removeProperty("padding");
 }
 
 function test_zindex_transition(prop) {
   div.style.setProperty("-moz-transition-property", "none", "");
   div.style.setProperty(prop, "4", "");
   is(cs.getPropertyValue(prop), "4",
      "integer-valued property " + prop + ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
-  div.style.setProperty(prop, "-5", "");
+  div.style.setProperty(prop, "-14", "");
   is(cs.getPropertyValue(prop), "-1",
      "integer-valued property " + prop + ": interpolation of lengths");
   div.style.setProperty(prop, "auto", "");
   is(cs.getPropertyValue(prop), "auto",
      "integer-valued property " + prop + ": auto not interpolable");
   div.style.setProperty(prop, "-4", "");
   is(cs.getPropertyValue(prop), "-4",
      "integer-valued property " + prop + ": computed value before transition");
   div.style.setProperty(prop, "8", "");
-  is(cs.getPropertyValue(prop), "2",
+  is(cs.getPropertyValue(prop), "-1",
      "integer-valued property " + prop + ": interpolation of lengths");
 }
 
 function test_font_stretch(prop) {
   is(prop, "font-stretch", "only designed for one property");
 
   div.style.setProperty("-moz-transition-property", "none", "");
   div.style.setProperty(prop, "normal", "");
   is(cs.getPropertyValue(prop), "normal",
      "font-stretch property " + prop + ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
   div.style.setProperty(prop, "ultra-expanded", "");
-  is(cs.getPropertyValue(prop), "expanded",
+  is(cs.getPropertyValue(prop), "semi-expanded",
      "font-stretch property " + prop + ": interpolation of font-stretches");
   div.style.setProperty(prop, "wider", "");
   is(cs.getPropertyValue(prop), "wider",
      "font-stretch property " + prop + ": can't interpolate wider/narrower");
   div.style.setProperty(prop, "expanded", "");
   is(cs.getPropertyValue(prop), "expanded",
      "font-stretch property " + prop + ": computed value before transition");
   div.style.setProperty(prop, "extra-condensed", "");
-  is(cs.getPropertyValue(prop), "semi-condensed",
+  is(cs.getPropertyValue(prop), "normal",
      "font-stretch property " + prop + ": interpolation of font-stretches");
 }
 
 function test_font_weight(prop) {
   is(prop, "font-weight", "only designed for one property");
 
   div.style.setProperty("-moz-transition-property", "none", "");
   div.style.setProperty(prop, "normal", "");
   is(cs.getPropertyValue(prop), "400",
      "font-weight property " + prop + ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
   div.style.setProperty(prop, "900", "");
-  is(cs.getPropertyValue(prop), "600",
+  is(cs.getPropertyValue(prop), "500",
      "font-weight property " + prop + ": interpolation of font-weights");
   div.style.setProperty(prop, "lighter", "");
   is(cs.getPropertyValue(prop), "lighter",
      "font-weight property " + prop + ": can't interpolate bolder/lighter");
-  div.style.setProperty(prop, "700", "");
-  is(cs.getPropertyValue(prop), "700",
+  div.style.setProperty(prop, "900", "");
+  is(cs.getPropertyValue(prop), "900",
      "font-weight property " + prop + ": computed value before transition");
   div.style.setProperty(prop, "100", "");
-  is(cs.getPropertyValue(prop), "400",
+  is(cs.getPropertyValue(prop), "700",
      "font-weight property " + prop + ": interpolation of font-weights");
 }
 
 function test_pos_integer_or_auto_transition(prop) {
   div.style.setProperty("-moz-transition-property", "none", "");
   div.style.setProperty(prop, "4", "");
   is(cs.getPropertyValue(prop), "4",
      "integer-valued property " + prop + ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
-  div.style.setProperty(prop, "7", "");
+  div.style.setProperty(prop, "11", "");
   is(cs.getPropertyValue(prop), "5",
      "integer-valued property " + prop + ": interpolation of lengths");
   div.style.setProperty(prop, "auto", "");
   is(cs.getPropertyValue(prop), "auto",
      "integer-valued property " + prop + ": auto not interpolable");
   div.style.setProperty(prop, "8", "");
   is(cs.getPropertyValue(prop), "8",
      "integer-valued property " + prop + ": computed value before transition");
   div.style.setProperty(prop, "4", "");
-  is(cs.getPropertyValue(prop), "6",
+  is(cs.getPropertyValue(prop), "7",
      "integer-valued property " + prop + ": interpolation of lengths");
 }
 
 function test_length_pair_transition(prop) {
   div.style.setProperty("-moz-transition-property", "none", "");
-  div.style.setProperty(prop, "4px 8px", "");
-  is(cs.getPropertyValue(prop), "4px 8px",
+  div.style.setProperty(prop, "4px 6px", "");
+  is(cs.getPropertyValue(prop), "4px 6px",
      "length-valued property " + prop + ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
   div.style.setProperty(prop, "12px 10px", "");
-  is(cs.getPropertyValue(prop), "8px 9px",
+  is(cs.getPropertyValue(prop), "6px 7px",
      "length-valued property " + prop + ": interpolation of lengths");
 }
 
 function test_length_percent_pair_transition(prop) {
   div.style.setProperty("-moz-transition-property", "none", "");
   div.style.setProperty(prop, "4px 50%", "");
   is(cs.getPropertyValue(prop), "4px 50%",
      "length-valued property " + prop + ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
   div.style.setProperty(prop, "12px 70%", "");
-  is(cs.getPropertyValue(prop), "8px 60%",
+  is(cs.getPropertyValue(prop), "6px 55%",
      "length-valued property " + prop + ": interpolation of lengths");
 }
 
 function test_rect_transition(prop) {
   div.style.setProperty("-moz-transition-property", "none", "");
-  div.style.setProperty(prop, "rect(4px, 16px, 12px, 8px)", "");
-  is(cs.getPropertyValue(prop), "rect(4px, 16px, 12px, 8px)",
+  div.style.setProperty(prop, "rect(4px, 16px, 12px, 6px)", "");
+  is(cs.getPropertyValue(prop), "rect(4px, 16px, 12px, 6px)",
      "rect-valued property " + prop + ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
-  div.style.setProperty(prop, "rect(0px, 6px, 4px, 2px)", "");
-  is(cs.getPropertyValue(prop), "rect(2px, 11px, 8px, 5px)",
+  div.style.setProperty(prop, "rect(0px, 4px, 4px, 2px)", "");
+  is(cs.getPropertyValue(prop), "rect(3px, 13px, 10px, 5px)",
      "rect-valued property " + prop + ": interpolation of rects");
   if (prop == "clip") {
     div.style.setProperty(prop, "rect(0px, 6px, 4px, auto)", "");
     is(cs.getPropertyValue(prop), "rect(0px, 6px, 4px, auto)",
        "rect-valued property " + prop + ": can't interpolate auto components");
     div.style.setProperty(prop, "rect(0px, 6px, 4px, 2px)", "");
   }
   div.style.setProperty(prop, "auto", "");
@@ -594,53 +602,53 @@ function test_visibility_transition(prop
 
 function test_background_size_transition(prop) {
   div.style.setProperty("-moz-transition-property", "none", "");
   div.style.setProperty(prop, "50% 80%", "");
   is(cs.getPropertyValue(prop), "50% 80%",
      "property " + prop + ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
   div.style.setProperty(prop, "100% 100%", "");
-  is(cs.getPropertyValue(prop), "75% 90%",
+  is(cs.getPropertyValue(prop), "62.5% 85%",
      "property " + prop + ": interpolation of percents");
   div.style.setProperty(prop, "contain", "");
   is(cs.getPropertyValue(prop), "contain",
      "property " + prop + ": can't interpolate 'contain'");
   test_background_position_size_common(prop);
 }
 
 function test_background_position_transition(prop) {
   div.style.setProperty("-moz-transition-property", "none", "");
   div.style.setProperty(prop, "center 80%", "");
   is(cs.getPropertyValue(prop), "50% 80%",
      "property " + prop + ": computed value before transition");
   div.style.setProperty("-moz-transition-property", prop, "");
   div.style.setProperty(prop, "bottom right", "");
-  is(cs.getPropertyValue(prop), "75% 90%",
+  is(cs.getPropertyValue(prop), "62.5% 85%",
      "property " + prop + ": interpolation of percents");
   test_background_position_size_common(prop);
 }
 
 function test_background_position_size_common(prop) {
   div.style.setProperty(prop, "10px 40px", "");
   is(cs.getPropertyValue(prop), "10px 40px",
      "property " + prop + ": computed value before transition");
   div.style.setProperty(prop, "50px 0", "");
-  is(cs.getPropertyValue(prop), "30px 20px",
+  is(cs.getPropertyValue(prop), "20px 30px",
      "property " + prop + ": interpolation of lengths");
   div.style.setProperty(prop, "10px 40px, 50px 50px, 30px 20px", "");
   is(cs.getPropertyValue(prop), "10px 40px, 50px 50px, 30px 20px",
      "property " + prop + ": computed value before transition");
   div.style.setProperty(prop, "50px 20px, 70px 50px, 30px 40px", "");
-  is(cs.getPropertyValue(prop), "30px 30px, 60px 50px, 30px 30px",
+  is(cs.getPropertyValue(prop), "20px 35px, 55px 50px, 30px 25px",
      "property " + prop + ": interpolation of lists of lengths");
   div.style.setProperty(prop, "10px 40%, 50% 50px, 30% 20%", "");
   is(cs.getPropertyValue(prop), "10px 40%, 50% 50px, 30% 20%",
      "property " + prop + ": computed value before transition");
   div.style.setProperty(prop, "50px 20%, 70% 50px, 30% 40%", "");
-  is(cs.getPropertyValue(prop), "30px 30%, 60% 50px, 30% 30%",
+  is(cs.getPropertyValue(prop), "20px 35%, 55% 50px, 30% 25%",
      "property " + prop + ": interpolation of lists of lengths and percents");
 }
 
 </script>
 </pre>
 </body>
 </html>
