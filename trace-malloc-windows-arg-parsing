Attempt to fix broken --shutdown-leaks argument parsing on Windows.  b=433708

diff --git a/tools/trace-malloc/lib/nsTraceMalloc.c b/tools/trace-malloc/lib/nsTraceMalloc.c
--- a/tools/trace-malloc/lib/nsTraceMalloc.c
+++ b/tools/trace-malloc/lib/nsTraceMalloc.c
@@ -146,7 +146,10 @@ static logfile   **logfile_tail = &logfi
 static logfile   **logfile_tail = &logfile_list;
 static logfile   *logfp = &default_logfile;
 static PRLock    *tmlock = NULL;
-static char      *sdlogname = NULL; /* filename for shutdown leak log */
+#ifndef PATH_MAX
+#define PATH_MAX 4096
+#endif
+static char      sdlogname[PATH_MAX]; /* filename for shutdown leak log */
 
 /*
  * This enables/disables trace-malloc logging.
@@ -1384,7 +1387,7 @@ NS_TraceMallocStartupArgs(int argc, char
 NS_TraceMallocStartupArgs(int argc, char **argv)
 {
     int i, logfd = -1, consumed, logflags;
-    char *tmlogname = NULL; /* note global |sdlogname| */
+    char *tmlogname = NULL, *sdlogname_local = NULL;
 
     /*
      * Look for the --trace-malloc <logfile> option early, to avoid missing
@@ -1395,8 +1398,8 @@ NS_TraceMallocStartupArgs(int argc, char
         consumed = 0;
         if (SHOULD_PARSE_ARG(TMLOG_OPTION, tmlogname, argv[i]))
             PARSE_ARG(TMLOG_OPTION, tmlogname, argv, i, consumed);
-        else if (SHOULD_PARSE_ARG(SDLOG_OPTION, sdlogname, argv[i]))
-            PARSE_ARG(SDLOG_OPTION, sdlogname, argv, i, consumed);
+        else if (SHOULD_PARSE_ARG(SDLOG_OPTION, sdlogname_local, argv[i]))
+            PARSE_ARG(SDLOG_OPTION, sdlogname_local, argv, i, consumed);
 
         if (consumed) {
 #ifndef XP_WIN32 /* If we don't comment this out, it will crash Windows. */
@@ -1494,6 +1497,13 @@ NS_TraceMallocStartupArgs(int argc, char
             }
             break;
         }
+    }
+
+    if (sdlogname_local) {
+        strncpy(sdlogname, sdlogname_local, sizeof(sdlogname));
+        sdlogname[sizeof(sdlogname) - 1] = '\0';
+    } else {
+        sdlogname[0] = '\0';
     }
 
     NS_TraceMallocStartup(logfd);
