From: Zack Weinberg <zweinberg@mozilla.com>

Change CSS parser to close constructs open at end-of-file by changing ExpectSymbol not to fail on EOF when expecting  one of }, ), ], or ;.  (Bug 325064)

diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -514,16 +514,19 @@ NS_NewCSSParser(nsICSSParser** aInstance
   mScanner.ReportUnexpected(#msg_)
 
 #define REPORT_UNEXPECTED_P(msg_, params_) \
   mScanner.ReportUnexpectedParams(#msg_, params_, NS_ARRAY_LENGTH(params_))
 
 #define REPORT_UNEXPECTED_EOF(lf_) \
   mScanner.ReportUnexpectedEOF(#lf_)
 
+#define REPORT_UNEXPECTED_EOF_CHAR(ch_) \
+  mScanner.ReportUnexpectedEOF(ch_)
+
 #define REPORT_UNEXPECTED_TOKEN(msg_) \
   mScanner.ReportUnexpectedToken(mToken, #msg_)
 
 #define REPORT_UNEXPECTED_TOKEN_P(msg_, params_) \
   mScanner.ReportUnexpectedTokenParams(mToken, #msg_, \
                                        params_, NS_ARRAY_LENGTH(params_))
 
 
@@ -533,16 +536,17 @@ NS_NewCSSParser(nsICSSParser** aInstance
 #define CLEAR_ERROR() \
   mScanner.ClearError()
 
 #else
 
 #define REPORT_UNEXPECTED(msg_)
 #define REPORT_UNEXPECTED_P(msg_, params_)
 #define REPORT_UNEXPECTED_EOF(lf_)
+#define REPORT_UNEXPECTED_EOF_CHAR(ch_)
 #define REPORT_UNEXPECTED_TOKEN(msg_)
 #define REPORT_UNEXPECTED_TOKEN_P(msg_, params_)
 #define OUTPUT_ERROR()
 #define CLEAR_ERROR()
 
 #endif
 
 CSSParserImpl::CSSParserImpl()
@@ -1161,17 +1165,27 @@ void CSSParserImpl::UngetToken()
   mHavePushBack = PR_TRUE;
 }
 
 PRBool CSSParserImpl::ExpectSymbol(nsresult& aErrorCode,
                                    PRUnichar aSymbol,
                                    PRBool aSkipWS)
 {
   if (!GetToken(aErrorCode, aSkipWS)) {
-    return PR_FALSE;
+    // CSS2.1 specifies that all "open constructs" are to be closed at
+    // EOF.  It simplifies higher layers if we claim to have found an
+    // ), ], }, or ; if we encounter EOF while looking for one of them.
+    // Do still issue a diagnostic, to aid debugging.
+    if (aSymbol == ')' || aSymbol == ']' ||
+        aSymbol == '}' || aSymbol == ';') {
+      REPORT_UNEXPECTED_EOF_CHAR(aSymbol);
+      return PR_TRUE;
+    }
+    else
+      return PR_FALSE;
   }
   if (mToken.IsSymbol(aSymbol)) {
     return PR_TRUE;
   }
   UngetToken();
   return PR_FALSE;
 }
 
@@ -1355,19 +1369,26 @@ PRBool CSSParserImpl::GatherMedia(nsresu
       UngetToken();
       break;
     }
     ToLowerCase(mToken.mIdent);  // case insensitive from CSS - must be lower cased
     nsCOMPtr<nsIAtom> medium = do_GetAtom(mToken.mIdent);
     aMedia->AppendAtom(medium);
 
     if (!GetToken(aErrorCode, PR_TRUE)) {
+      // expected termination by EOF
       if (aStopSymbol == PRUnichar(0))
         return PR_TRUE;
+
+      // unexpected termination by EOF; if we were looking for a
+      // semicolon, return true anyway, for the same reason this is
+      // done by ExpectSymbol().
       REPORT_UNEXPECTED_EOF(PEGatherMediaEOF);
+      if (aStopSymbol == PRUnichar(';'))
+        return PR_TRUE;
       break;
     }
 
     if (eCSSToken_Symbol == mToken.mType &&
         mToken.mSymbol == aStopSymbol) {
       UngetToken();
       return PR_TRUE;
     } else if (eCSSToken_Symbol != mToken.mType ||
diff --git a/layout/style/nsCSSScanner.cpp b/layout/style/nsCSSScanner.cpp
--- a/layout/style/nsCSSScanner.cpp
+++ b/layout/style/nsCSSScanner.cpp
@@ -387,28 +387,44 @@ void nsCSSScanner::ReportUnexpectedParam
 
   nsXPIDLString str;
   gStringBundle->FormatStringFromName(NS_ConvertASCIItoUTF16(aMessage).get(),
                                       aParams, aParamsLength,
                                       getter_Copies(str));
   AddToError(str);
 }
 
-// aMessage must take no parameters
+// aLookingFor is a plain string, not a format string
 void nsCSSScanner::ReportUnexpectedEOF(const char* aLookingFor)
 {
   ENSURE_STRINGBUNDLE;
 
   nsXPIDLString innerStr;
   gStringBundle->GetStringFromName(NS_ConvertASCIItoUTF16(aLookingFor).get(),
                                    getter_Copies(innerStr));
 
   const PRUnichar *params[] = {
     innerStr.get()
   };
+  nsXPIDLString str;
+  gStringBundle->FormatStringFromName(NS_LITERAL_STRING("PEUnexpEOF2").get(),
+                                      params, NS_ARRAY_LENGTH(params),
+                                      getter_Copies(str));
+  AddToError(str);
+}
+
+// aLookingFor is a single character
+void nsCSSScanner::ReportUnexpectedEOF(PRUnichar aLookingFor)
+{
+  ENSURE_STRINGBUNDLE;
+
+  const PRUnichar lookingForStr[] = {
+    PRUnichar('\''), aLookingFor, PRUnichar('\''), PRUnichar(0)
+  };
+  const PRUnichar *params[] = { lookingForStr };
   nsXPIDLString str;
   gStringBundle->FormatStringFromName(NS_LITERAL_STRING("PEUnexpEOF2").get(),
                                       params, NS_ARRAY_LENGTH(params),
                                       getter_Copies(str));
   AddToError(str);
 }
 
 // aMessage must take 1 parameter (for the string representation of the
diff --git a/layout/style/nsCSSScanner.h b/layout/style/nsCSSScanner.h
--- a/layout/style/nsCSSScanner.h
+++ b/layout/style/nsCSSScanner.h
@@ -152,18 +152,20 @@ class nsCSSScanner {
   NS_HIDDEN_(void) OutputError();
   NS_HIDDEN_(void) ClearError();
 
   // aMessage must take no parameters
   NS_HIDDEN_(void) ReportUnexpected(const char* aMessage);
   NS_HIDDEN_(void) ReportUnexpectedParams(const char* aMessage,
                                           const PRUnichar **aParams,
                                           PRUint32 aParamsLength);
-  // aMessage must take no parameters
+  // aLookingFor is a plain string, not a format string
   NS_HIDDEN_(void) ReportUnexpectedEOF(const char* aLookingFor);
+  // aLookingFor is a single character
+  NS_HIDDEN_(void) ReportUnexpectedEOF(PRUnichar aLookingFor);
   // aMessage must take 1 parameter (for the string representation of the
   // unexpected token)
   NS_HIDDEN_(void) ReportUnexpectedToken(nsCSSToken& tok,
                                          const char *aMessage);
   // aParams's first entry must be null, and we'll fill in the token
   NS_HIDDEN_(void) ReportUnexpectedTokenParams(nsCSSToken& tok,
                                                const char* aMessage,
                                                const PRUnichar **aParams,
diff --git a/layout/style/test/Makefile.in b/layout/style/test/Makefile.in
--- a/layout/style/test/Makefile.in
+++ b/layout/style/test/Makefile.in
@@ -90,30 +90,31 @@ _TEST_FILES =	test_bug73586.html \
 		test_bug391034.html \
 		test_bug391221.html \
 		test_bug397427.html \
 		test_bug401046.html \
 		test_bug405818.html \
 		test_bug412901.html \
 		test_bug437915.html \
 		test_compute_data_with_start_struct.html \
+		test_css_eof_handling.html \
 		test_dont_use_document_colors.html \
+		test_inherit_computation.html \
 		test_inherit_storage.html \
-		test_inherit_computation.html \
+		test_initial_computation.html \
 		test_initial_storage.html \
-		test_initial_computation.html \
 		test_of_type_selectors.xhtml \
 		test_parse_rule.html \
 		test_property_database.html \
 		test_property_syntax_errors.html \
 		test_selectors.html \
 		test_selectors_on_anonymous_content.html \
 		test_style_struct_copy_constructors.html \
+		test_value_computation.html \
 		test_value_storage.html \
-		test_value_computation.html \
 		css_properties.js \
 		property_database.js \
 		unstyled.xml \
 		unstyled.css \
 		unstyled-frame.xml \
 		unstyled-frame.css \
 		redirect-1.css \
 		post-redirect-1.css \
diff --git a/layout/style/test/test_css_eof_handling.html b/layout/style/test/test_css_eof_handling.html
new file mode 100644
--- /dev/null
+++ b/layout/style/test/test_css_eof_handling.html
@@ -0,0 +1,283 @@
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Test for CSS EOF handling</title>
+  <script type="text/javascript" src="/MochiKit/MochiKit.js"></script>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<p><a target="_blank"
+   href="https://bugzilla.mozilla.org/show_bug.cgi?id=311616">bug 311616</a>,
+<a target="_blank"
+   href="https://bugzilla.mozilla.org/show_bug.cgi?id=325064">bug 325064</a></p>
+<iframe id="display"></iframe>
+<p id="log"></p>
+<pre id="test">
+<script class="testbody" type="text/javascript">
+const tests = [
+  {
+      name: "basic rule",
+      ref: "#r {background-color : orange}",
+      tst: "#t {background-color : orange",
+      prop: "background-color", pseudo: ""
+  },
+  {
+      name: "function",
+      ref: "#r {background-color: rgb(0,255,0)}",
+      tst: "#t {background-color: rgb(0,255,0",
+      prop: "background-color", pseudo: ""
+  },
+  {
+      name: "comment",
+      ref: "#r {background-color: aqua/*marine*/}",
+      tst: "#t {background-color: aqua/*marine",
+      prop: "background-color", pseudo: ""
+  },
+  {
+      name: "@media 1",
+      ref: "@media all { #r { background-color: yellow } }",
+      tst: "@media all { #t { background-color: yellow }",
+      prop: "background-color", pseudo: ""
+  },
+  {
+      name: "@media 2",
+      ref: "@media all { #r { background-color: magenta } }",
+      tst: "@media all { #t { background-color: magenta",
+      prop: "background-color", pseudo: ""
+  },
+  {
+      name: "@import 1",
+      ref: "@import 'data:text/css,%23r%7Bbackground-color%3Agray%7D';",
+      tst: "@import 'data:text/css,%23t%7Bbackground-color%3Agray%7D",
+      prop: "background-color", pseudo: ""
+  },
+  {
+      name: "@import 2",
+      ref: "@import 'data:text/css,%23r%7Bbackground-color%3Ablack%7D' all;",
+      tst: "@import 'data:text/css,%23t%7Bbackground-color%3Ablack%7D' all",
+      prop: "background-color", pseudo: ""
+  },
+  {
+      name: "url-token 1",
+      ref: "#r { background-image: url(data:image/png;base64," +
+           "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAEAQAAAACBiqPTAAAADklEQVQI12NI" +
+           "YJgAhAkAB4gB4Ry+pcoAAAAASUVORK5CYII=) }",
+      tst: "#t { background-image: url(data:image/png;base64," +
+           "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAEAQAAAACBiqPTAAAADklEQVQI12NI" +
+           "YJgAhAkAB4gB4Ry+pcoAAAAASUVORK5CYII=",
+      prop: "background-image", pseudo: ""
+  },
+  {
+      name: "url-token 2",
+      ref: "#r { background-image: url('data:image/png;base64," +
+           "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAEAQAAAACBiqPTAAAAEElEQVQI12Mo" +
+           "YNjAcIHhAQAJ2ALR4kRk1gAAAABJRU5ErkJggg==') }",
+      tst: "#t { background-image: url('data:image/png;base64," +
+           "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAEAQAAAACBiqPTAAAAEElEQVQI12Mo" +
+           "YNjAcIHhAQAJ2ALR4kRk1gAAAABJRU5ErkJggg==",
+      prop: "background-image", pseudo: ""
+  },
+  {
+      name: "url-token 3",
+      ref: "#r { background-image: url('data:image/png;base64," +
+           "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAEAQAAAACBiqPTAAAAEElEQVQI12N4" +
+           "wHCBYQNDAQAMuALRrGb97AAAAABJRU5ErkJggg==') }",
+      tst: "#t { background-image: url('data:image/png;base64," +
+           "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAEAQAAAACBiqPTAAAAEElEQVQI12N4" +
+           "wHCBYQNDAQAMuALRrGb97AAAAABJRU5ErkJggg=='",
+      prop: "background-image", pseudo: ""
+  },
+  {
+      name: "counter",
+      ref: "#r::before { content: counter(tr, upper-alpha) }",
+      tst: "#t::before { content: counter(tr, upper-alpha",
+      prop: "content", pseudo: "::before"
+  },
+  {
+      name: "string",
+      ref: "#r::before { content: 'B' }",
+      tst: "#t::before { content: 'B",
+      prop: "content", pseudo: "::before"
+  },
+
+  /* For these tests, there is no visible effect on computed style;
+     instead we have to audit the DOM stylesheet object.  */
+
+  {
+      todo: 1,
+      name: "selector 1",
+      ref: "td[colspan='3'] {}",
+      tst: "td[colspan='3"
+  },
+  {
+      todo: 1,
+      name: "selector 2",
+      ref: "td[colspan='3'] {}",
+      tst: "td[colspan='3'"
+  },
+  {
+      todo: 1, 
+      name: "selector 3",
+      ref: "td:lang(en) {}",
+      tst: "td:lang(en"
+  },
+  
+  {
+      name: "@charset 1",
+      ref: "@charset 'utf-8';",
+      tst: "@charset 'utf-8"
+  },
+  {
+      name: "@charset 2",
+      ref: "@charset 'utf-8';",
+      tst: "@charset 'utf-8'"
+  },
+  {
+      name: "@media 3",
+      ref: "@media all {}",
+      tst: "@media all {",
+  },
+  {
+      name: "@namespace 1a",
+      ref: "@namespace foo url('http://foo.example.com/');",
+      tst: "@namespace foo url('http://foo.example.com/')"
+  },
+  {
+      name: "@namespace 1b",
+      ref: "@namespace foo url(http://foo.example.com/);",
+      tst: "@namespace foo url(http://foo.example.com/"
+  },
+  {
+      name: "@namespace 1c",
+      ref: "@namespace foo url('http://foo.example.com/');",
+      tst: "@namespace foo url('http://foo.example.com/"
+  },
+  {
+      name: "@namespace 1d",
+      ref: "@namespace foo 'http://foo.example.com/';",
+      tst: "@namespace foo 'http://foo.example.com/'"
+  },
+  {
+      name: "@namespace 1e",
+      ref: "@namespace foo 'http://foo.example.com/';",
+      tst: "@namespace foo 'http://foo.example.com/"
+  },
+  {
+      name: "@namespace 2a",
+      ref: "@namespace url('http://foo.example.com/');",
+      tst: "@namespace url('http://foo.example.com/')"
+  },
+  {
+      name: "@namespace 2b",
+      ref: "@namespace url('http://foo.example.com/');",
+      tst: "@namespace url('http://foo.example.com/'"
+  },
+  {
+      name: "@namespace 2c",
+      ref: "@namespace url('http://foo.example.com/');",
+      tst: "@namespace url('http://foo.example.com/"
+  },
+  {
+      name: "@namespace 2d",
+      ref: "@namespace 'http://foo.example.com/';",
+      tst: "@namespace 'http://foo.example.com/'"
+  },
+  {
+      name: "@namespace 2e",
+      ref: "@namespace 'http://foo.example.com/';",
+      tst: "@namespace 'http://foo.example.com/"
+  },
+  {
+      name: "@-moz-document 1",
+      ref: "@-moz-document domain('example.com') {}",
+      tst: "@-moz-document domain('example.com') {"
+  },
+  {
+      name: "@-moz-document 2",
+      ref: "@-moz-document domain('example.com') { p {} }",
+      tst: "@-moz-document domain('example.com') { p {"
+  }
+];
+
+const basestyle = ("table {\n"+
+		   "    border-collapse: collapse;\n"+
+		   "}\n"+
+		   "td {\n"+
+		   "    width: 1.5em;\n"+
+		   "    height: 1.5em;\n"+
+		   "    border: 1px solid black;\n"+
+		   "    text-align: center;\n"+
+		   "    margin: 0;\n"+
+		   "}\n"+
+		   "tr { counter-increment: tr }\n");
+
+/* This is more complicated than it might look like it needs to be,
+   because for each subtest we have to splat stuff into the iframe,
+   allow the renderer to run, and only then interrogate the computed
+   styles.  */
+
+SimpleTest.waitForExplicitFinish();
+ 
+window.onload = function() {
+    const frame = document.getElementById("display");
+    var curTest = 0;
+
+    const prepareTest = function() {
+	var cd = frame.contentDocument;
+	cd.open();
+	cd.write('<!DOCTYPE HTML><html><head>' +
+		 '<style>\n' + basestyle + '</style>\n' +
+		 '<style>\n' + tests[curTest].ref + '</style>\n' +
+		 '<style>\n' + tests[curTest].tst + '</style>\n' +
+		 '</head><body>\n' +
+		 '<table><tr><td id="r"><td id="t"></table>' +
+		 '</body></html>');
+	cd.close();
+    };
+
+    const checkTest = function() {
+	var cd = frame.contentDocument;
+	var _is = tests[curTest].todo ? todo_is : is;
+	var _ok = tests[curTest].todo ? todo : ok;
+
+	if (cd.styleSheets[1].cssRules.length == 1 &&
+	    cd.styleSheets[2].cssRules.length == 1) {
+	    // If we have a .prop for this test, the .cssText of the reference
+	    // and test rules will differ in the selector.  Change #t to #r
+	    // in the test rule.
+	    var ref_canon = cd.styleSheets[1].cssRules[0].cssText;
+	    var tst_canon = cd.styleSheets[2].cssRules[0].cssText;
+	    tst_canon = tst_canon.replace(/(#|%23)t\b/, "$1r");
+	    _is(tst_canon, ref_canon,
+		tests[curTest].name + " (canonicalized rule)");
+	} else {
+	    _ok(false, tests[curTest].name + " (rule missing)");
+	}
+	if (tests[curTest].prop) {
+	    var prop = tests[curTest].prop;
+	    var pseudo = tests[curTest].pseudo;
+
+	    var refElt = cd.getElementById("r");
+	    var tstElt = cd.getElementById("t");
+	    var refStyle = cd.defaultView.getComputedStyle(refElt, pseudo);
+	    var tstStyle = cd.defaultView.getComputedStyle(tstElt, pseudo);
+	    _is(tstStyle.getPropertyValue(prop),
+                refStyle.getPropertyValue(prop),
+                tests[curTest].name + " (computed style)");
+	}
+	curTest++;
+	if (curTest < tests.length) {
+	    prepareTest();
+	} else {
+	    SimpleTest.finish();
+	}
+    };
+
+    frame.onload = function(){setTimeout(checkTest, 0);};
+    prepareTest();
+};
+</script>
+</pre>
+</body>
+</html>
diff --git a/layout/style/test/test_parse_rule.html b/layout/style/test/test_parse_rule.html
--- a/layout/style/test/test_parse_rule.html
+++ b/layout/style/test/test_parse_rule.html
@@ -1,12 +1,13 @@
 <!DOCTYPE html>
 <html lang=en>
 <script type="text/javascript" src="/MochiKit/MochiKit.js"></script>
 <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+<link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <body>
 <iframe></iframe>
 <!-- Note that the following style and div elements are duplicates
      of the ones written into the iframe; they are here for convienience
      in resolving the "standard" computed value for a given specification
 -->
 <style></style>
@@ -97,17 +98,17 @@ base + "#a{color:red\\;}",
 ".iden\\6000t\\6000, .a { color: green }",
 base + "#6ident, #a {color: red }",
 ".id4ent6, .a { color: green }",
 "#\\ident, .a { color: green; }",
 "#ide\\n\\t, .a { color: green; }",
 ".\\6ident, .a { color: green; }",
 ".\\--ident, .a { color: green; }",
 
-// CSS2.1 section 4.1.5
+// CSS2.1 section 4.1.5 and 4.2
 "@import 'data:text/css,#a{color:green}';",
 "@import \"data:text/css,#a{color:green}\";",
 "@import url(data:text/css,#a{color:green});",
 "@import 'data:text/css,#a{color:green}' screen;",
 base + "@import 'data:text/css,#a{color:red}' blahblahblah;",
 "@import 'data:text/css,#a{color:green}'",
 "@import 'data:text/css,#a{color:green}",
 "@foo {}" + base,
@@ -124,18 +125,17 @@ base + "/* #a {color: red} */",
 // CSS2.1 section 4.3.6
 base + "#a {color: rgb(255, 0, 0%)}",
 base + "#a {color: rgb(100%, 0, 0)}",
 base + "#a {color: rgb(255.0, 0, 0)}",
 "#a {color: rgb(0, 128, 0)}",
 "#a {color: rgb(0%, 50%, 0%)}",
 "#a {color: rgb(0%, 49.999999999999%, 0%)}",
 ], prop: "color", pseudo: "",
-todo: {"@import 'data:text/css,#a{color:green}'" : 1,
-       "@import 'data:text/css,#a{color:green}" : 1,
+todo: {
        "div[title~='weeqweqeweasd\\D\\A a']{color:green}" : 1,
        "div {color:green}#a\\\n{color:red}" : 1
       }
 },
 
 // Border tests
 // For testing lengths
 { base : base = "#a {border-style:solid}",
