From: L. David Baron <dbaron@dbaron.org>

Bug 1122781 patch 1 - Add method for style struct computation dependencies.

(Inspired by bug 1098151.)

diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -93,16 +93,17 @@ public:
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
   static nsChangeHint CalcFontDifference(const nsFont& aFont1, const nsFont& aFont2);
 
   static nscoord ZoomText(nsPresContext* aPresContext, nscoord aSize);
   static nscoord UnZoomText(nsPresContext* aPresContext, nscoord aSize);
 
   void* operator new(size_t sz, nsPresContext* aContext) CPP_THROW_NEW {
     return aContext->PresShell()->
       AllocateByObjectID(nsPresArena::nsStyleFont_id, sz);
@@ -339,16 +340,17 @@ struct nsStyleColor {
   static nsChangeHint MaxDifference() {
     return NS_STYLE_HINT_VISUAL;
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants at all.
     return nsChangeHint(0);
   }
+  static inline uint32_t ComputationDependencies();
 
   void* operator new(size_t sz, nsPresContext* aContext) CPP_THROW_NEW {
     return aContext->PresShell()->
       AllocateByObjectID(nsPresArena::nsStyleColor_id, sz);
   }
   void Destroy(nsPresContext* aContext) {
     this->~nsStyleColor();
     aContext->PresShell()->
@@ -377,16 +379,17 @@ struct nsStyleBackground {
                           NS_CombineHint(NS_STYLE_HINT_VISUAL,
                                          nsChangeHint_NeutralChange));
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants at all.
     return nsChangeHint(0);
   }
+  static inline uint32_t ComputationDependencies();
 
   struct Position;
   friend struct Position;
   struct Position {
     typedef nsStyleCoord::CalcValue PositionCoord;
     PositionCoord mXPosition, mYPosition;
 
     // Initialize nothing
@@ -613,16 +616,17 @@ struct nsStyleMargin {
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference can return all of the reflow hints sometimes not
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint(0);
   }
+  static inline uint32_t ComputationDependencies();
 
   nsStyleSides  mMargin;          // [reset] coord, percent, calc, auto
 
   bool IsWidthDependent() const { return !mHasCachedMargin; }
   bool GetMargin(nsMargin& aMargin) const
   {
     if (mHasCachedMargin) {
       aMargin = mCachedMargin;
@@ -662,16 +666,17 @@ struct nsStylePadding {
     // should) return nsChangeHint_NeedReflow and
     // nsChangeHint_ReflowChangesSizeOrPosition as always handled for
     // descendants, but since they're always returned in conjunction
     // with nsChangeHint_ClearAncestorIntrinsics (which is not), it
     // won't ever lead to any optimization in
     // nsStyleContext::CalcStyleDifference.
     return nsChangeHint(0);
   }
+  static inline uint32_t ComputationDependencies();
 
   nsStyleSides  mPadding;         // [reset] coord, percent, calc
 
   bool IsWidthDependent() const { return !mHasCachedPadding; }
   bool GetPadding(nsMargin& aPadding) const
   {
     if (mHasCachedPadding) {
       aPadding = mCachedPadding;
@@ -854,16 +859,17 @@ struct nsStyleBorder {
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   void EnsureBorderColors() {
     if (!mBorderColors) {
       mBorderColors = new nsBorderColors*[4];
       if (mBorderColors)
         for (int32_t i = 0; i < 4; i++)
           mBorderColors[i] = nullptr;
     }
@@ -1088,16 +1094,17 @@ struct nsStyleOutline {
                           NS_CombineHint(nsChangeHint_RepaintFrame,
                                          nsChangeHint_NeutralChange));
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants at all.
     return nsChangeHint(0);
   }
+  static inline uint32_t ComputationDependencies();
 
   nsStyleCorners  mOutlineRadius; // [reset] coord, percent, calc
 
   // Note that this is a specified value.  You can get the actual values
   // with GetOutlineWidth.  You cannot get the computed value directly.
   nsStyleCoord  mOutlineWidth;    // [reset] coord, enum (see nsStyleConsts.h)
   nscoord       mOutlineOffset;   // [reset]
 
@@ -1183,16 +1190,17 @@ struct nsStyleList {
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   imgRequestProxy* GetListStyleImage() const { return mListStyleImage; }
   void SetListStyleImage(imgRequestProxy* aReq)
   {
     if (mListStyleImage)
       mListStyleImage->UnlockImage();
     mListStyleImage = aReq;
     if (mListStyleImage)
@@ -1358,16 +1366,17 @@ struct nsStylePosition {
                                        nsChangeHint_UpdateParentOverflow));
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference can return all of the reflow hints that are
     // sometimes handled for descendants as hints not handled for
     // descendants.
     return nsChangeHint(0);
   }
+  static inline uint32_t ComputationDependencies();
 
   // XXXdholbert nsStyleBackground::Position should probably be moved to a
   // different scope, since we're now using it in multiple style structs.
   typedef nsStyleBackground::Position Position;
 
   Position      mObjectPosition;        // [reset]
   nsStyleSides  mOffset;                // [reset] coord, percent, calc, auto
   nsStyleCoord  mWidth;                 // [reset] coord, percent, enum, calc, auto
@@ -1599,16 +1608,17 @@ struct nsStyleTextReset {
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   nsStyleCoord  mVerticalAlign;         // [reset] coord, percent, calc, enum (see nsStyleConsts.h)
   nsStyleTextOverflow mTextOverflow;    // [reset] enum, string
 
   uint8_t mTextDecorationLine;          // [reset] see nsStyleConsts.h
   uint8_t mUnicodeBidi;                 // [reset] see nsStyleConsts.h
 protected:
   uint8_t mTextDecorationStyle;         // [reset] see nsStyleConsts.h
@@ -1637,16 +1647,17 @@ struct nsStyleText {
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   uint8_t mTextAlign;                   // [inherited] see nsStyleConsts.h
   uint8_t mTextAlignLast;               // [inherited] see nsStyleConsts.h
   bool mTextAlignTrue : 1;              // [inherited] see nsStyleConsts.h
   bool mTextAlignLastTrue : 1;          // [inherited] see nsStyleConsts.h
   uint8_t mTextTransform;               // [inherited] see nsStyleConsts.h
   uint8_t mWhiteSpace;                  // [inherited] see nsStyleConsts.h
   uint8_t mWordBreak;                   // [inherited] see nsStyleConsts.h
@@ -1829,16 +1840,17 @@ struct nsStyleVisibility {
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   nsStyleImageOrientation mImageOrientation;  // [inherited]
   uint8_t mDirection;                  // [inherited] see nsStyleConsts.h NS_STYLE_DIRECTION_*
   uint8_t mVisible;                    // [inherited]
   uint8_t mPointerEvents;              // [inherited] see nsStyleConsts.h
   uint8_t mWritingMode;                // [inherited] see nsStyleConsts.h
   uint8_t mTextOrientation;            // [inherited] see nsStyleConsts.h
   uint8_t mColorCorrection;            // [inherited] see nsStyleConsts.h
@@ -2065,16 +2077,17 @@ struct nsStyleDisplay {
                         nsChangeHint_NeutralChange);
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference can return all of the reflow hints that are
     // sometimes handled for descendants as hints not handled for
     // descendants.
     return nsChangeHint(0);
   }
+  static inline uint32_t ComputationDependencies();
 
   // XXXdholbert, XXXkgilbert nsStyleBackground::Position should probably be
   // moved to a different scope, since we're now using it in multiple style
   // structs.
   typedef nsStyleBackground::Position Position;
 
   // We guarantee that if mBinding is non-null, so are mBinding->GetURI() and
   // mBinding->mOriginPrincipal.
@@ -2320,16 +2333,17 @@ struct nsStyleTable {
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   uint8_t       mLayoutStrategy;// [reset] see nsStyleConsts.h NS_STYLE_TABLE_LAYOUT_*
   int32_t       mSpan;          // [reset] the number of columns spanned by a colgroup or col
 };
 
 struct nsStyleTableBorder {
   nsStyleTableBorder();
   nsStyleTableBorder(const nsStyleTableBorder& aOther);
@@ -2351,16 +2365,17 @@ struct nsStyleTableBorder {
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   // Return the mCaptionSide value, with physical values resolved to
   // the appropriate logical value for the given writing mode.
   // (The definition of this is in WritingModes.h.)
   inline uint8_t LogicalCaptionSide(mozilla::WritingMode aWM) const;
 
   nscoord       mBorderSpacingCol;// [inherited]
   nscoord       mBorderSpacingRow;// [inherited]
@@ -2455,16 +2470,17 @@ struct nsStyleQuotes {
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   uint32_t  QuotesCount(void) const { return mQuotesCount; } // [inherited]
 
   const nsString* OpenQuoteAt(uint32_t aIndex) const
   {
     NS_ASSERTION(aIndex < mQuotesCount, "out of range");
     return mQuotes + (aIndex * 2);
   }
@@ -2530,16 +2546,17 @@ struct nsStyleContent {
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   uint32_t  ContentCount(void) const  { return mContentCount; } // [reset]
 
   const nsStyleContentData& ContentAt(uint32_t aIndex) const {
     NS_ASSERTION(aIndex < mContentCount, "out of range");
     return mContents[aIndex];
   }
 
@@ -2643,16 +2660,17 @@ struct nsStyleUIReset {
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   uint8_t   mUserSelect;      // [reset] (selection-style)
   uint8_t   mForceBrokenImageIcon; // [reset]  (0 if not forcing, otherwise forcing)
   uint8_t   mIMEMode;         // [reset]
   uint8_t   mWindowShadow;    // [reset]
 };
 
 struct nsCursorImage {
@@ -2707,16 +2725,17 @@ struct nsStyleUserInterface {
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   uint8_t   mUserInput;       // [inherited]
   uint8_t   mUserModify;      // [inherited] (modify-content)
   uint8_t   mUserFocus;       // [inherited] (auto-select)
   uint8_t   mWindowDragging;  // [inherited]
 
   uint8_t   mCursor;          // [inherited] See nsStyleConsts.h
 
@@ -2752,16 +2771,17 @@ struct nsStyleXUL {
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   float         mBoxFlex;               // [reset] see nsStyleConsts.h
   uint32_t      mBoxOrdinal;            // [reset] see nsStyleConsts.h
   uint8_t       mBoxAlign;              // [reset] see nsStyleConsts.h
   uint8_t       mBoxDirection;          // [reset] see nsStyleConsts.h
   uint8_t       mBoxOrient;             // [reset] see nsStyleConsts.h
   uint8_t       mBoxPack;               // [reset] see nsStyleConsts.h
   bool          mStretchStack;          // [reset] see nsStyleConsts.h
@@ -2789,16 +2809,17 @@ struct nsStyleColumn {
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   /**
    * This is the maximum number of columns we can process. It's used in both
    * nsColumnSetFrame and nsRuleNode.
    */
   static const uint32_t kMaxColumnCount;
 
   uint32_t     mColumnCount; // [reset] see nsStyleConsts.h
@@ -2882,16 +2903,17 @@ struct nsStyleSVG {
                                          nsChangeHint_RepaintFrame);
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns nsChangeHint_NeedReflow as a hint
     // not handled for descendants, and never returns
     // nsChangeHint_ClearAncestorIntrinsics at all.
     return nsChangeHint_NeedReflow;
   }
+  static inline uint32_t ComputationDependencies();
 
   nsStyleSVGPaint  mFill;             // [inherited]
   nsStyleSVGPaint  mStroke;           // [inherited]
   nsCOMPtr<nsIURI> mMarkerEnd;        // [inherited]
   nsCOMPtr<nsIURI> mMarkerMid;        // [inherited]
   nsCOMPtr<nsIURI> mMarkerStart;      // [inherited]
   nsStyleCoord    *mStrokeDasharray;  // [inherited] coord, percent, factor
 
@@ -3164,16 +3186,17 @@ struct nsStyleSVGReset {
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   bool HasFilters() const {
     return mFilters.Length() > 0;
   }
 
   bool HasNonScalingStroke() const {
     return mVectorEffect == NS_STYLE_VECTOR_EFFECT_NON_SCALING_STROKE;
   }
@@ -3212,13 +3235,204 @@ struct nsStyleVariables {
   static nsChangeHint MaxDifference() {
     return nsChangeHint(0);
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns nsChangeHint_NeedReflow or
     // nsChangeHint_ClearAncestorIntrinsics at all.
     return nsChangeHint(0);
   }
+  static inline uint32_t ComputationDependencies();
 
   mozilla::CSSVariableValues mVariables;
 };
 
+/*
+ * The computation of one style struct can depend on the data in
+ * another, either on the same element or (maybe) on a different
+ * element (e.g., the parent, which is always different, or the root
+ * element, which may or may not be different).  Since many of these
+ * dependencies are conditional on a particular value of the property,
+ * it might be difficult to detect a circular dependency.
+ *
+ * Thus to avoid circular dependencies, we require that each style
+ * struct have a method returning the bits for all the style structs
+ * that its computation might depend on (which must include its own
+ * bit), and we assert during the computation of one style struct that
+ * all computation calls are within the allowed set.
+ *
+ * This will catch errors because either:
+ *  (1) we'll be unable to get these functions to compile or to return
+ *      (since all dependent structs are handled by calling *their*
+ *      methods), or
+ *  (2) because we'll trigger the assertions.
+ */
+
+/* static */ inline uint32_t
+nsStyleFont::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Font) |
+         nsStyleVisibility::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleColor::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Color) |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleList::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(List) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleText::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Text) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleColor::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleVisibility::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Visibility) |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleQuotes::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Quotes) |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleUserInterface::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(UserInterface) |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleTableBorder::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(TableBorder) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleSVG::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(SVG) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleColor::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleVariables::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Variables);
+}
+
+/* static */ inline uint32_t
+nsStyleBackground::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Background) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleColor::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStylePosition::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Position) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleTextReset::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(TextReset) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleColor::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleDisplay::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Display) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleContent::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Content) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleUIReset::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(UIReset) |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleTable::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Table) |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleMargin::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Margin) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleVisibility::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStylePadding::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Padding) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleVisibility::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleBorder::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Border) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleColor::ComputationDependencies() |
+         nsStyleVisibility::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleOutline::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Outline) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleColor::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleXUL::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(XUL) |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleSVGReset::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(SVGReset) |
+         nsStyleColor::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleColumn::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Column) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleColor::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
 #endif /* nsStyleStruct_h___ */
