From: L. David Baron <dbaron@dbaron.org>

Bug 1122781 patch 1 - Add method for style struct computation dependencies.

(Inspired by bug 1098151.)

diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -169,16 +169,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   /**
    * Return aSize multiplied by the current text zoom factor (in aPresContext).
    * aSize is allowed to be negative, but the caller is expected to deal with
    * negative results.  The result is clamped to nscoord_MIN .. nscoord_MAX.
    */
   static nscoord ZoomText(const nsPresContext* aPresContext, nscoord aSize);
   /**
@@ -576,16 +577,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
   static nsChangeHint MaxDifference() {
     return nsChangeHint_RepaintFrame;
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants at all.
     return nsChangeHint(0);
   }
+  static inline uint32_t ComputationDependencies();
 
   void* operator new(size_t sz, nsStyleColor* aSelf) { return aSelf; }
   void* operator new(size_t sz, nsPresContext* aContext) {
     return aContext->PresShell()->
       AllocateByObjectID(mozilla::eArenaObjectID_nsStyleColor, sz);
   }
   void Destroy(nsPresContext* aContext) {
     this->~nsStyleColor();
@@ -944,16 +946,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
            nsChangeHint_UpdateBackgroundPosition |
            nsChangeHint_NeutralChange;
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants at all.
     return nsChangeHint(0);
   }
+  static inline uint32_t ComputationDependencies();
 
   // Return the background color as nscolor.
   nscolor BackgroundColor(const nsIFrame* aFrame) const;
   nscolor BackgroundColor(nsStyleContext* aContext) const;
 
   // True if this background is completely transparent.
   bool IsTransparent(const nsIFrame* aFrame) const;
   bool IsTransparent(nsStyleContext* aContext) const;
@@ -1001,16 +1004,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference can return all of the reflow hints sometimes not
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint(0);
   }
+  static inline uint32_t ComputationDependencies();
 
   bool GetMargin(nsMargin& aMargin) const
   {
     if (!mMargin.ConvertsToLength()) {
       return false;
     }
 
     NS_FOR_CSS_SIDES(side) {
@@ -1053,16 +1057,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
     // should) return nsChangeHint_NeedReflow and
     // nsChangeHint_ReflowChangesSizeOrPosition as always handled for
     // descendants, but since they're always returned in conjunction
     // with nsChangeHint_ClearAncestorIntrinsics (which is not), it
     // won't ever lead to any optimization in
     // nsStyleContext::CalcStyleDifference.
     return nsChangeHint(0);
   }
+  static inline uint32_t ComputationDependencies();
 
   nsStyleSides  mPadding;         // [reset] coord, percent, calc
 
   bool IsWidthDependent() const {
     return !mPadding.ConvertsToLength();
   }
 
   bool GetPadding(nsMargin& aPadding) const
@@ -1262,16 +1267,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   void EnsureBorderColors() {
     if (!mBorderColors) {
       mBorderColors = new nsBorderColors*[4];
       if (mBorderColors) {
         for (int32_t i = 0; i < 4; i++) {
           mBorderColors[i] = nullptr;
         }
@@ -1505,16 +1511,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
            nsChangeHint_RepaintFrame |
            nsChangeHint_NeutralChange;
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants at all.
     return nsChangeHint(0);
   }
+  static inline uint32_t ComputationDependencies();
 
   nsStyleCorners  mOutlineRadius; // [reset] coord, percent, calc
 
   // This is the specified value of outline-width, but with length values
   // computed to absolute.  mActualOutlineWidth stores the outline-width
   // value used by layout.  (We must store mOutlineWidth for the same
   // style struct resolution reasons that we do nsStyleBorder::mBorder;
   // see that field's comment.)
@@ -1579,16 +1586,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   static void Shutdown() {
     sInitialQuotes = nullptr;
     sNoneQuotes = nullptr;
   }
 
   imgRequestProxy* GetListStyleImage() const
   {
@@ -1807,16 +1815,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
            nsChangeHint_UpdateComputedBSize;
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference can return all of the reflow hints that are
     // sometimes handled for descendants as hints not handled for
     // descendants.
     return nsChangeHint(0);
   }
+  static inline uint32_t ComputationDependencies();
 
   /**
    * Return the used value for 'align-self' given our parent StyleContext
    * aParent (or null for the root).
    */
   uint8_t UsedAlignSelf(nsStyleContext* aParent) const;
 
   /**
@@ -2049,16 +2058,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   nsStyleTextOverflow mTextOverflow;    // [reset] enum, string
 
   uint8_t mTextDecorationLine;          // [reset] see nsStyleConsts.h
   uint8_t mTextDecorationStyle;         // [reset] see nsStyleConsts.h
   uint8_t mUnicodeBidi;                 // [reset] see nsStyleConsts.h
   nscoord mInitialLetterSink;           // [reset] 0 means normal
   float mInitialLetterSize;             // [reset] 0.0f means normal
@@ -2092,16 +2102,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   uint8_t mTextAlign;                   // [inherited] see nsStyleConsts.h
   uint8_t mTextAlignLast;               // [inherited] see nsStyleConsts.h
   bool mTextAlignTrue : 1;              // [inherited] see nsStyleConsts.h
   bool mTextAlignLastTrue : 1;          // [inherited] see nsStyleConsts.h
   uint8_t mTextTransform;               // [inherited] see nsStyleConsts.h
   uint8_t mWhiteSpace;                  // [inherited] see nsStyleConsts.h
   uint8_t mWordBreak;                   // [inherited] see nsStyleConsts.h
@@ -2310,16 +2321,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   nsStyleImageOrientation mImageOrientation;  // [inherited]
   uint8_t mDirection;                  // [inherited] see nsStyleConsts.h NS_STYLE_DIRECTION_*
   uint8_t mVisible;                    // [inherited]
   uint8_t mImageRendering;             // [inherited] see nsStyleConsts.h
   uint8_t mWritingMode;                // [inherited] see nsStyleConsts.h
   uint8_t mTextOrientation;            // [inherited] see nsStyleConsts.h
   uint8_t mColorAdjust;                // [inherited] see nsStyleConsts.h
@@ -2823,16 +2835,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
                         nsChangeHint_NeutralChange);
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference can return all of the reflow hints that are
     // sometimes handled for descendants as hints not handled for
     // descendants.
     return nsChangeHint(0);
   }
+  static inline uint32_t ComputationDependencies();
 
   // We guarantee that if mBinding is non-null, so are mBinding->GetURI() and
   // mBinding->mOriginPrincipal.
   RefPtr<mozilla::css::URLValue> mBinding; // [reset]
   mozilla::StyleDisplay mDisplay;          // [reset] see nsStyleConsts.h StyleDisplay
   mozilla::StyleDisplay mOriginalDisplay;  // [reset] saved mDisplay for
                                            //         position:absolute/fixed
                                            //         and float:left/right;
@@ -3128,16 +3141,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
   static nsChangeHint MaxDifference() {
     return nsChangeHint_ReconstructFrame;
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint(0);
   }
+  static inline uint32_t ComputationDependencies();
 
   uint8_t       mLayoutStrategy;// [reset] see nsStyleConsts.h NS_STYLE_TABLE_LAYOUT_*
   int32_t       mSpan;          // [reset] the number of columns spanned by a colgroup or col
 };
 
 struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsStyleTableBorder
 {
   explicit nsStyleTableBorder(const nsPresContext* aContext);
@@ -3163,16 +3177,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   nscoord       mBorderSpacingCol;// [inherited]
   nscoord       mBorderSpacingRow;// [inherited]
   uint8_t       mBorderCollapse;// [inherited]
   uint8_t       mCaptionSide;   // [inherited]
   uint8_t       mEmptyCells;    // [inherited]
 };
 
@@ -3324,16 +3339,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   uint32_t ContentCount() const { return mContents.Length(); } // [reset]
 
   const nsStyleContentData& ContentAt(uint32_t aIndex) const {
     return mContents[aIndex];
   }
 
   nsStyleContentData& ContentAt(uint32_t aIndex) { return mContents[aIndex]; }
@@ -3410,16 +3426,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   mozilla::StyleUserSelect     mUserSelect;     // [reset](selection-style)
   uint8_t mForceBrokenImageIcon; // [reset] (0 if not forcing, otherwise forcing)
   uint8_t                      mIMEMode;        // [reset]
   mozilla::StyleWindowDragging mWindowDragging; // [reset]
   uint8_t                      mWindowShadow;   // [reset]
 };
 
@@ -3473,16 +3490,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
            nsChangeHint_UpdateCursor |
            nsChangeHint_NeutralChange;
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow;
   }
+  static inline uint32_t ComputationDependencies();
 
   mozilla::StyleUserInput   mUserInput;       // [inherited]
   mozilla::StyleUserModify  mUserModify;      // [inherited] (modify-content)
   mozilla::StyleUserFocus   mUserFocus;       // [inherited] (auto-select)
   uint8_t                   mPointerEvents;   // [inherited] see nsStyleConsts.h
 
   uint8_t mCursor;                            // [inherited] See nsStyleConsts.h
   nsTArray<nsCursorImage> mCursorImages;      // [inherited] images and coords
@@ -3516,16 +3534,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   float         mBoxFlex;               // [reset] see nsStyleConsts.h
   uint32_t      mBoxOrdinal;            // [reset] see nsStyleConsts.h
   mozilla::StyleBoxAlign mBoxAlign;         // [reset]
   mozilla::StyleBoxDirection mBoxDirection; // [reset]
   mozilla::StyleBoxOrient mBoxOrient;       // [reset]
   mozilla::StyleBoxPack mBoxPack;           // [reset]
   bool          mStretchStack;          // [reset] see nsStyleConsts.h
@@ -3557,16 +3576,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   /**
    * This is the maximum number of columns we can process. It's used in both
    * nsColumnSetFrame and nsRuleNode.
    */
   static const uint32_t kMaxColumnCount = 1000;
 
   uint32_t     mColumnCount; // [reset] see nsStyleConsts.h
@@ -3682,16 +3702,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
            nsChangeHint_RepaintFrame;
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns nsChangeHint_NeedReflow as a hint
     // not handled for descendants, and never returns
     // nsChangeHint_ClearAncestorIntrinsics at all.
     return nsChangeHint_NeedReflow;
   }
+  static inline uint32_t ComputationDependencies();
 
   nsStyleSVGPaint  mFill;             // [inherited]
   nsStyleSVGPaint  mStroke;           // [inherited]
   RefPtr<mozilla::css::URLValue> mMarkerEnd;   // [inherited]
   RefPtr<mozilla::css::URLValue> mMarkerMid;   // [inherited]
   RefPtr<mozilla::css::URLValue> mMarkerStart; // [inherited]
   nsTArray<nsStyleCoord> mStrokeDasharray;  // [inherited] coord, percent, factor
 
@@ -3876,16 +3897,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   bool HasClipPath() const {
     return mClipPath.GetType() != mozilla::StyleShapeSourceType::None;
   }
 
   bool HasNonScalingStroke() const {
     return mVectorEffect == NS_STYLE_VECTOR_EFFECT_NON_SCALING_STROKE;
   }
@@ -3927,16 +3949,17 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
   static nsChangeHint MaxDifference() {
     return nsChangeHint(0);
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns nsChangeHint_NeedReflow or
     // nsChangeHint_ClearAncestorIntrinsics at all.
     return nsChangeHint(0);
   }
+  static inline uint32_t ComputationDependencies();
 
   mozilla::CSSVariableValues mVariables;
 };
 
 struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsStyleEffects
 {
   explicit nsStyleEffects(const nsPresContext* aContext);
   nsStyleEffects(const nsStyleEffects& aSource);
@@ -3968,29 +3991,222 @@ struct MOZ_NEEDS_MEMMOVABLE_MEMBERS nsSt
   }
   static nsChangeHint DifferenceAlwaysHandledForDescendants() {
     // CalcDifference never returns the reflow hints that are sometimes
     // handled for descendants as hints not handled for descendants.
     return nsChangeHint_NeedReflow |
            nsChangeHint_ReflowChangesSizeOrPosition |
            nsChangeHint_ClearAncestorIntrinsics;
   }
+  static inline uint32_t ComputationDependencies();
 
   bool HasFilters() const {
     return !mFilters.IsEmpty();
   }
 
   nsTArray<nsStyleFilter>  mFilters;   // [reset]
   RefPtr<nsCSSShadowArray> mBoxShadow; // [reset] nullptr for 'none'
   nsRect  mClip;                       // [reset] offsets from UL border edge
   float   mOpacity;                    // [reset]
   uint8_t mClipFlags;                  // [reset] see nsStyleConsts.h
   uint8_t mMixBlendMode;               // [reset] see nsStyleConsts.h
 };
 
+/*
+ * The computation of one style struct can depend on the data in
+ * another, either on the same element or (maybe) on a different
+ * element (e.g., the parent, which is always different, or the root
+ * element, which may or may not be different).  Since many of these
+ * dependencies are conditional on a particular value of the property,
+ * it might be difficult to detect a circular dependency.
+ *
+ * Thus to avoid circular dependencies, we require that each style
+ * struct have a method returning the bits for all the style structs
+ * that its computation might depend on (which must include its own
+ * bit), and we assert during the computation of one style struct that
+ * all computation calls are within the allowed set.
+ *
+ * This will catch errors because either:
+ *  (1) we'll be unable to get these functions to compile or to return
+ *      (since all dependent structs are handled by calling *their*
+ *      methods), or
+ *  (2) because we'll trigger the assertions.
+ */
+
+/* static */ inline uint32_t
+nsStyleFont::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Font) |
+         nsStyleVisibility::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleColor::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Color) |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleList::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(List) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleText::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Text) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleColor::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleVisibility::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Visibility) |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleUserInterface::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(UserInterface) |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleTableBorder::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(TableBorder) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleSVG::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(SVG) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleColor::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleVariables::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Variables);
+}
+
+/* static */ inline uint32_t
+nsStyleBackground::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Background) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleColor::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStylePosition::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Position) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleTextReset::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(TextReset) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleColor::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleDisplay::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Display) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleContent::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Content) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleUIReset::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(UIReset) |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleTable::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Table) |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleMargin::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Margin) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleVisibility::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStylePadding::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Padding) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleVisibility::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleBorder::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Border) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleColor::ComputationDependencies() |
+         nsStyleVisibility::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleOutline::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Outline) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleColor::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleXUL::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(XUL) |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleSVGReset::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(SVGReset) |
+         nsStyleColor::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleColumn::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Column) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleColor::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
+/* static */ inline uint32_t
+nsStyleEffects::ComputationDependencies() {
+  return NS_STYLE_INHERIT_BIT(Effects) |
+         nsStyleFont::ComputationDependencies() |
+         nsStyleColor::ComputationDependencies() |
+         nsStyleVariables::ComputationDependencies();
+}
+
 #define STATIC_ASSERT_TYPE_LAYOUTS_MATCH(T1, T2)                               \
   static_assert(sizeof(T1) == sizeof(T2),                                      \
       "Size mismatch between " #T1 " and " #T2);                               \
   static_assert(alignof(T1) == alignof(T2),                                    \
       "Align mismatch between " #T1 " and " #T2);                              \
 
 #define STATIC_ASSERT_FIELD_OFFSET_MATCHES(T1, T2, field)                      \
   static_assert(offsetof(T1, field) == offsetof(T2, field),                    \
