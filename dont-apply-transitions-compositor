From: L. David Baron <dbaron@dbaron.org>

Bug 1125455 patch 7 - For compositor-thread application of transitions, don't apply transitions when animations are also running.

I've verified locally that this patch (not others in this series) fixes
the test failures that match the test changes in this patch.

diff --git a/layout/base/nsDisplayList.cpp b/layout/base/nsDisplayList.cpp
--- a/layout/base/nsDisplayList.cpp
+++ b/layout/base/nsDisplayList.cpp
@@ -416,16 +416,28 @@ AddAnimationsForProperty(nsIFrame* aFram
       continue;
     }
     const AnimationProperty* property =
       anim->GetAnimationOfProperty(aProperty);
     if (!property || !player->IsRunning()) {
       continue;
     }
 
+    if (!property->mWinsInCascade) {
+      // We have an animation or transition, but it isn't actually
+      // winning in the CSS cascade, so we don't want to send it to the
+      // compositor.
+      // I believe that anything that changes mWinsInCascade should
+      // trigger this code again, either because of a restyle that
+      // changes the properties in question, or because of the
+      // main-thread style update that results when an animation stops
+      // filling.
+      continue;
+    }
+
     // Don't add animations that are pending when their corresponding
     // refresh driver is under test control. This is because any pending
     // animations on layers will have their start time updated with the
     // current timestamp but when the refresh driver is under test control
     // its refresh times are unrelated to timestamp values.
     //
     // Instead we leave the animation running on the main thread and the
     // next time the refresh driver is advanced it will trigger any pending
diff --git a/layout/style/test/test_animations_omta.html b/layout/style/test/test_animations_omta.html
--- a/layout/style/test/test_animations_omta.html
+++ b/layout/style/test/test_animations_omta.html
@@ -2084,19 +2084,60 @@ addAsyncAnimTest(function *() {
   omta_is("opacity", 0.8, RunningOn.Compositor,
           "opacity transition at 0s");
   advance_clock(500);
   yield waitForPaintsFlushed();
   omta_is("opacity", 0.65, RunningOn.Compositor,
           "opacity transition at 0.5s");
   gDiv.style.animation = "opacitymid 2s linear";
   yield waitForPaintsFlushed();
-  omta_todo_is("opacity", 0.2, RunningOn.Compositor,
+  omta_is("opacity", 0.2, RunningOn.Compositor,
           "opacity animation overriding transition at 0s");
   advance_clock(500);
   yield waitForPaintsFlushed();
-  omta_todo_is("opacity", 0.35, RunningOn.Compositor,
+  omta_is("opacity", 0.35, RunningOn.Compositor,
           "opacity animation overriding transition at 0.5s");
   done_div();
+
+  // Do a more complicated variant of the same test, where we test that
+  // things work correctly when the animation ends, and where the end of
+  // that animation doesn't actually involve a restyle.
+  new_div("transition: opacity 1600ms steps(16, start); opacity: 0.1");
+  yield waitForPaintsFlushed();
+  omta_is("opacity", 0.1, RunningOn.MainThread,
+          "initial opacity");
+  // Start a transition from 0.1 to 0.9, with steps of 0.05 every 100ms
+  gDiv.style.opacity = "0.9";
+  yield waitForPaintsFlushed();
+  // not sure if it matters if it's 0.1 or 0.15 now?
+  omta_is("opacity", 0.1, RunningOn.Compositor,
+          "opacity transition at 0ms");
+  advance_clock(750);
+  yield waitForPaintsFlushed();
+  omta_is("opacity", 0.5, RunningOn.Compositor,
+          "opacity transition at 750ms");
+  // Set up the animation so it will match the running transition at
+  // its endpoint.
+  gDiv.style.animation = "opacitymid 600ms linear";
+  yield waitForPaintsFlushed();
+  omta_is("opacity", 0.2, RunningOn.Compositor,
+          "opacity animation overriding transition at 0ms");
+  advance_clock(400);
+  yield waitForPaintsFlushed();
+  omta_is("opacity", 0.6, RunningOn.Compositor,
+          "opacity animation overriding transition at 400ms");
+  advance_clock(175);
+  yield waitForPaintsFlushed();
+  omta_is("opacity", 0.775, RunningOn.Compositor,
+          "opacity animation overriding transition at 575ms");
+  advance_clock(50);
+  yield waitForPaintsFlushed();
+  omta_is("opacity", 0.8, RunningOn.Compositor,
+          "opacity transition running again at 1375ms");
+  advance_clock(75);
+  yield waitForPaintsFlushed();
+  omta_is("opacity", 0.85, RunningOn.Compositor,
+          "opacity transition running again at 1450ms");
+  done_div();
 });
 
 </script>
 </html>
