From: L. David Baron <dbaron@dbaron.org>

Build font data structure by walking the necessary text.  (Bug 706193)

diff --git a/layout/generic/nsFontInflationData.cpp b/layout/generic/nsFontInflationData.cpp
--- a/layout/generic/nsFontInflationData.cpp
+++ b/layout/generic/nsFontInflationData.cpp
@@ -34,37 +34,196 @@
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 /* Per-block-formatting-context manager of font size inflation for pan and zoom UI. */
 
 #include "nsFontInflationData.h"
 #include "FramePropertyTable.h"
+#include "nsTextFragment.h"
+#include "nsIFormControlFrame.h"
 
 using namespace mozilla;
 
 static void
 DestroyFontInflationData(void *aPropertyValue)
 {
   delete static_cast<nsFontInflationData*>(aPropertyValue);
 }
 
 NS_DECLARE_FRAME_PROPERTY(FontInflationDataProperty, DestroyFontInflationData);
 
 /* static */ nsFontInflationData*
-nsFontInflationData::FontInflationDataFor(nsIFrame *aFrame)
+nsFontInflationData::FontInflationDataFor(nsIFrame *aFrame,
+                                        WidthDetermination aWidthDetermination)
 {
   // We have one set of font inflation data per block formatting context.
-  FrameProperties bfcProps = BlockFormattingContextFor(aFrame)->Properties();
+  nsIFrame *bfc = BlockFormattingContextFor(aFrame);
+  FrameProperties bfcProps = bfc->Properties();
 
   // If we already have a data object, return it.
   nsFontInflationData *data = static_cast<nsFontInflationData*>(
                                 bfcProps.Get(FontInflationDataProperty()));
   if (data) {
     return data;
   }
 
   // Otherwise, make a new data object.
-  data = new nsFontInflationData();
+  data = new nsFontInflationData(bfc, aFrame, aWidthDetermination);
   bfcProps.Set(FontInflationDataProperty(), data);
   return data;
 }
+
+/**
+ * Find the closest common ancestor between aFrame1 and aFrame2, except
+ * treating the parent of a frame as the first-in-flow of its parent (so
+ * the result doesn't change when breaking changes).
+ *
+ * aKnownCommonAncestor is a known common ancestor of both.
+ */
+static nsIFrame*
+NearestCommonAncestorFirstInFlow(nsIFrame *aFrame1, nsIFrame *aFrame2,
+                                 nsIFrame *aKnownCommonAncestor)
+{
+  aFrame1 = aFrame1->GetFirstInFlow();
+  aFrame2 = aFrame2->GetFirstInFlow();
+  aKnownCommonAncestor = aKnownCommonAncestor->GetFirstInFlow();
+
+  PRInt32 diff = 0;
+  for (nsIFrame *f = aFrame1; f != aKnownCommonAncestor;
+       (f = f->GetParent()) && (f = f->GetFirstInFlow())) {
+    ++diff;
+  }
+  for (nsIFrame *f = aFrame2; f != aKnownCommonAncestor;
+       (f = f->GetParent()) && (f = f->GetFirstInFlow())) {
+    --diff;
+  }
+
+  if (diff > 0) {
+    while (diff-- != 0) {
+      aFrame1 = aFrame1->GetParent()->GetFirstInFlow();
+    }
+  } else {
+    while (diff++ != 0) {
+      aFrame2 = aFrame2->GetParent()->GetFirstInFlow();
+    }
+  }
+
+  while (aFrame1 != aFrame2) {
+    aFrame1 = aFrame1->GetParent()->GetFirstInFlow();
+    aFrame2 = aFrame2->GetParent()->GetFirstInFlow();
+  }
+
+  return aFrame1;
+}
+
+nsFontInflationData::nsFontInflationData(nsIFrame *aBFCFrame,
+                                         nsIFrame *aStartFrame,
+                                         WidthDetermination aWidthDetermination)
+{
+  NS_ASSERTION(IsBlockFormattingContext(aBFCFrame),
+               "must be block formatting context");
+
+  nsIFrame *firstInflatableDescendant = nsnull,
+           *lastInflatableDescendant = nsnull;
+  ScanText(aBFCFrame, aWidthDetermination,
+           &firstInflatableDescendant, &lastInflatableDescendant);
+
+  nsIFrame *nca = NearestCommonAncestorFirstInFlow(firstInflatableDescendant,
+                                                   lastInflatableDescendant,
+                                                   aBFCFrame);
+}
+
+void
+nsFontInflationData::ScanText(nsIFrame *aFrame,
+                              WidthDetermination aWidthDetermination,
+                              nsIFrame **aFirstInflatableDescendant,
+                              nsIFrame **aLastInflatableDescendant)
+{
+  // FIXME: Should probably only scan the text that's actually going to
+  // be inflated!
+
+  nsIFormControlFrame* fcf = do_QueryFrame(aFrame);
+  if (fcf && !*aFirstInflatableDescendant) {
+    *aFirstInflatableDescendant = aFrame;
+  }
+
+  nsIFrame::ChildListIterator lists(aFrame);
+  for (; !lists.IsDone(); lists.Next()) {
+    nsFrameList::Enumerator kids(lists.CurrentList());
+    for (; !kids.AtEnd(); kids.Next()) {
+      nsIFrame *kid = kids.get();
+      if (IsBlockFormattingContext(kid)) {
+        // Goes in a different set of inflation data.
+        continue;
+      }
+
+      if (kid->GetType() == nsGkAtoms::textFrame) {
+        nsIContent *content = kid->GetContent();
+        if (content && kid == content->GetPrimaryFrame()) {
+          const nsTextFragment *frag = content->GetText();
+          const nsStyleText *styleText = kid->GetStyleText();
+
+          // This is an approximation so we don't really need anything
+          // too fancy here.
+          PRUint32 len;
+          if (styleText->WhiteSpaceIsSignificant()) {
+            len = frag->GetLength();
+          } else {
+            bool is2b = frag->Is2b();
+            union {
+              const char *s1b;
+              const PRUnichar *s2b;
+            } u;
+            if (is2b) {
+              u.s2b = frag->Get2b();
+            } else {
+              u.s1b = frag->Get1b();
+            }
+            bool prevWS = true; // more important to ignore blocks with
+                                // only whitespace than get inline boundaries
+                                // exactly right
+            len = 0;
+            for (PRUint32 i = 0, i_end = frag->GetLength(); i < i_end; ++i) {
+              PRUnichar c = is2b ? u.s2b[i] : u.s1b[i];
+              if (c == ' ' || c == '\n' || c == '\t' || c == '\r') {
+                if (!prevWS) {
+                  ++len;
+                }
+                prevWS = true;
+              } else {
+                ++len;
+                prevWS = false;
+              }
+            }
+          }
+          if (len != 0) {
+            if (!*aFirstInflatableDescendant) {
+              *aFirstInflatableDescendant = kid;
+            }
+            *aLastInflatableDescendant = kid;
+
+            RecordText(kid->GetStyleFont()->mFont.size, len);
+          }
+        }
+      } else if (!IsBlockFormattingContext(kid)) {
+        // recursive step
+        ScanText(kid, aWidthDetermination,
+                 aFirstInflatableDescendant, aLastInflatableDescendant);
+      }
+    }
+  }
+
+  if (fcf) {
+    *aLastInflatableDescendant = aFrame;
+  }
+}
+
+void
+nsFontInflationData::RecordText(nscoord aFontSize, PRUint32 aTextLength)
+{
+  if (aFontSize <= 0) {
+    // Hidden text.
+    return;
+  }
+
+}
diff --git a/layout/generic/nsFontInflationData.h b/layout/generic/nsFontInflationData.h
--- a/layout/generic/nsFontInflationData.h
+++ b/layout/generic/nsFontInflationData.h
@@ -43,20 +43,41 @@
 #include "nsIFrame.h"
 #include "nsLayoutUtils.h"
 #include "nsBlockFrame.h"
 
 class nsFontInflationData
 {
 public:
 
-  static nsFontInflationData* FontInflationDataFor(nsIFrame *aFrame);
+  typedef nsLayoutUtils::WidthDetermination WidthDetermination;
+
+  static nsFontInflationData*
+    FontInflationDataFor(nsIFrame *aFrame,
+                         WidthDetermination aWidthDetermination);
 
 private:
 
+  nsFontInflationData(nsIFrame *aBFCFrame,
+                      nsIFrame *aStartFrame,
+                      WidthDetermination aWidthDetermination);
+
+  nsFontInflationData(const nsFontInflationData&) MOZ_DELETE;
+  void operator=(const nsFontInflationData&) MOZ_DELETE;
+
+  // Scan text in the subtree rooted at aFrame
+  void ScanText(nsIFrame *aFrame,
+                WidthDetermination aWidthDetermination,
+                nsIFrame **aFirstInflatableDescendant,
+                nsIFrame **aLastInflatableDescendant);
+
+  // Record that the scan encountered aTextLength characters of size
+  // aFontSize.
+  void RecordText(nscoord aFontSize, PRUint32 aTextLength);
+
   static nsIFrame* BlockFormattingContextFor(nsIFrame *aFrame)
   {
     while (!IsBlockFormattingContext(aFrame)) {
       aFrame = aFrame->GetParent();
     }
     return aFrame;
   }
 
