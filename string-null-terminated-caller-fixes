From: L. David Baron <dbaron@dbaron.org>

Bug 1381080 patch 5 - Stop using null-terminated string types to hold non-null-terminated strings.

This avoids triggering the assertions added in patch 6.

MozReview-Commit-ID: 9000zY0FDId

diff --git a/dom/base/nsFrameMessageManager.cpp b/dom/base/nsFrameMessageManager.cpp
--- a/dom/base/nsFrameMessageManager.cpp
+++ b/dom/base/nsFrameMessageManager.cpp
@@ -1635,18 +1635,18 @@ nsMessageManagerScriptExecutor::TryCache
     if (input) {
       nsCString buffer;
       uint64_t written;
       if (NS_FAILED(NS_ReadInputStreamToString(input, buffer, -1, &written))) {
         return;
       }
 
       uint32_t size = (uint32_t)std::min(written, (uint64_t)UINT32_MAX);
-      ScriptLoader::ConvertToUTF16(channel, (uint8_t*)buffer.get(), size,
-                                   EmptyString(), nullptr,
+      ScriptLoader::ConvertToUTF16(channel, (uint8_t*)buffer.BeginReading(),
+                                   size, EmptyString(), nullptr,
                                    dataStringBuf, dataStringLength);
     }
 
     JS::SourceBufferHolder srcBuf(dataStringBuf, dataStringLength,
                                   JS::SourceBufferHolder::GiveOwnership);
 
     if (!dataStringBuf || dataStringLength == 0) {
       return;
diff --git a/js/xpconnect/loader/mozJSSubScriptLoader.cpp b/js/xpconnect/loader/mozJSSubScriptLoader.cpp
--- a/js/xpconnect/loader/mozJSSubScriptLoader.cpp
+++ b/js/xpconnect/loader/mozJSSubScriptLoader.cpp
@@ -547,17 +547,17 @@ mozJSSubScriptLoader::ReadScript(nsIURI*
         return false;
     }
 
     nsCString buf;
     rv = NS_ReadInputStreamToString(instream, buf, len);
     NS_ENSURE_SUCCESS(rv, false);
 
     return PrepareScript(uri, cx, targetObj, uriStr, charset,
-                         buf.get(), len, wantReturnValue,
+                         buf.BeginReading(), len, wantReturnValue,
                          script);
 }
 
 NS_IMETHODIMP
 mozJSSubScriptLoader::LoadSubScript(const nsAString& url,
                                     HandleValue target,
                                     const nsAString& charset,
                                     JSContext* cx,
diff --git a/toolkit/components/places/FaviconHelpers.cpp b/toolkit/components/places/FaviconHelpers.cpp
--- a/toolkit/components/places/FaviconHelpers.cpp
+++ b/toolkit/components/places/FaviconHelpers.cpp
@@ -1225,17 +1225,19 @@ FetchAndConvertUnsupportedPayloads::Run(
       continue;
     }
     uint8_t* data;
     uint32_t dataLen = 0;
     rv = stmt->GetBlob(2, &dataLen, &data);
     if (NS_WARN_IF(NS_FAILED(rv))) {
       continue;
     }
-    nsCString buf;
+    nsDependentCSubstring buf;
+    // FIXME: This makes the string think its buffer is null-terminated, when
+    // it's actually not.
     buf.Adopt(TO_CHARBUFFER(data), dataLen);
 
     int32_t width = 0;
     rv = ConvertPayload(id, mimeType, buf, &width);
     Unused << NS_WARN_IF(NS_FAILED(rv));
     if (NS_SUCCEEDED(rv)) {
       rv = StorePayload(id, width, buf);
       if (NS_WARN_IF(NS_FAILED(rv))) {
@@ -1267,17 +1269,17 @@ FetchAndConvertUnsupportedPayloads::Run(
 
   // Re-dispatch to the main-thread to flip the conversion pref.
   return NS_DispatchToMainThread(this);
 }
 
 nsresult
 FetchAndConvertUnsupportedPayloads::ConvertPayload(int64_t aId,
                                                    const nsACString& aMimeType,
-                                                   nsCString& aPayload,
+                                                   nsACString& aPayload,
                                                    int32_t* aWidth)
 {
   // TODO (bug 1346139): this should probably be unified with the function that
   // will handle additions optimization off the main thread.
   MOZ_ASSERT(!NS_IsMainThread());
   *aWidth = 0;
 
   // Exclude invalid mime types.
@@ -1291,17 +1293,17 @@ FetchAndConvertUnsupportedPayloads::Conv
   if (aMimeType.EqualsLiteral(SVG_MIME_TYPE)) {
     *aWidth = UINT16_MAX;
     return NS_OK;
   }
 
   // Convert the payload to an input stream.
   nsCOMPtr<nsIInputStream> stream;
   nsresult rv = NS_NewByteInputStream(getter_AddRefs(stream),
-                aPayload.get(), aPayload.Length(),
+                aPayload.BeginReading(), aPayload.Length(),
                 NS_ASSIGNMENT_DEPEND);
   NS_ENSURE_SUCCESS(rv, rv);
 
   // Decode the input stream to a surface.
   RefPtr<gfx::SourceSurface> surface =
       image::ImageOps::DecodeToSurface(stream.forget(),
                                        aMimeType,
                                        imgIContainer::DECODE_FLAGS_DEFAULT);
@@ -1381,17 +1383,17 @@ FetchAndConvertUnsupportedPayloads::Conv
   NS_ENSURE_SUCCESS(rv, rv);
 
   return NS_OK;
 }
 
 nsresult
 FetchAndConvertUnsupportedPayloads::StorePayload(int64_t aId,
                                                  int32_t aWidth,
-                                                 const nsCString& aPayload)
+                                                 const nsACString& aPayload)
 {
   MOZ_ASSERT(!NS_IsMainThread());
 
   NS_ENSURE_STATE(mDB);
   nsCOMPtr<mozIStorageStatement> stmt;
   nsresult rv = mDB->CreateStatement(NS_LITERAL_CSTRING(
     "UPDATE moz_icons SET data = :data, width = :width WHERE id = :id"
   ), getter_AddRefs(stmt));
diff --git a/toolkit/components/places/FaviconHelpers.h b/toolkit/components/places/FaviconHelpers.h
--- a/toolkit/components/places/FaviconHelpers.h
+++ b/toolkit/components/places/FaviconHelpers.h
@@ -26,17 +26,17 @@ class nsIPrincipal;
 #define ICON_STATUS_CHANGED 1 << 0
 #define ICON_STATUS_SAVED 1 << 1
 #define ICON_STATUS_ASSOCIATED 1 << 2
 #define ICON_STATUS_CACHED 1 << 3
 
 #define TO_CHARBUFFER(_buffer) \
   reinterpret_cast<char*>(const_cast<uint8_t*>(_buffer))
 #define TO_INTBUFFER(_string) \
-  reinterpret_cast<uint8_t*>(const_cast<char*>(_string.get()))
+  reinterpret_cast<uint8_t*>(const_cast<char*>((_string).BeginReading()))
 
 #define PNG_MIME_TYPE "image/png"
 #define SVG_MIME_TYPE "image/svg+xml"
 
 /**
  * The maximum time we will keep a favicon around.  We always ask the cache, if
  * we can, but default to this value if we do not get a time back, or the time
  * is more in the future than this.
@@ -345,18 +345,18 @@ public:
    *
    * @param aDBConn
    *        The database connection to use.
    */
   explicit FetchAndConvertUnsupportedPayloads(mozIStorageConnection* aDBConn);
 
 private:
   nsresult ConvertPayload(int64_t aId, const nsACString& aMimeType,
-                          nsCString& aPayload, int32_t* aWidth);
-  nsresult StorePayload(int64_t aId, int32_t aWidth, const nsCString& aPayload);
+                          nsACString& aPayload, int32_t* aWidth);
+  nsresult StorePayload(int64_t aId, int32_t aWidth, const nsACString& aPayload);
 
   nsCOMPtr<mozIStorageConnection> mDB;
 };
 
 /**
  * Copies Favicons from one page to another one.
  */
 class AsyncCopyFavicons final : public Runnable
