From: L. David Baron <dbaron@dbaron.org>

Bug 898329 patch 8:  Use for loops instead of while loops for iterating extra style contexts.

diff --git a/layout/base/RestyleManager.cpp b/layout/base/RestyleManager.cpp
--- a/layout/base/RestyleManager.cpp
+++ b/layout/base/RestyleManager.cpp
@@ -1598,25 +1598,21 @@ VerifyStyleTree(nsPresContext* aPresCont
         else { // regular frame
           VerifyStyleTree(aPresContext, child, nullptr);
         }
       }
     }
   }
 
   // do additional contexts
-  int32_t contextIndex = -1;
-  while (1) {
-    nsStyleContext* extraContext = aFrame->GetAdditionalStyleContext(++contextIndex);
-    if (extraContext) {
+  int32_t contextIndex = 0;
+  for (nsStyleContext* extraContext;
+       (extraContext = aFrame->GetAdditionalStyleContext(contextIndex));
+       ++contextIndex) {
       VerifyContextParent(aPresContext, aFrame, extraContext, context);
-    }
-    else {
-      break;
-    }
   }
 }
 
 void
 RestyleManager::DebugVerifyStyleTree(nsIFrame* aFrame)
 {
   if (aFrame) {
     nsStyleContext* context = aFrame->StyleContext();
@@ -1861,21 +1857,20 @@ RestyleManager::ReparentStyleContext(nsI
         nsIFrame* sib = static_cast<nsIFrame*>
           (aFrame->Properties().Get(nsIFrame::IBSplitSpecialSibling()));
         if (sib) {
           ReparentStyleContext(sib);
         }
       }
 
       // do additional contexts
-      int32_t contextIndex = -1;
-      while (1) {
-        nsStyleContext* oldExtraContext =
-          aFrame->GetAdditionalStyleContext(++contextIndex);
-        if (oldExtraContext) {
+      int32_t contextIndex = 0;
+      for (nsStyleContext* oldExtraContext;
+           (oldExtraContext = aFrame->GetAdditionalStyleContext(contextIndex));
+           ++contextIndex) {
           nsRefPtr<nsStyleContext> newExtraContext;
           newExtraContext = mPresContext->StyleSet()->
                               ReparentStyleContext(oldExtraContext,
                                                    newContext, nullptr);
           if (newExtraContext) {
             if (newExtraContext != oldExtraContext) {
               // Make sure to call CalcStyleDifference so that the new
               // context ends up resolving all the structs the old context
@@ -1889,20 +1884,16 @@ RestyleManager::ReparentStyleContext(nsI
               // reconstruct, and whenever it's happening we already plan to
               // reflow and repaint the frames.
               NS_ASSERTION(!(styleChange & nsChangeHint_ReconstructFrame),
                            "Our frame tree is likely to be bogus!");
             }
 
             aFrame->SetAdditionalStyleContext(contextIndex, newExtraContext);
           }
-        }
-        else {
-          break;
-        }
       }
 #ifdef DEBUG
       VerifyStyleTree(mPresContext, aFrame, newParentContext);
 #endif
     }
   }
 
   return NS_OK;
@@ -2292,21 +2283,20 @@ ElementRestyler::RestyleSelf(nsRestyleHi
           mFrame->SetStyleContext(newContext);
         }
       }
       oldContext = nullptr;
 
     // do additional contexts
     // XXXbz might be able to avoid selector matching here in some
     // cases; won't worry about it for now.
-    int32_t contextIndex = -1;
-    while (1 == 1) {
-      nsStyleContext* oldExtraContext = nullptr;
-      oldExtraContext = mFrame->GetAdditionalStyleContext(++contextIndex);
-      if (oldExtraContext) {
+    int32_t contextIndex = 0;
+    for (nsStyleContext* oldExtraContext;
+         (oldExtraContext = mFrame->GetAdditionalStyleContext(contextIndex));
+         ++contextIndex) {
         nsRefPtr<nsStyleContext> newExtraContext;
         nsIAtom* const extraPseudoTag = oldExtraContext->GetPseudo();
         const nsCSSPseudoElements::Type extraPseudoType =
           oldExtraContext->GetPseudoType();
         NS_ASSERTION(extraPseudoTag &&
                      extraPseudoTag != nsCSSAnonBoxes::mozNonElement,
                      "extra style context is not pseudo element");
         if (extraPseudoType == nsCSSPseudoElements::ePseudo_AnonBox) {
@@ -2326,20 +2316,16 @@ ElementRestyler::RestyleSelf(nsRestyleHi
         if (newExtraContext) {
           if (oldExtraContext != newExtraContext) {
             CaptureChange(oldExtraContext, newExtraContext, assumeDifferenceHint);
             if (!(mMinChange & nsChangeHint_ReconstructFrame)) {
               mFrame->SetAdditionalStyleContext(contextIndex, newExtraContext);
             }
           }
         }
-      }
-      else {
-        break;
-      }
     }
 }
 
 void
 ElementRestyler::RestyleChildren(nsRestyleHint aChildRestyleHint)
 {
     RestyleUndisplayedChildren(aChildRestyleHint);
 
