From: L. David Baron <dbaron@dbaron.org>

Bug 1157455 patch 3 - When interpolating angles, preserve units when possible in order to avoid floating point error.

This avoids accumulating floating point error from conversion, so that
when we switch to doubles at the start of
nsCSSValue::GetAngleValueInRadians we're using the original unit, rather
than a different one that will round differently.

diff --git a/layout/reftests/transform-3d/reftest.list b/layout/reftests/transform-3d/reftest.list
--- a/layout/reftests/transform-3d/reftest.list
+++ b/layout/reftests/transform-3d/reftest.list
@@ -55,11 +55,11 @@ fuzzy-if((gtk2Widget&&layersOMTC)||(winW
 pref(layout.css.will-change.enabled,true) == willchange-containing-block.html?willchange willchange-containing-block.html?ref
 pref(layout.css.will-change.enabled,true) != willchange-containing-block.html?willchange willchange-containing-block.html?noblock
 fuzzy-if(winWidget&&!layersGPUAccelerated,1,606) == scroll-perspective-1.html scroll-perspective-1-ref.html
 # Bugs
 fails-if(!layersGPUAccelerated) == 1035611-1.html 1035611-1-ref.html # Bug 1072898 for !layersGPUAccelerated failures
 == animate-cube-radians.html animate-cube-radians-ref.html
 fuzzy-if(/^Windows\x20NT\x206\.1/.test(http.oscpu)&&!layersGPUAccelerated,16,6) fuzzy-if(Mulet,16,9) == animate-cube-radians-zoom.html animate-cube-radians-zoom-ref.html
 != animate-cube-radians-ref.html animate-cube-radians-zoom-ref.html
-random == animate-cube-degrees.html animate-cube-degrees-ref.html # Bug 1157455
-random == animate-cube-degrees-zoom.html animate-cube-degrees-zoom-ref.html # Bug 1157455
+== animate-cube-degrees.html animate-cube-degrees-ref.html
+== animate-cube-degrees-zoom.html animate-cube-degrees-zoom-ref.html
 != animate-cube-degrees-ref.html animate-cube-degrees-zoom-ref.html
diff --git a/layout/style/StyleAnimationValue.cpp b/layout/style/StyleAnimationValue.cpp
--- a/layout/style/StyleAnimationValue.cpp
+++ b/layout/style/StyleAnimationValue.cpp
@@ -1036,19 +1036,26 @@ AddCSSValueCanonicalCalc(double aCoeff1,
   SetCalcValue(result, aResult);
 }
 
 static void
 AddCSSValueAngle(double aCoeff1, const nsCSSValue &aValue1,
                  double aCoeff2, const nsCSSValue &aValue2,
                  nsCSSValue &aResult)
 {
-  aResult.SetFloatValue(aCoeff1 * aValue1.GetAngleValueInRadians() +
-                        aCoeff2 * aValue2.GetAngleValueInRadians(),
-                        eCSSUnit_Radian);
+  if (aValue1.GetUnit() == aValue2.GetUnit()) {
+    // To avoid floating point error, if the units match, maintain the unit.
+    aResult.SetFloatValue(aCoeff1 * aValue1.GetFloatValue() +
+                          aCoeff2 * aValue2.GetFloatValue(),
+                          aValue1.GetUnit());
+  } else {
+    aResult.SetFloatValue(aCoeff1 * aValue1.GetAngleValueInRadians() +
+                          aCoeff2 * aValue2.GetAngleValueInRadians(),
+                          eCSSUnit_Radian);
+  }
 }
 
 static bool
 AddCSSValuePixelPercentCalc(const uint32_t aValueRestrictions,
                             const nsCSSUnit aCommonUnit,
                             double aCoeff1, const nsCSSValue &aValue1,
                             double aCoeff2, const nsCSSValue &aValue2,
                             nsCSSValue &aResult)
