Debugging code and cleanup from fixing Windows stack traces to work on VC8-compiled builds in addition to VC7.1-compiled builds.  b=391848  r=bsmedberg

diff --git a/xpcom/base/nsStackFrameWin.cpp b/xpcom/base/nsStackFrameWin.cpp
--- a/xpcom/base/nsStackFrameWin.cpp
+++ b/xpcom/base/nsStackFrameWin.cpp
@@ -140,7 +140,8 @@ void PrintError(char *prefix)
       0,
       NULL
     );
-    fprintf(stderr, "### ERROR: %s: %s", prefix, lpMsgBuf);
+    fprintf(stderr, "### ERROR: %s: %s",
+                    prefix, lpMsgBuf ? lpMsgBuf : "(null)\n");
     fflush(stderr);
     LocalFree( lpMsgBuf );
 }
@@ -270,6 +271,8 @@ static BOOL CALLBACK callbackEspecial(
        : (addr <= aModuleBase && addr >= (aModuleBase - aModuleSize))
         ) {
         retval = _SymLoadModule(GetCurrentProcess(), NULL, aModuleName, NULL, aModuleBase, aModuleSize);
+        if (!retval)
+            PrintError("SymLoadModule");
     }
 
     return retval;
@@ -300,6 +303,8 @@ static BOOL CALLBACK callbackEspecial64(
        : (addr <= aModuleBase && addr >= (aModuleBase - aModuleSize))
         ) {
         retval = _SymLoadModule64(GetCurrentProcess(), NULL, aModuleName, NULL, aModuleBase, aModuleSize);
+        if (!retval)
+            PrintError("SymLoadModule64");
     }
 
     return retval;
@@ -342,7 +347,7 @@ BOOL SymGetModuleInfoEspecial(HANDLE aPr
          * Not loaded, here's the magic.
          * Go through all the modules.
          */
-        enumRes = _EnumerateLoadedModules(aProcess, (PENUMLOADED_MODULES_CALLBACK)callbackEspecial, (PVOID)&aAddr);
+        enumRes = _EnumerateLoadedModules(aProcess, callbackEspecial, (PVOID)&aAddr);
         if (FALSE != enumRes)
         {
             /*
@@ -350,6 +355,8 @@ BOOL SymGetModuleInfoEspecial(HANDLE aPr
              * If it fails, then well, we have other problems.
              */
             retval = _SymGetModuleInfo(aProcess, aAddr, aModuleInfo);
+            if (!retval)
+                PrintError("SymGetModuleInfo");
         }
     }
 
@@ -392,7 +399,7 @@ BOOL SymGetModuleInfoEspecial64(HANDLE a
          * Not loaded, here's the magic.
          * Go through all the modules.
          */
-        enumRes = _EnumerateLoadedModules64(aProcess, (PENUMLOADED_MODULES_CALLBACK64)callbackEspecial64, (PVOID)&aAddr);
+        enumRes = _EnumerateLoadedModules64(aProcess, callbackEspecial64, (PVOID)&aAddr);
         if (FALSE != enumRes)
         {
             /*
@@ -400,6 +407,8 @@ BOOL SymGetModuleInfoEspecial64(HANDLE a
              * If it fails, then well, we have other problems.
              */
             retval = _SymGetModuleInfo64(aProcess, aAddr, aModuleInfo);
+            if (!retval)
+                PrintError("SymGetModuleInfo64");
         }
     }
 
@@ -474,7 +483,7 @@ NS_StackWalk(NS_WalkStackCallback aCallb
                            ::GetCurrentProcess(),
                            ::GetCurrentProcess(),
                            &myProcess,
-                           THREAD_ALL_ACCESS, FALSE, 0)) {
+                           PROCESS_ALL_ACCESS, FALSE, 0)) {
         PrintError("DuplicateHandle (process)");
         return NS_ERROR_FAILURE;
     }
