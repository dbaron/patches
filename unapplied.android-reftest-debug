From: L. David Baron <dbaron@dbaron.org>

Debugging code for android reftest issue.  (Bug 627842)  DO NOT CHECK IN

diff --git a/layout/generic/nsTextFrameThebes.cpp b/layout/generic/nsTextFrameThebes.cpp
--- a/layout/generic/nsTextFrameThebes.cpp
+++ b/layout/generic/nsTextFrameThebes.cpp
@@ -547,27 +547,53 @@ public:
   // This gets called when the timeout has expired on a gfxTextRun
   virtual void NotifyExpired(gfxTextRun* aTextRun) {
     UnhookTextRunFromFrames(aTextRun, nsnull);
     RemoveFromCache(aTextRun);
     delete aTextRun;
   }
 };
 
+static void
+ReportFontSize(const char* aText, gfxFontGroup *aFontGroup)
+{
+  double size = aFontGroup->GetStyle()->size;
+  nsAutoString str(NS_LITERAL_STRING("Rendering \""));
+  AppendUTF8toUTF16(aText, str);
+  str.AppendLiteral("\" at font size ");
+  str.AppendFloat(size);
+  const PRUnichar *strs[1] = { str.get() };
+  nsContentUtils::ReportToConsole(nsIScriptError::errorFlag, "Text",
+                                  nsnull, /* document */
+                                  nsContentUtils::eDOM_PROPERTIES,
+                                  "KillScriptLocation", strs, 1);
+}
+
 static gfxTextRun *
 MakeTextRun(const PRUnichar *aText, PRUint32 aLength,
             gfxFontGroup *aFontGroup, const gfxFontGroup::Parameters* aParams,
             PRUint32 aFlags)
 {
     nsAutoPtr<gfxTextRun> textRun;
     if (aLength == 0) {
         textRun = aFontGroup->MakeEmptyTextRun(aParams, aFlags);
     } else if (aLength == 1 && aText[0] == ' ') {
         textRun = aFontGroup->MakeSpaceTextRun(aParams, aFlags);
     } else {
+        if (aLength == 5) {
+          if (!nsCRT::strncmp(aText, NS_LITERAL_STRING("Hello").get(), 5)) {
+            ReportFontSize("Hello", aFontGroup);
+          } else if (!nsCRT::strncmp(aText, NS_LITERAL_STRING("World").get(), 5)) {
+            ReportFontSize("World", aFontGroup);
+          }
+        } else if (aLength == 10) {
+          if (!nsCRT::strncmp(aText, NS_LITERAL_STRING("HelloWorld").get(), 10)) {
+            ReportFontSize("HelloWorld", aFontGroup);
+          }
+        }
         textRun = gfxTextRunWordCache::MakeTextRun(aText, aLength, aFontGroup,
             aParams, aFlags);
     }
     if (!textRun)
         return nsnull;
     nsresult rv = gTextRuns->AddObject(textRun);
     if (NS_FAILED(rv)) {
         gTextRuns->RemoveFromCache(textRun);
@@ -585,16 +611,27 @@ MakeTextRun(const PRUint8 *aText, PRUint
             PRUint32 aFlags)
 {
     nsAutoPtr<gfxTextRun> textRun;
     if (aLength == 0) {
         textRun = aFontGroup->MakeEmptyTextRun(aParams, aFlags);
     } else if (aLength == 1 && aText[0] == ' ') {
         textRun = aFontGroup->MakeSpaceTextRun(aParams, aFlags);
     } else {
+        if (aLength == 5) {
+          if (!nsCRT::strncmp(reinterpret_cast<const char*>(aText), "Hello", 5)) {
+            ReportFontSize("Hello", aFontGroup);
+          } else if (!nsCRT::strncmp(reinterpret_cast<const char*>(aText), "World", 5)) {
+            ReportFontSize("World", aFontGroup);
+          }
+        } else if (aLength == 10) {
+          if (!nsCRT::strncmp(reinterpret_cast<const char*>(aText), "HelloWorld", 10)) {
+            ReportFontSize("HelloWorld", aFontGroup);
+          }
+        }
         textRun = gfxTextRunWordCache::MakeTextRun(aText, aLength, aFontGroup,
             aParams, aFlags);
     }
     if (!textRun)
         return nsnull;
     nsresult rv = gTextRuns->AddObject(textRun);
     if (NS_FAILED(rv)) {
         gTextRuns->RemoveFromCache(textRun);
