Implement CSS computation of font-stretch property.  b=3512

diff --git a/gfx/public/nsFont.h b/gfx/public/nsFont.h
--- a/gfx/public/nsFont.h
+++ b/gfx/public/nsFont.h
@@ -84,6 +84,11 @@ struct NS_GFX nsFont {
   // The weight of the font (0-999)
   PRUint16 weight;
 
+  // The stretch of the font (the sum of various NS_STYLE_FONT_STRETCH_*
+  // constants; see nsStyleConsts.h).
+  // FIXME: These constants belong someplace else (probably gfxFontStyle)
+  PRInt16 stretch;
+
   // The decorations on the font (underline, overline,
   // line-through). The decorations can be binary or'd together.
   PRUint8 decorations;
diff --git a/gfx/src/nsFont.cpp b/gfx/src/nsFont.cpp
--- a/gfx/src/nsFont.cpp
+++ b/gfx/src/nsFont.cpp
@@ -52,6 +52,7 @@ nsFont::nsFont(const char* aName, PRUint
   variant = aVariant;
   familyNameQuirks = PR_FALSE;
   weight = aWeight;
+  stretch = 0; // FIXME: make this a parameter!
   decorations = aDecoration;
   size = aSize;
   sizeAdjust = aSizeAdjust;
@@ -67,6 +68,7 @@ nsFont::nsFont(const nsString& aName, PR
   variant = aVariant;
   familyNameQuirks = PR_FALSE;
   weight = aWeight;
+  stretch = 0; // FIXME: make this a parameter!
   decorations = aDecoration;
   size = aSize;
   sizeAdjust = aSizeAdjust;
@@ -80,6 +82,7 @@ nsFont::nsFont(const nsFont& aOther)
   variant = aOther.variant;
   familyNameQuirks = aOther.familyNameQuirks;
   weight = aOther.weight;
+  stretch = aOther.stretch;
   decorations = aOther.decorations;
   size = aOther.size;
   sizeAdjust = aOther.sizeAdjust;
@@ -99,6 +102,7 @@ PRBool nsFont::BaseEquals(const nsFont& 
       (systemFont == aOther.systemFont) &&
       (familyNameQuirks == aOther.familyNameQuirks) &&
       (weight == aOther.weight) &&
+      (stretch == aOther.stretch) &&
       (size == aOther.size) &&
       (sizeAdjust == aOther.sizeAdjust) &&
       name.Equals(aOther.name, nsCaseInsensitiveStringComparator())) {
@@ -125,6 +129,7 @@ nsFont& nsFont::operator=(const nsFont& 
   variant = aOther.variant;
   familyNameQuirks = aOther.familyNameQuirks;
   weight = aOther.weight;
+  stretch = aOther.stretch;
   decorations = aOther.decorations;
   size = aOther.size;
   sizeAdjust = aOther.sizeAdjust;
diff --git a/gfx/src/thebes/nsThebesFontMetrics.cpp b/gfx/src/thebes/nsThebesFontMetrics.cpp
--- a/gfx/src/thebes/nsThebesFontMetrics.cpp
+++ b/gfx/src/thebes/nsThebesFontMetrics.cpp
@@ -84,6 +84,9 @@ nsThebesFontMetrics::Init(const nsFont& 
     mFontStyle = new gfxFontStyle(aFont.style, aFont.weight, size, langGroup,
                                   aFont.sizeAdjust, aFont.systemFont,
                                   aFont.familyNameQuirks);
+    // FIXME: pass this as a parameter in the line above once we have such
+    // a parameter.
+    mFontStyle->stretch = aFont.stretch;
 
     mFontGroup =
         gfxPlatform::GetPlatform()->CreateFontGroup(aFont.name, mFontStyle);
diff --git a/gfx/thebes/public/gfxFont.h b/gfx/thebes/public/gfxFont.h
--- a/gfx/thebes/public/gfxFont.h
+++ b/gfx/thebes/public/gfxFont.h
@@ -98,6 +98,11 @@ struct THEBES_API gfxFontStyle {
     // font being used, since it is two weights lighter than 900.
     PRUint16 weight;
 
+    // The stretch of the font (the sum of various NS_STYLE_FONT_STRETCH_*
+    // constants; see nsStyleConsts.h).
+    // FIXME: These constants belong someplace else (probably this file)!
+    PRInt16 stretch;
+
     // The logical size of the font, in pixels
     gfxFloat size;
 
@@ -133,6 +138,7 @@ struct THEBES_API gfxFontStyle {
             (systemFont == other.systemFont) &&
             (familyNameQuirks == other.familyNameQuirks) &&
             (weight == other.weight) &&
+            (stretch == other.stretch) &&
             (langGroup.Equals(other.langGroup)) &&
             (sizeAdjust == other.sizeAdjust);
     }
diff --git a/gfx/thebes/src/gfxFont.cpp b/gfx/thebes/src/gfxFont.cpp
--- a/gfx/thebes/src/gfxFont.cpp
+++ b/gfx/thebes/src/gfxFont.cpp
@@ -920,7 +920,8 @@ gfxFontGroup::MakeSpaceTextRun(const Par
 
 gfxFontStyle::gfxFontStyle() :
     style(FONT_STYLE_NORMAL), systemFont(PR_TRUE), familyNameQuirks(PR_FALSE),
-    weight(FONT_WEIGHT_NORMAL), size(DEFAULT_PIXEL_FONT_SIZE),
+    // FIXME: Use name of constant for font stretch!
+    weight(FONT_WEIGHT_NORMAL), stretch(0), size(DEFAULT_PIXEL_FONT_SIZE),
     langGroup(NS_LITERAL_CSTRING("x-western")), sizeAdjust(0.0f)
 {
 }
@@ -931,6 +932,7 @@ gfxFontStyle::gfxFontStyle(PRUint8 aStyl
                            PRPackedBool aFamilyNameQuirks) :
     style(aStyle), systemFont(aSystemFont),
     familyNameQuirks(aFamilyNameQuirks), weight(aWeight),
+    stretch(0), // FIXME: Make this a parameter!
     size(aSize), langGroup(aLangGroup), sizeAdjust(aSizeAdjust)
 {
     if (weight > 900)
@@ -955,7 +957,7 @@ gfxFontStyle::gfxFontStyle(const gfxFont
 gfxFontStyle::gfxFontStyle(const gfxFontStyle& aStyle) :
     style(aStyle.style), systemFont(aStyle.systemFont),
     familyNameQuirks(aStyle.familyNameQuirks), weight(aStyle.weight),
-    size(aStyle.size), langGroup(aStyle.langGroup),
+    stretch(aStyle.stretch), size(aStyle.size), langGroup(aStyle.langGroup),
     sizeAdjust(aStyle.sizeAdjust)
 {
 }
diff --git a/layout/style/nsCSSPropList.h b/layout/style/nsCSSPropList.h
--- a/layout/style/nsCSSPropList.h
+++ b/layout/style/nsCSSPropList.h
@@ -391,7 +391,7 @@ CSS_PROP_FONT(font-family, font_family, 
 CSS_PROP_FONT(font-family, font_family, FontFamily, Font, mFamily, eCSSType_Value, nsnull)
 CSS_PROP_FONT(font-size, font_size, FontSize, Font, mSize, eCSSType_Value, kFontSizeKTable)
 CSS_PROP_FONT(font-size-adjust, font_size_adjust, FontSizeAdjust, Font, mSizeAdjust, eCSSType_Value, nsnull)
-CSS_PROP_BACKENDONLY(font-stretch, font_stretch, FontStretch, Font, mStretch, eCSSType_Value, kFontStretchKTable)
+CSS_PROP_FONT(font-stretch, font_stretch, FontStretch, Font, mStretch, eCSSType_Value, kFontStretchKTable)
 CSS_PROP_FONT(font-style, font_style, FontStyle, Font, mStyle, eCSSType_Value, kFontStyleKTable)
 CSS_PROP_FONT(font-variant, font_variant, FontVariant, Font, mVariant, eCSSType_Value, kFontVariantKTable)
 CSS_PROP_FONT(font-weight, font_weight, FontWeight, Font, mWeight, eCSSType_Value, kFontWeightKTable)
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -70,6 +70,7 @@
 #include "nsInspectorCSSUtils.h"
 #include "nsLayoutUtils.h"
 #include "nsFrameManager.h"
+#include "prlog.h"
 
 #if defined(DEBUG_bzbarsky) || defined(DEBUG_caillon)
 #define DEBUG_ComputedDOMStyle
@@ -896,6 +897,35 @@ nsComputedDOMStyle::GetFontSizeAdjust(ns
 }
 
 nsresult
+nsComputedDOMStyle::GetFontStretch(nsIDOMCSSValue** aValue)
+{
+  nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
+  NS_ENSURE_TRUE(val, NS_ERROR_OUT_OF_MEMORY);
+
+  const nsStyleFont* font = GetStyleFont();
+
+  // The computed value space isn't actually representable in string
+  // form, so just represent anything with widers or narrowers in it as
+  // 'wider' or 'narrower'.
+  PR_STATIC_ASSERT(NS_STYLE_FONT_STRETCH_NARROWER == -10);
+  PR_STATIC_ASSERT(NS_STYLE_FONT_STRETCH_WIDER == 10);
+  PRInt16 stretch = font->mFont.stretch;
+  if (stretch == NS_STYLE_FONT_STRETCH_NORMAL) {
+    val->SetIdent(nsGkAtoms::normal);
+  } else if (stretch <= -5) {
+    val->SetIdent(eCSSKeyword_narrower);
+  } else if (stretch >= 5) {
+    val->SetIdent(eCSSKeyword_wider);
+  } else {
+    const nsAFlatCString& str_stretch =
+      nsCSSProps::ValueToKeyword(stretch, nsCSSProps::kFontStretchKTable);
+    val->SetIdent(str_stretch);
+  }
+
+  return CallQueryInterface(val, aValue);
+}
+
+nsresult
 nsComputedDOMStyle::GetFontStyle(nsIDOMCSSValue** aValue)
 {
   nsROCSSPrimitiveValue* val = GetROCSSPrimitiveValue();
@@ -923,6 +953,7 @@ nsComputedDOMStyle::GetFontWeight(nsIDOM
 
   const nsStyleFont* font = GetStyleFont();
 
+  // XXX This doesn't deal with bolder/lighter very well.
   const nsAFlatCString& str_weight=
     nsCSSProps::ValueToKeyword(font->mFont.weight,
                                nsCSSProps::kFontWeightKTable);
@@ -3695,7 +3726,7 @@ nsComputedDOMStyle::GetQueryableProperty
     COMPUTED_STYLE_MAP_ENTRY(font_family,                   FontFamily),
     COMPUTED_STYLE_MAP_ENTRY(font_size,                     FontSize),
     COMPUTED_STYLE_MAP_ENTRY(font_size_adjust,              FontSizeAdjust),
-    // COMPUTED_STYLE_MAP_ENTRY(font_stretch,               FontStretch),
+    COMPUTED_STYLE_MAP_ENTRY(font_stretch,                  FontStretch),
     COMPUTED_STYLE_MAP_ENTRY(font_style,                    FontStyle),
     COMPUTED_STYLE_MAP_ENTRY(font_variant,                  FontVariant),
     COMPUTED_STYLE_MAP_ENTRY(font_weight,                   FontWeight),
diff --git a/layout/style/nsComputedDOMStyle.h b/layout/style/nsComputedDOMStyle.h
--- a/layout/style/nsComputedDOMStyle.h
+++ b/layout/style/nsComputedDOMStyle.h
@@ -137,9 +137,10 @@ private:
   /* Font properties */
   nsresult GetColor(nsIDOMCSSValue** aValue);
   nsresult GetFontFamily(nsIDOMCSSValue** aValue);
-  nsresult GetFontStyle(nsIDOMCSSValue** aValue);
   nsresult GetFontSize(nsIDOMCSSValue** aValue);
   nsresult GetFontSizeAdjust(nsIDOMCSSValue** aValue);
+  nsresult GetFontStretch(nsIDOMCSSValue** aValue);
+  nsresult GetFontStyle(nsIDOMCSSValue** aValue);
   nsresult GetFontWeight(nsIDOMCSSValue** aValue);
   nsresult GetFontVariant(nsIDOMCSSValue** aValue);
 
diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -685,10 +685,11 @@ CheckFontCallback(const nsRuleDataStruct
 
   // em, ex, percent, 'larger', and 'smaller' values on font-size depend
   // on the parent context's font-size
-  // Likewise, 'lighter' and 'bolder' values of 'font-weight' depend on
-  // the parent.
+  // Likewise, 'lighter' and 'bolder' values of 'font-weight', and 'wider'
+  // and 'narrower' values of 'font-stretch' depend on the parent.
   const nsCSSValue& size = fontData.mSize;
   const nsCSSValue& weight = fontData.mWeight;
+  const nsCSSValue& stretch = fontData.mStretch;
   if ((size.IsRelativeLengthUnit() && size.GetUnit() != eCSSUnit_Pixel) ||
       size.GetUnit() == eCSSUnit_Percent ||
       (size.GetUnit() == eCSSUnit_Enumerated &&
@@ -697,6 +698,9 @@ CheckFontCallback(const nsRuleDataStruct
 #ifdef MOZ_MATHML
       fontData.mScriptLevel.GetUnit() == eCSSUnit_Integer ||
 #endif
+      (stretch.GetUnit() == eCSSUnit_Enumerated &&
+       (stretch.GetIntValue() == NS_STYLE_FONT_STRETCH_NARROWER ||
+        stretch.GetIntValue() == NS_STYLE_FONT_STRETCH_WIDER)) ||
       (weight.GetUnit() == eCSSUnit_Enumerated &&
        (weight.GetIntValue() == NS_STYLE_FONT_WEIGHT_BOLDER ||
         weight.GetIntValue() == NS_STYLE_FONT_WEIGHT_LIGHTER))) {
@@ -2321,6 +2325,35 @@ nsRuleNode::SetFont(nsPresContext* aPres
   else if (eCSSUnit_Initial == aFontData.mWeight.GetUnit()) {
     aFont->mFont.weight = defaultVariableFont->weight;
   }
+
+  // font-stretch: enum, normal, inherit
+  if (eCSSUnit_Enumerated == aFontData.mStretch.GetUnit()) {
+    PRInt32 value = aFontData.mStretch.GetIntValue();
+    switch (value) {
+      case NS_STYLE_FONT_STRETCH_WIDER:
+      case NS_STYLE_FONT_STRETCH_NARROWER:
+        aInherited = PR_TRUE;
+        aFont->mFont.stretch = aParentFont->mFont.stretch + value;
+        break;
+      default:
+        aFont->mFont.stretch = value;
+        break;
+    }
+  }
+  else if (eCSSUnit_Normal == aFontData.mStretch.GetUnit()) {
+    aFont->mFont.stretch = NS_STYLE_FONT_STRETCH_NORMAL;
+  }
+  else if (eCSSUnit_System_Font == aFontData.mStretch.GetUnit()) {
+    aFont->mFont.stretch = systemFont.stretch;
+  }
+  else if (eCSSUnit_Inherit == aFontData.mStretch.GetUnit()) {
+    aInherited = PR_TRUE;
+    aFont->mFont.stretch = aParentFont->mFont.stretch;
+  }
+  else if (eCSSUnit_Initial == aFontData.mStretch.GetUnit()) {
+    aFont->mFont.stretch = defaultVariableFont->stretch;
+  }
+
 
 #ifdef MOZ_MATHML
   // Compute scriptlevel, scriptminsize and scriptsizemultiplier now so
diff --git a/layout/style/nsStyleStruct.cpp b/layout/style/nsStyleStruct.cpp
--- a/layout/style/nsStyleStruct.cpp
+++ b/layout/style/nsStyleStruct.cpp
@@ -197,6 +197,7 @@ nsChangeHint nsStyleFont::CalcFontDiffer
       (aFont1.variant == aFont2.variant) &&
       (aFont1.familyNameQuirks == aFont2.familyNameQuirks) &&
       (aFont1.weight == aFont2.weight) &&
+      (aFont1.stretch == aFont2.stretch) &&
       (aFont1.name == aFont2.name)) {
     if ((aFont1.decorations == aFont2.decorations)) {
       return NS_STYLE_HINT_NONE;
diff --git a/layout/style/test/property_database.js b/layout/style/test/property_database.js
--- a/layout/style/test/property_database.js
+++ b/layout/style/test/property_database.js
@@ -919,7 +919,6 @@ var gCSSProperties = {
 	"font-stretch": {
 		domProp: "fontStretch",
 		inherited: true,
-		backend_only: true,
 		type: CSS_TYPE_LONGHAND,
 		initial_values: [ "normal" ],
 		other_values: [ "wider", "narrower", "ultra-condensed", "extra-condensed", "condensed", "semi-condensed", "semi-expanded", "expanded", "extra-expanded", "ultra-expanded" ],
