From: L. David Baron <dbaron@dbaron.org>

Bug 1133375 - Condition starting (or cancelling) CSS transitions on the combined duration, rather than delay and duration both being exactly 0.

diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -1902,16 +1902,21 @@ struct StyleTransition {
   // Delay and Duration are in milliseconds
 
   const nsTimingFunction& GetTimingFunction() const { return mTimingFunction; }
   float GetDelay() const { return mDelay; }
   float GetDuration() const { return mDuration; }
   nsCSSProperty GetProperty() const { return mProperty; }
   nsIAtom* GetUnknownProperty() const { return mUnknownProperty; }
 
+  float GetCombinedDuration() const {
+    // http://dev.w3.org/csswg/css-transitions/#combined-duration
+    return std::max(mDuration, 0.0f) + mDelay;
+  }
+
   void SetTimingFunction(const nsTimingFunction& aTimingFunction)
     { mTimingFunction = aTimingFunction; }
   void SetDelay(float aDelay) { mDelay = aDelay; }
   void SetDuration(float aDuration) { mDuration = aDuration; }
   void SetProperty(nsCSSProperty aProperty)
     {
       NS_ASSERTION(aProperty != eCSSProperty_UNKNOWN, "invalid property");
       mProperty = aProperty;
diff --git a/layout/style/nsTransitionManager.cpp b/layout/style/nsTransitionManager.cpp
--- a/layout/style/nsTransitionManager.cpp
+++ b/layout/style/nsTransitionManager.cpp
@@ -171,18 +171,17 @@ nsTransitionManager::StyleContextChanged
     // :before or :after is attached to.
     aElement = aElement->GetParent()->AsElement();
   }
 
   AnimationPlayerCollection* collection =
     GetAnimationPlayers(aElement, pseudoType, false);
   if (!collection &&
       disp->mTransitionPropertyCount == 1 &&
-      disp->mTransitions[0].GetDelay() == 0.0f &&
-      disp->mTransitions[0].GetDuration() == 0.0f) {
+      disp->mTransitions[0].GetCombinedDuration() <= 0.0f) {
     return;
   }
 
   if (collection &&
       collection->mCheckGeneration ==
         mPresContext->RestyleManager()->GetAnimationGeneration()) {
     // When we start a new transition, we immediately post a restyle.
     // If the animation generation on the collection is current, that
@@ -222,19 +221,20 @@ nsTransitionManager::StyleContextChanged
   // Per http://lists.w3.org/Archives/Public/www-style/2009Aug/0109.html
   // I'll consider only the transitions from the number of items in
   // 'transition-property' on down, and later ones will override earlier
   // ones (tracked using |whichStarted|).
   bool startedAny = false;
   nsCSSPropertySet whichStarted;
   for (uint32_t i = disp->mTransitionPropertyCount; i-- != 0; ) {
     const StyleTransition& t = disp->mTransitions[i];
-    // Check delay and duration first, since they default to zero, and
-    // when they're both zero, we can ignore the transition.
-    if (t.GetDelay() != 0.0f || t.GetDuration() != 0.0f) {
+    // Check the combined duration (combination of delay and duration)
+    // first, since it defaults to zero, which means we can ignore the
+    // transition.
+    if (t.GetCombinedDuration() > 0.0f) {
       // We might have something to transition.  See if any of the
       // properties in question changed and are animatable.
       // FIXME: Would be good to find a way to share code between this
       // interpretation of transition-property and the one below.
       nsCSSProperty property = t.GetProperty();
       if (property == eCSSPropertyExtra_no_properties ||
           property == eCSSPropertyExtra_variable ||
           property == eCSSProperty_UNKNOWN) {
diff --git a/layout/style/test/test_transitions_dynamic_changes.html b/layout/style/test/test_transitions_dynamic_changes.html
--- a/layout/style/test/test_transitions_dynamic_changes.html
+++ b/layout/style/test/test_transitions_dynamic_changes.html
@@ -13,16 +13,17 @@ https://bugzilla.mozilla.org/show_bug.cg
 <p id="display" style="text-indent: 100px"></p>
 <pre id="test">
 <script type="application/javascript">
 
 /** Test for Bug 525530 **/
 
 var p = document.getElementById("display");
 var cs = getComputedStyle(p, "");
+var utils = SpecialPowers.DOMWindowUtils;
 
 p.style.transitionProperty = "all";
 p.style.transitionDuration = "4s";
 p.style.transitionDelay = "-2s";
 p.style.transitionTimingFunction = "linear";
 
 is(cs.textIndent, "100px", "initial value");
 
@@ -48,12 +49,31 @@ is(cs.textIndent, "50px", "transition is
 p.style.transitionDuration = "0s";
 p.style.transitionDelay = "0s";
 is(cs.textIndent, "50px",
    "changing duration and delay doesn't change transitioning");
 p.style.textIndent = "0px";
 is(cs.textIndent, "0px",
    "changing property after changing duration and delay stops transition");
 
+/** Test for Bug 1133375 */
+p.style.transitionDuration = "1s";
+p.style.transitionDelay = "-1s";
+p.style.transitionProperty = "text-indent";
+var endCount = 0;
+function incrementEndCount(event) { ++endCount; }
+p.addEventListener("transitionend", incrementEndCount, false);
+utils.advanceTimeAndRefresh(0);
+p.style.textIndent = "100px";
+is(cs.textIndent, "100px", "value should now be 100px");
+utils.advanceTimeAndRefresh(10);
+is(endCount, 0, "should not have started transition when combined duration less than or equal to 0");
+p.style.transitionDelay = "-2s";
+p.style.textIndent = "0";
+is(cs.textIndent, "0px", "value should now be 100px");
+utils.advanceTimeAndRefresh(10);
+is(endCount, 0, "should not have started transition when combined duration less than or equal to 0");
+utils.restoreNormalRefresh();
+
 </script>
 </pre>
 </body>
 </html>
