Change nsStyleUtil::EscapeCSSString to nsStyleUtil::AppendEscapedCSSString, since almost all callers prefer append behavior anyway.  (Bug 478160)

diff --git a/layout/style/nsCSSRules.cpp b/layout/style/nsCSSRules.cpp
--- a/layout/style/nsCSSRules.cpp
+++ b/layout/style/nsCSSRules.cpp
@@ -1499,28 +1499,24 @@ SerializeFontSrc(const nsCSSValue& src, 
 
   const nsCSSValue::Array& sources = *src.GetArrayValue();
   PRUint32 i = 0;
 
   while (i < sources.Count()) {
     nsAutoString formats;
 
     if (sources[i].GetUnit() == eCSSUnit_URL) {
+      aResult.AppendLiteral("url(\"");
       nsDependentString url(sources[i].GetOriginalURLValue());
-      nsAutoString escapedUrl;
-      nsStyleUtil::EscapeCSSString(url, escapedUrl);
-      aResult.AppendLiteral("url(\"");
-      aResult.Append(escapedUrl);
+      nsStyleUtil::AppendEscapedCSSString(url, aResult);
       aResult.AppendLiteral("\")");
     } else if (sources[i].GetUnit() == eCSSUnit_Local_Font) {
+      aResult.AppendLiteral("local(\"");
       nsDependentString local(sources[i].GetStringBufferValue());
-      nsAutoString escapedLocal;
-      nsStyleUtil::EscapeCSSString(local, escapedLocal);
-      aResult.AppendLiteral("local(\"");
-      aResult.Append(escapedLocal);
+      nsStyleUtil::AppendEscapedCSSString(local, aResult);
       aResult.AppendLiteral("\")");
     } else {
       NS_NOTREACHED("entry in src: descriptor with improper unit");
       i++;
       continue;
     }
 
     i++;
@@ -1579,21 +1575,19 @@ nsCSSFontFaceStyleDecl::GetPropertyValue
 
   const nsCSSValue& val = this->*nsCSSFontFaceStyleDecl::Fields[aFontDescID];
 
   switch (aFontDescID) {
   case eCSSFontDesc_Family: {
       // we don't use AppendCSSValueToString here because it doesn't
       // canonicalize the way we want, and anyway it's overkill when
       // we know we have eCSSUnit_String
+      aResult.Append('"');
       nsDependentString family(val.GetStringBufferValue());
-      nsAutoString escapedFamily;
-      nsStyleUtil::EscapeCSSString(family, escapedFamily);
-      aResult.Append('"');
-      aResult.Append(escapedFamily);
+      nsStyleUtil::AppendEscapedCSSString(family, aResult);
       aResult.Append('"');
       return NS_OK;
     }
 
   case eCSSFontDesc_Style:
     nsCSSDeclaration::AppendCSSValueToString(eCSSProperty_font_style, val,
                                              aResult);
     return NS_OK;
diff --git a/layout/style/nsCSSStyleRule.cpp b/layout/style/nsCSSStyleRule.cpp
--- a/layout/style/nsCSSStyleRule.cpp
+++ b/layout/style/nsCSSStyleRule.cpp
@@ -668,21 +668,18 @@ nsCSSSelector::AppendToStringWithoutComb
         else if (list->mFunction == NS_ATTR_FUNC_ENDSMATCH)
           aString.Append(PRUnichar('$'));
         else if (list->mFunction == NS_ATTR_FUNC_CONTAINSMATCH)
           aString.Append(PRUnichar('*'));
 
         aString.Append(PRUnichar('='));
       
         // Append the value
-        nsAutoString escaped;
-        nsStyleUtil::EscapeCSSString(list->mValue, escaped);
-      
         aString.Append(PRUnichar('\"'));
-        aString.Append(escaped);
+        nsStyleUtil::AppendEscapedCSSString(list->mValue, aString);
         aString.Append(PRUnichar('\"'));
       }
 
       aString.Append(PRUnichar(']'));
       
       list = list->mNext;
     }
   }
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -698,19 +698,19 @@ nsComputedDOMStyle::GetContent(nsIDOMCSS
       return NS_ERROR_OUT_OF_MEMORY;
     }
 
     const nsStyleContentData &data = content->ContentAt(i);
     switch (data.mType) {
       case eStyleContentType_String:
         {
           nsString str;
-          nsStyleUtil::EscapeCSSString(nsDependentString(data.mContent.mString),
-                                       str);
-          str.Insert(PRUnichar('"'), 0);
+          str.Append(PRUnichar('"'));
+          nsStyleUtil::AppendEscapedCSSString(
+            nsDependentString(data.mContent.mString), str);
           str.Append(PRUnichar('"'));
           val->SetString(str);
         }
         break;
       case eStyleContentType_Image:
         {
           nsCOMPtr<nsIURI> uri;
           if (data.mContent.mImage) {
@@ -737,20 +737,18 @@ nsComputedDOMStyle::GetContent(nsIDOMCSS
           // WRITE ME
           nsCSSValue::Array *a = data.mContent.mCounters;
 
           str.Append(a->Item(0).GetStringBufferValue());
           PRInt32 typeItem = 1;
           if (data.mType == eStyleContentType_Counters) {
             typeItem = 2;
             str.AppendLiteral(", \"");
-            nsString itemstr;
-            nsStyleUtil::EscapeCSSString(
-              nsDependentString(a->Item(1).GetStringBufferValue()), itemstr);
-            str.Append(itemstr);
+            nsStyleUtil::AppendEscapedCSSString(
+              nsDependentString(a->Item(1).GetStringBufferValue()), str);
             str.Append(PRUnichar('"'));
           }
           PRInt32 type = a->Item(typeItem).GetIntValue();
           if (type != NS_STYLE_LIST_STYLE_DECIMAL) {
             str.AppendLiteral(", ");
             str.AppendInt(type);
           }
 
@@ -996,22 +994,23 @@ nsComputedDOMStyle::GetQuotes(nsIDOMCSSV
     nsROCSSPrimitiveValue* closeVal = GetROCSSPrimitiveValue();
     if (!closeVal || !valueList->AppendCSSValue(closeVal)) {
       delete valueList;
       delete closeVal;
       return NS_ERROR_OUT_OF_MEMORY;
     }
 
     nsString s;
-    nsStyleUtil::EscapeCSSString(*quotes->OpenQuoteAt(i), s);
-    s.Insert(PRUnichar('"'), 0);
+    s.Append(PRUnichar('"'));
+    nsStyleUtil::AppendEscapedCSSString(*quotes->OpenQuoteAt(i), s);
     s.Append(PRUnichar('"'));
     openVal->SetString(s);
-    nsStyleUtil::EscapeCSSString(*quotes->CloseQuoteAt(i), s);
-    s.Insert(PRUnichar('"'), 0);
+    s.Truncate();
+    s.Append(PRUnichar('"'));
+    nsStyleUtil::AppendEscapedCSSString(*quotes->CloseQuoteAt(i), s);
     s.Append(PRUnichar('"'));
     closeVal->SetString(s);
   }
 
   return CallQueryInterface(valueList, aValue);
 }
 
 nsresult
diff --git a/layout/style/nsStyleUtil.cpp b/layout/style/nsStyleUtil.cpp
--- a/layout/style/nsStyleUtil.cpp
+++ b/layout/style/nsStyleUtil.cpp
@@ -533,20 +533,19 @@ PRBool nsStyleUtil::DashMatchCompare(con
     }
     else {
       result = StringBeginsWith(aAttributeValue, aSelectorValue, aComparator);
     }
   }
   return result;
 }
 
-void nsStyleUtil::EscapeCSSString(const nsString& aString, nsAString& aReturn)
+void nsStyleUtil::AppendEscapedCSSString(const nsString& aString,
+                                         nsAString& aReturn)
 {
-  aReturn.Truncate();
-
   const nsString::char_type* in = aString.get();
   const nsString::char_type* const end = in + aString.Length();
   for (; in != end; in++)
   {
     if (*in < 0x20)
     {
      // Escape all characters below 0x20 numerically.
    
diff --git a/layout/style/nsStyleUtil.h b/layout/style/nsStyleUtil.h
--- a/layout/style/nsStyleUtil.h
+++ b/layout/style/nsStyleUtil.h
@@ -77,17 +77,19 @@ public:
                            nsLinkState *aState);
   static PRBool IsLink(nsIContent *aContent, nsILinkHandler *aLinkHandler,
                        PRBool aForStyling, nsLinkState *aState);
 
  static PRBool DashMatchCompare(const nsAString& aAttributeValue,
                                 const nsAString& aSelectorValue,
                                 const nsStringComparator& aComparator);
                                 
-  static void EscapeCSSString(const nsString& aString, nsAString& aReturn);
+  // Append an escaped version of aString to aResult.
+  static void AppendEscapedCSSString(const nsString& aString,
+                                     nsAString& aResult);
 
   /*
    * Convert an author-provided floating point number to an integer (0
    * ... 255) appropriate for use in the alpha component of a color.
    */
   static PRUint8 FloatToColorComponent(float aAlpha)
   {
     NS_ASSERTION(0.0 <= aAlpha && aAlpha <= 1.0, "out of range");
