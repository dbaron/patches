From: L. David Baron <dbaron@dbaron.org>

Don't leak all the nsFactoryEntry in the component manager.

diff --git a/xpcom/components/nsComponentManager.cpp b/xpcom/components/nsComponentManager.cpp
--- a/xpcom/components/nsComponentManager.cpp
+++ b/xpcom/components/nsComponentManager.cpp
@@ -807,21 +807,22 @@ nsresult nsComponentManagerImpl::Shutdow
   // Shutdown the component manager
   MOZ_LOG(nsComponentManagerLog, LogLevel::Debug,
          ("nsComponentManager: Beginning Shutdown."));
 
   UnregisterWeakMemoryReporter(this);
 
   // Release all cached factories
   mContractIDs.Clear();
-  mFactories.Clear(); // XXX release the objects, don't just clear
   mLoaderMap.Clear();
   mKnownModules.Clear();
   mKnownStaticModules.Clear();
 
+  mFactories.Clear();
+
   delete sStaticModules;
   delete sModuleLocations;
 
   mStatus = SHUTDOWN_COMPLETE;
 
   MOZ_LOG(nsComponentManagerLog, LogLevel::Debug,
          ("nsComponentManager: Shutdown complete."));
 
@@ -1553,23 +1554,24 @@ nsComponentManagerImpl::UnregisterFactor
   {
     SafeMutexAutoLock lock(mLock);
     auto entry = mFactories.Lookup(aClass);
     nsFactoryEntry* f = entry ? entry.Data() : nullptr;
     if (!f || f->mFactory != aFactory) {
       return NS_ERROR_FACTORY_NOT_REGISTERED;
     }
 
-    entry.Remove();
-
     // This might leave a stale contractid -> factory mapping in
     // place, so null out the factory entry (see
     // nsFactoryEntry::GetFactory)
     f->mFactory.swap(dyingFactory);
     f->mServiceObject.swap(dyingServiceObject);
+
+    entry.Remove();
+    // FIXME: Need to clean up dangling pointers!
   }
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsComponentManagerImpl::AutoRegister(nsIFile* aLocation)
 {
diff --git a/xpcom/components/nsComponentManager.h b/xpcom/components/nsComponentManager.h
--- a/xpcom/components/nsComponentManager.h
+++ b/xpcom/components/nsComponentManager.h
@@ -162,17 +162,17 @@ public:
                                            uint32_t aContractIDLen);
 
   already_AddRefed<nsIFactory> LoadFactory(nsFactoryEntry* aEntry);
 
   nsFactoryEntry* GetFactoryEntry(const char* aContractID,
                                   uint32_t aContractIDLen);
   nsFactoryEntry* GetFactoryEntry(const nsCID& aClass);
 
-  nsDataHashtable<nsIDHashKey, nsFactoryEntry*> mFactories;
+  nsClassHashtable<nsIDHashKey, nsFactoryEntry> mFactories;
   nsDataHashtable<nsCStringHashKey, nsFactoryEntry*> mContractIDs;
 
   SafeMutex mLock;
 
   static void InitializeStaticModules();
   static void InitializeModuleLocations();
 
   struct ComponentLocation
