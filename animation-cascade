From: L. David Baron <dbaron@dbaron.org>

Make author !important rules override CSS animations.  (Bug 783714)  r=bzbarsky

This was resolved at the CSS Working Group meeting on 2012-08-15.

diff --git a/layout/style/nsStyleSet.cpp b/layout/style/nsStyleSet.cpp
--- a/layout/style/nsStyleSet.cpp
+++ b/layout/style/nsStyleSet.cpp
@@ -441,19 +441,17 @@ EnumRulesMatching(nsIStyleRuleProcessor*
   return true;
 }
 
 static inline bool
 IsMoreSpecificThanAnimation(nsRuleNode *aRuleNode)
 {
   return !aRuleNode->IsRoot() &&
          (aRuleNode->GetLevel() == nsStyleSet::eTransitionSheet ||
-          (aRuleNode->IsImportantRule() &&
-           (aRuleNode->GetLevel() == nsStyleSet::eAgentSheet ||
-            aRuleNode->GetLevel() == nsStyleSet::eUserSheet)));
+          aRuleNode->IsImportantRule());
 }
 
 static nsIStyleRule*
 GetAnimationRule(nsRuleNode *aRuleNode)
 {
   nsRuleNode *n = aRuleNode;
   while (IsMoreSpecificThanAnimation(n)) {
     n = n->GetParent();
@@ -713,27 +711,27 @@ nsStyleSet::AssertNoCSSRules(nsRuleNode*
 // Enumerate the rules in a way that cares about the order of the rules.
 void
 nsStyleSet::FileRules(nsIStyleRuleProcessor::EnumFunc aCollectorFunc, 
                       void* aData, nsIContent* aContent,
                       nsRuleWalker* aRuleWalker)
 {
   // Cascading order:
   // [least important]
-  //  1. UA normal rules                    = Agent        normal
-  //  2. User normal rules                  = User         normal
-  //  3. Presentation hints                 = PresHint     normal
-  //  4. Author normal rules                = Document     normal
-  //  5. Override normal rules              = Override     normal
-  //  6. Author !important rules            = Document     !important
-  //  7. Override !important rules          = Override     !important
-  //  -. animation rules                    = Animation    normal
-  //  8. User !important rules              = User         !important
-  //  9. UA !important rules                = Agent        !important
-  //  -. transition rules                   = Transition   normal
+  //  - UA normal rules                    = Agent        normal
+  //  - User normal rules                  = User         normal
+  //  - Presentation hints                 = PresHint     normal
+  //  - Author normal rules                = Document     normal
+  //  - Override normal rules              = Override     normal
+  //  - animation rules                    = Animation    normal
+  //  - Author !important rules            = Document     !important
+  //  - Override !important rules          = Override     !important
+  //  - User !important rules              = User         !important
+  //  - UA !important rules                = Agent        !important
+  //  - transition rules                   = Transition   normal
   // [most important]
 
   // Save off the last rule before we start walking our agent sheets;
   // this will be either the root or one of the restriction rules.
   nsRuleNode* lastRestrictionRN = aRuleWalker->CurrentNode();
 
   aRuleWalker->SetLevel(eAgentSheet, false, true);
   if (mRuleProcessors[eAgentSheet])
@@ -773,16 +771,20 @@ nsStyleSet::FileRules(nsIStyleRuleProces
   bool haveImportantDocRules = !aRuleWalker->GetCheckForImportantRules();
 
   aRuleWalker->SetLevel(eOverrideSheet, false, true);
   if (mRuleProcessors[eOverrideSheet])
     (*aCollectorFunc)(mRuleProcessors[eOverrideSheet], aData);
   nsRuleNode* lastOvrRN = aRuleWalker->CurrentNode();
   bool haveImportantOverrideRules = !aRuleWalker->GetCheckForImportantRules();
 
+  // This needs to match IsMoreSpecificThanAnimation() above.
+  aRuleWalker->SetLevel(eAnimationSheet, false, false);
+  (*aCollectorFunc)(mRuleProcessors[eAnimationSheet], aData);
+
   if (haveImportantDocRules) {
     aRuleWalker->SetLevel(eDocSheet, true, false);
     AddImportantRules(lastDocRN, lastPresHintRN, aRuleWalker);  // doc
   }
 #ifdef DEBUG
   else {
     AssertNoImportantRules(lastDocRN, lastPresHintRN);
   }
@@ -793,20 +795,16 @@ nsStyleSet::FileRules(nsIStyleRuleProces
     AddImportantRules(lastOvrRN, lastDocRN, aRuleWalker);  // override
   }
 #ifdef DEBUG
   else {
     AssertNoImportantRules(lastOvrRN, lastDocRN);
   }
 #endif
 
-  // This needs to match IsMoreSpecificThanAnimation() above.
-  aRuleWalker->SetLevel(eAnimationSheet, false, false);
-  (*aCollectorFunc)(mRuleProcessors[eAnimationSheet], aData);
-
 #ifdef DEBUG
   AssertNoCSSRules(lastPresHintRN, lastUserRN);
 #endif
 
   if (haveImportantUserRules) {
     aRuleWalker->SetLevel(eUserSheet, true, false);
     AddImportantRules(lastUserRN, lastAgentRN, aRuleWalker); //user
   }
diff --git a/layout/style/test/test_animations.html b/layout/style/test/test_animations.html
--- a/layout/style/test/test_animations.html
+++ b/layout/style/test/test_animations.html
@@ -55,16 +55,20 @@ https://bugzilla.mozilla.org/show_bug.cg
   @keyframes kf_tf1 {
     0%   { padding-bottom: 20px; animation-timing-function: ease }
     25%  { padding-bottom: 60px; }
     50%  { padding-bottom: 160px; animation-timing-function: steps(5) }
     75%  { padding-bottom: 120px; animation-timing-function: linear }
     100% { padding-bottom: 20px; animation-timing-function: ease-out }
   }
 
+  @keyframes always_fifty {
+    from, to { margin-left: 50px }
+  }
+
   #withbefore::before, #withafter::after {
     content: "";
     animation: anim2 1s linear alternate infinite;
   }
 
   @keyframes multiprop {
     0% {
       padding-top: 10px; padding-left: 30px;
@@ -1311,16 +1315,25 @@ is(cs.marginTop, "20px",
    "rest of animation should still work when UA !important present at 0ms");
 advance_clock(200);
 is(cs.lineHeight, default_line_height,
    "animations should not override UA !important at 200ms");
 is(cs.marginTop, "40px",
    "rest of animation should still work when UA !important present at 200ms");
 done_div();
 
+// Test that author !important rules override animations, but
+// that animations override regular author rules.
+new_div("animation: always_fifty 1s linear infinite; margin-left: 200px");
+is(cs.marginLeft, "50px", "animations override regular author rules");
+done_div();
+new_div("animation: always_fifty 1s linear infinite; margin-left: 200px ! important;");
+is(cs.marginLeft, "200px", "important author rules override animations");
+done_div();
+
 // Test interaction of animations and restyling (Bug 686656).
 // This test depends on kf3 getting its 0% and 100% values from the
 // rules below it in the cascade; we're checking that the animation
 // isn't rebuilt when the restyles happen.
 new_div("animation: kf3 1s linear forwards");
 is(cs.marginTop, "0px", "bug 686656 test 1 at 0ms");
 advance_clock(250);
 display.style.color = "blue";
