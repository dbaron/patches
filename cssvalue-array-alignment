Ensure correct alignment for nsCSSValue objects inside nsCSSValue::Array.  (Bug 476345)

diff --git a/layout/style/nsCSSValue.h b/layout/style/nsCSSValue.h
--- a/layout/style/nsCSSValue.h
+++ b/layout/style/nsCSSValue.h
@@ -331,22 +331,22 @@ public:
 
     // return |Array| with reference count of zero
     static Array* Create(PRUint16 aItemCount) {
       return new (aItemCount) Array(aItemCount);
     }
 
     nsCSSValue& operator[](PRUint16 aIndex) {
       NS_ASSERTION(aIndex < mCount, "out of range");
-      return *(First() + aIndex);
+      return mArray[aIndex];
     }
 
     const nsCSSValue& operator[](PRUint16 aIndex) const {
       NS_ASSERTION(aIndex < mCount, "out of range");
-      return *(First() + aIndex);
+      return mArray[aIndex];
     }
 
     nsCSSValue& Item(PRUint16 aIndex) { return (*this)[aIndex]; }
     const nsCSSValue& Item(PRUint16 aIndex) const { return (*this)[aIndex]; }
 
     PRUint16 Count() const { return mCount; }
 
     PRBool operator==(const Array& aOther) const
@@ -376,50 +376,50 @@ public:
       NS_LOG_RELEASE(this, mRefCnt, "nsCSSValue::Array");
       if (mRefCnt == 0)
         delete this;
     }
 
   private:
 
     PRUint16 mRefCnt;
-    PRUint16 mCount;
+    const PRUint16 mCount;
+    // This must be the last sub-object, since we extend this array to
+    // be of size mCount; it needs to be a sub-object so it gets proper
+    // alignment.
+    nsCSSValue mArray[1];
 
     void* operator new(size_t aSelfSize, PRUint16 aItemCount) CPP_THROW_NEW {
-      return ::operator new(aSelfSize + sizeof(nsCSSValue)*aItemCount);
+      return ::operator new(aSelfSize + sizeof(nsCSSValue) * (aItemCount - 1));
     }
 
     void operator delete(void* aPtr) { ::operator delete(aPtr); }
 
-    nsCSSValue* First() {
-      return (nsCSSValue*) (((char*)this) + sizeof(*this));
-    }
+    nsCSSValue* First() { return mArray; }
 
-    const nsCSSValue* First() const {
-      return (const nsCSSValue*) (((const char*)this) + sizeof(*this));
-    }
+    const nsCSSValue* First() const { return mArray; }
 
-#define CSSVALUE_LIST_FOR_VALUES(var)                                         \
-  for (nsCSSValue *var = First(), *var##_end = var + mCount;                  \
+#define CSSVALUE_LIST_FOR_EXTRA_VALUES(var)                                   \
+  for (nsCSSValue *var = First() + 1, *var##_end = First() + mCount;          \
        var != var##_end; ++var)
 
     Array(PRUint16 aItemCount)
       : mRefCnt(0)
       , mCount(aItemCount)
     {
       MOZ_COUNT_CTOR(nsCSSValue::Array);
-      CSSVALUE_LIST_FOR_VALUES(val) {
+      CSSVALUE_LIST_FOR_EXTRA_VALUES(val) {
         new (val) nsCSSValue();
       }
     }
 
     ~Array()
     {
       MOZ_COUNT_DTOR(nsCSSValue::Array);
-      CSSVALUE_LIST_FOR_VALUES(val) {
+      CSSVALUE_LIST_FOR_EXTRA_VALUES(val) {
         val->~nsCSSValue();
       }
     }
 
 #undef CSSVALUE_LIST_FOR_VALUES
 
   private:
     Array(const Array& aOther); // not to be implemented
