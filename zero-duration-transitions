From: L. David Baron <dbaron@dbaron.org>

Fix backwards handling of zero-duration transitions.  (Bug 622461)

diff --git a/layout/style/nsTransitionManager.cpp b/layout/style/nsTransitionManager.cpp
--- a/layout/style/nsTransitionManager.cpp
+++ b/layout/style/nsTransitionManager.cpp
@@ -117,19 +117,19 @@ ElementPropertyTransition::ValuePortionF
   // 0-1).
   double duration = mDuration.ToSeconds();
   NS_ABORT_IF_FALSE(duration >= 0.0, "negative duration forbidden");
   double timePortion;
   if (duration == 0.0) {
     // When duration is zero, we can still have a transition when delay
     // is nonzero.  mStartTime already incorporates delay.
     if (aRefreshTime >= mStartTime) {
+      timePortion = 1.0;
+    } else {
       timePortion = 0.0;
-    } else {
-      timePortion = 1.0;
     }
   } else {
     timePortion = (aRefreshTime - mStartTime).ToSeconds() / duration;
     if (timePortion < 0.0)
       timePortion = 0.0; // use start value during transition-delay
     if (timePortion > 1.0)
       timePortion = 1.0; // we might be behind on flushing
   }
diff --git a/layout/style/test/test_transitions.html b/layout/style/test/test_transitions.html
--- a/layout/style/test/test_transitions.html
+++ b/layout/style/test/test_transitions.html
@@ -223,16 +223,32 @@ for (var d = -4; d <= 4; ++d) {
     p.style.marginLeft = "0px";
     p.style.MozTransition = "4s margin-left ease-out " + delay;
     div.appendChild(p);
     is(getComputedStyle(p, "").marginLeft, "0px",
        "should be zero before changing value");
     delay_tests[d] = p;
 }
 
+// Test transition-delay values of -4s through 4s on a 4s transition
+// with duration of zero.
+var delay_zero_tests = {};
+for (var d = -4; d <= 4; ++d) {
+    var p = document.createElement("p");
+    var delay = d + "s";
+    var t = document.createTextNode("transition-delay: " + delay);
+    p.appendChild(t);
+    p.style.marginLeft = "0px";
+    p.style.MozTransition = "0s margin-left linear " + delay;
+    div.appendChild(p);
+    is(getComputedStyle(p, "").marginLeft, "0px",
+       "should be zero before changing value");
+    delay_zero_tests[d] = p;
+}
+
 // Test that changing the value on an already-running transition to the
 // value it currently happens to have resets the transition.
 function make_reset_test(transition, description)
 {
     var p = document.createElement("p");
     var t = document.createTextNode(description);
     p.appendChild(t);
     p.style.marginLeft = "0px";
@@ -401,16 +417,20 @@ for (var test in tftests) {
 for (var test in interrupt_tests) {
     var p = interrupt_tests[test][0];
     p.style.textIndent = "100px";
 }
 for (var d in delay_tests) {
     var p = delay_tests[d];
     p.style.marginLeft = "100px";
 }
+for (var d in delay_zero_tests) {
+    var p = delay_zero_tests[d];
+    p.style.marginLeft = "100px";
+}
 reset_test.style.marginLeft = "100px";
 reset_test_reference.style.marginLeft = "100px";
 for (var i in descendant_tests) {
     var test = descendant_tests[i];
     test.parentNode.style.textIndent = "150px";
     test.parentNode.style.letterSpacing = "5px";
 }
 for (var i in number_tests) {
@@ -580,16 +600,40 @@ function check_delay_test(time)
     }
 }
 
 check_delay_test(0);
 for (var i = 1; i <= 8; ++i) {
     add_future_call(i, check_delay_test);
 }
 
+function check_delay_zero_test(time)
+{
+    var tf = timingFunctions["linear"];
+    for (var d in delay_zero_tests) {
+        var p = delay_zero_tests[d];
+
+        time_range = [ px_to_num(earlyrefcs.textIndent) / 125,
+                       px_to_num(laterefcs.textIndent) / 125 ];
+        var m = getComputedStyle(p, "").marginLeft;
+        var desc = "delay_zero test for delay " + d + "s";
+        if (time_range[0] < d && time_range[1] < d) {
+            is(m, "0px", desc);
+        } else if ((time_range[0] > d && time_range[1] > d) ||
+                   (d == 0 && time == 0)) {
+            is(m, "100px", desc);
+        }
+    }
+}
+
+check_delay_zero_test(0);
+for (var i = 1; i <= 8; ++i) {
+    add_future_call(i, check_delay_zero_test);
+}
+
 function reset_reset_test(time)
 {
     reset_test.style.marginLeft = "0px";
 }
 function check_reset_test(time)
 {
     is(getComputedStyle(reset_test, "").marginLeft, "0px",
        "reset test value at time " + time + "s.");
