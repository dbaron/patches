From: L. David Baron <dbaron@dbaron.org>

Bug 1153426 - Don't crash when doing an off-main-thread animation of a transform to or from the 'none' value.

diff --git a/layout/style/nsStyleTransformMatrix.cpp b/layout/style/nsStyleTransformMatrix.cpp
--- a/layout/style/nsStyleTransformMatrix.cpp
+++ b/layout/style/nsStyleTransformMatrix.cpp
@@ -602,18 +602,23 @@ ReadTransforms(const nsCSSValueList* aLi
                bool &aCanStoreInRuleTree,
                nsRect& aBounds,
                float aAppUnitsPerMatrixUnit)
 {
   gfx3DMatrix result;
 
   for (const nsCSSValueList* curr = aList; curr != nullptr; curr = curr->mNext) {
     const nsCSSValue &currElem = curr->mValue;
-    NS_ASSERTION(currElem.GetUnit() == eCSSUnit_Function,
-                 "Stream should consist solely of functions!");
+    if (currElem.GetUnit() != eCSSUnit_Function) {
+      NS_ASSERTION(currElem.GetUnit() == eCSSUnit_None &&
+                   !aList->mNext,
+                   "stream should either be a list of functions or a "
+                   "lone None");
+      continue;
+    }
     NS_ASSERTION(currElem.GetArrayValue()->Count() >= 1,
                  "Incoming function is too short!");
 
     /* Read in a single transform matrix. */
     MatrixForTransformFunction(result, currElem.GetArrayValue(), aContext,
                                aPresContext, aCanStoreInRuleTree, aBounds);
   }
 
diff --git a/layout/style/test/test_transitions_per_property.html b/layout/style/test/test_transitions_per_property.html
--- a/layout/style/test/test_transitions_per_property.html
+++ b/layout/style/test/test_transitions_per_property.html
@@ -2053,16 +2053,17 @@ function runAsyncTests() {
   // For the transform tests we simply compare the value on the compositor
   // with the computed value, but for the opacity test we check the absolute
   // value as well.
   OMTAdiv.style.setProperty("transition-duration", "300s", "");
   OMTAdiv.style.setProperty("transition-timing-function", "linear", "");
   addAsyncTransformTests();
   addAsyncOpacityTest();
   addAsyncDelayTest();
+  addTransformNoneTest();
 
   runAllAsyncAnimTests().then(function() {
     OMTAdiv.style.removeProperty("transition");
     SimpleTest.finish();
   });
 }
 
 function addAsyncTransformTests() {
@@ -2134,16 +2135,36 @@ function addAsyncDelayTest() {
 
     omta_is_approx(OMTAdiv, "transform", { tx: 50 }, 0.0001,
                    RunningOn.Compositor,
                    "compositor transform transition with delay at 1/2"
                    + " duration");
   });
 }
 
+function addTransformNoneTest() {
+  addAsyncAnimTest(function *() {
+    OMTAdiv.style.setProperty("transition-property", "none", "");
+    OMTAdiv.style.setProperty("transition-delay", "100s", "");
+    OMTAdiv.style.setProperty("transition-duration", "200s", "");
+    OMTAdiv.style.setProperty("transform", "none", "");
+    OMTACs.getPropertyValue("transform");
+    OMTAdiv.style.setProperty("transition-property", "transform", "");
+    OMTAdiv.style.setProperty("transform", "translate(100px)", "");
+    OMTACs.getPropertyValue("transform");
+
+    winUtils.advanceTimeAndRefresh(50000);
+    yield waitForPaints();
+
+    omta_is(OMTAdiv, "transform", { tx: 0 },
+            RunningOn.Compositor,
+            "compositor transform transition producing 'none' during delay");
+  });
+}
+
 function isTransformInvertible(transformStr) {
   var computedStr = transformStrToComputedStr(transformStr);
   if (!transformStr)
     return false;
   var matrix = convertTo3dMatrix(computedStr);
   if (matrix === null)
     return false;
   return isInvertible(matrix);
