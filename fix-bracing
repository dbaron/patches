From: L. David Baron <dbaron@dbaron.org>
Bug 1100773 patch 1 - Fix bracing of indent loops in style rule print functions.  r=heycam

diff --git a/dom/base/nsMappedAttributes.cpp b/dom/base/nsMappedAttributes.cpp
--- a/dom/base/nsMappedAttributes.cpp
+++ b/dom/base/nsMappedAttributes.cpp
@@ -187,18 +187,19 @@ nsMappedAttributes::MapRuleInfoInto(nsRu
 /* virtual */ void
 nsMappedAttributes::List(FILE* out, int32_t aIndent) const
 {
   nsAutoString buffer;
   uint32_t i;
 
   for (i = 0; i < mAttrCount; ++i) {
     int32_t indent;
-    for (indent = aIndent; indent > 0; --indent)
+    for (indent = aIndent; indent > 0; --indent) {
       fputs("  ", out);
+    }
 
     Attrs()[i].mName.GetQualifiedName(buffer);
     fputs(NS_LossyConvertUTF16toASCII(buffer).get(), out);
 
     Attrs()[i].mValue.ToString(buffer);
     fputs(NS_LossyConvertUTF16toASCII(buffer).get(), out);
     fputs("\n", out);
   }
diff --git a/dom/html/HTMLBodyElement.cpp b/dom/html/HTMLBodyElement.cpp
--- a/dom/html/HTMLBodyElement.cpp
+++ b/dom/html/HTMLBodyElement.cpp
@@ -166,17 +166,19 @@ BodyRule::MapRuleInfoInto(nsRuleData* aD
     }
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 BodyRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fputs("  ", out);
+  }
   fputs("[body rule] {}\n", out);
 }
 #endif
 
 //----------------------------------------------------------------------
 
 HTMLBodyElement::~HTMLBodyElement()
 {
diff --git a/layout/style/AnimationCommon.cpp b/layout/style/AnimationCommon.cpp
--- a/layout/style/AnimationCommon.cpp
+++ b/layout/style/AnimationCommon.cpp
@@ -295,17 +295,19 @@ AnimValuesStyleRule::MapRuleInfoInto(nsR
     }
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 AnimValuesStyleRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fputs("  ", out);
+  }
   fputs("[anim values] { ", out);
   for (uint32_t i = 0, i_end = mPropertyValuePairs.Length(); i < i_end; ++i) {
     const PropertyValuePair &pair = mPropertyValuePairs[i];
     nsAutoString value;
     StyleAnimationValue::UncomputeValue(pair.mProperty, pair.mValue, value);
     fprintf(out, "%s: %s; ", nsCSSProps::GetStringValue(pair.mProperty).get(),
                              NS_ConvertUTF16toUTF8(value).get());
   }
diff --git a/layout/style/CSSStyleSheet.cpp b/layout/style/CSSStyleSheet.cpp
--- a/layout/style/CSSStyleSheet.cpp
+++ b/layout/style/CSSStyleSheet.cpp
@@ -1547,17 +1547,19 @@ struct ListEnumData {
 
 /* virtual */ void
 CSSStyleSheet::List(FILE* out, int32_t aIndent) const
 {
 
   int32_t index;
 
   // Indent
-  for (index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (index = aIndent; --index >= 0; ) {
+    fputs("  ", out);
+  }
 
   fputs("CSS Style Sheet: ", out);
   nsAutoCString urlSpec;
   nsresult rv = mInner->mSheetURI->GetSpec(urlSpec);
   if (NS_SUCCEEDED(rv) && !urlSpec.IsEmpty()) {
     fputs(urlSpec.get(), out);
   }
 
diff --git a/layout/style/Declaration.cpp b/layout/style/Declaration.cpp
--- a/layout/style/Declaration.cpp
+++ b/layout/style/Declaration.cpp
@@ -1399,17 +1399,19 @@ Declaration::ToString(nsAString& aString
     aString.Truncate(aString.Length() - 1);
   }
 }
 
 #ifdef DEBUG
 void
 Declaration::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fputs("  ", out);
+  }
 
   fputs("{ ", out);
   nsAutoString s;
   ToString(s);
   fputs(NS_ConvertUTF16toUTF8(s).get(), out);
   fputs("}", out);
 }
 #endif
diff --git a/layout/style/StyleRule.cpp b/layout/style/StyleRule.cpp
--- a/layout/style/StyleRule.cpp
+++ b/layout/style/StyleRule.cpp
@@ -973,17 +973,19 @@ ImportantRule::MapRuleInfoInto(nsRuleDat
   mDeclaration->MapImportantRuleInfoInto(aRuleData);
 }
 
 #ifdef DEBUG
 /* virtual */ void
 ImportantRule::List(FILE* out, int32_t aIndent) const
 {
   // Indent
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fputs("  ", out);
+  }
 
   fprintf(out, "! Important declaration=%p\n",
           static_cast<void*>(mDeclaration));
 }
 #endif
 
 } // namespace css
 } // namespace mozilla
@@ -1467,17 +1469,19 @@ StyleRule::MapRuleInfoInto(nsRuleData* a
   mDeclaration->MapNormalRuleInfoInto(aRuleData);
 }
 
 #ifdef DEBUG
 /* virtual */ void
 StyleRule::List(FILE* out, int32_t aIndent) const
 {
   // Indent
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fputs("  ", out);
+  }
 
   nsAutoString buffer;
   if (mSelector)
     mSelector->ToString(buffer, GetStyleSheet());
 
   buffer.Append(' ');
   fputs(NS_LossyConvertUTF16toASCII(buffer).get(), out);
   if (nullptr != mDeclaration) {
diff --git a/layout/style/nsCSSRules.cpp b/layout/style/nsCSSRules.cpp
--- a/layout/style/nsCSSRules.cpp
+++ b/layout/style/nsCSSRules.cpp
@@ -235,17 +235,19 @@ NS_INTERFACE_MAP_END
 
 IMPL_STYLE_RULE_INHERIT(CharsetRule, Rule)
 
 #ifdef DEBUG
 /* virtual */ void
 CharsetRule::List(FILE* out, int32_t aIndent) const
 {
   // Indent
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
+  for (int32_t indent = aIndent; --indent >= 0; ) {
+    fputs("  ", out);
+  }
 
   fputs("@charset \"", out);
   fputs(NS_LossyConvertUTF16toASCII(mEncoding).get(), out);
   fputs("\"\n", out);
 }
 #endif
 
 /* virtual */ int32_t
@@ -378,17 +380,19 @@ NS_INTERFACE_MAP_END
 
 IMPL_STYLE_RULE_INHERIT(ImportRule, Rule)
 
 #ifdef DEBUG
 /* virtual */ void
 ImportRule::List(FILE* out, int32_t aIndent) const
 {
   // Indent
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
+  for (int32_t indent = aIndent; --indent >= 0; ) {
+    fputs("  ", out);
+  }
 
   fputs("@import \"", out);
   fputs(NS_LossyConvertUTF16toASCII(mURLSpec).get(), out);
   fputs("\" ", out);
 
   nsAutoString mediaText;
   mMedia->GetText(mediaText);
   fputs(NS_LossyConvertUTF16toASCII(mediaText).get(), out);
@@ -603,17 +607,19 @@ GroupRule::SetStyleSheet(CSSStyleSheet* 
 GroupRule::List(FILE* out, int32_t aIndent) const
 {
   fputs(" {\n", out);
 
   for (int32_t index = 0, count = mRules.Count(); index < count; ++index) {
     mRules.ObjectAt(index)->List(out, aIndent + 1);
   }
 
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
+  for (int32_t indent = aIndent; --indent >= 0; ) {
+    fputs("  ", out);
+  }
   fputs("}\n", out);
 }
 #endif
 
 void
 GroupRule::AppendStyleRule(Rule* aRule)
 {
   mRules.AppendObject(aRule);
@@ -804,17 +810,19 @@ MediaRule::SetStyleSheet(CSSStyleSheet* 
 
   GroupRule::SetStyleSheet(aSheet);
 }
 
 #ifdef DEBUG
 /* virtual */ void
 MediaRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
+  for (int32_t indent = aIndent; --indent >= 0; ) {
+    fputs("  ", out);
+  }
 
   nsAutoString  buffer;
 
   fputs("@media ", out);
 
   if (mMedia) {
     nsAutoString mediaText;
     mMedia->GetText(mediaText);
@@ -1003,17 +1011,19 @@ NS_INTERFACE_MAP_BEGIN(DocumentRule)
   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIStyleRule)
   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(CSSMozDocumentRule)
 NS_INTERFACE_MAP_END_INHERITING(GroupRule)
 
 #ifdef DEBUG
 /* virtual */ void
 DocumentRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
+  for (int32_t indent = aIndent; --indent >= 0; ) {
+    fputs("  ", out);
+  }
 
   nsAutoCString str;
   str.AssignLiteral("@-moz-document ");
   for (URL *url = mURLs; url; url = url->next) {
     switch (url->func) {
       case eURL:
         str.AppendLiteral("url(\"");
         break;
@@ -1260,17 +1270,19 @@ NS_INTERFACE_MAP_BEGIN(NameSpaceRule)
 NS_INTERFACE_MAP_END
 
 IMPL_STYLE_RULE_INHERIT(NameSpaceRule, Rule)
 
 #ifdef DEBUG
 /* virtual */ void
 NameSpaceRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
+  for (int32_t indent = aIndent; --indent >= 0; ) {
+    fputs("  ", out);
+  }
 
   nsAutoString  buffer;
 
   fputs("@namespace ", out);
 
   if (mPrefix) {
     mPrefix->ToString(buffer);
     fputs(NS_LossyConvertUTF16toASCII(buffer).get(), out);
@@ -1914,17 +1926,19 @@ nsCSSFontFeatureValuesRule::List(FILE* o
   for (i = 1; i < (aIndent + 1) * 2 - 1; i++) {
     indent[i] = 0x20;
   }
   indent[0] = 0xa;
   indent[aIndent * 2 + 1] = 0;
   utf8.ReplaceSubstring("\n", indent);
   delete [] indent;
 
-  for (i = aIndent; --i >= 0; ) fputs("  ", out);
+  for (i = aIndent; --i >= 0; ) {
+    fputs("  ", out);
+  }
   fprintf(out, "%s\n", utf8.get());
 }
 #endif
 
 /* virtual */ int32_t
 nsCSSFontFeatureValuesRule::GetType() const
 {
   return Rule::FONT_FEATURE_VALUES_RULE;
@@ -2190,17 +2204,19 @@ nsCSSKeyframeRule::MapRuleInfoInto(nsRul
 
   mDeclaration->MapNormalRuleInfoInto(aRuleData);
 }
 
 #ifdef DEBUG
 void
 nsCSSKeyframeRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fputs("  ", out);
+  }
 
   nsAutoString tmp;
   DoGetKeyText(tmp);
   fputs(NS_ConvertUTF16toUTF8(tmp).get(), out);
   fputs(" ", out);
   mDeclaration->List(out, aIndent);
   fputs("\n", out);
 }
@@ -2391,17 +2407,19 @@ NS_INTERFACE_MAP_BEGIN(nsCSSKeyframesRul
   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIStyleRule)
   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(MozCSSKeyframesRule)
 NS_INTERFACE_MAP_END_INHERITING(GroupRule)
 
 #ifdef DEBUG
 void
 nsCSSKeyframesRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
+  for (int32_t indent = aIndent; --indent >= 0; ) {
+    fputs("  ", out);
+  }
 
   fprintf(out, "@keyframes %s", NS_ConvertUTF16toUTF8(mName).get());
   GroupRule::List(out, aIndent);
 }
 #endif
 
 /* virtual */ int32_t
 nsCSSKeyframesRule::GetType() const
@@ -2724,17 +2742,19 @@ NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(
 NS_INTERFACE_MAP_END
 
 IMPL_STYLE_RULE_INHERIT_GET_DOM_RULE_WEAK(nsCSSPageRule, Rule)
 
 #ifdef DEBUG
 void
 nsCSSPageRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
+  for (int32_t indent = aIndent; --indent >= 0; ) {
+    fputs("  ", out);
+  }
 
   fputs("@page ", out);
   mDeclaration->List(out, aIndent);
   fputs("\n", out);
 }
 #endif
 
 /* virtual */ int32_t
@@ -2857,17 +2877,19 @@ CSSSupportsRule::CSSSupportsRule(const C
     mCondition(aCopy.mCondition)
 {
 }
 
 #ifdef DEBUG
 /* virtual */ void
 CSSSupportsRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t indent = aIndent; --indent >= 0; ) fputs("  ", out);
+  for (int32_t indent = aIndent; --indent >= 0; ) {
+    fputs("  ", out);
+  }
 
   fputs("@supports ", out);
   fputs(NS_ConvertUTF16toUTF8(mCondition).get(), out);
   css::GroupRule::List(out, aIndent);
 }
 #endif
 
 /* virtual */ int32_t
diff --git a/layout/style/nsHTMLStyleSheet.cpp b/layout/style/nsHTMLStyleSheet.cpp
--- a/layout/style/nsHTMLStyleSheet.cpp
+++ b/layout/style/nsHTMLStyleSheet.cpp
@@ -50,29 +50,33 @@ nsHTMLStyleSheet::HTMLColorRule::MapRule
       color->SetColorValue(mColor);
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 nsHTMLStyleSheet::HTMLColorRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fputs("  ", out);
+  }
   fputs("[html color rule] {}\n", out);
 }
 #endif
 
  
 NS_IMPL_ISUPPORTS(nsHTMLStyleSheet::GenericTableRule, nsIStyleRule)
 
 #ifdef DEBUG
 /* virtual */ void
 nsHTMLStyleSheet::GenericTableRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fputs("  ", out);
+  }
   fputs("[generic table rule] {}\n", out);
 }
 #endif
 
 /* virtual */ void
 nsHTMLStyleSheet::TableTHRule::MapRuleInfoInto(nsRuleData* aRuleData)
 {
   if (aRuleData->mSIDs & NS_STYLE_INHERIT_BIT(Text)) {
@@ -110,17 +114,19 @@ nsHTMLStyleSheet::LangRule::MapRuleInfoI
     }
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 nsHTMLStyleSheet::LangRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fputs("  ", out);
+  }
   fputs("[lang rule] { language: \"", out);
   fputs(NS_ConvertUTF16toUTF8(mLang).get(), out);
   fputs("\" }\n", out);
 }
 #endif
 
 // -----------------------------------------------------------
 
diff --git a/layout/style/nsStyleContext.cpp b/layout/style/nsStyleContext.cpp
--- a/layout/style/nsStyleContext.cpp
+++ b/layout/style/nsStyleContext.cpp
@@ -844,17 +844,19 @@ nsStyleContext::Mark()
   }
 }
 
 #ifdef DEBUG
 void nsStyleContext::List(FILE* out, int32_t aIndent)
 {
   // Indent
   int32_t ix;
-  for (ix = aIndent; --ix >= 0; ) fputs("  ", out);
+  for (ix = aIndent; --ix >= 0; ) {
+    fputs("  ", out);
+  }
   fprintf(out, "%p(%d) parent=%p ",
           (void*)this, mRefCnt, (void *)mParent);
   if (mPseudoTag) {
     nsAutoString  buffer;
     mPseudoTag->ToString(buffer);
     fputs(NS_LossyConvertUTF16toASCII(buffer).get(), out);
     fputs(" ", out);
   }
@@ -864,17 +866,19 @@ void nsStyleContext::List(FILE* out, int
     nsRuleNode* ruleNode = mRuleNode;
     while (ruleNode) {
       nsIStyleRule *styleRule = ruleNode->GetRule();
       if (styleRule) {
         styleRule->List(out, aIndent + 1);
       }
       ruleNode = ruleNode->GetParent();
     }
-    for (ix = aIndent; --ix >= 0; ) fputs("  ", out);
+    for (ix = aIndent; --ix >= 0; ) {
+      fputs("  ", out);
+    }
     fputs("}\n", out);
   }
   else {
     fputs("{}\n", out);
   }
 
   if (nullptr != mChild) {
     nsStyleContext* child = mChild;
diff --git a/layout/style/nsStyleSet.cpp b/layout/style/nsStyleSet.cpp
--- a/layout/style/nsStyleSet.cpp
+++ b/layout/style/nsStyleSet.cpp
@@ -48,17 +48,19 @@ NS_IMPL_ISUPPORTS(nsEmptyStyleRule, nsIS
 nsEmptyStyleRule::MapRuleInfoInto(nsRuleData* aRuleData)
 {
 }
 
 #ifdef DEBUG
 /* virtual */ void
 nsEmptyStyleRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fputs("  ", out);
+  }
   fputs("[empty style rule] {}\n", out);
 }
 #endif
 
 NS_IMPL_ISUPPORTS(nsInitialStyleRule, nsIStyleRule)
 
 /* virtual */ void
 nsInitialStyleRule::MapRuleInfoInto(nsRuleData* aRuleData)
@@ -98,17 +100,19 @@ nsInitialStyleRule::MapRuleInfoInto(nsRu
     }
   }
 }
 
 #ifdef DEBUG
 /* virtual */ void
 nsInitialStyleRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fputs("  ", out);
+  }
   fputs("[initial style rule] {}\n", out);
 }
 #endif
 
 NS_IMPL_ISUPPORTS(nsDisableTextZoomStyleRule, nsIStyleRule)
 
 /* virtual */ void
 nsDisableTextZoomStyleRule::MapRuleInfoInto(nsRuleData* aRuleData)
@@ -120,17 +124,19 @@ nsDisableTextZoomStyleRule::MapRuleInfoI
   if (value->GetUnit() == eCSSUnit_Null)
     value->SetNoneValue();
 }
 
 #ifdef DEBUG
 /* virtual */ void
 nsDisableTextZoomStyleRule::List(FILE* out, int32_t aIndent) const
 {
-  for (int32_t index = aIndent; --index >= 0; ) fputs("  ", out);
+  for (int32_t index = aIndent; --index >= 0; ) {
+    fputs("  ", out);
+  }
   fputs("[disable text zoom style rule] {}\n", out);
 }
 #endif
 
 static const nsStyleSet::sheetType gCSSSheetTypes[] = {
   // From lowest to highest in cascading order.
   nsStyleSet::eAgentSheet,
   nsStyleSet::eUserSheet,
