From: L. David Baron <dbaron@dbaron.org>

Bug 1226489 - Pass only a single rule to StyleRuleChanged.  r=bzbarsky

diff --git a/dom/base/nsDocument.cpp b/dom/base/nsDocument.cpp
--- a/dom/base/nsDocument.cpp
+++ b/dom/base/nsDocument.cpp
@@ -5107,29 +5107,27 @@ nsDocument::DocumentStatesChanged(EventS
   mGotDocumentState &= ~aStateMask;
   mDocumentState &= ~aStateMask;
 
   NS_DOCUMENT_NOTIFY_OBSERVERS(DocumentStatesChanged, (this, aStateMask));
 }
 
 void
 nsDocument::StyleRuleChanged(CSSStyleSheet* aSheet,
-                             css::Rule* aOldStyleRule,
-                             css::Rule* aNewStyleRule)
+                             css::Rule* aStyleRule)
 {
   NS_DOCUMENT_NOTIFY_OBSERVERS(StyleRuleChanged,
                                (this, aSheet,
-                                aOldStyleRule, aNewStyleRule));
+                                aStyleRule));
 
   if (StyleSheetChangeEventsEnabled()) {
     DO_STYLESHEET_NOTIFICATION(StyleRuleChangeEvent,
                                "StyleRuleChanged",
                                mRule,
-                               aNewStyleRule ? aNewStyleRule->GetDOMRule()
-                                             : nullptr);
+                               aStyleRule ? aStyleRule->GetDOMRule() : nullptr);
   }
 }
 
 void
 nsDocument::StyleRuleAdded(CSSStyleSheet* aSheet,
                            css::Rule* aStyleRule)
 {
   NS_DOCUMENT_NOTIFY_OBSERVERS(StyleRuleAdded,
diff --git a/dom/base/nsDocument.h b/dom/base/nsDocument.h
--- a/dom/base/nsDocument.h
+++ b/dom/base/nsDocument.h
@@ -879,18 +879,17 @@ public:
 
   virtual void ContentStateChanged(nsIContent* aContent,
                                    mozilla::EventStates aStateMask)
                                      override;
   virtual void DocumentStatesChanged(
                  mozilla::EventStates aStateMask) override;
 
   virtual void StyleRuleChanged(mozilla::CSSStyleSheet* aStyleSheet,
-                                mozilla::css::Rule* aOldStyleRule,
-                                mozilla::css::Rule* aNewStyleRule) override;
+                                mozilla::css::Rule* aStyleRule) override;
   virtual void StyleRuleAdded(mozilla::CSSStyleSheet* aStyleSheet,
                               mozilla::css::Rule* aStyleRule) override;
   virtual void StyleRuleRemoved(mozilla::CSSStyleSheet* aStyleSheet,
                                 mozilla::css::Rule* aStyleRule) override;
 
   virtual void FlushPendingNotifications(mozFlushType aType) override;
   virtual void FlushExternalResources(mozFlushType aType) override;
   virtual void SetXMLDeclaration(const char16_t *aVersion,
diff --git a/dom/base/nsIDocument.h b/dom/base/nsIDocument.h
--- a/dom/base/nsIDocument.h
+++ b/dom/base/nsIDocument.h
@@ -150,18 +150,18 @@ template<typename> class Sequence;
 
 template<typename, typename> class CallbackObjectHolder;
 typedef CallbackObjectHolder<NodeFilter, nsIDOMNodeFilter> NodeFilterHolder;
 
 } // namespace dom
 } // namespace mozilla
 
 #define NS_IDOCUMENT_IID \
-{ 0xecc9e376, 0x6c31, 0x4f04, \
-  { 0xbe, 0xde, 0xd6, 0x27, 0x61, 0xd7, 0x00, 0x84 } }
+{ 0x13011a82, 0x46cd, 0x4c33, \
+  { 0x9d, 0x4e, 0x31, 0x41, 0xbb, 0x3f, 0x18, 0xe9 } }
 
 // Enum for requesting a particular type of document when creating a doc
 enum DocumentFlavor {
   DocumentFlavorLegacyGuess, // compat with old code until made HTML5-compliant
   DocumentFlavorHTML, // HTMLDocument with HTMLness bit set to true
   DocumentFlavorSVG, // SVGDocument
   DocumentFlavorPlain, // Just a Document
 };
@@ -1285,18 +1285,17 @@ public:
   // Notify that a document state has changed.
   // This should only be called by callers whose state is also reflected in the
   // implementation of nsDocument::GetDocumentState.
   virtual void DocumentStatesChanged(mozilla::EventStates aStateMask) = 0;
 
   // Observation hooks for style data to propagate notifications
   // to document observers
   virtual void StyleRuleChanged(mozilla::CSSStyleSheet* aStyleSheet,
-                                mozilla::css::Rule* aOldStyleRule,
-                                mozilla::css::Rule* aNewStyleRule) = 0;
+                                mozilla::css::Rule* aStyleRule) = 0;
   virtual void StyleRuleAdded(mozilla::CSSStyleSheet* aStyleSheet,
                               mozilla::css::Rule* aStyleRule) = 0;
   virtual void StyleRuleRemoved(mozilla::CSSStyleSheet* aStyleSheet,
                                 mozilla::css::Rule* aStyleRule) = 0;
 
   /**
    * Flush notifications for this document and its parent documents
    * (since those may affect the layout of this one).
diff --git a/dom/base/nsIDocumentObserver.h b/dom/base/nsIDocumentObserver.h
--- a/dom/base/nsIDocumentObserver.h
+++ b/dom/base/nsIDocumentObserver.h
@@ -16,18 +16,18 @@ class nsIDocument;
 namespace mozilla {
 class CSSStyleSheet;
 namespace css {
 class Rule;
 } // namespace css
 } // namespace mozilla
 
 #define NS_IDOCUMENT_OBSERVER_IID \
-{ 0x21c8ad67, 0x3a7d, 0x4881, \
-  { 0xa5, 0x43, 0xcb, 0xa9, 0xbb, 0xe4, 0x9e, 0x39 } }
+{ 0x71041fa3, 0x6dd7, 0x4cde, \
+  { 0xbb, 0x76, 0xae, 0xcc, 0x69, 0xe1, 0x75, 0x78 } }
 
 typedef uint32_t nsUpdateType;
 
 #define UPDATE_CONTENT_MODEL 0x00000001
 #define UPDATE_STYLE         0x00000002
 #define UPDATE_ALL (UPDATE_CONTENT_MODEL | UPDATE_STYLE)
 
 // Document observer interface
@@ -138,36 +138,23 @@ public:
 
   /**
    * A StyleRule has just been modified within a style sheet.
    * This method is called automatically when the rule gets
    * modified. The style sheet passes this notification to 
    * the document. The notification is passed on to all of 
    * the document observers.
    *
-   * Since nsIStyleRule objects are immutable, there is a new object
-   * replacing the old one.  However, the use of this method (rather
-   * than StyleRuleAdded and StyleRuleRemoved) implies that the new rule
-   * matches the same elements and has the same priority (weight,
-   * origin, specificity) as the old one.  (However, if it is a CSS
-   * style rule, there may be a change in whether it has an important
-   * rule.)
-   *
    * @param aDocument The document being observed
    * @param aStyleSheet the StyleSheet that contians the rule
-   * @param aOldStyleRule The rule being removed.  This rule may not be
-   *                      fully valid anymore -- however, it can still
-   *                      be used for pointer comparison and
-   *                      |QueryInterface|.
-   * @param aNewStyleRule The rule being added.
+   * @param aStyleRule The rule being changed.
    */
   virtual void StyleRuleChanged(nsIDocument *aDocument,
                                 mozilla::CSSStyleSheet* aStyleSheet,
-                                mozilla::css::Rule* aOldStyleRule,
-                                mozilla::css::Rule* aNewStyleRule) = 0;
+                                mozilla::css::Rule* aStyleRule) = 0;
 
   /**
    * A StyleRule has just been added to a style sheet.
    * This method is called automatically when the rule gets
    * added to the sheet. The style sheet passes this
    * notification to the document. The notification is passed on 
    * to all of the document observers.
    *
@@ -233,18 +220,17 @@ NS_DEFINE_STATIC_IID_ACCESSOR(nsIDocumen
     virtual void StyleSheetApplicableStateChanged(                           \
         nsIDocument* aDocument,                                              \
         mozilla::CSSStyleSheet* aStyleSheet,                                 \
         bool aApplicable) override;
 
 #define NS_DECL_NSIDOCUMENTOBSERVER_STYLERULECHANGED                         \
     virtual void StyleRuleChanged(nsIDocument* aDocument,                    \
                                   mozilla::CSSStyleSheet* aStyleSheet,       \
-                                  mozilla::css::Rule* aOldStyleRule,         \
-                                  mozilla::css::Rule* aNewStyleRule) override;
+                                  mozilla::css::Rule* aStyleRule) override;
 
 #define NS_DECL_NSIDOCUMENTOBSERVER_STYLERULEADDED                           \
     virtual void StyleRuleAdded(nsIDocument* aDocument,                      \
                                 mozilla::CSSStyleSheet* aStyleSheet,         \
                                 mozilla::css::Rule* aStyleRule) override;
 
 #define NS_DECL_NSIDOCUMENTOBSERVER_STYLERULEREMOVED                         \
     virtual void StyleRuleRemoved(nsIDocument* aDocument,                    \
@@ -322,18 +308,17 @@ void                                    
 _class::StyleSheetApplicableStateChanged(nsIDocument* aDocument,          \
                                          mozilla::CSSStyleSheet* aStyleSheet,\
                                          bool aApplicable)                \
 {                                                                         \
 }                                                                         \
 void                                                                      \
 _class::StyleRuleChanged(nsIDocument* aDocument,                          \
                          mozilla::CSSStyleSheet* aStyleSheet,             \
-                         mozilla::css::Rule* aOldStyleRule,               \
-                         mozilla::css::Rule* aNewStyleRule)               \
+                         mozilla::css::Rule* aStyleRule)                  \
 {                                                                         \
 }                                                                         \
 void                                                                      \
 _class::StyleRuleAdded(nsIDocument* aDocument,                            \
                        mozilla::CSSStyleSheet* aStyleSheet,               \
                        mozilla::css::Rule* aStyleRule)                    \
 {                                                                         \
 }                                                                         \
diff --git a/layout/base/nsPresShell.cpp b/layout/base/nsPresShell.cpp
--- a/layout/base/nsPresShell.cpp
+++ b/layout/base/nsPresShell.cpp
@@ -4554,18 +4554,17 @@ PresShell::StyleSheetApplicableStateChan
   if (aStyleSheet->HasRules()) {
     RecordStyleSheetChange(aStyleSheet);
   }
 }
 
 void
 PresShell::StyleRuleChanged(nsIDocument* aDocument,
                             CSSStyleSheet* aStyleSheet,
-                            mozilla::css::Rule* aOldStyleRule,
-                            mozilla::css::Rule* aNewStyleRule)
+                            mozilla::css::Rule* aStyleRule)
 {
   RecordStyleSheetChange(aStyleSheet);
 }
 
 void
 PresShell::StyleRuleAdded(nsIDocument* aDocument,
                           CSSStyleSheet* aStyleSheet,
                           mozilla::css::Rule* aStyleRule)
diff --git a/layout/style/CSSStyleSheet.cpp b/layout/style/CSSStyleSheet.cpp
--- a/layout/style/CSSStyleSheet.cpp
+++ b/layout/style/CSSStyleSheet.cpp
@@ -699,17 +699,17 @@ nsMediaList::GetMediaText(nsAString& aMe
   }
 
 #define END_MEDIA_CHANGE(sheet, doc)                           \
   if (sheet) {                                                 \
     sheet->DidDirty();                                         \
   }                                                            \
   /* XXXldb Pass something meaningful? */                      \
   if (doc) {                                                   \
-    doc->StyleRuleChanged(sheet, nullptr, nullptr);              \
+    doc->StyleRuleChanged(sheet, nullptr);                     \
   }
 
 
 NS_IMETHODIMP
 nsMediaList::SetMediaText(const nsAString& aMediaText)
 {
   nsCOMPtr<nsIDocument> doc;
 
diff --git a/layout/style/StyleRule.cpp b/layout/style/StyleRule.cpp
--- a/layout/style/StyleRule.cpp
+++ b/layout/style/StyleRule.cpp
@@ -1212,17 +1212,17 @@ DOMCSSDeclarationImpl::SetCSSDeclaration
 
   mRule->SetDeclaration(aDecl);
 
   if (sheet) {
     sheet->DidDirty();
   }
 
   if (owningDoc) {
-    owningDoc->StyleRuleChanged(sheet, mRule, mRule);
+    owningDoc->StyleRuleChanged(sheet, mRule);
   }
   return NS_OK;
 }
 
 nsIDocument*
 DOMCSSDeclarationImpl::DocToUpdate()
 {
   return nullptr;
diff --git a/layout/style/nsCSSRules.cpp b/layout/style/nsCSSRules.cpp
--- a/layout/style/nsCSSRules.cpp
+++ b/layout/style/nsCSSRules.cpp
@@ -2126,17 +2126,17 @@ nsCSSKeyframeRule::SetKeyText(const nsAS
 
   newSelectors.SwapElements(mKeys);
 
   CSSStyleSheet* sheet = GetStyleSheet();
   if (sheet) {
     sheet->SetModifiedByChildRule();
 
     if (doc) {
-      doc->StyleRuleChanged(sheet, this, this);
+      doc->StyleRuleChanged(sheet, this);
     }
   }
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCSSKeyframeRule::GetStyle(nsIDOMCSSStyleDeclaration** aStyle)
@@ -2163,17 +2163,17 @@ nsCSSKeyframeRule::ChangeDeclaration(css
     mDeclaration->SetOwningRule(this);
   }
 
   CSSStyleSheet* sheet = GetStyleSheet();
   if (sheet) {
     sheet->SetModifiedByChildRule();
 
     if (doc) {
-      doc->StyleRuleChanged(sheet, this, this);
+      doc->StyleRuleChanged(sheet, this);
     }
   }
 }
 
 /* virtual */ size_t
 nsCSSKeyframeRule::SizeOfIncludingThis(MallocSizeOf aMallocSizeOf) const
 {
   return aMallocSizeOf(this);
@@ -2312,17 +2312,17 @@ nsCSSKeyframesRule::SetName(const nsAStr
 
   mName = aName;
 
   CSSStyleSheet* sheet = GetStyleSheet();
   if (sheet) {
     sheet->SetModifiedByChildRule();
 
     if (doc) {
-      doc->StyleRuleChanged(sheet, this, this);
+      doc->StyleRuleChanged(sheet, this);
     }
   }
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCSSKeyframesRule::GetCssRules(nsIDOMCSSRuleList* *aRuleList)
@@ -2347,17 +2347,17 @@ nsCSSKeyframesRule::AppendRule(const nsA
 
     AppendStyleRule(rule);
 
     CSSStyleSheet* sheet = GetStyleSheet();
     if (sheet) {
       sheet->SetModifiedByChildRule();
 
       if (doc) {
-        doc->StyleRuleChanged(sheet, this, this);
+        doc->StyleRuleChanged(sheet, this);
       }
     }
   }
 
   return NS_OK;
 }
 
 static const uint32_t RULE_NOT_FOUND = uint32_t(-1);
@@ -2395,17 +2395,17 @@ nsCSSKeyframesRule::DeleteRule(const nsA
 
     mRules.RemoveObjectAt(index);
 
     CSSStyleSheet* sheet = GetStyleSheet();
     if (sheet) {
       sheet->SetModifiedByChildRule();
 
       if (doc) {
-        doc->StyleRuleChanged(sheet, this, this);
+        doc->StyleRuleChanged(sheet, this);
       }
     }
   }
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCSSKeyframesRule::FindRule(const nsAString& aKey,
@@ -2963,17 +2963,17 @@ nsCSSCounterStyleRule::SetName(const nsA
     MOZ_AUTO_DOC_UPDATE(doc, UPDATE_STYLE, true);
 
     mName = name;
 
     CSSStyleSheet* sheet = GetStyleSheet();
     if (sheet) {
       sheet->SetModifiedByChildRule();
       if (doc) {
-        doc->StyleRuleChanged(sheet, this, this);
+        doc->StyleRuleChanged(sheet, this);
       }
     }
   }
   return NS_OK;
 }
 
 int32_t
 nsCSSCounterStyleRule::GetSystem() const
@@ -3009,17 +3009,17 @@ nsCSSCounterStyleRule::SetDesc(nsCSSCoun
 
   mValues[aDescID] = aValue;
   mGeneration++;
 
   CSSStyleSheet* sheet = GetStyleSheet();
   if (sheet) {
     sheet->SetModifiedByChildRule();
     if (doc) {
-      doc->StyleRuleChanged(sheet, this, this);
+      doc->StyleRuleChanged(sheet, this);
     }
   }
 }
 
 NS_IMETHODIMP
 nsCSSCounterStyleRule::GetSystem(nsAString& aSystem)
 {
   const nsCSSValue& value = GetDesc(eCSSCounterDesc_System);
