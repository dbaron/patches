From: L. David Baron <dbaron@dbaron.org>

Bug 1429645 - Make EXTENDED_DEBUG_PRINTING compile again.

MozReview-Commit-ID: B0JIbPpl8LW

diff --git a/layout/printing/nsPrintData.cpp b/layout/printing/nsPrintData.cpp
--- a/layout/printing/nsPrintData.cpp
+++ b/layout/printing/nsPrintData.cpp
@@ -12,17 +12,16 @@
 #include "nsPrintPreviewListener.h"
 #include "nsIWebProgressListener.h"
 #include "mozilla/Services.h"
 
 //-----------------------------------------------------
 // PR LOGGING
 #include "mozilla/Logging.h"
 
-#define DUMP_LAYOUT_LEVEL 9 // this turns on the dumping of each doucment's layout info
 static mozilla::LazyLogModule gPrintingLog("printing");
 
 #define PR_PL(_p1)  MOZ_LOG(gPrintingLog, mozilla::LogLevel::Debug, _p1);
 
 //---------------------------------------------------
 //-- nsPrintData Class Impl
 //---------------------------------------------------
 nsPrintData::nsPrintData(ePrintDataType aType)
diff --git a/layout/printing/nsPrintJob.cpp b/layout/printing/nsPrintJob.cpp
--- a/layout/printing/nsPrintJob.cpp
+++ b/layout/printing/nsPrintJob.cpp
@@ -131,17 +131,18 @@ using namespace mozilla::dom;
 #include "mozilla/Logging.h"
 
 #ifdef DEBUG
 // PR_LOGGING is force to always be on (even in release builds)
 // but we only want some of it on,
 //#define EXTENDED_DEBUG_PRINTING
 #endif
 
-#define DUMP_LAYOUT_LEVEL 9 // this turns on the dumping of each doucment's layout info
+// this log level turns on the dumping of each document's layout info
+#define DUMP_LAYOUT_LEVEL (static_cast<mozilla::LogLevel>(9))
 
 #ifndef PR_PL
 static mozilla::LazyLogModule gPrintingLog("printing")
 
 #define PR_PL(_p1)  MOZ_LOG(gPrintingLog, mozilla::LogLevel::Debug, _p1);
 #endif
 
 #ifdef EXTENDED_DEBUG_PRINTING
@@ -157,23 +158,23 @@ static const char * gPrintRangeStr[]    
 
 // This processes the selection on aOrigDoc and creates an inverted selection on
 // aDoc, which it then deletes. If the start or end of the inverted selection
 // ranges occur in text nodes then an ellipsis is added.
 static nsresult DeleteUnselectedNodes(nsIDocument* aOrigDoc, nsIDocument* aDoc);
 
 #ifdef EXTENDED_DEBUG_PRINTING
 // Forward Declarations
-static void DumpPrintObjectsListStart(const char * aStr, nsTArray<nsPrintObject*> * aDocList);
+static void DumpPrintObjectsListStart(const char * aStr, const nsTArray<nsPrintObject*>& aDocList);
 static void DumpPrintObjectsTree(nsPrintObject * aPO, int aLevel= 0, FILE* aFD = nullptr);
-static void DumpPrintObjectsTreeLayout(nsPrintObject * aPO,nsDeviceContext * aDC, int aLevel= 0, FILE * aFD = nullptr);
+static void DumpPrintObjectsTreeLayout(const UniquePtr<nsPrintObject>& aPO,nsDeviceContext * aDC, int aLevel= 0, FILE * aFD = nullptr);
 
 #define DUMP_DOC_LIST(_title) DumpPrintObjectsListStart((_title), mPrt->mPrintDocList);
 #define DUMP_DOC_TREE DumpPrintObjectsTree(mPrt->mPrintObject.get());
-#define DUMP_DOC_TREELAYOUT DumpPrintObjectsTreeLayout(mPrt->mPrintObject.get(), mPrt->mPrintDC);
+#define DUMP_DOC_TREELAYOUT DumpPrintObjectsTreeLayout(mPrt->mPrintObject, mPrt->mPrintDC);
 #else
 #define DUMP_DOC_LIST(_title)
 #define DUMP_DOC_TREE
 #define DUMP_DOC_TREELAYOUT
 #endif
 
 class nsScriptSuppressor
 {
@@ -595,23 +596,27 @@ nsPrintJob::GetSeqFrameAndCountPages(nsI
 
 
 //---------------------------------------------------------------------------------
 //-- Section: nsIWebBrowserPrint
 //---------------------------------------------------------------------------------
 
 // Foward decl for Debug Helper Functions
 #ifdef EXTENDED_DEBUG_PRINTING
+#ifdef XP_WIN
 static int RemoveFilesInDir(const char * aDir);
-static void GetDocTitleAndURL(nsPrintObject* aPO, char *& aDocStr, char *& aURLStr);
+#endif
+static void GetDocTitleAndURL(const UniquePtr<nsPrintObject>& aPO,
+                              nsACString& aDocStr,
+                              nsACString& aURLStr);
 static void DumpPrintObjectsTree(nsPrintObject * aPO, int aLevel, FILE* aFD);
-static void DumpPrintObjectsList(nsTArray<nsPrintObject*> * aDocList);
-static void RootFrameList(nsPresContext* aPresContext, FILE* out, int32_t aIndent);
+static void DumpPrintObjectsList(const nsTArray<nsPrintObject*>& aDocList);
+static void RootFrameList(nsPresContext* aPresContext, FILE* out, const char* aPrefix);
 static void DumpViews(nsIDocShell* aDocShell, FILE* out);
-static void DumpLayoutData(char* aTitleStr, char* aURLStr,
+static void DumpLayoutData(const char* aTitleStr, const char* aURLStr,
                            nsPresContext* aPresContext,
                            nsDeviceContext * aDC, nsIFrame * aRootFrame,
                            nsIDocShell * aDocShell, FILE* aFD);
 #endif
 
 //--------------------------------------------------------------------------------
 
 nsresult
@@ -1659,17 +1664,17 @@ nsPrintJob::ReconstructAndReflow(bool do
 {
   if (NS_WARN_IF(!mPrt)) {
     return NS_ERROR_FAILURE;
   }
 
 #if defined(XP_WIN) && defined(EXTENDED_DEBUG_PRINTING)
   // We need to clear all the output files here
   // because they will be re-created with second reflow of the docs
-  if (kPrintingLogMod && kPrintingLogMod->level == DUMP_LAYOUT_LEVEL) {
+  if (MOZ_LOG_TEST(gPrintingLog, DUMP_LAYOUT_LEVEL)) {
     RemoveFilesInDir(".\\");
     gDumpFileNameCnt   = 0;
     gDumpLOFileNameCnt = 0;
   }
 #endif
 
   // In this loop, it's conceivable that one of our helpers might clear mPrt,
   // while we're using it & its members!  So we capture it in an owning local
@@ -2404,17 +2409,17 @@ nsPrintJob::ReflowPrintObject(const Uniq
 
   // Process the reflow event Initialize posted
   aPO->mPresShell->FlushPendingNotifications(FlushType::Layout);
 
   rv = UpdateSelectionAndShrinkPrintObject(aPO.get(), documentIsTopLevel);
   NS_ENSURE_SUCCESS(rv, rv);
 
 #ifdef EXTENDED_DEBUG_PRINTING
-    if (kPrintingLogMod && kPrintingLogMod->level == DUMP_LAYOUT_LEVEL) {
+    if (MOZ_LOG_TEST(gPrintingLog, DUMP_LAYOUT_LEVEL)) {
       nsAutoCString docStr;
       nsAutoCString urlStr;
       GetDocTitleAndURL(aPO, docStr, urlStr);
       char filename[256];
       sprintf(filename, "print_dump_%d.txt", gDumpFileNameCnt++);
       // Dump all the frames and view to a a file
       FILE * fd = fopen(filename, "w");
       if (fd) {
@@ -2430,19 +2435,19 @@ nsPrintJob::ReflowPrintObject(const Uniq
         fprintf(fd, "---------------------------------------\n\n");
         fprintf(fd, "--------------- Views From Root Frame----------------\n");
         nsView* v = theRootFrame->GetView();
         if (v) {
           v->List(fd);
         } else {
           printf("View is null!\n");
         }
-        if (docShell) {
+        if (aPO->mDocShell) {
           fprintf(fd, "--------------- All Views ----------------\n");
-          DumpViews(docShell, fd);
+          DumpViews(aPO->mDocShell, fd);
           fprintf(fd, "---------------------------------------\n\n");
         }
         fclose(fd);
       }
     }
 #endif
 
   return NS_OK;
@@ -2451,18 +2456,17 @@ nsPrintJob::ReflowPrintObject(const Uniq
 //-------------------------------------------------------
 // Figure out how many documents and how many total pages we are printing
 void
 nsPrintJob::CalcNumPrintablePages(int32_t& aNumPages)
 {
   aNumPages = 0;
   // Count the number of printable documents
   // and printable pages
-  for (uint32_t i=0; i<mPrt->mPrintDocList.Length(); i++) {
-    nsPrintObject* po = mPrt->mPrintDocList.ElementAt(i);
+  for (const auto& po : mPrt->mPrintDocList) {
     NS_ASSERTION(po, "nsPrintObject can't be null!");
     // Note: The po->mPresContext null-check below is necessary, because it's
     // possible po->mPresContext might never have been set.  (e.g., if
     // IsPrintable() returns false, ReflowPrintObject bails before setting
     // mPresContext)
     if (po->mPresContext && po->mPresContext->IsRootPaginatedDocument()) {
       nsIPageSequenceFrame* pageSequence = po->mPresShell->GetPageSequenceFrame();
       nsIFrame * seqFrame = do_QueryFrame(pageSequence);
@@ -2656,17 +2660,17 @@ nsPrintJob::DoPrint(const UniquePtr<nsPr
 
 #ifdef EXTENDED_DEBUG_PRINTING
     nsIFrame* rootFrame = poPresShell->FrameManager()->GetRootFrame();
     if (aPO->IsPrintable()) {
       nsAutoCString docStr;
       nsAutoCString urlStr;
       GetDocTitleAndURL(aPO, docStr, urlStr);
       DumpLayoutData(docStr.get(), urlStr.get(), poPresContext,
-                     printData->mPrintDocDC, rootFrame, docShell, nullptr);
+                     printData->mPrintDC, rootFrame, aPO->mDocShell, nullptr);
     }
 #endif
 
     if (!printData->mPrintSettings) {
       // not sure what to do here!
       SetIsPrinting(false);
       return NS_ERROR_FAILURE;
     }
@@ -3634,26 +3638,26 @@ int RemoveFilesInDir(const char * aDir)
 }
 #endif
 
 #ifdef EXTENDED_DEBUG_PRINTING
 
 /** ---------------------------------------------------
  *  Dumps Frames for Printing
  */
-static void RootFrameList(nsPresContext* aPresContext, FILE* out, int32_t aIndent)
+static void RootFrameList(nsPresContext* aPresContext, FILE* out, const char* aPrefix)
 {
   if (!aPresContext || !out)
     return;
 
   nsIPresShell *shell = aPresContext->GetPresShell();
   if (shell) {
     nsIFrame* frame = shell->FrameManager()->GetRootFrame();
     if (frame) {
-      frame->List(aPresContext, out, aIndent);
+      frame->List(out, aPrefix);
     }
   }
 }
 
 /** ---------------------------------------------------
  *  Dumps Frames for Printing
  */
 static void DumpFrames(FILE*                 out,
@@ -3671,17 +3675,17 @@ static void DumpFrames(FILE*            
   while (child != nullptr) {
     for (int32_t i=0;i<aLevel;i++) {
      fprintf(out, "  ");
     }
     nsAutoString tmp;
     child->GetFrameName(tmp);
     fputs(NS_LossyConvertUTF16toASCII(tmp).get(), out);
     bool isSelected;
-    if (NS_SUCCEEDED(child->IsVisibleForPainting(aPresContext, *aRendContext, true, &isSelected))) {
+    if (child->IsVisibleForPainting()) {
       fprintf(out, " %p %s", child, isSelected?"VIS":"UVS");
       nsRect rect = child->GetRect();
       fprintf(out, "[%d,%d,%d,%d] ", rect.x, rect.y, rect.width, rect.height);
       fprintf(out, "v: %p ", (void*)child->GetView());
       fprintf(out, "\n");
       DumpFrames(out, aPresContext, aRendContext, child, aLevel+1);
       child = child->GetNextSibling();
     }
@@ -3695,17 +3699,17 @@ static void DumpFrames(FILE*            
 static void
 DumpViews(nsIDocShell* aDocShell, FILE* out)
 {
   NS_ASSERTION(aDocShell, "Pointer is null!");
   NS_ASSERTION(out, "Pointer is null!");
 
   if (nullptr != aDocShell) {
     fprintf(out, "docshell=%p \n", aDocShell);
-    nsIPresShell* shell = nsPrintJob::GetPresShellFor(aDocShell);
+    nsIPresShell* shell = aDocShell->GetPresShell();
     if (shell) {
       nsViewManager* vm = shell->GetViewManager();
       if (vm) {
         nsView* root = vm->GetRootView();
         if (root) {
           root->List(out);
         }
       }
@@ -3726,25 +3730,27 @@ DumpViews(nsIDocShell* aDocShell, FILE* 
       }
     }
   }
 }
 
 /** ---------------------------------------------------
  *  Dumps the Views and Frames
  */
-void DumpLayoutData(char*              aTitleStr,
-                    char*              aURLStr,
-                    nsPresContext*    aPresContext,
-                    nsDeviceContext * aDC,
-                    nsIFrame *         aRootFrame,
-                    nsIDocShekk *      aDocShell,
+void DumpLayoutData(const char*        aTitleStr,
+                    const char*        aURLStr,
+                    nsPresContext*     aPresContext,
+                    nsDeviceContext*   aDC,
+                    nsIFrame*          aRootFrame,
+                    nsIDocShell*       aDocShell,
                     FILE*              aFD = nullptr)
 {
-  if (!kPrintingLogMod || kPrintingLogMod->level != DUMP_LAYOUT_LEVEL) return;
+  if (!MOZ_LOG_TEST(gPrintingLog, DUMP_LAYOUT_LEVEL)) {
+    return;
+  }
 
   if (aPresContext == nullptr || aDC == nullptr) {
     return;
   }
 
 #ifdef NS_PRINT_PREVIEW
   if (aPresContext->Type() == nsPresContext::eContext_PrintPreview) {
     return;
@@ -3760,17 +3766,17 @@ void DumpLayoutData(char*              a
   FILE * fd = aFD?aFD:fopen(filename, "w");
   if (fd) {
     fprintf(fd, "Title: %s\n", aTitleStr?aTitleStr:"");
     fprintf(fd, "URL:   %s\n", aURLStr?aURLStr:"");
     fprintf(fd, "--------------- Frames ----------------\n");
     fprintf(fd, "--------------- Frames ----------------\n");
     //RefPtr<gfxContext> renderingContext =
     //  aDC->CreateRenderingContext();
-    RootFrameList(aPresContext, fd, 0);
+    RootFrameList(aPresContext, fd, "");
     //DumpFrames(fd, aPresContext, renderingContext, aRootFrame, 0);
     fprintf(fd, "---------------------------------------\n\n");
     fprintf(fd, "--------------- Views From Root Frame----------------\n");
     nsView* v = aRootFrame->GetView();
     if (v) {
       v->List(fd);
     } else {
       printf("View is null!\n");
@@ -3782,90 +3788,87 @@ void DumpLayoutData(char*              a
     }
     if (aFD == nullptr) {
       fclose(fd);
     }
   }
 }
 
 //-------------------------------------------------------------
-static void DumpPrintObjectsList(nsTArray<nsPrintObject*> * aDocList)
+static void DumpPrintObjectsList(const nsTArray<nsPrintObject*>& aDocList)
 {
-  if (!kPrintingLogMod || kPrintingLogMod->level != DUMP_LAYOUT_LEVEL) return;
-
-  NS_ASSERTION(aDocList, "Pointer is null!");
+  if (!MOZ_LOG_TEST(gPrintingLog, DUMP_LAYOUT_LEVEL)) {
+    return;
+  }
 
   const char types[][3] = {"DC", "FR", "IF", "FS"};
   PR_PL(("Doc List\n***************************************************\n"));
   PR_PL(("T  P A H    PO    DocShell   Seq     Page      Root     Page#    Rect\n"));
-  int32_t cnt = aDocList->Length();
-  for (int32_t i=0;i<cnt;i++) {
-    nsPrintObject* po = aDocList->ElementAt(i);
+  for (nsPrintObject* po : aDocList) {
     NS_ASSERTION(po, "nsPrintObject can't be null!");
     nsIFrame* rootFrame = nullptr;
     if (po->mPresShell) {
       rootFrame = po->mPresShell->FrameManager()->GetRootFrame();
       while (rootFrame != nullptr) {
         nsIPageSequenceFrame * sqf = do_QueryFrame(rootFrame);
         if (sqf) {
           break;
         }
         rootFrame = rootFrame->PrincipalChildList().FirstChild();
       }
     }
 
-    PR_PL(("%s %d %d %d %p %p %p %p %p   %d   %d,%d,%d,%d\n", types[po->mFrameType],
-            po->IsPrintable(), po->mPrintAsIs, po->mHasBeenPrinted, po, po->mDocShell.get(), po->mSeqFrame,
-            po->mPageFrame, rootFrame, po->mPageNum, po->mRect.x, po->mRect.y, po->mRect.width, po->mRect.height));
+    PR_PL(("%s %d %d %d %p %p %p\n", types[po->mFrameType],
+            po->IsPrintable(), po->mPrintAsIs, po->mHasBeenPrinted, po,
+            po->mDocShell.get(), rootFrame));
   }
 }
 
 //-------------------------------------------------------------
 static void DumpPrintObjectsTree(nsPrintObject * aPO, int aLevel, FILE* aFD)
 {
-  if (!kPrintingLogMod || kPrintingLogMod->level != DUMP_LAYOUT_LEVEL) return;
+  if (!MOZ_LOG_TEST(gPrintingLog, DUMP_LAYOUT_LEVEL)) {
+    return;
+  }
 
   NS_ASSERTION(aPO, "Pointer is null!");
 
   FILE * fd = aFD?aFD:stdout;
   const char types[][3] = {"DC", "FR", "IF", "FS"};
   if (aLevel == 0) {
     fprintf(fd, "DocTree\n***************************************************\n");
     fprintf(fd, "T     PO    DocShell   Seq      Page     Page#    Rect\n");
   }
-  int32_t cnt = aPO->mKids.Length();
-  for (int32_t i=0;i<cnt;i++) {
-    nsPrintObject* po = aPO->mKids.ElementAt(i);
+  for (const auto& po : aPO->mKids) {
     NS_ASSERTION(po, "nsPrintObject can't be null!");
     for (int32_t k=0;k<aLevel;k++) fprintf(fd, "  ");
-    fprintf(fd, "%s %p %p %p %p %d %d,%d,%d,%d\n", types[po->mFrameType], po, po->mDocShell.get(), po->mSeqFrame,
-           po->mPageFrame, po->mPageNum, po->mRect.x, po->mRect.y, po->mRect.width, po->mRect.height);
+    fprintf(fd, "%s %p %p\n", types[po->mFrameType], po.get(), po->mDocShell.get());
   }
 }
 
 //-------------------------------------------------------------
 static void GetDocTitleAndURL(const UniquePtr<nsPrintObject>& aPO,
                               nsACString& aDocStr,
                               nsACString& aURLStr)
 {
   nsAutoString docTitleStr;
   nsAutoString docURLStr;
-  nsPrintJob::GetDisplayTitleAndURL(aPO,
-                                    docTitleStr, docURLStr,
-                                    nsPrintJob::eDocTitleDefURLDoc);
+  GetDocumentTitleAndURL(aPO->mDocument, docTitleStr, docURLStr);
   aDocStr = NS_ConvertUTF16toUTF8(docTitleStr);
   aURLStr = NS_ConvertUTF16toUTF8(docURLStr);
 }
 
 //-------------------------------------------------------------
-static void DumpPrintObjectsTreeLayout(nsPrintObject * aPO,
+static void DumpPrintObjectsTreeLayout(const UniquePtr<nsPrintObject>& aPO,
                                        nsDeviceContext * aDC,
                                        int aLevel, FILE * aFD)
 {
-  if (!kPrintingLogMod || kPrintingLogMod->level != DUMP_LAYOUT_LEVEL) return;
+  if (!MOZ_LOG_TEST(gPrintingLog, DUMP_LAYOUT_LEVEL)) {
+    return;
+  }
 
   NS_ASSERTION(aPO, "Pointer is null!");
   NS_ASSERTION(aDC, "Pointer is null!");
 
   const char types[][3] = {"DC", "FR", "IF", "FS"};
   FILE * fd = nullptr;
   if (aLevel == 0) {
     fd = fopen("tree_layout.txt", "w");
@@ -3876,56 +3879,46 @@ static void DumpPrintObjectsTreeLayout(n
     fd = aFD;
   }
   if (fd) {
     nsIFrame* rootFrame = nullptr;
     if (aPO->mPresShell) {
       rootFrame = aPO->mPresShell->FrameManager()->GetRootFrame();
     }
     for (int32_t k=0;k<aLevel;k++) fprintf(fd, "  ");
-    fprintf(fd, "%s %p %p %p %p %d %d,%d,%d,%d\n", types[aPO->mFrameType], aPO, aPO->mDocShell.get(), aPO->mSeqFrame,
-           aPO->mPageFrame, aPO->mPageNum, aPO->mRect.x, aPO->mRect.y, aPO->mRect.width, aPO->mRect.height);
+    fprintf(fd, "%s %p %p\n", types[aPO->mFrameType], aPO.get(), aPO->mDocShell.get());
     if (aPO->IsPrintable()) {
       nsAutoCString docStr;
       nsAutoCString urlStr;
       GetDocTitleAndURL(aPO, docStr, urlStr);
       DumpLayoutData(docStr.get(), urlStr.get(), aPO->mPresContext, aDC, rootFrame, aPO->mDocShell, fd);
     }
     fprintf(fd, "<***************************************************>\n");
 
-    int32_t cnt = aPO->mKids.Length();
-    for (int32_t i=0;i<cnt;i++) {
-      nsPrintObject* po = aPO->mKids.ElementAt(i);
+    for (const auto& po : aPO->mKids) {
       NS_ASSERTION(po, "nsPrintObject can't be null!");
       DumpPrintObjectsTreeLayout(po, aDC, aLevel+1, fd);
     }
   }
   if (aLevel == 0 && fd) {
     fclose(fd);
   }
 }
 
 //-------------------------------------------------------------
-static void DumpPrintObjectsListStart(const char * aStr, nsTArray<nsPrintObject*> * aDocList)
+static void DumpPrintObjectsListStart(const char * aStr, const nsTArray<nsPrintObject*> & aDocList)
 {
-  if (!kPrintingLogMod || kPrintingLogMod->level != DUMP_LAYOUT_LEVEL) return;
+  if (!MOZ_LOG_TEST(gPrintingLog, DUMP_LAYOUT_LEVEL)) {
+    return;
+  }
 
   NS_ASSERTION(aStr, "Pointer is null!");
-  NS_ASSERTION(aDocList, "Pointer is null!");
 
   PR_PL(("%s\n", aStr));
   DumpPrintObjectsList(aDocList);
 }
 
-#define DUMP_DOC_LIST(_title) DumpPrintObjectsListStart((_title), mPrt->mPrintDocList);
-#define DUMP_DOC_TREE DumpPrintObjectsTree(mPrt->mPrintObject.get());
-#define DUMP_DOC_TREELAYOUT DumpPrintObjectsTreeLayout(mPrt->mPrintObject.get(), mPrt->mPrintDC);
-
-#else
-#define DUMP_DOC_LIST(_title)
-#define DUMP_DOC_TREE
-#define DUMP_DOC_TREELAYOUT
 #endif
 
 //---------------------------------------------------------------
 //---------------------------------------------------------------
 //-- End of debug helper routines
 //---------------------------------------------------------------
