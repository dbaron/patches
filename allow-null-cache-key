From: L. David Baron <dbaron@dbaron.org>

Allow null media query cache key in some places.  (Bug 542058, patch 4)

diff --git a/layout/style/nsCSSRules.cpp b/layout/style/nsCSSRules.cpp
--- a/layout/style/nsCSSRules.cpp
+++ b/layout/style/nsCSSRules.cpp
@@ -883,17 +883,17 @@ MediaRule::DeleteRule(PRUint32 aIndex)
 }
 
 // GroupRule interface
 /* virtual */ PRBool
 MediaRule::UseForPresentation(nsPresContext* aPresContext,
                                    nsMediaQueryResultCacheKey& aKey)
 {
   if (mMedia) {
-    return mMedia->Matches(aPresContext, aKey);
+    return mMedia->Matches(aPresContext, &aKey);
   }
   return PR_TRUE;
 }
 
 } // namespace css
 } // namespace mozilla
 
 // Must be outside namespace
diff --git a/layout/style/nsCSSStyleSheet.cpp b/layout/style/nsCSSStyleSheet.cpp
--- a/layout/style/nsCSSStyleSheet.cpp
+++ b/layout/style/nsCSSStyleSheet.cpp
@@ -500,32 +500,34 @@ nsMediaQuery::Clone() const
   NS_ENSURE_TRUE(result &&
                    result->mExpressions.Length() == mExpressions.Length(),
                  nsnull);
   return result.forget();
 }
 
 PRBool
 nsMediaQuery::Matches(nsPresContext* aPresContext,
-                      nsMediaQueryResultCacheKey& aKey) const
+                      nsMediaQueryResultCacheKey* aKey) const
 {
   if (mHadUnknownExpression)
     return PR_FALSE;
 
   PRBool match =
     mMediaType == aPresContext->Medium() || mMediaType == nsGkAtoms::all;
   for (PRUint32 i = 0, i_end = mExpressions.Length(); match && i < i_end; ++i) {
     const nsMediaExpression &expr = mExpressions[i];
     nsCSSValue actual;
     nsresult rv =
       (expr.mFeature->mGetter)(aPresContext, expr.mFeature, actual);
     NS_ENSURE_SUCCESS(rv, PR_FALSE); // any better ideas?
 
     match = expr.Matches(aPresContext, actual);
-    aKey.AddExpression(&expr, match);
+    if (aKey) {
+      aKey->AddExpression(&expr, match);
+    }
   }
 
   return match == !mNegated;
 }
 
 DOMCI_DATA(MediaList, nsMediaList)
 
 NS_INTERFACE_MAP_BEGIN(nsMediaList)
@@ -586,17 +588,17 @@ nsMediaList::SetText(const nsAString& aM
   }
 
   return parser.ParseMediaList(nsString(aMediaText), nsnull, 0,
                                this, htmlMode);
 }
 
 PRBool
 nsMediaList::Matches(nsPresContext* aPresContext,
-                     nsMediaQueryResultCacheKey& aKey)
+                     nsMediaQueryResultCacheKey* aKey)
 {
   for (PRInt32 i = 0, i_end = mArray.Length(); i < i_end; ++i) {
     if (mArray[i]->Matches(aPresContext, aKey)) {
       return PR_TRUE;
     }
   }
   return mIsEmpty;
 }
@@ -1158,17 +1160,17 @@ nsCSSStyleSheet::GetType(nsString& aType
   aType.AssignLiteral("text/css");
 }
 
 PRBool
 nsCSSStyleSheet::UseForPresentation(nsPresContext* aPresContext,
                                     nsMediaQueryResultCacheKey& aKey) const
 {
   if (mMedia) {
-    return mMedia->Matches(aPresContext, aKey);
+    return mMedia->Matches(aPresContext, &aKey);
   }
   return PR_TRUE;
 }
 
 
 void
 nsCSSStyleSheet::SetMedia(nsMediaList* aMedia)
 {
diff --git a/layout/style/nsIMediaList.h b/layout/style/nsIMediaList.h
--- a/layout/style/nsIMediaList.h
+++ b/layout/style/nsIMediaList.h
@@ -157,18 +157,19 @@ public:
   // Returns null on out-of-memory.
   nsMediaExpression* NewExpression()    { return mExpressions.AppendElement(); }
 
   void AppendToString(nsAString& aString) const;
 
   nsMediaQuery* Clone() const;
 
   // Does this query apply to the presentation?
+  // If |aKey| is non-null, add cache information to it.
   PRBool Matches(nsPresContext* aPresContext,
-                 nsMediaQueryResultCacheKey& aKey) const;
+                 nsMediaQueryResultCacheKey* aKey) const;
 
 private:
   PRPackedBool mNegated;
   PRPackedBool mHasOnly; // only needed for serialization
   PRPackedBool mTypeOmitted; // only needed for serialization
   PRPackedBool mHadUnknownExpression;
   nsCOMPtr<nsIAtom> mMediaType;
   nsTArray<nsMediaExpression> mExpressions;
@@ -179,18 +180,22 @@ public:
   nsMediaList();
 
   NS_DECL_ISUPPORTS
 
   NS_DECL_NSIDOMMEDIALIST
 
   nsresult GetText(nsAString& aMediaText);
   nsresult SetText(const nsAString& aMediaText);
+
+  // Does this query apply to the presentation?
+  // If |aKey| is non-null, add cache information to it.
   PRBool Matches(nsPresContext* aPresContext,
-                 nsMediaQueryResultCacheKey& aKey);
+                 nsMediaQueryResultCacheKey* aKey);
+
   nsresult SetStyleSheet(nsCSSStyleSheet* aSheet);
   nsresult AppendQuery(nsAutoPtr<nsMediaQuery>& aQuery) {
     // Takes ownership of aQuery (if it succeeds)
     if (!mArray.AppendElement(aQuery.get())) {
       return NS_ERROR_OUT_OF_MEMORY;
     }
     aQuery.forget();
     return NS_OK;
