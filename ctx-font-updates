From: L. David Baron <dbaron@dbaron.org>

Update to latest spec changes for ctx.font setter and getter.  (Bug 508452)

diff --git a/content/canvas/src/nsCanvasRenderingContext2D.cpp b/content/canvas/src/nsCanvasRenderingContext2D.cpp
--- a/content/canvas/src/nsCanvasRenderingContext2D.cpp
+++ b/content/canvas/src/nsCanvasRenderingContext2D.cpp
@@ -63,16 +63,17 @@
 
 #include "nsIInterfaceRequestorUtils.h"
 #include "nsIFrame.h"
 #include "nsDOMError.h"
 #include "nsIScriptError.h"
 
 #include "nsCSSParser.h"
 #include "nsICSSStyleRule.h"
+#include "nsCSSDeclaration.h"
 #include "nsComputedDOMStyle.h"
 #include "nsStyleSet.h"
 
 #include "nsPrintfCString.h"
 
 #include "nsReadableUtils.h"
 
 #include "nsColor.h"
@@ -2019,28 +2020,26 @@ CreateFontStyleRule(const nsAString& aFo
 
     nsIPrincipal* principal = aNode->NodePrincipal();
     nsIDocument* document = aNode->GetOwnerDoc();
 
     nsIURI* docURL = document->GetDocumentURI();
     nsIURI* baseURL = document->GetDocBaseURI();
 
     nsresult rv = parser.ParseStyleAttribute(EmptyString(), docURL, baseURL,
-                                             principal, aResult);
+                                             principal, getter_AddRefs(rule));
     if (NS_FAILED(rv))
         return rv;
 
     rv = parser.ParseProperty(eCSSProperty_font, aFont, docURL, baseURL,
                               principal, rule->GetDeclaration(), &changed,
                               PR_FALSE);
     if (NS_FAILED(rv))
         return rv;
 
-    rule->RuleMatched();
-
     rule.forget(aResult);
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCanvasRenderingContext2D::SetFont(const nsAString& font)
 {
     nsresult rv;
@@ -2066,16 +2065,42 @@ nsCanvasRenderingContext2D::SetFont(cons
 
     nsCOMArray<nsIStyleRule> rules;
 
     nsCOMPtr<nsICSSStyleRule> rule;
     rv = CreateFontStyleRule(font, document, getter_AddRefs(rule));
     if (NS_FAILED(rv))
         return rv;
 
+    nsCSSDeclaration *declaration = rule->GetDeclaration();
+    if (!declaration->EnsureMutable())
+        return NS_ERROR_OUT_OF_MEMORY;
+    // The easiest way to see whether we got a syntax error or whether
+    // we got 'inherit' or 'initial' is to look at font-size-adjust,
+    // which the shorthand resets to either 'none' or
+    // '-moz-system-font'.
+    nsCSSValue *fsaVal = static_cast<nsCSSValue*>(
+        declaration->SlotForValue(eCSSProperty_font_size_adjust));
+    if (!fsaVal || (fsaVal->GetUnit() != eCSSUnit_None &&
+                    fsaVal->GetUnit() != eCSSUnit_System_Font)) {
+        // We got an all-property value or a syntax error.
+        rv = CreateFontStyleRule(NS_LITERAL_STRING("10px sans-serif"),
+                                 document, getter_AddRefs(rule));
+        if (NS_FAILED(rv))
+            return rv;
+        declaration = rule->GetDeclaration();
+    } else {
+        // set line height to normal, as per spec
+        nsCSSValue *lhVal = static_cast<nsCSSValue*>(
+            declaration->SlotForValue(eCSSProperty_line_height));
+        NS_ASSERTION(lhVal, "should have since we parsed a font shorthand");
+        lhVal->SetNormalValue();
+    }
+
+    rule->RuleMatched();
     rules.AppendObject(rule);
 
     nsStyleSet* styleSet = presShell->StyleSet();
 
     // have to get a parent style context for inherit-like relative
     // values (2em, bolder, etc.)
     nsRefPtr<nsStyleContext> parentContext;
 
@@ -2088,16 +2113,17 @@ nsCanvasRenderingContext2D::SetFont(cons
     } else {
         // otherwise inherit from default (10px sans-serif)
         nsCOMPtr<nsICSSStyleRule> parentRule;
         rv = CreateFontStyleRule(NS_LITERAL_STRING("10px sans-serif"),
                                  document,
                                  getter_AddRefs(parentRule));
         if (NS_FAILED(rv))
             return rv;
+        parentRule->RuleMatched();
         nsCOMArray<nsIStyleRule> parentRules;
         parentRules.AppendObject(parentRule);
         parentContext = styleSet->ResolveStyleForRules(nsnull, parentRules);
     }
 
     if (!parentContext)
         return NS_ERROR_FAILURE;
 
@@ -2132,17 +2158,35 @@ nsCanvasRenderingContext2D::SetFont(cons
                        fontStyle->mFont.familyNameQuirks,
                        printerFont);
 
     CurrentState().fontGroup =
         gfxPlatform::GetPlatform()->CreateFontGroup(fontStyle->mFont.name,
                                                     &style,
                                                     presShell->GetPresContext()->GetUserFontSet());
     NS_ASSERTION(CurrentState().fontGroup, "Could not get font group");
-    CurrentState().font = font;
+
+    // The font getter is required to have the font size converted to
+    // pixels, and in general be reserialized based on what we parsed
+    // (including having line-height removed).
+    if (!declaration->EnsureMutable())
+        return NS_ERROR_OUT_OF_MEMORY;
+    nsCSSValue *sizeVal = static_cast<nsCSSValue*>(
+        declaration->SlotForValue(eCSSProperty_font_size));
+    if (sizeVal->GetUnit() != eCSSUnit_Pixel) {
+        PRBool canStoreInRuleTree = PR_FALSE;
+        nsPresContext *presContext = presShell->GetPresContext();
+        nscoord sizeCoord = nsRuleNode::CalcLength(*sizeVal, parentContext,
+                                                   presContext,
+                                                   canStoreInRuleTree);
+        sizeVal->SetFloatValue(presContext->AppUnitsToFloatCSSPixels(sizeCoord),
+                               eCSSUnit_Pixel);
+    }
+
+    declaration->GetValue(eCSSProperty_font, CurrentState().font);
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCanvasRenderingContext2D::GetFont(nsAString& font)
 {
     /* will initilize the value if not set, else does nothing */
     GetCurrentFontStyle();
