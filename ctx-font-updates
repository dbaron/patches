From: L. David Baron <dbaron@dbaron.org>

Update to latest spec changes for ctx.font setter and getter.  (Bug 508452)

diff --git a/content/canvas/src/nsCanvasRenderingContext2D.cpp b/content/canvas/src/nsCanvasRenderingContext2D.cpp
--- a/content/canvas/src/nsCanvasRenderingContext2D.cpp
+++ b/content/canvas/src/nsCanvasRenderingContext2D.cpp
@@ -60,16 +60,17 @@
 #include "nsICanvasElement.h"
 #include "nsIInterfaceRequestorUtils.h"
 #include "nsIFrame.h"
 #include "nsDOMError.h"
 #include "nsIScriptError.h"
 
 #include "nsICSSParser.h"
 #include "nsICSSStyleRule.h"
+#include "nsCSSDeclaration.h"
 #include "nsComputedDOMStyle.h"
 #include "nsStyleSet.h"
 
 #include "nsPrintfCString.h"
 
 #include "nsReadableUtils.h"
 
 #include "nsColor.h"
@@ -1870,27 +1871,16 @@ CreateFontStyleRule(const nsAString& aFo
                                    docURL,
                                    baseURL,
                                    principal,
                                    rule->GetDeclaration(),
                                    &changed);
     if (NS_FAILED(rv))
         return rv;
 
-    // set line height to normal, as per spec
-    rv = aCSSParser->ParseProperty(eCSSProperty_line_height,
-                                   NS_LITERAL_STRING("normal"),
-                                   docURL,
-                                   baseURL,
-                                   principal,
-                                   rule->GetDeclaration(),
-                                   &changed);
-    if (NS_FAILED(rv))
-        return rv;
-
     rule.forget(aResult);
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCanvasRenderingContext2D::SetFont(const nsAString& font)
 {
     nsresult rv;
@@ -1915,20 +1905,43 @@ nsCanvasRenderingContext2D::SetFont(cons
     nsIDocument* document = presShell->GetDocument();
 
     nsCString langGroup;
     presShell->GetPresContext()->GetLangGroup()->ToUTF8String(langGroup);
 
     nsCOMArray<nsIStyleRule> rules;
 
     nsCOMPtr<nsICSSStyleRule> rule;
-    rv = CreateFontStyleRule(font, mCSSParser.get(), document, getter_AddRefs(rule));
+    rv = CreateFontStyleRule(font, mCSSParser, document, getter_AddRefs(rule));
     if (NS_FAILED(rv))
         return rv;
 
+    nsCSSDeclaration *declaration = rule->GetDeclaration();
+    // The easiest way to see whether we got a syntax error or whether
+    // we got 'inherit' or 'initial' is to look at font-size-adjust,
+    // which the shorthand resets to either 'none' or
+    // '-moz-system-font'.
+    nsCSSValue *fsaVal = static_cast<nsCSSValue*>(
+        declaration->SlotForValue(eCSSProperty_font_size_adjust));
+    if (!fsaVal || (fsaVal->GetUnit() != eCSSUnit_None &&
+                    fsaVal->GetUnit() != eCSSUnit_System_Font)) {
+        // We got an all-property value or a syntax error.
+        rv = CreateFontStyleRule(NS_LITERAL_STRING("10px sans-serif"),
+                                 mCSSParser, document, getter_AddRefs(rule));
+        if (NS_FAILED(rv))
+            return rv;
+        declaration = rule->GetDeclaration();
+    } else {
+        // set line height to normal, as per spec
+        nsCSSValue *lhVal = static_cast<nsCSSValue*>(
+            declaration->SlotForValue(eCSSProperty_line_height));
+        NS_ASSERTION(lhVal, "should have since we parsed a font shorthand");
+        lhVal->SetNormalValue();
+    }
+
     rules.AppendObject(rule);
 
     nsStyleSet* styleSet = presShell->StyleSet();
 
     // have to get a parent style context for inherit-like relative
     // values (2em, bolder, etc.)
     nsRefPtr<nsStyleContext> parentContext;
 
@@ -1937,18 +1950,17 @@ nsCanvasRenderingContext2D::SetFont(cons
         parentContext = nsComputedDOMStyle::GetStyleContextForContent(
                 content,
                 nsnull,
                 presShell);
     } else {
         // otherwise inherit from default (10px sans-serif)
         nsCOMPtr<nsICSSStyleRule> parentRule;
         rv = CreateFontStyleRule(NS_LITERAL_STRING("10px sans-serif"),
-                                 mCSSParser.get(),
-                                 document,
+                                 mCSSParser, document,
                                  getter_AddRefs(parentRule));
         if (NS_FAILED(rv))
             return rv;
         nsCOMArray<nsIStyleRule> parentRules;
         parentRules.AppendObject(parentRule);
         parentContext = styleSet->ResolveStyleForRules(nsnull, nsnull,
                                                        nsnull, parentRules);
     }
@@ -1979,17 +1991,33 @@ nsCanvasRenderingContext2D::SetFont(cons
                        langGroup,
                        fontStyle->mFont.sizeAdjust,
                        fontStyle->mFont.systemFont,
                        fontStyle->mFont.familyNameQuirks,
                        printerFont);
 
     CurrentState().fontGroup = gfxPlatform::GetPlatform()->CreateFontGroup(fontStyle->mFont.name, &style, presShell->GetPresContext()->GetUserFontSet());
     NS_ASSERTION(CurrentState().fontGroup, "Could not get font group");
-    CurrentState().font = font;
+
+    // The font getter is required to have the font size converted to
+    // pixels, and in general be reserialized based on what we parsed
+    // (including having line-height removed).
+    nsCSSValue *sizeVal = static_cast<nsCSSValue*>(
+        declaration->SlotForValue(eCSSProperty_font_size));
+    if (sizeVal->GetUnit() != eCSSUnit_Pixel) {
+        PRBool canStoreInRuleTree = PR_FALSE;
+        nsPresContext *presContext = presShell->GetPresContext();
+        nscoord sizeCoord = nsRuleNode::CalcLength(*sizeVal, parentContext,
+                                                   presContext,
+                                                   canStoreInRuleTree);
+        sizeVal->SetFloatValue(presContext->AppUnitsToFloatCSSPixels(sizeCoord),
+                               eCSSUnit_Pixel);
+    }
+
+    declaration->GetValue(eCSSProperty_font, CurrentState().font);
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCanvasRenderingContext2D::GetFont(nsAString& font)
 {
     /* will initilize the value if not set, else does nothing */
     GetCurrentFontStyle();
