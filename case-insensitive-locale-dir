From: L. David Baron <dbaron@dbaron.org>

Treat argument of :-moz-locale-dir() case-insensitively.  (Bug 741293)

diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -3593,16 +3593,17 @@ CSSParserImpl::ParsePseudoClassWithIdent
     REPORT_UNEXPECTED_TOKEN(PEPseudoClassArgNotIdent);
     UngetToken();
     return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
   }
 
   // -moz-locale-dir and :dir can only have values of 'ltr' or 'rtl'.
   if (aType == nsCSSPseudoClasses::ePseudoClass_mozLocaleDir ||
       aType == nsCSSPseudoClasses::ePseudoClass_dir) {
+    nsContentUtils::ASCIIToLower(mToken.mIdent); // case insensitive
     if (!mToken.mIdent.EqualsLiteral("ltr") &&
         !mToken.mIdent.EqualsLiteral("rtl")) {
       REPORT_UNEXPECTED_TOKEN(PEBadDirValue);
       return eSelectorParsingStatus_Error; // our caller calls SkipUntil(')')
     }
   }
 
   // Add the pseudo with the language parameter
diff --git a/layout/style/test/test_selectors.html b/layout/style/test/test_selectors.html
--- a/layout/style/test/test_selectors.html
+++ b/layout/style/test/test_selectors.html
@@ -716,16 +716,37 @@ function run() {
     test_selector_in_html("html|a:not(*|*)", single_a, empty_set, set_single,
                           xul_default_ns + html_ns);
     test_selector_in_html("html|a:not(*|a)", single_a, empty_set, set_single,
                           xul_default_ns + html_ns);
 
     // Test -moz-locale-dir
     test_parseable(":-moz-locale-dir(ltr)");
     test_parseable(":-moz-locale-dir(rtl)");
+    test_parseable(":-moz-locale-dir(rTl)");
+    test_parseable(":-moz-locale-dir(LTR)");
+    if (document.body.mozMatchesSelector(":-moz-locale-dir(ltr)")) {
+        test_selector_in_html("a:-moz-locale-dir(LTr)", single_a,
+                              set_single, empty_set);
+        test_selector_in_html("a:-moz-locale-dir(ltR)", single_a,
+                              set_single, empty_set);
+        test_selector_in_html("a:-moz-locale-dir(LTR)", single_a,
+                              set_single, empty_set);
+        test_selector_in_html("a:-moz-locale-dir(RTl)", single_a,
+                              empty_set, set_single);
+    } else {
+        test_selector_in_html("a:-moz-locale-dir(RTl)", single_a,
+                              set_single, empty_set);
+        test_selector_in_html("a:-moz-locale-dir(rtL)", single_a,
+                              set_single, empty_set);
+        test_selector_in_html("a:-moz-locale-dir(RTL)", single_a,
+                              set_single, empty_set);
+        test_selector_in_html("a:-moz-locale-dir(LTr)", single_a,
+                              empty_set, set_single);
+    }
 
     test_balanced_unparseable(":-moz-locale-dir(other)");
     test_balanced_unparseable(":-moz-locale-dir()");
     test_balanced_unparseable(":-moz-locale-dir(())");
     test_balanced_unparseable(":-moz-locale-dir(3())");
     test_balanced_unparseable(":-moz-locale-dir(f{})");
     test_balanced_unparseable(":-moz-locale-dir('ltr')");
     test_balanced_unparseable(":-moz-locale-dir(ltr, other)");
