From: L. David Baron <dbaron@dbaron.org>

Add some helper functions for common CSS value to CSS value interpolations.  (Bug 531344)

diff --git a/layout/style/nsStyleAnimation.cpp b/layout/style/nsStyleAnimation.cpp
--- a/layout/style/nsStyleAnimation.cpp
+++ b/layout/style/nsStyleAnimation.cpp
@@ -473,16 +473,51 @@ inline PRUint8 ClampColor(double aColor)
 {
   if (aColor >= MAX_PACKED_COLOR_COMPONENT)
     return MAX_PACKED_COLOR_COMPONENT;
   if (aColor <= 0.0)
     return 0;
   return NSToIntRound(aColor);
 }
 
+static inline void
+AddCSSValuePixels(double aCoeff1, const nsCSSValue &aValue1,
+                  double aCoeff2, const nsCSSValue &aValue2,
+                  nsCSSValue &aResult)
+{
+  NS_ABORT_IF_FALSE(aValue1.GetUnit() == eCSSUnit_Pixel, "unexpected unit");
+  NS_ABORT_IF_FALSE(aValue2.GetUnit() == eCSSUnit_Pixel, "unexpected unit");
+  aResult.SetFloatValue(aCoeff1 * aValue1.GetFloatValue() +
+                        aCoeff2 * aValue2.GetFloatValue(),
+                        eCSSUnit_Pixel);
+}
+
+static inline void
+AddCSSValueNumber(double aCoeff1, const nsCSSValue &aValue1,
+                  double aCoeff2, const nsCSSValue &aValue2,
+                  nsCSSValue &aResult)
+{
+  NS_ABORT_IF_FALSE(aValue1.GetUnit() == eCSSUnit_Number, "unexpected unit");
+  NS_ABORT_IF_FALSE(aValue2.GetUnit() == eCSSUnit_Number, "unexpected unit");
+  aResult.SetFloatValue(aCoeff1 * aValue1.GetFloatValue() +
+                        aCoeff2 * aValue2.GetFloatValue(),
+                        eCSSUnit_Number);
+}
+
+static inline void
+AddCSSValuePercent(double aCoeff1, const nsCSSValue &aValue1,
+                   double aCoeff2, const nsCSSValue &aValue2,
+                   nsCSSValue &aResult)
+{
+  NS_ABORT_IF_FALSE(aValue1.GetUnit() == eCSSUnit_Percent, "unexpected unit");
+  NS_ABORT_IF_FALSE(aValue2.GetUnit() == eCSSUnit_Percent, "unexpected unit");
+  aResult.SetPercentValue(aCoeff1 * aValue1.GetPercentValue() +
+                          aCoeff2 * aValue2.GetPercentValue());
+}
+
 static PRBool
 AddShadowItems(double aCoeff1, const nsCSSValue &aValue1,
                double aCoeff2, const nsCSSValue &aValue2,
                nsCSSValueList **&aResultTail)
 {
   // X, Y, Radius, Spread, Color, Inset
   NS_ABORT_IF_FALSE(aValue1.GetUnit() == eCSSUnit_Array,
                     "wrong unit");
@@ -491,24 +526,18 @@ AddShadowItems(double aCoeff1, const nsC
   nsCSSValue::Array *array1 = aValue1.GetArrayValue();
   nsCSSValue::Array *array2 = aValue2.GetArrayValue();
   nsRefPtr<nsCSSValue::Array> resultArray = nsCSSValue::Array::Create(6);
   if (!resultArray) {
     return PR_FALSE;
   }
 
   for (PRUint32 i = 0; i < 4; ++i) {
-    NS_ABORT_IF_FALSE(array1->Item(i).GetUnit() == eCSSUnit_Pixel,
-                      "unexpected unit");
-    NS_ABORT_IF_FALSE(array2->Item(i).GetUnit() == eCSSUnit_Pixel,
-                      "unexpected unit");
-    double pixel1 = array1->Item(i).GetFloatValue();
-    double pixel2 = array2->Item(i).GetFloatValue();
-    resultArray->Item(i).SetFloatValue(aCoeff1 * pixel1 + aCoeff2 * pixel2,
-                                       eCSSUnit_Pixel);
+    AddCSSValuePixels(aCoeff1, array1->Item(i), aCoeff2, array2->Item(i),
+                       resultArray->Item(i));
   }
 
   const nsCSSValue& color1 = array1->Item(4);
   const nsCSSValue& color2 = array2->Item(4);
   const nsCSSValue& inset1 = array1->Item(5);
   const nsCSSValue& inset2 = array2->Item(5);
   if (color1.GetUnit() != color2.GetUnit() ||
       inset1.GetUnit() != inset2.GetUnit()) {
@@ -671,25 +700,23 @@ nsStyleAnimation::AddWeighted(nsCSSPrope
       };
       for (PRUint32 i = 0; i < NS_ARRAY_LENGTH(pairValues); ++i) {
         nsCSSValue nsCSSValuePair::*member = pairValues[i];
         NS_ABORT_IF_FALSE((pair1->*member).GetUnit() ==
                             (pair2->*member).GetUnit(),
                           "should have returned above");
         switch ((pair1->*member).GetUnit()) {
           case eCSSUnit_Pixel:
-            (result->*member).SetFloatValue(
-              aCoeff1 * (pair1->*member).GetFloatValue() +
-              aCoeff2 * (pair2->*member).GetFloatValue(),
-              eCSSUnit_Pixel);
+            AddCSSValuePixels(aCoeff1, pair1->*member, aCoeff2, pair2->*member,
+                              result->*member);
             break;
           case eCSSUnit_Percent:
-            (result->*member).SetPercentValue(
-              aCoeff1 * (pair1->*member).GetPercentValue() +
-              aCoeff2 * (pair2->*member).GetPercentValue());
+            AddCSSValuePercent(aCoeff1, pair1->*member,
+                               aCoeff2, pair2->*member,
+                               result->*member);
             break;
           default:
             NS_ABORT_IF_FALSE(PR_FALSE, "unexpected unit");
             return PR_FALSE;
         }
       }
 
       aResultValue.SetAndAdoptCSSValuePairValue(result.forget(),
@@ -713,20 +740,18 @@ nsStyleAnimation::AddWeighted(nsCSSPrope
       }
       for (PRUint32 i = 0; i < NS_ARRAY_LENGTH(nsCSSRect::sides); ++i) {
         nsCSSValue nsCSSRect::*member = nsCSSRect::sides[i];
         NS_ABORT_IF_FALSE((rect1->*member).GetUnit() ==
                             (rect2->*member).GetUnit(),
                           "should have returned above");
         switch ((rect1->*member).GetUnit()) {
           case eCSSUnit_Pixel:
-            (result->*member).SetFloatValue(
-              aCoeff1 * (rect1->*member).GetFloatValue() +
-              aCoeff2 * (rect2->*member).GetFloatValue(),
-              eCSSUnit_Pixel);
+            AddCSSValuePixels(aCoeff1, rect1->*member, aCoeff2, rect2->*member,
+                              result->*member);
             break;
           case eCSSUnit_Auto:
             if (float(aCoeff1 + aCoeff2) != 1.0f) {
               // Interpolating between two auto values makes sense;
               // adding in other ratios does not.
               return PR_FALSE;
             }
             (result->*member).SetAutoValue();
@@ -782,23 +807,19 @@ nsStyleAnimation::AddWeighted(nsCSSPrope
         nsCSSValueList *item = new nsCSSValueList;
         if (!item) {
           return PR_FALSE;
         }
         *resultTail = item;
         resultTail = &item->mNext;
 
         if (v1.GetUnit() == eCSSUnit_Number) {
-          item->mValue.SetFloatValue(aCoeff1 * v1.GetFloatValue() +
-                                     aCoeff2 * v2.GetFloatValue(),
-                                     eCSSUnit_Number);
+          AddCSSValueNumber(aCoeff1, v1, aCoeff2, v2, item->mValue);
         } else {
-          NS_ABORT_IF_FALSE(v1.GetUnit() == eCSSUnit_Percent, "unexpected");
-          item->mValue.SetPercentValue(aCoeff1 * v1.GetPercentValue() +
-                                       aCoeff2 * v2.GetPercentValue());
+          AddCSSValuePercent(aCoeff1, v1, aCoeff2, v2, item->mValue);
         }
 
         list1 = list1->mNext;
         if (!list1) {
           list1 = aValue1.GetCSSValueListValue();
         }
         list2 = list2->mNext;
         if (!list2) {
@@ -878,23 +899,20 @@ nsStyleAnimation::AddWeighted(nsCSSPrope
           const nsCSSValue &v2 = list2->*(pairListValues[i]);
           nsCSSValue &vr = item->*(pairListValues[i]);
           if (v1.GetUnit() != v2.GetUnit()) {
             success = PR_FALSE;
             break; // to failure case
           }
           switch (v1.GetUnit()) {
             case eCSSUnit_Pixel:
-              vr.SetFloatValue(aCoeff1 * v1.GetFloatValue() +
-                               aCoeff2 * v2.GetFloatValue(),
-                               eCSSUnit_Pixel);
+              AddCSSValuePixel(aCoeff1, v1, aCoeff2, v2, vr);
               break;
             case eCSSUnit_Percent:
-              vr.SetPercentValue(aCoeff1 * v1.GetPercentValue() +
-                                 aCoeff2 * v2.GetPercentValue());
+              AddCSSValuePercent(aCoeff1, v1, aCoeff2, v2, vr);
               break;
             default:
               if (v1 == v2) {
                 vr = v1;
               } else {
                 success = PR_FALSE;
               }
               break;
