From: Zack Weinberg <zweinberg@mozilla.com>

Paint different backgrounds behind the reftest test and references to detect areas that are not painted at all.  (Bug 454349)  (NEEDS ONE MORE REVIEW COMMENT ADDRESSED)

diff --git a/layout/tools/reftest/reftest.js b/layout/tools/reftest/reftest.js
--- a/layout/tools/reftest/reftest.js
+++ b/layout/tools/reftest/reftest.js
@@ -464,38 +464,60 @@ function DocumentLoaded()
 
     if (gURLs[0].expected == EXPECTED_LOAD) {
         dump("REFTEST TEST-PASS | " + gURLs[0].prettyPath + " | (LOAD ONLY)\n");
         gURLs.shift();
         StartCurrentTest();
         return;
     }
 
+    // To catch cases  where page rendering doesn't paint opaque color
+    // over the entire viewport (e.g. bug 453566), we avoid having
+    // drawWindow erase the requested rectangle before rendering.
+    // Instead, we manually erase the canvas to white, then fill the
+    // bounding box reported by the document's root with different
+    // colors for test and reference.
+    //
+    // We can't just fill the canvas with different colors for the
+    // test and reference, because the viewport can be smaller than
+    // the rectangle requested in the drawWindow call; the bounding
+    // box reported by the document root is the closest approximation
+    // to the viewport rectangle that's available in the DOM.
+    //
+    // drawWindow always draws one canvas pixel for each CSS pixel in
+    // the source window, so we scale the drawing to show the zoom
+    // (making each canvas pixel be one device pixel instead)
+
     var canvas;
+    var bgcolor;
 
-    if (gState == 1)
+    if (gState == 1) {
         canvas = gCanvas1;
-    else
+        bgcolor = "rgb(255,0,123)";
+    } else {
         canvas = gCanvas2;
+        bgcolor = "rgb(255,74,0)";
+    }
 
-    /* XXX This needs to be rgb(255,255,255) because otherwise we get
-     * black bars at the bottom of every test that are different size
-     * for the first test and the rest (scrollbar-related??) */
     var win = gBrowser.contentWindow;
+    var scale = gBrowser.markupDocumentViewer.fullZoom;
+    var bbox = gBrowser.contentDocument.documentElement.getBoundingClientRect();
+
     var ctx = canvas.getContext("2d");
-    var scale = gBrowser.markupDocumentViewer.fullZoom;
     ctx.save();
-    // drawWindow always draws one canvas pixel for each CSS pixel in the source
-    // window, so scale the drawing to show the zoom (making each canvas pixel be one
-    // device pixel instead)
+
+    ctx.fillStyle = "white";
+    ctx.fillRect(0, 0, canvas.width, canvas.height);
     ctx.scale(scale, scale);
+    ctx.fillStyle = bgcolor;
+    ctx.fillRect(bbox.top, bbox.left, bbox.width, bbox.height);
     ctx.drawWindow(win, win.scrollX, win.scrollY,
-                   canvas.width, canvas.height, "rgb(255,255,255)");
+                   canvas.width, canvas.height, "rgba(0,0,0,0)");
+
     ctx.restore();
-
     resetZoom();
 
     switch (gState) {
         case 1:
             // First document has been loaded.
             // Proceed to load the second document.
 
             StartCurrentURI(2);
