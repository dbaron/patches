From: L. David Baron <dbaron@dbaron.org>
Bug 1089417 patch 4 - Check HasRules() before invalidating the rule processor just like we check it before recomputing style in the same cases.

diff --git a/layout/style/nsStyleSet.cpp b/layout/style/nsStyleSet.cpp
--- a/layout/style/nsStyleSet.cpp
+++ b/layout/style/nsStyleSet.cpp
@@ -485,40 +485,59 @@ nsStyleSet::AppendStyleSheet(sheetType a
 {
   NS_PRECONDITION(aSheet, "null arg");
   NS_ASSERTION(aSheet->IsApplicable(),
                "Inapplicable sheet being placed in style set");
   mSheets[aType].RemoveObject(aSheet);
   if (!mSheets[aType].AppendObject(aSheet))
     return NS_ERROR_OUT_OF_MEMORY;
 
+  if (!aSheet->HasRules()) {
+    // It's important not to call DirtyRuleProcessors if the caller
+    // isn't going to rebuild style, since we don't want to be without a
+    // current rule processor for an extended period of time.  If that
+    // happens, we might fail to respond to media query changes.
+    return NS_OK;
+  }
+
   return DirtyRuleProcessors(aType);
 }
 
 nsresult
 nsStyleSet::PrependStyleSheet(sheetType aType, nsIStyleSheet *aSheet)
 {
   NS_PRECONDITION(aSheet, "null arg");
   NS_ASSERTION(aSheet->IsApplicable(),
                "Inapplicable sheet being placed in style set");
   mSheets[aType].RemoveObject(aSheet);
   if (!mSheets[aType].InsertObjectAt(aSheet, 0))
     return NS_ERROR_OUT_OF_MEMORY;
 
+  if (!aSheet->HasRules()) {
+    // See above, in AppendStyleSheet.
+    return NS_OK;
+  }
+
   return DirtyRuleProcessors(aType);
 }
 
 nsresult
 nsStyleSet::RemoveStyleSheet(sheetType aType, nsIStyleSheet *aSheet)
 {
   NS_PRECONDITION(aSheet, "null arg");
   NS_ASSERTION(aSheet->IsComplete(),
                "Incomplete sheet being removed from style set");
+  bool hasRules = aSheet->HasRules();
   mSheets[aType].RemoveObject(aSheet);
 
+  if (!hasRules) {
+    // See above, in AppendStyleSheet.
+    return NS_OK;
+  }
+
   return DirtyRuleProcessors(aType);
 }
 
 nsresult
 nsStyleSet::ReplaceSheets(sheetType aType,
                           const nsCOMArray<nsIStyleSheet> &aNewSheets)
 {
   mSheets[aType].Clear();
@@ -539,16 +558,21 @@ nsStyleSet::InsertStyleSheetBefore(sheet
   mSheets[aType].RemoveObject(aNewSheet);
   int32_t idx = mSheets[aType].IndexOf(aReferenceSheet);
   if (idx < 0)
     return NS_ERROR_INVALID_ARG;
 
   if (!mSheets[aType].InsertObjectAt(aNewSheet, idx))
     return NS_ERROR_OUT_OF_MEMORY;
 
+  if (!aSheet->HasRules()) {
+    // See above, in AppendStyleSheet.
+    return NS_OK;
+  }
+
   return DirtyRuleProcessors(aType);
 }
 
 nsresult
 nsStyleSet::DirtyRuleProcessors(sheetType aType)
 {
   if (!mBatching)
     return GatherRuleProcessors(aType);
@@ -613,16 +637,21 @@ nsStyleSet::AddDocStyleSheet(nsIStyleShe
         ((sheetService &&
         sheetService->AuthorStyleSheets()->IndexOf(sheet) >= 0) ||
         sheet == aDocument->FirstAdditionalAuthorSheet()))
         break;
   }
   if (!sheets.InsertObjectAt(aSheet, index))
     return NS_ERROR_OUT_OF_MEMORY;
 
+  if (!aSheet->HasRules()) {
+    // See above, in AppendStyleSheet.
+    return NS_OK;
+  }
+
   return DirtyRuleProcessors(type);
 }
 
 nsresult
 nsStyleSet::RemoveDocStyleSheet(nsIStyleSheet *aSheet)
 {
   nsRefPtr<CSSStyleSheet> cssSheet = do_QueryObject(aSheet);
   bool isScoped = cssSheet && cssSheet->GetScopeElement();
diff --git a/layout/style/test/test_bug1089417.html b/layout/style/test/test_bug1089417.html
--- a/layout/style/test/test_bug1089417.html
+++ b/layout/style/test/test_bug1089417.html
@@ -16,17 +16,17 @@ https://bugzilla.mozilla.org/show_bug.cg
 
   function run() {
     var f = document.getElementById("f");
     var fwin = f.contentWindow;
     var fdoc = f.contentDocument;
 
     f.height = "400";
     fdoc.getElementById("s").disabled = false;
-    todo(fwin.getComputedStyle(fdoc.documentElement).backgroundColor,
+    is(fwin.getComputedStyle(fdoc.documentElement).backgroundColor,
        "rgb(0, 128, 0)",
        "media query change should have restyled");
     SimpleTest.finish();
   }
 
   </script>
 </head>
 <body onload="run()">
