Allow PostRebuildAllStyleData to be called with an aExtraHint.  (Bug 458878)

diff --git a/content/mathml/content/src/nsMathMLElement.cpp b/content/mathml/content/src/nsMathMLElement.cpp
--- a/content/mathml/content/src/nsMathMLElement.cpp
+++ b/content/mathml/content/src/nsMathMLElement.cpp
@@ -91,17 +91,17 @@ nsMathMLElement::BindToTree(nsIDocument*
     // optimizations may have taken place assuming MathML was disabled.
     // (See nsRuleNode::CheckSpecifiedProperties.)
     // nsPresShellIterator skips hidden presshells, but that's OK because
     // if we're changing the document for one of those presshells the whole
     // presshell will be torn down.
     nsPresShellIterator iter(aDocument);
     nsCOMPtr<nsIPresShell> shell;
     while ((shell = iter.GetNextShell()) != nsnull) {
-      shell->GetPresContext()->PostRebuildAllStyleDataEvent();
+      shell->GetPresContext()->PostRebuildAllStyleDataEvent(nsChangeHint(0));
     }
   }
 
   return rv;
 }
 
 PRBool
 nsMathMLElement::ParseAttribute(PRInt32 aNamespaceID,
diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -13442,21 +13442,21 @@ nsCSSFrameConstructor::PostRestyleEvent(
       // XXXbz and what?
     } else {
       mRestyleEvent = ev;
     }
   }
 }
 
 void
-nsCSSFrameConstructor::PostRebuildAllStyleDataEvent()
+nsCSSFrameConstructor::PostRebuildAllStyleDataEvent(nsChangeHint aExtraHint)
 {
   mRebuildAllStyleData = PR_TRUE;
   // Get a restyle event posted if necessary
-  mPresShell->ReconstructStyleDataInternal();
+  mPresShell->ReconstructStyleDataInternal(aExtraHint);
 }
 
 NS_IMETHODIMP nsCSSFrameConstructor::RestyleEvent::Run()
 {
   if (!mConstructor)
     return NS_OK;  // event was revoked
 
   // Make sure that any restyles that happen from now on will go into
diff --git a/layout/base/nsCSSFrameConstructor.h b/layout/base/nsCSSFrameConstructor.h
--- a/layout/base/nsCSSFrameConstructor.h
+++ b/layout/base/nsCSSFrameConstructor.h
@@ -211,17 +211,17 @@ public:
    * it will all be rebuilt. This is safe to call anytime; it will schedule
    * a restyle and take effect next time style changes are flushed.
    * This method is used to recompute the style data when some change happens
    * outside of any style rules, like a color preference change or a change
    * in a system font size, or to fix things up when an optimization in the
    * style data has become invalid. We assume that the root frame will not
    * need to be reframed.
    */
-  void PostRebuildAllStyleDataEvent();
+  void PostRebuildAllStyleDataEvent(nsChangeHint aExtraHint);
 
   // Request to create a continuing frame
   nsresult CreateContinuingFrame(nsPresContext* aPresContext,
                                  nsIFrame*       aFrame,
                                  nsIFrame*       aParentFrame,
                                  nsIFrame**      aContinuingFrame,
                                  PRBool          aIsFluid = PR_TRUE);
 
diff --git a/layout/base/nsIPresShell.h b/layout/base/nsIPresShell.h
--- a/layout/base/nsIPresShell.h
+++ b/layout/base/nsIPresShell.h
@@ -58,16 +58,17 @@
 #include "nsCoord.h"
 #include "nsRect.h"
 #include "nsColor.h"
 #include "nsEvent.h"
 #include "nsCompatibility.h"
 #include "nsFrameManagerBase.h"
 #include "mozFlushType.h"
 #include "nsWeakReference.h"
+#include "nsChangeHint.h"
 #include <stdio.h> // for FILE definition
 
 class nsIAtom;
 class nsIContent;
 class nsIContentIterator;
 class nsIDocument;
 class nsIDocumentObserver;
 class nsIFrame;
@@ -227,17 +228,18 @@ public:
    * all of the frames.  This will not reconstruct style synchronously; if
    * you need to do that, call FlushPendingNotifications to flush out style
    * reresolves.
    * // XXXbz why do we have this on the interface anyway?  The only consumer
    * is calling AddOverrideStyleSheet/RemoveOverrideStyleSheet, and I think
    * those should just handle reconstructing style data...
    */
   virtual NS_HIDDEN_(void) ReconstructStyleDataExternal();
-  NS_HIDDEN_(void) ReconstructStyleDataInternal();
+  NS_HIDDEN_(void) ReconstructStyleDataInternal(nsChangeHint aExtraHint
+                                                  = nsChangeHint(0));
 #ifdef _IMPL_NS_LAYOUT
   void ReconstructStyleData() { ReconstructStyleDataInternal(); }
 #else
   void ReconstructStyleData() { ReconstructStyleDataExternal(); }
 #endif
 
   /** Setup all style rules required to implement preferences
    * - used for background/text/link colors and link underlining
diff --git a/layout/base/nsPresContext.cpp b/layout/base/nsPresContext.cpp
--- a/layout/base/nsPresContext.cpp
+++ b/layout/base/nsPresContext.cpp
@@ -1459,23 +1459,23 @@ nsPresContext::RebuildAllStyleData(nsCha
   }
 
   RebuildUserFontSet();
 
   mShell->FrameConstructor()->RebuildAllStyleData(aExtraHint);
 }
 
 void
-nsPresContext::PostRebuildAllStyleDataEvent()
+nsPresContext::PostRebuildAllStyleDataEvent(nsChangeHint aExtraHint)
 {
   if (!mShell) {
     // We must have been torn down. Nothing to do here.
     return;
   }
-  mShell->FrameConstructor()->PostRebuildAllStyleDataEvent();
+  mShell->FrameConstructor()->PostRebuildAllStyleDataEvent(aExtraHint);
 }
 
 void
 nsPresContext::MediaFeatureValuesChanged(PRBool aCallerWillRebuildStyleData)
 {
   mPendingMediaFeatureValuesChanged = PR_FALSE;
   if (mShell->StyleSet()->MediumFeaturesChanged(this) &&
       !aCallerWillRebuildStyleData) {
diff --git a/layout/base/nsPresContext.h b/layout/base/nsPresContext.h
--- a/layout/base/nsPresContext.h
+++ b/layout/base/nsPresContext.h
@@ -210,17 +210,17 @@ public:
 #ifdef _IMPL_NS_LAYOUT
   nsStyleSet* StyleSet() { return GetPresShell()->StyleSet(); }
 
   nsFrameManager* FrameManager()
     { return GetPresShell()->FrameManager(); } 
 #endif
 
   void RebuildAllStyleData(nsChangeHint aExtraHint);
-  void PostRebuildAllStyleDataEvent();
+  void PostRebuildAllStyleDataEvent(nsChangeHint aExtraHint);
 
   void MediaFeatureValuesChanged(PRBool aCallerWillRebuildStyleData);
   void PostMediaFeatureValuesChangedEvent();
   NS_HIDDEN_(void) HandleMediaFeatureValuesChangedEvent();
   void FlushPendingMediaFeatureValuesChanged() {
     if (mPendingMediaFeatureValuesChanged)
       MediaFeatureValuesChanged(PR_FALSE);
   }
diff --git a/layout/base/nsPresShell.cpp b/layout/base/nsPresShell.cpp
--- a/layout/base/nsPresShell.cpp
+++ b/layout/base/nsPresShell.cpp
@@ -4790,17 +4790,17 @@ PresShell::ReconstructFrames(void)
   nsresult rv = mFrameConstructor->ReconstructDocElementHierarchy();
   VERIFY_STYLE_TREE;
   mFrameConstructor->EndUpdate();
 
   return rv;
 }
 
 void
-nsIPresShell::ReconstructStyleDataInternal()
+nsIPresShell::ReconstructStyleDataInternal(nsChangeHint aExtraHint)
 {
   mStylesHaveChanged = PR_FALSE;
 
   if (mIsDestroying) {
     // We don't want to mess with restyles at this point
     return;
   }
 
@@ -4814,17 +4814,17 @@ nsIPresShell::ReconstructStyleDataIntern
     return;
   }
 
   if (!root) {
     // No content to restyle
     return;
   }
   
-  mFrameConstructor->PostRestyleEvent(root, eReStyle_Self, NS_STYLE_HINT_NONE);
+  mFrameConstructor->PostRestyleEvent(root, eReStyle_Self, aExtraHint);
 
 #ifdef ACCESSIBILITY
   InvalidateAccessibleSubtree(nsnull);
 #endif
 }
 
 void
 nsIPresShell::ReconstructStyleDataExternal()
