From: Craig Topper <craig.topper@gmail.com>

Change some nsIStyleSheet methods from returning AddRef-ed to un-AddRef-ed pointers, and some other cleanup.  (Bug 239008)  r=dbaron

diff --git a/content/base/src/nsDocument.cpp b/content/base/src/nsDocument.cpp
--- a/content/base/src/nsDocument.cpp
+++ b/content/base/src/nsDocument.cpp
@@ -2017,40 +2017,40 @@ nsDocument::ResetStylesheetsToURI(nsIURI
   nsresult rv;
   nsStyleSet::sheetType attrSheetType = GetAttrSheetType();
   if (mAttrStyleSheet) {
     // Remove this sheet from all style sets
     nsCOMPtr<nsIPresShell> shell = GetPrimaryShell();
     if (shell) {
       shell->StyleSet()->RemoveStyleSheet(attrSheetType, mAttrStyleSheet);
     }
-    rv = mAttrStyleSheet->Reset(aURI);
+    mAttrStyleSheet->Reset(aURI);
   } else {
     rv = NS_NewHTMLStyleSheet(getter_AddRefs(mAttrStyleSheet), aURI, this);
-  }
-  NS_ENSURE_SUCCESS(rv, rv);
+    NS_ENSURE_SUCCESS(rv, rv);
+  }
 
   // Don't use AddStyleSheet, since it'll put the sheet into style
   // sets in the document level, which is not desirable here.
   mAttrStyleSheet->SetOwningDocument(this);
   
   if (mStyleAttrStyleSheet) {
     // Remove this sheet from all style sets
     nsCOMPtr<nsIPresShell> shell = GetPrimaryShell();
     if (shell) {
       shell->StyleSet()->
         RemoveStyleSheet(nsStyleSet::eStyleAttrSheet, mStyleAttrStyleSheet);
     }
-    rv = mStyleAttrStyleSheet->Reset(aURI);
+    mStyleAttrStyleSheet->Reset(aURI);
   } else {
     mStyleAttrStyleSheet = new nsHTMLCSSStyleSheet();
     NS_ENSURE_TRUE(mStyleAttrStyleSheet, NS_ERROR_OUT_OF_MEMORY);
     rv = mStyleAttrStyleSheet->Init(aURI, this);
-  }
-  NS_ENSURE_SUCCESS(rv, rv);
+    NS_ENSURE_SUCCESS(rv, rv);
+  }
 
   // The loop over style sets below will handle putting this sheet
   // into style sets as needed.
   mStyleAttrStyleSheet->SetOwningDocument(this);
 
   // Now set up our style sets
   nsCOMPtr<nsIPresShell> shell = GetPrimaryShell();
   if (shell) {
diff --git a/layout/style/nsCSSRule.cpp b/layout/style/nsCSSRule.cpp
--- a/layout/style/nsCSSRule.cpp
+++ b/layout/style/nsCSSRule.cpp
@@ -37,25 +37,23 @@
 
 /* base class for all rule types in a CSS style sheet */
 
 #include "nsCSSRule.h"
 #include "nsCRT.h"
 #include "nsCSSStyleSheet.h"
 
 nsCSSRule::nsCSSRule(void)
-  : mRefCnt(0),
-    mSheet(nsnull),
+  : mSheet(nsnull),
     mParentRule(nsnull)
 {
 }
 
 nsCSSRule::nsCSSRule(const nsCSSRule& aCopy)
-  : mRefCnt(0),
-    mSheet(aCopy.mSheet),
+  : mSheet(aCopy.mSheet),
     mParentRule(aCopy.mParentRule)
 {
 }
 
 
 nsCSSRule::~nsCSSRule(void)
 {
 }
diff --git a/layout/style/nsCSSStyleRule.cpp b/layout/style/nsCSSStyleRule.cpp
--- a/layout/style/nsCSSStyleRule.cpp
+++ b/layout/style/nsCSSStyleRule.cpp
@@ -1077,18 +1077,18 @@ DOMCSSDeclarationImpl::GetCSSParsingEnvi
   *aBaseURI = nsnull;
   *aSheetPrincipal = nsnull;
   *aCSSLoader = nsnull;
 
   nsCOMPtr<nsIStyleSheet> sheet;
   if (mRule) {
     mRule->GetStyleSheet(*getter_AddRefs(sheet));
     if (sheet) {
-      *aSheetURI = sheet->GetSheetURI().get();
-      *aBaseURI = sheet->GetBaseURI().get();
+      NS_IF_ADDREF(*aSheetURI = sheet->GetSheetURI());
+      NS_IF_ADDREF(*aBaseURI = sheet->GetBaseURI());
 
       nsRefPtr<nsCSSStyleSheet> cssSheet(do_QueryObject(sheet));
       if (cssSheet) {
         NS_ADDREF(*aSheetPrincipal = cssSheet->Principal());
       }
 
       nsCOMPtr<nsIDocument> document = sheet->GetOwningDocument();
       if (document) {
diff --git a/layout/style/nsCSSStyleSheet.cpp b/layout/style/nsCSSStyleSheet.cpp
--- a/layout/style/nsCSSStyleSheet.cpp
+++ b/layout/style/nsCSSStyleSheet.cpp
@@ -965,19 +965,17 @@ nsCSSStyleSheetInner::CreateNamespaceMap
   return NS_OK;
 }
 
 // -------------------------------
 // CSS Style Sheet
 //
 
 nsCSSStyleSheet::nsCSSStyleSheet()
-  : mRefCnt(0),
-    mTitle(), 
-    mMedia(nsnull),
+  : mTitle(), 
     mParent(nsnull),
     mOwnerRule(nsnull),
     mRuleCollection(nsnull),
     mDocument(nsnull),
     mOwningNode(nsnull),
     mDisabled(PR_FALSE),
     mDirty(PR_FALSE),
     mRuleProcessors(nsnull)
@@ -986,19 +984,17 @@ nsCSSStyleSheet::nsCSSStyleSheet()
   mInner = new nsCSSStyleSheetInner(this);
 }
 
 nsCSSStyleSheet::nsCSSStyleSheet(const nsCSSStyleSheet& aCopy,
                                  nsCSSStyleSheet* aParentToUse,
                                  nsICSSImportRule* aOwnerRuleToUse,
                                  nsIDocument* aDocumentToUse,
                                  nsIDOMNode* aOwningNodeToUse)
-  : mRefCnt(0),
-    mTitle(aCopy.mTitle), 
-    mMedia(nsnull),
+  : mTitle(aCopy.mTitle),
     mParent(aParentToUse),
     mOwnerRule(aOwnerRuleToUse),
     mRuleCollection(nsnull), // re-created lazily
     mDocument(aDocumentToUse),
     mOwningNode(aOwningNodeToUse),
     mDisabled(aCopy.mDisabled),
     mDirty(PR_FALSE),
     mInner(aCopy.mInner),
@@ -1119,36 +1115,26 @@ nsCSSStyleSheet::SetPrincipal(nsIPrincip
   if (aPrincipal) {
     mInner->mPrincipal = aPrincipal;
 #ifdef DEBUG
     mInner->mPrincipalSet = PR_TRUE;
 #endif
   }
 }
 
-nsIPrincipal*
-nsCSSStyleSheet::Principal() const
+/* virtual */ nsIURI*
+nsCSSStyleSheet::GetSheetURI() const
 {
-  return mInner->mPrincipal;
+  return mInner->mSheetURI;
 }
 
-/* virtual */ already_AddRefed<nsIURI>
-nsCSSStyleSheet::GetSheetURI() const
-{
-  nsIURI* sheetURI = mInner->mSheetURI;
-  NS_IF_ADDREF(sheetURI);
-  return sheetURI;
-}
-
-/* virtual */ already_AddRefed<nsIURI>
+/* virtual */ nsIURI*
 nsCSSStyleSheet::GetBaseURI() const
 {
-  nsIURI* baseURI = mInner->mBaseURI;
-  NS_IF_ADDREF(baseURI);
-  return baseURI;
+  return mInner->mBaseURI;
 }
 
 /* virtual */ void
 nsCSSStyleSheet::GetType(nsString& aType) const
 {
   aType.AssignLiteral("text/css");
 }
 
@@ -1211,27 +1197,25 @@ nsCSSStyleSheet::SetComplete()
   if (mDocument && !mDisabled) {
     // Let the document know
     mDocument->BeginUpdate(UPDATE_STYLE);
     mDocument->SetStyleSheetApplicableState(this, PR_TRUE);
     mDocument->EndUpdate(UPDATE_STYLE);
   }
 }
 
-/* virtual */ already_AddRefed<nsIStyleSheet>
+/* virtual */ nsIStyleSheet*
 nsCSSStyleSheet::GetParentSheet() const
 {
-  NS_IF_ADDREF(mParent);
   return mParent;
 }
 
-/* virtual */ already_AddRefed<nsIDocument>
+/* virtual */ nsIDocument*
 nsCSSStyleSheet::GetOwningDocument() const
 {
-  NS_IF_ADDREF(mDocument);
   return mDocument;
 }
 
 /* virtual */ void
 nsCSSStyleSheet::SetOwningDocument(nsIDocument* aDocument)
 { // not ref counted
   mDocument = aDocument;
   // Now set the same document on all our child sheets....
@@ -1240,23 +1224,16 @@ nsCSSStyleSheet::SetOwningDocument(nsIDo
   for (nsCSSStyleSheet* child = mInner->mFirstChild;
        child; child = child->mNext) {
     if (child->mParent == this) {
       child->SetOwningDocument(aDocument);
     }
   }
 }
 
-already_AddRefed<nsICSSImportRule>
-nsCSSStyleSheet::GetOwnerRule() const
-{
-  NS_IF_ADDREF(mOwnerRule);
-  return mOwnerRule;
-}
-
 void
 nsCSSStyleSheet::AppendStyleSheet(nsCSSStyleSheet* aSheet)
 {
   NS_PRECONDITION(nsnull != aSheet, "null arg");
 
   if (NS_SUCCEEDED(WillDirty())) {
     nsRefPtr<nsCSSStyleSheet>* tail = &mInner->mFirstChild;
     while (*tail) {
@@ -1375,22 +1352,16 @@ nsCSSStyleSheet::GetStyleRuleAt(PRInt32 
   if (aRule) {
     NS_ADDREF(aRule);
     return NS_OK;
   }
 
   return NS_ERROR_ILLEGAL_VALUE;
 }
 
-nsXMLNameSpaceMap*
-nsCSSStyleSheet::GetNameSpaceMap() const
-{
-  return mInner->mNameSpaceMap;
-}
-
 PRInt32
 nsCSSStyleSheet::StyleSheetCount() const
 {
   // XXX Far from an ideal way to do this, but the hope is that
   // it won't be done too often. If it is, we might want to 
   // consider storing the children in an array.
   PRInt32 count = 0;
 
@@ -1398,29 +1369,28 @@ nsCSSStyleSheet::StyleSheetCount() const
   while (child) {
     count++;
     child = child->mNext;
   }
 
   return count;
 }
 
-already_AddRefed<nsCSSStyleSheet>
+nsCSSStyleSheet*
 nsCSSStyleSheet::GetStyleSheetAt(PRInt32 aIndex) const
 {
   // XXX Ughh...an O(n^2) method for doing iteration. Again, we hope
   // that this isn't done too often. If it is, we need to change the
   // underlying storage mechanism
   nsCSSStyleSheet* child = mInner->mFirstChild;
   while (child && (0 != aIndex)) {
     --aIndex;
     child = child->mNext;
   }
 
-  NS_IF_ADDREF(child);
   return child;
 }
 
 nsCSSStyleSheet::EnsureUniqueInnerResult
 nsCSSStyleSheet::EnsureUniqueInner()
 {
   NS_ABORT_IF_FALSE(mInner->mSheets.Length() != 0,
                     "unexpected number of outers");
@@ -1650,17 +1620,17 @@ nsCSSStyleSheet::GetHref(nsAString& aHre
     CopyUTF8toUTF16(str, aHref);
   } else {
     SetDOMStringToNull(aHref);
   }
 
   return NS_OK;
 }
 
-void
+/* virtual */ void
 nsCSSStyleSheet::GetTitle(nsString& aTitle) const
 {
   aTitle = mTitle;
 }
 
 NS_IMETHODIMP
 nsCSSStyleSheet::GetTitle(nsAString& aTitle)
 {
diff --git a/layout/style/nsCSSStyleSheet.h b/layout/style/nsCSSStyleSheet.h
--- a/layout/style/nsCSSStyleSheet.h
+++ b/layout/style/nsCSSStyleSheet.h
@@ -114,45 +114,45 @@ private:
 // -------------------------------
 // CSS Style Sheet
 //
 
 class CSSRuleListImpl;
 struct ChildSheetListBuilder;
 
 // CID for the nsCSSStyleSheet class
-// 55f243d9-d985-490c-9eea-095c7fa35cf4
+// ca926f30-2a7e-477e-8467-803fb32af20a
 #define NS_CSS_STYLE_SHEET_IMPL_CID     \
-{ 0x55f243d9, 0xd985, 0x490c, \
- { 0x9e, 0xea, 0x09, 0x5c, 0x7f, 0xa3, 0x5c, 0xf4 } }
+{ 0xca926f30, 0x2a7e, 0x477e, \
+ { 0x84, 0x67, 0x80, 0x3f, 0xb3, 0x2a, 0xf2, 0x0a } }
 
 
 class NS_FINAL_CLASS nsCSSStyleSheet : public nsIStyleSheet,
                                        public nsIDOMCSSStyleSheet,
                                        public nsICSSLoaderObserver
 {
 public:
   nsCSSStyleSheet();
 
   NS_DECL_ISUPPORTS
 
   NS_DECLARE_STATIC_IID_ACCESSOR(NS_CSS_STYLE_SHEET_IMPL_CID)
 
   // nsIStyleSheet interface
-  virtual already_AddRefed<nsIURI> GetSheetURI() const;
-  virtual already_AddRefed<nsIURI> GetBaseURI() const;
+  virtual nsIURI* GetSheetURI() const;
+  virtual nsIURI* GetBaseURI() const;
   virtual void GetTitle(nsString& aTitle) const;
   virtual void GetType(nsString& aType) const;
   virtual PRBool HasRules() const;
   virtual PRBool IsApplicable() const;
   virtual void SetEnabled(PRBool aEnabled);
   virtual PRBool IsComplete() const;
   virtual void SetComplete();
-  virtual already_AddRefed<nsIStyleSheet> GetParentSheet() const;  // may be null
-  virtual already_AddRefed<nsIDocument> GetOwningDocument() const;  // may be null
+  virtual nsIStyleSheet* GetParentSheet() const;  // may be null
+  virtual nsIDocument* GetOwningDocument() const;  // may be null
   virtual void SetOwningDocument(nsIDocument* aDocument);
 #ifdef DEBUG
   virtual void List(FILE* out = stdout, PRInt32 aIndent = 0) const;
 #endif
 
   void AppendStyleSheet(nsCSSStyleSheet* aSheet);
   void InsertStyleSheetAt(nsCSSStyleSheet* aSheet, PRInt32 aIndex);
 
@@ -164,43 +164,43 @@ public:
   PRInt32 StyleRuleCount() const;
   nsresult GetStyleRuleAt(PRInt32 aIndex, nsICSSRule*& aRule) const;
 
   nsresult DeleteRuleFromGroup(nsICSSGroupRule* aGroup, PRUint32 aIndex);
   nsresult InsertRuleIntoGroup(const nsAString& aRule, nsICSSGroupRule* aGroup, PRUint32 aIndex, PRUint32* _retval);
   nsresult ReplaceRuleInGroup(nsICSSGroupRule* aGroup, nsICSSRule* aOld, nsICSSRule* aNew);
 
   PRInt32 StyleSheetCount() const;
-  already_AddRefed<nsCSSStyleSheet> GetStyleSheetAt(PRInt32 aIndex) const;
+  nsCSSStyleSheet* GetStyleSheetAt(PRInt32 aIndex) const;
 
   /**
    * SetURIs must be called on all sheets before parsing into them.
    * SetURIs may only be called while the sheet is 1) incomplete and 2)
    * has no rules in it
    */
   void SetURIs(nsIURI* aSheetURI, nsIURI* aOriginalSheetURI, nsIURI* aBaseURI);
 
   /**
    * SetPrincipal should be called on all sheets before parsing into them.
    * This can only be called once with a non-null principal.  Calling this with
    * a null pointer is allowed and is treated as a no-op.
    */
   void SetPrincipal(nsIPrincipal* aPrincipal);
 
   // Principal() never returns a null pointer.
-  nsIPrincipal* Principal() const;
+  nsIPrincipal* Principal() const { return mInner->mPrincipal; }
 
   void SetTitle(const nsAString& aTitle) { mTitle = aTitle; }
   void SetMedia(nsMediaList* aMedia);
   void SetOwningNode(nsIDOMNode* aOwningNode) { mOwningNode = aOwningNode; /* Not ref counted */ }
 
   void SetOwnerRule(nsICSSImportRule* aOwnerRule) { mOwnerRule = aOwnerRule; /* Not ref counted */ }
-  already_AddRefed<nsICSSImportRule> GetOwnerRule() const;
+  nsICSSImportRule* GetOwnerRule() const { return mOwnerRule; }
 
-  nsXMLNameSpaceMap* GetNameSpaceMap() const;
+  nsXMLNameSpaceMap* GetNameSpaceMap() const { return mInner->mNameSpaceMap; }
 
   already_AddRefed<nsCSSStyleSheet> Clone(nsCSSStyleSheet* aCloneParent,
                                           nsICSSImportRule* aCloneOwnerRule,
                                           nsIDocument* aCloneDocument,
                                           nsIDOMNode* aCloneOwningNode) const;
 
   PRBool IsModified() const { return mDirty; }
   void SetModified(PRBool aModified) { mDirty = aModified; }
diff --git a/layout/style/nsHTMLCSSStyleSheet.cpp b/layout/style/nsHTMLCSSStyleSheet.cpp
--- a/layout/style/nsHTMLCSSStyleSheet.cpp
+++ b/layout/style/nsHTMLCSSStyleSheet.cpp
@@ -55,27 +55,20 @@
 #include "nsRuleWalker.h"
 #include "nsRuleData.h"
 #include "nsRuleProcessorData.h"
 #include "mozilla/dom/Element.h"
 
 using namespace mozilla::dom;
 
 nsHTMLCSSStyleSheet::nsHTMLCSSStyleSheet()
-  : mRefCnt(0),
-    mURL(nsnull),
-    mDocument(nsnull)
+  : mDocument(nsnull)
 {
 }
 
-nsHTMLCSSStyleSheet::~nsHTMLCSSStyleSheet()
-{
-  NS_RELEASE(mURL);
-}
-
 NS_IMPL_ISUPPORTS2(nsHTMLCSSStyleSheet,
                    nsIStyleSheet,
                    nsIStyleRuleProcessor)
 
 NS_IMETHODIMP
 nsHTMLCSSStyleSheet::RulesMatching(ElementRuleProcessorData* aData)
 {
   Element* element = aData->mElement;
@@ -135,17 +128,16 @@ nsHTMLCSSStyleSheet::Init(nsIURI* aURL, 
   if (! aURL || ! aDocument)
     return NS_ERROR_NULL_POINTER;
 
   if (mURL || mDocument)
     return NS_ERROR_ALREADY_INITIALIZED;
 
   mDocument = aDocument; // not refcounted!
   mURL = aURL;
-  NS_ADDREF(mURL);
   return NS_OK;
 }
 
 // Test if style is dependent on content state
 /* virtual */ nsRestyleHint
 nsHTMLCSSStyleSheet::HasStateDependentStyle(StateRuleProcessorData* aData)
 {
   return nsRestyleHint(0);
@@ -174,37 +166,31 @@ NS_IMETHODIMP
 nsHTMLCSSStyleSheet::MediumFeaturesChanged(nsPresContext* aPresContext,
                                            PRBool* aRulesChanged)
 {
   *aRulesChanged = PR_FALSE;
   return NS_OK;
 }
 
 
-nsresult
+void
 nsHTMLCSSStyleSheet::Reset(nsIURI* aURL)
 {
-  NS_IF_RELEASE(mURL);
   mURL = aURL;
-  NS_ADDREF(mURL);
-
-  return NS_OK;
 }
 
-/* virtual */ already_AddRefed<nsIURI>
+/* virtual */ nsIURI*
 nsHTMLCSSStyleSheet::GetSheetURI() const
 {
-  NS_IF_ADDREF(mURL);
   return mURL;
 }
 
-/* virtual */ already_AddRefed<nsIURI>
+/* virtual */ nsIURI*
 nsHTMLCSSStyleSheet::GetBaseURI() const
 {
-  NS_IF_ADDREF(mURL);
   return mURL;
 }
 
 /* virtual */ void
 nsHTMLCSSStyleSheet::GetTitle(nsString& aTitle) const
 {
   aTitle.AssignLiteral("Internal HTML/CSS Style Sheet");
 }
@@ -240,26 +226,25 @@ nsHTMLCSSStyleSheet::IsComplete() const
 }
 
 /* virtual */ void
 nsHTMLCSSStyleSheet::SetComplete()
 {
 }
 
 // style sheet owner info
-/* virtual */ already_AddRefed<nsIStyleSheet>
+/* virtual */ nsIStyleSheet*
 nsHTMLCSSStyleSheet::GetParentSheet() const
 {
   return nsnull;
 }
 
-/* virtual */ already_AddRefed<nsIDocument>
+/* virtual */ nsIDocument*
 nsHTMLCSSStyleSheet::GetOwningDocument() const
 {
-  NS_IF_ADDREF(mDocument);
   return mDocument;
 }
 
 /* virtual */ void
 nsHTMLCSSStyleSheet::SetOwningDocument(nsIDocument* aDocument)
 {
   mDocument = aDocument;
 }
diff --git a/layout/style/nsHTMLCSSStyleSheet.h b/layout/style/nsHTMLCSSStyleSheet.h
--- a/layout/style/nsHTMLCSSStyleSheet.h
+++ b/layout/style/nsHTMLCSSStyleSheet.h
@@ -48,30 +48,30 @@
 class nsHTMLCSSStyleSheet : public nsIStyleSheet,
                             public nsIStyleRuleProcessor {
 public:
   nsHTMLCSSStyleSheet();
 
   NS_DECL_ISUPPORTS
 
   nsresult Init(nsIURI* aURL, nsIDocument* aDocument);
-  nsresult Reset(nsIURI* aURL);
+  void Reset(nsIURI* aURL);
 
   // nsIStyleSheet
-  virtual already_AddRefed<nsIURI> GetSheetURI() const;
-  virtual already_AddRefed<nsIURI> GetBaseURI() const;
+  virtual nsIURI* GetSheetURI() const;
+  virtual nsIURI* GetBaseURI() const;
   virtual void GetTitle(nsString& aTitle) const;
   virtual void GetType(nsString& aType) const;
   virtual PRBool HasRules() const;
   virtual PRBool IsApplicable() const;
   virtual void SetEnabled(PRBool aEnabled);
   virtual PRBool IsComplete() const;
   virtual void SetComplete();
-  virtual already_AddRefed<nsIStyleSheet> GetParentSheet() const;  // will be null
-  virtual already_AddRefed<nsIDocument> GetOwningDocument() const;
+  virtual nsIStyleSheet* GetParentSheet() const;  // will be null
+  virtual nsIDocument* GetOwningDocument() const;
   virtual void SetOwningDocument(nsIDocument* aDocument);
 #ifdef DEBUG
   virtual void List(FILE* out = stdout, PRInt32 aIndent = 0) const;
 #endif
 
   // nsIStyleRuleProcessor
   NS_IMETHOD RulesMatching(ElementRuleProcessorData* aData);
   NS_IMETHOD RulesMatching(PseudoElementRuleProcessorData* aData);
@@ -87,16 +87,13 @@ public:
                                   PRBool* aResult);
 
 private: 
   // These are not supported and are not implemented! 
   nsHTMLCSSStyleSheet(const nsHTMLCSSStyleSheet& aCopy); 
   nsHTMLCSSStyleSheet& operator=(const nsHTMLCSSStyleSheet& aCopy); 
 
 protected:
-  virtual ~nsHTMLCSSStyleSheet();
-
-protected:
-  nsIURI*         mURL;
-  nsIDocument*    mDocument;
+  nsCOMPtr<nsIURI> mURL;
+  nsIDocument*     mDocument;
 };
 
 #endif /* !defined(nsHTMLCSSStyleSheet_h_) */
diff --git a/layout/style/nsHTMLStyleSheet.cpp b/layout/style/nsHTMLStyleSheet.cpp
--- a/layout/style/nsHTMLStyleSheet.cpp
+++ b/layout/style/nsHTMLStyleSheet.cpp
@@ -171,46 +171,32 @@ static PLDHashTableOps MappedAttrTable_O
   MappedAttrTable_ClearEntry,
   PL_DHashFinalizeStub,
   NULL
 };
 
 // -----------------------------------------------------------
 
 nsHTMLStyleSheet::nsHTMLStyleSheet(void)
-  : mURL(nsnull),
-    mDocument(nsnull),
-    mLinkRule(nsnull),
-    mVisitedRule(nsnull),
-    mActiveRule(nsnull),
-    mDocumentColorRule(nsnull)
+  : mDocument(nsnull)
 {
   mMappedAttrTable.ops = nsnull;
 }
 
 nsresult
 nsHTMLStyleSheet::Init()
 {
   mTableTHRule = new TableTHRule();
   if (!mTableTHRule)
     return NS_ERROR_OUT_OF_MEMORY;
-  NS_ADDREF(mTableTHRule);
   return NS_OK;
 }
 
 nsHTMLStyleSheet::~nsHTMLStyleSheet()
 {
-  NS_IF_RELEASE(mURL);
-
-  NS_IF_RELEASE(mLinkRule);
-  NS_IF_RELEASE(mVisitedRule);
-  NS_IF_RELEASE(mActiveRule);
-  NS_IF_RELEASE(mDocumentColorRule);
-  NS_IF_RELEASE(mTableTHRule);
-
   if (mMappedAttrTable.ops)
     PL_DHashTableFinish(&mMappedAttrTable);
 }
 
 NS_IMPL_ISUPPORTS2(nsHTMLStyleSheet, nsIStyleSheet, nsIStyleRuleProcessor)
 
 static nsresult GetBodyColor(nsPresContext* aPresContext, nscolor* aColor)
 {
@@ -266,20 +252,18 @@ nsHTMLStyleSheet::RulesMatching(ElementR
     else if (tag == nsGkAtoms::table) {
       if (aData->mCompatMode == eCompatibility_NavQuirks) {
         nscolor bodyColor;
         nsresult rv =
           GetBodyColor(ruleWalker->CurrentNode()->GetPresContext(),
                        &bodyColor);
         if (NS_SUCCEEDED(rv) &&
             (!mDocumentColorRule || bodyColor != mDocumentColorRule->mColor)) {
-          NS_IF_RELEASE(mDocumentColorRule);
           mDocumentColorRule = new HTMLColorRule();
           if (mDocumentColorRule) {
-            NS_ADDREF(mDocumentColorRule);
             mDocumentColorRule->mColor = bodyColor;
           }
         }
         if (mDocumentColorRule)
           ruleWalker->Forward(mDocumentColorRule);
       }
     }
   } // end html element
@@ -369,27 +353,25 @@ nsHTMLStyleSheet::RulesMatching(AnonBoxR
 NS_IMETHODIMP
 nsHTMLStyleSheet::RulesMatching(XULTreeRuleProcessorData* aData)
 {
   return NS_OK;
 }
 #endif
 
   // nsIStyleSheet api
-/* virtual */ already_AddRefed<nsIURI>
+/* virtual */ nsIURI*
 nsHTMLStyleSheet::GetSheetURI() const
 {
-  NS_IF_ADDREF(mURL);
   return mURL;
 }
 
-/* virtual */ already_AddRefed<nsIURI>
+/* virtual */ nsIURI*
 nsHTMLStyleSheet::GetBaseURI() const
 {
-  NS_IF_ADDREF(mURL);
   return mURL;
 }
 
 /* virtual */ void
 nsHTMLStyleSheet::GetTitle(nsString& aTitle) const
 {
   aTitle.Truncate();
 }
@@ -423,26 +405,25 @@ nsHTMLStyleSheet::IsComplete() const
   return PR_TRUE;
 }
 
 /* virtual */ void
 nsHTMLStyleSheet::SetComplete()
 {
 }
 
-/* virtual */ already_AddRefed<nsIStyleSheet>
+/* virtual */ nsIStyleSheet*
 nsHTMLStyleSheet::GetParentSheet() const
 {
   return nsnull;
 }
 
-/* virtual */ already_AddRefed<nsIDocument>
+/* virtual */ nsIDocument*
 nsHTMLStyleSheet::GetOwningDocument() const
 {
-  NS_IF_ADDREF(mDocument);
   return mDocument;
 }
 
 /* virtual */ void
 nsHTMLStyleSheet::SetOwningDocument(nsIDocument* aDocument)
 {
   mDocument = aDocument; // not refcounted
 }
@@ -454,90 +435,79 @@ nsHTMLStyleSheet::Init(nsIURI* aURL, nsI
   if (! aURL || ! aDocument)
     return NS_ERROR_NULL_POINTER;
 
   if (mURL || mDocument)
     return NS_ERROR_ALREADY_INITIALIZED;
 
   mDocument = aDocument; // not refcounted!
   mURL = aURL;
-  NS_ADDREF(mURL);
   return NS_OK;
 }
 
-nsresult
+void
 nsHTMLStyleSheet::Reset(nsIURI* aURL)
 {
-  NS_IF_RELEASE(mURL);
   mURL = aURL;
-  NS_ADDREF(mURL);
 
-  NS_IF_RELEASE(mLinkRule);
-  NS_IF_RELEASE(mVisitedRule);
-  NS_IF_RELEASE(mActiveRule);
-  NS_IF_RELEASE(mDocumentColorRule);
+  mLinkRule          = nsnull;
+  mVisitedRule       = nsnull;
+  mActiveRule        = nsnull;
+  mDocumentColorRule = nsnull;
 
   if (mMappedAttrTable.ops) {
     PL_DHashTableFinish(&mMappedAttrTable);
     mMappedAttrTable.ops = nsnull;
   }
-
-  return NS_OK;
 }
 
 nsresult
 nsHTMLStyleSheet::SetLinkColor(nscolor aColor)
 {
   if (mLinkRule) {
     if (mLinkRule->mColor == aColor)
       return NS_OK;
-    NS_RELEASE(mLinkRule);
   }
 
   mLinkRule = new HTMLColorRule();
   if (!mLinkRule)
     return NS_ERROR_OUT_OF_MEMORY;
-  NS_ADDREF(mLinkRule);
 
   mLinkRule->mColor = aColor;
   return NS_OK;
 }
 
 
 nsresult
 nsHTMLStyleSheet::SetActiveLinkColor(nscolor aColor)
 {
   if (mActiveRule) {
     if (mActiveRule->mColor == aColor)
       return NS_OK;
-    NS_RELEASE(mActiveRule);
   }
 
   mActiveRule = new HTMLColorRule();
   if (!mActiveRule)
     return NS_ERROR_OUT_OF_MEMORY;
-  NS_ADDREF(mActiveRule);
 
   mActiveRule->mColor = aColor;
   return NS_OK;
 }
 
 nsresult
 nsHTMLStyleSheet::SetVisitedLinkColor(nscolor aColor)
 {
   if (mVisitedRule) {
     if (mVisitedRule->mColor == aColor)
       return NS_OK;
-    NS_RELEASE(mVisitedRule);
   }
 
   mVisitedRule = new HTMLColorRule();
   if (!mVisitedRule)
     return NS_ERROR_OUT_OF_MEMORY;
-  NS_ADDREF(mVisitedRule);
 
   mVisitedRule->mColor = aColor;
   return NS_OK;
 }
 
 already_AddRefed<nsMappedAttributes>
 nsHTMLStyleSheet::UniqueMappedAttributes(nsMappedAttributes* aMapped)
 {
diff --git a/layout/style/nsHTMLStyleSheet.h b/layout/style/nsHTMLStyleSheet.h
--- a/layout/style/nsHTMLStyleSheet.h
+++ b/layout/style/nsHTMLStyleSheet.h
@@ -56,27 +56,27 @@ class nsMappedAttributes;
 class nsHTMLStyleSheet : public nsIStyleSheet, public nsIStyleRuleProcessor {
 public:
   nsHTMLStyleSheet(void);
   nsresult Init();
 
   NS_DECL_ISUPPORTS
 
   // nsIStyleSheet api
-  virtual already_AddRefed<nsIURI> GetSheetURI() const;
-  virtual already_AddRefed<nsIURI> GetBaseURI() const;
+  virtual nsIURI* GetSheetURI() const;
+  virtual nsIURI* GetBaseURI() const;
   virtual void GetTitle(nsString& aTitle) const;
   virtual void GetType(nsString& aType) const;
   virtual PRBool HasRules() const;
   virtual PRBool IsApplicable() const;
   virtual void SetEnabled(PRBool aEnabled);
   virtual PRBool IsComplete() const;
   virtual void SetComplete();
-  virtual already_AddRefed<nsIStyleSheet> GetParentSheet() const;  // will be null
-  virtual already_AddRefed<nsIDocument> GetOwningDocument() const;
+  virtual nsIStyleSheet* GetParentSheet() const;  // will be null
+  virtual nsIDocument* GetOwningDocument() const;
   virtual void SetOwningDocument(nsIDocument* aDocumemt);
 #ifdef DEBUG
   virtual void List(FILE* out = stdout, PRInt32 aIndent = 0) const;
 #endif
 
   // nsIStyleRuleProcessor API
   NS_IMETHOD RulesMatching(ElementRuleProcessorData* aData);
   NS_IMETHOD RulesMatching(PseudoElementRuleProcessorData* aData);
@@ -87,17 +87,17 @@ public:
   virtual nsRestyleHint HasStateDependentStyle(StateRuleProcessorData* aData);
   virtual PRBool HasDocumentStateDependentStyle(StateRuleProcessorData* aData);
   virtual nsRestyleHint
     HasAttributeDependentStyle(AttributeRuleProcessorData* aData);
   NS_IMETHOD MediumFeaturesChanged(nsPresContext* aPresContext,
                                    PRBool* aRulesChanged);
 
   nsresult Init(nsIURI* aURL, nsIDocument* aDocument);
-  nsresult Reset(nsIURI* aURL);
+  void Reset(nsIURI* aURL);
   nsresult SetLinkColor(nscolor aColor);
   nsresult SetActiveLinkColor(nscolor aColor);
   nsresult SetVisitedLinkColor(nscolor aColor);
 
   // Mapped Attribute management methods
   already_AddRefed<nsMappedAttributes>
     UniqueMappedAttributes(nsMappedAttributes* aMapped);
   void DropMappedAttributes(nsMappedAttributes* aMapped);
@@ -148,25 +148,25 @@ private:
   friend class TableTHRule;
   class TableTHRule: public GenericTableRule {
   public:
     TableTHRule() {}
 
     NS_IMETHOD MapRuleInfoInto(nsRuleData* aRuleData);
   };
 
-  nsIURI*              mURL;
-  nsIDocument*         mDocument;
-  HTMLColorRule*       mLinkRule;
-  HTMLColorRule*       mVisitedRule;
-  HTMLColorRule*       mActiveRule;
-  HTMLColorRule*       mDocumentColorRule;
-  TableTHRule*         mTableTHRule;
+  nsCOMPtr<nsIURI>        mURL;
+  nsIDocument*            mDocument;
+  nsRefPtr<HTMLColorRule> mLinkRule;
+  nsRefPtr<HTMLColorRule> mVisitedRule;
+  nsRefPtr<HTMLColorRule> mActiveRule;
+  nsRefPtr<HTMLColorRule> mDocumentColorRule;
+  nsRefPtr<TableTHRule>   mTableTHRule;
 
-  PLDHashTable         mMappedAttrTable;
+  PLDHashTable            mMappedAttrTable;
 };
 
 // XXX convenience method. Calls Initialize() automatically.
 nsresult
 NS_NewHTMLStyleSheet(nsHTMLStyleSheet** aInstancePtrResult, nsIURI* aURL, 
                      nsIDocument* aDocument);
 
 nsresult
diff --git a/layout/style/nsIStyleSheet.h b/layout/style/nsIStyleSheet.h
--- a/layout/style/nsIStyleSheet.h
+++ b/layout/style/nsIStyleSheet.h
@@ -44,39 +44,38 @@
 #define nsIStyleSheet_h___
 
 #include <stdio.h>
 #include "nsISupports.h"
 
 class nsString;
 class nsIURI;
 class nsIDocument;
-template<class T> struct already_AddRefed;
 
 // IID for the nsIStyleSheet interface
-// 5de8de51-1f82-4e3d-9544-9a5bb07b4400
+// 3eb34a60-04bd-41d9-9f60-882694e61c38
 #define NS_ISTYLE_SHEET_IID     \
-{ 0x5de8de51, 0x1f82, 0x4e3d,   \
- { 0x95, 0x44, 0x9a, 0x5b, 0xb0, 0x7b, 0x44, 0x00 } }
+{ 0x3eb34a60, 0x04bd, 0x41d9,   \
+ { 0x9f, 0x60, 0x88, 0x26, 0x94, 0xe6, 0x1c, 0x38 } }
 
 /**
  * A style sheet is a thing associated with a document that has style
  * rules.  Those style rules can be reached in one of two ways, depending
  * on which level of the nsStyleSet it is in:
  *   1) It can be |QueryInterface|d to nsIStyleRuleProcessor
  *   2) It can be |QueryInterface|d to nsCSSStyleSheet, with which the
  *      |nsStyleSet| uses an |nsCSSRuleProcessor| to access the rules.
  */
 class nsIStyleSheet : public nsISupports {
 public:
   NS_DECLARE_STATIC_IID_ACCESSOR(NS_ISTYLE_SHEET_IID)
 
   // basic style sheet data
-  virtual already_AddRefed<nsIURI> GetSheetURI() const = 0;
-  virtual already_AddRefed<nsIURI> GetBaseURI() const = 0;
+  virtual nsIURI* GetSheetURI() const = 0;
+  virtual nsIURI* GetBaseURI() const = 0;
   virtual void GetTitle(nsString& aTitle) const = 0;
   virtual void GetType(nsString& aType) const = 0;
   virtual PRBool HasRules() const = 0;
 
   /**
    * Whether the sheet is applicable.  A sheet that is not applicable
    * should never be inserted into a style set.  A sheet may not be
    * applicable for a variety of reasons including being disabled and
@@ -98,18 +97,18 @@ public:
 
   /**
    * Whether the sheet is complete.
    */
   virtual PRBool IsComplete() const = 0;
   virtual void SetComplete() = 0;
 
   // style sheet owner info
-  virtual already_AddRefed<nsIStyleSheet> GetParentSheet() const = 0;  // may be null
-  virtual already_AddRefed<nsIDocument> GetOwningDocument() const = 0; // may be null
+  virtual nsIStyleSheet* GetParentSheet() const = 0;  // may be null
+  virtual nsIDocument* GetOwningDocument() const = 0; // may be null
   virtual void SetOwningDocument(nsIDocument* aDocument) = 0;
 
 #ifdef DEBUG
   virtual void List(FILE* out = stdout, PRInt32 aIndent = 0) const = 0;
 #endif
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(nsIStyleSheet, NS_ISTYLE_SHEET_IID)
