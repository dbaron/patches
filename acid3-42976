From: Eli Friedman <sharparrow1@yahoo.com>

WIP from attachment 336908 on bug 42976

diff --git a/content/base/src/nsDocument.cpp b/content/base/src/nsDocument.cpp
--- a/content/base/src/nsDocument.cpp
+++ b/content/base/src/nsDocument.cpp
@@ -4951,20 +4951,17 @@ nsDocument::AppendChild(nsIDOMNode* aNew
 nsDocument::AppendChild(nsIDOMNode* aNewChild, nsIDOMNode** aReturn)
 {
   return nsDocument::InsertBefore(aNewChild, nsnull, aReturn);
 }
 
 NS_IMETHODIMP
 nsDocument::CloneNode(PRBool aDeep, nsIDOMNode** aReturn)
 {
-  // XXX should be implemented by subclass
-  *aReturn = nsnull;
-
-  return NS_OK;
+  return nsNodeUtils::CloneNodeImpl(this, aDeep, aReturn);
 }
 
 NS_IMETHODIMP
 nsDocument::Normalize()
 {
   PRInt32 count = mChildren.ChildCount();
   for (PRInt32 i = 0; i < count; ++i) {
     nsCOMPtr<nsIDOMNode> node(do_QueryInterface(mChildren.ChildAt(i)));
@@ -6835,8 +6832,51 @@ nsDocument::QuerySelector(const nsAStrin
 }
 
 NS_IMETHODIMP
 nsDocument::QuerySelectorAll(const nsAString& aSelector,
                              nsIDOMNodeList **aReturn)
 {
   return nsGenericElement::doQuerySelectorAll(this, aSelector, aReturn);
 }
+
+nsresult
+nsDocument::CloneDocHelper(nsDocument* clone) const
+{
+  // Init document
+  nsresult rv = clone->Init();
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  // Set URI/principal
+  clone->nsDocument::SetDocumentURI(nsIDocument::GetDocumentURI());
+  // Must set the principal first, since SetBaseURI checks it.
+  clone->SetPrincipal(NodePrincipal());
+  rv = clone->SetBaseURI(nsIDocument::GetBaseURI());
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  // Set scripting object
+  PRBool hasHadScriptObject = PR_TRUE;
+  nsIScriptGlobalObject* scriptObject =
+    GetScriptHandlingObject(hasHadScriptObject);
+  NS_ENSURE_STATE(scriptObject || !hasHadScriptObject);
+  clone->SetScriptHandlingObject(scriptObject);
+
+  // Make the clone a data document
+  clone->SetLoadedAsData(PR_TRUE);
+
+  // Misc state
+
+  // State from nsIDocument
+  clone->mCharacterSet = mCharacterSet;
+  clone->mCharacterSetSource = mCharacterSetSource;
+  clone->mCompatMode = mCompatMode;
+  clone->mBidiOptions = mBidiOptions;
+  clone->mContentLanguage = mContentLanguage;
+  clone->mContentType = mContentType;
+  clone->mSecurityInfo = mSecurityInfo;
+
+  // State from nsDocument
+  clone->mIsRegularHTML = mIsRegularHTML;
+  clone->mXMLDeclarationBits = mXMLDeclarationBits;
+  clone->mBaseTarget = mBaseTarget;
+
+  return NS_OK;
+}
diff --git a/content/base/src/nsDocument.h b/content/base/src/nsDocument.h
--- a/content/base/src/nsDocument.h
+++ b/content/base/src/nsDocument.h
@@ -810,16 +810,20 @@ public:
    * document or element), which getElementsByClassName was called on.
    */
   static nsresult GetElementsByClassNameHelper(nsINode* aRootNode,
                                                const nsAString& aClasses,
                                                nsIDOMNodeList** aReturn);
 
   void DoNotifyPossibleTitleChange();
 
+  void SetLoadedAsData(PRBool aLoadedAsData) { mLoadedAsData = aLoadedAsData; }
+
+  nsresult CloneDocHelper(nsDocument* clone) const;
+
 protected:
 
   void RegisterNamedItems(nsIContent *aContent);
   void UnregisterNamedItems(nsIContent *aContent);
   void UpdateNameTableEntry(nsIContent *aContent);
   void UpdateIdTableEntry(nsIContent *aContent);
   void RemoveFromNameTable(nsIContent *aContent);
   void RemoveFromIdTable(nsIContent *aContent);
diff --git a/content/html/document/src/nsHTMLDocument.cpp b/content/html/document/src/nsHTMLDocument.cpp
--- a/content/html/document/src/nsHTMLDocument.cpp
+++ b/content/html/document/src/nsHTMLDocument.cpp
@@ -4102,8 +4102,25 @@ nsHTMLDocument::CreateElem(nsIAtom *aNam
     NS_ASSERTION(lcName.Equals(name),
                  "aName should be lowercase, fix caller.");
   }
 
   return nsDocument::CreateElem(aName, aPrefix, aNamespaceID,
                                 aDocumentDefaultType, aResult);
 }
 #endif
+
+nsresult
+nsHTMLDocument::Clone(nsINodeInfo *aNodeInfo, nsINode **aResult) const
+{
+  NS_ASSERTION(aNodeInfo->NodeInfoManager() == mNodeInfoManager,
+               "Can't import this document into another document!");
+
+  nsRefPtr<nsHTMLDocument> clone = new nsHTMLDocument();
+  NS_ENSURE_TRUE(clone, NS_ERROR_OUT_OF_MEMORY);
+  nsresult rv = CloneDocHelper(clone.get());
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  // State from nsHTMLDocument
+  clone->mLoadFlags = mLoadFlags;
+
+  return CallQueryInterface(clone.get(), aResult);
+}
diff --git a/content/html/document/src/nsHTMLDocument.h b/content/html/document/src/nsHTMLDocument.h
--- a/content/html/document/src/nsHTMLDocument.h
+++ b/content/html/document/src/nsHTMLDocument.h
@@ -207,16 +207,18 @@ public:
     return mFragmentParser.forget();
   }
   virtual void SetFragmentParser(nsIParser* aParser) {
     mFragmentParser = aParser;
   }
 
   virtual nsresult SetEditingState(EditingState aState);
 
+  virtual nsresult Clone(nsINodeInfo *aNodeInfo, nsINode **aResult) const;
+
 protected:
   nsresult GetBodySize(PRInt32* aWidth,
                        PRInt32* aHeight);
 
   nsresult PrePopulateIdentifierMap();
 
   nsIContent *MatchId(nsIContent *aContent, const nsAString& aId);
 
diff --git a/content/xml/document/src/nsXMLDocument.cpp b/content/xml/document/src/nsXMLDocument.cpp
--- a/content/xml/document/src/nsXMLDocument.cpp
+++ b/content/xml/document/src/nsXMLDocument.cpp
@@ -539,41 +539,27 @@ nsXMLDocument::EndLoad()
     // Generate a document load event for the case when an XML
     // document was loaded as pure data without any presentation
     // attached to it.
     nsEvent event(PR_TRUE, NS_LOAD);
     nsEventDispatcher::Dispatch(static_cast<nsIDocument*>(this), nsnull,
                                 &event);
   }    
 }
-
-// nsIDOMNode interface
-
-NS_IMETHODIMP    
-nsXMLDocument::CloneNode(PRBool aDeep, nsIDOMNode** aReturn)
-{
-  return nsNodeUtils::CloneNodeImpl(this, aDeep, aReturn);
-}
  
 // nsIDOMDocument interface
 
 nsresult
 nsXMLDocument::Clone(nsINodeInfo *aNodeInfo, nsINode **aResult) const
 {
   NS_ASSERTION(aNodeInfo->NodeInfoManager() == mNodeInfoManager,
                "Can't import this document into another document!");
 
-  PRBool hasHadScriptObject = PR_TRUE;
-  nsIScriptGlobalObject* scriptObject =
-    GetScriptHandlingObject(hasHadScriptObject);
-  NS_ENSURE_STATE(scriptObject || !hasHadScriptObject);
-  nsCOMPtr<nsIDOMDocument> newDoc;
-  nsresult rv = NS_NewDOMDocument(getter_AddRefs(newDoc), EmptyString(),
-                                  EmptyString(), nsnull,
-                                  nsIDocument::GetDocumentURI(),
-                                  nsIDocument::GetBaseURI(), NodePrincipal(),
-                                  PR_TRUE);
+  nsRefPtr<nsXMLDocument> clone = new nsXMLDocument();
+  NS_ENSURE_TRUE(clone, NS_ERROR_OUT_OF_MEMORY);
+  nsresult rv = CloneDocHelper(clone);
   NS_ENSURE_SUCCESS(rv, rv);
-  nsCOMPtr<nsIDocument> document = do_QueryInterface(newDoc);
-  document->SetScriptHandlingObject(scriptObject);
 
-  return CallQueryInterface(newDoc, aResult);
+  // State from nsXMLDocument
+  clone->mAsync = mAsync;
+
+  return CallQueryInterface(clone.get(), aResult);
 }
diff --git a/content/xml/document/src/nsXMLDocument.h b/content/xml/document/src/nsXMLDocument.h
--- a/content/xml/document/src/nsXMLDocument.h
+++ b/content/xml/document/src/nsXMLDocument.h
@@ -70,33 +70,29 @@ public:
                                      nsILoadGroup* aLoadGroup,
                                      nsISupports* aContainer,
                                      nsIStreamListener **aDocListener,
                                      PRBool aReset = PR_TRUE,
                                      nsIContentSink* aSink = nsnull);
 
   virtual void EndLoad();
 
-  // nsIDOMNode interface
-  NS_IMETHOD CloneNode(PRBool aDeep, nsIDOMNode** aReturn);
-
   // nsIInterfaceRequestor
   NS_DECL_NSIINTERFACEREQUESTOR
 
   // nsIHTTPEventSink
   NS_DECL_NSICHANNELEVENTSINK
 
   // nsIDOMXMLDocument
   NS_DECL_NSIDOMXMLDOCUMENT
 
   virtual nsresult Init();
 
   virtual nsresult Clone(nsINodeInfo *aNodeInfo, nsINode **aResult) const;
 
-  void SetLoadedAsData(PRBool aLoadedAsData) { mLoadedAsData = aLoadedAsData; }
 protected:
   // mChannelIsPending indicates whether we're currently asynchronously loading
   // data from mChannel (via document.load() or normal load).  It's set to true
   // when we first find out about the channel (StartDocumentLoad) and set to
   // false in EndLoad or if ResetToURI() is called.  In the latter case our
   // mChannel is also cancelled.  Note that if this member is true, mChannel
   // cannot be null.
   PRPackedBool mChannelIsPending;
diff --git a/dom/tests/mochitest/bugs/Makefile.in b/dom/tests/mochitest/bugs/Makefile.in
--- a/dom/tests/mochitest/bugs/Makefile.in
+++ b/dom/tests/mochitest/bugs/Makefile.in
@@ -40,16 +40,17 @@ srcdir		= @srcdir@
 srcdir		= @srcdir@
 VPATH		= @srcdir@
 relativesrcdir	= dom/tests/mochitest/bugs
 
 include $(DEPTH)/config/autoconf.mk
 include $(topsrcdir)/config/rules.mk
 
 _TEST_FILES	= \
+		test_bug42976.html \
 		test_bug159849.html \
 		test_bug291377.html \
 		test_bug308856.html \
 		test_bug317448.html \
 		test_bug327891.html \
 		test_bug333983.html \
 		test_bug335976.xhtml \
 		test_bug342448.html \
diff --git a/dom/tests/mochitest/bugs/test_bug42976.html b/dom/tests/mochitest/bugs/test_bug42976.html
new file mode 100644
--- /dev/null
+++ b/dom/tests/mochitest/bugs/test_bug42976.html
@@ -0,0 +1,72 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+https://bugzilla.mozilla.org/show_bug.cgi?id=42976
+-->
+<head>
+  <title>Test for Bug 42976</title>
+  <script type="text/javascript" src="/MochiKit/MochiKit.js"></script>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>        
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=42976">Mozilla Bug 42976</a>
+<p id="display"></p>
+<div id="content">
+    <iframe id=specialtest src="data:text/html,<meta http-equiv='Content-Language' content='ja-JP'><base href='http://www.mozilla.org'><p>asdf"></iframe>;
+    <iframe id=htmlquirks src="data:text/html;charset=ISO-8859-2,<html><body><div></div></body></html>"></iframe>
+    <iframe id=htmlstd src="data:text/html;charset=ISO-8859-3,<!DOCTYPE html><html><body><div></div></body></html>"></iframe>
+    <iframe id=textplain src="data:text/plain;charset=ISO-8859-4,asdf%0Azxcv%0A"></iframe>
+    <iframe id=xhtmlstd src="data:application/xhtml+xml;charset=ISO-8859-5,<!DOCTYPE html><html xmlns='http://www.w3.org/1999/xhtml'><body><div></div></body></html>"></iframe>
+    <iframe id=xmlstd src="data:image/svg+xml;charset=ISO-8859-6,<svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width='300' height='300'><text x='60' y='150' fill='blue'>Hello, World!</text><text x='60' y='250' fill='blue'>Hello, World!</text></svg>"></iframe>
+</div>
+<pre id="test">
+<script class="testbody" type="text/javascript">
+var iframes = document.getElementsByTagName("iframe");
+for (var i = 1; i < iframes.length; i++) {
+  var doc = iframes[i].contentDocument;
+  var clonefalse = doc.cloneNode(false);
+  // doc.compatMode
+  ok(doc.compatMode == clonefalse.compatMode, "compatMode not preserved correctly; " + iframes[i].id);
+
+  // doc.contentType
+  ok(doc.contentType == clonefalse.contentType, "contentType not preserved correctly; " + iframes[i].id);
+
+  // doc.xmlStandalone
+  ok(doc.xmlStandalone == clonefalse.xmlStandalone, "xmlStandalone not preserved correctly; " + iframes[i].id);
+
+  // doc.xmlEncoding
+  ok(doc.xmlEncoding == clonefalse.xmlEncoding, "xmlEncoding not preserved correctly; " + iframes[i].id);
+
+  // doc.characterSet
+  ok(doc.characterSet == clonefalse.characterSet, "charset not preserved correctly; " + iframes[i].id);
+
+  // innerHTML+tag case test
+  var clonetrue = doc.cloneNode(true);
+  doc.documentElement.firstChild.innerHTML="<div><dD></dD></div>";
+  clonetrue.documentElement.firstChild.innerHTML="<div><dD></dD></div>";
+  ok(doc.documentElement.innerHTML == clonetrue.documentElement.innerHTML,
+     "innerHTML not preserved correctly; " + iframes[i].id);
+
+}
+
+// A couple of tests that don't quite fit in the framework.
+var doc = iframes[0].contentDocument;
+doc.dir="rtl";
+var docclone = doc.cloneNode(false);
+
+// doc.dir
+ok(docclone.dir == "rtl", "dir not preserved correctly");
+
+// document.querySelectorAll(":lang(ja)")
+docclone.appendChild(docclone.createElement("html"));
+ok(docclone.querySelectorAll(":lang(ja)").length == 1, "lang not preserved correctly");
+
+docclone.documentElement.innerHTML="<body><p><a href='a.html' id=a>asf</a></body>";
+ok(docclone.getElementById('a').href == "http://www.mozilla.org/a.html",
+   "base not preserved correctly");
+
+</script>
+</pre>
+</body>
+</html>
