Switch away from nsBlockReflowState::mAvailSpaceRect in bullet reflow, and simultaneously refix bug 427370 in a way that also fixes bug 428810.  (Bug 25888)  (NEED TO ADD REFTESTS WITH PADDING/BORDER)

diff --git a/layout/base/nsLayoutUtils.cpp b/layout/base/nsLayoutUtils.cpp
--- a/layout/base/nsLayoutUtils.cpp
+++ b/layout/base/nsLayoutUtils.cpp
@@ -2500,62 +2500,86 @@ nsLayoutUtils::GetStringWidth(const nsIF
   nscoord width;
   aContext->GetWidth(aString, aLength, width);
   return width;
 }
 
 /* static */ PRBool
 nsLayoutUtils::GetFirstLineBaseline(const nsIFrame* aFrame, nscoord* aResult)
 {
+  LinePosition position;
+  if (!GetFirstLinePosition(aFrame, &position))
+    return PR_FALSE;
+  *aResult = position.mBaseline;
+  return PR_TRUE;
+}
+
+/* static */ PRBool
+nsLayoutUtils::GetFirstLinePosition(const nsIFrame* aFrame,
+                                    LinePosition* aResult)
+{
   const nsBlockFrame* block = nsLayoutUtils::GetAsBlock(const_cast<nsIFrame*>(aFrame));
   if (!block) {
     // For the first-line baseline we also have to check for a table, and if
     // so, use the baseline of its first row.
     nsIAtom* fType = aFrame->GetType();
     if (fType == nsGkAtoms::tableOuterFrame) {
-      *aResult = aFrame->GetBaseline();
+      aResult->mTop = 0;
+      aResult->mBaseline = aFrame->GetBaseline();
+      // This is what we want for the list bullet caller; not sure if
+      // other future callers will want the same.
+      aResult->mBottom = aFrame->GetSize().height;
       return PR_TRUE;
     }
 
     // For first-line baselines, we have to consider scroll frames.
     if (fType == nsGkAtoms::scrollFrame) {
       nsIScrollableFrame *sFrame = do_QueryFrame(const_cast<nsIFrame*>(aFrame));
       if (!sFrame) {
         NS_NOTREACHED("not scroll frame");
       }
-      nscoord kidBaseline;
-      if (GetFirstLineBaseline(sFrame->GetScrolledFrame(), &kidBaseline)) {
+      LinePosition kidPosition;
+      if (GetFirstLinePosition(sFrame->GetScrolledFrame(), &kidPosition)) {
         // Consider only the border and padding that contributes to the
         // kid's position, not the scrolling, so we get the initial
         // position.
-        *aResult = kidBaseline + aFrame->GetUsedBorderAndPadding().top;
+        nscoord offset = aFrame->GetUsedBorderAndPadding().top;
+        aResult->mTop = kidPosition.mTop + offset;
+        aResult->mBaseline = kidPosition.mBaseline + offset;
+        aResult->mBottom = kidPosition.mBottom + offset;
         return PR_TRUE;
       }
       return PR_FALSE;
     }
 
     // No baseline.
     return PR_FALSE;
   }
 
   for (nsBlockFrame::const_line_iterator line = block->begin_lines(),
                                      line_end = block->end_lines();
        line != line_end; ++line) {
     if (line->IsBlock()) {
       nsIFrame *kid = line->mFirstChild;
-      nscoord kidBaseline;
-      if (GetFirstLineBaseline(kid, &kidBaseline)) {
-        *aResult = kidBaseline + kid->GetPosition().y;
+      LinePosition kidPosition;
+      if (GetFirstLinePosition(kid, &kidPosition)) {
+        nscoord offset = kid->GetPosition().y;
+        aResult->mTop = kidPosition.mTop + offset;
+        aResult->mBaseline = kidPosition.mBaseline + offset;
+        aResult->mBottom = kidPosition.mBottom + offset;
         return PR_TRUE;
       }
     } else {
       // XXX Is this the right test?  We have some bogus empty lines
       // floating around, but IsEmpty is perhaps too weak.
       if (line->GetHeight() != 0 || !line->IsEmpty()) {
-        *aResult = line->mBounds.y + line->GetAscent();
+        nscoord top = line->mBounds.y;
+        aResult->mTop = top;
+        aResult->mBaseline = top + line->GetAscent();
+        aResult->mBottom = top + line->GetHeight();
         return PR_TRUE;
       }
     }
   }
   return PR_FALSE;
 }
 
 /* static */ PRBool
diff --git a/layout/base/nsLayoutUtils.h b/layout/base/nsLayoutUtils.h
--- a/layout/base/nsLayoutUtils.h
+++ b/layout/base/nsLayoutUtils.h
@@ -769,16 +769,30 @@ public:
    * 'overflow' not 'visible', potentially including aFrame itself).
    *
    * Returns true if a baseline was found (and fills in aResult).
    * Otherwise returns false.
    */
   static PRBool GetFirstLineBaseline(const nsIFrame* aFrame, nscoord* aResult);
 
   /**
+   * Just like GetFirstLineBaseline, except also returns the top and
+   * bottom of the line with the baseline.
+   *
+   * Returns true if a line was found (and fills in aResult).
+   * Otherwise returns false.
+   */
+  struct LinePosition {
+    nscoord mTop, mBaseline, mBottom;
+  };
+  static PRBool GetFirstLinePosition(const nsIFrame* aFrame,
+                                     LinePosition* aResult);
+
+
+  /**
    * Derive a baseline of |aFrame| (measured from its top border edge)
    * from its last in-flow line box (not descending into anything with
    * 'overflow' not 'visible', potentially including aFrame itself).
    *
    * Returns true if a baseline was found (and fills in aResult).
    * Otherwise returns false.
    */
   static PRBool GetLastLineBaseline(const nsIFrame* aFrame, nscoord* aResult);
diff --git a/layout/generic/nsBlockFrame.cpp b/layout/generic/nsBlockFrame.cpp
--- a/layout/generic/nsBlockFrame.cpp
+++ b/layout/generic/nsBlockFrame.cpp
@@ -1070,32 +1070,32 @@ nsBlockFrame::Reflow(nsPresContext*     
   // the second case can happen.
   if (mBullet && HaveOutsideBullet() && !mLines.empty() &&
       (mLines.front()->IsBlock() ||
        (0 == mLines.front()->mBounds.height &&
         mLines.front() != mLines.back() &&
         mLines.begin().next()->IsBlock()))) {
     // Reflow the bullet
     nsHTMLReflowMetrics metrics;
-    // FIXME: aReflowState.mComputedBorderPadding.top isn't even the
-    // right place -- we really want the top of the line whose baseline
-    // we're using (or, actually, the entire line, once we fix bug
-    // 25888)
-    ReflowBullet(state, metrics, aReflowState.mComputedBorderPadding.top);
-
-    nscoord baseline;
-    if (nsLayoutUtils::GetFirstLineBaseline(this, &baseline)) {
+    // XXX Use the entire line when we fix bug 25888.
+    nsLayoutUtils::LinePosition position;
+    PRBool havePosition = nsLayoutUtils::GetFirstLinePosition(this, &position);
+    nscoord lineTop = havePosition ? position.mTop
+                                   : aReflowState.mComputedBorderPadding.top;
+    ReflowBullet(state, metrics, lineTop);
+
+    if (havePosition) {
       // We have some lines to align the bullet with.  
 
       // Doing the alignment using the baseline will also cater for
       // bullets that are placed next to a child block (bug 92896)
     
       // Tall bullets won't look particularly nice here...
       nsRect bbox = mBullet->GetRect();
-      bbox.y = baseline - metrics.ascent;
+      bbox.y = position.mBaseline - metrics.ascent;
       mBullet->SetRect(bbox);
     }
     // Otherwise just leave the bullet where it is, up against our top padding.
   }
 
   // Compute our final size
   nscoord bottomEdgeOfChildren;
   ComputeFinalSize(aReflowState, state, aMetrics, &bottomEdgeOfChildren);
@@ -6641,32 +6641,53 @@ nsBlockFrame::ReflowBullet(nsBlockReflow
   // XXXwaterson Should this look just like the logic in
   // nsBlockReflowContext::ReflowBlock and nsLineLayout::ReflowFrame?
   nsHTMLReflowState reflowState(aState.mPresContext, rs,
                                 mBullet, availSize);
   nsReflowStatus  status;
   mBullet->WillReflow(aState.mPresContext);
   mBullet->Reflow(aState.mPresContext, aMetrics, reflowState, status);
 
-  // Place the bullet now, separate it from mOutsideBulletX by its margin.
-  // If the mAvailSpaceRect position is outside the mOutsideBulletX
-  // position it means the line didn't care about the float edge and we
-  // use that position instead (there cannot be any floats at the start
-  // of the line this case since that would violate CSS 2.1 float rules).
-  // XXX we need to take floats inside the principal block that clears
-  // outside floats into account also (bug 428810).
-  nscoord x = rs.mStyleVisibility->mDirection == NS_STYLE_DIRECTION_LTR ?
-    PR_MIN(aState.mOutsideBulletX, aState.mAvailSpaceRect.x)
-      - reflowState.mComputedMargin.right - aMetrics.width :
-    PR_MAX(aState.mOutsideBulletX, aState.mAvailSpaceRect.XMost())
-      + reflowState.mComputedMargin.left;
-
-  // FIXME: come up with rules for when mAvailSpaceRect is valid so we
-  // don't need to do this.
-  aState.GetAvailableSpace();
+  // Get the float available space using our saved state from before we
+  // started reflowing the block, so that we ignore any floats inside
+  // the block.
+  // FIXME: aLineTop isn't actually set correctly by some callers, since
+  // they reposition the line.
+  nsRect floatAvailSpace;
+  aState.GetFloatAvailableSpaceWithState(aLineTop, PR_FALSE,
+                                         &aState.mFloatManagerStateBefore,
+                                         floatAvailSpace);
+  // FIXME (bug 25888): need to check the entire region that the first
+  // line overlaps, not just the top pixel.
+
+  // Place the bullet now.  We want to place the bullet relative to the
+  // border-box of the associated block (using the right/left margin of
+  // the bullet frame as separation).  However, if a line box would be
+  // displaced by floats that are *outside* the associated block, we
+  // want to displace it by the same amount.  That is, we act as though
+  // the edge of the floats is the content-edge of the block, and place
+  // the bullet at a position offset from there by the block's padding,
+  // the block's border, and the bullet frame's margin.
+  nscoord x;
+  if (rs.mStyleVisibility->mDirection == NS_STYLE_DIRECTION_LTR) {
+    // Note: mAvailSpaceRect.x is relative to the content box and never
+    // less than zero.  Converting to frame coordinates and subtracting
+    // the padding and border cancel each other out, and the PR_MAX()
+    // with 0 (or with the left border+padding) is even implied in the
+    // right place.
+    x = floatAvailSpace.x - reflowState.mComputedMargin.right - aMetrics.width;
+  } else {
+    // The XMost() of the available space and the computed width both
+    // give us offsets from the left content edge.  Then we add the left
+    // border/padding to get into frame coordinates, and the right
+    // border/padding and the bullet's margin to offset the position.
+    x = PR_MIN(rs.ComputedWidth(), floatAvailSpace.XMost())
+        + rs.mComputedBorderPadding.LeftRight()
+        + reflowState.mComputedMargin.left;
+  }
 
   // Approximate the bullets position; vertical alignment will provide
   // the final vertical location.
   const nsMargin& bp = aState.BorderPadding();
   nscoord y = bp.top;
   mBullet->SetRect(nsRect(x, y, aMetrics.width, aMetrics.height));
   mBullet->DidReflow(aState.mPresContext, &aState.mReflowState, NS_FRAME_REFLOW_FINISHED);
 }
diff --git a/layout/generic/nsBlockReflowState.cpp b/layout/generic/nsBlockReflowState.cpp
--- a/layout/generic/nsBlockReflowState.cpp
+++ b/layout/generic/nsBlockReflowState.cpp
@@ -97,16 +97,17 @@ nsBlockReflowState::nsBlockReflowState(c
 
   NS_ASSERTION(mFloatManager,
                "FloatManager should be set in nsBlockReflowState" );
   if (mFloatManager) {
     // Translate into our content area and then save the 
     // coordinate system origin for later.
     mFloatManager->Translate(borderPadding.left, borderPadding.top);
     mFloatManager->GetTranslation(mFloatManagerX, mFloatManagerY);
+    mFloatManager->PushState(&mFloatManagerStateBefore); // never popped
   }
 
   mReflowStatus = NS_FRAME_COMPLETE;
 
   mPresContext = aPresContext;
   mNextInFlow = static_cast<nsBlockFrame*>(mBlock->GetNextInFlow());
 
   NS_ASSERTION(NS_UNCONSTRAINEDSIZE != aReflowState.ComputedWidth(),
@@ -134,26 +135,16 @@ nsBlockReflowState::nsBlockReflowState(c
   }
 
   mY = borderPadding.top;
 
   mPrevChild = nsnull;
   mCurrentLine = aFrame->end_lines();
 
   mMinLineHeight = nsHTMLReflowState::CalcLineHeight(aReflowState.frame);
-
-  // Calculate mOutsideBulletX
-  GetAvailableSpace();
-  // FIXME (bug 25888): need to check the entire region that the first
-  // line overlaps, not just the top pixel.
-  mOutsideBulletX =
-    mReflowState.mStyleVisibility->mDirection == NS_STYLE_DIRECTION_LTR ?
-      mAvailSpaceRect.x :
-      PR_MIN(mReflowState.ComputedWidth(), mAvailSpaceRect.XMost()) +
-        mReflowState.mComputedBorderPadding.LeftRight();
 }
 
 void
 nsBlockReflowState::SetupOverflowPlaceholdersProperty()
 {
   if (mReflowState.availableHeight != NS_UNCONSTRAINEDSIZE ||
       !mOverflowPlaceholders.IsEmpty()) {
     mBlock->SetProperty(nsGkAtoms::overflowPlaceholdersProperty,
@@ -330,35 +321,35 @@ nsBlockReflowState::ComputeBlockAvailSpa
   }
 
 #ifdef REALLY_NOISY_REFLOW
   printf("  CBAS: result %d %d %d %d\n", aResult.x, aResult.y, aResult.width, aResult.height);
 #endif
 }
 
 PRBool
-nsBlockReflowState::GetFloatAvailableSpace(nscoord aY,
-                                           PRBool aRelaxHeightConstraint,
-                                           nsRect& aResult) const
+nsBlockReflowState::GetFloatAvailableSpaceWithState(
+                      nscoord aY, PRBool aRelaxHeightConstraint,
+                      nsFloatManager::SavedState *aState,
+                      nsRect& aResult) const
 {
 #ifdef DEBUG
   // Verify that the caller setup the coordinate system properly
   nscoord wx, wy;
   mFloatManager->GetTranslation(wx, wy);
   NS_ASSERTION((wx == mFloatManagerX) && (wy == mFloatManagerY),
                "bad coord system");
 #endif
 
   PRBool hasFloats;
   aResult = 
     mFloatManager->GetBand(aY - BorderPadding().top, 
                            aRelaxHeightConstraint ? nscoord_MAX
                                                   : mContentArea.height,
-                           mContentArea.width,
-                           &hasFloats);
+                           mContentArea.width, aState, &hasFloats);
   // Keep the width >= 0 for compatibility with nsSpaceManager.
   if (aResult.width < 0)
     aResult.width = 0;
 
 #ifdef DEBUG
   if (nsBlockFrame::gNoisyReflow) {
     nsFrame::IndentBy(stdout, nsBlockFrame::gNoiseIndent);
     printf("GetAvailableSpace: band=%d,%d,%d,%d hasfloats=%d\n",
diff --git a/layout/generic/nsBlockReflowState.h b/layout/generic/nsBlockReflowState.h
--- a/layout/generic/nsBlockReflowState.h
+++ b/layout/generic/nsBlockReflowState.h
@@ -89,17 +89,23 @@ public:
    * upper left.
    *
    * Returns whether there are floats present at the given vertical
    * coordinate and within the width of the content rect.
    */
   PRBool GetFloatAvailableSpace(nsRect& aResult) const
     { return GetFloatAvailableSpace(mY, PR_FALSE, aResult); }
   PRBool GetFloatAvailableSpace(nscoord aY, PRBool aRelaxHeightConstraint,
-                                nsRect& aResult) const;
+                                nsRect& aResult) const
+    { return GetFloatAvailableSpaceWithState(aY, aRelaxHeightConstraint,
+                                             nsnull, aResult); }
+  PRBool GetFloatAvailableSpaceWithState(nscoord aY,
+                                         PRBool aRelaxHeightConstraint,
+                                         nsFloatManager::SavedState *aState,
+                                         nsRect& aResult) const;
   /* FIXME: To be removed */
   void GetAvailableSpace() { GetAvailableSpace(mY, PR_FALSE); }
   void GetAvailableSpace(nscoord aY, PRBool aRelaxHeightConstraint) {
     mBandHasFloats =
       GetFloatAvailableSpace(aY, aRelaxHeightConstraint, mAvailSpaceRect);
   }
 
   /*
@@ -211,22 +217,21 @@ public:
   // padding. This, therefore, represents the inner "content area" (in
   // spacemanager coordinates) where child frames will be placed,
   // including child blocks and floats.
   nscoord mFloatManagerX, mFloatManagerY;
 
   // XXX get rid of this
   nsReflowStatus mReflowStatus;
 
-  // The x-position we should place an outside bullet relative to.
-  // This is the border-box edge of the principal box.  However, if a line box
-  // would be displaced by floats, we want to displace it by the same amount.
-  // That is, we act as though the edge of the floats is the content-edge of
-  // the block, displaced by the block's padding and border.
-  nscoord mOutsideBulletX;
+  // The float manager state as it was before the contents of this
+  // block.  This is needed for positioning bullets, since we only want
+  // to move the bullet to flow around floats that were before this
+  // block, not floats inside of it.
+  nsFloatManager::SavedState mFloatManagerStateBefore;
 
   nscoord mBottomEdge;
 
   // The content area to reflow child frames within. The x/y
   // coordinates are known to be mBorderPadding.left and
   // mBorderPadding.top. The width/height may be NS_UNCONSTRAINEDSIZE
   // if the container reflowing this frame has given the frame an
   // unconstrained area.
diff --git a/layout/generic/nsFloatManager.cpp b/layout/generic/nsFloatManager.cpp
--- a/layout/generic/nsFloatManager.cpp
+++ b/layout/generic/nsFloatManager.cpp
@@ -134,30 +134,41 @@ void nsFloatManager::Shutdown()
   // Disable further caching.
   sCachedFloatManagerCount = -1;
 }
 
 nsRect
 nsFloatManager::GetBand(nscoord aYOffset,
                         nscoord aMaxHeight,
                         nscoord aContentAreaWidth,
+                        SavedState* aState,
                         PRBool* aHasFloats) const
 {
   NS_ASSERTION(aMaxHeight >= 0, "unexpected max height");
   NS_ASSERTION(aContentAreaWidth >= 0, "unexpected content area width");
 
   nscoord top = aYOffset + mY;
   if (top < nscoord_MIN) {
     NS_WARNING("bad value");
     top = nscoord_MIN;
   }
 
+  // Determine the last float that we should consider.
+  PRUint32 floatCount;
+  if (aState) {
+    // Use the provided state.
+    floatCount = aState->mFloatInfoCount;
+    NS_ABORT_IF_FALSE(floatCount <= mFloats.Length(), "bad state");
+  } else {
+    // Use our current state.
+    floatCount = mFloats.Length();
+  }
+
   // If there are no floats at all, or we're below the last one, return
   // quickly.
-  PRUint32 floatCount = mFloats.Length();
   if (floatCount == 0 ||
       (mFloats[floatCount-1].mLeftYMost <= top &&
        mFloats[floatCount-1].mRightYMost <= top)) {
     *aHasFloats = PR_FALSE;
     return nsRect(0, aYOffset, aContentAreaWidth, aMaxHeight);
   }
 
   nscoord bottom;
@@ -175,17 +186,17 @@ nsFloatManager::GetBand(nscoord aYOffset
   if (right < left) {
     NS_WARNING("bad value");
     right = left;
   }
 
   // Walk backwards through the floats until we either hit the front of
   // the list or we're above |top|.
   PRBool haveFloats = PR_FALSE;
-  for (PRUint32 i = mFloats.Length(); i > 0; --i) {
+  for (PRUint32 i = floatCount; i > 0; --i) {
     const FloatInfo &fi = mFloats[i-1];
     if (fi.mLeftYMost <= top && fi.mRightYMost <= top) {
       // There aren't any more floats that could intersect this band.
       break;
     }
     if (fi.mRect.IsEmpty()) {
       // For compatibility, ignore floats with empty rects, even though it
       // disagrees with the spec.  (We might want to fix this in the
diff --git a/layout/generic/nsFloatManager.h b/layout/generic/nsFloatManager.h
--- a/layout/generic/nsFloatManager.h
+++ b/layout/generic/nsFloatManager.h
@@ -59,16 +59,28 @@ public:
   nsFloatManager(nsIPresShell* aPresShell);
   ~nsFloatManager();
 
   void* operator new(size_t aSize) CPP_THROW_NEW;
   void operator delete(void* aPtr, size_t aSize);
 
   static void Shutdown();
 
+  // Structure that stores the current state of a frame manager for
+  // Save/Restore purposes.
+  struct SavedState;
+  friend struct SavedState;
+  struct SavedState {
+  private:
+    PRUint32 mFloatInfoCount;
+    nscoord mX, mY;
+    
+    friend class nsFloatManager;
+  };
+
   /**
    * Translate the current origin by the specified (dx, dy). This
    * creates a new local coordinate space relative to the current
    * coordinate space.
    */
   void Translate(nscoord aDx, nscoord aDy) { mX += aDx; mY += aDy; }
 
   /**
@@ -87,28 +99,31 @@ public:
    * |aMaxHeight|.  The left and right edges of the rectangle give the
    * area available for line boxes in that space.
    *
    * @param aY [in] vertical coordinate for top of available space
    *           desired
    * @param aMaxHeight [in] maximum height of available space desired
    * @param aContentAreaWidth [in] the width of the content area (whose left
    *                          edge must be zero in the current translation)
+   * @param aState [in] If null, use the current state, otherwise, do
+   *                    computation based only on floats present in the given
+   *                    saved state.
    * @param aHasFloats [out] whether there are floats at the sides of
    *                    the return value including those that do not
    *                    reduce the line box width at all (because they
    *                    are entirely in the margins)
    * @return the resulting rectangle for line boxes.  It will not go
    *         left of 0, nor right of aContentAreaWidth, but will be
    *         narrower when floats are present.
    *
    * aY and aAvailSpace are positioned relative to the current translation
    */
   nsRect GetBand(nscoord aY, nscoord aMaxHeight, nscoord aContentAreaWidth,
-                 PRBool* aHasFloats) const;
+                 SavedState* aState, PRBool* aHasFloats) const;
 
   /**
    * Add a float that comes after all floats previously added.  Its top
    * must be even with or below the top of all previous floats.
    *
    * aMarginRect is relative to the current translation.  The caller
    * must ensure aMarginRect.height >= 0 and aMarginRect.width >= 0.
    */
@@ -123,28 +138,16 @@ public:
    * not be removed, YOU LOSE.
    */
   nsresult RemoveTrailingRegions(nsIFrame* aFrameList);
 
 private:
   struct FloatInfo;
 public:
 
-  // Structure that stores the current state of a frame manager for
-  // Save/Restore purposes.
-  struct SavedState;
-  friend struct SavedState;
-  struct SavedState {
-  private:
-    PRUint32 mFloatInfoCount;
-    nscoord mX, mY;
-    
-    friend class nsFloatManager;
-  };
-
   PRBool HasAnyFloats() const { return !mFloats.IsEmpty(); }
 
   /**
    * Methods for dealing with the propagation of float damage during
    * reflow.
    */
   PRBool HasFloatDamage() const
   {
@@ -167,17 +170,19 @@ public:
   void PushState(SavedState* aState);
 
   /**
    * Restores the float manager to the saved state.
    * 
    * These states must be managed using stack discipline. PopState can only
    * be used after PushState has been used to save the state, and it can only
    * be used once --- although it can be omitted; saved states can be ignored.
-   * States must be popped in the reverse order they were pushed. 
+   * States must be popped in the reverse order they were pushed.  A
+   * call to PopState invalidates any saved states Pushed after the
+   * state passed to PopState was pushed.
    */
   void PopState(SavedState* aState);
 
   /**
    * Get the top of the last float placed into the float manager, to
    * enforce the rule that a float can't be above an earlier float.
    * Returns the minimum nscoord value if there are no floats.
    *
diff --git a/layout/reftests/bugs/428810-1-ltr-ref.html b/layout/reftests/bugs/428810-1-ltr-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-1-ltr-ref.html
@@ -0,0 +1,10 @@
+<!DOCTYPE HTML>
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 20px"></div>
+<div style="margin-left: 40px; display: list-item;">
+  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</div>
+
diff --git a/layout/reftests/bugs/428810-1-rtl-ref.html b/layout/reftests/bugs/428810-1-rtl-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-1-rtl-ref.html
@@ -0,0 +1,11 @@
+<!DOCTYPE HTML>
+<html dir="rtl">
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 20px"></div>
+<div style="margin-right: 40px; display: list-item;">
+  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</div>
+
diff --git a/layout/reftests/bugs/428810-1a-ltr.html b/layout/reftests/bugs/428810-1a-ltr.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-1a-ltr.html
@@ -0,0 +1,12 @@
+<!DOCTYPE HTML>
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: left; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-left: 40px; width: 70px; display: list-item;">
+  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</div>
+
diff --git a/layout/reftests/bugs/428810-1a-rtl.html b/layout/reftests/bugs/428810-1a-rtl.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-1a-rtl.html
@@ -0,0 +1,13 @@
+<!DOCTYPE HTML>
+<html dir="rtl">
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: right; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-right: 40px; width: 70px; display: list-item;">
+  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</div>
+
diff --git a/layout/reftests/bugs/428810-1b-ltr.html b/layout/reftests/bugs/428810-1b-ltr.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-1b-ltr.html
@@ -0,0 +1,12 @@
+<!DOCTYPE HTML>
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: left; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-left: 40px; width: 70px; display: list-item;">
+  <div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>
+</div>
+
diff --git a/layout/reftests/bugs/428810-1b-rtl.html b/layout/reftests/bugs/428810-1b-rtl.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-1b-rtl.html
@@ -0,0 +1,13 @@
+<!DOCTYPE HTML>
+<html dir="rtl">
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: right; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-right: 40px; width: 70px; display: list-item;">
+  <div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>
+</div>
+
diff --git a/layout/reftests/bugs/428810-1c-ltr.html b/layout/reftests/bugs/428810-1c-ltr.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-1c-ltr.html
@@ -0,0 +1,12 @@
+<!DOCTYPE HTML>
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: left; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-left: 40px; width: 70px; display: list-item;">
+  
+</div>
+
diff --git a/layout/reftests/bugs/428810-1c-rtl.html b/layout/reftests/bugs/428810-1c-rtl.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-1c-rtl.html
@@ -0,0 +1,13 @@
+<!DOCTYPE HTML>
+<html dir="rtl">
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: right; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-right: 40px; width: 70px; display: list-item;">
+  
+</div>
+
diff --git a/layout/reftests/bugs/428810-1d-ltr.html b/layout/reftests/bugs/428810-1d-ltr.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-1d-ltr.html
@@ -0,0 +1,12 @@
+<!DOCTYPE HTML>
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: left; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-left: 40px; width: 70px; display: list-item;">
+  <div></div>
+</div>
+
diff --git a/layout/reftests/bugs/428810-1d-rtl.html b/layout/reftests/bugs/428810-1d-rtl.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-1d-rtl.html
@@ -0,0 +1,13 @@
+<!DOCTYPE HTML>
+<html dir="rtl">
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: right; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-right: 40px; width: 70px; display: list-item;">
+  <div></div>
+</div>
+
diff --git a/layout/reftests/bugs/428810-2-ltr-ref.html b/layout/reftests/bugs/428810-2-ltr-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-2-ltr-ref.html
@@ -0,0 +1,10 @@
+<!DOCTYPE HTML>
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 20px"></div>
+<div style="margin-left: 40px; display: list-item;">
+  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</div>
+
diff --git a/layout/reftests/bugs/428810-2-rtl-ref.html b/layout/reftests/bugs/428810-2-rtl-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-2-rtl-ref.html
@@ -0,0 +1,11 @@
+<!DOCTYPE HTML>
+<html dir="rtl">
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 20px"></div>
+<div style="margin-right: 40px; display: list-item;">
+  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</div>
+
diff --git a/layout/reftests/bugs/428810-2a-ltr.html b/layout/reftests/bugs/428810-2a-ltr.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-2a-ltr.html
@@ -0,0 +1,13 @@
+<!DOCTYPE HTML>
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: left; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-left: 40px; width: 70px; display: list-item;">
+  <div style="float: left; height: 20px; width: 15px"></div>
+  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</div>
+
diff --git a/layout/reftests/bugs/428810-2a-rtl.html b/layout/reftests/bugs/428810-2a-rtl.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-2a-rtl.html
@@ -0,0 +1,14 @@
+<!DOCTYPE HTML>
+<html dir="rtl">
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: right; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-right: 40px; width: 70px; display: list-item;">
+  <div style="float: right; height: 20px; width: 15px"></div>
+  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</div>
+
diff --git a/layout/reftests/bugs/428810-2b-ltr.html b/layout/reftests/bugs/428810-2b-ltr.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-2b-ltr.html
@@ -0,0 +1,13 @@
+<!DOCTYPE HTML>
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: left; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-left: 40px; width: 70px; display: list-item;">
+  <div style="float: left; height: 20px; width: 15px"></div>
+  <div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>
+</div>
+
diff --git a/layout/reftests/bugs/428810-2b-rtl.html b/layout/reftests/bugs/428810-2b-rtl.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-2b-rtl.html
@@ -0,0 +1,14 @@
+<!DOCTYPE HTML>
+<html dir="rtl">
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: right; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-right: 40px; width: 70px; display: list-item;">
+  <div style="float: right; height: 20px; width: 15px"></div>
+  <div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>
+</div>
+
diff --git a/layout/reftests/bugs/428810-2e-ltr.html b/layout/reftests/bugs/428810-2e-ltr.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-2e-ltr.html
@@ -0,0 +1,13 @@
+<!DOCTYPE HTML>
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: left; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-left: 40px; width: 70px; display: list-item;">
+  <div style="float: left; height: 20px; width: 15px"></div>
+  <div style="clear:left"></div>
+</div>
+
diff --git a/layout/reftests/bugs/428810-2e-rtl.html b/layout/reftests/bugs/428810-2e-rtl.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-2e-rtl.html
@@ -0,0 +1,14 @@
+<!DOCTYPE HTML>
+<html dir="rtl">
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: right; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-right: 40px; width: 70px; display: list-item;">
+  <div style="float: right; height: 20px; width: 15px"></div>
+  <div style="clear:right"></div>
+</div>
+
diff --git a/layout/reftests/bugs/428810-2f-ltr.html b/layout/reftests/bugs/428810-2f-ltr.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-2f-ltr.html
@@ -0,0 +1,12 @@
+<!DOCTYPE HTML>
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: left; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-left: 40px; width: 70px; display: list-item;">
+  <div style="float: left; height: 20px; width: 15px"></div>
+</div>
+
diff --git a/layout/reftests/bugs/428810-2f-rtl.html b/layout/reftests/bugs/428810-2f-rtl.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-2f-rtl.html
@@ -0,0 +1,13 @@
+<!DOCTYPE HTML>
+<html dir="rtl">
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: right; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-right: 40px; width: 70px; display: list-item;">
+  <div style="float: right; height: 20px; width: 15px"></div>
+</div>
+
diff --git a/layout/reftests/bugs/428810-3-ltr-ref.html b/layout/reftests/bugs/428810-3-ltr-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-3-ltr-ref.html
@@ -0,0 +1,10 @@
+<!DOCTYPE HTML>
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 40px"></div>
+<div style="margin-left: 40px; display: list-item;">
+  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</div>
+
diff --git a/layout/reftests/bugs/428810-3-rtl-ref.html b/layout/reftests/bugs/428810-3-rtl-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-3-rtl-ref.html
@@ -0,0 +1,11 @@
+<!DOCTYPE HTML>
+<html dir="rtl">
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 40px"></div>
+<div style="margin-right: 40px; display: list-item;">
+  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</div>
+
diff --git a/layout/reftests/bugs/428810-3a-ltr.html b/layout/reftests/bugs/428810-3a-ltr.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-3a-ltr.html
@@ -0,0 +1,13 @@
+<!DOCTYPE HTML>
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: left; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-left: 40px; width: 70px; display: list-item;">
+  <div style="float: left; height: 20px; width: 60px"></div>
+  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</div>
+
diff --git a/layout/reftests/bugs/428810-3a-rtl.html b/layout/reftests/bugs/428810-3a-rtl.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-3a-rtl.html
@@ -0,0 +1,14 @@
+<!DOCTYPE HTML>
+<html dir="rtl">
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: right; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-right: 40px; width: 70px; display: list-item;">
+  <div style="float: right; height: 20px; width: 60px"></div>
+  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</div>
+
diff --git a/layout/reftests/bugs/428810-3b-ltr.html b/layout/reftests/bugs/428810-3b-ltr.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-3b-ltr.html
@@ -0,0 +1,13 @@
+<!DOCTYPE HTML>
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: left; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-left: 40px; width: 70px; display: list-item;">
+  <div style="float: left; height: 20px; width: 60px"></div>
+  <div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>
+</div>
+
diff --git a/layout/reftests/bugs/428810-3b-rtl.html b/layout/reftests/bugs/428810-3b-rtl.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-3b-rtl.html
@@ -0,0 +1,14 @@
+<!DOCTYPE HTML>
+<html dir="rtl">
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: right; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-right: 40px; width: 70px; display: list-item;">
+  <div style="float: right; height: 20px; width: 60px"></div>
+  <div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>
+</div>
+
diff --git a/layout/reftests/bugs/428810-3e-ltr.html b/layout/reftests/bugs/428810-3e-ltr.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-3e-ltr.html
@@ -0,0 +1,13 @@
+<!DOCTYPE HTML>
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: left; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-left: 40px; width: 70px; display: list-item;">
+  <div style="float: left; height: 20px; width: 60px"></div>
+  <div style="clear:left"></div>
+</div>
+
diff --git a/layout/reftests/bugs/428810-3e-rtl.html b/layout/reftests/bugs/428810-3e-rtl.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-3e-rtl.html
@@ -0,0 +1,14 @@
+<!DOCTYPE HTML>
+<html dir="rtl">
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: right; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-right: 40px; width: 70px; display: list-item;">
+  <div style="float: right; height: 20px; width: 60px"></div>
+  <div style="clear:right"></div>
+</div>
+
diff --git a/layout/reftests/bugs/428810-3f-ltr.html b/layout/reftests/bugs/428810-3f-ltr.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-3f-ltr.html
@@ -0,0 +1,12 @@
+<!DOCTYPE HTML>
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: left; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-left: 40px; width: 70px; display: list-item;">
+  <div style="float: left; height: 20px; width: 60px"></div>
+</div>
+
diff --git a/layout/reftests/bugs/428810-3f-rtl.html b/layout/reftests/bugs/428810-3f-rtl.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-3f-rtl.html
@@ -0,0 +1,13 @@
+<!DOCTYPE HTML>
+<html dir="rtl">
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px">
+  <div style="float: right; height: 20px; width: 100px"></div>
+</div>
+<div style="margin-right: 40px; width: 70px; display: list-item;">
+  <div style="float: right; height: 20px; width: 60px"></div>
+</div>
+
diff --git a/layout/reftests/bugs/428810-empty-ltr-ref.html b/layout/reftests/bugs/428810-empty-ltr-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-empty-ltr-ref.html
@@ -0,0 +1,10 @@
+<!DOCTYPE HTML>
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px"></div>
+<div style="margin-left: 100px; display: list-item;">
+  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</div>
+
diff --git a/layout/reftests/bugs/428810-empty-rtl-ref.html b/layout/reftests/bugs/428810-empty-rtl-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/428810-empty-rtl-ref.html
@@ -0,0 +1,11 @@
+<!DOCTYPE HTML>
+<html dir="rtl">
+<title>Testcase, bug 428810</title>
+<style type="text/css">
+html, body { margin: 0; padding: 0; }
+</style>
+<div style="height: 10px"></div>
+<div style="margin-right: 100px; display: list-item;">
+  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</div>
+
diff --git a/layout/reftests/bugs/reftest.list b/layout/reftests/bugs/reftest.list
--- a/layout/reftests/bugs/reftest.list
+++ b/layout/reftests/bugs/reftest.list
@@ -933,16 +933,49 @@ fails-if(MOZ_WIDGET_TOOLKIT=="gtk2") == 
 == 427370-1.html 427370-1-ref.html
 == 427730-1.html 427730-1-ref.html
 == 428278.html 428278-ref.html
 == 428423-1a.html 428423-1-ref.html
 == 428423-1b.html 428423-1-ref.html
 == 428521-1a.html 428521-1-ref.html
 == 428521-1b.html 428521-1-ref.html
 == 428521-1c.html 428521-1-ref.html
+== 428810-1a-ltr.html 428810-1-ltr-ref.html
+== 428810-1b-ltr.html 428810-1-ltr-ref.html
+fails == 428810-1c-ltr.html 428810-empty-ltr-ref.html # bug 179596
+fails == 428810-1d-ltr.html 428810-empty-ltr-ref.html # bug 179596
+!= 428810-1-ltr-ref.html about:blank
+== 428810-2a-ltr.html 428810-2-ltr-ref.html
+== 428810-2b-ltr.html 428810-2-ltr-ref.html
+fails == 428810-2e-ltr.html 428810-empty-ltr-ref.html # bug 179596
+fails == 428810-2f-ltr.html 428810-empty-ltr-ref.html # bug 179596
+!= 428810-2-ltr-ref.html about:blank
+== 428810-3a-ltr.html 428810-3-ltr-ref.html
+== 428810-3b-ltr.html 428810-3-ltr-ref.html
+fails == 428810-3e-ltr.html 428810-empty-ltr-ref.html # bug 179596
+fails == 428810-3f-ltr.html 428810-empty-ltr-ref.html # bug 179596
+!= 428810-3-ltr-ref.html about:blank
+== 428810-1a-rtl.html 428810-1-rtl-ref.html
+== 428810-1b-rtl.html 428810-1-rtl-ref.html
+fails == 428810-1c-rtl.html 428810-empty-rtl-ref.html # bug 179596
+fails == 428810-1d-rtl.html 428810-empty-rtl-ref.html # bug 179596
+!= 428810-1-rtl-ref.html about:blank
+!= 428810-1-rtl-ref.html 428810-1-ltr-ref.html
+== 428810-2a-rtl.html 428810-2-rtl-ref.html
+== 428810-2b-rtl.html 428810-2-rtl-ref.html
+fails == 428810-2e-rtl.html 428810-empty-rtl-ref.html # bug 179596
+fails == 428810-2f-rtl.html 428810-empty-rtl-ref.html # bug 179596
+!= 428810-2-rtl-ref.html about:blank
+!= 428810-2-rtl-ref.html 428810-2-ltr-ref.html
+== 428810-3a-rtl.html 428810-3-rtl-ref.html
+== 428810-3b-rtl.html 428810-3-rtl-ref.html
+fails == 428810-3e-rtl.html 428810-empty-rtl-ref.html # bug 179596
+fails == 428810-3f-rtl.html 428810-empty-rtl-ref.html # bug 179596
+!= 428810-3-rtl-ref.html about:blank
+!= 428810-3-rtl-ref.html 428810-3-ltr-ref.html
 == 430412-1.html 430412-1-ref.html
 == 430813-1.html 430813-1-ref.html
 == 430813-2.html 430813-2-ref.html
 == 430813-3.html 430813-3-ref.html
 == 431341-1.html 431341-1-ref.html
 == 431341-2.html 431341-2-ref.html
 == 431520-1.html 431520-1-ref.html
 == 440112.html 440112-ref.html
