From: L. David Baron <dbaron@dbaron.org>

Add support for animation of 'visibility'.  (NEEDS CHANGES TO APPLY ONLY TO TRANSITIONS AND NOT TO SMIL)

diff --git a/layout/style/nsStyleAnimation.cpp b/layout/style/nsStyleAnimation.cpp
--- a/layout/style/nsStyleAnimation.cpp
+++ b/layout/style/nsStyleAnimation.cpp
@@ -134,16 +134,24 @@ nsStyleAnimation::ComputeDistance(nsCSSP
       switch (aProperty) {
         case eCSSProperty_font_stretch: {
           // just like eUnit_Integer.
           PRInt32 startInt = aStartValue.GetIntValue();
           PRInt32 endInt = aEndValue.GetIntValue();
           aDistance = PR_ABS(endInt - startInt);
           break;
         }
+        case eCSSProperty_visibility: {
+          PRInt32 startVal =
+            aStartValue.GetIntValue() == NS_STYLE_VISIBILITY_VISIBLE;
+          PRInt32 endVal =
+            aEndValue.GetIntValue() == NS_STYLE_VISIBILITY_VISIBLE;
+          aDistance = PR_ABS(startVal - endVal);
+          break;
+        }
         default:
           success = PR_FALSE;
           break;
       }
       break;
     case eUnit_Integer: {
       PRInt32 startInt = aStartValue.GetIntValue();
       PRInt32 endInt = aEndValue.GetIntValue();
@@ -508,16 +516,25 @@ nsStyleAnimation::AddWeighted(nsCSSPrope
       switch (aProperty) {
         case eCSSProperty_font_stretch: {
           // Animate just like eUnit_Integer.
           PRInt32 result = NS_floor(aCoeff1 * double(aValue1.GetIntValue()) +
                                     aCoeff2 * double(aValue2.GetIntValue()));
           aResultValue.SetIntValue(result, eUnit_Enumerated);
           break;
         }
+        case eCSSProperty_visibility: {
+          PRInt32 val1 = aValue1.GetIntValue() == NS_STYLE_VISIBILITY_VISIBLE;
+          PRInt32 val2 = aValue2.GetIntValue() == NS_STYLE_VISIBILITY_VISIBLE;
+          double interp = aCoeff1 * val1 + aCoeff2 * val2;
+          PRInt32 result = interp >= 1.0 ? NS_STYLE_VISIBILITY_VISIBLE
+                                         : NS_STYLE_VISIBILITY_HIDDEN;
+          aResultValue.SetIntValue(result, eUnit_Enumerated);
+          break;
+        }
         default:
           success = PR_FALSE;
           break;
       }
       break;
     case eUnit_Integer: {
       // http://dev.w3.org/csswg/css3-transitions/#animation-of-property-types-
       // says we should use floor
diff --git a/layout/style/test/test_transitions_per_property.html b/layout/style/test/test_transitions_per_property.html
--- a/layout/style/test/test_transitions_per_property.html
+++ b/layout/style/test/test_transitions_per_property.html
@@ -118,16 +118,17 @@ var supported_properties = {
     "stroke-dashoffset": [ test_length_transition, test_percent_transition ],
     "stroke-miterlimit": [ test_float_aboveOne_transition ],
     "stroke-opacity" : [ test_float_zeroToOne_transition ],
     "stroke-width": [ test_length_transition, test_percent_transition ],
     "text-indent": [ test_length_transition, test_percent_transition ],
     "text-shadow": [ test_shadow_transition ],
     "top": [ test_length_transition, test_percent_transition ],
     "vertical-align": [ test_length_transition, test_percent_transition ],
+    "visibility": [ test_visibility_transition ],
     "width": [ test_length_transition, test_percent_transition ],
     "word-spacing": [ test_length_transition ],
     "z-index": [ test_zindex_transition, test_pos_integer_or_auto_transition ],
 };
 
 var div = document.getElementById("display");
 var cs = getComputedStyle(div, "");
 
@@ -543,12 +544,23 @@ function test_rect_transition(prop) {
        "rect-valued property " + prop + ": can't interpolate auto components");
     div.style.setProperty(prop, "rect(0px, 6px, 4px, 2px)", "");
   }
   div.style.setProperty(prop, "auto", "");
   is(cs.getPropertyValue(prop), "auto",
      "rect-valued property " + prop + ": can't interpolate auto components");
 }
 
+function test_visibility_transition(prop) {
+  div.style.setProperty("-moz-transition-property", "none", "");
+  div.style.setProperty(prop, "hidden", "");
+  is(cs.getPropertyValue(prop), "hidden",
+     "visibility property " + prop + ": computed value before transition");
+  div.style.setProperty("-moz-transition-property", prop, "");
+  div.style.setProperty(prop, "visible", "");
+  is(cs.getPropertyValue(prop), "hidden",
+     "visibility property " + prop + ": interpolation of visibility");
+}
+
 </script>
 </pre>
 </body>
 </html>
