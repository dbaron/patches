From: L. David Baron <dbaron@dbaron.org>

Make nsMediaFeature::mKeywordTable an mData union.  (Bug 522149)  r=bzbarsky

diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -1818,17 +1818,17 @@ CSSParserImpl::ParseMediaQueryExpression
           expr->mValue.SetFloatValue(mToken.mNumber, eCSSUnit_Centimeter);
         } else {
           rv = PR_FALSE;
         }
       }
       break;
     case nsMediaFeature::eEnumerated:
       rv = ParseVariant(expr->mValue, VARIANT_KEYWORD,
-                        feature->mKeywordTable);
+                        feature->mData.mKeywordTable);
       break;
   }
   if (!rv || !ExpectSymbol(')', PR_TRUE)) {
     REPORT_UNEXPECTED(PEMQExpectedFeatureValue);
     SkipUntil(')');
     return PR_FALSE;
   }
 
diff --git a/layout/style/nsCSSStyleSheet.cpp b/layout/style/nsCSSStyleSheet.cpp
--- a/layout/style/nsCSSStyleSheet.cpp
+++ b/layout/style/nsCSSStyleSheet.cpp
@@ -457,17 +457,17 @@ nsMediaQuery::AppendToString(nsAString& 
             aString.AppendLiteral("dpcm");
           }
           break;
         case nsMediaFeature::eEnumerated:
           NS_ASSERTION(expr.mValue.GetUnit() == eCSSUnit_Enumerated,
                        "bad unit");
           AppendASCIItoUTF16(
               nsCSSProps::ValueToKeyword(expr.mValue.GetIntValue(),
-                                         feature->mKeywordTable),
+                                         feature->mData.mKeywordTable),
               aString);
           break;
       }
     }
 
     aString.AppendLiteral(")");
   }
 }
diff --git a/layout/style/nsMediaFeatures.cpp b/layout/style/nsMediaFeatures.cpp
--- a/layout/style/nsMediaFeatures.cpp
+++ b/layout/style/nsMediaFeatures.cpp
@@ -257,104 +257,104 @@ GetGrid(nsPresContext* aPresContext, nsC
  */
 
 /* static */ const nsMediaFeature
 nsMediaFeatures::features[] = {
     {
         &nsGkAtoms::width,
         nsMediaFeature::eMinMaxAllowed,
         nsMediaFeature::eLength,
-        nsnull,
+        { nsnull },
         GetWidth
     },
     {
         &nsGkAtoms::height,
         nsMediaFeature::eMinMaxAllowed,
         nsMediaFeature::eLength,
-        nsnull,
+        { nsnull },
         GetHeight
     },
     {
         &nsGkAtoms::deviceWidth,
         nsMediaFeature::eMinMaxAllowed,
         nsMediaFeature::eLength,
-        nsnull,
+        { nsnull },
         GetDeviceWidth
     },
     {
         &nsGkAtoms::deviceHeight,
         nsMediaFeature::eMinMaxAllowed,
         nsMediaFeature::eLength,
-        nsnull,
+        { nsnull },
         GetDeviceHeight
     },
     {
         &nsGkAtoms::orientation,
         nsMediaFeature::eMinMaxNotAllowed,
         nsMediaFeature::eEnumerated,
-        kOrientationKeywords,
+        { kOrientationKeywords },
         GetOrientation
     },
     {
         &nsGkAtoms::aspectRatio,
         nsMediaFeature::eMinMaxAllowed,
         nsMediaFeature::eIntRatio,
-        nsnull,
+        { nsnull },
         GetAspectRatio
     },
     {
         &nsGkAtoms::deviceAspectRatio,
         nsMediaFeature::eMinMaxAllowed,
         nsMediaFeature::eIntRatio,
-        nsnull,
+        { nsnull },
         GetDeviceAspectRatio
     },
     {
         &nsGkAtoms::color,
         nsMediaFeature::eMinMaxAllowed,
         nsMediaFeature::eInteger,
-        nsnull,
+        { nsnull },
         GetColor
     },
     {
         &nsGkAtoms::colorIndex,
         nsMediaFeature::eMinMaxAllowed,
         nsMediaFeature::eInteger,
-        nsnull,
+        { nsnull },
         GetColorIndex
     },
     {
         &nsGkAtoms::monochrome,
         nsMediaFeature::eMinMaxAllowed,
         nsMediaFeature::eInteger,
-        nsnull,
+        { nsnull },
         GetMonochrome
     },
     {
         &nsGkAtoms::resolution,
         nsMediaFeature::eMinMaxAllowed,
         nsMediaFeature::eResolution,
-        nsnull,
+        { nsnull },
         GetResolution
     },
     {
         &nsGkAtoms::scan,
         nsMediaFeature::eMinMaxNotAllowed,
         nsMediaFeature::eEnumerated,
-        kScanKeywords,
+        { kScanKeywords },
         GetScan
     },
     {
         &nsGkAtoms::grid,
         nsMediaFeature::eMinMaxNotAllowed,
         nsMediaFeature::eBoolInteger,
-        nsnull,
+        { nsnull },
         GetGrid
     },
     // Null-mName terminator:
     {
         nsnull,
         nsMediaFeature::eMinMaxAllowed,
         nsMediaFeature::eInteger,
-        nsnull,
+        { nsnull },
         nsnull
     },
 };
diff --git a/layout/style/nsMediaFeatures.h b/layout/style/nsMediaFeatures.h
--- a/layout/style/nsMediaFeatures.h
+++ b/layout/style/nsMediaFeatures.h
@@ -68,18 +68,25 @@ struct nsMediaFeature {
 
         // Note that a number of pieces of code (both for parsing and
         // for matching of valueless expressions) assume that all numeric
         // value types cannot be negative.  The parsing code also does
         // not allow zeros in eIntRatio types.
     };
     ValueType mValueType;
 
-    // The same format as the keyword tables in nsCSSProps.
-    const PRInt32* mKeywordTable;
+    union {
+      // In static arrays, it's the first member that's initialized.  We
+      // need that to be void* so we can initialize both other types.
+      // This member should never be accessed by name.
+      const void* mInitializer_;
+      // If mValueType == eEnumerated:  const PRInt32*: keyword table in
+      //   the same format as the keyword tables in nsCSSProps.
+      const PRInt32* mKeywordTable;
+    } mData;
 
     // A function that returns the current value for this feature for a
     // given presentation.  If it returns eCSSUnit_Null, the feature is
     // not present.
     nsMediaFeatureValueGetter mGetter;
 };
 
 class nsMediaFeatures {
