From: L. David Baron <dbaron@dbaron.org>

Make nsMediaFeature::mKeywordTable a more generic mData.  (Bug 522149)

diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -1818,17 +1818,17 @@ CSSParserImpl::ParseMediaQueryExpression
           expr->mValue.SetFloatValue(mToken.mNumber, eCSSUnit_Centimeter);
         } else {
           rv = PR_FALSE;
         }
       }
       break;
     case nsMediaFeature::eEnumerated:
       rv = ParseVariant(expr->mValue, VARIANT_KEYWORD,
-                        feature->mKeywordTable);
+                        static_cast<const PRInt32*>(feature->mKeywordTable));
       break;
   }
   if (!rv || !ExpectSymbol(')', PR_TRUE)) {
     REPORT_UNEXPECTED(PEMQExpectedFeatureValue);
     SkipUntil(')');
     return PR_FALSE;
   }
 
diff --git a/layout/style/nsCSSStyleSheet.cpp b/layout/style/nsCSSStyleSheet.cpp
--- a/layout/style/nsCSSStyleSheet.cpp
+++ b/layout/style/nsCSSStyleSheet.cpp
@@ -457,17 +457,18 @@ nsMediaQuery::AppendToString(nsAString& 
             aString.AppendLiteral("dpcm");
           }
           break;
         case nsMediaFeature::eEnumerated:
           NS_ASSERTION(expr.mValue.GetUnit() == eCSSUnit_Enumerated,
                        "bad unit");
           AppendASCIItoUTF16(
               nsCSSProps::ValueToKeyword(expr.mValue.GetIntValue(),
-                                         feature->mKeywordTable),
+                                         static_cast<const PRInt32*>(
+                                           feature->mKeywordTable));
               aString);
           break;
       }
     }
 
     aString.AppendLiteral(")");
   }
 }
diff --git a/layout/style/nsMediaFeatures.h b/layout/style/nsMediaFeatures.h
--- a/layout/style/nsMediaFeatures.h
+++ b/layout/style/nsMediaFeatures.h
@@ -68,18 +68,19 @@ struct nsMediaFeature {
 
         // Note that a number of pieces of code (both for parsing and
         // for matching of valueless expressions) assume that all numeric
         // value types cannot be negative.  The parsing code also does
         // not allow zeros in eIntRatio types.
     };
     ValueType mValueType;
 
-    // The same format as the keyword tables in nsCSSProps.
-    const PRInt32* mKeywordTable;
+    // If mValueType == eEnumerated:  const PRInt32*: keyword table in
+    //   the same format as the keyword tables in nsCSSProps.
+    const void* mData;
 
     // A function that returns the current value for this feature for a
     // given presentation.  If it returns eCSSUnit_Null, the feature is
     // not present.
     nsMediaFeatureValueGetter mGetter;
 };
 
 class nsMediaFeatures {
