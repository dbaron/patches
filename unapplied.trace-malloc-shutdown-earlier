From: L. David Baron <dbaron@dbaron.org>

Don't call NS_TraceMallocShutdown atexit(), since Windows can't deal with it.

diff --git a/toolkit/xre/nsAppRunner.cpp b/toolkit/xre/nsAppRunner.cpp
--- a/toolkit/xre/nsAppRunner.cpp
+++ b/toolkit/xre/nsAppRunner.cpp
@@ -3161,5 +3161,13 @@ XRE_main(int argc, char* argv[], const n
       CrashReporter::UnsetExceptionHandler();
 #endif
 
+#ifdef NS_TRACE_MALLOC
+#ifdef XP_WIN32
+  NS_TraceMallocShutdown();
+#else
+  atexit(NS_TraceMallocShutdown);
+#endif
+#endif
+
   return NS_FAILED(rv) ? 1 : 0;
 }
diff --git a/tools/trace-malloc/lib/nsTraceMalloc.c b/tools/trace-malloc/lib/nsTraceMalloc.c
--- a/tools/trace-malloc/lib/nsTraceMalloc.c
+++ b/tools/trace-malloc/lib/nsTraceMalloc.c
@@ -1474,8 +1474,6 @@ PR_IMPLEMENT(void) NS_TraceMallocStartup
         log_header(logfd);
     }
 
-    atexit(NS_TraceMallocShutdown);
-
     /*
      * We only allow one thread until NS_TraceMallocStartup is called.
      * When it is, we have to initialize tpIndex before allocating tmlock
