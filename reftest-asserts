Make reftest test for assertions on individual tests.  (Bug 472557)

diff --git a/layout/reftests/reftest-sanity/reftest.list b/layout/reftests/reftest-sanity/reftest.list
--- a/layout/reftests/reftest-sanity/reftest.list
+++ b/layout/reftests/reftest-sanity/reftest.list
@@ -34,8 +34,16 @@ HTTP == data:text/html,<div>Text</div> d
 HTTP != blank.html default.html
 
 HTTP(..) == filter-1.xhtml filter-1-ref.xhtml
 HTTP(..) == filter-2.xhtml filter-2-ref.xhtml
 
 # test that the MozReftestInvalidate event fires
 == invalidation.html about:blank
 == zoom-invalidation.html zoom-invalidation-ref.html
+
+# test parsing of asserts() expressions
+asserts(0) load about:blank
+asserts(0,5) load about:blank
+asserts-if(true,0) load about:blank
+asserts-if(false,7) load about:blank
+asserts-if(true,0,4) load about:blank
+asserts-if(false,6,8) load about:blank
diff --git a/layout/tools/reftest/reftest.js b/layout/tools/reftest/reftest.js
--- a/layout/tools/reftest/reftest.js
+++ b/layout/tools/reftest/reftest.js
@@ -39,16 +39,17 @@
 const CC = Components.classes;
 const CI = Components.interfaces;
 const CR = Components.results;
 
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
 
 const NS_LOCAL_FILE_CONTRACTID = "@mozilla.org/file/local;1";
 const IO_SERVICE_CONTRACTID = "@mozilla.org/network/io-service;1";
+const DEBUG_CONTRACTID = "@mozilla.org/xpcom/debug;1";
 const NS_LOCALFILEINPUTSTREAM_CONTRACTID =
           "@mozilla.org/network/file-input-stream;1";
 const NS_SCRIPTSECURITYMANAGER_CONTRACTID =
           "@mozilla.org/scriptsecuritymanager;1";
 const NS_REFTESTHELPER_CONTRACTID =
           "@mozilla.org/reftest-helper;1";
 const NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX =
           "@mozilla.org/network/protocol;1?name=";
@@ -69,35 +70,41 @@ var gTestResults = {
   // Successful...
   Pass: 0,
   LoadOnly: 0,
   // Unexpected...
   Exception: 0,
   FailedLoad: 0,
   UnexpectedFail: 0,
   UnexpectedPass: 0,
+  AssertionUnexpected: 0,
+  AssertionUnexpectedFixed: 0,
   // Known problems...
   KnownFail : 0,
+  AssertionKnown: 0,
   Random : 0,
   Skip: 0,
 };
 var gTotalTests = 0;
 var gState;
 var gCurrentURL;
 var gFailureTimeout;
 var gFailureReason;
 var gServer;
 var gCount = 0;
+var gAssertionCount = 0;
 
 var gIOService;
+var gDebug;
 var gWindowUtils;
 
 var gCurrentTestStartTime;
 var gSlowestTestTime = 0;
 var gSlowestTestURL;
+var gClearingForAssertionCheck = false;
 
 const EXPECTED_PASS = 0;
 const EXPECTED_FAIL = 1;
 const EXPECTED_RANDOM = 2;
 const EXPECTED_DEATH = 3;  // test must be skipped to avoid e.g. crash/hang
 const EXPECTED_LOAD = 4; // test without a reference (just test that it does
                          // not assert, crash, hang, or leak)
 
@@ -135,16 +142,17 @@ function OnRefTestLoad()
             gWindowUtils = null;
     } catch (e) {
         gWindowUtils = null;
     }
 
     var windowElem = document.documentElement;
 
     gIOService = CC[IO_SERVICE_CONTRACTID].getService(CI.nsIIOService);
+    gDebug = CC[DEBUG_CONTRACTID].getService(CI.nsIDebug2);
 
     try {
         ReadTopManifest(window.arguments[0]);
         BuildUseCounts();
         if (gServer) {
             gServer.registerContentType("sjs", "sjs");
             gServer.start(HTTP_SERVER_PORT);
         }
@@ -216,28 +224,43 @@ function ReadManifest(aURL)
             str = str.substring(0, i);
         // strip leading and trailing whitespace
         str = str.replace(/^\s*/, '').replace(/\s*$/, '');
         if (!str || str == "")
             continue;
         var items = str.split(/\s+/); // split on whitespace
 
         var expected_status = EXPECTED_PASS;
-        while (items[0].match(/^(fails|random|skip)/)) {
+        var minAsserts = 0;
+        var maxAsserts = 0;
+        while (items[0].match(/^(fails|random|skip|asserts)/)) {
             var item = items.shift();
             var stat;
             var cond;
             var m = item.match(/^(fails|random|skip)-if(\(.*\))$/);
             if (m) {
                 stat = m[1];
                 // Note: m[2] contains the parentheses, and we want them.
                 cond = Components.utils.evalInSandbox(m[2], sandbox);
             } else if (item.match(/^(fails|random|skip)$/)) {
                 stat = item;
                 cond = true;
+            } else if ((m = item.match(/^asserts\((\d+)(,\d+)?\)$/))) {
+                cond = false;
+                minAsserts = Number(m[1]);
+                maxAsserts = (m[2] == undefined) ? minAsserts
+                                                 : Number(m[2].substring(1));
+            } else if ((m = item.match(/^asserts-if\((.*?),(\d+)(,\d+)?\)$/))) {
+                cond = false;
+                if (Components.utils.evalInSandbox("(" + m[1] + ")", sandbox)) {
+                    minAsserts = Number(m[2]);
+                    maxAsserts =
+                      (m[3] == undefined) ? minAsserts
+                                          : Number(m[3].substring(1));
+                }
             } else {
                 throw "Error in manifest file " + aURL.spec + " line " + lineNo;
             }
 
             if (cond) {
                 if (stat == "fails") {
                     expected_status = EXPECTED_FAIL;
                 } else if (stat == "random") {
@@ -282,16 +305,18 @@ function ReadManifest(aURL)
             var prettyPath = runHttp
                            ? gIOService.newURI(items[1], null, listURL).spec
                            : testURI.spec;
             secMan.checkLoadURI(aURL, testURI,
                                 CI.nsIScriptSecurityManager.DISALLOW_SCRIPT);
             gURLs.push( { equal: true /* meaningless */,
                           expected: expected_status,
                           prettyPath: prettyPath,
+                          minAsserts: minAsserts,
+                          maxAsserts: maxAsserts,
                           url1: testURI,
                           url2: null } );
         } else if (items[0] == "==" || items[0] == "!=") {
             if (items.length != 3)
                 throw "Error in manifest file " + aURL.spec + " line " + lineNo;
             var [testURI, refURI] = runHttp
                                   ? ServeFiles(aURL, httpDepth,
                                                listURL.file.parent, [items[1], items[2]])
@@ -302,16 +327,18 @@ function ReadManifest(aURL)
                            : testURI.spec;
             secMan.checkLoadURI(aURL, testURI,
                                 CI.nsIScriptSecurityManager.DISALLOW_SCRIPT);
             secMan.checkLoadURI(aURL, refURI,
                                 CI.nsIScriptSecurityManager.DISALLOW_SCRIPT);
             gURLs.push( { equal: (items[0] == "=="),
                           expected: expected_status,
                           prettyPath: prettyPath,
+                          minAsserts: minAsserts,
+                          maxAsserts: maxAsserts,
                           url1: testURI,
                           url2: refURI } );
         } else {
             throw "Error in manifest file " + aURL.spec + " line " + lineNo;
         }
     } while (more);
 }
 
@@ -426,25 +453,31 @@ function DoneTests()
          "ms (" + gSlowestTestURL + ")\n");
 
     dump("REFTEST INFO | Result summary:\n");
     var count = gTestResults.Pass + gTestResults.LoadOnly;
     dump("REFTEST INFO | Successful: " + count + " (" +
          gTestResults.Pass + " pass, " +
          gTestResults.LoadOnly + " load only)\n");
     count = gTestResults.Exception + gTestResults.FailedLoad +
-            gTestResults.UnexpectedFail + gTestResults.UnexpectedPass;
+            gTestResults.UnexpectedFail + gTestResults.UnexpectedPass +
+            gTestResults.AssertionUnexpected +
+            gTestResults.AssertionUnexpectedFixed;
     dump("REFTEST INFO | Unexpected: " + count + " (" +
          gTestResults.UnexpectedFail + " unexpected fail, " +
          gTestResults.UnexpectedPass + " unexpected pass, " +
+         gTestResults.AssertionUnexpected + " unexpected asserts, " +
+         gTestResults.AssertionUnexpectedFixed + " unexpected fixed asserts, " +
          gTestResults.FailedLoad + " failed load, " +
          gTestResults.Exception + " exception)\n");
-    count = gTestResults.KnownFail + gTestResults.Random + gTestResults.Skip;
+    count = gTestResults.KnownFail + gTestResults.AssertionKnown +
+            gTestResults.Random + gTestResults.Skip;
     dump("REFTEST INFO | Known problems: " + count + " (" +
          gTestResults.KnownFail + " known fail, " +
+         gTestResults.AssertionKnown + " known asserts, " +
          gTestResults.Random + " random, " +
          gTestResults.Skip + " skipped)\n");
 
     dump("REFTEST INFO | Total canvas count = " + gRecycledCanvases.length + "\n");
 
     if (gServer)
         gServer.stop();
     goQuitApplication();
@@ -462,16 +495,21 @@ function resetZoom() {
 }
     
 function OnDocumentLoad(event)
 {
     if (event.target != gBrowser.contentDocument)
         // Ignore load events for subframes.
         return;
         
+    if (gClearingForAssertionCheck) {
+        DoAssertionCheck();
+        return;
+    }
+
     if (gBrowser.contentDocument.location.href != gCurrentURL)
         // Ignore load events for previous documents.
         return;
 
     var contentRootElement = gBrowser.contentDocument.documentElement;
 
     function shouldWait() {
         // use getAttribute because className works differently in HTML and SVG
@@ -703,18 +741,17 @@ function DocumentLoaded()
     }
 
     clearTimeout(gFailureTimeout);
     gFailureReason = null;
 
     if (gURLs[0].expected == EXPECTED_LOAD) {
         ++gTestResults.LoadOnly;
         dump("REFTEST TEST-PASS | " + gURLs[0].prettyPath + " | (LOAD ONLY)\n");
-        gURLs.shift();
-        StartCurrentTest();
+        FinishTestItem();
         return;
     }
 
     if (gURICanvases[gCurrentURL]) {
         gCurrentCanvas = gURICanvases[gCurrentURL];
     } else if (gCurrentCanvas == null) {
         InitCurrentCanvasWithSnapshot();
     }
@@ -792,24 +829,69 @@ function DocumentLoaded()
                 } else {
                     dump("REFTEST   IMAGE: " + gCanvas1.toDataURL() + "\n");
                 }
             }
 
             UpdateCanvasCache(gURLs[0].url1, gCanvas1);
             UpdateCanvasCache(gURLs[0].url2, gCanvas2);
 
-            gURLs.shift();
-            StartCurrentTest();
+            FinishTestItem();
             break;
         default:
             throw "Unexpected state.";
     }
 }
 
 function LoadFailed()
 {
     ++gTestResults.FailedLoad;
     dump("REFTEST TEST-UNEXPECTED-FAIL | " +
          gURLs[0]["url" + gState].spec + " | " + gFailureReason + "\n");
+    FinishTestItem();
+}
+
+function FinishTestItem()
+{
+    // Replace document with about:blank in case there are
+    // assertions when unloading.
+    gClearingForAssertionCheck = true;
+    gBrowser.loadURI("about:blank");
+}
+
+function DoAssertionCheck()
+{
+    gClearingForAssertionCheck = false;
+
+    var newAssertionCount = gDebug.assertionCount;
+    var numAsserts = newAssertionCount - gAssertionCount;
+    gAssertionCount = newAssertionCount;
+
+    var minAsserts = gURLs[0].minAsserts;
+    var maxAsserts = gURLs[0].maxAsserts;
+
+    var expectedAssertions = "expected " + minAsserts;
+    if (minAsserts != maxAsserts) {
+        expectedAssertions += " to " + maxAsserts;
+    }
+    expectedAssertions += " assertions";
+
+    if (numAsserts < minAsserts) {
+        ++gTestResults.AssertionUnexpectedFixed;
+        dump("REFTEST TEST-UNEXPECTED-PASS | " + gURLs[0].prettyPath +
+             " | assertion count " + numAsserts + " is less than " +
+             expectedAssertions + "\n");
+    } else if (numAsserts > maxAsserts) {
+        ++gTestResults.AssertionUnexpected;
+        dump("REFTEST TEST-UNEXPECTED-FAIL | " + gURLs[0].prettyPath +
+             " | assertion count " + numAsserts + " is more than " +
+             expectedAssertions + "\n");
+    } else if (numAsserts != 0) {
+        ++gTestResults.AssertionKnown;
+        dump("REFTEST TEST-KNOWN-FAIL | " + gURLs[0].prettyPath +
+             " | assertion count " + numAsserts + " matches " +
+             expectedAssertions + "\n");
+    }
+
+    // And start the next test.
     gURLs.shift();
     StartCurrentTest();
 }
