From: L. David Baron <dbaron@dbaron.org>

Implement the HTML5 algorithm for parsing a legacy color value:  do loose color parsing in all modes.  (Bug 121738)  r=sicking

diff --git a/content/base/src/nsAttrValue.cpp b/content/base/src/nsAttrValue.cpp
--- a/content/base/src/nsAttrValue.cpp
+++ b/content/base/src/nsAttrValue.cpp
@@ -1159,22 +1159,17 @@ nsAttrValue::ParseColor(const nsAString&
     }
   } else {
     if (NS_ColorNameToRGB(colorStr, &color)) {
       SetColorValue(color, aString);
       return PR_TRUE;
     }
   }
 
-  if (aDocument->GetCompatibilityMode() != eCompatibility_NavQuirks) {
-    return PR_FALSE;
-  }
-
-  // In compatibility mode, try LooseHexToRGB as a fallback for either
-  // of the above two possibilities.
+  // Use NS_LooseHexToRGB as a fallback if nothing above worked.
   if (NS_LooseHexToRGB(colorStr, &color)) {
     SetColorValue(color, aString);
     return PR_TRUE;
   }
 
   return PR_FALSE;
 }
 
diff --git a/content/base/test/test_bug493881.html b/content/base/test/test_bug493881.html
--- a/content/base/test/test_bug493881.html
+++ b/content/base/test/test_bug493881.html
@@ -10,17 +10,17 @@ https://bugzilla.mozilla.org/show_bug.cg
   <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
   <script type="text/javascript" src="test_bug493881.js"></script>     
   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
   <style type="text/css">
 
   </style>
 </head>
 
-<body>
+<body id="body">
 
 <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=493881"
    target="_blank" >Mozilla Bug 493881</a>
 
 <p id="display"></p>
 
 <a id="nonvisitedlink" href="http://www.example.com/">Non-visited link</a>
 <a id="visitedlink" href="">Visited link</a>
diff --git a/content/base/test/test_bug493881.js b/content/base/test/test_bug493881.js
--- a/content/base/test/test_bug493881.js
+++ b/content/base/test/test_bug493881.js
@@ -5,17 +5,17 @@
  */
 
 SimpleTest.waitForExplicitFinish();
 
 var legacyProps = ["fgColor", "bgColor", "linkColor", "vlinkColor", "alinkColor"];
 var testColors = ["blue", "silver", "green", "orange", "red"];
 var rgbTestColors = ["rgb(255, 0, 0)", "rgb(192, 192, 192)", "rgb(0, 128, 0)", "rgb(255, 165, 0)", "rgb(255, 0, 0)"];
 var idPropList = [ {id: "plaintext", prop: "color"},
-                   {id: "plaintext", prop: "background-color"},
+                   {id: "body", prop: "background-color"},
                    {id: "nonvisitedlink", prop: "color"},
                    {id: "visitedlink", prop: "color"} ];
 var initialValues = [];
 
 function setAndTestProperty(prop, color) {
   var initial = document[prop];
   document[prop] = color;
   is(document[prop], initial, "document[" + prop + "] not ignored before body");
@@ -53,20 +53,20 @@ addLoadEvent( function() {
   // Verify that setting legacy color props to undefined after BODY loads will cause them
   // to be read as the string "undefined".
   for (var i = 0; i < legacyProps.length; i++) {
     document[legacyProps[i]] = undefined;
     is(document[legacyProps[i]], "undefined", 
       "Unexpected value of " + legacyProps[i] + " after setting to undefined");
   }
   
-  // Verify that setting legacy color props to undefined did not affect rendering 
-  // (computed styles).
+  // Verify that setting legacy color props to undefined led to result
+  // of parsing undefined as a color.
   for (i = 0; i < idPropList.length; i++) {
     var style = window.getComputedStyle(document.getElementById(idPropList[i].id), null);
     var color = style.getPropertyValue(idPropList[i].prop);
-    is(color, idPropList[i].initialComputedColor, 
-      "element's style changed by setting legacy prop to undefined");
+    is(color, "rgb(0, 239, 14)", 
+      "element's style should get result of parsing undefined as a color");
   }
 
   // Mark the test as finished.
   setTimeout(SimpleTest.finish, 0);
 });
