From: L. David Baron <dbaron@dbaron.org>

Accept PR_INT32_MIN as an integer in CSS.  (Bug 602890)  r=bzbarsky  a2.0=roc

diff --git a/layout/reftests/counters/counter-reset-integer-range-ref.html b/layout/reftests/counters/counter-reset-integer-range-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/counters/counter-reset-integer-range-ref.html
@@ -0,0 +1,9 @@
+<!DOCTYPE HTML>
+<title>Expected integer range</title>
+0
+2147483647
+2147483647
+2147483647
+-2147483647
+-2147483648
+-2147483648
diff --git a/layout/reftests/counters/counter-reset-integer-range.html b/layout/reftests/counters/counter-reset-integer-range.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/counters/counter-reset-integer-range.html
@@ -0,0 +1,14 @@
+<!DOCTYPE HTML>
+<title>Expected integer range</title>
+<style>
+
+span::after { content: counter(c); }
+
+</style>
+<span style="counter-reset: c 0"></span>
+<span style="counter-reset: c 2147483647"></span>
+<span style="counter-reset: c 2147483648"></span>
+<span style="counter-reset: c 2147483649"></span>
+<span style="counter-reset: c -2147483647"></span>
+<span style="counter-reset: c -2147483648"></span>
+<span style="counter-reset: c -2147483649"></span>
diff --git a/layout/reftests/counters/reftest.list b/layout/reftests/counters/reftest.list
--- a/layout/reftests/counters/reftest.list
+++ b/layout/reftests/counters/reftest.list
@@ -55,8 +55,9 @@ fails == t1202-counters-10-b-test.html t
 == t120401-scope-03-c-test.html t120401-scope-03-c-reference.html
 == t120401-scope-04-d-test.html t120401-scope-04-d-reference.html
 == t120403-content-none-00-c-test.html t120403-content-none-00-c-reference.html
 == t120403-display-none-00-c-test.html t120403-display-none-00-c-reference.html
 == t120403-visibility-00-c-test.html t120403-visibility-00-c-reference.html
 == text-boundaries-subpixel.html text-boundaries-subpixel-ref.html
 == counter-hebrew-test.html counter-hebrew-reference.html
 == counters-hebrew-test.html counters-hebrew-reference.html
+== counter-reset-integer-range.html counter-reset-integer-range-ref.html
diff --git a/layout/style/nsCSSScanner.cpp b/layout/style/nsCSSScanner.cpp
--- a/layout/style/nsCSSScanner.cpp
+++ b/layout/style/nsCSSScanner.cpp
@@ -1201,21 +1201,22 @@ nsCSSScanner::ParseNumber(PRInt32 c, nsC
   // Time to reassemble our number.
   float value = float(sign * (intPart + fracPart));
   if (gotE) {
     // pow(), not powf(), because at least wince doesn't have the latter.
     // And explicitly cast everything to doubles to avoid issues with
     // overloaded pow() on Windows.
     value *= pow(10.0, double(expSign * exponent));
   } else if (!gotDot) {
-    if (intPart > PR_INT32_MAX) {
-      // Just clamp it.
-      intPart = PR_INT32_MAX;
+    // Clamp values outside of integer range.
+    if (sign > 0) {
+      aToken.mInteger = PRInt32(NS_MIN(intPart, double(PR_INT32_MAX)));
+    } else {
+      aToken.mInteger = PRInt32(NS_MAX(-intPart, double(PR_INT32_MIN)));
     }
-    aToken.mInteger = PRInt32(sign * intPart);
     aToken.mIntegerValid = PR_TRUE;
   }
 
   nsString& ident = aToken.mIdent;
   ident.Truncate();
 
   // Look at character that terminated the number
   if (c >= 0) {
