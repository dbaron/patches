From: L. David Baron <dbaron@dbaron.org>

Bug 474655 - Warn when nsIDOMCSSStyleDeclaration::GetPropertyCSSValue is called.  r+sr=bzbarsky

diff --git a/dom/locales/en-US/chrome/layout/css.properties b/dom/locales/en-US/chrome/layout/css.properties
--- a/dom/locales/en-US/chrome/layout/css.properties
+++ b/dom/locales/en-US/chrome/layout/css.properties
@@ -1,15 +1,17 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 MimeNotCss=The stylesheet %1$S was not loaded because its MIME type, “%2$S”, is not “text/css”.
 MimeNotCssWarn=The stylesheet %1$S was loaded as CSS even though its MIME type, “%2$S”, is not “text/css”.
 
+UseOfGetPropertyCSSValueWarning=Use of getPropertyCSSValue() is deprecated.  To upgrade your code, use getPropertyValue() instead.
+
 PEUnexpEOF2=Unexpected end of file while searching for %1$S.
 PEParseRuleWSOnly=Whitespace-only string given to be parsed as rule.
 PEDeclDropped=Declaration dropped.
 PEDeclSkipped=Skipped to next declaration.
 PEUnknownProperty=Unknown property ‘%1$S’.
 PEValueParsingError=Error in parsing value for ‘%1$S’.
 PEExpectEndValue=Expected end of value but found ‘%1$S’.
 PERuleTrailing=Expected end of rule but found ‘%1$S’.
diff --git a/layout/style/nsCSSRules.cpp b/layout/style/nsCSSRules.cpp
--- a/layout/style/nsCSSRules.cpp
+++ b/layout/style/nsCSSRules.cpp
@@ -1369,16 +1369,26 @@ nsCSSFontFaceStyleDecl::GetAuthoredPrope
   // GetPropertyValue, currently.
   return GetPropertyValue(nsCSSProps::LookupFontDesc(propertyName), aResult);
 }
 
 already_AddRefed<dom::CSSValue>
 nsCSSFontFaceStyleDecl::GetPropertyCSSValue(const nsAString & propertyName,
                                             ErrorResult& aRv)
 {
+  nsCOMPtr<nsIURI> sheetURI;
+  nsIDocument *document = nullptr;
+  CSSStyleSheet *sheet = ContainingRule()->GetStyleSheet();
+  if (sheet) {
+    sheetURI = sheet->GetSheetURI();
+    document = sheet->GetOwningDocument();
+  }
+  nsStyleUtil::ReportUseOfDeprecatedMethod(document, sheetURI,
+                                           "UseOfGetPropertyCSSValueWarning");
+
   // ??? nsDOMCSSDeclaration returns null/NS_OK, but that seems wrong.
   aRv.Throw(NS_ERROR_NOT_IMPLEMENTED);
   return nullptr;
 }
 
 NS_IMETHODIMP
 nsCSSFontFaceStyleDecl::RemoveProperty(const nsAString & propertyName,
                                        nsAString & aResult)
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -371,17 +371,17 @@ nsComputedDOMStyle::GetParentRule(nsIDOM
 
 NS_IMETHODIMP
 nsComputedDOMStyle::GetPropertyValue(const nsAString& aPropertyName,
                                      nsAString& aReturn)
 {
   aReturn.Truncate();
 
   ErrorResult error;
-  RefPtr<CSSValue> val = GetPropertyCSSValue(aPropertyName, error);
+  RefPtr<CSSValue> val = GetPropertyCSSValueInternal(aPropertyName, error);
   if (error.Failed()) {
     return error.StealNSResult();
   }
 
   if (val) {
     nsString text;
     val->GetCssText(text, error);
     aReturn.Assign(text);
@@ -748,16 +748,33 @@ nsComputedDOMStyle::ClearCurrentStyleSou
   if (!mResolvedStyleContext) {
     mStyleContext = nullptr;
   }
 }
 
 already_AddRefed<CSSValue>
 nsComputedDOMStyle::GetPropertyCSSValue(const nsAString& aPropertyName, ErrorResult& aRv)
 {
+  // Issue this warning only for content; chrome currently uses this
+  // method and we haven't yet implemented an alternative.
+  // FIXME: It's not safe to use IsCallerChrome here (bug 1275003).
+  nsCOMPtr<nsIDocument> document = do_QueryReferent(mDocumentWeak);
+  nsStyleUtil::
+    ReportUseOfDeprecatedMethod(document,
+                                document ? document->GetDocumentURI()
+                                         : nullptr,
+                                "UseOfGetPropertyCSSValueWarning");
+
+  return GetPropertyCSSValueInternal(aPropertyName, aRv);
+}
+
+already_AddRefed<CSSValue>
+nsComputedDOMStyle::GetPropertyCSSValueInternal(const nsAString& aPropertyName,
+                                                ErrorResult& aRv)
+{
   nsCSSPropertyID prop =
     nsCSSProps::LookupProperty(aPropertyName, CSSEnabledState::eForAllContent);
 
   bool needsLayoutFlush;
   nsComputedStyleMap::Entry::ComputeMethod getter;
 
   if (prop == eCSSPropertyExtra_variable) {
     needsLayoutFlush = false;
diff --git a/layout/style/nsComputedDOMStyle.h b/layout/style/nsComputedDOMStyle.h
--- a/layout/style/nsComputedDOMStyle.h
+++ b/layout/style/nsComputedDOMStyle.h
@@ -117,16 +117,20 @@ public:
   static void UnregisterPrefChangeCallbacks();
 
   // nsIMutationObserver
   NS_DECL_NSIMUTATIONOBSERVER_PARENTCHAINCHANGED
 
 private:
   virtual ~nsComputedDOMStyle();
 
+  already_AddRefed<mozilla::dom::CSSValue>
+  GetPropertyCSSValueInternal(const nsAString& aPropertyName,
+                              mozilla::ErrorResult& aRv);
+
   void AssertFlushedPendingReflows() {
     NS_ASSERTION(mFlushedPendingReflows,
                  "property getter should have been marked layout-dependent");
   }
 
   nsMargin GetAdjustedValuesForBoxSizing();
 
   // Helper method for DoGetTextAlign[Last].
diff --git a/layout/style/nsDOMCSSDeclaration.cpp b/layout/style/nsDOMCSSDeclaration.cpp
--- a/layout/style/nsDOMCSSDeclaration.cpp
+++ b/layout/style/nsDOMCSSDeclaration.cpp
@@ -7,19 +7,21 @@
 
 #include "nsDOMCSSDeclaration.h"
 
 #include "nsCSSParser.h"
 #include "mozilla/DeclarationBlockInlines.h"
 #include "mozilla/StyleSheetInlines.h"
 #include "mozilla/css/Rule.h"
 #include "mozilla/DeclarationBlockInlines.h"
+#include "mozilla/css/Loader.h"
 #include "mozilla/dom/CSS2PropertiesBinding.h"
 #include "nsCSSProps.h"
 #include "nsCOMPtr.h"
+#include "nsStyleUtil.h"
 #include "mozAutoDocUpdate.h"
 #include "nsIURI.h"
 #include "mozilla/dom/BindingUtils.h"
 #include "nsContentUtils.h"
 #include "nsQueryObject.h"
 #include "mozilla/layers/ScrollLinkedEffectDetector.h"
 
 using namespace mozilla;
@@ -163,16 +165,28 @@ nsDOMCSSDeclaration::GetLength(uint32_t*
   return NS_OK;
 }
 
 already_AddRefed<dom::CSSValue>
 nsDOMCSSDeclaration::GetPropertyCSSValue(const nsAString& aPropertyName, ErrorResult& aRv)
 {
   // We don't support CSSValue yet so we'll just return null...
 
+  RefPtr<css::Loader> cssLoader;
+  nsCOMPtr<nsIURI> baseURI, sheetURI;
+  nsCOMPtr<nsIPrincipal> sheetPrincipal;
+
+  CSSParsingEnvironment env;
+  GetCSSParsingEnvironment(env);
+  if (env.mPrincipal) {
+    nsStyleUtil::ReportUseOfDeprecatedMethod(env.mCSSLoader->GetDocument(),
+                                             env.mSheetURI,
+                                             "UseOfGetPropertyCSSValueWarning");
+  }
+
   return nullptr;
 }
 
 void
 nsDOMCSSDeclaration::IndexedGetter(uint32_t aIndex, bool& aFound, nsAString& aPropName)
 {
   DeclarationBlock* decl = GetCSSDeclaration(eOperation_Read);
   aFound = decl && decl->GetNthProperty(aIndex, aPropName);
diff --git a/layout/style/nsStyleUtil.cpp b/layout/style/nsStyleUtil.cpp
--- a/layout/style/nsStyleUtil.cpp
+++ b/layout/style/nsStyleUtil.cpp
@@ -10,16 +10,18 @@
 #include "nsCSSProps.h"
 #include "nsRuleNode.h"
 #include "nsROCSSPrimitiveValue.h"
 #include "nsStyleStruct.h"
 #include "nsIContentPolicy.h"
 #include "nsIContentSecurityPolicy.h"
 #include "nsIURI.h"
 #include "nsPrintfCString.h"
+#include "nsIScriptError.h"
+#include "nsContentUtils.h"
 
 using namespace mozilla;
 
 //------------------------------------------------------------------------------
 // Font Algorithm Code
 //------------------------------------------------------------------------------
 
 // Compare two language strings
@@ -776,8 +778,19 @@ nsStyleUtil::CSPAllowsInlineStyle(nsICon
                             nonce,
                             false, // aParserCreated only applies to scripts
                             aStyleText, aLineNumber,
                             &allowInlineStyle);
   NS_ENSURE_SUCCESS(rv, false);
 
   return allowInlineStyle;
 }
+
+/* static */ void
+nsStyleUtil::ReportUseOfDeprecatedMethod(nsIDocument* aDocument,
+                                         nsIURI* aURI,
+                                         const char* aWarning)
+{
+  nsContentUtils::ReportToConsole(nsIScriptError::warningFlag,
+                                  NS_LITERAL_CSTRING("CSS Object Model"),
+                                  aDocument, nsContentUtils::eCSS_PROPERTIES,
+                                  aWarning, nullptr, 0, aURI);
+}
diff --git a/layout/style/nsStyleUtil.h b/layout/style/nsStyleUtil.h
--- a/layout/style/nsStyleUtil.h
+++ b/layout/style/nsStyleUtil.h
@@ -14,16 +14,17 @@
 #include "nsCRT.h"
 
 class nsCSSValue;
 class nsStringComparator;
 class nsStyleCoord;
 class nsIContent;
 class nsIPrincipal;
 class nsIURI;
+class nsIDocument;
 struct gfxFontFeature;
 struct gfxAlternateValue;
 struct nsCSSValueList;
 
 // Style utility functions
 class nsStyleUtil {
 public:
 
@@ -173,16 +174,20 @@ public:
    */
   static bool CSPAllowsInlineStyle(nsIContent* aContent,
                                    nsIPrincipal* aPrincipal,
                                    nsIURI* aSourceURI,
                                    uint32_t aLineNumber,
                                    const nsSubstring& aStyleText,
                                    nsresult* aRv);
 
+  static void ReportUseOfDeprecatedMethod(nsIDocument* aDocument,
+                                          nsIURI* aURI,
+                                          const char* aWarning);
+
   template<size_t N>
   static bool MatchesLanguagePrefix(const char16_t* aLang, size_t aLen,
                                     const char16_t (&aPrefix)[N])
   {
     return !nsCRT::strncmp(aLang, aPrefix, N - 1) &&
            (aLen == N - 1 || aLang[N - 1] == '-');
   }
 
