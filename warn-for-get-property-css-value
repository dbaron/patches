From: L. David Baron <dbaron@dbaron.org>

Warn when nsIDOMCSSStyleDeclaration::GetPropertyCSSValue is called.  (Bug 474655)  r+sr=bzbarsky

diff --git a/dom/locales/en-US/chrome/layout/css.properties b/dom/locales/en-US/chrome/layout/css.properties
--- a/dom/locales/en-US/chrome/layout/css.properties
+++ b/dom/locales/en-US/chrome/layout/css.properties
@@ -1,15 +1,17 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 MimeNotCss=The stylesheet %1$S was not loaded because its MIME type, "%2$S", is not "text/css".
 MimeNotCssWarn=The stylesheet %1$S was loaded as CSS even though its MIME type, "%2$S", is not "text/css".
 
+UseOfGetPropertyCSSValueWarning=Use of getPropertyCSSValue() is deprecated.  To upgrade your code, use getPropertyValue() instead.
+
 PEUnexpEOF2=Unexpected end of file while searching for %1$S.
 PEParseRuleWSOnly=Whitespace-only string given to be parsed as rule.
 PEDeclDropped=Declaration dropped.
 PEDeclSkipped=Skipped to next declaration.
 PEUnknownProperty=Unknown property '%1$S'.
 PEValueParsingError=Error in parsing value for '%1$S'.
 PEExpectEndValue=Expected end of value but found '%1$S'.
 PERuleTrailing=Expected end of rule but found '%1$S'.
diff --git a/layout/style/nsCSSRules.cpp b/layout/style/nsCSSRules.cpp
--- a/layout/style/nsCSSRules.cpp
+++ b/layout/style/nsCSSRules.cpp
@@ -1614,16 +1614,26 @@ nsCSSFontFaceStyleDecl::GetPropertyValue
   return GetPropertyValue(nsCSSProps::LookupFontDesc(propertyName), aResult);
 }
 
 // nsIDOMCSSValue getPropertyCSSValue (in DOMString propertyName);
 already_AddRefed<dom::CSSValue>
 nsCSSFontFaceStyleDecl::GetPropertyCSSValue(const nsAString & propertyName,
                                             ErrorResult& aRv)
 {
+  nsCOMPtr<nsIURI> sheetURI;
+  nsIDocument *document = nullptr;
+  nsIStyleSheet *sheet = ContainingRule()->GetStyleSheet();
+  if (sheet) {
+    sheetURI = sheet->GetSheetURI();
+    document = sheet->GetOwningDocument();
+  }
+  nsStyleUtil::ReportUseOfDeprecatedMethod(document, sheetURI,
+                                           "UseOfGetPropertyCSSValueWarning");
+
   // ??? nsDOMCSSDeclaration returns null/NS_OK, but that seems wrong.
   aRv.Throw(NS_ERROR_NOT_IMPLEMENTED);
   return nullptr;
 }
 
 // DOMString removeProperty (in DOMString propertyName) raises (DOMException);
 NS_IMETHODIMP
 nsCSSFontFaceStyleDecl::RemoveProperty(const nsAString & propertyName,
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -241,17 +241,17 @@ nsComputedDOMStyle::GetParentRule(nsIDOM
 
 NS_IMETHODIMP
 nsComputedDOMStyle::GetPropertyValue(const nsAString& aPropertyName,
                                      nsAString& aReturn)
 {
   aReturn.Truncate();
 
   ErrorResult error;
-  nsRefPtr<CSSValue> val = GetPropertyCSSValue(aPropertyName, error);
+  nsRefPtr<CSSValue> val = GetPropertyCSSValueInternal(aPropertyName, error);
   if (error.Failed()) {
     return error.ErrorCode();
   }
 
   if (val) {
     nsString text;
     val->GetCssText(text, error);
     aReturn.Assign(text);
@@ -437,16 +437,34 @@ nsComputedDOMStyle::GetCSSParsingEnviron
   NS_RUNTIMEABORT("called nsComputedDOMStyle::GetCSSParsingEnvironment");
   // Just in case NS_RUNTIMEABORT ever stops killing us for some reason
   aCSSParseEnv.mPrincipal = nullptr;
 }
 
 already_AddRefed<CSSValue>
 nsComputedDOMStyle::GetPropertyCSSValue(const nsAString& aPropertyName, ErrorResult& aRv)
 {
+  // Issue this warning only for content; chrome currently uses this
+  // method and we haven't yet implemented an alternative.
+  if (!nsContentUtils::IsCallerChrome()) {
+    nsCOMPtr<nsIDocument> document = do_QueryReferent(mDocumentWeak);
+    nsStyleUtil::
+      ReportUseOfDeprecatedMethod(document,
+                                  document ? document->GetDocumentURI()
+                                           : nullptr,
+                                  "UseOfGetPropertyCSSValueWarning");
+  }
+
+  return GetPropertyCSSValueInternal(aPropertyName, aRv);
+}
+
+already_AddRefed<CSSValue>
+nsComputedDOMStyle::GetPropertyCSSValueInternal(const nsAString& aPropertyName,
+                                                ErrorResult& aRv)
+{
   NS_ASSERTION(!mStyleContextHolder, "bad state");
 
   nsCOMPtr<nsIDocument> document = do_QueryReferent(mDocumentWeak);
   if (!document) {
     aRv.Throw(NS_ERROR_NOT_AVAILABLE);
     return nullptr;
   }
 
diff --git a/layout/style/nsComputedDOMStyle.h b/layout/style/nsComputedDOMStyle.h
--- a/layout/style/nsComputedDOMStyle.h
+++ b/layout/style/nsComputedDOMStyle.h
@@ -91,16 +91,20 @@ public:
   virtual mozilla::css::Declaration* GetCSSDeclaration(bool) MOZ_OVERRIDE;
   virtual nsresult SetCSSDeclaration(mozilla::css::Declaration*) MOZ_OVERRIDE;
   virtual nsIDocument* DocToUpdate() MOZ_OVERRIDE;
   virtual void GetCSSParsingEnvironment(CSSParsingEnvironment& aCSSParseEnv) MOZ_OVERRIDE;
 
   static mozilla::dom::CSSValue* MatrixToCSSValue(gfx3DMatrix& aMatrix);
 
 private:
+  already_AddRefed<mozilla::dom::CSSValue>
+  GetPropertyCSSValueInternal(const nsAString& aPropertyName,
+                              mozilla::ErrorResult& aRv);
+
   void AssertFlushedPendingReflows() {
     NS_ASSERTION(mFlushedPendingReflows,
                  "property getter should have been marked layout-dependent");
   }
 
   nsMargin GetAdjustedValuesForBoxSizing();
 
 #define STYLE_STRUCT(name_, checkdata_cb_)                              \
diff --git a/layout/style/nsDOMCSSDeclaration.cpp b/layout/style/nsDOMCSSDeclaration.cpp
--- a/layout/style/nsDOMCSSDeclaration.cpp
+++ b/layout/style/nsDOMCSSDeclaration.cpp
@@ -5,18 +5,20 @@
 
 /* base class for DOM objects for element.style and cssStyleRule.style */
 
 #include "nsDOMCSSDeclaration.h"
 #include "nsCSSParser.h"
 #include "nsCSSStyleSheet.h"
 #include "mozilla/css/Rule.h"
 #include "mozilla/css/Declaration.h"
+#include "mozilla/css/Loader.h"
 #include "nsCSSProps.h"
 #include "nsCOMPtr.h"
+#include "nsStyleUtil.h"
 #include "mozAutoDocUpdate.h"
 
 using namespace mozilla;
 
 nsDOMCSSDeclaration::~nsDOMCSSDeclaration()
 {
 }
 
@@ -121,16 +123,28 @@ nsDOMCSSDeclaration::GetLength(uint32_t*
   return NS_OK;
 }
 
 already_AddRefed<dom::CSSValue>
 nsDOMCSSDeclaration::GetPropertyCSSValue(const nsAString& aPropertyName, ErrorResult& aRv)
 {
   // We don't support CSSValue yet so we'll just return null...
 
+  nsRefPtr<css::Loader> cssLoader;
+  nsCOMPtr<nsIURI> baseURI, sheetURI;
+  nsCOMPtr<nsIPrincipal> sheetPrincipal;
+
+  CSSParsingEnvironment env;
+  GetCSSParsingEnvironment(env);
+  if (env.mPrincipal) {
+    nsStyleUtil::ReportUseOfDeprecatedMethod(env.mCSSLoader->GetDocument(),
+                                             env.mSheetURI,
+                                             "UseOfGetPropertyCSSValueWarning");
+  }
+
   return nullptr;
 }
 
 void
 nsDOMCSSDeclaration::IndexedGetter(uint32_t aIndex, bool& aFound, nsAString& aPropName)
 {
   css::Declaration* decl = GetCSSDeclaration(false);
   aFound = decl && decl->GetNthProperty(aIndex, aPropName);
diff --git a/layout/style/nsStyleUtil.cpp b/layout/style/nsStyleUtil.cpp
--- a/layout/style/nsStyleUtil.cpp
+++ b/layout/style/nsStyleUtil.cpp
@@ -6,16 +6,18 @@
 #include "nsStyleUtil.h"
 #include "nsStyleConsts.h"
 
 #include "nsIContent.h"
 #include "nsReadableUtils.h"
 #include "nsCSSProps.h"
 #include "nsRuleNode.h"
 #include "nsIContentSecurityPolicy.h"
+#include "nsIScriptError.h"
+#include "nsContentUtils.h"
 
 using namespace mozilla;
 
 //------------------------------------------------------------------------------
 // Font Algorithm Code
 //------------------------------------------------------------------------------
 
 // Compare two language strings
@@ -468,8 +470,19 @@ nsStyleUtil::CSPAllowsInlineStyle(nsIPri
     if (!inlineOK) {
         // The inline style should be blocked.
         return false;
     }
   }
   // No CSP or a CSP that allows inline styles.
   return true;
 }
+
+/* static */ void
+nsStyleUtil::ReportUseOfDeprecatedMethod(nsIDocument* aDocument,
+                                         nsIURI* aURI,
+                                         const char* aWarning)
+{
+  nsContentUtils::ReportToConsole(nsIScriptError::warningFlag,
+                                  "CSS Object Model", aDocument,
+                                  nsContentUtils::eCSS_PROPERTIES,
+                                  aWarning, nullptr, 0, aURI);
+}
diff --git a/layout/style/nsStyleUtil.h b/layout/style/nsStyleUtil.h
--- a/layout/style/nsStyleUtil.h
+++ b/layout/style/nsStyleUtil.h
@@ -9,16 +9,18 @@
 #include "nsCSSProperty.h"
 #include "gfxFontFeatures.h"
 #include "nsIPrincipal.h"
 #include "nsSubstring.h"
 
 class nsCSSValue;
 class nsStringComparator;
 class nsIContent;
+class nsIURI;
+class nsIDocument;
 struct gfxFontFeature;
 class nsCSSValueList;
 template <class E> class nsTArray;
 
 // Style utility functions
 class nsStyleUtil {
 public:
 
@@ -103,12 +105,15 @@ public:
    *  block or allow inline styles will be located.
    */
   static bool CSPAllowsInlineStyle(nsIPrincipal* aPrincipal,
                                    nsIURI* aSourceURI,
                                    uint32_t aLineNumber,
                                    const nsSubstring& aStyleText,
                                    nsresult* aRv);
 
+  static void ReportUseOfDeprecatedMethod(nsIDocument* aDocument,
+                                          nsIURI* aURI,
+                                          const char* aWarning);
 };
 
 
 #endif /* nsStyleUtil_h___ */
