From: L. David Baron <dbaron@dbaron.org>

Warn when nsIDOMCSSStyleDeclaration::GetPropertyCSSValue is called.  (Bug 474655)  r+sr=bzbarsky

diff --git a/dom/locales/en-US/chrome/layout/css.properties b/dom/locales/en-US/chrome/layout/css.properties
--- a/dom/locales/en-US/chrome/layout/css.properties
+++ b/dom/locales/en-US/chrome/layout/css.properties
@@ -1,15 +1,17 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 MimeNotCss=The stylesheet %1$S was not loaded because its MIME type, "%2$S", is not "text/css".
 MimeNotCssWarn=The stylesheet %1$S was loaded as CSS even though its MIME type, "%2$S", is not "text/css".
 
+UseOfGetPropertyCSSValueWarning=Use of getPropertyCSSValue() is deprecated.  To upgrade your code, use getPropertyValue() instead.
+
 PEUnexpEOF2=Unexpected end of file while searching for %1$S.
 PEParseRuleWSOnly=Whitespace-only string given to be parsed as rule.
 PEDeclDropped=Declaration dropped.
 PEDeclSkipped=Skipped to next declaration.
 PEUnknownProperty=Unknown property '%1$S'.
 PEValueParsingError=Error in parsing value for '%1$S'.
 PEExpectEndValue=Expected end of value but found '%1$S'.
 PESkipAtRuleEOF=end of unknown at-rule
diff --git a/layout/style/nsCSSRules.cpp b/layout/style/nsCSSRules.cpp
--- a/layout/style/nsCSSRules.cpp
+++ b/layout/style/nsCSSRules.cpp
@@ -1492,16 +1492,26 @@ nsCSSFontFaceStyleDecl::GetPropertyValue
   return GetPropertyValue(nsCSSProps::LookupFontDesc(propertyName), aResult);
 }
 
 // nsIDOMCSSValue getPropertyCSSValue (in DOMString propertyName);
 NS_IMETHODIMP
 nsCSSFontFaceStyleDecl::GetPropertyCSSValue(const nsAString & propertyName,
                                             nsIDOMCSSValue **aResult)
 {
+  nsCOMPtr<nsIURI> sheetURI;
+  nsIDocument *document = nullptr;
+  nsIStyleSheet *sheet = ContainingRule()->mSheet;
+  if (sheet) {
+    sheetURI = sheet->GetSheetURI();
+    document = sheet->GetOwningDocument();
+  }
+  nsStyleUtil::ReportUseOfDeprecatedMethod(document, sheetURI,
+                                           "UseOfGetPropertyCSSValueWarning");
+
   // ??? nsDOMCSSDeclaration returns null/NS_OK, but that seems wrong.
   return NS_ERROR_NOT_IMPLEMENTED;
 }
 
 // DOMString removeProperty (in DOMString propertyName) raises (DOMException);
 NS_IMETHODIMP
 nsCSSFontFaceStyleDecl::RemoveProperty(const nsAString & propertyName,
                                        nsAString & aResult)
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -248,17 +248,18 @@ nsComputedDOMStyle::GetParentRule(nsIDOM
 NS_IMETHODIMP
 nsComputedDOMStyle::GetPropertyValue(const nsAString& aPropertyName,
                                      nsAString& aReturn)
 {
   nsCOMPtr<nsIDOMCSSValue> val;
 
   aReturn.Truncate();
 
-  nsresult rv = GetPropertyCSSValue(aPropertyName, getter_AddRefs(val));
+  nsresult rv =
+    GetPropertyCSSValueInternal(aPropertyName, getter_AddRefs(val));
   NS_ENSURE_SUCCESS(rv, rv);
 
   if (val) {
     rv = val->GetCssText(aReturn);
   }
 
   return rv;
 }
@@ -389,16 +390,34 @@ nsComputedDOMStyle::GetCSSParsingEnviron
   // Just in case NS_RUNTIMEABORT ever stops killing us for some reason
   aCSSParseEnv.mPrincipal = nullptr;
 }
 
 NS_IMETHODIMP
 nsComputedDOMStyle::GetPropertyCSSValue(const nsAString& aPropertyName,
                                         nsIDOMCSSValue** aReturn)
 {
+  // Issue this warning only for content; chrome currently uses this
+  // method and we haven't yet implemented an alternative.
+  if (!nsContentUtils::IsCallerChrome()) {
+    nsCOMPtr<nsIDocument> document = do_QueryReferent(mDocumentWeak);
+    nsStyleUtil::
+      ReportUseOfDeprecatedMethod(document,
+                                  document ? document->GetDocumentURI()
+                                           : nullptr,
+                                  "UseOfGetPropertyCSSValueWarning");
+  }
+
+  return GetPropertyCSSValueInternal(aPropertyName, aReturn);
+}
+
+nsresult
+nsComputedDOMStyle::GetPropertyCSSValueInternal(const nsAString& aPropertyName,
+                                                nsIDOMCSSValue** aReturn)
+{
   NS_ASSERTION(!mStyleContextHolder, "bad state");
 
   *aReturn = nullptr;
 
   nsCOMPtr<nsIDocument> document = do_QueryReferent(mDocumentWeak);
   NS_ENSURE_TRUE(document, NS_ERROR_NOT_AVAILABLE);
   document->FlushPendingLinkUpdates();
 
diff --git a/layout/style/nsComputedDOMStyle.h b/layout/style/nsComputedDOMStyle.h
--- a/layout/style/nsComputedDOMStyle.h
+++ b/layout/style/nsComputedDOMStyle.h
@@ -70,16 +70,19 @@ public:
   // on a nsComputedDOMStyle object, but must be defined to avoid
   // compile errors.
   virtual mozilla::css::Declaration* GetCSSDeclaration(bool);
   virtual nsresult SetCSSDeclaration(mozilla::css::Declaration*);
   virtual nsIDocument* DocToUpdate();
   virtual void GetCSSParsingEnvironment(CSSParsingEnvironment& aCSSParseEnv);
 
 private:
+  nsresult GetPropertyCSSValueInternal(const nsAString& aPropertyName,
+                                       nsIDOMCSSValue** aReturn);
+
   void AssertFlushedPendingReflows() {
     NS_ASSERTION(mFlushedPendingReflows,
                  "property getter should have been marked layout-dependent");
   }
 
 #define STYLE_STRUCT(name_, checkdata_cb_, ctor_args_)                  \
   const nsStyle##name_ * GetStyle##name_() {                            \
     return mStyleContextHolder->GetStyle##name_();                      \
diff --git a/layout/style/nsDOMCSSDeclaration.cpp b/layout/style/nsDOMCSSDeclaration.cpp
--- a/layout/style/nsDOMCSSDeclaration.cpp
+++ b/layout/style/nsDOMCSSDeclaration.cpp
@@ -14,16 +14,17 @@
 #include "mozilla/css/Rule.h"
 #include "mozilla/css/Declaration.h"
 #include "nsCSSProps.h"
 #include "nsCOMPtr.h"
 #include "nsIURL.h"
 #include "nsReadableUtils.h"
 #include "nsIPrincipal.h"
 #include "nsDOMClassInfoID.h"
+#include "nsStyleUtil.h"
 #include "mozAutoDocUpdate.h"
 
 namespace css = mozilla::css;
 
 nsDOMCSSDeclaration::~nsDOMCSSDeclaration()
 {
 }
 
@@ -133,16 +134,28 @@ nsDOMCSSDeclaration::GetLength(PRUint32*
 }
 
 NS_IMETHODIMP
 nsDOMCSSDeclaration::GetPropertyCSSValue(const nsAString& aPropertyName,
                                          nsIDOMCSSValue** aReturn)
 {
   NS_ENSURE_ARG_POINTER(aReturn);
 
+  nsRefPtr<css::Loader> cssLoader;
+  nsCOMPtr<nsIURI> baseURI, sheetURI;
+  nsCOMPtr<nsIPrincipal> sheetPrincipal;
+
+  CSSParsingEnvironment env;
+  GetCSSParsingEnvironment(env);
+  if (env.mPrincipal) {
+    nsStyleUtil::ReportUseOfDeprecatedMethod(env.mCSSLoader->GetDocument(),
+                                             env.mSheetURI,
+                                             "UseOfGetPropertyCSSValueWarning");
+  }
+
   // We don't support CSSValue yet so we'll just return null...
   *aReturn = nullptr;
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsDOMCSSDeclaration::Item(PRUint32 aIndex, nsAString& aReturn)
diff --git a/layout/style/nsStyleUtil.cpp b/layout/style/nsStyleUtil.cpp
--- a/layout/style/nsStyleUtil.cpp
+++ b/layout/style/nsStyleUtil.cpp
@@ -13,18 +13,20 @@
 
 #include "nsGkAtoms.h"
 #include "nsIContent.h"
 #include "nsINameSpaceManager.h"
 #include "nsIURI.h"
 #include "nsNetUtil.h"
 #include "nsReadableUtils.h"
 #include "nsTextFormatter.h"
+#include "nsIScriptError.h"
 #include "nsCSSProps.h"
 #include "nsRuleNode.h"
+#include "nsContentUtils.h"
 
 using namespace mozilla;
 
 //------------------------------------------------------------------------------
 // Font Algorithm Code
 //------------------------------------------------------------------------------
 
 // Compare two language strings
@@ -251,8 +253,18 @@ nsStyleUtil::IsSignificantChild(nsIConte
     return true;
   }
 
   return aTextIsSignificant && isText && aChild->TextLength() != 0 &&
          (aWhitespaceIsSignificant ||
           !aChild->TextIsOnlyWhitespace());
 }
 
+/* static */ void
+nsStyleUtil::ReportUseOfDeprecatedMethod(nsIDocument* aDocument,
+                                         nsIURI* aURI,
+                                         const char* aWarning)
+{
+  nsContentUtils::ReportToConsole(nsIScriptError::warningFlag,
+                                  "CSS Object Model", aDocument,
+                                  nsContentUtils::eCSS_PROPERTIES,
+                                  aWarning, nullptr, 0, aURI);
+}
diff --git a/layout/style/nsStyleUtil.h b/layout/style/nsStyleUtil.h
--- a/layout/style/nsStyleUtil.h
+++ b/layout/style/nsStyleUtil.h
@@ -10,16 +10,18 @@
 #include "gfxFontFeatures.h"
 #include "nsTArray.h"
 #include "nsCSSValue.h"
 
 struct nsStyleBackground;
 class nsString;
 class nsStringComparator;
 class nsIContent;
+class nsIURI;
+class nsIDocument;
 
 
 
 // Style utility functions
 class nsStyleUtil {
 public:
 
  static bool DashMatchCompare(const nsAString& aAttributeValue,
@@ -68,12 +70,16 @@ public:
   static float ColorComponentToFloat(PRUint8 aAlpha);
 
   /*
    * Does this child count as significant for selector matching?
    */
   static bool IsSignificantChild(nsIContent* aChild,
                                    bool aTextIsSignificant,
                                    bool aWhitespaceIsSignificant);
+
+  static void ReportUseOfDeprecatedMethod(nsIDocument* aDocument,
+                                          nsIURI* aURI,
+                                          const char* aWarning);
 };
 
 
 #endif /* nsStyleUtil_h___ */
